
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output taliforth-py65mon.bin platform/platform-py65mon.asm
; Sun Apr 28 11:34:51 2024

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0000						ram_start = $0000          ; start of installed 32 KiB of RAM
=32767						ram_end   = $8000-1        ; end of installed RAM
=$0000						zpage     = ram_start      ; begin of Zero Page ($0000-$00ff)
=$7f						zpage_end = $7F            ; end of Zero Page used ($0000-$007f)
=$0100						stack0    = $0100          ; begin of Return Stack ($0100-$01ff)
=31744						hist_buff = ram_end-$03ff  ; begin of history buffers
=$0000						user0     = zpage            ; TaliForth2 system variables
=$ff						rsp0      = $ff              ; initial Return Stack Pointer (65c02 stack)
=$ff						bsize     = $ff              ; size of input/output buffers
=512						buffer0   = stack0+$100      ; input buffer ($0200-$027f)
=768						cp0       = buffer0+bsize+1  ; Dictionary starts after last buffer
=31744						cp_end    = hist_buff        ; Last RAM byte available for code
=$ff						padoffset = $ff              ; offset from CP to PAD (holds number strings)
=						TALI_OPTIONAL_WORDS := [ "ed", "editor", "ramdrive", "block", "environment?", "assembler", "disassembler", "wordlist" ]
=["lf"]						TALI_OPTION_CR_EOL := [ "lf" ]
=1						TALI_OPTION_HISTORY := 1
=0						TALI_OPTION_TERSE := 0

;******  Processing file: platform/../taliforth.asm

.8000						code0:
.8000						forth:

;******  Processing file: platform/../words/all.asm

.8000						xt_cold:
.8000		d8		cld		                cld
.8001		a9 2d		lda #$2d	                lda #<kernel_putc
.8003		85 12		sta $12		                sta output
.8005		a9 f0		lda #$f0	                lda #>kernel_putc
.8007		85 13		sta $13		                sta output+1
.8009		a2 1d		ldx #$1d	                ldx #cold_zp_table_end-cold_zp_table-1
.800b						_load_zp_loop:
.800b		bd 9e b3	lda $b39e,x	                lda cold_zp_table,x
.800e		95 00		sta $00,x	                sta zpage,x
.8010		ca		dex		                dex
.8011		d0 f8		bne $800b	                bne _load_zp_loop
.8013		ad 9e b3	lda $b39e	                lda cold_zp_table
.8016		85 00		sta $00		                sta zpage
.8018		a2 ff		ldx #$ff	                ldx #rsp0
.801a		9a		txs		                txs
.801b		a2 78		ldx #$78	                ldx #dsp0
.801d		a0 35		ldy #$35	                ldy #cold_user_table_end-cold_user_table-1
.801f		a9 00		lda #$00	                lda #0
.8021						_load_user_vars_loop:
.8021		b9 bc b3	lda $b3bc,y	                lda cold_user_table,y
.8024		91 08		sta ($08),y	                sta (up),y
.8026		88		dey		                dey
.8027		d0 f8		bne $8021	                bne _load_user_vars_loop
.8029		ad bc b3	lda $b3bc	                lda cold_user_table
.802c		92 08		sta ($08)	                sta (up)
.802e		20 69 85	jsr $8569	                jsr xt_cr
.8031		ca		dex		                dex
.8032		ca		dex		                dex
.8033		ca		dex		                dex
.8034		ca		dex		                dex
.8035		a9 8c		lda #$8c	                lda #<forth_words_start
.8037		95 02		sta $02,x	                sta 2,x
.8039		a9 ba		lda #$ba	                lda #>forth_words_start
.803b		95 03		sta $03,x	                sta 3,x
.803d		a9 e2		lda #$e2	                lda #<(user_words_end-forth_words_start)
.803f		95 00		sta $00,x	                sta 0,x
.8041		a9 00		lda #$00	                lda #>(user_words_end-forth_words_start)
.8043		95 01		sta $01,x	                sta 1,x
.8045		20 28 8a	jsr $8a28	                jsr xt_evaluate
.8048		9c 00 7c	stz $7c00	                stz hist_buff
.804b		9c 80 7c	stz $7c80	                stz hist_buff+$80
.804e		9c 00 7d	stz $7d00	                stz hist_buff+$100
.8051		9c 80 7d	stz $7d80	                stz hist_buff+$180
.8054		9c 00 7e	stz $7e00	                stz hist_buff+$200
.8057		9c 80 7e	stz $7e80	                stz hist_buff+$280
.805a		9c 00 7f	stz $7f00	                stz hist_buff+$300
.805d		9c 80 7f	stz $7f80	                stz hist_buff+$380
.8060						xt_abort:
.8060		a2 78		ldx #$78	                ldx #dsp0
.8062						xt_quit:
.8062		8a		txa		                txa             ; Save the DSP that we just defined
.8063		a2 ff		ldx #$ff	                ldx #rsp0
.8065		9a		txs		                txs
.8066		aa		tax		                tax             ; Restore the DSP. Dude, seriously.
.8067		64 04		stz $04		                stz ip
.8069		64 05		stz $05		                stz ip+1
.806b		64 0a		stz $0a		                stz insrc
.806d		64 0b		stz $0b		                stz insrc+1
.806f		a9 00		lda #$00	                lda #0
.8071		a0 04		ldy #$04	                ldy #blk_offset
.8073		91 08		sta ($08),y	                sta (up),y
.8075		c8		iny		                iny
.8076		91 08		sta ($08),y	                sta (up),y
.8078		a9 fc		lda #$fc	                lda #(256-4)
.807a		85 1f		sta $1f		                sta loopctrl
.807c		64 1a		stz $1a		                stz state
.807e		64 1b		stz $1b		                stz state+1
.8080						_get_line:
.8080		a9 00		lda #$00	                lda #<buffer0   ; input buffer, this is paranoid
.8082		85 0c		sta $0c		                sta cib
.8084		a9 02		lda #$02	                lda #>buffer0
.8086		85 0d		sta $0d		                sta cib+1
.8088		64 0e		stz $0e		                stz ciblen
.808a		64 0f		stz $0f		                stz ciblen+1
.808c		20 95 90	jsr $9095	                jsr xt_refill           ; ( -- f )
.808f		b5 00		lda $00,x	                lda 0,x
.8091		d0 05		bne $8098	                bne _success
.8093		a9 06		lda #$06	                lda #err_refill
.8095		4c f5 d7	jmp $d7f5	                jmp error
.8098						_success:
.8098		e8		inx		                inx                     ; drop
.8099		e8		inx		                inx
.809a		20 4c d7	jsr $d74c	                jsr interpret
.809d		e0 78		cpx #$78	                cpx #dsp0
.809f		f0 05		beq $80a6	                beq _stack_ok
.80a1		90 03		bcc $80a6	                bcc _stack_ok           ; DSP must always be smaller than DSP0
.80a3		4c f3 d7	jmp $d7f3	                jmp underflow_error
.80a6						_stack_ok:
.80a6		a5 1a		lda $1a		                lda state
.80a8		f0 02		beq $80ac	                beq _print
.80aa		a9 01		lda #$01	                lda #1                  ; number for "compile" string
.80ac						_print:
.80ac		20 46 d8	jsr $d846	                jsr print_string
.80af		80 cf		bra $8080	                bra _get_line
.80b1						z_cold:
.80b1						z_abort:
.80b1						z_quit:

;******  Processing file: platform/../words/core.asm

.80b1						xt_abort_quote:
.80b1		20 2d 91	jsr $912d	                jsr xt_s_quote          ; S"
.80b4		a0 80		ldy #$80	                ldy #>abort_quote_runtime
.80b6		a9 bc		lda #$bc	                lda #<abort_quote_runtime
.80b8		20 1c d6	jsr $d61c	                jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
.80bb		60		rts		z_abort_quote:  rts
.80bc						abort_quote_runtime:
.80bc		b5 04		lda $04,x	                lda 4,x
.80be		15 05		ora $05,x	                ora 5,x
.80c0		f0 09		beq $80cb	                beq _done       ; if FALSE, we're done
.80c2		20 45 96	jsr $9645	                jsr xt_type
.80c5		20 69 85	jsr $8569	                jsr xt_cr
.80c8		4c 60 80	jmp $8060	                jmp xt_abort    ; not JSR, so never come back
.80cb						_done:
.80cb		8a		txa		                txa
.80cc		18		clc		                clc
.80cd		69 06		adc #$06	                adc #6
.80cf		aa		tax		                tax
.80d0		60		rts		                rts
.80d1						xt_abs:
.80d1		20 df d7	jsr $d7df	                jsr underflow_1
.80d4		b5 01		lda $01,x	                lda 1,x
.80d6		10 0d		bpl $80e5	                bpl _done       ; positive number, easy money!
.80d8		38		sec		                sec
.80d9		a9 00		lda #$00	                lda #0
.80db		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.80dd		95 00		sta $00,x	                sta 0,x
.80df		a9 00		lda #$00	                lda #0          ; MSB
.80e1		f5 01		sbc $01,x	                sbc 1,x
.80e3		95 01		sta $01,x	                sta 1,x
.80e5						_done:
.80e5		60		rts		z_abs:          rts
.80e6						xt_accept:
.80e6		20 e4 d7	jsr $d7e4	                jsr underflow_2
.80e9		b5 00		lda $00,x	                lda 0,x
.80eb		15 01		ora $01,x	                ora 1,x
.80ed		d0 09		bne $80f8	                bne _not_zero
.80ef		e8		inx		                inx
.80f0		e8		inx		                inx
.80f1		74 00		stz $00,x	                stz 0,x
.80f3		74 01		stz $01,x	                stz 1,x
.80f5		4c c4 81	jmp $81c4	                jmp accept_done
.80f8						_not_zero:
.80f8		b5 00		lda $00,x	                lda 0,x         ; number of chars to get in tmp2 ...
.80fa		85 27		sta $27		                sta tmp2
.80fc		64 28		stz $28		                stz tmp2+1      ; ... but we only accept max 255 chars
.80fe		b5 02		lda $02,x	                lda 2,x         ; address of buffer is NOS, to tmp1
.8100		85 25		sta $25		                sta tmp1
.8102		b5 03		lda $03,x	                lda 3,x
.8104		85 26		sta $26		                sta tmp1+1
.8106		e8		inx		                inx
.8107		e8		inx		                inx
.8108		a0 00		ldy #$00	                ldy #0
.810a		a5 1c		lda $1c		                lda status
.810c		29 f7		and #$f7	                and #$F7
.810e		1a		inc a		               ina
.810f		09 08		ora #$08	                ora #%00001000
.8111		85 1c		sta $1c		                sta status
.8113						accept_loop:
.8113		20 69 8b	jsr $8b69	                jsr key_a
.8116		c9 0a		cmp #$0a	                cmp #AscLF
.8118		f0 20		beq $813a	                beq _eol
.811a		c9 0d		cmp #$0d	                cmp #AscCR
.811c		f0 1c		beq $813a	                beq _eol
.811e		c9 08		cmp #$08	                cmp #AscBS
.8120		f0 22		beq $8144	                beq _backspace
.8122		c9 7f		cmp #$7f	                cmp #AscDEL     ; (CTRL-h)
.8124		f0 1e		beq $8144	                beq _backspace
.8126		c9 10		cmp #$10	                cmp #AscCP
.8128		f0 36		beq $8160	                beq _ctrl_p
.812a		c9 0e		cmp #$0e	                cmp #AscCN
.812c		f0 44		beq $8172	                beq _ctrl_n
.812e		91 25		sta ($25),y	                sta (tmp1),y
.8130		c8		iny		                iny
.8131		20 3b 88	jsr $883b	                jsr emit_a
.8134		c4 27		cpy $27		                cpy tmp2        ; reached character limit?
.8136		d0 db		bne $8113	                bne accept_loop       ; fall through if buffer limit reached
.8138		80 03		bra $813d	                bra _buffer_full
.813a						_eol:
.813a		20 39 93	jsr $9339	                jsr xt_space    ; print final space
.813d						_buffer_full:
.813d		94 00		sty $00,x	                sty 0,x         ; Y contains number of chars accepted already
.813f		74 01		stz $01,x	                stz 1,x         ; we only accept 256 chars
.8141		4c c4 81	jmp $81c4	                jmp accept_done
.8144						_backspace:
.8144		c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8146		d0 06		bne $814e	                bne +
.8148		a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.814a		20 3b 88	jsr $883b	                jsr emit_a
.814d		c8		iny		                iny
.814e						+
.814e		88		dey		                dey
.814f		a9 08		lda #$08	                lda #AscBS      ; move back one
.8151		20 3b 88	jsr $883b	                jsr emit_a
.8154		a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.8156		20 3b 88	jsr $883b	                jsr emit_a
.8159		a9 08		lda #$08	                lda #AscBS      ; move back over space
.815b		20 3b 88	jsr $883b	                jsr emit_a
.815e		80 b3		bra $8113	                bra accept_loop
.8160						_ctrl_p:
.8160		a5 1c		lda $1c		                lda status
.8162		29 07		and #$07	                and #7
.8164		d0 08		bne $816e	                bne _ctrl_p_dec
.8166		a5 1c		lda $1c		                lda status
.8168		09 07		ora #$07	                ora #7
.816a		85 1c		sta $1c		                sta status
.816c		80 11		bra $817f	                bra _recall_history
.816e						_ctrl_p_dec:
.816e		c6 1c		dec $1c		                dec status
.8170		80 0d		bra $817f	                bra _recall_history
.8172						_ctrl_n:
.8172		a9 08		lda #$08	                lda #$8
.8174		24 1c		bit $1c		                bit status
.8176		d0 07		bne $817f	                bne _recall_history
.8178		a5 1c		lda $1c		                lda status
.817a		29 f7		and #$f7	                and #$F7
.817c		1a		inc a		               ina
.817d		85 1c		sta $1c		                sta status
.817f						_recall_history:
.817f		a9 08		lda #$08	                lda #%00001000
.8181		14 1c		trb $1c		                trb status
.8183		20 df 81	jsr $81df	                jsr accept_total_recall
.8186		a9 0d		lda #$0d	                lda #AscCR
.8188		20 3b 88	jsr $883b	                jsr emit_a
.818b						input_clear:
.818b		c0 00		cpy #$00	                cpy #0
.818d		f0 08		beq $8197	                beq input_cleared
.818f		a9 20		lda #$20	                lda #AscSP
.8191		20 3b 88	jsr $883b	                jsr emit_a
.8194		88		dey		                dey
.8195		80 f4		bra $818b	                bra input_clear
.8197						input_cleared:
.8197		a9 0d		lda #$0d	                lda #AscCR
.8199		20 3b 88	jsr $883b	                jsr emit_a
.819c		b1 29		lda ($29),y	                lda (tmp3),y
.819e		85 1d		sta $1d		                sta status+1
.81a0		e6 29		inc $29		                inc tmp3
.81a2		d0 02		bne $81a6	                bne +           ; Increment the upper byte on carry.
.81a4		e6 2a		inc $2a		                inc tmp3+1
.81a6						+
.81a6		a9 0d		lda #$0d	                lda #AscCR
.81a8		20 3b 88	jsr $883b	                jsr emit_a
.81ab						_history_loop:
.81ab		c4 1d		cpy $1d		                cpy status+1
.81ad		d0 03		bne $81b2	                bne +
.81af		4c 13 81	jmp $8113	                jmp accept_loop       ; Needs a long jump
.81b2						+
.81b2		c4 27		cpy $27		                cpy tmp2
.81b4		f0 0a		beq $81c0	                beq _hist_filled_buffer
.81b6		b1 29		lda ($29),y	                lda (tmp3),y
.81b8		91 25		sta ($25),y	                sta (tmp1),y
.81ba		20 3b 88	jsr $883b	                jsr emit_a
.81bd		c8		iny		                iny
.81be		80 eb		bra $81ab	                bra _history_loop
.81c0						_hist_filled_buffer:
.81c0		88		dey		                dey
.81c1		4c 13 81	jmp $8113	                jmp accept_loop
.81c4						accept_done:
.81c4		20 df 81	jsr $81df	                jsr accept_total_recall
.81c7		85 1d		sta $1d		                sta status+1
.81c9		a0 00		ldy #$00	                ldy #0
.81cb		91 29		sta ($29),y	                sta (tmp3),y
.81cd		e6 29		inc $29		                inc tmp3
.81cf		d0 02		bne $81d3	                bne +           ; Increment the upper byte on carry.
.81d1		e6 2a		inc $2a		                inc tmp3+1
.81d3						+
.81d3						_save_history_loop:
.81d3		c4 1d		cpy $1d		                cpy status+1
.81d5		f0 07		beq $81de	                beq _save_history_done
.81d7		b1 25		lda ($25),y	                lda (tmp1),y
.81d9		91 29		sta ($29),y	                sta (tmp3),y
.81db		c8		iny		                iny
.81dc		80 f5		bra $81d3	                bra _save_history_loop
.81de						_save_history_done:
.81de						z_accept:
.81de		60		rts		                rts
.81df						accept_total_recall:
.81df		a9 00		lda #$00	                lda #<hist_buff
.81e1		85 29		sta $29		                sta tmp3
.81e3		a9 7c		lda #$7c	                lda #>hist_buff
.81e5		85 2a		sta $2a		                sta tmp3+1
.81e7		a5 1c		lda $1c		                lda status
.81e9		6a		ror a		                ror
.81ea		29 03		and #$03	                and #3
.81ec		18		clc		                clc
.81ed		65 2a		adc $2a		                adc tmp3+1
.81ef		85 2a		sta $2a		                sta tmp3+1
.81f1		a5 1c		lda $1c		                lda status
.81f3		6a		ror a		                ror             ; Rotate through carry into msb.
.81f4		6a		ror a		                ror
.81f5		29 80		and #$80	                and #$80
.81f7		18		clc		                clc
.81f8		65 29		adc $29		                adc tmp3
.81fa		85 29		sta $29		                sta tmp3
.81fc		90 02		bcc $8200	                bcc +           ; Increment the upper byte on carry.
.81fe		e6 2a		inc $2a		                inc tmp3+1
.8200						+
.8200		98		tya		                tya
.8201		c9 80		cmp #$80	                cmp #$80
.8203		90 02		bcc $8207	                bcc +
.8205		a9 7f		lda #$7f	                lda #$7F
.8207						+
.8207		60		rts		                rts
.8208						xt_action_of:
.8208		a5 1a		lda $1a		                lda state
.820a		05 1b		ora $1b		                ora state+1
.820c		f0 0c		beq $821a	                beq _interpreting
.820e						_compiling:
.820e		20 21 83	jsr $8321	                jsr xt_bracket_tick
.8211		a0 86		ldy #$86	                ldy #>xt_defer_fetch
.8213		a9 7d		lda #$7d	                lda #<xt_defer_fetch
.8215		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.8218		80 06		bra $8220	                bra _done
.821a						_interpreting:
.821a		20 d2 93	jsr $93d2	                jsr xt_tick
.821d		20 7d 86	jsr $867d	                jsr xt_defer_fetch
.8220						_done:
.8220		60		rts		z_action_of:           rts
.8221						xt_again:
.8221		20 df d7	jsr $d7df	                jsr underflow_1
.8224		b5 01		lda $01,x	                lda 1,x
.8226		a8		tay		                tay
.8227		b5 00		lda $00,x	                lda 0,x         ; A=LSB, Y=MSB
.8229		20 21 d6	jsr $d621	                jsr cmpl_jump
.822c		e8		inx		                inx
.822d		e8		inx		                inx
.822e		60		rts		z_again:        rts
.822f						xt_align:
.822f						xt_aligned:
.822f						z_align:
.822f						z_aligned:
.822f		60		rts		                rts             ; stripped out during native compile
.8230						xt_allot:
.8230		20 df d7	jsr $d7df	                jsr underflow_1
.8233		b5 01		lda $01,x	                lda 1,x
.8235		30 22		bmi $8259	                bmi _release
.8237		18		clc		                clc
.8238		a5 00		lda $00		                lda cp
.823a		75 00		adc $00,x	                adc 0,x
.823c		85 00		sta $00		                sta cp
.823e		a5 01		lda $01		                lda cp+1
.8240		75 01		adc $01,x	                adc 1,x
.8242		85 01		sta $01		                sta cp+1
.8244		a0 00		ldy #$00	                ldy #<cp_end
.8246		c4 00		cpy $00		                cpy cp
.8248		a9 7c		lda #$7c	                lda #>cp_end
.824a		e5 01		sbc $01		                sbc cp+1
.824c		b0 48		bcs $8296	                bcs _done               ; we're fine.
.824e		84 00		sty $00		                sty cp                  ; still #<cp_end
.8250		a9 7c		lda #$7c	                lda #>cp_end
.8252		85 01		sta $01		                sta cp+1
.8254		a9 00		lda #$00	                lda #err_allot
.8256		4c f5 d7	jmp $d7f5	                jmp error
.8259						_release:
.8259		ca		dex		                dex
.825a		ca		dex		                dex
.825b		a5 00		lda $00		                lda cp
.825d		95 00		sta $00,x	                sta 0,x
.825f		a5 01		lda $01		                lda cp+1
.8261		95 01		sta $01,x	                sta 1,x
.8263		20 ac 8f	jsr $8fac	                jsr xt_plus                     ; new CP is now TOS
.8266		ca		dex		                dex
.8267		ca		dex		                dex                             ; new CP now NOS
.8268		a9 00		lda #$00	                lda #<cp0
.826a		95 00		sta $00,x	                sta 0,x
.826c		a9 03		lda #$03	                lda #>cp0
.826e		95 01		sta $01,x	                sta 1,x                         ; CP0 is TOS
.8270		20 0b d7	jsr $d70b	                jsr compare_16bit               ; still ( CP CP0 )
.8273		f0 17		beq $828c	                beq _nega_done
.8275		30 15		bmi $828c	                bmi _nega_done
.8277		a9 00		lda #$00	                lda #<cp0
.8279		85 00		sta $00		                sta cp
.827b		a9 03		lda #$03	                lda #>cp0
.827d		85 01		sta $01		                sta cp+1
.827f		a9 6e		lda #$6e	                lda #<dictionary_start
.8281		85 02		sta $02		                sta dp
.8283		a9 bb		lda #$bb	                lda #>dictionary_start
.8285		85 03		sta $03		                sta dp+1
.8287		a9 0a		lda #$0a	                lda #err_negallot
.8289		4c f5 d7	jmp $d7f5	                jmp error
.828c						_nega_done:
.828c		b5 02		lda $02,x	                lda 2,x
.828e		85 00		sta $00		                sta cp
.8290		b5 03		lda $03,x	                lda 3,x
.8292		85 01		sta $01		                sta cp+1
.8294		e8		inx		                inx
.8295		e8		inx		                inx                     ; drop through to _done
.8296						_done:
.8296		e8		inx		                inx
.8297		e8		inx		                inx
.8298						z_allot:
.8298		60		rts		                rts
.8299						xt_and:
.8299		20 e4 d7	jsr $d7e4	                jsr underflow_2
.829c		b5 00		lda $00,x	                lda 0,x
.829e		35 02		and $02,x	                and 2,x
.82a0		95 02		sta $02,x	                sta 2,x
.82a2		b5 01		lda $01,x	                lda 1,x
.82a4		35 03		and $03,x	                and 3,x
.82a6		95 03		sta $03,x	                sta 3,x
.82a8		e8		inx		                inx
.82a9		e8		inx		                inx
.82aa		60		rts		z_and:          rts
.82ab						xt_at_xy:
.82ab		20 e4 d7	jsr $d7e4	                jsr underflow_2
.82ae		a5 18		lda $18		                lda base
.82b0		48		pha		                pha
.82b1		a9 0a		lda #$0a	                lda #10
.82b3		85 18		sta $18		                sta base
.82b5		a9 1b		lda #$1b	                lda #AscESC
.82b7		20 3b 88	jsr $883b	                jsr emit_a
.82ba		a9 5b		lda #$5b	                lda #'['
.82bc		20 3b 88	jsr $883b	                jsr emit_a
.82bf		20 42 8e	jsr $8e42	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82c2		20 4c d8	jsr $d84c	                jsr print_u
.82c5		a9 3b		lda #$3b	                lda #';'
.82c7		20 3b 88	jsr $883b	                jsr emit_a
.82ca		20 42 8e	jsr $8e42	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82cd		20 4c d8	jsr $d84c	                jsr print_u
.82d0		a9 48		lda #$48	                lda #'H'
.82d2		20 3b 88	jsr $883b	                jsr emit_a
.82d5		68		pla		                pla
.82d6		85 18		sta $18		                sta base
.82d8		60		rts		z_at_xy:        rts
.82d9						xt_backslash:
.82d9		a0 04		ldy #$04	                ldy #blk_offset
.82db		b1 08		lda ($08),y	                lda (up),y
.82dd		c8		iny		                iny
.82de		11 08		ora ($08),y	                ora (up),y
.82e0		f0 19		beq $82fb	                beq backslash_not_block
.82e2		a5 10		lda $10		                lda toin
.82e4		29 3f		and #$3f	                and #$3F
.82e6		f0 1b		beq $8303	                beq z_backslash
.82e8		c9 01		cmp #$01	                cmp #$1
.82ea		f0 17		beq $8303	                beq z_backslash
.82ec		a5 10		lda $10		                lda toin
.82ee		29 c0		and #$c0	                and #$C0        ; Clear lower bits to move to beginning of line.
.82f0		18		clc		                clc             ; Add $40 (64 decimal) to move to next line.
.82f1		69 40		adc #$40	                adc #$40
.82f3		85 10		sta $10		                sta toin
.82f5		90 0c		bcc $8303	                bcc z_backslash
.82f7		e6 11		inc $11		                inc toin+1
.82f9		80 08		bra $8303	                bra z_backslash
.82fb						backslash_not_block:
.82fb		a5 0e		lda $0e		                lda ciblen
.82fd		85 10		sta $10		                sta toin
.82ff		a5 0f		lda $0f		                lda ciblen+1
.8301		85 11		sta $11		                sta toin+1
.8303		60		rts		z_backslash:    rts
.8304						xt_base:
.8304		ca		dex		                dex
.8305		ca		dex		                dex
.8306		a9 18		lda #$18	                lda #<base
.8308		95 00		sta $00,x	                sta 0,x         ; LSB
.830a		74 01		stz $01,x	                stz 1,x         ; MSB is always 0
.830c		60		rts		z_base:         rts
.830d						xt_begin:
.830d		20 91 8a	jsr $8a91	                jsr xt_here
.8310		60		rts		z_begin:        rts
.8311						xt_bl:
.8311		ca		dex		                dex
.8312		ca		dex		                dex
.8313		a9 20		lda #$20	                lda #AscSP
.8315		95 00		sta $00,x	                sta 0,x
.8317		74 01		stz $01,x	                stz 1,x
.8319		60		rts		z_bl:           rts
.831a						xt_bracket_char:
.831a		20 60 83	jsr $8360	                jsr xt_char
.831d		20 aa 8b	jsr $8baa	                jsr xt_literal
.8320		60		rts		z_bracket_char: rts
.8321						xt_bracket_tick:
.8321		20 d2 93	jsr $93d2	                jsr xt_tick
.8324		20 aa 8b	jsr $8baa	                jsr xt_literal
.8327		60		rts		z_bracket_tick: rts
.8328						xt_buffer_colon:
.8328		20 6f 85	jsr $856f	                jsr xt_create
.832b		20 30 82	jsr $8230	                jsr xt_allot
.832e		60		rts		z_buffer_colon: rts
.832f						xt_c_comma:
.832f		20 df d7	jsr $d7df	                jsr underflow_1
.8332		b5 00		lda $00,x	                lda 0,x
.8334		20 2c d6	jsr $d62c	                jsr cmpl_a
.8337		e8		inx		                inx
.8338		e8		inx		                inx
.8339		60		rts		z_c_comma:      rts
.833a						xt_c_fetch:
.833a		20 df d7	jsr $d7df	                jsr underflow_1
.833d		a1 00		lda ($00,x)	                lda (0,x)
.833f		95 00		sta $00,x	                sta 0,x
.8341		74 01		stz $01,x	                stz 1,x         ; Ignore LSB
.8343		60		rts		z_c_fetch:      rts
.8344						xt_c_store:
.8344		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8347		b5 02		lda $02,x	                lda 2,x
.8349		81 00		sta ($00,x)	                sta (0,x)
.834b		e8		inx		                inx
.834c		e8		inx		                inx
.834d		e8		inx		                inx
.834e		e8		inx		                inx
.834f		60		rts		z_c_store:      rts
.8350						xt_cell_plus:
.8350		20 df d7	jsr $d7df	                jsr underflow_1
.8353		f6 00		inc $00,x	                inc 0,x
.8355		d0 02		bne $8359	                bne +
.8357		f6 01		inc $01,x	                inc 1,x
.8359						+
.8359		f6 00		inc $00,x	                inc 0,x
.835b		d0 02		bne $835f	                bne _done
.835d		f6 01		inc $01,x	                inc 1,x
.835f						_done:
.835f		60		rts		z_cell_plus:    rts
.8360						xt_char:
.8360		20 aa 8e	jsr $8eaa	                jsr xt_parse_name
.8363		b5 00		lda $00,x	                lda 0,x
.8365		15 01		ora $01,x	                ora 1,x
.8367		d0 05		bne $836e	                bne _not_empty
.8369		a9 05		lda #$05	                lda #err_noname
.836b		4c f5 d7	jmp $d7f5	                jmp error
.836e						_not_empty:
.836e		e8		inx		                inx             ; drop number of characters, leave addr
.836f		e8		inx		                inx
.8370		a1 00		lda ($00,x)	                lda (0,x)       ; get character (equivalent to C@)
.8372		95 00		sta $00,x	                sta 0,x
.8374		74 01		stz $01,x	                stz 1,x         ; MSB is always zero
.8376		60		rts		z_char:         rts
.8377						xt_chars:
.8377		20 df d7	jsr $d7df	                jsr underflow_1
.837a		60		rts		z_chars:        rts
.837b						xt_colon:
.837b		a5 1a		lda $1a		                lda state
.837d		05 1b		ora $1b		                ora state+1
.837f		f0 05		beq $8386	                beq +
.8381		a9 07		lda #$07	                lda #err_state
.8383		4c f5 d7	jmp $d7f5	                jmp error
.8386						+
.8386		c6 1a		dec $1a		                dec state
.8388		c6 1b		dec $1b		                dec state+1
.838a		a9 40		lda #$40	                lda #%01000000
.838c		04 1c		tsb $1c		                tsb status
.838e		20 26 d7	jsr $d726	                jsr current_to_dp
.8391		a5 03		lda $03		                lda dp+1            ; CREATE uses a lot of variables
.8393		48		pha		                pha
.8394		a5 02		lda $02		                lda dp
.8396		48		pha		                pha
.8397		a9 80		lda #$80	                lda #%10000000
.8399		04 1c		tsb $1c		                tsb status
.839b		20 6f 85	jsr $856f	                jsr xt_create
.839e		20 26 d7	jsr $d726	                jsr current_to_dp   ; This might be able to be omitted
.83a1		a5 02		lda $02		                lda dp
.83a3		85 06		sta $06		                sta workword
.83a5		a5 03		lda $03		                lda dp+1
.83a7		85 07		sta $07		                sta workword+1
.83a9		68		pla		                pla
.83aa		85 02		sta $02		                sta dp
.83ac		68		pla		                pla
.83ad		85 03		sta $03		                sta dp+1
.83af		20 39 d7	jsr $d739	                jsr dp_to_current
.83b2		a5 00		lda $00		                lda cp
.83b4		38		sec		                sec
.83b5		e9 03		sbc #$03	                sbc #3
.83b7		85 00		sta $00		                sta cp
.83b9		b0 02		bcs $83bd	                bcs _done
.83bb		c6 01		dec $01		                dec cp+1
.83bd						_done:
.83bd		60		rts		z_colon:        rts
.83be						xt_colon_noname:
.83be		a5 1a		lda $1a		                lda state
.83c0		05 1b		ora $1b		                ora state+1
.83c2		f0 05		beq $83c9	                beq +
.83c4		a9 07		lda #$07	                lda #err_state
.83c6		4c f5 d7	jmp $d7f5	                jmp error
.83c9						+
.83c9		c6 1a		dec $1a		                dec state
.83cb		c6 1b		dec $1b		                dec state+1
.83cd		a9 40		lda #$40	                lda #%01000000
.83cf		14 1c		trb $1c		                trb status
.83d1		a5 00		lda $00		                lda cp
.83d3		85 06		sta $06		                sta workword
.83d5		a5 01		lda $01		                lda cp+1
.83d7		85 07		sta $07		                sta workword+1
.83d9						_done:
.83d9		60		rts		z_colon_noname:        rts
.83da						xt_comma:
.83da		20 df d7	jsr $d7df	                jsr underflow_1
.83dd		b5 00		lda $00,x	                lda 0,x
.83df		92 00		sta ($00)	                sta (cp)
.83e1		e6 00		inc $00		                inc cp
.83e3		d0 02		bne $83e7	                bne +
.83e5		e6 01		inc $01		                inc cp+1
.83e7						+
.83e7		b5 01		lda $01,x	                lda 1,x
.83e9		92 00		sta ($00)	                sta (cp)
.83eb		e6 00		inc $00		                inc cp
.83ed		d0 02		bne $83f1	                bne _done
.83ef		e6 01		inc $01		                inc cp+1
.83f1						_done:
.83f1		e8		inx		                inx
.83f2		e8		inx		                inx
.83f3		60		rts		z_comma:        rts
.83f4						xt_compile_comma:
.83f4		20 df d7	jsr $d7df	                jsr underflow_1
.83f7		b5 01		lda $01,x	                lda 1,x                 ; MSB
.83f9		48		pha		                pha
.83fa		b5 00		lda $00,x	                lda 0,x
.83fc		48		pha		                pha                     ; LSB
.83fd		20 b4 9b	jsr $9bb4	                jsr xt_int_to_name      ; ( xt -- nt )
.8400		b5 00		lda $00,x	                lda 0,x
.8402		15 01		ora $01,x	                ora 1,x
.8404		d0 03		bne $8409	                bne _check_nt
.8406		4c 03 85	jmp $8503	                jmp compile_as_jsr
.8409						_check_nt:
.8409		b5 00		lda $00,x	                lda 0,x
.840b		85 23		sta $23		                sta tmptos
.840d		b5 01		lda $01,x	                lda 1,x
.840f		85 24		sta $24		                sta tmptos+1
.8411		f6 00		inc $00,x	                inc 0,x
.8413		d0 02		bne $8417	                bne +
.8415		f6 01		inc $01,x	                inc 1,x                 ; ( nt -- nt+1 )
.8417						+
.8417		a1 00		lda ($00,x)	                lda (0,x)
.8419		85 29		sta $29		                sta tmp3                ; keep copy of status byte for NN
.841b		29 02		and #$02	                and #AN                 ; mask all but Always Native (AN) bit
.841d		f0 0d		beq $842c	                beq _compile_check
.841f		a5 23		lda $23		                lda tmptos
.8421		95 00		sta $00,x	                sta 0,x
.8423		a5 24		lda $24		                lda tmptos+1
.8425		95 01		sta $01,x	                sta 1,x
.8427		20 dc 9d	jsr $9ddc	                jsr xt_wordsize         ; ( nt -- u )
.842a		80 25		bra $8451	                bra _compile_as_code
.842c						_compile_check:
.842c		a5 29		lda $29		                lda tmp3
.842e		29 08		and #$08	                and #NN
.8430		f0 03		beq $8435	                beq _check_size_limit
.8432						_jumpto_compile_as_jsr:
.8432		4c 03 85	jmp $8503	                jmp compile_as_jsr    ; too far for BRA
.8435						_check_size_limit:
.8435		a5 23		lda $23		                lda tmptos
.8437		95 00		sta $00,x	                sta 0,x
.8439		a5 24		lda $24		                lda tmptos+1
.843b		95 01		sta $01,x	                sta 1,x
.843d		20 dc 9d	jsr $9ddc	                jsr xt_wordsize         ; ( nt -- u )
.8440		a0 01		ldy #$01	                ldy #nc_limit_offset+1
.8442		b5 01		lda $01,x	                lda 1,x
.8444		d1 08		cmp ($08),y	                cmp (up),y
.8446		90 09		bcc $8451	                bcc _compile_as_code    ; user-defined limit MSB
.8448		d0 e8		bne $8432	                bne _jumpto_compile_as_jsr
.844a		88		dey		                dey
.844b		b1 08		lda ($08),y	                lda (up),y              ; user-defined limit LSB
.844d		d5 00		cmp $00,x	                cmp 0,x
.844f		30 e1		bmi $8432	                bmi _jumpto_compile_as_jsr
.8451						_compile_as_code:
.8451		ca		dex		                dex
.8452		ca		dex		                dex                     ; ( -- u ? )
.8453		ca		dex		                dex
.8454		ca		dex		                dex                     ; ( -- u ? ? )
.8455		b5 04		lda $04,x	                lda 4,x
.8457		95 00		sta $00,x	                sta 0,x                 ; LSB of u
.8459		b5 05		lda $05,x	                lda 5,x
.845b		95 01		sta $01,x	                sta 1,x                 ; ( -- u ? u )
.845d		68		pla		                pla
.845e		95 04		sta $04,x	                sta 4,x                 ; LSB of xt
.8460		68		pla		                pla
.8461		95 05		sta $05,x	                sta 5,x                 ; ( -- xt ? u )
.8463		a5 00		lda $00		                lda cp                  ; LSB of cp
.8465		95 02		sta $02,x	                sta 2,x
.8467		a5 01		lda $01		                lda cp+1
.8469		95 03		sta $03,x	                sta 3,x                 ; ( -- xt cp u )
.846b		a0 00		ldy #$00	                ldy #0
.846d						_strip_loop:
.846d		b9 f1 84	lda $84f1,y	                lda strip_table,y      ; LSB of first word
.8470		d5 04		cmp $04,x	                cmp 4,x                 ; LSB of xt
.8472		d0 07		bne $847b	                bne _next_entry
.8474		b9 f2 84	lda $84f2,y	                lda strip_table+1,y
.8477		d5 05		cmp $05,x	                cmp 5,x
.8479		f0 0c		beq $8487	                beq _found_entry
.847b						_next_entry:
.847b		b9 f1 84	lda $84f1,y	                lda strip_table,y      ; pointing to LSB
.847e		19 f2 84	ora $84f2,y	                ora strip_table+1,y    ; get MSB
.8481		f0 22		beq $84a5	                beq _underflow_strip    ; table done, let's get out of here
.8483		c8		iny		                iny
.8484		c8		iny		                iny
.8485		80 e6		bra $846d	                bra _strip_loop
.8487						_found_entry:
.8487		98		tya		                tya
.8488		4a		lsr a		                lsr
.8489		a8		tay		                tay
.848a		b9 fd 84	lda $84fd,y	                lda strip_size,y
.848d		85 23		sta $23		                sta tmptos              ; save a copy
.848f		18		clc		                clc
.8490		75 04		adc $04,x	                adc 4,x
.8492		95 04		sta $04,x	                sta 4,x
.8494		90 02		bcc $8498	                bcc +
.8496		f6 05		inc $05,x	                inc 5,x                 ; we just care about the carry
.8498						+
.8498		06 23		asl $23		                asl tmptos
.849a		38		sec		                sec
.849b		b5 00		lda $00,x	                lda 0,x
.849d		e5 23		sbc $23		                sbc tmptos
.849f		95 00		sta $00,x	                sta 0,x
.84a1		b0 02		bcs $84a5	                bcs +
.84a3		d6 01		dec $01,x	                dec 1,x                 ; we just care about the borrow
.84a5						+
.84a5						_underflow_strip:
.84a5		a0 02		ldy #$02	                ldy #uf_strip_offset
.84a7		b1 08		lda ($08),y	                lda (up),y
.84a9		c8		iny		                iny
.84aa		11 08		ora ($08),y	                ora (up),y
.84ac		f0 1c		beq $84ca	                beq cmpl_inline
.84ae		a5 29		lda $29		                lda tmp3
.84b0		29 10		and #$10	                and #UF
.84b2		f0 16		beq $84ca	                beq cmpl_inline
.84b4		18		clc		                clc
.84b5		b5 04		lda $04,x	                lda 4,x
.84b7		69 03		adc #$03	                adc #3
.84b9		95 04		sta $04,x	                sta 4,x
.84bb		90 02		bcc $84bf	                bcc +
.84bd		f6 05		inc $05,x	                inc 5,x                  ; we just care about the carry
.84bf						+
.84bf		38		sec		                sec
.84c0		b5 00		lda $00,x	                lda 0,x
.84c2		e9 03		sbc #$03	                sbc #3
.84c4		95 00		sta $00,x	                sta 0,x
.84c6		b0 02		bcs $84ca	                bcs +
.84c8		d6 01		dec $01,x	                dec 1,x                  ; we just care about the borrow
.84ca						+
.84ca						cmpl_inline:
.84ca		b5 01		lda $01,x	                lda 1,x                 ; MSB
.84cc		48		pha		                pha
.84cd		b5 00		lda $00,x	                lda 0,x                 ; LSB
.84cf		48		pha		                pha
.84d0		20 59 8d	jsr $8d59	                jsr xt_move
.84d3		18		clc		                clc
.84d4		68		pla		                pla                     ; LSB
.84d5		65 00		adc $00		                adc cp
.84d7		85 00		sta $00		                sta cp
.84d9		68		pla		                pla                     ; MSB
.84da		65 01		adc $01		                adc cp+1
.84dc		85 01		sta $01		                sta cp+1
.84de		60		rts		                rts
.84df						cmpl_inline_y:
.84df		ca		dex		                dex             ; set up stack as ( src dst n -- )
.84e0		ca		dex		                dex
.84e1		ca		dex		                dex
.84e2		ca		dex		                dex
.84e3		94 00		sty $00,x	                sty 0,x
.84e5		74 01		stz $01,x	                stz 1,x             ; assume < 256 bytes
.84e7		a5 00		lda $00		                lda cp
.84e9		95 02		sta $02,x	                sta 2,x
.84eb		a5 01		lda $01		                lda cp+1
.84ed		95 03		sta $03,x	                sta 3,x
.84ef		80 d9		bra $84ca	                bra cmpl_inline
.84f1						strip_table:
>84f1		47 90 32 90 fc 94		                .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
>84f7		25 96 ab 95 00 00		                .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
.84fd						strip_size:
>84fd		04 04 04 06 06 00		                .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
.8503						compile_as_jsr:
.8503		68		pla		                pla             ; LSB
.8504		7a		ply		                ply             ; MSB
.8505		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.8508		e8		inx		                inx             ; drop xt
.8509		e8		inx		                inx
.850a						z_compile_comma:
.850a		60		rts		                rts
.850b						xt_compile_only:
.850b		20 26 d7	jsr $d726	                jsr current_to_dp
.850e		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8510		b1 02		lda ($02),y	                lda (dp),y
.8512		09 01		ora #$01	                ora #CO        ; make sure bit 7 is set
.8514		91 02		sta ($02),y	                sta (dp),y
.8516		60		rts		z_compile_only: rts
.8517						xt_value:
.8517						xt_constant:
.8517		20 df d7	jsr $d7df	                jsr underflow_1
.851a		20 6f 85	jsr $856f	                jsr xt_create
.851d		38		sec		                sec
.851e		a5 00		lda $00		                lda cp
.8520		e9 02		sbc #$02	                sbc #2
.8522		85 25		sta $25		                sta tmp1
.8524		a5 01		lda $01		                lda cp+1
.8526		e9 00		sbc #$00	                sbc #0
.8528		85 26		sta $26		                sta tmp1+1
.852a		a9 35		lda #$35	                lda #<doconst           ; LSB of DOCONST
.852c		92 25		sta ($25)	                sta (tmp1)
.852e		a0 01		ldy #$01	                ldy #1
.8530		a9 d6		lda #$d6	                lda #>doconst           ; MSB of DOCONST
.8532		91 25		sta ($25),y	                sta (tmp1),y
.8534		20 da 83	jsr $83da	                jsr xt_comma            ; drop through to adjust_z
.8537						adjust_z:
.8537		20 25 9c	jsr $9c25	                jsr xt_latestnt         ; gives us ( -- nt )
.853a		b5 00		lda $00,x	                lda 0,x
.853c		85 25		sta $25		                sta tmp1
.853e		b5 01		lda $01,x	                lda 1,x
.8540		85 26		sta $26		                sta tmp1+1
.8542		a0 06		ldy #$06	                ldy #6
.8544		b1 25		lda ($25),y	                lda (tmp1),y
.8546		18		clc		                clc
.8547		69 02		adc #$02	                adc #2
.8549		91 25		sta ($25),y	                sta (tmp1),y
.854b		c8		iny		                iny
.854c		b1 25		lda ($25),y	                lda (tmp1),y
.854e		69 00		adc #$00	                adc #0                  ; only need carry
.8550		91 25		sta ($25),y	                sta (tmp1),y
.8552		e8		inx		                inx
.8553		e8		inx		                inx
.8554						z_value:
.8554		60		rts		z_constant:     rts
.8555						xt_count:
.8555		20 df d7	jsr $d7df	                jsr underflow_1
.8558		a1 00		lda ($00,x)	                lda (0,x)       ; Get number of characters (255 max)
.855a		a8		tay		                tay
.855b		f6 00		inc $00,x	                inc 0,x         ; LSB
.855d		d0 02		bne $8561	                bne +
.855f		f6 01		inc $01,x	                inc 1,x         ; MSB
.8561		98		tya		+               tya
.8562		ca		dex		                dex
.8563		ca		dex		                dex
.8564		95 00		sta $00,x	                sta 0,x         ; LSB
.8566		74 01		stz $01,x	                stz 1,x         ; MSB, always zero
.8568		60		rts		z_count:        rts
.8569						xt_cr:
.8569		a9 0a		lda #$0a	                lda #AscLF
.856b		20 3b 88	jsr $883b	                jsr emit_a
.856e		60		rts		z_cr:           rts
.856f						xt_create:
.856f		20 aa 8e	jsr $8eaa	                jsr xt_parse_name       ; ( addr u )
.8572		b5 00		lda $00,x	                lda 0,x
.8574		15 01		ora $01,x	                ora 1,x
.8576		d0 05		bne $857d	                bne _got_name
.8578		a9 05		lda #$05	                lda #err_noname
.857a		4c f5 d7	jmp $d7f5	                jmp error
.857d						_got_name:
.857d		74 01		stz $01,x	                stz 1,x
.857f		20 3b 95	jsr $953b	                jsr xt_two_dup          ; ( addr u addr u )
.8582		20 fc 9a	jsr $9afc	                jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
.8585		b5 00		lda $00,x	                lda 0,x
.8587		15 01		ora $01,x	                ora 1,x
.8589		f0 1e		beq $85a9	                beq _new_name           ; We haven't seen this one before.
.858b		e8		inx		                inx                     ; Drop flag (nt) from find-name.
.858c		e8		inx		                inx
.858d		24 1c		bit $1c		                bit status
.858f		10 08		bpl $8599	                bpl _redefined_name     ; Bit 7 is zero, so print the message.
.8591		a9 80		lda #$80	                lda #$80                ; Set bit 7 to indicate dup
.8593		05 1c		ora $1c		                ora status
.8595		85 1c		sta $1c		                sta status
.8597		80 18		bra $85b1	                bra _process_name
.8599						_redefined_name:
.8599		a9 02		lda #$02	                lda #str_redefined
.859b		20 1b d8	jsr $d81b	                jsr print_string_no_lf
.859e		20 3b 95	jsr $953b	                jsr xt_two_dup           ; ( addr u addr u )
.85a1		20 45 96	jsr $9645	                jsr xt_type
.85a4		20 39 93	jsr $9339	                jsr xt_space
.85a7		80 08		bra $85b1	                bra _process_name
.85a9						_new_name:
.85a9		e8		inx		                inx                     ; Drop flag (0) from find-name.
.85aa		e8		inx		                inx
.85ab		a9 7f		lda #$7f	                lda #$7F                ; Clear bit 0 of status to indicate new word.
.85ad		25 1c		and $1c		                and status
.85af		85 1c		sta $1c		                sta status
.85b1						_process_name:
.85b1		b5 00		lda $00,x	                lda 0,x
.85b3		85 27		sta $27		                sta tmp2                ; store length of string in tmp2
.85b5		a5 00		lda $00		                lda cp
.85b7		85 25		sta $25		                sta tmp1
.85b9		a5 01		lda $01		                lda cp+1
.85bb		85 26		sta $26		                sta tmp1+1
.85bd		b5 00		lda $00,x	                lda 0,x
.85bf		18		clc		                clc
.85c0		69 08		adc #$08	                adc #8
.85c2		85 29		sta $29		                sta tmp3                ; total header length
.85c4		18		clc		                clc
.85c5		69 03		adc #$03	                adc #3
.85c7		95 00		sta $00,x	                sta 0,x
.85c9		74 01		stz $01,x	                stz 1,x         ; max header size is 255 chars
.85cb		20 30 82	jsr $8230	                jsr xt_allot    ; ( addr )
.85ce		20 26 d7	jsr $d726	                jsr current_to_dp
.85d1		a0 00		ldy #$00	                ldy #0
.85d3		a5 27		lda $27		                lda tmp2
.85d5		91 25		sta ($25),y	                sta (tmp1),y
.85d7		a9 08		lda #$08	                lda #NN
.85d9		09 20		ora #$20	                ora #HC
.85db		c8		iny		                iny
.85dc		91 25		sta ($25),y	                sta (tmp1),y
.85de		c8		iny		                iny
.85df		a5 02		lda $02		                lda dp
.85e1		91 25		sta ($25),y	                sta (tmp1),y
.85e3		c8		iny		                iny
.85e4		a5 03		lda $03		                lda dp+1
.85e6		91 25		sta ($25),y	                sta (tmp1),y
.85e8		c8		iny		                iny
.85e9		a5 26		lda $26		                lda tmp1+1
.85eb		85 03		sta $03		                sta dp+1
.85ed		a5 25		lda $25		                lda tmp1
.85ef		85 02		sta $02		                sta dp
.85f1		18		clc		                clc
.85f2		65 29		adc $29		                adc tmp3        ; add total header length
.85f4		91 25		sta ($25),y	                sta (tmp1),y
.85f6		48		pha		                pha             ; we need this in the next step
.85f7		c8		iny		                iny
.85f8		a5 26		lda $26		                lda tmp1+1
.85fa		69 00		adc #$00	                adc #0          ; only need the carry
.85fc		91 25		sta ($25),y	                sta (tmp1),y
.85fe		c8		iny		                iny
.85ff		68		pla		                pla             ; LSB of "z_" address
.8600		18		clc		                clc
.8601		69 03		adc #$03	                adc #3
.8603		91 25		sta ($25),y	                sta (tmp1),y
.8605		88		dey		                dey             ; get the MSB of xt back
.8606		b1 25		lda ($25),y	                lda (tmp1),y
.8608		69 00		adc #$00	                adc #0          ; only need the carry
.860a		c8		iny		                iny
.860b		c8		iny		                iny
.860c		91 25		sta ($25),y	                sta (tmp1),y
.860e		c8		iny		                iny
.860f		b5 00		lda $00,x	                lda 0,x
.8611		38		sec		                sec
.8612		e9 08		sbc #$08	                sbc #8
.8614		85 23		sta $23		                sta tmptos
.8616		b5 01		lda $01,x	                lda 1,x
.8618		e9 00		sbc #$00	                sbc #0          ; only need carry
.861a		85 24		sta $24		                sta tmptos+1
.861c						_name_loop:
.861c		b1 23		lda ($23),y	                lda (tmptos),y
.861e		c9 5b		cmp #$5b	                cmp #'Z'+1
.8620		b0 06		bcs $8628	                bcs _store_name
.8622		c9 41		cmp #$41	                cmp #'A'
.8624		90 02		bcc $8628	                bcc _store_name
.8626		09 20		ora #$20	                ora #$20
.8628						_store_name:
.8628		91 25		sta ($25),y	                sta (tmp1),y
.862a		c8		iny		                iny
.862b		c6 27		dec $27		                dec tmp2
.862d		d0 ed		bne $861c	                bne _name_loop
.862f		a9 20		lda #$20	                lda #OpJSR
.8631		91 25		sta ($25),y	                sta (tmp1),y
.8633		c8		iny		                iny
.8634		a9 7b		lda #$7b	                lda #<dovar
.8636		91 25		sta ($25),y	                sta (tmp1),y
.8638		c8		iny		                iny
.8639		a9 d6		lda #$d6	                lda #>dovar
.863b		91 25		sta ($25),y	                sta (tmp1),y
.863d		20 39 d7	jsr $d739	                jsr dp_to_current
.8640		e8		inx		                inx
.8641		e8		inx		                inx
.8642		60		rts		z_create:       rts
.8643						xt_decimal:
.8643		a9 0a		lda #$0a	                lda #10
.8645		85 18		sta $18		                sta base
.8647		64 19		stz $19		                stz base+1              ; paranoid
.8649		60		rts		z_decimal:      rts
.864a						xt_defer:
.864a		20 6f 85	jsr $856f	                jsr xt_create
.864d		a5 00		lda $00		                lda cp          ; LSB
.864f		38		sec		                sec
.8650		e9 02		sbc #$02	                sbc #2
.8652		85 25		sta $25		                sta tmp1
.8654		a5 01		lda $01		                lda cp+1        ; MSB
.8656		e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.8658		85 26		sta $26		                sta tmp1+1
.865a		a0 00		ldy #$00	                ldy #0
.865c		a9 49		lda #$49	                lda #<dodefer   ; LSB
.865e		91 25		sta ($25),y	                sta (tmp1),y
.8660		c8		iny		                iny
.8661		a9 d6		lda #$d6	                lda #>dodefer   ; MSB
.8663		91 25		sta ($25),y	                sta (tmp1),y
.8665		a9 5d		lda #$5d	                lda #<defer_error
.8667		92 00		sta ($00)	                sta (cp)
.8669		e6 00		inc $00		                inc cp
.866b		d0 02		bne $866f	                bne +
.866d		e6 01		inc $01		                inc cp+1
.866f						+
.866f		a9 d6		lda #$d6	                lda #>defer_error
.8671		92 00		sta ($00)	                sta (cp)
.8673		e6 00		inc $00		                inc cp
.8675		d0 02		bne $8679	                bne +
.8677		e6 01		inc $01		                inc cp+1
.8679						+
.8679		20 37 85	jsr $8537	                jsr adjust_z    ; adjust header to correct length
.867c		60		rts		z_defer:        rts
.867d						xt_defer_fetch:
.867d		20 2e 94	jsr $942e	                jsr xt_to_body
.8680		20 90 89	jsr $8990	                jsr xt_fetch
.8683		60		rts		z_defer_fetch:  rts
.8684						xt_defer_store:
.8684		20 2e 94	jsr $942e	                jsr xt_to_body
.8687		20 a8 93	jsr $93a8	                jsr xt_store
.868a		60		rts		z_defer_store:  rts
.868b						xt_depth:
.868b		a9 78		lda #$78	                lda #dsp0
.868d		86 1e		stx $1e		                stx tmpdsp
.868f		38		sec		                sec
.8690		e5 1e		sbc $1e		                sbc tmpdsp
.8692		4a		lsr a		                lsr
.8693		ca		dex		                dex
.8694		ca		dex		                dex
.8695		95 00		sta $00,x	                sta 0,x
.8697		74 01		stz $01,x	                stz 1,x
.8699		60		rts		z_depth:        rts
.869a						xt_question_do:
.869a		a0 01		ldy #$01	                ldy #1                  ; 1 is ?DO, jump to common code
.869c		80 02		bra $86a0	                bra do_common           ; skip flag for DO
.869e						xt_do:
.869e		a0 00		ldy #$00	                ldy #0                ; 0 is DO, drop through to DO_COMMON
.86a0						do_common:
.86a0		f0 18		beq $86ba	                beq _compile_do
.86a2		ca		dex		                dex
.86a3		ca		dex		                dex
.86a4		a9 d7		lda #$d7	                lda #<question_do_runtime
.86a6		95 00		sta $00,x	                sta 0,x
.86a8		a9 86		lda #$86	                lda #>question_do_runtime
.86aa		95 01		sta $01,x	                sta 1,x
.86ac		a0 10		ldy #$10	                ldy #question_do_runtime_end-question_do_runtime
.86ae		20 df 84	jsr $84df	                jsr cmpl_inline_y
.86b1		a5 00		lda $00		                lda cp
.86b3		a4 01		ldy $01		                ldy cp+1
.86b5		48		pha		                pha
.86b6		20 28 d6	jsr $d628	                jsr cmpl_word      ; write two arbitrary placeholder bytes
.86b9		68		pla		                pla
.86ba						_compile_do:
.86ba		ca		dex		                dex
.86bb		ca		dex		                dex
.86bc		95 00		sta $00,x	                sta 0,x
.86be		98		tya		                tya
.86bf		95 01		sta $01,x	                sta 1,x
.86c1		ca		dex		                dex
.86c2		ca		dex		                dex
.86c3		a5 21		lda $21		                lda loopleave
.86c5		95 00		sta $00,x	                sta 0,x
.86c7		a5 22		lda $22		                lda loopleave+1
.86c9		95 01		sta $01,x	                sta 1,x
.86cb		64 22		stz $22		                stz loopleave+1
.86cd		a0 86		ldy #$86	                ldy #>do_runtime
.86cf		a9 e7		lda #$e7	                lda #<do_runtime
.86d1		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.86d4		4c 91 8a	jmp $8a91	                jmp xt_here
.86d7						z_question_do:
.86d7						z_do:
.86d7						question_do_runtime:
.86d7		20 3b 95	jsr $953b	                jsr xt_two_dup          ; ( n1 n2 n1 n2 )
.86da		20 0c 89	jsr $890c	                jsr xt_equal            ; ( -- n1 n2 f )
.86dd		20 db 8a	jsr $8adb	                jsr zero_test_runtime   ; consume f, setting Z
.86e0		f0 07		beq $86e9	                beq question_do_runtime_end+2
.86e2		e8		inx		                inx                     ; drop loop limits
.86e3		e8		inx		                inx
.86e4		e8		inx		                inx
.86e5		e8		inx		                inx
>86e6		4c				                .byte OpJMP             ; jmp
.86e7						question_do_runtime_end:
.86e7						do_runtime:
.86e7		a4 1f		ldy $1f		                ldy loopctrl
.86e9		30 05		bmi $86f0	                bmi +                   ; is this the first LCB?
.86eb		a5 20		lda $20		                lda loopidx0            ; no, write cached LSB
.86ed		99 00 01	sta $0100,y	                sta loopindex,y         ; back to loopindex in the LCB
.86f0						+
.86f0		c8		iny		                iny                     ; Reserve 4 bytes for next LCB
.86f1		c8		iny		                iny
.86f2		c8		iny		                iny
.86f3		c8		iny		                iny
.86f4		84 1f		sty $1f		                sty loopctrl            ; Udpate LCB stack pointer
.86f6		38		sec		                sec
.86f7		a9 00		lda #$00	                lda #0
.86f9		f5 02		sbc $02,x	                sbc 2,x             ; LSB of limit
.86fb		99 02 01	sta $0102,y	                sta loopfufa,y      ; write to loop control block
.86fe		a9 80		lda #$80	                lda #$80
.8700		f5 03		sbc $03,x	                sbc 3,x             ; MSB of limit
.8702		99 03 01	sta $0103,y	                sta loopfufa+1,y
.8705		18		clc		                clc
.8706		b5 00		lda $00,x	                lda 0,x             ; LSB of original index
.8708		79 02 01	adc $0102,y	                adc loopfufa,y
.870b		85 20		sta $20		                sta loopidx0        ; write LSB to cache not LCB
.870d		b5 01		lda $01,x	                lda 1,x             ; MSB of orginal index
.870f		79 03 01	adc $0103,y	                adc loopfufa+1,y
.8712		99 01 01	sta $0101,y	                sta loopindex+1,y
.8715		e8		inx		                inx                 ; clean up the stack
.8716		e8		inx		                inx
.8717		e8		inx		                inx
.8718		e8		inx		                inx
.8719		60		rts		                rts
.871a						xt_does:
.871a		a0 87		ldy #$87	                ldy #>does_runtime
.871c		a9 29		lda #$29	                lda #<does_runtime
.871e		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.8721		a0 d6		ldy #$d6	                ldy #>dodoes
.8723		a9 62		lda #$62	                lda #<dodoes
.8725		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.8728		60		rts		z_does:         rts
.8729						does_runtime:
.8729		7a		ply		                ply             ; LSB
.872a		68		pla		                pla             ; MSB
.872b		c8		iny		                iny
.872c		d0 01		bne $872f	                bne +
.872e		1a		inc a		                ina
.872f						+
.872f		84 25		sty $25		                sty tmp1
.8731		85 26		sta $26		                sta tmp1+1
.8733		20 26 d7	jsr $d726	                jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.8736		a5 02		lda $02		                lda dp
.8738		18		clc		                clc
.8739		69 04		adc #$04	                adc #4
.873b		85 27		sta $27		                sta tmp2
.873d		a5 03		lda $03		                lda dp+1
.873f		69 00		adc #$00	                adc #0          ; we only care about the carry
.8741		85 28		sta $28		                sta tmp2+1
.8743		b2 27		lda ($27)	                lda (tmp2)
.8745		18		clc		                clc
.8746		69 01		adc #$01	                adc #1
.8748		85 29		sta $29		                sta tmp3
.874a		a0 01		ldy #$01	                ldy #1
.874c		b1 27		lda ($27),y	                lda (tmp2),y
.874e		69 00		adc #$00	                adc #0          ; we only care about the carry
.8750		85 2a		sta $2a		                sta tmp3+1
.8752		a5 25		lda $25		                lda tmp1        ; LSB
.8754		92 29		sta ($29)	                sta (tmp3)
.8756		a5 26		lda $26		                lda tmp1+1
.8758		91 29		sta ($29),y	                sta (tmp3),y    ; Y is still 1
.875a		60		rts		                rts
.875b						xt_dot:
.875b		20 df d7	jsr $d7df	                jsr underflow_1
.875e		20 cb 87	jsr $87cb	                jsr xt_dup                      ; ( n n )
.8761		20 d1 80	jsr $80d1	                jsr xt_abs                      ; ( n u )
.8764		20 fd 9d	jsr $9dfd	                jsr xt_zero                     ; ( n u 0 )
.8767		20 87 8b	jsr $8b87	                jsr xt_less_number_sign         ; ( n u 0 )
.876a		20 0c 8e	jsr $8e0c	                jsr xt_number_sign_s            ; ( n ud )
.876d		20 e4 90	jsr $90e4	                jsr xt_rot                      ; ( ud n )
.8770		20 be 92	jsr $92be	                jsr xt_sign                     ; ( ud )
.8773		20 ea 8d	jsr $8dea	                jsr xt_number_sign_greater      ; ( addr u )
.8776		20 45 96	jsr $9645	                jsr xt_type
.8779		20 39 93	jsr $9339	                jsr xt_space
.877c		60		rts		z_dot:          rts
.877d						xt_dot_paren:
.877d		ca		dex		                dex
.877e		ca		dex		                dex
.877f		a9 29		lda #$29	                lda #41     ; Right parenthesis
.8781		95 00		sta $00,x	                sta 0,x
.8783		74 01		stz $01,x	                stz 1,x
.8785		20 05 8f	jsr $8f05	                jsr xt_parse
.8788		20 45 96	jsr $9645	                jsr xt_type
.878b		60		rts		z_dot_paren:    rts
.878c						xt_dot_quote:
.878c		20 2d 91	jsr $912d	                jsr xt_s_quote
.878f		a0 96		ldy #$96	                ldy #>xt_type
.8791		a9 45		lda #$45	                lda #<xt_type
.8793		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.8796		60		rts		z_dot_quote:    rts
.8797						xt_dot_r:
.8797		20 e4 d7	jsr $d7e4	                jsr underflow_2
.879a		20 fc 94	jsr $94fc	                jsr xt_to_r
.879d		20 cb 87	jsr $87cb	                jsr xt_dup
.87a0		20 d1 80	jsr $80d1	                jsr xt_abs
.87a3		20 fd 9d	jsr $9dfd	                jsr xt_zero
.87a6		20 87 8b	jsr $8b87	                jsr xt_less_number_sign
.87a9		20 0c 8e	jsr $8e0c	                jsr xt_number_sign_s
.87ac		20 e4 90	jsr $90e4	                jsr xt_rot
.87af		20 be 92	jsr $92be	                jsr xt_sign
.87b2		20 ea 8d	jsr $8dea	                jsr xt_number_sign_greater
.87b5		20 47 90	jsr $9047	                jsr xt_r_from
.87b8		20 5e 8e	jsr $8e5e	                jsr xt_over
.87bb		20 3d 8d	jsr $8d3d	                jsr xt_minus
.87be		20 3f 93	jsr $933f	                jsr xt_spaces
.87c1		20 45 96	jsr $9645	                jsr xt_type
.87c4		60		rts		z_dot_r:        rts
.87c5						xt_drop:
.87c5		20 df d7	jsr $d7df	                jsr underflow_1
.87c8		e8		inx		                inx
.87c9		e8		inx		                inx
.87ca		60		rts		z_drop:         rts
.87cb						xt_dup:
.87cb		20 df d7	jsr $d7df	                jsr underflow_1
.87ce		ca		dex		                dex
.87cf		ca		dex		                dex
.87d0		b5 02		lda $02,x	                lda 2,x         ; LSB
.87d2		95 00		sta $00,x	                sta 0,x
.87d4		b5 03		lda $03,x	                lda 3,x         ; MSB
.87d6		95 01		sta $01,x	                sta 1,x
.87d8		60		rts		z_dup:          rts
.87d9						xt_else:
.87d9						xt_endof:
.87d9		20 91 8a	jsr $8a91	                jsr xt_here
.87dc		20 42 8e	jsr $8e42	                jsr xt_one_plus
.87df		20 21 d6	jsr $d621	                jsr cmpl_jump
.87e2		20 be 93	jsr $93be	                jsr xt_swap         ; ( target orig )
.87e5						xt_then:
.87e5		20 91 8a	jsr $8a91	                jsr xt_here
.87e8		a1 02		lda ($02,x)	                lda (2,x)           ; get LSB at orig
.87ea		1a		inc a		                ina                 ; was LSB $FF?  (only check for $XXFF)
.87eb		d0 3b		bne $8828	                bne _no_opt
.87ed		20 3b 95	jsr $953b	                jsr xt_two_dup
.87f0		20 be 93	jsr $93be	                jsr xt_swap
.87f3		20 3d 8d	jsr $8d3d	                jsr xt_minus        ; ( C: orig here offset )
.87f6		b5 01		lda $01,x	                lda 1,x
.87f8		d0 2c		bne $8826	                bne _too_far        ; MSB must be zero
.87fa		b5 00		lda $00,x	                lda 0,x
.87fc		3a		dec a		                dea                 ; we want here - orig - 2
.87fd		3a		dec a		                dea                 ; don't care about carry
.87fe		30 26		bmi $8826	                bmi _too_far        ; up to 127 is ok
.8800		95 00		sta $00,x	                sta 0,x             ; stash offset - 2
.8802		38		sec		                sec                 ; put orig - 2 in tmp1
.8803		b5 04		lda $04,x	                lda 4,x
.8805		e9 02		sbc #$02	                sbc #2
.8807		85 25		sta $25		                sta tmp1
.8809		b5 05		lda $05,x	                lda 5,x
.880b		e9 00		sbc #$00	                sbc #0
.880d		85 26		sta $26		                sta tmp1+1
.880f		a0 00		ldy #$00	                ldy #0
.8811						-
.8811		b9 30 88	lda $8830,y	                lda beq_opt+1,y               ; skip the jsr
.8814		91 25		sta ($25),y	                sta (tmp1),y
.8816		c8		iny		                iny
.8817		c0 03		cpy #$03	                cpy #(beq_opt_end-beq_opt-2)  ; three bytes, skip jsr and offset
.8819		d0 f6		bne $8811	                bne -
.881b		b5 00		lda $00,x	                lda 0,x             ; write the offset
.881d		91 25		sta ($25),y	                sta (tmp1),y
.881f		e8		inx		                inx                 ; clear the stack
.8820		e8		inx		                inx
.8821		e8		inx		                inx
.8822		e8		inx		                inx
.8823		e8		inx		                inx
.8824		e8		inx		                inx
.8825		60		rts		                rts                 ; all done
.8826						_too_far:
.8826		e8		inx		                inx                 ; discard the offset we calculated
.8827		e8		inx		                inx
.8828						_no_opt:
.8828		20 be 93	jsr $93be	                jsr xt_swap
.882b		20 a8 93	jsr $93a8	                jsr xt_store
.882e						z_else:
.882e						z_endof:
.882e		60		rts		z_then:         rts
.882f						beq_opt:
.882f		20 db 8a	jsr $8adb	                jsr zero_test_runtime       ; replaces jsr zero_branch_runtime
.8832		f0 00		beq $8834	                beq beq_opt_end             ; the beq overwrites the placeholder
.8834						beq_opt_end:
.8834						xt_emit:
.8834		20 df d7	jsr $d7df	                jsr underflow_1
.8837		b5 00		lda $00,x	                lda 0,x
.8839		e8		inx		                inx
.883a		e8		inx		                inx
.883b						emit_a:
.883b		6c 12 00	jmp ($0012)	                jmp (output)            ; JSR/RTS
.883e						z_emit:
.883e						xt_endcase:
.883e		a0 87		ldy #$87	                ldy #>xt_drop
.8840		a9 c5		lda #$c5	                lda #<xt_drop
.8842		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.8845						_endcase_loop:
.8845		b5 00		lda $00,x	                lda 0,x
.8847		15 01		ora $01,x	                ora 1,x
.8849		f0 05		beq $8850	                beq _done
.884b		20 e5 87	jsr $87e5	                jsr xt_then
.884e		80 f5		bra $8845	                bra _endcase_loop
.8850						_done:
.8850		e8		inx		                inx
.8851		e8		inx		                inx
.8852		60		rts		z_endcase:      rts
.8853						xt_environment_q:
.8853		20 df d7	jsr $d7df	                jsr underflow_1
.8856		a0 00		ldy #$00	                ldy #00                 ; counter for table
.8858		5a		phy		                phy
.8859						_table_loop:
.8859		20 3b 95	jsr $953b	                jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
.885c		ca		dex		                dex
.885d		ca		dex		                dex                     ; ( addr u addr u ? )
.885e		b9 d0 88	lda $88d0,y	                lda env_table_single,y
.8861		95 00		sta $00,x	                sta 0,x
.8863		c8		iny		                iny
.8864		b9 d0 88	lda $88d0,y	                lda env_table_single,y
.8867		95 01		sta $01,x	                sta 1,x                 ; ( addr u addr u addr-t )
.8869		c8		iny		                iny
.886a		15 00		ora $00,x	                ora 0,x
.886c		f0 4d		beq $88bb	                beq _table_done
.886e		5a		phy		                phy                     ; save Y, which is used by COUNT
.886f		20 55 85	jsr $8555	                jsr xt_count            ; ( addr u addr u addr-s u-s )
.8872		20 b9 9f	jsr $9fb9	                jsr xt_compare          ; ( addr u f )
.8875		7a		ply		                ply
.8876		b5 00		lda $00,x	                lda 0,x
.8878		15 01		ora $01,x	                ora 1,x
.887a		f0 04		beq $8880	                beq _got_result
.887c		e8		inx		                inx                     ; DROP, now ( addr u )
.887d		e8		inx		                inx
.887e		80 d9		bra $8859	                bra _table_loop
.8880						_got_result:
.8880		e8		inx		                inx                     ; drop flag, now ( addr u )
.8881		e8		inx		                inx
.8882		88		dey		                dey                     ; go back to index we had
.8883		88		dey		                dey
.8884		68		pla		                pla
.8885		d0 0d		bne $8894	                bne _double_result
.8887		b9 ee 88	lda $88ee,y	                lda env_results_single,y
.888a		95 02		sta $02,x	                sta 2,x
.888c		c8		iny		                iny
.888d		b9 ee 88	lda $88ee,y	                lda env_results_single,y
.8890		95 03		sta $03,x	                sta 3,x                 ; ( res u )
.8892		80 1f		bra $88b3	                bra _set_flag
.8894						_double_result:
.8894		ca		dex		                dex                     ; ( addr u ? )
.8895		ca		dex		                dex
.8896		98		tya		                tya
.8897		38		sec		                sec
.8898		e9 18		sbc #$18	                sbc #24
.889a		0a		asl a		                asl
.889b		a8		tay		                tay
.889c		b9 04 89	lda $8904,y	                lda env_results_double,y
.889f		95 02		sta $02,x	                sta 2,x
.88a1		c8		iny		                iny
.88a2		b9 04 89	lda $8904,y	                lda env_results_double,y
.88a5		95 03		sta $03,x	                sta 3,x                 ; ( res u ? )
.88a7		c8		iny		                iny
.88a8		b9 04 89	lda $8904,y	                lda env_results_double,y
.88ab		95 04		sta $04,x	                sta 4,x
.88ad		c8		iny		                iny
.88ae		b9 04 89	lda $8904,y	                lda env_results_double,y
.88b1		95 05		sta $05,x	                sta 5,x                 ; ( res res ? )
.88b3						_set_flag:
.88b3		a9 ff		lda #$ff	                lda #$FF
.88b5		95 00		sta $00,x	                sta 0,x
.88b7		95 01		sta $01,x	                sta 1,x                 ; ( res f )
.88b9		80 14		bra $88cf	                bra _done
.88bb						_table_done:
.88bb		68		pla		                pla
.88bc		d0 09		bne $88c7	                bne _no_match
.88be		1a		inc a		                ina
.88bf		48		pha		                pha
.88c0		8a		txa		                txa
.88c1		18		clc		                clc
.88c2		69 06		adc #$06	                adc #6                  ; skip six bytes
.88c4		aa		tax		                tax                     ; ( addr u )
.88c5		80 92		bra $8859	                bra _table_loop
.88c7						_no_match:
.88c7		8a		txa		                txa
.88c8		18		clc		                clc
.88c9		69 0a		adc #$0a	                adc #10
.88cb		aa		tax		                tax                     ; ( addr ) - not ( 0 ) !
.88cc		20 fd 9d	jsr $9dfd	                jsr xt_false
.88cf						_done:
.88cf						z_environment_q:
.88cf		60		rts		                rts
.88d0						env_table_single:
>88d0		9c d5 ac d5 b2 d5 b7 d5		        .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
>88d8		c9 d5
>88da		d1 d5 da d5 e0 d5 e6 d5		        .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
>88e2		f9 d5 05 d6 00 00		        .word envs_sc, envs_wl, 0000
.88e8						env_table_double:
>88e8		0f d6 15 d6 00 00		        .word envs_max_d, envs_max_ud, 0000
.88ee						env_results_single:
>88ee		ff 00				        .word $00FF     ; /COUNTED-STRING
>88f0		ff 00				        .word $00FF     ; /HOLD
>88f2		54 00				        .word $0054     ; /PAD (this is 84 decimal)
>88f4		08 00				        .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
>88f6		00 00				        .word 0000      ; FLOORED ("FALSE", we have symmetric)
>88f8		ff 00				        .word $00FF     ; MAX-CHAR
>88fa		ff 7f				        .word $7FFF     ; MAX-N
>88fc		ff ff				        .word $FFFF     ; MAX-U
>88fe		80 00				        .word $0080     ; RETURN-STACK-CELLS
>8900		20 00				        .word $0020     ; STACK-CELLS (from definitions.asm)
>8902		09 00				        .word $0009     ; WORDLISTS
.8904						env_results_double:
>8904		ff 7f ff ff			        .word $7FFF, $FFFF      ; MAX-D
>8908		ff ff ff ff			        .word $FFFF, $FFFF      ; MAX-UD
.890c						xt_equal:
.890c		20 e4 d7	jsr $d7e4	                jsr underflow_2
.890f		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8911		d5 02		cmp $02,x	                cmp 2,x
.8913		d0 0a		bne $891f	                bne _false
.8915		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8917		d5 03		cmp $03,x	                cmp 3,x
.8919		d0 04		bne $891f	                bne _false
.891b		a9 ff		lda #$ff	                lda #$FF
.891d		80 02		bra $8921	                bra _done
.891f		a9 00		lda #$00	_false:         lda #0                  ; drop thru to done
.8921		95 02		sta $02,x	_done:          sta 2,x
.8923		95 03		sta $03,x	                sta 3,x
.8925		e8		inx		                inx
.8926		e8		inx		                inx
.8927		60		rts		z_equal:        rts
.8928						xt_blank:
.8928		ca		dex		                dex
.8929		ca		dex		                dex
.892a		a9 20		lda #$20	                lda #AscSP
.892c		95 00		sta $00,x	                sta 0,x
.892e		74 01		stz $01,x	                stz 1,x
.8930		80 06		bra $8938	                bra xt_fill     ; skip over code for ERASE
.8932						xt_erase:
.8932		ca		dex		                dex
.8933		ca		dex		                dex
.8934		74 00		stz $00,x	                stz 0,x
.8936		74 01		stz $01,x	                stz 1,x
.8938						xt_fill:
.8938		20 e9 d7	jsr $d7e9	                jsr underflow_3
.893b		b5 04		lda $04,x	                lda 4,x         ; LSB
.893d		85 25		sta $25		                sta tmp1
.893f		b5 05		lda $05,x	                lda 5,x
.8941		85 26		sta $26		                sta tmp1+1
.8943		b5 02		lda $02,x	                lda 2,x
.8945		85 27		sta $27		                sta tmp2
.8947		b5 03		lda $03,x	                lda 3,x
.8949		85 28		sta $28		                sta tmp2+1
.894b		b5 00		lda $00,x	                lda 0,x
.894d		a8		tay		                tay
.894e						_loop:
.894e		a9 7f		lda #$7f	                lda #>ram_end           ; MSB
.8950		c5 26		cmp $26		                cmp tmp1+1
.8952		90 21		bcc $8975	                bcc _done               ; RAM_END < TMP1, so leave
.8954		d0 06		bne $895c	                bne _check_counter      ; RAM_END is not smaller and not equal
.8956		a9 ff		lda #$ff	                lda #<ram_end           ; LSB, because MSBs were equal
.8958		c5 25		cmp $25		                cmp tmp1
.895a		90 19		bcc $8975	                bcc _done               ; RAM_END < TMP1, so leave
.895c						_check_counter:
.895c		a5 27		lda $27		                lda tmp2
.895e		05 28		ora $28		                ora tmp2+1
.8960		f0 13		beq $8975	                beq _done
.8962		98		tya		                tya
.8963		92 25		sta ($25)	                sta (tmp1)
.8965		a5 27		lda $27		                lda tmp2
.8967		d0 02		bne $896b	                bne +
.8969		c6 28		dec $28		                dec tmp2+1
.896b		c6 27		dec $27		+               dec tmp2
.896d		e6 25		inc $25		                inc tmp1
.896f		d0 dd		bne $894e	                bne _loop
.8971		e6 26		inc $26		                inc tmp1+1
.8973		80 d9		bra $894e	                bra _loop
.8975						_done:
.8975		8a		txa		                txa
.8976		18		clc		                clc
.8977		69 06		adc #$06	                adc #6
.8979		aa		tax		                tax
.897a						z_blank:
.897a						z_erase:
.897a		60		rts		z_fill:         rts
.897b						xt_execute:
.897b		20 df d7	jsr $d7df	                jsr underflow_1
.897e		20 82 89	jsr $8982	                jsr doexecute   ; do not combine to JMP (native coding)
.8981		60		rts		z_execute:      rts
.8982						doexecute:
.8982		b5 00		lda $00,x	                lda 0,x
.8984		85 04		sta $04		                sta ip
.8986		b5 01		lda $01,x	                lda 1,x
.8988		85 05		sta $05		                sta ip+1
.898a		e8		inx		                inx
.898b		e8		inx		                inx
.898c		6c 04 00	jmp ($0004)	                jmp (ip)
.898f						xt_exit:
.898f		60		rts		                rts             ; keep before z_exit
.8990						z_exit:
.8990						xt_fetch:
.8990		20 df d7	jsr $d7df	                jsr underflow_1
.8993		a1 00		lda ($00,x)	                lda (0,x)               ; LSB
.8995		a8		tay		                tay
.8996		f6 00		inc $00,x	                inc 0,x
.8998		d0 02		bne $899c	                bne +
.899a		f6 01		inc $01,x	                inc 1,x
.899c						+
.899c		a1 00		lda ($00,x)	                lda (0,x)               ; MSB
.899e		95 01		sta $01,x	                sta 1,x
.89a0		94 00		sty $00,x	                sty 0,x
.89a2		60		rts		z_fetch:        rts
.89a3						xt_find:
.89a3		20 df d7	jsr $d7df	                jsr underflow_1
.89a6		b5 01		lda $01,x	                lda 1,x                 ; MSB
.89a8		48		pha		                pha
.89a9		b5 00		lda $00,x	                lda 0,x                 ; LSB
.89ab		48		pha		                pha
.89ac		20 55 85	jsr $8555	                jsr xt_count            ; ( caddr -- addr u )
.89af		20 fc 9a	jsr $9afc	                jsr xt_find_name        ; ( addr u -- nt | 0 )
.89b2		b5 00		lda $00,x	                lda 0,x
.89b4		15 01		ora $01,x	                ora 1,x
.89b6		d0 0b		bne $89c3	                bne _found_word
.89b8		20 fd 9d	jsr $9dfd	                jsr xt_false            ; ( 0 0 )
.89bb		68		pla		                pla                     ; LSB of address
.89bc		95 02		sta $02,x	                sta 2,x
.89be		68		pla		                pla
.89bf		95 03		sta $03,x	                sta 3,x                 ; MSB of address
.89c1		80 27		bra $89ea	                bra _done               ; ( addr 0 )
.89c3						_found_word:
.89c3		68		pla		                pla
.89c4		68		pla		                pla
.89c5		20 cb 87	jsr $87cb	                jsr xt_dup              ; ( nt nt )
.89c8		20 3a 9c	jsr $9c3a	                jsr xt_name_to_int      ; ( nt xt )
.89cb		20 be 93	jsr $93be	                jsr xt_swap             ; ( xt nt )
.89ce		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.89d0		f6 00		inc $00,x	                inc 0,x
.89d2		d0 02		bne $89d6	                bne +
.89d4		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.89d6						+
.89d6		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.89d8		29 04		and #$04	                and #IM
.89da		d0 08		bne $89e4	                bne _immediate          ; bit set, we're immediate
.89dc		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.89de		95 00		sta $00,x	                sta 0,x
.89e0		95 01		sta $01,x	                sta 1,x
.89e2		80 06		bra $89ea	                bra _done
.89e4						_immediate:
.89e4		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.89e6		95 00		sta $00,x	                sta 0,x
.89e8		74 01		stz $01,x	                stz 1,x
.89ea						_done:
.89ea		60		rts		z_find:         rts
.89eb						xt_fm_slash_mod:
.89eb		20 e9 d7	jsr $d7e9	                jsr underflow_3
.89ee		64 27		stz $27		                stz tmp2        ; default: n is positive
.89f0		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.89f2		10 0e		bpl $8a02	                bpl _check_d
.89f4		e6 27		inc $27		                inc tmp2        ; set flag to negative for n1
.89f6		20 78 8d	jsr $8d78	                jsr xt_negate   ; NEGATE
.89f9		20 fc 94	jsr $94fc	                jsr xt_to_r     ; >R
.89fc		20 6b 9e	jsr $9e6b	                jsr xt_dnegate  ; DNEGATE
.89ff		20 47 90	jsr $9047	                jsr xt_r_from   ; R>
.8a02						_check_d:
.8a02		b5 03		lda $03,x	                lda 3,x         ; MSB of high word of d
.8a04		10 0d		bpl $8a13	                bpl _multiply
.8a06		18		clc		                clc
.8a07		b5 00		lda $00,x	                lda 0,x         ; LSB of n1
.8a09		75 02		adc $02,x	                adc 2,x         ; LSB of dh
.8a0b		95 02		sta $02,x	                sta 2,x
.8a0d		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8a0f		75 03		adc $03,x	                adc 3,x         ; MSB of dh
.8a11		95 03		sta $03,x	                sta 3,x
.8a13						_multiply:
.8a13		20 ca 96	jsr $96ca	                jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
.8a16		a5 27		lda $27		                lda tmp2
.8a18		f0 07		beq $8a21	                beq _done
.8a1a		e8		inx		                inx             ; pretend that we SWAP
.8a1b		e8		inx		                inx
.8a1c		20 78 8d	jsr $8d78	                jsr xt_negate
.8a1f		ca		dex		                dex
.8a20		ca		dex		                dex
.8a21						_done:
.8a21		60		rts		z_fm_slash_mod: rts
.8a22						load_evaluate:
.8a22		a9 ff		lda #$ff	                lda #$FF
.8a24		85 25		sta $25		                sta tmp1
.8a26		80 11		bra $8a39	                bra load_evaluate_start
.8a28						xt_evaluate:
.8a28		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8a2b		64 25		stz $25		                stz tmp1
.8a2d		b5 00		lda $00,x	                lda 0,x
.8a2f		15 01		ora $01,x	                ora 1,x
.8a31		d0 06		bne $8a39	                bne evaluate_got_work
.8a33		e8		inx		                inx
.8a34		e8		inx		                inx
.8a35		e8		inx		                inx
.8a36		e8		inx		                inx
.8a37		80 42		bra $8a7b	                bra evaluate_done
.8a39						load_evaluate_start:
.8a39						evaluate_got_work:
.8a39		a0 05		ldy #$05	                ldy #blk_offset+1
.8a3b		b1 08		lda ($08),y	                lda (up),y
.8a3d		48		pha		                pha
.8a3e		88		dey		                dey
.8a3f		b1 08		lda ($08),y	                lda (up),y
.8a41		48		pha		                pha
.8a42		a5 25		lda $25		                lda tmp1
.8a44		d0 05		bne $8a4b	                bne _nozero
.8a46		91 08		sta ($08),y	                sta (up),y
.8a48		c8		iny		                iny
.8a49		91 08		sta ($08),y	                sta (up),y
.8a4b						_nozero:
.8a4b		20 9e 9b	jsr $9b9e	                jsr xt_input_to_r
.8a4e		a9 ff		lda #$ff	                lda #$FF
.8a50		85 0a		sta $0a		                sta insrc
.8a52		85 0b		sta $0b		                sta insrc+1
.8a54		64 10		stz $10		                stz toin
.8a56		64 11		stz $11		                stz toin+1
.8a58		b5 00		lda $00,x	                lda 0,x
.8a5a		85 0e		sta $0e		                sta ciblen
.8a5c		b5 01		lda $01,x	                lda 1,x
.8a5e		85 0f		sta $0f		                sta ciblen+1
.8a60		b5 02		lda $02,x	                lda 2,x
.8a62		85 0c		sta $0c		                sta cib
.8a64		b5 03		lda $03,x	                lda 3,x
.8a66		85 0d		sta $0d		                sta cib+1
.8a68		e8		inx		                inx             ; A clean stack is a clean mind
.8a69		e8		inx		                inx
.8a6a		e8		inx		                inx
.8a6b		e8		inx		                inx
.8a6c		20 4c d7	jsr $d74c	                jsr interpret   ; ( -- )
.8a6f		20 ab 9d	jsr $9dab	                jsr xt_r_to_input
.8a72		a0 04		ldy #$04	                ldy #blk_offset
.8a74		68		pla		                pla
.8a75		91 08		sta ($08),y	                sta (up),y
.8a77		c8		iny		                iny
.8a78		68		pla		                pla
.8a79		91 08		sta ($08),y	                sta (up),y
.8a7b						evaluate_done:
.8a7b		60		rts		z_evaluate:     rts
.8a7c						xt_greater_than:
.8a7c		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8a7f		a0 00		ldy #$00	                ldy #0          ; default false
.8a81		20 0b d7	jsr $d70b	                jsr compare_16bit
.8a84		f0 03		beq $8a89	                beq _false
.8a86		10 01		bpl $8a89	                bpl _false
.8a88		88		dey		                dey
.8a89						_false:
.8a89		98		tya		                tya
.8a8a		e8		inx		                inx
.8a8b		e8		inx		                inx
.8a8c		95 00		sta $00,x	                sta 0,x
.8a8e		95 01		sta $01,x	                sta 1,x
.8a90		60		rts		z_greater_than: rts
.8a91						xt_here:
.8a91						xt_asm_arrow:
.8a91		ca		dex		                dex
.8a92		ca		dex		                dex
.8a93		a5 00		lda $00		                lda cp
.8a95		95 00		sta $00,x	                sta 0,x
.8a97		a5 01		lda $01		                lda cp+1
.8a99		95 01		sta $01,x	                sta 1,x
.8a9b						z_asm_arrow:
.8a9b		60		rts		z_here:         rts
.8a9c						xt_hex:
.8a9c		a9 10		lda #$10	                lda #16
.8a9e		85 18		sta $18		                sta base
.8aa0		64 19		stz $19		                stz base+1              ; paranoid
.8aa2		60		rts		z_hex:          rts
.8aa3						xt_hold:
.8aa3		20 df d7	jsr $d7df	                jsr underflow_1
.8aa6		a5 2b		lda $2b		                lda tohold
.8aa8		d0 02		bne $8aac	                bne +
.8aaa		c6 2c		dec $2c		                dec tohold+1
.8aac						+
.8aac		c6 2b		dec $2b		                dec tohold
.8aae		b5 00		lda $00,x	                lda 0,x
.8ab0		92 2b		sta ($2b)	                sta (tohold)
.8ab2		e8		inx		                inx
.8ab3		e8		inx		                inx
.8ab4		60		rts		z_hold:         rts
.8ab5						xt_i:
.8ab5		ca		dex		                dex
.8ab6		ca		dex		                dex
.8ab7		a4 1f		ldy $1f		                ldy loopctrl
.8ab9		38		sec		                sec
.8aba		a5 20		lda $20		                lda loopidx0        ; cached LSB of loopindex
.8abc		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.8abf		95 00		sta $00,x	                sta 0,x
.8ac1		b9 01 01	lda $0101,y	                lda loopindex+1,y
.8ac4		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.8ac7		95 01		sta $01,x	                sta 1,x
.8ac9		60		rts		z_i:            rts
.8aca						xt_if:
.8aca		a0 8a		ldy #$8a	                ldy #>zero_branch_runtime
.8acc		a9 e5		lda #$e5	                lda #<zero_branch_runtime
.8ace		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.8ad1		20 91 8a	jsr $8a91	                jsr xt_here
.8ad4		a9 ff		lda #$ff	                lda #$FF
.8ad6		a8		tay		                tay
.8ad7		20 28 d6	jsr $d628	                jsr cmpl_word
.8ada		60		rts		z_if:           rts
.8adb						zero_test_runtime:
.8adb		e8		inx		                inx
.8adc		e8		inx		                inx
.8add		b5 fe		lda $fe,x	                lda $FE,x           ; wraparound so inx doesn't wreck Z status
.8adf		15 ff		ora $ff,x	                ora $FF,x
.8ae1		60		rts		                rts
.8ae2		d0 03		bne $8ae7	                bne zero_test_footer_end+2  ; branch fwd if non-zero
>8ae4		4c				                .byte OpJMP                 ; else JMP back
.8ae5						zero_test_footer_end:
.8ae5						zero_branch_runtime:
.8ae5		68		pla		                pla
.8ae6		85 25		sta $25		                sta tmp1
.8ae8		68		pla		                pla
.8ae9		85 26		sta $26		                sta tmp1+1
.8aeb		b5 00		lda $00,x	                lda 0,x
.8aed		15 01		ora $01,x	                ora 1,x
.8aef		f0 0d		beq $8afe	                beq _zero
.8af1		a5 25		lda $25		                lda tmp1        ; LSB
.8af3		18		clc		                clc
.8af4		69 03		adc #$03	                adc #3          ; add one to RTS address plus two address bytes
.8af6		85 25		sta $25		                sta tmp1
.8af8		90 11		bcc $8b0b	                bcc _jump
.8afa		e6 26		inc $26		                inc tmp1+1      ; MSB
.8afc		80 0d		bra $8b0b	                bra _jump
.8afe						_zero:
.8afe		a0 01		ldy #$01	                ldy #1
.8b00		b1 25		lda ($25),y	                lda (tmp1),y
.8b02		48		pha		                pha
.8b03		c8		iny		                iny
.8b04		b1 25		lda ($25),y	                lda (tmp1),y
.8b06		85 26		sta $26		                sta tmp1+1
.8b08		68		pla		                pla
.8b09		85 25		sta $25		                sta tmp1
.8b0b						_jump:
.8b0b		e8		inx		                inx
.8b0c		e8		inx		                inx
.8b0d		6c 25 00	jmp ($0025)	                jmp (tmp1)
.8b10						xt_immediate:
.8b10		20 26 d7	jsr $d726	                jsr current_to_dp
.8b13		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8b15		b1 02		lda ($02),y	                lda (dp),y
.8b17		09 04		ora #$04	                ora #IM        ; make sure bit 7 is set
.8b19		91 02		sta ($02),y	                sta (dp),y
.8b1b		60		rts		z_immediate:    rts
.8b1c						xt_invert:
.8b1c		20 df d7	jsr $d7df	                jsr underflow_1
.8b1f		a9 ff		lda #$ff	                lda #$FF
.8b21		55 00		eor $00,x	                eor 0,x         ; LSB
.8b23		95 00		sta $00,x	                sta 0,x
.8b25		a9 ff		lda #$ff	                lda #$FF
.8b27		55 01		eor $01,x	                eor 1,x         ; MSB
.8b29		95 01		sta $01,x	                sta 1,x
.8b2b		60		rts		z_invert:       rts
.8b2c						xt_is:
.8b2c		a5 1a		lda $1a		                lda state
.8b2e		05 1b		ora $1b		                ora state+1
.8b30		f0 0c		beq $8b3e	                beq _interpreting
.8b32						_compiling:
.8b32		20 21 83	jsr $8321	                jsr xt_bracket_tick
.8b35		a0 86		ldy #$86	                ldy #>xt_defer_store
.8b37		a9 84		lda #$84	                lda #<xt_defer_store
.8b39		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.8b3c		80 06		bra $8b44	                bra _done
.8b3e						_interpreting:
.8b3e		20 d2 93	jsr $93d2	                jsr xt_tick
.8b41		20 84 86	jsr $8684	                jsr xt_defer_store
.8b44						_done:
.8b44		60		rts		z_is:           rts
.8b45						xt_j:
.8b45		ca		dex		                dex                 ; make space on the stack
.8b46		ca		dex		                dex
.8b47		a5 1f		lda $1f		                lda loopctrl
.8b49		38		sec		                sec
.8b4a		e9 04		sbc #$04	                sbc #4
.8b4c		a8		tay		                tay
.8b4d		38		sec		                sec
.8b4e		b9 00 01	lda $0100,y	                lda loopindex,y
.8b51		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.8b54		95 00		sta $00,x	                sta 0,x
.8b56		b9 01 01	lda $0101,y	                lda loopindex+1,y
.8b59		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.8b5c		95 01		sta $01,x	                sta 1,x
.8b5e		60		rts		z_j:            rts
.8b5f						xt_key:
.8b5f		20 69 8b	jsr $8b69	                jsr key_a               ; returns char in A
.8b62		ca		dex		                dex
.8b63		ca		dex		                dex
.8b64		95 00		sta $00,x	                sta 0,x
.8b66		74 01		stz $01,x	                stz 1,x
.8b68		60		rts		z_key:          rts
.8b69						key_a:
.8b69		6c 14 00	jmp ($0014)	                jmp (input)             ; JSR/RTS
.8b6c						xt_leave:
.8b6c		a5 21		lda $21		                lda loopleave
.8b6e		a4 22		ldy $22		                ldy loopleave+1
.8b70		20 21 d6	jsr $d621	                jsr cmpl_jump   ; emit the JMP chaining prior leave address
.8b73		38		sec		                sec
.8b74		a5 00		lda $00		                lda cp
.8b76		e9 02		sbc #$02	                sbc #2
.8b78		85 21		sta $21		                sta loopleave
.8b7a		a5 01		lda $01		                lda cp+1
.8b7c		b0 01		bcs $8b7f	                bcs +
.8b7e		3a		dec a		                dea
.8b7f		85 22		sta $22		+               sta loopleave+1
.8b81						z_leave:
.8b81		60		rts		                rts
.8b82						xt_left_bracket:
.8b82		64 1a		stz $1a		                stz state
.8b84		64 1b		stz $1b		                stz state+1
.8b86		60		rts		z_left_bracket: rts
.8b87						xt_less_number_sign:
.8b87		20 6c 8e	jsr $8e6c	                jsr xt_pad      ; ( addr )
.8b8a		b5 00		lda $00,x	                lda 0,x
.8b8c		85 2b		sta $2b		                sta tohold
.8b8e		b5 01		lda $01,x	                lda 1,x
.8b90		85 2c		sta $2c		                sta tohold+1
.8b92		e8		inx		                inx
.8b93		e8		inx		                inx
.8b94						z_less_number_sign:
.8b94		60		rts		                rts
.8b95						xt_less_than:
.8b95		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8b98		a0 00		ldy #$00	                ldy #0          ; default false
.8b9a		20 0b d7	jsr $d70b	                jsr compare_16bit
.8b9d		f0 03		beq $8ba2	                beq _false
.8b9f		30 01		bmi $8ba2	                bmi _false
.8ba1		88		dey		                dey
.8ba2						_false:
.8ba2		98		tya		                tya
.8ba3		e8		inx		                inx
.8ba4		e8		inx		                inx
.8ba5		95 00		sta $00,x	                sta 0,x
.8ba7		95 01		sta $01,x	                sta 1,x
.8ba9		60		rts		z_less_than:    rts
.8baa						xt_literal:
.8baa		20 df d7	jsr $d7df	                jsr underflow_1
.8bad		a0 8b		ldy #$8b	                ldy #>literal_runtime
.8baf		a9 b8		lda #$b8	                lda #<literal_runtime
.8bb1		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.8bb4		20 da 83	jsr $83da	                jsr xt_comma
.8bb7		60		rts		z_literal:      rts
.8bb8						literal_runtime:
.8bb8		ca		dex		                dex
.8bb9		ca		dex		                dex
.8bba		68		pla		                pla             ; LSB
.8bbb		85 25		sta $25		                sta tmp1
.8bbd		68		pla		                pla             ; MSB
.8bbe		85 26		sta $26		                sta tmp1+1
.8bc0		a0 01		ldy #$01	                ldy #1
.8bc2		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB
.8bc4		95 00		sta $00,x	                sta 0,x
.8bc6		c8		iny		                iny
.8bc7		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB
.8bc9		95 01		sta $01,x	                sta 1,x
.8bcb		98		tya		                tya
.8bcc		18		clc		                clc
.8bcd		65 25		adc $25		                adc tmp1
.8bcf		a8		tay		                tay
.8bd0		a5 26		lda $26		                lda tmp1+1
.8bd2		69 00		adc #$00	                adc #0
.8bd4		48		pha		                pha
.8bd5		5a		phy		                phy
.8bd6		60		rts		                rts
.8bd7						xt_loop:
.8bd7		ca		dex		                dex
.8bd8		ca		dex		                dex
.8bd9		a9 3a		lda #$3a	                lda #<loop_runtime
.8bdb		95 00		sta $00,x	                sta 0,x
.8bdd		a9 8c		lda #$8c	                lda #>loop_runtime
.8bdf		95 01		sta $01,x	                sta 1,x
.8be1		a0 12		ldy #$12	                ldy #loop_runtime_end-loop_runtime
.8be3		20 df 84	jsr $84df	                jsr cmpl_inline_y
.8be6		80 0f		bra $8bf7	                bra xt_loop_common
.8be8						xt_plus_loop:
.8be8		ca		dex		                dex
.8be9		ca		dex		                dex
.8bea		a9 4c		lda #$4c	                lda #<plus_loop_runtime
.8bec		95 00		sta $00,x	                sta 0,x
.8bee		a9 8c		lda #$8c	                lda #>plus_loop_runtime
.8bf0		95 01		sta $01,x	                sta 1,x
.8bf2		a0 1b		ldy #$1b	                ldy #plus_loop_runtime_end-plus_loop_runtime
.8bf4		20 df 84	jsr $84df	                jsr cmpl_inline_y
.8bf7						xt_loop_common:
.8bf7		20 da 83	jsr $83da	                jsr xt_comma
.8bfa		a5 22		lda $22		                lda loopleave+1         ; MSB=0 means we're done
.8bfc		f0 19		beq $8c17	                beq _noleave
.8bfe						_next:
.8bfe		a0 01		ldy #$01	                ldy #1
.8c00		b1 21		lda ($21),y	                lda (loopleave),y
.8c02		48		pha		                pha
.8c03		a5 01		lda $01		                lda cp+1
.8c05		91 21		sta ($21),y	                sta (loopleave),y
.8c07		88		dey		                dey
.8c08		b1 21		lda ($21),y	                lda (loopleave),y
.8c0a		48		pha		                pha
.8c0b		a5 00		lda $00		                lda cp
.8c0d		91 21		sta ($21),y	                sta (loopleave),y
.8c0f		68		pla		                pla
.8c10		85 21		sta $21		                sta loopleave
.8c12		68		pla		                pla
.8c13		85 22		sta $22		                sta loopleave+1
.8c15		d0 e7		bne $8bfe	                bne _next
.8c17						_noleave:
.8c17		b5 00		lda $00,x	                lda 0,x
.8c19		85 21		sta $21		                sta loopleave
.8c1b		b5 01		lda $01,x	                lda 1,x
.8c1d		85 22		sta $22		                sta loopleave+1
.8c1f		a9 52		lda #$52	                lda #<xt_unloop
.8c21		95 00		sta $00,x	                sta 0,x
.8c23		a9 97		lda #$97	                lda #>xt_unloop
.8c25		95 01		sta $01,x	                sta 1,x
.8c27		20 f4 83	jsr $83f4	                jsr xt_compile_comma
.8c2a		b5 01		lda $01,x	                lda 1,x                 ; MSB=0 means DO so nothing to do
.8c2c		f0 09		beq $8c37	                beq +
.8c2e		20 91 8a	jsr $8a91	                jsr xt_here
.8c31		20 be 93	jsr $93be	                jsr xt_swap
.8c34		4c a8 93	jmp $93a8	                jmp xt_store            ; write here as ?DO jmp target and return
.8c37		e8		inx		+               inx                     ; drop the ignored word for DO
.8c38		e8		inx		                inx
.8c39						z_loop:
.8c39		60		rts		z_plus_loop:    rts
.8c3a						loop_runtime:
.8c3a		e6 20		inc $20		                inc loopidx0        ; increment the LSB of loopindex
.8c3c		d0 0d		bne $8c4b	                bne _repeat         ; avoid expensive test most of the time
.8c3e		a4 1f		ldy $1f		                ldy loopctrl
.8c40		b9 01 01	lda $0101,y	_chkv:          lda loopindex+1,y
.8c43		1a		inc a		                ina
.8c44		c9 80		cmp #$80	                cmp #$80
.8c46		f0 06		beq $8c4e	                beq _repeat+3       ; done?  skip jmp back
.8c48		99 01 01	sta $0101,y	                sta loopindex+1,y
.8c4b						_repeat:
>8c4b		4c				                .byte OpJMP
.8c4c						loop_runtime_end:
.8c4c						plus_loop_runtime:
.8c4c		18		clc		                clc
.8c4d		b5 00		lda $00,x	                lda 0,x             ; LSB of step
.8c4f		65 20		adc $20		                adc loopidx0
.8c51		85 20		sta $20		                sta loopidx0
.8c53		e8		inx		                inx                 ; dump step from TOS before MSB test
.8c54		e8		inx		                inx                 ; since we might skip it
.8c55		b5 ff		lda $ff,x	                lda $FF,x           ; MSB of step since 1,x == -1,x+2
.8c57		d0 02		bne $8c5b	                bne _chkv           ; if it's non-zero we have to check
.8c59		90 0b		bcc $8c66	                bcc _repeat         ; but if 0 and no carry, we're good
.8c5b		b8		clv		_chkv:          clv
.8c5c		a4 1f		ldy $1f		                ldy loopctrl        ; get LCB offset
.8c5e		79 01 01	adc $0101,y	                adc loopindex+1,y   ; MSB of index
.8c61		99 01 01	sta $0101,y	                sta loopindex+1,y   ; put MSB of index back on stack
.8c64		70 03		bvs $8c69	                bvs _repeat+3     ; skip over JMP instruction
.8c66						_repeat:
>8c66		4c				                .byte OpJMP
.8c67						plus_loop_runtime_end:
.8c67						xt_lshift:
.8c67		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8c6a		b5 00		lda $00,x	                lda 0,x
.8c6c		29 0f		and #$0f	                and #%00001111
.8c6e		f0 08		beq $8c78	                beq _done
.8c70		a8		tay		                tay
.8c71						_loop:
.8c71		16 02		asl $02,x	                asl 2,x
.8c73		36 03		rol $03,x	                rol 3,x
.8c75		88		dey		                dey
.8c76		d0 f9		bne $8c71	                bne _loop
.8c78						_done:
.8c78		e8		inx		                inx
.8c79		e8		inx		                inx
.8c7a		60		rts		z_lshift:       rts
.8c7b						xt_m_star:
.8c7b		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8c7e		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8c80		55 03		eor $03,x	                eor 3,x         ; MSB of n2
.8c82		48		pha		                pha
.8c83		20 d1 80	jsr $80d1	                jsr xt_abs
.8c86		20 be 93	jsr $93be	                jsr xt_swap
.8c89		20 d1 80	jsr $80d1	                jsr xt_abs
.8c8c		20 0c 97	jsr $970c	                jsr xt_um_star          ; ( d )
.8c8f		68		pla		                pla
.8c90		10 03		bpl $8c95	                bpl _done
.8c92		20 6b 9e	jsr $9e6b	                jsr xt_dnegate
.8c95						_done:
.8c95		60		rts		z_m_star:       rts
.8c96						xt_marker:
.8c96		20 26 d7	jsr $d726	                jsr current_to_dp
.8c99		a5 02		lda $02		                lda dp
.8c9b		48		pha		                pha
.8c9c		a5 03		lda $03		                lda dp+1
.8c9e		48		pha		                pha
.8c9f		a5 00		lda $00		                lda cp
.8ca1		48		pha		                pha
.8ca2		a5 01		lda $01		                lda cp+1
.8ca4		48		pha		                pha
.8ca5		20 6f 85	jsr $856f	                jsr xt_create
.8ca8		a5 00		lda $00		                lda cp          ; LSB
.8caa		38		sec		                sec
.8cab		e9 02		sbc #$02	                sbc #2
.8cad		85 00		sta $00		                sta cp
.8caf		a5 01		lda $01		                lda cp+1        ; MSB
.8cb1		e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.8cb3		85 01		sta $01		                sta cp+1
.8cb5		a0 8c		ldy #$8c	                ldy #>marker_runtime
.8cb7		a9 d4		lda #$d4	                lda #<marker_runtime
.8cb9		20 28 d6	jsr $d628	                jsr cmpl_word
.8cbc		7a		ply		                ply                     ; MSB
.8cbd		68		pla		                pla                     ; LSB
.8cbe		20 28 d6	jsr $d628	                jsr cmpl_word
.8cc1		7a		ply		                ply                     ; MSB
.8cc2		68		pla		                pla                     ; LSB
.8cc3		20 28 d6	jsr $d628	                jsr cmpl_word
.8cc6		a0 04		ldy #$04	                ldy #4                  ; Start at CURRENT
.8cc8						_marker_loop:
.8cc8		b1 08		lda ($08),y	                lda (up),y
.8cca		20 2c d6	jsr $d62c	                jsr cmpl_a
.8ccd		c8		iny		                iny
.8cce		98		tya		                tya
.8ccf		c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.8cd1		d0 f5		bne $8cc8	                bne _marker_loop
.8cd3		60		rts		z_marker:       rts
.8cd4						marker_runtime:
.8cd4		68		pla		                pla
.8cd5		85 25		sta $25		                sta tmp1        ; LSB of address
.8cd7		68		pla		                pla
.8cd8		85 26		sta $26		                sta tmp1+1      ; MSB of address
.8cda		e6 25		inc $25		                inc tmp1
.8cdc		d0 02		bne $8ce0	                bne +
.8cde		e6 26		inc $26		                inc tmp1+1
.8ce0						+
.8ce0		a0 00		ldy #$00	                ldy #0
.8ce2		b1 25		lda ($25),y	                lda (tmp1),y
.8ce4		85 00		sta $00		                sta cp
.8ce6		c8		iny		                iny
.8ce7		b1 25		lda ($25),y	                lda (tmp1),y
.8ce9		85 01		sta $01		                sta cp+1
.8ceb		c8		iny		                iny
.8cec		b1 25		lda ($25),y	                lda (tmp1),y
.8cee		85 02		sta $02		                sta dp
.8cf0		c8		iny		                iny
.8cf1		b1 25		lda ($25),y	                lda (tmp1),y
.8cf3		85 03		sta $03		                sta dp+1
.8cf5		a0 04		ldy #$04	                ldy #4
.8cf7						_marker_restore_loop:
.8cf7		b1 25		lda ($25),y	                lda (tmp1), y
.8cf9		91 08		sta ($08),y	                sta (up), y
.8cfb		c8		iny		                iny
.8cfc		98		tya		                tya
.8cfd		c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.8cff		d0 f6		bne $8cf7	                bne _marker_restore_loop
.8d01		20 39 d7	jsr $d739	                jsr dp_to_current       ; Move the CURRENT DP back.
.8d04		60		rts		                rts
.8d05						xt_max:
.8d05		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8d08		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.8d0a		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets the carry
.8d0c		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.8d0e		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.8d10		50 02		bvc $8d14	                bvc _no_overflow
.8d12		49 80		eor #$80	                eor #$80        ; complement negative flag
.8d14						_no_overflow:
.8d14		30 08		bmi $8d1e	                bmi _keep_nos
.8d16		b5 00		lda $00,x	                lda 0,x
.8d18		95 02		sta $02,x	                sta 2,x
.8d1a		b5 01		lda $01,x	                lda 1,x
.8d1c		95 03		sta $03,x	                sta 3,x
.8d1e						_keep_nos:
.8d1e		e8		inx		                inx
.8d1f		e8		inx		                inx
.8d20		60		rts		z_max:          rts
.8d21						xt_min:
.8d21		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8d24		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.8d26		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets carry
.8d28		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.8d2a		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.8d2c		50 02		bvc $8d30	                bvc _no_overflow
.8d2e		49 80		eor #$80	                eor #$80
.8d30						_no_overflow:
.8d30		10 08		bpl $8d3a	                bpl _keep_nos
.8d32		b5 00		lda $00,x	                lda 0,x
.8d34		95 02		sta $02,x	                sta 2,x
.8d36		b5 01		lda $01,x	                lda 1,x
.8d38		95 03		sta $03,x	                sta 3,x
.8d3a						_keep_nos:
.8d3a		e8		inx		                inx
.8d3b		e8		inx		                inx
.8d3c		60		rts		z_min:          rts
.8d3d						xt_minus:
.8d3d		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8d40		38		sec		                sec
.8d41		b5 02		lda $02,x	                lda 2,x         ; LSB
.8d43		f5 00		sbc $00,x	                sbc 0,x
.8d45		95 02		sta $02,x	                sta 2,x
.8d47		b5 03		lda $03,x	                lda 3,x         ; MSB
.8d49		f5 01		sbc $01,x	                sbc 1,x
.8d4b		95 03		sta $03,x	                sta 3,x
.8d4d		e8		inx		                inx
.8d4e		e8		inx		                inx
.8d4f		60		rts		z_minus:        rts
.8d50						xt_mod:
.8d50		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8d53		20 d8 92	jsr $92d8	                jsr xt_slash_mod
.8d56		e8		inx		                inx             ; DROP
.8d57		e8		inx		                inx
.8d58						z_mod:
.8d58		60		rts		                rts
.8d59						xt_move:
.8d59		b5 03		lda $03,x	                lda 3,x                 ; MSB of addr2
.8d5b		d5 05		cmp $05,x	                cmp 5,x                 ; MSB of addr1
.8d5d		f0 05		beq $8d64	                beq _lsb                ; wasn't helpful, move to LSB
.8d5f		b0 0e		bcs $8d6f	                bcs _to_move_up         ; we want CMOVE>
.8d61		4c 43 9f	jmp $9f43	                jmp xt_cmove            ; JSR/RTS
.8d64						_lsb:
.8d64		b5 02		lda $02,x	                lda 2,x                 ; LSB of addr2
.8d66		d5 04		cmp $04,x	                cmp 4,x                 ; LSB of addr1
.8d68		f0 08		beq $8d72	                beq _equal              ; LSB is equal as well
.8d6a		b0 03		bcs $8d6f	                bcs _to_move_up         ; we want CMOVE>
.8d6c		4c 43 9f	jmp $9f43	                jmp xt_cmove            ; JSR/RTS
.8d6f						_to_move_up:
.8d6f		4c 7e 9f	jmp $9f7e	                jmp xt_cmove_up         ; JSR/RTS
.8d72						_equal:
.8d72		8a		txa		                txa
.8d73		18		clc		                clc
.8d74		69 06		adc #$06	                adc #6
.8d76		aa		tax		                tax
.8d77		60		rts		z_move:         rts
.8d78						xt_negate:
.8d78		20 df d7	jsr $d7df	                jsr underflow_1
.8d7b		a9 00		lda #$00	        	lda #0
.8d7d		38		sec		                sec
.8d7e		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.8d80		95 00		sta $00,x	                sta 0,x
.8d82		a9 00		lda #$00	                lda #0
.8d84		f5 01		sbc $01,x	                sbc 1,x         ; MSB
.8d86		95 01		sta $01,x	                sta 1,x
.8d88		60		rts		z_negate:       rts
.8d89						xt_nip:
.8d89		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8d8c		b5 00		lda $00,x	                lda 0,x         ; LSB
.8d8e		95 02		sta $02,x	                sta 2,x
.8d90		b5 01		lda $01,x	                lda 1,x         ; MSB
.8d92		95 03		sta $03,x	                sta 3,x
.8d94		e8		inx		                inx
.8d95		e8		inx		                inx
.8d96		60		rts		z_nip:          rts
.8d97						xt_not_equals:
.8d97		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8d9a		a0 00		ldy #$00	                ldy #0                  ; default is true
.8d9c		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8d9e		d5 02		cmp $02,x	                cmp 2,x
.8da0		d0 0a		bne $8dac	                bne _not_equal
.8da2		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8da4		d5 03		cmp $03,x	                cmp 3,x
.8da6		d0 04		bne $8dac	                bne _not_equal
.8da8		a9 ff		lda #$ff	                lda #$FF
.8daa		80 01		bra $8dad	                bra _done
.8dac						_not_equal:
.8dac		88		dey		                dey                     ; drop thru to done
.8dad						_done:
.8dad		98		tya		                tya
.8dae		e8		inx		                inx
.8daf		e8		inx		                inx
.8db0		95 00		sta $00,x	                sta 0,x
.8db2		95 01		sta $01,x	                sta 1,x
.8db4		60		rts		z_not_equals:   rts
.8db5						xt_number_sign:
.8db5		20 e4 d7	jsr $d7e4	                jsr underflow_2         ; double number
.8db8		20 04 83	jsr $8304	                jsr xt_base
.8dbb		20 90 89	jsr $8990	                jsr xt_fetch            ; ( ud1 base )
.8dbe		20 fc 94	jsr $94fc	                jsr xt_to_r             ; >r
.8dc1		20 fd 9d	jsr $9dfd	                jsr xt_zero             ; 0
.8dc4		20 32 90	jsr $9032	                jsr xt_r_fetch          ; r@
.8dc7		20 ca 96	jsr $96ca	                jsr xt_um_slash_mod     ; um/mod
.8dca		20 e4 90	jsr $90e4	                jsr xt_rot              ; rot
.8dcd		20 e4 90	jsr $90e4	                jsr xt_rot              ; rot
.8dd0		20 47 90	jsr $9047	                jsr xt_r_from           ; r>
.8dd3		20 ca 96	jsr $96ca	                jsr xt_um_slash_mod     ; um/mod
.8dd6		20 e4 90	jsr $90e4	                jsr xt_rot              ; rot
.8dd9		20 e4 90	jsr $90e4	                jsr xt_rot              ; ( ud rem )
.8ddc		b5 00		lda $00,x	                lda 0,x
.8dde		a8		tay		                tay
.8ddf		b9 40 d3	lda $d340,y	                lda s_abc_upper,y
.8de2		95 00		sta $00,x	                sta 0,x
.8de4		74 01		stz $01,x	                stz 1,x                 ; paranoid; now ( ud char )
.8de6		20 a3 8a	jsr $8aa3	                jsr xt_hold
.8de9						z_number_sign:
.8de9		60		rts		                rts
.8dea						xt_number_sign_greater:
.8dea		20 e4 d7	jsr $d7e4	                jsr underflow_2         ; double number
.8ded		a5 2b		lda $2b		                lda tohold
.8def		95 00		sta $00,x	                sta 0,x         ; LSB of tohold
.8df1		95 02		sta $02,x	                sta 2,x
.8df3		a5 2c		lda $2c		                lda tohold+1
.8df5		95 01		sta $01,x	                sta 1,x         ; MSB of addr
.8df7		95 03		sta $03,x	                sta 3,x         ; ( addr addr )
.8df9		20 6c 8e	jsr $8e6c	                jsr xt_pad      ; ( addr addr pad )
.8dfc		38		sec		                sec
.8dfd		b5 00		lda $00,x	                lda 0,x         ; LSB of pad address
.8dff		f5 02		sbc $02,x	                sbc 2,x
.8e01		95 02		sta $02,x	                sta 2,x
.8e03		b5 01		lda $01,x	                lda 1,x         ; MSB, which should always be zero
.8e05		f5 03		sbc $03,x	                sbc 3,x
.8e07		95 03		sta $03,x	                sta 3,x         ; ( addr u pad )
.8e09		e8		inx		                inx
.8e0a		e8		inx		                inx
.8e0b						z_number_sign_greater:
.8e0b		60		rts		                rts
.8e0c						xt_number_sign_s:
.8e0c		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8e0f						_loop:
.8e0f		20 b5 8d	jsr $8db5	                jsr xt_number_sign
.8e12		b5 00		lda $00,x	                lda 0,x
.8e14		15 01		ora $01,x	                ora 1,x
.8e16		15 02		ora $02,x	                ora 2,x
.8e18		15 03		ora $03,x	                ora 3,x
.8e1a		d0 f3		bne $8e0f	                bne _loop
.8e1c						z_number_sign_s:
.8e1c		60		rts		                rts
.8e1d						xt_of:
.8e1d		a0 8e		ldy #$8e	                ldy #>xt_over
.8e1f		a9 5e		lda #$5e	                lda #<xt_over
.8e21		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.8e24		a0 89		ldy #$89	                ldy #>xt_equal
.8e26		a9 0c		lda #$0c	                lda #<xt_equal
.8e28		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.8e2b		20 ca 8a	jsr $8aca	                jsr xt_if
.8e2e		a0 87		ldy #$87	                ldy #>xt_drop
.8e30		a9 c5		lda #$c5	                lda #<xt_drop
.8e32		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.8e35		60		rts		z_of:           rts
.8e36						xt_one_minus:
.8e36		20 df d7	jsr $d7df	                jsr underflow_1
.8e39		b5 00		lda $00,x	                lda 0,x
.8e3b		d0 02		bne $8e3f	                bne +
.8e3d		d6 01		dec $01,x	                dec 1,x
.8e3f						+
.8e3f		d6 00		dec $00,x	                dec 0,x
.8e41		60		rts		z_one_minus:    rts
.8e42						xt_char_plus:
.8e42						xt_one_plus:
.8e42		20 df d7	jsr $d7df	                jsr underflow_1
.8e45		f6 00		inc $00,x	                inc 0,x
.8e47		d0 02		bne $8e4b	                bne _done
.8e49		f6 01		inc $01,x	                inc 1,x
.8e4b						_done:
.8e4b						z_char_plus:
.8e4b		60		rts		z_one_plus:     rts
.8e4c						xt_or:
.8e4c		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8e4f		b5 00		lda $00,x	                lda 0,x
.8e51		15 02		ora $02,x	                ora 2,x
.8e53		95 02		sta $02,x	                sta 2,x
.8e55		b5 01		lda $01,x	                lda 1,x
.8e57		15 03		ora $03,x	                ora 3,x
.8e59		95 03		sta $03,x	                sta 3,x
.8e5b		e8		inx		                inx
.8e5c		e8		inx		                inx
.8e5d		60		rts		z_or:           rts
.8e5e						xt_over:
.8e5e		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8e61		ca		dex		                dex
.8e62		ca		dex		                dex
.8e63		b5 04		lda $04,x	                lda 4,x         ; LSB
.8e65		95 00		sta $00,x	                sta 0,x
.8e67		b5 05		lda $05,x	                lda 5,x         ; MSB
.8e69		95 01		sta $01,x	                sta 1,x
.8e6b		60		rts		z_over:         rts
.8e6c						xt_pad:
.8e6c		ca		dex		                dex
.8e6d		ca		dex		                dex
.8e6e		a5 00		lda $00		                lda cp
.8e70		18		clc		                clc
.8e71		69 ff		adc #$ff	                adc #padoffset  ; assumes padoffset one byte in size
.8e73		95 00		sta $00,x	                sta 0,x
.8e75		a5 01		lda $01		                lda cp+1
.8e77		69 00		adc #$00	                adc #0          ; only need carry
.8e79		95 01		sta $01,x	                sta 1,x
.8e7b		60		rts		z_pad:          rts
.8e7c						xt_page:
.8e7c		a9 1b		lda #$1b	                lda #AscESC
.8e7e		20 3b 88	jsr $883b	                jsr emit_a
.8e81		a9 5b		lda #$5b	                lda #'['
.8e83		20 3b 88	jsr $883b	                jsr emit_a
.8e86		a9 32		lda #$32	                lda #'2'
.8e88		20 3b 88	jsr $883b	                jsr emit_a
.8e8b		a9 4a		lda #$4a	                lda #'J'
.8e8d		20 3b 88	jsr $883b	                jsr emit_a
.8e90		20 fd 9d	jsr $9dfd	                jsr xt_zero
.8e93		20 fd 9d	jsr $9dfd	                jsr xt_zero
.8e96		20 ab 82	jsr $82ab	                jsr xt_at_xy
.8e99		60		rts		z_page:         rts
.8e9a						xt_paren:
.8e9a		ca		dex		                dex
.8e9b		ca		dex		                dex
.8e9c		a9 29		lda #$29	                lda #41     ; Right parenthesis
.8e9e		95 00		sta $00,x	                sta 0,x
.8ea0		74 01		stz $01,x	                stz 1,x
.8ea2		20 05 8f	jsr $8f05	                jsr xt_parse
.8ea5		e8		inx		                inx
.8ea6		e8		inx		                inx
.8ea7		e8		inx		                inx
.8ea8		e8		inx		                inx
.8ea9		60		rts		z_paren:        rts
.8eaa						xt_parse_name:
.8eaa		a5 0e		lda $0e		                lda ciblen              ; LSB of counter
.8eac		38		sec		                sec
.8ead		e5 10		sbc $10		                sbc toin
.8eaf		85 25		sta $25		                sta tmp1
.8eb1		a5 0f		lda $0f		                lda ciblen+1            ; MSB
.8eb3		e5 11		sbc $11		                sbc toin+1
.8eb5		85 26		sta $26		                sta tmp1+1
.8eb7		a5 25		lda $25		                lda tmp1
.8eb9		05 26		ora $26		                ora tmp1+1
.8ebb		f0 28		beq $8ee5	                beq _empty_line
.8ebd		a5 0c		lda $0c		                lda cib
.8ebf		18		clc		                clc
.8ec0		65 10		adc $10		                adc toin
.8ec2		85 27		sta $27		                sta tmp2                ; LSB of first character
.8ec4		a5 0d		lda $0d		                lda cib+1
.8ec6		65 11		adc $11		                adc toin+1
.8ec8		85 28		sta $28		                sta tmp2+1              ; MSB
.8eca						_skip_loop:
.8eca		b2 27		lda ($27)	                lda (tmp2)              ; work copy of cib
.8ecc		20 d2 d7	jsr $d7d2	                jsr is_whitespace
.8ecf		90 1f		bcc $8ef0	                bcc _char_found
.8ed1		e6 27		inc $27		                inc tmp2
.8ed3		d0 02		bne $8ed7	                bne +
.8ed5		e6 28		inc $28		                inc tmp2+1
.8ed7						+
.8ed7		a5 25		lda $25		                lda tmp1
.8ed9		d0 02		bne $8edd	                bne +
.8edb		c6 26		dec $26		                dec tmp1+1
.8edd		c6 25		dec $25		+               dec tmp1
.8edf		a5 25		lda $25		                lda tmp1
.8ee1		05 26		ora $26		                ora tmp1+1
.8ee3		d0 e5		bne $8eca	                bne _skip_loop          ; fall through if empty line
.8ee5						_empty_line:
.8ee5		ca		dex		                dex
.8ee6		ca		dex		                dex
.8ee7		ca		dex		                dex
.8ee8		ca		dex		                dex
.8ee9		74 00		stz $00,x	                stz 0,x                 ; TOS is zero
.8eeb		74 01		stz $01,x	                stz 1,x
.8eed		4c 9a 8f	jmp $8f9a	                jmp z_parse_name        ; skip over PARSE
.8ef0						_char_found:
.8ef0		a5 27		lda $27		                lda tmp2
.8ef2		38		sec		                sec
.8ef3		e5 0c		sbc $0c		                sbc cib
.8ef5		85 10		sta $10		                sta toin
.8ef7		a5 28		lda $28		                lda tmp2+1
.8ef9		e5 0d		sbc $0d		                sbc cib+1
.8efb		85 11		sta $11		                sta toin+1
.8efd		ca		dex		                dex
.8efe		ca		dex		                dex
.8eff		a9 20		lda #$20	                lda #AscSP
.8f01		95 00		sta $00,x	                sta 0,x
.8f03		74 01		stz $01,x	                stz 1,x                 ; paranoid, now ( "name" c )
.8f05						xt_parse:
.8f05		20 df d7	jsr $d7df	                jsr underflow_1
.8f08		a5 0e		lda $0e		                lda ciblen
.8f0a		05 0f		ora $0f		                ora ciblen+1
.8f0c		f0 0c		beq $8f1a	                beq _abort_parse
.8f0e		a5 11		lda $11		                lda toin+1              ; MSB
.8f10		c5 0f		cmp $0f		                cmp ciblen+1
.8f12		90 0e		bcc $8f22	                bcc _go_parse           ; unsigned comparison
.8f14		a5 10		lda $10		                lda toin                ; LSB
.8f16		c5 0e		cmp $0e		                cmp ciblen
.8f18		90 08		bcc $8f22	                bcc _go_parse
.8f1a						_abort_parse:
.8f1a		ca		dex		                dex
.8f1b		ca		dex		                dex
.8f1c		74 00		stz $00,x	                stz 0,x
.8f1e		74 01		stz $01,x	                stz 1,x
.8f20		80 78		bra $8f9a	                bra _done
.8f22						_go_parse:
.8f22		b5 00		lda $00,x	                lda 0,x
.8f24		85 23		sta $23		                sta tmptos
.8f26		ca		dex		                dex
.8f27		ca		dex		                dex
.8f28		a5 0c		lda $0c		                lda cib
.8f2a		18		clc		                clc
.8f2b		65 10		adc $10		                adc toin        ; LSB
.8f2d		85 25		sta $25		                sta tmp1
.8f2f		85 27		sta $27		                sta tmp2
.8f31		95 02		sta $02,x	                sta 2,x
.8f33		a5 0d		lda $0d		                lda cib+1
.8f35		65 11		adc $11		                adc toin+1      ; MSB
.8f37		85 26		sta $26		                sta tmp1+1
.8f39		85 28		sta $28		                sta tmp2+1
.8f3b		95 03		sta $03,x	                sta 3,x
.8f3d		a5 0c		lda $0c		                lda cib
.8f3f		18		clc		                clc
.8f40		65 0e		adc $0e		                adc ciblen
.8f42		85 29		sta $29		                sta tmp3
.8f44		a5 0d		lda $0d		                lda cib+1
.8f46		65 0f		adc $0f		                adc ciblen+1
.8f48		85 2a		sta $2a		                sta tmp3+1
.8f4a		64 24		stz $24		                stz tmptos+1
.8f4c						_loop:
.8f4c		a5 27		lda $27		                lda tmp2
.8f4e		c5 29		cmp $29		                cmp tmp3
.8f50		d0 06		bne $8f58	                bne _not_empty
.8f52		a5 28		lda $28		                lda tmp2+1
.8f54		c5 2a		cmp $2a		                cmp tmp3+1
.8f56		f0 1d		beq $8f75	                beq _eol
.8f58						_not_empty:
.8f58		b2 27		lda ($27)	                lda (tmp2)
.8f5a		a4 23		ldy $23		                ldy tmptos
.8f5c		c0 20		cpy #$20	                cpy #AscSP
.8f5e		d0 07		bne $8f67	                bne _not_whitespace
.8f60		20 d2 d7	jsr $d7d2	                jsr is_whitespace
.8f63		90 02		bcc $8f67	                bcc _not_whitespace
.8f65		80 0c		bra $8f73	                bra _found_delimiter
.8f67						_not_whitespace:
.8f67		c5 23		cmp $23		                cmp tmptos
.8f69		f0 08		beq $8f73	                beq _found_delimiter
.8f6b		e6 27		inc $27		                inc tmp2
.8f6d		d0 dd		bne $8f4c	                bne _loop
.8f6f		e6 28		inc $28		                inc tmp2+1
.8f71		80 d9		bra $8f4c	                bra _loop
.8f73						_found_delimiter:
.8f73		e6 24		inc $24		                inc tmptos+1
.8f75						_eol:
.8f75		a5 27		lda $27		                lda tmp2
.8f77		38		sec		                sec
.8f78		e5 25		sbc $25		                sbc tmp1
.8f7a		95 00		sta $00,x	                sta 0,x
.8f7c		a5 28		lda $28		                lda tmp2+1
.8f7e		e5 26		sbc $26		                sbc tmp1+1
.8f80		95 01		sta $01,x	                sta 1,x
.8f82		a5 27		lda $27		                lda tmp2
.8f84		38		sec		                sec
.8f85		e5 0c		sbc $0c		                sbc cib
.8f87		85 10		sta $10		                sta toin
.8f89		a5 28		lda $28		                lda tmp2+1
.8f8b		e5 0d		sbc $0d		                sbc cib+1
.8f8d		85 11		sta $11		                sta toin+1
.8f8f		a5 10		lda $10		                lda toin
.8f91		18		clc		                clc
.8f92		65 24		adc $24		                adc tmptos+1
.8f94		85 10		sta $10		                sta toin
.8f96		90 02		bcc $8f9a	                bcc +
.8f98		e6 11		inc $11		                inc toin+1
.8f9a						+
.8f9a						_done:
.8f9a						z_parse_name:
.8f9a		60		rts		z_parse:        rts
.8f9b						xt_pick:
.8f9b		16 00		asl $00,x	                asl 0,x         ; we assume u < 128 (stack is small)
.8f9d		8a		txa		                txa
.8f9e		75 00		adc $00,x	                adc 0,x
.8fa0		a8		tay		                tay
.8fa1		b9 02 00	lda $0002,y	                lda 0002,y
.8fa4		95 00		sta $00,x	                sta 0,x
.8fa6		b9 03 00	lda $0003,y	                lda 0003,y
.8fa9		95 01		sta $01,x	                sta 1,x
.8fab		60		rts		z_pick:         rts
.8fac						xt_plus:
.8fac		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8faf		18		clc		                clc
.8fb0		b5 00		lda $00,x	                lda 0,x         ; LSB
.8fb2		75 02		adc $02,x	                adc 2,x
.8fb4		95 02		sta $02,x	                sta 2,x
.8fb6		b5 01		lda $01,x	                lda 1,x         ; MSB. No CLC, conserve carry bit
.8fb8		75 03		adc $03,x	                adc 3,x
.8fba		95 03		sta $03,x	                sta 3,x
.8fbc		e8		inx		                inx
.8fbd		e8		inx		                inx
.8fbe		60		rts		z_plus:         rts
.8fbf						xt_plus_store:
.8fbf		20 e4 d7	jsr $d7e4	                jsr underflow_2
.8fc2		b5 00		lda $00,x	                lda 0,x
.8fc4		85 25		sta $25		                sta tmp1
.8fc6		b5 01		lda $01,x	                lda 1,x
.8fc8		85 26		sta $26		                sta tmp1+1
.8fca		a0 00		ldy #$00	                ldy #0          ; LSB
.8fcc		b1 25		lda ($25),y	                lda (tmp1),y
.8fce		18		clc		                clc
.8fcf		75 02		adc $02,x	                adc 2,x
.8fd1		91 25		sta ($25),y	                sta (tmp1),y
.8fd3		c8		iny		                iny             ; MSB
.8fd4		b1 25		lda ($25),y	                lda (tmp1),y
.8fd6		75 03		adc $03,x	                adc 3,x
.8fd8		91 25		sta ($25),y	                sta (tmp1),y
.8fda		e8		inx		                inx
.8fdb		e8		inx		                inx
.8fdc		e8		inx		                inx
.8fdd		e8		inx		                inx
.8fde		60		rts		z_plus_store:   rts
.8fdf						xt_postpone:
.8fdf		20 aa 8e	jsr $8eaa	                jsr xt_parse_name               ; ( -- addr n )
.8fe2		b5 00		lda $00,x	                lda 0,x
.8fe4		15 01		ora $01,x	                ora 1,x
.8fe6		d0 05		bne $8fed	                bne +
.8fe8		a9 05		lda #$05	                lda #err_noname
.8fea		4c f5 d7	jmp $d7f5	                jmp error
.8fed						+
.8fed		20 fc 9a	jsr $9afc	                jsr xt_find_name                ; ( -- nt | 0 )
.8ff0		d0 05		bne $8ff7	                bne +
.8ff2		a9 05		lda #$05	                lda #err_noname
.8ff4		4c f5 d7	jmp $d7f5	                jmp error
.8ff7						+
.8ff7		b5 00		lda $00,x	                lda 0,x
.8ff9		85 25		sta $25		                sta tmp1
.8ffb		b5 01		lda $01,x	                lda 1,x
.8ffd		85 26		sta $26		                sta tmp1+1
.8fff		20 3a 9c	jsr $9c3a	                jsr xt_name_to_int              ; ( nt -- xt )
.9002		e6 25		inc $25		                inc tmp1
.9004		d0 02		bne $9008	                bne +
.9006		e6 26		inc $26		                inc tmp1+1
.9008						+
.9008		b2 25		lda ($25)	                lda (tmp1)
.900a		29 04		and #$04	                and #IM         ; mask all but Intermediate flag
.900c		f0 05		beq $9013	                beq _not_immediate
.900e		20 f4 83	jsr $83f4	                jsr xt_compile_comma
.9011		80 0a		bra $901d	                bra _done
.9013						_not_immediate:
.9013		20 aa 8b	jsr $8baa	                jsr xt_literal
.9016		a0 83		ldy #$83	                ldy #>xt_compile_comma
.9018		a9 f4		lda #$f4	                lda #<xt_compile_comma
.901a		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.901d						_done:
.901d		60		rts		z_postpone:     rts
.901e						xt_question_dup:
.901e		20 df d7	jsr $d7df	                jsr underflow_1
.9021		b5 00		lda $00,x	                lda 0,x
.9023		15 01		ora $01,x	                ora 1,x
.9025		f0 0a		beq $9031	                beq _done
.9027		ca		dex		                dex
.9028		ca		dex		                dex
.9029		b5 02		lda $02,x	                lda 2,x
.902b		95 00		sta $00,x	                sta 0,x
.902d		b5 03		lda $03,x	                lda 3,x
.902f		95 01		sta $01,x	                sta 1,x
.9031						_done:
.9031		60		rts		z_question_dup: rts
.9032						xt_r_fetch:
.9032		7a		ply		                ply             ; LSB
.9033		84 25		sty $25		                sty tmp1
.9035		7a		ply		                ply             ; MSB
.9036		ca		dex		                dex
.9037		ca		dex		                dex
.9038		68		pla		                pla             ; LSB
.9039		95 00		sta $00,x	                sta 0,x
.903b		68		pla		                pla             ; MSB
.903c		95 01		sta $01,x	                sta 1,x
.903e		48		pha		                pha
.903f		b5 00		lda $00,x	                lda 0,x
.9041		48		pha		                pha
.9042		5a		phy		                phy             ; MSB
.9043		a4 25		ldy $25		                ldy tmp1
.9045		5a		phy		                phy             ; LSB
.9046		60		rts		z_r_fetch:      rts
.9047						xt_r_from:
.9047		68		pla		                pla             ; LSB
.9048		85 23		sta $23		                sta tmptos
.904a		7a		ply		                ply             ; MSB
.904b		ca		dex		                dex
.904c		ca		dex		                dex
.904d		68		pla		                pla             ; LSB
.904e		95 00		sta $00,x	                sta 0,x
.9050		68		pla		                pla             ; MSB
.9051		95 01		sta $01,x	                sta 1,x
.9053		5a		phy		                phy             ; MSB
.9054		a5 23		lda $23		                lda tmptos
.9056		48		pha		                pha             ; LSB
.9057		60		rts		z_r_from:       rts
.9058						xt_recurse:
.9058		a0 00		ldy #$00	                ldy #0
.905a		a9 20		lda #$20	                lda #OpJSR
.905c		91 00		sta ($00),y	                sta (cp),y
.905e		c8		iny		                iny
.905f		24 1c		bit $1c		                bit status
.9061		70 0c		bvs $906f	                bvs _nt_in_workword
.9063		a5 06		lda $06		                lda workword
.9065		91 00		sta ($00),y	                sta (cp),y
.9067		c8		iny		                iny
.9068		a5 07		lda $07		                lda workword+1
.906a		91 00		sta ($00),y	                sta (cp),y
.906c		c8		iny		                iny
.906d		80 1b		bra $908a	                bra _update_cp
.906f						_nt_in_workword:
.906f		a5 06		lda $06		                lda workword            ; LSB
.9071		18		clc		                clc
.9072		69 04		adc #$04	                adc #4
.9074		85 25		sta $25		                sta tmp1
.9076		a5 07		lda $07		                lda workword+1          ; MSB
.9078		69 00		adc #$00	                adc #0
.907a		85 26		sta $26		                sta tmp1+1
.907c		b2 25		lda ($25)	                lda (tmp1)
.907e		91 00		sta ($00),y	                sta (cp),y
.9080		5a		phy		                phy
.9081		a0 01		ldy #$01	                ldy #1
.9083		b1 25		lda ($25),y	                lda (tmp1),y
.9085		7a		ply		                ply
.9086		c8		iny		                iny
.9087		91 00		sta ($00),y	                sta (cp),y
.9089		c8		iny		                iny
.908a						_update_cp:
.908a		98		tya		                tya
.908b		18		clc		                clc
.908c		65 00		adc $00		                adc cp
.908e		85 00		sta $00		                sta cp
.9090		90 02		bcc $9094	                bcc _done
.9092		e6 01		inc $01		                inc cp+1
.9094						_done:
.9094		60		rts		z_recurse:      rts
.9095						xt_refill:
.9095		a5 0a		lda $0a		                lda insrc               ; cheat: We only check LSB
.9097		d0 2d		bne $90c6	                bne _src_not_kbd
.9099		ca		dex		                dex
.909a		ca		dex		                dex
.909b		ca		dex		                dex
.909c		ca		dex		                dex
.909d		a5 0c		lda $0c		                lda cib                 ; address of CIB is NOS
.909f		95 02		sta $02,x	                sta 2,x
.90a1		a5 0d		lda $0d		                lda cib+1
.90a3		95 03		sta $03,x	                sta 3,x
.90a5		64 0e		stz $0e		                stz ciblen              ; go in with empty buffer
.90a7		64 0f		stz $0f		                stz ciblen+1
.90a9		a9 ff		lda #$ff	                lda #bsize              ; max number of chars is TOS
.90ab		95 00		sta $00,x	                sta 0,x
.90ad		74 01		stz $01,x	                stz 1,x                 ; cheat: We only accept max 255
.90af		20 e6 80	jsr $80e6	                jsr xt_accept           ; ( addr n1 -- n2)
.90b2		b5 00		lda $00,x	                lda 0,x
.90b4		85 0e		sta $0e		                sta ciblen
.90b6		b5 01		lda $01,x	                lda 1,x
.90b8		85 0f		sta $0f		                sta ciblen+1            ; though we only accept 255 chars
.90ba		64 10		stz $10		                stz toin
.90bc		64 11		stz $11		                stz toin+1
.90be		a9 ff		lda #$ff	                lda #$FF                ; overwrite with TRUE flag
.90c0		95 00		sta $00,x	                sta 0,x
.90c2		95 01		sta $01,x	                sta 1,x
.90c4		80 10		bra $90d6	                bra _done
.90c6						_src_not_kbd:
.90c6		1a		inc a		                ina
.90c7		d0 08		bne $90d1	                bne _src_not_string
.90c9		ca		dex		                dex
.90ca		ca		dex		                dex
.90cb		74 00		stz $00,x	                stz 0,x
.90cd		74 01		stz $01,x	                stz 1,x
.90cf		80 05		bra $90d6	                bra z_refill
.90d1						_src_not_string:
.90d1		a9 01		lda #$01	                lda #err_badsource
.90d3		4c f5 d7	jmp $d7f5	                jmp error
.90d6						_done:
.90d6		60		rts		z_refill:       rts
.90d7						xt_repeat:
.90d7		20 21 82	jsr $8221	                jsr xt_again
.90da		4c e5 87	jmp $87e5	                jmp xt_then
.90dd						z_repeat:
.90dd						xt_right_bracket:
.90dd		a9 ff		lda #$ff	                lda #$FF
.90df		85 1a		sta $1a		                sta state
.90e1		85 1b		sta $1b		                sta state+1
.90e3						z_right_bracket:
.90e3		60		rts		                rts
.90e4						xt_rot:
.90e4		20 e9 d7	jsr $d7e9	                jsr underflow_3
.90e7		b4 05		ldy $05,x	                ldy 5,x         ; MSB first
.90e9		b5 03		lda $03,x	                lda 3,x
.90eb		95 05		sta $05,x	                sta 5,x
.90ed		b5 01		lda $01,x	                lda 1,x
.90ef		95 03		sta $03,x	                sta 3,x
.90f1		94 01		sty $01,x	                sty 1,x
.90f3		b4 04		ldy $04,x	                ldy 4,x         ; LSB next
.90f5		b5 02		lda $02,x	                lda 2,x
.90f7		95 04		sta $04,x	                sta 4,x
.90f9		b5 00		lda $00,x	                lda 0,x
.90fb		95 02		sta $02,x	                sta 2,x
.90fd		94 00		sty $00,x	                sty 0,x
.90ff		60		rts		z_rot:          rts
.9100						xt_rshift:
.9100		20 e4 d7	jsr $d7e4	                jsr underflow_2
.9103		b5 00		lda $00,x	                lda 0,x
.9105		29 0f		and #$0f	                and #%00001111
.9107		f0 08		beq $9111	                beq _done               ; if 0 shifts, quit
.9109		a8		tay		                tay
.910a						_loop:
.910a		56 03		lsr $03,x	                lsr 3,x
.910c		76 02		ror $02,x	                ror 2,x
.910e		88		dey		                dey
.910f		d0 f9		bne $910a	                bne _loop
.9111						_done:
.9111		e8		inx		                inx
.9112		e8		inx		                inx
.9113		60		rts		z_rshift:       rts
.9114						xt_s_backslash_quote:
.9114		a9 ff		lda #$ff	                lda #$FF
.9116		85 27		sta $27		                sta tmp2
.9118		64 28		stz $28		                stz tmp2+1
.911a		20 31 91	jsr $9131	                jsr s_quote_start
.911d						_done:
.911d						z_s_backslash_quote:
.911d		60		rts		                rts
.911e						convert_hex_value:
.911e		c9 41		cmp #$41	        cmp #'A'
.9120		90 07		bcc $9129	        bcc _digit
.9122		29 df		and #$df	        and #$DF                ; Make it uppercase.
.9124		38		sec		        sec
.9125		e9 37		sbc #$37	        sbc #'7'                ; gives value 10 for 'A'
.9127		80 03		bra $912c	        bra _done
.9129						_digit:
.9129		38		sec		        sec
.912a		e9 30		sbc #$30	        sbc #'0'
.912c						_done:
.912c		60		rts		        rts
.912d						xt_s_quote:
.912d		64 27		stz $27		                stz tmp2
.912f		64 28		stz $28		                stz tmp2+1
.9131						s_quote_start:
.9131		ca		dex		                dex
.9132		ca		dex		                dex
.9133		ca		dex		                dex
.9134		ca		dex		                dex
.9135		20 21 d6	jsr $d621	                jsr cmpl_jump
.9138		a5 00		lda $00		                lda cp
.913a		95 02		sta $02,x	                sta 2,x
.913c		a5 01		lda $01		                lda cp+1
.913e		95 03		sta $03,x	                sta 3,x
.9140						_savechars_loop:
.9140		a5 11		lda $11		                lda toin+1              ; MSB
.9142		c5 0f		cmp $0f		                cmp ciblen+1
.9144		90 2a		bcc $9170	                bcc _input_fine         ; unsigned comparison
.9146		a5 10		lda $10		                lda toin                ; LSB
.9148		c5 0e		cmp $0e		                cmp ciblen
.914a		90 24		bcc $9170	                bcc _input_fine
.914c		a5 27		lda $27		                lda tmp2
.914e		48		pha		                pha
.914f		a5 28		lda $28		                lda tmp2+1
.9151		48		pha		                pha
.9152		a5 29		lda $29		                lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
.9154		48		pha		                pha
.9155		20 95 90	jsr $9095	                jsr xt_refill           ; ( -- f )
.9158		68		pla		                pla
.9159		85 29		sta $29		                sta tmp3
.915b		68		pla		                pla
.915c		85 28		sta $28		                sta tmp2+1
.915e		68		pla		                pla
.915f		85 27		sta $27		                sta tmp2
.9161		b5 00		lda $00,x	                lda 0,x
.9163		15 01		ora $01,x	                ora 1,x
.9165		d0 05		bne $916c	                bne _refill_ok
.9167		a9 06		lda #$06	                lda #err_refill
.9169		4c f5 d7	jmp $d7f5	                jmp error
.916c						_refill_ok:
.916c		e8		inx		                inx
.916d		e8		inx		                inx
.916e		80 d0		bra $9140	                bra _savechars_loop
.9170						_input_fine:
.9170		a5 0c		lda $0c		                lda cib
.9172		18		clc		                clc
.9173		65 10		adc $10		                adc toin        ; LSB
.9175		85 25		sta $25		                sta tmp1
.9177		a5 0d		lda $0d		                lda cib+1
.9179		65 11		adc $11		                adc toin+1      ; MSB
.917b		85 26		sta $26		                sta tmp1+1
.917d		b2 25		lda ($25)	                lda (tmp1)
.917f		24 27		bit $27		                bit tmp2
.9181		30 03		bmi $9186	                bmi _handle_escapes    ; Only checking bit 7
.9183		4c 09 92	jmp $9209	                jmp _regular_char
.9186						_handle_escapes:
.9186		24 28		bit $28		                bit tmp2+1
.9188		30 03		bmi $918d	                bmi _escaped
.918a		4c ff 91	jmp $91ff	                jmp _not_escaped
.918d						_escaped:
.918d		70 3c		bvs $91cb	                bvs _check_esc_chars
.918f		a9 01		lda #$01	                lda #1
.9191		24 28		bit $28		                bit tmp2+1
.9193		d0 10		bne $91a5	                bne _esc_x_second_digit
.9195		e6 28		inc $28		                inc tmp2+1  ; Adjust flag for second digit next time.
.9197		b2 25		lda ($25)	                lda (tmp1)  ; Get the char again.
.9199		20 1e 91	jsr $911e	                jsr convert_hex_value
.919c		0a		asl a		                asl
.919d		0a		asl a		                asl
.919e		0a		asl a		                asl
.919f		0a		asl a		                asl
.91a0		85 29		sta $29		                sta tmp3    ; Save it for later.
.91a2		4c 10 92	jmp $9210	                jmp _next_character
.91a5						_esc_x_second_digit:
.91a5		64 28		stz $28		                stz tmp2+1
.91a7		b2 25		lda ($25)	                lda (tmp1)
.91a9		20 1e 91	jsr $911e	                jsr convert_hex_value
.91ac		05 29		ora $29		                ora tmp3
.91ae		4c 0d 92	jmp $920d	                jmp _save_character
.91b1						_esc_tr_table:
>91b1		07				    .byte   7               ; a -> BEL (ASCII value 7)
>91b2		08				    .byte   8               ; b -> Backspace (ASCII value 8)
>91b3		00 00				    .byte   0,0             ; c, d no escape
>91b5		1b				    .byte   27              ; e -> ESC (ASCII value 27)
>91b6		0c				    .byte   12              ; f -> FF (ASCII value 12)
>91b7		00 00 00 00 00			    .byte   0,0,0,0,0       ; g,h,i,j,k
>91bc		0a				    .byte   10              ; l -> LF (ASCII value 10)
>91bd		8d				    .byte   13+128          ; m -> CR/LF pair (ASCII values 13, 10)
>91be		0a				    .byte   10              ; n behaves like l --> lf
>91bf		00 00				    .byte   0,0             ; o,p
>91c1		22				    .byte   34              ; q -> Double quote (ASCII value 34)
>91c2		0d				    .byte   13              ; r ->  CR (ASCII value 13)
>91c3		00				    .byte   0               ; s
>91c4		09				    .byte   9               ; t -> Horizontal TAB (ASCII value 9)
>91c5		00				    .byte   0               ; u
>91c6		0b				    .byte   11              ; v -> Vertical TAB (ASCII value 11)
>91c7		00 00 00			    .byte   0,0,0           ; w,x,y   (x is a special case later)
>91ca		80				    .byte   0+128           ; z -> NULL (ASCII value 0)
.91cb						_check_esc_chars:
.91cb		64 28		stz $28		                stz tmp2+1
.91cd		c9 61		cmp #$61	                cmp #'a'
.91cf		30 1a		bmi $91eb	                bmi _check_esc_quote
.91d1		c9 7b		cmp #$7b	                cmp #'z'+1
.91d3		10 16		bpl $91eb	                bpl _check_esc_quote
.91d5		a8		tay		                tay
.91d6		b9 50 91	lda $9150,y	                lda _esc_tr_table - 'a',y   ; fake base address to index with a-z directly
.91d9		d0 03		bne $91de	                bne _esc_replace
.91db		98		tya		                tya                     ; revert if no translation
.91dc		80 0d		bra $91eb	                bra _check_esc_quote
.91de		10 2d		bpl $920d	_esc_replace:   bpl _save_character     ; simple replacement
.91e0		29 7f		and #$7f	                and #$7F                ; clear hi bit
.91e2		f0 29		beq $920d	                beq _save_character     ; NUL we can just output
.91e4		20 2c d6	jsr $d62c	                jsr cmpl_a              ; else output first char (CR)
.91e7		a9 0a		lda #$0a	                lda #10                 ; followed by LF
.91e9		80 22		bra $920d	                bra _save_character
.91eb						_check_esc_quote:
.91eb		c9 22		cmp #$22	                cmp #'"'
.91ed		f0 1e		beq $920d	                beq _save_character
.91ef						_check_esc_x:
.91ef		c9 78		cmp #$78	                cmp #'x'
.91f1		d0 06		bne $91f9	                bne _check_esc_backslash
.91f3		a9 be		lda #$be	                lda #%10111110        ; Clear bits 6 and 0
.91f5		85 28		sta $28		                sta tmp2+1
.91f7		80 17		bra $9210	                bra _next_character
.91f9						_check_esc_backslash:
.91f9		c9 5c		cmp #$5c	                cmp #'\'
.91fb		d0 0c		bne $9209	                bne _regular_char
.91fd		80 0e		bra $920d	                bra _save_character
.91ff						_not_escaped:
.91ff		c9 5c		cmp #$5c	                cmp #'\'
.9201		d0 06		bne $9209	                bne _regular_char
.9203		a9 ff		lda #$ff	                lda #$FF
.9205		85 28		sta $28		                sta tmp2+1
.9207		80 07		bra $9210	                bra _next_character
.9209						_regular_char:
.9209		c9 22		cmp #$22	                cmp #'"'
.920b		f0 0c		beq $9219	                beq _found_string_end
.920d						_save_character:
.920d		20 2c d6	jsr $d62c	                jsr cmpl_a
.9210						_next_character:
.9210		e6 10		inc $10		                inc toin
.9212		d0 02		bne $9216	                bne _savechars_loop_longjump
.9214		e6 11		inc $11		                inc toin+1
.9216						_savechars_loop_longjump:
.9216		4c 40 91	jmp $9140	                jmp _savechars_loop
.9219						_found_string_end:
.9219		e6 10		inc $10		                inc toin
.921b		d0 02		bne $921f	                bne +
.921d		e6 11		inc $11		                inc toin+1
.921f						+
.921f		a5 00		lda $00		                lda cp
.9221		38		sec		                sec
.9222		f5 02		sbc $02,x	                sbc 2,x
.9224		95 00		sta $00,x	                sta 0,x         ; LSB
.9226		a5 01		lda $01		                lda cp+1
.9228		f5 03		sbc $03,x	                sbc 3,x
.922a		95 01		sta $01,x	                sta 1,x         ; MSB
.922c		b5 02		lda $02,x	                lda 2,x
.922e		38		sec		                sec
.922f		e9 02		sbc #$02	                sbc #2
.9231		85 25		sta $25		                sta tmp1
.9233		b5 03		lda $03,x	                lda 3,x
.9235		e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.9237		85 26		sta $26		                sta tmp1+1
.9239		a5 00		lda $00		                lda cp
.923b		92 25		sta ($25)	                sta (tmp1)
.923d		a0 01		ldy #$01	                ldy #1
.923f		a5 01		lda $01		                lda cp+1
.9241		91 25		sta ($25),y	                sta (tmp1),y
.9243		a5 1a		lda $1a		                lda state
.9245		05 1b		ora $1b		                ora state+1             ; paranoid
.9247		f0 03		beq $924c	                beq _done
.9249		20 81 a1	jsr $a181	                jsr sliteral_const_str         ; ( addr u -- )
.924c						_done:
.924c		60		rts		z_s_quote:      rts
.924d						xt_s_to_d:
.924d		20 df d7	jsr $d7df	                jsr underflow_1
.9250		ca		dex		                dex
.9251		ca		dex		                dex
.9252		74 00		stz $00,x	                stz 0,x
.9254		74 01		stz $01,x	                stz 1,x
.9256		b5 03		lda $03,x	                lda 3,x
.9258		10 04		bpl $925e	                bpl _done
.925a		d6 00		dec $00,x	                dec 0,x
.925c		d6 01		dec $01,x	                dec 1,x
.925e						_done:
.925e		60		rts		z_s_to_d:       rts
.925f						xt_semicolon:
.925f		24 1c		bit $1c		                bit status
.9261		70 11		bvs $9274	                bvs _colonword
.9263		a9 60		lda #$60	                lda #OpRTS
.9265		20 2c d6	jsr $d62c	                jsr cmpl_a
.9268		ca		dex		                dex
.9269		ca		dex		                dex
.926a		a5 06		lda $06		                lda workword
.926c		95 00		sta $00,x	                sta 0,x
.926e		a5 07		lda $07		                lda workword+1
.9270		95 01		sta $01,x	                sta 1,x
.9272		80 45		bra $92b9	                bra _semicolon_done
.9274						_colonword:
.9274		a0 06		ldy #$06	                ldy #6
.9276		a5 00		lda $00		                lda cp
.9278		91 06		sta ($06),y	                sta (workword),y
.927a		c8		iny		                iny
.927b		a5 01		lda $01		                lda cp+1
.927d		91 06		sta ($06),y	                sta (workword),y
.927f		a9 60		lda #$60	                lda #OpRTS
.9281		20 2c d6	jsr $d62c	                jsr cmpl_a
.9284		24 1c		bit $1c		                bit status
.9286		10 26		bpl $92ae	                bpl _new_word   ; Bit 7 is clear = new word
.9288		ca		dex		                dex
.9289		ca		dex		                dex
.928a		ca		dex		                dex
.928b		ca		dex		                dex
.928c		b2 06		lda ($06)	                lda (workword)
.928e		95 00		sta $00,x	                sta 0,x
.9290		74 01		stz $01,x	                stz 1,x
.9292		a5 06		lda $06		                lda workword
.9294		18		clc		                clc
.9295		69 08		adc #$08	                adc #8
.9297		95 02		sta $02,x	                sta 2,x
.9299		a5 07		lda $07		                lda workword+1
.929b		69 00		adc #$00	                adc #0                  ; only want carry
.929d		95 03		sta $03,x	                sta 3,x
.929f		a9 02		lda #$02	                lda #str_redefined       ; address of string "redefined"
.92a1		20 1b d8	jsr $d81b	                jsr print_string_no_lf
.92a4		20 45 96	jsr $9645	                jsr xt_type
.92a7		20 39 93	jsr $9339	                jsr xt_space
.92aa		a9 80		lda #$80	                lda #%10000000
.92ac		14 1c		trb $1c		                trb status
.92ae						_new_word:
.92ae		a5 06		lda $06		                lda workword
.92b0		85 02		sta $02		                sta dp
.92b2		a5 07		lda $07		                lda workword+1
.92b4		85 03		sta $03		                sta dp+1
.92b6		20 39 d7	jsr $d739	                jsr dp_to_current       ; Save the updated DP to the
.92b9						_semicolon_done:
.92b9		64 1a		stz $1a		                stz state
.92bb		64 1b		stz $1b		                stz state+1
.92bd		60		rts		z_semicolon:    rts
.92be						xt_sign:
.92be		20 df d7	jsr $d7df	                jsr underflow_1
.92c1		b5 01		lda $01,x	                lda 1,x         ; check MSB of TOS
.92c3		30 04		bmi $92c9	                bmi _minus
.92c5		e8		inx		                inx
.92c6		e8		inx		                inx
.92c7		80 09		bra $92d2	                bra _done
.92c9						_minus:
.92c9		a9 2d		lda #$2d	                lda #'-'
.92cb		95 00		sta $00,x	                sta 0,x         ; overwrite TOS
.92cd		74 01		stz $01,x	                stz 1,x         ; paranoid
.92cf		20 a3 8a	jsr $8aa3	                jsr xt_hold
.92d2						_done:
.92d2		60		rts		z_sign:         rts
.92d3						xt_slash:
.92d3		a9 00		lda #$00	                lda #0
.92d5		48		pha		                pha
.92d6		80 03		bra $92db	                bra slashmod_common
.92d8						xt_slash_mod:
.92d8		a9 ff		lda #$ff	                lda #$FF
.92da		48		pha		                pha             ; falls through to _common
.92db						slashmod_common:
.92db		20 fc 94	jsr $94fc	                jsr xt_to_r             ; >R
.92de		20 4d 92	jsr $924d	                jsr xt_s_to_d           ; S>D
.92e1		20 47 90	jsr $9047	                jsr xt_r_from           ; R>
.92e4		20 f0 92	jsr $92f0	                jsr xt_sm_slash_rem     ; SM/REM
.92e7		68		pla		                pla
.92e8		d0 05		bne $92ef	                bne _done
.92ea		20 be 93	jsr $93be	                jsr xt_swap
.92ed		e8		inx		                inx             ; DROP
.92ee		e8		inx		                inx
.92ef						_done:
.92ef						z_slash_mod:
.92ef		60		rts		z_slash:        rts
.92f0						xt_sm_slash_rem:
.92f0		20 e9 d7	jsr $d7e9	                jsr underflow_3 ; contains double number
.92f3		b5 03		lda $03,x	                lda 3,x
.92f5		48		pha		                pha
.92f6		b5 01		lda $01,x	                lda 1,x
.92f8		55 03		eor $03,x	                eor 3,x
.92fa		48		pha		                pha
.92fb		20 d1 80	jsr $80d1	                jsr xt_abs
.92fe		e8		inx		                inx             ; pretend we pushed n1 to R
.92ff		e8		inx		                inx
.9300		20 4c 9e	jsr $9e4c	                jsr xt_dabs
.9303		ca		dex		                dex
.9304		ca		dex		                dex
.9305		20 ca 96	jsr $96ca	                jsr xt_um_slash_mod     ; UM/MOD
.9308		68		pla		                pla
.9309		10 03		bpl $930e	                bpl +
.930b		20 78 8d	jsr $8d78	                jsr xt_negate
.930e						+
.930e		68		pla		                pla
.930f		10 07		bpl $9318	                bpl _done
.9311		e8		inx		                inx             ; pretend we pushed quotient to R
.9312		e8		inx		                inx
.9313		20 78 8d	jsr $8d78	                jsr xt_negate
.9316		ca		dex		                dex
.9317		ca		dex		                dex
.9318						_done:
.9318		60		rts		z_sm_slash_rem: rts
.9319						xt_source:
.9319		ca		dex		                dex
.931a		ca		dex		                dex
.931b		a5 0c		lda $0c		                lda cib
.931d		95 00		sta $00,x	                sta 0,x
.931f		a5 0d		lda $0d		                lda cib+1
.9321		95 01		sta $01,x	                sta 1,x
.9323		ca		dex		                dex
.9324		ca		dex		                dex
.9325		a5 0e		lda $0e		                lda ciblen
.9327		95 00		sta $00,x	                sta 0,x
.9329		a5 0f		lda $0f		                lda ciblen+1
.932b		95 01		sta $01,x	                sta 1,x
.932d		60		rts		z_source:       rts
.932e						xt_source_id:
.932e		ca		dex		                dex
.932f		ca		dex		                dex
.9330		a5 0a		lda $0a		                lda insrc
.9332		95 00		sta $00,x	                sta 0,x
.9334		a5 0b		lda $0b		                lda insrc+1
.9336		95 01		sta $01,x	                sta 1,x
.9338		60		rts		z_source_id:    rts
.9339						xt_space:
.9339		a9 20		lda #$20	                lda #AscSP
.933b		20 3b 88	jsr $883b	                jsr emit_a
.933e		60		rts		z_space:        rts
.933f						xt_spaces:
.933f		20 df d7	jsr $d7df	                jsr underflow_1
.9342		20 fd 9d	jsr $9dfd	                jsr xt_zero
.9345		20 05 8d	jsr $8d05	                jsr xt_max
.9348		b5 00		lda $00,x	                lda 0,x
.934a		15 01		ora $01,x	                ora 1,x
.934c		f0 2a		beq $9378	                beq _done
.934e		b4 01		ldy $01,x	                ldy 1,x
.9350		d0 0c		bne $935e	                bne _lots_of_spaces
.9352		b4 00		ldy $00,x	                ldy 0,x
.9354						_quick_loop:
.9354		a9 20		lda #$20	                lda #AscSP
.9356		20 3b 88	jsr $883b	                jsr emit_a
.9359		88		dey		                dey
.935a		f0 1c		beq $9378	                beq _done
.935c		80 f6		bra $9354	                bra _quick_loop
.935e						_lots_of_spaces:
.935e		b4 00		ldy $00,x	                ldy 0,x
.9360						_first_slow_loop:
.9360		f0 08		beq $936a	                beq _slow_outer_loop
.9362		a9 20		lda #$20	                lda #AscSP
.9364		20 3b 88	jsr $883b	                jsr emit_a
.9367		88		dey		                dey
.9368		80 f6		bra $9360	                bra _first_slow_loop
.936a						_slow_outer_loop:
.936a		a0 00		ldy #$00	                ldy #00
.936c						_slow_inner_loop:
.936c		a9 20		lda #$20	                lda #AscSP
.936e		20 3b 88	jsr $883b	                jsr emit_a
.9371		88		dey		                dey
.9372		d0 f8		bne $936c	                bne _slow_inner_loop
.9374		d6 01		dec $01,x	                dec 1,x
.9376		d0 f2		bne $936a	                bne _slow_outer_loop
.9378						_done:
.9378		e8		inx		                inx             ; drop
.9379		e8		inx		                inx
.937a		60		rts		z_spaces:       rts
.937b						xt_star:
.937b		20 e4 d7	jsr $d7e4	                jsr underflow_2
.937e		20 0c 97	jsr $970c	                jsr xt_um_star
.9381		e8		inx		                inx
.9382		e8		inx		                inx
.9383		60		rts		z_star:         rts
.9384						xt_star_slash:
.9384		20 8d 93	jsr $938d	                jsr xt_star_slash_mod
.9387		20 be 93	jsr $93be	                jsr xt_swap
.938a		e8		inx		                inx
.938b		e8		inx		                inx
.938c						z_star_slash:
.938c		60		rts		                rts
.938d						xt_star_slash_mod:
.938d		20 e9 d7	jsr $d7e9	                jsr underflow_3
.9390		20 fc 94	jsr $94fc	                jsr xt_to_r
.9393		20 7b 8c	jsr $8c7b	                jsr xt_m_star
.9396		20 47 90	jsr $9047	                jsr xt_r_from
.9399		20 f0 92	jsr $92f0	                jsr xt_sm_slash_rem
.939c						z_star_slash_mod:
.939c		60		rts		                rts
.939d						xt_state:
.939d		ca		dex		                dex
.939e		ca		dex		                dex
.939f		a9 1a		lda #$1a	                lda #<state
.93a1		95 00		sta $00,x	                sta 0,x
.93a3		a9 00		lda #$00	                lda #>state
.93a5		95 01		sta $01,x	                sta 1,x
.93a7		60		rts		z_state:        rts
.93a8						xt_store:
.93a8		20 e4 d7	jsr $d7e4	                jsr underflow_2
.93ab		b5 02		lda $02,x	                lda 2,x         ; LSB
.93ad		81 00		sta ($00,x)	                sta (0,x)
.93af		f6 00		inc $00,x	                inc 0,x
.93b1		d0 02		bne $93b5	                bne +
.93b3		f6 01		inc $01,x	                inc 1,x
.93b5						+
.93b5		b5 03		lda $03,x	                lda 3,x         ; MSB
.93b7		81 00		sta ($00,x)	                sta (0,x)
.93b9		e8		inx		                inx             ; 2DROP
.93ba		e8		inx		                inx
.93bb		e8		inx		                inx
.93bc		e8		inx		                inx
.93bd		60		rts		z_store:        rts
.93be						xt_swap:
.93be		20 e4 d7	jsr $d7e4	                jsr underflow_2
.93c1		b5 00		lda $00,x	                lda 0,x         ; LSB
.93c3		b4 02		ldy $02,x	                ldy 2,x
.93c5		95 02		sta $02,x	                sta 2,x
.93c7		94 00		sty $00,x	                sty 0,x
.93c9		b5 01		lda $01,x	                lda 1,x         ; MSB
.93cb		b4 03		ldy $03,x	                ldy 3,x
.93cd		95 03		sta $03,x	                sta 3,x
.93cf		94 01		sty $01,x	                sty 1,x
.93d1		60		rts		z_swap:         rts
.93d2						xt_tick:
.93d2		20 aa 8e	jsr $8eaa	                jsr xt_parse_name       ; ( -- addr u )
.93d5		b5 00		lda $00,x	                lda 0,x
.93d7		15 01		ora $01,x	                ora 1,x
.93d9		d0 05		bne $93e0	                bne +
.93db		a9 05		lda #$05	                lda #err_noname
.93dd		4c f5 d7	jmp $d7f5	                jmp error
.93e0						+
.93e0		20 fc 9a	jsr $9afc	                jsr xt_find_name        ; ( addr u -- nt )
.93e3		b5 00		lda $00,x	                lda 0,x
.93e5		15 01		ora $01,x	                ora 1,x
.93e7		d0 05		bne $93ee	                bne +
.93e9		a9 08		lda #$08	                lda #err_syntax
.93eb		4c f5 d7	jmp $d7f5	                jmp error
.93ee						+
.93ee		20 3a 9c	jsr $9c3a	                jsr xt_name_to_int      ; ( nt -- xt )
.93f1		60		rts		z_tick:         rts
.93f2						xt_to:
.93f2		20 d2 93	jsr $93d2	                jsr xt_tick             ; ( [n] xt )
.93f5		b5 00		lda $00,x	                lda 0,x                 ; LSB
.93f7		18		clc		                clc
.93f8		69 03		adc #$03	                adc #3
.93fa		85 25		sta $25		                sta tmp1
.93fc		b5 01		lda $01,x	                lda 1,x                 ; MSB
.93fe		69 00		adc #$00	                adc #0                  ; we just want the carry
.9400		85 26		sta $26		                sta tmp1+1
.9402		a5 1a		lda $1a		                lda state
.9404		05 1b		ora $1b		                ora state+1
.9406		f0 14		beq $941c	                beq _interpret
.9408		a5 25		lda $25		                lda tmp1            ; replace TOS with tmp1
.940a		95 00		sta $00,x	                sta 0,x
.940c		a5 26		lda $26		                lda tmp1+1
.940e		95 01		sta $01,x	                sta 1,x
.9410		20 aa 8b	jsr $8baa	                jsr xt_literal      ; generate the runtime for LITERAL tmp1
.9413		a0 93		ldy #$93	                ldy #>xt_store      ; write the runtime for !
.9415		a9 a8		lda #$a8	                lda #<xt_store
.9417		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.941a		80 11		bra $942d	                bra _done
.941c						_interpret:
.941c		20 e4 d7	jsr $d7e4	                jsr underflow_2
.941f		e8		inx		                inx
.9420		e8		inx		                inx                     ; leaving just ( n )
.9421		b5 00		lda $00,x	                lda 0,x
.9423		92 25		sta ($25)	                sta (tmp1)              ; LSB
.9425		a0 01		ldy #$01	                ldy #1
.9427		b5 01		lda $01,x	                lda 1,x                 ; MSB
.9429		91 25		sta ($25),y	                sta (tmp1),y            ; fall through to common
.942b		e8		inx		                inx                     ; DROP
.942c		e8		inx		                inx
.942d						_done:
.942d		60		rts		z_to:           rts
.942e						xt_to_body:
.942e		20 df d7	jsr $d7df	                jsr underflow_1
.9431		20 cb 87	jsr $87cb	                jsr xt_dup              ; ( xt xt )
.9434		20 b4 9b	jsr $9bb4	                jsr xt_int_to_name      ; ( xt nt )
.9437		f6 00		inc $00,x	                inc 0,x
.9439		d0 02		bne $943d	                bne +
.943b		f6 01		inc $01,x	                inc 1,x
.943d						+
.943d		a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.943f		29 20		and #$20	                and #HC
.9441		f0 0b		beq $944e	                beq _no_cfa
.9443		18		clc		                clc
.9444		b5 02		lda $02,x	                lda 2,x         ; LSB
.9446		69 03		adc #$03	                adc #3
.9448		95 02		sta $02,x	                sta 2,x
.944a		90 02		bcc $944e	                bcc _no_cfa
.944c		f6 03		inc $03,x	                inc 3,x         ; MSB
.944e						_no_cfa:
.944e		e8		inx		                inx             ; get rid of the nt
.944f		e8		inx		                inx
.9450						_done:
.9450		60		rts		z_to_body:      rts
.9451						xt_to_in:
.9451		ca		dex		                dex
.9452		ca		dex		                dex
.9453		a9 10		lda #$10	                lda #<toin
.9455		95 00		sta $00,x	                sta 0,x
.9457		a9 00		lda #$00	                lda #>toin      ; paranoid, should be zero
.9459		95 01		sta $01,x	                sta 1,x
.945b		60		rts		z_to_in:        rts
.945c						xt_to_number:
.945c		20 ee d7	jsr $d7ee	                jsr underflow_4
.945f		b5 06		lda $06,x	                lda 6,x         ; ud-lo LSB
.9461		85 2d		sta $2d		                sta scratch
.9463		b5 07		lda $07,x	                lda 7,x         ; ud-lo MSB
.9465		85 2e		sta $2e		                sta scratch+1
.9467		b5 04		lda $04,x	                lda 4,x         ; ud-hi LSB
.9469		85 2f		sta $2f		                sta scratch+2
.946b		b5 05		lda $05,x	                lda 5,x         ; ud-hi MSB
.946d		85 30		sta $30		                sta scratch+3
.946f		ca		dex		                dex
.9470		ca		dex		                dex
.9471						_loop:
.9471		a1 04		lda ($04,x)	                lda (4,x)
.9473		95 00		sta $00,x	                sta 0,x                 ; ( ud-lo ud-hi addr u char )
.9475		74 01		stz $01,x	                stz 1,x                 ; paranoid
.9477		20 a0 9a	jsr $9aa0	                jsr xt_digit_question   ; ( char -- n -1 | char 0 )
.947a		b5 00		lda $00,x	                lda 0,x
.947c		d0 04		bne $9482	                bne _digit_ok
.947e		e8		inx		                inx
.947f		e8		inx		                inx
.9480		80 67		bra $94e9	                bra _done       ; ( ud-lo ud-hi addr u char )
.9482						_digit_ok:
.9482		b5 02		lda $02,x	                lda 2,x
.9484		85 31		sta $31		                sta scratch+4
.9486		b5 03		lda $03,x	                lda 3,x
.9488		85 32		sta $32		                sta scratch+5
.948a		a5 2f		lda $2f		                lda scratch+2
.948c		95 02		sta $02,x	                sta 2,x         ; NOS
.948e		a5 30		lda $30		                lda scratch+3
.9490		95 03		sta $03,x	                sta 3,x
.9492		a5 18		lda $18		                lda base
.9494		95 00		sta $00,x	                sta 0,x         ; TOS
.9496		74 01		stz $01,x	                stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
.9498		20 0c 97	jsr $970c	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
.949b		b5 02		lda $02,x	                lda 2,x         ; ud-hi-lo
.949d		85 33		sta $33		                sta scratch+6
.949f		b5 03		lda $03,x	                lda 3,x
.94a1		85 34		sta $34		                sta scratch+7
.94a3		a5 2d		lda $2d		                lda scratch
.94a5		95 02		sta $02,x	                sta 2,x
.94a7		a5 2e		lda $2e		                lda scratch+1
.94a9		95 03		sta $03,x	                sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
.94ab		a5 18		lda $18		                lda base
.94ad		95 00		sta $00,x	                sta 0,x
.94af		74 01		stz $01,x	                stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
.94b1		20 0c 97	jsr $970c	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
.94b4		b5 00		lda $00,x	                lda 0,x
.94b6		85 2f		sta $2f		                sta scratch+2
.94b8		b5 01		lda $01,x	                lda 1,x
.94ba		85 30		sta $30		                sta scratch+3
.94bc		b5 02		lda $02,x	                lda 2,x
.94be		85 2d		sta $2d		                sta scratch
.94c0		b5 03		lda $03,x	                lda 3,x
.94c2		85 2e		sta $2e		                sta scratch+1
.94c4		18		clc		                clc
.94c5		a5 2d		lda $2d		                lda scratch     ; ud-lo LSB
.94c7		65 31		adc $31		                adc scratch+4   ; n LSB
.94c9		85 2d		sta $2d		                sta scratch     ; this is the new ud-lo
.94cb		a5 2e		lda $2e		                lda scratch+1   ; ud-lo MSB
.94cd		65 32		adc $32		                adc scratch+5   ; n MSB
.94cf		85 2e		sta $2e		                sta scratch+1
.94d1		a5 2f		lda $2f		                lda scratch+2   ; LSB
.94d3		65 33		adc $33		                adc scratch+6
.94d5		85 2f		sta $2f		                sta scratch+2   ; this is the new ud-hi
.94d7		a5 30		lda $30		                lda scratch+3   ; MSB
.94d9		65 34		adc $34		                adc scratch+7
.94db		85 30		sta $30		                sta scratch+3
.94dd		e8		inx		                inx
.94de		e8		inx		                inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
.94df		f6 04		inc $04,x	                inc 4,x
.94e1		d0 02		bne $94e5	                bne +
.94e3		f6 05		inc $05,x	                inc 5,x
.94e5						+
.94e5		d6 02		dec $02,x	                dec 2,x
.94e7		d0 88		bne $9471	                bne _loop
.94e9						_done:
.94e9		e8		inx		                inx
.94ea		e8		inx		                inx             ; ( ud-lo ud-hi addr u )
.94eb		a5 2d		lda $2d		                lda scratch     ; new ud-lo
.94ed		95 06		sta $06,x	                sta 6,x
.94ef		a5 2e		lda $2e		                lda scratch+1
.94f1		95 07		sta $07,x	                sta 7,x
.94f3		a5 2f		lda $2f		                lda scratch+2
.94f5		95 04		sta $04,x	                sta 4,x
.94f7		a5 30		lda $30		                lda scratch+3
.94f9		95 05		sta $05,x	                sta 5,x
.94fb		60		rts		z_to_number:    rts
.94fc						xt_to_r:
.94fc		68		pla		                pla             ; LSB
.94fd		85 23		sta $23		                sta tmptos
.94ff		7a		ply		                ply             ; MSB
.9500		20 df d7	jsr $d7df	                jsr underflow_1
.9503		b5 01		lda $01,x	                lda 1,x         ; MSB
.9505		48		pha		                pha
.9506		b5 00		lda $00,x	                lda 0,x         ; LSB
.9508		48		pha		                pha
.9509		e8		inx		                inx
.950a		e8		inx		                inx
.950b		5a		phy		                phy             ; MSB
.950c		a5 23		lda $23		                lda tmptos
.950e		48		pha		                pha             ; LSB
.950f		60		rts		z_to_r:         rts
.9510						xt_true:
.9510		ca		dex		                dex
.9511		ca		dex		                dex
.9512		a9 ff		lda #$ff	                lda #$FF
.9514		95 00		sta $00,x	                sta 0,x
.9516		95 01		sta $01,x	                sta 1,x
.9518		60		rts		z_true:         rts
.9519						xt_tuck:
.9519		20 e4 d7	jsr $d7e4	                jsr underflow_2
.951c		ca		dex		                dex
.951d		ca		dex		                dex
.951e		b4 04		ldy $04,x	                ldy 4,x         ; LSB
.9520		b5 02		lda $02,x	                lda 2,x
.9522		95 04		sta $04,x	                sta 4,x
.9524		94 02		sty $02,x	                sty 2,x
.9526		95 00		sta $00,x	                sta 0,x
.9528		b4 05		ldy $05,x	                ldy 5,x         ; MSB
.952a		b5 03		lda $03,x	                lda 3,x
.952c		95 05		sta $05,x	                sta 5,x
.952e		94 03		sty $03,x	                sty 3,x         ; bba
.9530		95 01		sta $01,x	                sta 1,x         ; baa
.9532		60		rts		z_tuck:         rts
.9533						xt_two_drop:
.9533		20 e4 d7	jsr $d7e4	                jsr underflow_2
.9536		e8		inx		                inx
.9537		e8		inx		                inx
.9538		e8		inx		                inx
.9539		e8		inx		                inx
.953a		60		rts		z_two_drop:     rts
.953b						xt_two_dup:
.953b		20 e4 d7	jsr $d7e4	                jsr underflow_2
.953e		ca		dex		                dex
.953f		ca		dex		                dex
.9540		ca		dex		                dex
.9541		ca		dex		                dex
.9542		b5 04		lda $04,x	                lda 4,x         ; TOS
.9544		95 00		sta $00,x	                sta 0,x
.9546		b5 05		lda $05,x	                lda 5,x
.9548		95 01		sta $01,x	                sta 1,x
.954a		b5 06		lda $06,x	                lda 6,x         ; NOS
.954c		95 02		sta $02,x	                sta 2,x
.954e		b5 07		lda $07,x	                lda 7,x
.9550		95 03		sta $03,x	                sta 3,x
.9552		60		rts		z_two_dup:      rts
.9553						xt_two_fetch:
.9553		20 df d7	jsr $d7df	                jsr underflow_1
.9556		b5 00		lda $00,x	                lda 0,x
.9558		85 25		sta $25		                sta tmp1
.955a		b4 01		ldy $01,x	                ldy 1,x
.955c		84 26		sty $26		                sty tmp1+1
.955e		ca		dex		                dex             ; reuse one stack element
.955f		ca		dex		                dex
.9560		b2 25		lda ($25)	                lda (tmp1)      ; copy LSB
.9562		95 00		sta $00,x	                sta 0,x
.9564		a0 01		ldy #$01	                ldy #1          ; copy next
.9566		b1 25		lda ($25),y	                lda (tmp1),y
.9568		95 01		sta $01,x	                sta 1,x
.956a		c8		iny		                iny             ; copy next
.956b		b1 25		lda ($25),y	                lda (tmp1),y
.956d		95 02		sta $02,x	                sta 2,x
.956f		c8		iny		                iny             ; copy next
.9570		b1 25		lda ($25),y	                lda (tmp1),y
.9572		95 03		sta $03,x	                sta 3,x
.9574		60		rts		z_two_fetch:    rts
.9575						xt_two_over:
.9575		20 ee d7	jsr $d7ee	                jsr underflow_4
.9578		ca		dex		                dex
.9579		ca		dex		                dex
.957a		ca		dex		                dex
.957b		ca		dex		                dex
.957c		b5 08		lda $08,x	                lda 8,x
.957e		95 00		sta $00,x	                sta 0,x
.9580		b5 09		lda $09,x	                lda 9,x
.9582		95 01		sta $01,x	                sta 1,x
.9584		b5 0a		lda $0a,x	                lda 10,x
.9586		95 02		sta $02,x	                sta 2,x
.9588		b5 0b		lda $0b,x	                lda 11,x
.958a		95 03		sta $03,x	                sta 3,x
.958c		60		rts		z_two_over:     rts
.958d						xt_two_r_fetch:
.958d		ca		dex		                dex
.958e		ca		dex		                dex
.958f		ca		dex		                dex
.9590		ca		dex		                dex
.9591		8a		txa		                txa
.9592		ba		tsx		                tsx
.9593		da		phx		                phx             ; 65c02 has no TXY, so do it the hard way
.9594		7a		ply		                ply
.9595		aa		tax		                tax
.9596		b9 03 01	lda $0103,y	                lda $0103,y     ; LSB of top entry
.9599		95 00		sta $00,x	                sta 0,x
.959b		b9 04 01	lda $0104,y	                lda $0104,y     ; MSB of top entry
.959e		95 01		sta $01,x	                sta 1,x
.95a0		b9 05 01	lda $0105,y	                lda $0105,y     ; LSB of bottom entry
.95a3		95 02		sta $02,x	                sta 2,x
.95a5		b9 06 01	lda $0106,y	                lda $0106,y     ; MSB of top entry
.95a8		95 03		sta $03,x	                sta 3,x
.95aa		60		rts		z_two_r_fetch:  rts
.95ab						xt_two_r_from:
.95ab		68		pla		                pla                     ; LSB
.95ac		85 25		sta $25		                sta tmp1
.95ae		68		pla		                pla                     ; MSB
.95af		85 26		sta $26		                sta tmp1+1
.95b1		ca		dex		                dex
.95b2		ca		dex		                dex
.95b3		ca		dex		                dex
.95b4		ca		dex		                dex
.95b5		68		pla		                pla                     ; LSB
.95b6		95 00		sta $00,x	                sta 0,x
.95b8		68		pla		                pla                     ; MSB
.95b9		95 01		sta $01,x	                sta 1,x
.95bb		68		pla		                pla                     ; LSB
.95bc		95 02		sta $02,x	                sta 2,x
.95be		68		pla		                pla                     ; MSB
.95bf		95 03		sta $03,x	                sta 3,x
.95c1		a5 26		lda $26		                lda tmp1+1              ; MSB
.95c3		48		pha		                pha
.95c4		a5 25		lda $25		                lda tmp1                ; LSB
.95c6		48		pha		                pha
.95c7		60		rts		z_two_r_from:   rts
.95c8						xt_two_slash:
.95c8		20 df d7	jsr $d7df	                jsr underflow_1
.95cb		b5 01		lda $01,x	                lda 1,x
.95cd		0a		asl a		                asl                     ; save the sign
.95ce		76 01		ror $01,x	                ror 1,x
.95d0		76 00		ror $00,x	                ror 0,x
.95d2		60		rts		z_two_slash:    rts
.95d3						xt_two_star:
.95d3						xt_cells:
.95d3		20 df d7	jsr $d7df	                jsr underflow_1
.95d6		16 00		asl $00,x	                asl 0,x
.95d8		36 01		rol $01,x	                rol 1,x
.95da						z_cells:
.95da		60		rts		z_two_star:     rts
.95db						xt_two_store:
.95db		20 e9 d7	jsr $d7e9	                jsr underflow_3
.95de		b5 00		lda $00,x	                lda 0,x
.95e0		85 25		sta $25		                sta tmp1
.95e2		b4 01		ldy $01,x	                ldy 1,x
.95e4		84 26		sty $26		                sty tmp1+1
.95e6		e8		inx		                inx
.95e7		e8		inx		                inx
.95e8		b5 00		lda $00,x	                lda 0,x         ; copy MSB
.95ea		92 25		sta ($25)	                sta (tmp1)
.95ec		b5 01		lda $01,x	                lda 1,x         ; copy next
.95ee		a0 01		ldy #$01	                ldy #1
.95f0		91 25		sta ($25),y	                sta (tmp1),y
.95f2		b5 02		lda $02,x	                lda 2,x         ; copy next
.95f4		c8		iny		                iny
.95f5		91 25		sta ($25),y	                sta (tmp1),y
.95f7		b5 03		lda $03,x	                lda 3,x         ; copy MSB
.95f9		c8		iny		                iny
.95fa		91 25		sta ($25),y	                sta (tmp1),y
.95fc		e8		inx		                inx             ; 2DROP
.95fd		e8		inx		                inx
.95fe		e8		inx		                inx
.95ff		e8		inx		                inx
.9600		60		rts		z_two_store:    rts
.9601						xt_two_swap:
.9601		20 ee d7	jsr $d7ee	                jsr underflow_4
.9604		b5 00		lda $00,x	                lda 0,x
.9606		b4 04		ldy $04,x	                ldy 4,x
.9608		95 04		sta $04,x	                sta 4,x
.960a		94 00		sty $00,x	                sty 0,x
.960c		b5 01		lda $01,x	                lda 1,x
.960e		b4 05		ldy $05,x	                ldy 5,x
.9610		95 05		sta $05,x	                sta 5,x
.9612		94 01		sty $01,x	                sty 1,x
.9614		b5 02		lda $02,x	                lda 2,x
.9616		b4 06		ldy $06,x	                ldy 6,x
.9618		95 06		sta $06,x	                sta 6,x
.961a		94 02		sty $02,x	                sty 2,x
.961c		b5 03		lda $03,x	                lda 3,x
.961e		b4 07		ldy $07,x	                ldy 7,x
.9620		95 07		sta $07,x	                sta 7,x
.9622		94 03		sty $03,x	                sty 3,x
.9624		60		rts		z_two_swap:     rts
.9625						xt_two_to_r:
.9625		68		pla		                pla             ; LSB
.9626		85 25		sta $25		                sta tmp1
.9628		68		pla		                pla             ; MSB
.9629		85 26		sta $26		                sta tmp1+1
.962b		20 e4 d7	jsr $d7e4	                jsr underflow_2
.962e		b5 03		lda $03,x	                lda 3,x         ; MSB
.9630		48		pha		                pha
.9631		b5 02		lda $02,x	                lda 2,x         ; LSB
.9633		48		pha		                pha
.9634		b5 01		lda $01,x	                lda 1,x         ; MSB
.9636		48		pha		                pha
.9637		b5 00		lda $00,x	                lda 0,x         ; LSB
.9639		48		pha		                pha
.963a		e8		inx		                inx
.963b		e8		inx		                inx
.963c		e8		inx		                inx
.963d		e8		inx		                inx
.963e		a5 26		lda $26		                lda tmp1+1      ; MSB
.9640		48		pha		                pha
.9641		a5 25		lda $25		                lda tmp1        ; LSB
.9643		48		pha		                pha
.9644		60		rts		z_two_to_r:     rts
.9645						xt_type:
.9645		20 e4 d7	jsr $d7e4	                jsr underflow_2
.9648		b5 02		lda $02,x	                lda 2,x
.964a		85 25		sta $25		                sta tmp1
.964c		b5 03		lda $03,x	                lda 3,x
.964e		85 26		sta $26		                sta tmp1+1
.9650						_loop:
.9650		b5 00		lda $00,x	                lda 0,x
.9652		15 01		ora $01,x	                ora 1,x
.9654		f0 15		beq $966b	                beq _done
.9656		b2 25		lda ($25)	                lda (tmp1)
.9658		20 3b 88	jsr $883b	                jsr emit_a      ; avoids stack foolery
.965b		e6 25		inc $25		                inc tmp1
.965d		d0 02		bne $9661	                bne +
.965f		e6 26		inc $26		                inc tmp1+1
.9661						+
.9661		b5 00		lda $00,x	                lda 0,x
.9663		d0 02		bne $9667	                bne +
.9665		d6 01		dec $01,x	                dec 1,x
.9667						+
.9667		d6 00		dec $00,x	                dec 0,x
.9669		80 e5		bra $9650	                bra _loop
.966b						_done:
.966b		e8		inx		                inx
.966c		e8		inx		                inx
.966d		e8		inx		                inx
.966e		e8		inx		                inx
.966f		60		rts		z_type:         rts
.9670						xt_u_dot:
.9670		20 df d7	jsr $d7df	                jsr underflow_1
.9673		20 4c d8	jsr $d84c	                jsr print_u
.9676		a9 20		lda #$20	                lda #AscSP
.9678		20 3b 88	jsr $883b	                jsr emit_a
.967b		60		rts		z_u_dot:        rts
.967c						xt_u_dot_r:
.967c		20 e4 d7	jsr $d7e4	                jsr underflow_2
.967f		20 fc 94	jsr $94fc	                jsr xt_to_r
.9682		20 fd 9d	jsr $9dfd	                jsr xt_zero
.9685		20 87 8b	jsr $8b87	                jsr xt_less_number_sign
.9688		20 0c 8e	jsr $8e0c	                jsr xt_number_sign_s
.968b		20 ea 8d	jsr $8dea	                jsr xt_number_sign_greater
.968e		20 47 90	jsr $9047	                jsr xt_r_from
.9691		20 5e 8e	jsr $8e5e	                jsr xt_over
.9694		20 3d 8d	jsr $8d3d	                jsr xt_minus
.9697		20 3f 93	jsr $933f	                jsr xt_spaces
.969a		20 45 96	jsr $9645	                jsr xt_type
.969d		60		rts		z_u_dot_r:      rts
.969e						xt_u_greater_than:
.969e		20 e4 d7	jsr $d7e4	                jsr underflow_2
.96a1		b5 00		lda $00,x	                lda 0,x
.96a3		d5 02		cmp $02,x	                cmp 2,x
.96a5		b5 01		lda $01,x	                lda 1,x
.96a7		f5 03		sbc $03,x	                sbc 3,x
.96a9		e8		inx		                inx
.96aa		e8		inx		                inx
.96ab		a9 00		lda #$00	                lda #0
.96ad		69 ff		adc #$ff	                adc #$FF
.96af		95 00		sta $00,x	                sta 0,x         ; store flag
.96b1		95 01		sta $01,x	                sta 1,x
.96b3		60		rts		z_u_greater_than:    rts
.96b4						xt_u_less_than:
.96b4		20 e4 d7	jsr $d7e4	                jsr underflow_2
.96b7		b5 02		lda $02,x	                lda 2,x
.96b9		d5 00		cmp $00,x	                cmp 0,x
.96bb		b5 03		lda $03,x	                lda 3,x
.96bd		f5 01		sbc $01,x	                sbc 1,x
.96bf		e8		inx		                inx
.96c0		e8		inx		                inx
.96c1		a9 00		lda #$00	                lda #0
.96c3		69 ff		adc #$ff	                adc #$FF
.96c5		95 00		sta $00,x	                sta 0,x         ; store flag
.96c7		95 01		sta $01,x	                sta 1,x
.96c9		60		rts		z_u_less_than:    rts
.96ca						xt_um_slash_mod:
.96ca		20 e9 d7	jsr $d7e9	                jsr underflow_3
.96cd		b5 00		lda $00,x	                lda 0,x
.96cf		15 01		ora $01,x	                ora 1,x
.96d1		d0 05		bne $96d8	                bne _not_zero
.96d3		a9 04		lda #$04	                lda #err_divzero
.96d5		4c f5 d7	jmp $d7f5	                jmp error
.96d8						_not_zero:
.96d8		a9 11		lda #$11	                lda #17
.96da		85 23		sta $23		                sta tmptos
.96dc						_loop:
.96dc		36 04		rol $04,x	                rol 4,x
.96de		36 05		rol $05,x	                rol 5,x
.96e0		c6 23		dec $23		                dec tmptos
.96e2		f0 22		beq $9706	                beq _done
.96e4		36 02		rol $02,x	                rol 2,x
.96e6		36 03		rol $03,x	                rol 3,x
.96e8		64 25		stz $25		                stz tmp1        ; store the bit we got from hi cell (MSB)
.96ea		26 25		rol $25		                rol tmp1
.96ec		38		sec		                sec
.96ed		b5 02		lda $02,x	                lda 2,x
.96ef		f5 00		sbc $00,x	                sbc 0,x
.96f1		85 26		sta $26		                sta tmp1+1
.96f3		b5 03		lda $03,x	                lda 3,x
.96f5		f5 01		sbc $01,x	                sbc 1,x
.96f7		a8		tay		                tay
.96f8		a5 25		lda $25		                lda tmp1
.96fa		e9 00		sbc #$00	                sbc #0
.96fc		90 de		bcc $96dc	                bcc _loop
.96fe		a5 26		lda $26		                lda tmp1+1
.9700		95 02		sta $02,x	                sta 2,x
.9702		94 03		sty $03,x	                sty 3,x         ; used as temp storage
.9704		80 d6		bra $96dc	                bra _loop
.9706						_done:
.9706		e8		inx		                inx
.9707		e8		inx		                inx
.9708		20 be 93	jsr $93be	                jsr xt_swap
.970b		60		rts		z_um_slash_mod: rts
.970c						xt_um_star:
.970c		20 e4 d7	jsr $d7e4	                jsr underflow_2
.970f		18		clc		                clc
.9710		b5 00		lda $00,x	                lda 0,x         ; copy TOS to tmp2
.9712		e9 00		sbc #$00	                sbc #0
.9714		85 27		sta $27		                sta tmp2
.9716		b5 01		lda $01,x	                lda 1,x
.9718		e9 00		sbc #$00	                sbc #0
.971a		90 31		bcc $974d	                bcc _zero       ; is TOS zero?
.971c		85 28		sta $28		                sta tmp2+1
.971e		a9 00		lda #$00	                lda #0
.9720		85 25		sta $25		                sta tmp1
.9722		86 29		stx $29		                stx tmp3        ; tested for exit from outer loop
.9724		ca		dex		                dex
.9725		ca		dex		                dex
.9726						_outer_loop:
.9726		a0 08		ldy #$08	                ldy #8          ; counter inner loop
.9728		56 04		lsr $04,x	                lsr 4,x         ; think "2,x" then later "3,x"
.972a						_inner_loop:
.972a		90 0c		bcc $9738	                bcc _no_add
.972c		85 26		sta $26		                sta tmp1+1      ; save time, don't CLC
.972e		a5 25		lda $25		                lda tmp1
.9730		65 27		adc $27		                adc tmp2
.9732		85 25		sta $25		                sta tmp1
.9734		a5 26		lda $26		                lda tmp1+1
.9736		65 28		adc $28		                adc tmp2+1
.9738						_no_add:
.9738		6a		ror a		                ror
.9739		66 25		ror $25		                ror tmp1
.973b		76 04		ror $04,x	                ror 4,x         ; think "2,x" then later "3,x"
.973d		88		dey		                dey
.973e		d0 ea		bne $972a	                bne _inner_loop ; go back for one more shift?
.9740		e8		inx		                inx
.9741		e4 29		cpx $29		                cpx tmp3
.9743		d0 e1		bne $9726	                bne _outer_loop ; go back for eight more shifts?
.9745		95 01		sta $01,x	                sta 1,x
.9747		a5 25		lda $25		                lda tmp1
.9749		95 00		sta $00,x	                sta 0,x
.974b		80 04		bra $9751	                bra _done
.974d						_zero:
.974d		74 02		stz $02,x	                stz 2,x
.974f		74 03		stz $03,x	                stz 3,x
.9751						_done:
.9751		60		rts		z_um_star:      rts
.9752						xt_unloop:
.9752		a4 1f		ldy $1f		                ldy loopctrl
.9754		88		dey		                dey
.9755		88		dey		                dey
.9756		88		dey		                dey
.9757		88		dey		                dey
.9758		84 1f		sty $1f		                sty loopctrl
.975a		30 05		bmi $9761	                bmi z_unloop            ; no active loops?
.975c		b9 00 01	lda $0100,y	                lda loopindex,y         ; else re-cache the LSB of loopindex
.975f		85 20		sta $20		                sta loopidx0
.9761		60		rts		z_unloop:       rts
.9762						xt_until:
.9762		a0 00		ldy #$00	                ldy #0
.9764						-
.9764		b9 db 8a	lda $8adb,y	                lda zero_test_runtime,y
.9767		c9 60		cmp #$60	                cmp #OpRTS
.9769		f0 03		beq $976e	                beq +
.976b		20 2c d6	jsr $d62c	                jsr cmpl_a
.976e						+
.976e		c8		iny		                iny
.976f		c0 0a		cpy #$0a	                cpy #(zero_test_footer_end - zero_test_runtime)
.9771		d0 f1		bne $9764	                bne -
.9773		20 da 83	jsr $83da	                jsr xt_comma
.9776		60		rts		z_until:        rts
.9777						xt_unused:
.9777		ca		dex		                dex
.9778		ca		dex		                dex
.9779		a9 00		lda #$00	                lda #<cp_end
.977b		38		sec		                sec
.977c		e5 00		sbc $00		                sbc cp
.977e		95 00		sta $00,x	                sta 0,x
.9780		a9 7c		lda #$7c	                lda #>cp_end
.9782		e5 01		sbc $01		                sbc cp+1
.9784		95 01		sta $01,x	                sta 1,x
.9786		60		rts		z_unused:       rts
.9787						xt_variable:
.9787		20 6f 85	jsr $856f	                jsr xt_create
.978a		a9 00		lda #$00	                lda #0
.978c		92 00		sta ($00)	                sta (cp)
.978e		e6 00		inc $00		                inc cp
.9790		d0 02		bne $9794	                bne +
.9792		e6 01		inc $01		                inc cp+1
.9794						+
.9794		92 00		sta ($00)	                sta (cp)
.9796		e6 00		inc $00		                inc cp
.9798		d0 02		bne $979c	                bne +
.979a		e6 01		inc $01		                inc cp+1
.979c						+
.979c		20 37 85	jsr $8537	                jsr adjust_z
.979f		60		rts		z_variable:     rts
.97a0						xt_while:
.97a0		a0 8a		ldy #$8a	                ldy #>zero_branch_runtime
.97a2		a9 e5		lda #$e5	                lda #<zero_branch_runtime
.97a4		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.97a7		20 91 8a	jsr $8a91	                jsr xt_here
.97aa		a9 ff		lda #$ff	                lda #$FF
.97ac		a8		tay		                tay
.97ad		20 28 d6	jsr $d628	                jsr cmpl_word
.97b0		20 be 93	jsr $93be	                jsr xt_swap
.97b3		60		rts		z_while:        rts
.97b4						xt_within:
.97b4		20 e9 d7	jsr $d7e9	                jsr underflow_3
.97b7		20 5e 8e	jsr $8e5e	                jsr xt_over
.97ba		20 3d 8d	jsr $8d3d	                jsr xt_minus
.97bd		20 fc 94	jsr $94fc	                jsr xt_to_r
.97c0		20 3d 8d	jsr $8d3d	                jsr xt_minus
.97c3		20 47 90	jsr $9047	                jsr xt_r_from
.97c6		20 b4 96	jsr $96b4	                jsr xt_u_less_than
.97c9		60		rts		z_within:       rts
.97ca						xt_word:
.97ca		20 df d7	jsr $d7df	                jsr underflow_1
.97cd		a4 10		ldy $10		                ldy toin                ; >IN
.97cf						_loop:
.97cf		c4 0e		cpy $0e		                cpy ciblen              ; quit if end of input
.97d1		f0 09		beq $97dc	                beq _found_char
.97d3		b1 0c		lda ($0c),y	                lda (cib),y
.97d5		d5 00		cmp $00,x	                cmp 0,x                 ; ASCII of delimiter
.97d7		d0 03		bne $97dc	                bne _found_char
.97d9		c8		iny		                iny
.97da		80 f3		bra $97cf	                bra _loop
.97dc						_found_char:
.97dc		84 10		sty $10		                sty toin
.97de		20 05 8f	jsr $8f05	                jsr xt_parse            ; Returns ( addr u )
.97e1		b5 00		lda $00,x	                lda 0,x
.97e3		92 00		sta ($00)	                sta (cp)                ; Save length of string
.97e5		48		pha		                pha                     ; Keep copy of length for later
.97e6		20 cb 87	jsr $87cb	                jsr xt_dup              ; ( addr u u )
.97e9		a5 00		lda $00		                lda cp
.97eb		18		clc		                clc
.97ec		69 01		adc #$01	                adc #1
.97ee		95 02		sta $02,x	                sta 2,x                 ; LSB of CP
.97f0		a5 01		lda $01		                lda cp+1
.97f2		69 00		adc #$00	                adc #0
.97f4		95 03		sta $03,x	                sta 3,x                 ; ( addr cp+1 u )
.97f6		20 59 8d	jsr $8d59	                jsr xt_move
.97f9		ca		dex		                dex
.97fa		ca		dex		                dex
.97fb		a5 00		lda $00		                lda cp
.97fd		95 00		sta $00,x	                sta 0,x
.97ff		a5 01		lda $01		                lda cp+1
.9801		95 01		sta $01,x	                sta 1,x
.9803		68		pla		                pla                     ; length of string
.9804		18		clc		                clc
.9805		65 00		adc $00		                adc cp
.9807		85 00		sta $00		                sta cp
.9809		90 02		bcc $980d	                bcc z_word
.980b		e6 01		inc $01		                inc cp+1
.980d		60		rts		z_word:         rts
.980e						xt_xor:
.980e		20 e4 d7	jsr $d7e4	                jsr underflow_2
.9811		b5 00		lda $00,x	                lda 0,x
.9813		55 02		eor $02,x	                eor 2,x
.9815		95 02		sta $02,x	                sta 2,x
.9817		b5 01		lda $01,x	                lda 1,x
.9819		55 03		eor $03,x	                eor 3,x
.981b		95 03		sta $03,x	                sta 3,x
.981d		e8		inx		                inx
.981e		e8		inx		                inx
.981f		60		rts		z_xor:          rts
.9820						xt_zero_equal:
.9820		20 df d7	jsr $d7df	                jsr underflow_1
.9823		b5 00		lda $00,x	                lda 0,x
.9825		15 01		ora $01,x	                ora 1,x
.9827		f0 02		beq $982b	                beq _zero       ; if 0, A is inverse of the TRUE (-1) we want
.9829		a9 ff		lda #$ff	                lda #$FF        ; else set A inverse of the FALSE (0) we want
.982b						_zero:
.982b		49 ff		eor #$ff	                eor #$FF        ; now just invert
.982d						_store:
.982d		95 00		sta $00,x	                sta 0,x
.982f		95 01		sta $01,x	                sta 1,x
.9831		60		rts		z_zero_equal:   rts
.9832						xt_zero_greater:
.9832		20 df d7	jsr $d7df	                jsr underflow_1
.9835		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS is negative)
.9837		b5 01		lda $01,x	                lda 1,x         ; MSB
.9839		30 05		bmi $9840	                bmi _done       ; TOS is negative, keep FLASE
.983b		15 00		ora $00,x	                ora 0,x
.983d		f0 01		beq $9840	                beq _done       ; TOS is zero, keep FALSE
.983f		88		dey		                dey             ; TOS is postive, make true
.9840						_done:
.9840		98		tya		                tya
.9841		95 00		sta $00,x	                sta 0,x
.9843		95 01		sta $01,x	                sta 1,x
.9845		60		rts		z_zero_greater: rts
.9846						xt_zero_less:
.9846		20 df d7	jsr $d7df	                jsr underflow_1
.9849		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS positive)
.984b		b5 01		lda $01,x	                lda 1,x         ; MSB
.984d		10 01		bpl $9850	                bpl _done       ; TOS is positive, so keep FALSE
.984f		88		dey		                dey             ; TOS is negative, make TRUE
.9850						_done:
.9850		98		tya		                tya
.9851		95 00		sta $00,x	                sta 0,x
.9853		95 01		sta $01,x	                sta 1,x
.9855		60		rts		z_zero_less:    rts
.9856						xt_zero_unequal:
.9856		20 df d7	jsr $d7df	                jsr underflow_1
.9859		b5 00		lda $00,x	                lda 0,x
.985b		15 01		ora $01,x	                ora 1,x
.985d		f0 02		beq $9861	                beq _zero
.985f		a9 ff		lda #$ff	                lda #$FF
.9861						_zero:
.9861		95 00		sta $00,x	                sta 0,x
.9863		95 01		sta $01,x	                sta 1,x
.9865		60		rts		z_zero_unequal: rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/tools.asm

.9866						xt_bye:
.9866		4c 31 f0	jmp $f031	                jmp kernel_bye
.9869						z_bye:
.9869						xt_dot_s:
.9869		20 8b 86	jsr $868b	                jsr xt_depth    ; ( -- u )
.986c		a9 3c		lda #$3c	                lda #'<'
.986e		20 3b 88	jsr $883b	                jsr emit_a
.9871		b5 00		lda $00,x	                lda 0,x
.9873		48		pha		                pha
.9874		ca		dex		                dex             ; DUP
.9875		ca		dex		                dex
.9876		95 00		sta $00,x	                sta 0,x
.9878		74 01		stz $01,x	                stz 1,x
.987a		20 4c d8	jsr $d84c	                jsr print_u
.987d		a9 3e		lda #$3e	                lda #'>'
.987f		20 3b 88	jsr $883b	                jsr emit_a
.9882		a9 20		lda #$20	                lda #AscSP      ; ASCII for SPACE
.9884		20 3b 88	jsr $883b	                jsr emit_a
.9887		e8		inx		                inx
.9888		e8		inx		                inx
.9889		e0 78		cpx #$78	                cpx #dsp0
.988b		f0 1e		beq $98ab	                beq _done
.988d						_have_stack:
.988d		7a		ply		                ply
.988e		a9 77		lda #$77	                lda #dsp0-1     ; go up one to avoid garbage
.9890		85 29		sta $29		                sta tmp3
.9892		64 2a		stz $2a		                stz tmp3+1      ; must be zero page on the 65c02
.9894						_loop:
.9894		ca		dex		                dex
.9895		ca		dex		                dex
.9896		b2 29		lda ($29)	                lda (tmp3)
.9898		95 01		sta $01,x	                sta 1,x
.989a		c6 29		dec $29		                dec tmp3
.989c		b2 29		lda ($29)	                lda (tmp3)
.989e		95 00		sta $00,x	                sta 0,x
.98a0		c6 29		dec $29		                dec tmp3
.98a2		5a		phy		                phy
.98a3		20 5b 87	jsr $875b	                jsr xt_dot
.98a6		7a		ply		                ply
.98a7		88		dey		                dey
.98a8		d0 ea		bne $9894	                bne _loop
.98aa		48		pha		                pha             ; dummy to balance stack
.98ab						_done:
.98ab		68		pla		                pla
.98ac		60		rts		z_dot_s:        rts
.98ad						xt_dump:
.98ad		20 e4 d7	jsr $d7e4	                jsr underflow_2
.98b0						_row:
.98b0		a0 10		ldy #$10	                ldy #16
.98b2		64 27		stz $27		                stz tmp2
.98b4		20 69 85	jsr $8569	                jsr xt_cr
.98b7		b5 03		lda $03,x	                lda 3,x
.98b9		20 98 d6	jsr $d698	                jsr byte_to_ascii
.98bc		b5 02		lda $02,x	                lda 2,x
.98be		20 98 d6	jsr $d698	                jsr byte_to_ascii
.98c1		20 39 93	jsr $9339	                jsr xt_space
.98c4		20 39 93	jsr $9339	                jsr xt_space
.98c7						_loop:
.98c7		b5 00		lda $00,x	                lda 0,x
.98c9		15 01		ora $01,x	                ora 1,x
.98cb		f0 39		beq $9906	                beq _all_printed
.98cd		a1 02		lda ($02,x)	                lda (2,x)
.98cf		48		pha		                pha                     ; byte_to_ascii destroys A
.98d0		20 98 d6	jsr $d698	                jsr byte_to_ascii
.98d3		20 39 93	jsr $9339	                jsr xt_space
.98d6		68		pla		                pla
.98d7		20 c5 d7	jsr $d7c5	                jsr is_printable
.98da		b0 02		bcs $98de	                bcs _printable
.98dc		a9 2e		lda #$2e	                lda #'.'                 ; Print dot if not printable
.98de						_printable:
.98de		5a		phy		                phy                     ; save counter
.98df		a4 27		ldy $27		                ldy tmp2
.98e1		91 00		sta ($00),y	                sta (cp),y
.98e3		e6 27		inc $27		                inc tmp2
.98e5		7a		ply		                ply
.98e6		c0 09		cpy #$09	                cpy #9
.98e8		d0 03		bne $98ed	                bne _next_char
.98ea		20 39 93	jsr $9339	                jsr xt_space
.98ed						_next_char:
.98ed		f6 02		inc $02,x	                inc 2,x
.98ef		d0 02		bne $98f3	                bne _counter
.98f1		f6 03		inc $03,x	                inc 3,x
.98f3						_counter:
.98f3		b5 00		lda $00,x	                lda 0,x
.98f5		d0 02		bne $98f9	                bne +
.98f7		d6 01		dec $01,x	                dec 1,x
.98f9						+
.98f9		d6 00		dec $00,x	                dec 0,x
.98fb		88		dey		                dey
.98fc		d0 c9		bne $98c7	                bne _loop               ; next byte
.98fe		20 39 93	jsr $9339	                jsr xt_space
.9901		20 14 99	jsr $9914	                jsr dump_print_ascii
.9904		80 aa		bra $98b0	                bra _row                ; new row
.9906						_all_printed:
.9906		a5 27		lda $27		                lda tmp2
.9908		f0 06		beq $9910	                beq _done
.990a		20 39 93	jsr $9339	                jsr xt_space
.990d		20 14 99	jsr $9914	                jsr dump_print_ascii
.9910						_done:
.9910		20 33 95	jsr $9533	                jsr xt_two_drop         ; one byte less than 4x INX
.9913		60		rts		z_dump:         rts
.9914						dump_print_ascii:
.9914		a0 00		ldy #$00	                ldy #0
.9916						_ascii_loop:
.9916		b1 00		lda ($00),y	                lda (cp),y
.9918		20 3b 88	jsr $883b	                jsr emit_a
.991b		c8		iny		                iny
.991c		c0 08		cpy #$08	                cpy #8
.991e		d0 03		bne $9923	                bne +
.9920		20 39 93	jsr $9339	                jsr xt_space
.9923						+
.9923		c6 27		dec $27		                dec tmp2
.9925		d0 ef		bne $9916	                bne _ascii_loop
.9927		60		rts		                rts
.9928						xt_question:
.9928		20 90 89	jsr $8990	                jsr xt_fetch
.992b		20 5b 87	jsr $875b	                jsr xt_dot
.992e		60		rts		z_question:     rts
.992f						xt_see:
.992f		20 aa 8e	jsr $8eaa	                jsr xt_parse_name       ; ( addr u )
.9932		20 fc 9a	jsr $9afc	                jsr xt_find_name        ; ( nt | 0 )
.9935		b5 00		lda $00,x	                lda 0,x
.9937		15 01		ora $01,x	                ora 1,x
.9939		d0 05		bne $9940	                bne +
.993b		a9 05		lda #$05	                lda #err_noname
.993d		4c f5 d7	jmp $d7f5	                jmp error
.9940						+
.9940		20 69 85	jsr $8569	                jsr xt_cr
.9943		a5 18		lda $18		                lda base
.9945		48		pha		                pha
.9946		20 9c 8a	jsr $8a9c	                jsr xt_hex
.9949		a9 09		lda #$09	                lda #str_see_nt
.994b		20 1b d8	jsr $d81b	                jsr print_string_no_lf
.994e		20 cb 87	jsr $87cb	                jsr xt_dup              ; ( nt nt )
.9951		20 70 96	jsr $9670	                jsr xt_u_dot
.9954		20 39 93	jsr $9339	                jsr xt_space            ; ( nt )
.9957		20 cb 87	jsr $87cb	                jsr xt_dup              ; ( nt nt )
.995a		20 3a 9c	jsr $9c3a	                jsr xt_name_to_int      ; ( nt xt )
.995d		a9 0a		lda #$0a	                lda #str_see_xt
.995f		20 1b d8	jsr $d81b	                jsr print_string_no_lf
.9962		20 cb 87	jsr $87cb	                jsr xt_dup              ; ( nt xt xt )
.9965		20 70 96	jsr $9670	                jsr xt_u_dot
.9968		20 69 85	jsr $8569	                jsr xt_cr               ; ( nt xt )
.996b		a9 08		lda #$08	                lda #str_see_flags
.996d		20 1b d8	jsr $d81b	                jsr print_string_no_lf
.9970		20 5e 8e	jsr $8e5e	                jsr xt_over             ; ( nt xt nt )
.9973		20 42 8e	jsr $8e42	                jsr xt_one_plus         ; ( nt xt nt+1 )
.9976		20 90 89	jsr $8990	                jsr xt_fetch            ; ( nt xt flags )
.9979		b5 00		lda $00,x	                lda 0,x
.997b		a0 06		ldy #$06	                ldy #6                  ; Not all bits are used
.997d						_flag_loop:
.997d		48		pha		                pha
.997e		29 01		and #$01	                and #%00000001
.9980		18		clc		                clc
.9981		69 30		adc #$30	                adc #'0'
.9983		20 3b 88	jsr $883b	                jsr emit_a
.9986		20 39 93	jsr $9339	                jsr xt_space
.9989		68		pla		                pla
.998a		6a		ror a		                ror                     ; Next flag
.998b		88		dey		                dey
.998c		d0 ef		bne $997d	                bne _flag_loop
.998e		20 69 85	jsr $8569	                jsr xt_cr
.9991		e8		inx		                inx
.9992		e8		inx		                inx                     ; ( nt xt )
.9993		a9 0b		lda #$0b	                lda #str_see_size
.9995		20 1b d8	jsr $d81b	                jsr print_string_no_lf
.9998		20 be 93	jsr $93be	                jsr xt_swap             ; ( xt nt )
.999b		20 dc 9d	jsr $9ddc	                jsr xt_wordsize         ; ( xt u )
.999e		20 cb 87	jsr $87cb	                jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
.99a1		20 43 86	jsr $8643	                jsr xt_decimal
.99a4		20 70 96	jsr $9670	                jsr xt_u_dot            ; ( xt u )
.99a7		20 9c 8a	jsr $8a9c	                jsr xt_hex
.99aa		20 69 85	jsr $8569	                jsr xt_cr
.99ad		20 3b 95	jsr $953b	                jsr xt_two_dup          ; ( xt u xt u )
.99b0		20 ad 98	jsr $98ad	                jsr xt_dump
.99b3		20 69 85	jsr $8569	                jsr xt_cr
.99b6		20 c7 a1	jsr $a1c7	                jsr xt_disasm
.99b9		68		pla		                pla
.99ba		85 18		sta $18		                sta base
.99bc		60		rts		z_see:          rts
.99bd						xt_words:
.99bd		20 69 85	jsr $8569	                jsr xt_cr
.99c0		a9 00		lda #$00	                lda #0
.99c2		48		pha		                pha
.99c3		ca		dex		                dex                     ; Make room on the stack for
.99c4		ca		dex		                dex                     ; a dictionary pointer.
.99c5		64 29		stz $29		                stz tmp3                ; Start at the beginning of
.99c7						_wordlist_loop:
.99c7		a0 22		ldy #$22	                ldy #num_order_offset   ; Check against byte variable #ORDER.
.99c9		a5 29		lda $29		                lda tmp3
.99cb		d1 08		cmp ($08),y	                cmp (up),y              ; See if we are done.
.99cd		d0 02		bne $99d1	                bne _have_wordlist
.99cf		80 45		bra $9a16	                bra _words_done
.99d1						_have_wordlist:
.99d1		18		clc		                clc                     ; Index into byte array SEARCH-ORDER.
.99d2		69 23		adc #$23	                adc #search_order_offset
.99d4		a8		tay		                tay
.99d5		b1 08		lda ($08),y	                lda (up),y              ; Get the index into array WORDLISTS
.99d7		0a		asl a		                asl                     ; Turn offset into cells offset.
.99d8		18		clc		                clc
.99d9		69 0a		adc #$0a	                adc #wordlists_offset
.99db		a8		tay		                tay
.99dc		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.99de		95 00		sta $00,x	                sta 0,x                 ; on the stack. ( nt )
.99e0		c8		iny		                iny
.99e1		b1 08		lda ($08),y	                lda (up),y
.99e3		95 01		sta $01,x	                sta 1,x
.99e5						_loop:
.99e5		20 cb 87	jsr $87cb	                jsr xt_dup              ; ( nt nt )
.99e8		20 57 9c	jsr $9c57	                jsr xt_name_to_string   ; ( nt addr u )
.99eb		68		pla		                pla
.99ec		18		clc		                clc
.99ed		75 00		adc $00,x	                adc 0,x
.99ef		1a		inc a		                ina                     ; don't forget the space between words
.99f0		c9 4f		cmp #$4f	                cmp #MAX_LINE_LENGTH    ; usually 79
.99f2		90 06		bcc $99fa	                bcc +
.99f4		20 69 85	jsr $8569	                jsr xt_cr
.99f7		b5 00		lda $00,x	                lda 0,x                 ; After going to next line, start
.99f9		1a		inc a		                ina                     ; with length of this word.
.99fa						+
.99fa		48		pha		                pha
.99fb		20 45 96	jsr $9645	                jsr xt_type             ; ( nt )
.99fe		a9 20		lda #$20	                lda #AscSP
.9a00		20 3b 88	jsr $883b	                jsr emit_a
.9a03		20 42 8e	jsr $8e42	                jsr xt_one_plus         ; 1+
.9a06		20 42 8e	jsr $8e42	                jsr xt_one_plus         ; 1+
.9a09		20 90 89	jsr $8990	                jsr xt_fetch            ; @ ( nt+1 )
.9a0c		b5 00		lda $00,x	                lda 0,x
.9a0e		15 01		ora $01,x	                ora 1,x
.9a10		d0 d3		bne $99e5	                bne _loop
.9a12		e6 29		inc $29		                inc tmp3
.9a14		80 b1		bra $99c7	                bra _wordlist_loop
.9a16						_words_done:
.9a16		68		pla		                pla                     ; dump counter
.9a17		e8		inx		                inx
.9a18		e8		inx		                inx
.9a19		60		rts		z_words:        rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/tali.asm

.9a1a						xt_allow_native:
.9a1a		20 26 d7	jsr $d726	                jsr current_to_dp
.9a1d		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9a1f		b1 02		lda ($02),y	                lda (dp),y
.9a21		29 f5		and #$f5	                and #$FF-NN-AN  ; AN and NN flag is clear.
.9a23		91 02		sta ($02),y	                sta (dp),y
.9a25						z_allow_native:
.9a25		60		rts		                rts
.9a26						xt_always_native:
.9a26		20 26 d7	jsr $d726	                jsr current_to_dp
.9a29		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9a2b		b1 02		lda ($02),y	                lda (dp),y
.9a2d		09 02		ora #$02	                ora #AN         ; Make sure AN flag is set
.9a2f		29 f7		and #$f7	                and #$FF-NN     ; and NN flag is clear.
.9a31		91 02		sta ($02),y	                sta (dp),y
.9a33						z_always_native:
.9a33		60		rts		                rts
.9a34						xt_bell:
.9a34		a9 07		lda #$07	                lda #7          ; ASCII value for BELl
.9a36		20 3b 88	jsr $883b	                jsr emit_a
.9a39		60		rts		z_bell:         rts
.9a3a						xt_bounds:
.9a3a		20 e4 d7	jsr $d7e4	                jsr underflow_2
.9a3d		18		clc		                clc
.9a3e		b5 00		lda $00,x	                lda 0,x                 ; LSB u
.9a40		b4 02		ldy $02,x	                ldy 2,x                 ; LSB addr
.9a42		75 02		adc $02,x	                adc 2,x
.9a44		95 02		sta $02,x	                sta 2,x                 ; LSB addr+u
.9a46		94 00		sty $00,x	                sty 0,x
.9a48		b5 01		lda $01,x	                lda 1,x                 ; MSB u
.9a4a		b4 03		ldy $03,x	                ldy 3,x                 ; MSB addr
.9a4c		75 03		adc $03,x	                adc 3,x
.9a4e		95 03		sta $03,x	                sta 3,x                 ; MSB addr+u
.9a50		94 01		sty $01,x	                sty 1,x
.9a52		60		rts		z_bounds:       rts
.9a53						xt_cleave:
.9a53		20 e4 d7	jsr $d7e4	                jsr underflow_2
.9a56		20 1e a0	jsr $a01e	                jsr xt_minus_leading    ; -LEADING ( addr u )
.9a59		20 9e 9b	jsr $9b9e	                jsr xt_input_to_r       ; save old imput state
.9a5c		b5 00		lda $00,x	                lda 0,x         ; u is new ciblen
.9a5e		85 0e		sta $0e		                sta ciblen
.9a60		b5 01		lda $01,x	                lda 1,x
.9a62		85 0f		sta $0f		                sta ciblen+1
.9a64		b5 02		lda $02,x	                lda 2,x         ; addr is new cib
.9a66		85 0c		sta $0c		                sta cib
.9a68		b5 03		lda $03,x	                lda 3,x
.9a6a		85 0d		sta $0d		                sta cib+1
.9a6c		64 10		stz $10		                stz toin        ; >IN pointer is zero
.9a6e		64 11		stz $11		                stz toin+1
.9a70		20 aa 8e	jsr $8eaa	                jsr xt_parse_name       ; ( addr u addr-s u-s )
.9a73		b5 00		lda $00,x	                lda 0,x
.9a75		15 01		ora $01,x	                ora 1,x
.9a77		f0 23		beq $9a9c	                beq _done
.9a79		b5 04		lda $04,x	                lda 4,x         ; LSB of original u
.9a7b		38		sec		                sec
.9a7c		f5 00		sbc $00,x	                sbc 0,x
.9a7e		95 04		sta $04,x	                sta 4,x
.9a80		b5 05		lda $05,x	                lda 5,x         ; MSB of original u
.9a82		f5 01		sbc $01,x	                sbc 1,x
.9a84		95 05		sta $05,x	                sta 5,x
.9a86		b5 06		lda $06,x	                lda 6,x         ; LSB of original addr
.9a88		18		clc		                clc
.9a89		75 00		adc $00,x	                adc 0,x
.9a8b		95 06		sta $06,x	                sta 6,x
.9a8d		b5 07		lda $07,x	                lda 7,x         ; MSB of original addr
.9a8f		75 01		adc $01,x	                adc 1,x
.9a91		95 07		sta $07,x	                sta 7,x
.9a93		20 01 96	jsr $9601	                jsr xt_two_swap         ; ( addr-s u-s addr u )
.9a96		20 1e a0	jsr $a01e	                jsr xt_minus_leading
.9a99		20 01 96	jsr $9601	                jsr xt_two_swap         ; ( addr u addr-s u-s )
.9a9c						_done:
.9a9c		20 ab 9d	jsr $9dab	                jsr xt_r_to_input
.9a9f		60		rts		z_cleave:       rts
.9aa0						xt_digit_question:
.9aa0		20 df d7	jsr $d7df	                jsr underflow_1
.9aa3		ca		dex		                dex
.9aa4		ca		dex		                dex
.9aa5		74 00		stz $00,x	                stz 0,x                 ; default flag is failure
.9aa7		74 01		stz $01,x	                stz 1,x
.9aa9		74 03		stz $03,x	                stz 3,x                 ; paranoid
.9aab		b5 02		lda $02,x	                lda 2,x
.9aad		c9 30		cmp #$30	                cmp #'0'
.9aaf		90 23		bcc $9ad4	                bcc _done               ; failure flag already set
.9ab1		c9 3a		cmp #$3a	                cmp #'9'+1               ; this is actually ":"
.9ab3		90 12		bcc $9ac7	                bcc _checkbase
.9ab5		c9 41		cmp #$41	                cmp #'A'
.9ab7		90 1b		bcc $9ad4	                bcc _done               ; failure flag is already set
.9ab9		c9 61		cmp #$61	                cmp #'a'
.9abb		90 07		bcc $9ac4	                bcc _case_done          ; not lower case, too low
.9abd		c9 7b		cmp #$7b	                cmp #'z'+1
.9abf		b0 03		bcs $9ac4	                bcs _case_done          ; not lower case, too high
.9ac1		18		clc		                clc                     ; just right
.9ac2		69 e0		adc #$e0	                adc #$E0                ; offset to upper case (wraps)
.9ac4						_case_done:
.9ac4		38		sec		                sec
.9ac5		e9 07		sbc #$07	                sbc #7                  ; fall through to _checkbase
.9ac7						_checkbase:
.9ac7		38		sec		                sec
.9ac8		e9 30		sbc #$30	                sbc #'0'                 ; this is also the conversion step
.9aca		c5 18		cmp $18		                cmp base
.9acc		b0 06		bcs $9ad4	                bcs _done               ; already have false flag
.9ace		95 02		sta $02,x	                sta 2,x                 ; put number in NOS
.9ad0		d6 00		dec $00,x	                dec 0,x                 ; set success flag
.9ad2		d6 01		dec $01,x	                dec 1,x
.9ad4						_done:
.9ad4						z_digit_question:
.9ad4		60		rts		                rts
.9ad5						xt_execute_parsing:
.9ad5		20 e9 d7	jsr $d7e9	                jsr underflow_3
.9ad8		20 9e 9b	jsr $9b9e	                jsr xt_input_to_r       ; save normal input for later
.9adb		20 81 9c	jsr $9c81	                jsr xt_not_rote         ; -ROT ( xt addr u )
.9ade		b5 00		lda $00,x	                lda 0,x                 ; TOS is new ciblen
.9ae0		85 0e		sta $0e		                sta ciblen
.9ae2		b5 01		lda $01,x	                lda 1,x
.9ae4		85 0f		sta $0f		                sta ciblen+1
.9ae6		b5 02		lda $02,x	                lda 2,x                 ; NOS is new cib
.9ae8		85 0c		sta $0c		                sta cib
.9aea		b5 03		lda $03,x	                lda 3,x
.9aec		85 0d		sta $0d		                sta cib+1
.9aee		64 10		stz $10		                stz toin                ; Set >IN to zero
.9af0		64 11		stz $11		                stz toin+1
.9af2		20 33 95	jsr $9533	                jsr xt_two_drop         ; 2DROP ( xt )
.9af5		20 7b 89	jsr $897b	                jsr xt_execute
.9af8		20 ab 9d	jsr $9dab	                jsr xt_r_to_input
.9afb						z_execute_parsing:
.9afb		60		rts		                rts
.9afc						xt_find_name:
.9afc		20 e4 d7	jsr $d7e4	                jsr underflow_2
.9aff		b5 00		lda $00,x	                lda 0,x
.9b01		15 01		ora $01,x	                ora 1,x
.9b03		d0 03		bne $9b08	                bne _nonempty
.9b05		4c 39 9b	jmp $9b39	                jmp _fail_done
.9b08						_nonempty:
.9b08		64 29		stz $29		                stz tmp3                ; Start at the beginning
.9b0a						_wordlist_loop:
.9b0a		a0 22		ldy #$22	                ldy #num_order_offset   ; Compare to byte variable #ORDER
.9b0c		a5 29		lda $29		                lda tmp3
.9b0e		d1 08		cmp ($08),y	                cmp (up),y              ; Check to see if we are done
.9b10		f0 27		beq $9b39	                beq _fail_done
.9b12		18		clc		                clc             ; SEARCH-ORDER is array of bytes.
.9b13		69 23		adc #$23	                adc #search_order_offset
.9b15		a8		tay		                tay
.9b16		b1 08		lda ($08),y	                lda (up),y      ; Get the id byte, which is the offset
.9b18		0a		asl a		                asl                     ; Turn offset into cells offset.
.9b19		18		clc		                clc
.9b1a		69 0a		adc #$0a	                adc #wordlists_offset
.9b1c		a8		tay		                tay
.9b1d		b1 08		lda ($08),y	                lda (up),y
.9b1f		85 25		sta $25		                sta tmp1
.9b21		c8		iny		                iny
.9b22		b1 08		lda ($08),y	                lda (up),y
.9b24		85 26		sta $26		                sta tmp1+1
.9b26		20 af d6	jsr $d6af	                jsr find_header_name
.9b29		d0 04		bne $9b2f	                bne _success
.9b2b		e6 29		inc $29		                inc tmp3
.9b2d		80 db		bra $9b0a	                bra _wordlist_loop
.9b2f						_success:
.9b2f		a5 25		lda $25		                lda tmp1
.9b31		95 02		sta $02,x	                sta 2,x
.9b33		a5 26		lda $26		                lda tmp1+1
.9b35		95 03		sta $03,x	                sta 3,x
.9b37		80 04		bra $9b3d	                bra _done
.9b39						_fail_done:
.9b39		74 02		stz $02,x	                stz 2,x         ; failure flag
.9b3b		74 03		stz $03,x	                stz 3,x
.9b3d						_done:
.9b3d		e8		inx		                inx
.9b3e		e8		inx		                inx
.9b3f		60		rts		z_find_name:    rts
.9b40						xt_hexstore:
.9b40		20 e9 d7	jsr $d7e9	                jsr underflow_3
.9b43		20 cb 87	jsr $87cb	                jsr xt_dup              ; Save copy of original address
.9b46		20 25 96	jsr $9625	                jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
.9b49						_loop:
.9b49		b5 00		lda $00,x	                lda 0,x
.9b4b		15 01		ora $01,x	                ora 1,x
.9b4d		f0 36		beq $9b85	                beq _done
.9b4f		20 53 9a	jsr $9a53	                jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.9b52		20 25 96	jsr $9625	                jsr xt_two_to_r
.9b55		20 fd 9d	jsr $9dfd	                jsr xt_zero
.9b58		20 fd 9d	jsr $9dfd	                jsr xt_zero
.9b5b		20 ab 95	jsr $95ab	                jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.9b5e		20 5c 94	jsr $945c	                jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.9b61		b5 00		lda $00,x	                lda 0,x
.9b63		15 01		ora $01,x	                ora 1,x
.9b65		d0 17		bne $9b7e	                bne _have_chars_left
.9b67		20 33 95	jsr $9533	                jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
.9b6a		20 46 9e	jsr $9e46	                jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
.9b6d		20 32 90	jsr $9032	                jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.9b70		20 44 83	jsr $8344	                jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
.9b73		20 47 90	jsr $9047	                jsr xt_r_from           ; R>
.9b76		20 42 8e	jsr $8e42	                jsr xt_one_plus         ; 1+
.9b79		20 fc 94	jsr $94fc	                jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.9b7c		80 cb		bra $9b49	                bra _loop
.9b7e						_have_chars_left:
.9b7e		8a		txa		                txa
.9b7f		18		clc		                clc
.9b80		69 08		adc #$08	                adc #8
.9b82		aa		tax		                tax
.9b83		80 c4		bra $9b49	                bra _loop
.9b85						_done:
.9b85		e8		inx		                inx
.9b86		e8		inx		                inx
.9b87		e8		inx		                inx
.9b88		e8		inx		                inx                     ; 2DROP
.9b89		20 ab 95	jsr $95ab	                jsr xt_two_r_from       ; ( addr2+n addr2 )
.9b8c		20 be 93	jsr $93be	                jsr xt_swap
.9b8f		20 3d 8d	jsr $8d3d	                jsr xt_minus            ; ( n )
.9b92		60		rts		z_hexstore:     rts
.9b93						xt_input:
.9b93		ca		dex		                dex
.9b94		ca		dex		                dex
.9b95		a9 14		lda #$14	                lda #<input
.9b97		95 00		sta $00,x	                sta 0,x
.9b99		a9 00		lda #$00	                lda #>input
.9b9b		95 01		sta $01,x	                sta 1,x
.9b9d		60		rts		z_input:        rts
.9b9e						xt_input_to_r:
.9b9e		68		pla		                pla
.9b9f		85 25		sta $25		                sta tmp1
.9ba1		68		pla		                pla
.9ba2		85 26		sta $26		                sta tmp1+1
.9ba4		a0 07		ldy #$07	                ldy #7
.9ba6						_loop:
.9ba6		b9 0a 00	lda $000a,y	                lda insrc,y     ; insrc+7 is toin+1
.9ba9		48		pha		                pha
.9baa		88		dey		                dey
.9bab		10 f9		bpl $9ba6	                bpl _loop
.9bad		a5 26		lda $26		                lda tmp1+1
.9baf		48		pha		                pha
.9bb0		a5 25		lda $25		                lda tmp1
.9bb2		48		pha		                pha
.9bb3		60		rts		z_input_to_r: 	rts
.9bb4						xt_int_to_name:
.9bb4		20 df d7	jsr $d7df	                jsr underflow_1
.9bb7		ca		dex		                dex
.9bb8		ca		dex		                dex
.9bb9		74 00		stz $00,x	                stz 0,x
.9bbb		74 01		stz $01,x	                stz 1,x
.9bbd						_wordlist_loop:
.9bbd		b5 00		lda $00,x	                lda 0,x                 ; Get the current wordlist.
.9bbf		0a		asl a		                asl                     ; Turn offset into cells offset.
.9bc0		18		clc		                clc
.9bc1		69 0a		adc #$0a	                adc #wordlists_offset
.9bc3		a8		tay		                tay
.9bc4		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.9bc6		85 27		sta $27		                sta tmp2                ; into tmp2
.9bc8		c8		iny		                iny
.9bc9		b1 08		lda ($08),y	                lda (up),y
.9bcb		85 28		sta $28		                sta tmp2+1
.9bcd		a5 27		lda $27		                lda tmp2
.9bcf		05 28		ora $28		                ora tmp2+1
.9bd1		f0 36		beq $9c09	                beq _next_wordlist
.9bd3		b5 02		lda $02,x	                lda 2,x         ; Target xt is now behind wordlist id.
.9bd5		85 29		sta $29		                sta tmp3        ; Save target xt in tmp3
.9bd7		b5 03		lda $03,x	                lda 3,x
.9bd9		85 2a		sta $2a		                sta tmp3+1
.9bdb						_loop:
.9bdb		a0 04		ldy #$04	                ldy #4          ; xt is four bytes down
.9bdd		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB of xt of current nt
.9bdf		c5 29		cmp $29		                cmp tmp3
.9be1		d0 07		bne $9bea	                bne _no_match
.9be3		c8		iny		                iny
.9be4		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB of xt of current nt
.9be6		c5 2a		cmp $2a		                cmp tmp3+1
.9be8		f0 30		beq $9c1a	                beq _match
.9bea						_no_match:
.9bea		18		clc		                clc
.9beb		a5 27		lda $27		                lda tmp2
.9bed		69 02		adc #$02	                adc #2
.9bef		85 27		sta $27		                sta tmp2
.9bf1		90 02		bcc $9bf5	                bcc +
.9bf3		e6 28		inc $28		                inc tmp2+1
.9bf5						+
.9bf5		a0 00		ldy #$00	                ldy #0
.9bf7		b1 27		lda ($27),y	                lda (tmp2),y
.9bf9		48		pha		                pha
.9bfa		c8		iny		                iny
.9bfb		11 27		ora ($27),y	                ora (tmp2),y
.9bfd		f0 09		beq $9c08	                beq _zero
.9bff		b1 27		lda ($27),y	                lda (tmp2),y
.9c01		85 28		sta $28		                sta tmp2+1
.9c03		68		pla		                pla
.9c04		85 27		sta $27		                sta tmp2
.9c06		80 d3		bra $9bdb	                bra _loop
.9c08						_zero:
.9c08		68		pla		                pla             ; Leftover from above loop
.9c09						_next_wordlist:
.9c09		b5 00		lda $00,x	                lda 0,x
.9c0b		1a		inc a		                ina
.9c0c		95 00		sta $00,x	                sta 0,x
.9c0e		c9 0c		cmp #$0c	                cmp #max_wordlists
.9c10		d0 ab		bne $9bbd	                bne _wordlist_loop
.9c12		e8		inx		                inx
.9c13		e8		inx		                inx
.9c14		74 00		stz $00,x	                stz 0,x
.9c16		74 01		stz $01,x	                stz 1,x
.9c18		80 0a		bra $9c24	                bra z_int_to_name
.9c1a						_match:
.9c1a		e8		inx		                inx
.9c1b		e8		inx		                inx
.9c1c		a5 27		lda $27		                lda tmp2
.9c1e		95 00		sta $00,x	                sta 0,x
.9c20		a5 28		lda $28		                lda tmp2+1
.9c22		95 01		sta $01,x	                sta 1,x
.9c24		60		rts		z_int_to_name:  rts
.9c25						xt_latestnt:
.9c25		ca		dex		                dex
.9c26		ca		dex		                dex
.9c27		20 26 d7	jsr $d726	                jsr current_to_dp
.9c2a		a5 02		lda $02		                lda dp
.9c2c		95 00		sta $00,x	                sta 0,x
.9c2e		a5 03		lda $03		                lda dp+1
.9c30		95 01		sta $01,x	                sta 1,x
.9c32		60		rts		z_latestnt:     rts
.9c33						xt_latestxt:
.9c33		20 25 9c	jsr $9c25	                jsr xt_latestnt         ; ( nt )
.9c36		20 3a 9c	jsr $9c3a	                jsr xt_name_to_int      ; ( xt )
.9c39		60		rts		z_latestxt:     rts
.9c3a						xt_name_to_int:
.9c3a		20 df d7	jsr $d7df	                jsr underflow_1
.9c3d		b5 00		lda $00,x	                lda 0,x
.9c3f		18		clc		                clc
.9c40		69 04		adc #$04	                adc #4
.9c42		85 29		sta $29		                sta tmp3
.9c44		b5 01		lda $01,x	                lda 1,x
.9c46		90 01		bcc $9c49	                bcc _done
.9c48		1a		inc a		                ina
.9c49						_done:
.9c49		85 2a		sta $2a		                sta tmp3+1
.9c4b		a0 00		ldy #$00	                ldy #0
.9c4d		b1 29		lda ($29),y	                lda (tmp3),y
.9c4f		95 00		sta $00,x	                sta 0,x
.9c51		c8		iny		                iny
.9c52		b1 29		lda ($29),y	                lda (tmp3),y
.9c54		95 01		sta $01,x	                sta 1,x
.9c56		60		rts		z_name_to_int:  rts
.9c57						xt_name_to_string:
.9c57		20 df d7	jsr $d7df	                jsr underflow_1
.9c5a		ca		dex		                dex
.9c5b		ca		dex		                dex
.9c5c		a1 02		lda ($02,x)	                lda (2,x)
.9c5e		95 00		sta $00,x	                sta 0,x
.9c60		74 01		stz $01,x	                stz 1,x
.9c62		b5 02		lda $02,x	                lda 2,x         ; LSB
.9c64		18		clc		                clc
.9c65		69 08		adc #$08	                adc #8
.9c67		95 02		sta $02,x	                sta 2,x
.9c69		90 02		bcc $9c6d	                bcc z_name_to_string
.9c6b		f6 03		inc $03,x	                inc 3,x         ; MSB
.9c6d						z_name_to_string:
.9c6d		60		rts		                rts
.9c6e						xt_nc_limit:
.9c6e		a9 00		lda #$00	                lda #nc_limit_offset
.9c70		4c 89 d6	jmp $d689	                jmp push_upvar_tos
.9c73						z_nc_limit:
.9c73						xt_never_native:
.9c73		20 26 d7	jsr $d726	                jsr current_to_dp
.9c76		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9c78		b1 02		lda ($02),y	                lda (dp),y
.9c7a		09 08		ora #$08	                ora #NN         ; Make sure NN flag is set
.9c7c		29 fd		and #$fd	                and #$FF-AN     ; and AN flag is clear.
.9c7e		91 02		sta ($02),y	                sta (dp),y
.9c80						z_never_native:
.9c80		60		rts		                rts
.9c81						xt_not_rote:
.9c81		20 e9 d7	jsr $d7e9	                jsr underflow_3
.9c84		b4 01		ldy $01,x	                ldy 1,x         ; MSB first
.9c86		b5 03		lda $03,x	                lda 3,x
.9c88		95 01		sta $01,x	                sta 1,x
.9c8a		b5 05		lda $05,x	                lda 5,x
.9c8c		95 03		sta $03,x	                sta 3,x
.9c8e		94 05		sty $05,x	                sty 5,x
.9c90		b4 00		ldy $00,x	                ldy 0,x         ; LSB second
.9c92		b5 02		lda $02,x	                lda 2,x
.9c94		95 00		sta $00,x	                sta 0,x
.9c96		b5 04		lda $04,x	                lda 4,x
.9c98		95 02		sta $02,x	                sta 2,x
.9c9a		94 04		sty $04,x	                sty 4,x
.9c9c		60		rts		z_not_rote:     rts
.9c9d						xt_number:
.9c9d		20 e4 d7	jsr $d7e4	                jsr underflow_2
.9ca0		64 1e		stz $1e		                stz tmpdsp      ; %n000 000d
.9ca2		a5 18		lda $18		                lda base
.9ca4		48		pha		                pha
.9ca5		20 3b 95	jsr $953b	                jsr xt_two_dup
.9ca8		a1 02		lda ($02,x)	                lda (2,x)
.9caa						_check_dec:
.9caa		c9 23		cmp #$23	                cmp #'#'
.9cac		d0 04		bne $9cb2	                bne _check_hex
.9cae		a9 0a		lda #$0a	                lda #10
.9cb0		80 42		bra $9cf4	                bra _base_changed
.9cb2						_check_hex:
.9cb2		c9 24		cmp #$24	                cmp #'$'
.9cb4		d0 04		bne $9cba	                bne _check_binary
.9cb6		a9 10		lda #$10	                lda #16
.9cb8		80 3a		bra $9cf4	                bra _base_changed
.9cba						_check_binary:
.9cba		c9 25		cmp #$25	                cmp #'%'
.9cbc		d0 04		bne $9cc2	                bne _check_char
.9cbe		a9 02		lda #$02	                lda #2
.9cc0		80 32		bra $9cf4	                bra _base_changed
.9cc2						_check_char:
.9cc2		c9 27		cmp #$27	                cmp #"'"
.9cc4		d0 3a		bne $9d00	                bne _check_minus
.9cc6		b5 00		lda $00,x	                lda 0,x         ; Get the length
.9cc8		c9 03		cmp #$03	                cmp #3
.9cca		d0 26		bne $9cf2	                bne _not_a_char
.9ccc		b5 01		lda $01,x	                lda 1,x
.9cce		d0 22		bne $9cf2	                bne _not_a_char ; No compare needed to check for non-zero.
.9cd0		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9cd2		18		clc		                clc
.9cd3		69 02		adc #$02	                adc #2          ; length of string
.9cd5		85 23		sta $23		                sta tmptos
.9cd7		b5 03		lda $03,x	                lda 3,x
.9cd9		69 00		adc #$00	                adc #0          ; only need carry
.9cdb		85 24		sta $24		                sta tmptos+1
.9cdd		b2 23		lda ($23)	                lda (tmptos)
.9cdf		c9 27		cmp #$27	                cmp #"'"
.9ce1		d0 0f		bne $9cf2	                bne _not_a_char
.9ce3		f6 02		inc $02,x	                inc 2,x
.9ce5		d0 02		bne $9ce9	                bne +
.9ce7		f6 03		inc $03,x	                inc 3,x
.9ce9						+
.9ce9		a1 02		lda ($02,x)	                lda (2,x)
.9ceb		95 02		sta $02,x	                sta 2,x
.9ced		74 03		stz $03,x	                stz 3,x
.9cef		4c 72 9d	jmp $9d72	                jmp _drop_original_string ; Single flag will drop the TOS for us.
.9cf2						_not_a_char:
.9cf2		80 5c		bra $9d50	                bra _number_error
.9cf4						_base_changed:
.9cf4		85 18		sta $18		                sta base        ; Switch to the new base
.9cf6		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9cf8		d0 02		bne $9cfc	                bne +
.9cfa		f6 03		inc $03,x	                inc 3,x
.9cfc						+
.9cfc		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9cfe		a1 02		lda ($02,x)	                lda (2,x)       ; Load the first char again
.9d00						_check_minus:
.9d00		c9 2d		cmp #$2d	                cmp #'-'
.9d02		d0 0c		bne $9d10	                bne _check_dot
.9d04		a9 80		lda #$80	                lda #$80
.9d06		85 1e		sta $1e		                sta tmpdsp      ; set the sign bit
.9d08		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9d0a		d0 02		bne $9d0e	                bne +
.9d0c		f6 03		inc $03,x	                inc 3,x
.9d0e						+
.9d0e		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9d10						_check_dot:
.9d10		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9d12		18		clc		                clc
.9d13		75 00		adc $00,x	                adc 0,x         ; length of string
.9d15		85 23		sta $23		                sta tmptos
.9d17		b5 03		lda $03,x	                lda 3,x
.9d19		69 00		adc #$00	                adc #0          ; only need carry
.9d1b		85 24		sta $24		                sta tmptos+1
.9d1d		a5 23		lda $23		                lda tmptos
.9d1f		d0 02		bne $9d23	                bne +
.9d21		c6 24		dec $24		                dec tmptos+1
.9d23						+
.9d23		c6 23		dec $23		                dec tmptos
.9d25		b2 23		lda ($23)	                lda (tmptos)
.9d27		c9 2e		cmp #$2e	                cmp #'.'
.9d29		d0 04		bne $9d2f	                bne _main
.9d2b		e6 1e		inc $1e		                inc tmpdsp
.9d2d		d6 00		dec $00,x	                dec 0,x
.9d2f						_main:
.9d2f		ca		dex		                dex
.9d30		ca		dex		                dex
.9d31		ca		dex		                dex
.9d32		ca		dex		                dex
.9d33		b5 04		lda $04,x	                lda 4,x         ; LSB of length
.9d35		95 00		sta $00,x	                sta 0,x
.9d37		74 01		stz $01,x	                stz 1,x         ; MSB, max length 255 chars
.9d39		b5 06		lda $06,x	                lda 6,x         ; LSB of address
.9d3b		95 02		sta $02,x	                sta 2,x
.9d3d		b5 07		lda $07,x	                lda 7,x         ; MSB of address
.9d3f		95 03		sta $03,x	                sta 3,x
.9d41		74 04		stz $04,x	                stz 4,x         ; clear space for ud
.9d43		74 05		stz $05,x	                stz 5,x
.9d45		74 06		stz $06,x	                stz 6,x
.9d47		74 07		stz $07,x	                stz 7,x
.9d49		20 5c 94	jsr $945c	                jsr xt_to_number        ; (ud addr u -- ud addr u )
.9d4c		b5 00		lda $00,x	                lda 0,x
.9d4e		f0 1e		beq $9d6e	                beq _all_converted
.9d50						_number_error:
.9d50		20 33 95	jsr $9533	                jsr xt_two_drop ; >NUMBER modified addr u
.9d53		20 33 95	jsr $9533	                jsr xt_two_drop ; ud   (partially converted number)
.9d56		a9 3e		lda #$3e	                lda #'>'
.9d58		20 3b 88	jsr $883b	                jsr emit_a
.9d5b		20 45 96	jsr $9645	                jsr xt_type
.9d5e		a9 3c		lda #$3c	                lda #'<'
.9d60		20 3b 88	jsr $883b	                jsr emit_a
.9d63		20 39 93	jsr $9339	                jsr xt_space
.9d66		68		pla		                pla
.9d67		85 18		sta $18		                sta base
.9d69		a9 08		lda #$08	                lda #err_syntax
.9d6b		4c f5 d7	jmp $d7f5	                jmp error
.9d6e						_all_converted:
.9d6e		e8		inx		                inx ; Drop the current addr u
.9d6f		e8		inx		                inx
.9d70		e8		inx		                inx
.9d71		e8		inx		                inx
.9d72						_drop_original_string:
.9d72		20 01 96	jsr $9601	                jsr xt_two_swap  ; Drop the original addr u
.9d75		20 33 95	jsr $9533	                jsr xt_two_drop  ; (was saved for unknown word error message)
.9d78		a5 1e		lda $1e		                lda tmpdsp      ; flag for double/minus
.9d7a		a0 20		ldy #$20	                ldy #%00100000  ; status bit 5 for double(1) or single(0)
.9d7c		0a		asl a		                asl             ; %n000 000d => %0000 00d0, C=n, Z=d
.9d7d		f0 0a		beq $9d89	                beq _single
.9d7f		98		tya		                tya
.9d80		04 1c		tsb $1c		                tsb status
.9d82		90 0f		bcc $9d93	                bcc _done       ; no minus, all done
.9d84		20 6b 9e	jsr $9e6b	                jsr xt_dnegate
.9d87		80 0a		bra $9d93	                bra _done
.9d89						_single:
.9d89		e8		inx		                inx
.9d8a		e8		inx		                inx
.9d8b		98		tya		                tya
.9d8c		14 1c		trb $1c		                trb status
.9d8e		90 03		bcc $9d93	                bcc _done       ; no minus, all done
.9d90		20 78 8d	jsr $8d78	                jsr xt_negate
.9d93						_done:
.9d93		68		pla		                pla
.9d94		85 18		sta $18		                sta base
.9d96		60		rts		z_number:       rts
.9d97						xt_editor_wordlist:
.9d97						xt_one:
.9d97		ca		dex		                dex
.9d98		ca		dex		                dex
.9d99		a9 01		lda #$01	                lda #1
.9d9b		95 00		sta $00,x	                sta 0,x
.9d9d		74 01		stz $01,x	                stz 1,x
.9d9f						z_editor_wordlist:
.9d9f						z_one:
.9d9f		60		rts		                rts
.9da0						xt_output:
.9da0		ca		dex		                dex
.9da1		ca		dex		                dex
.9da2		a9 12		lda #$12	                lda #<output
.9da4		95 00		sta $00,x	                sta 0,x
.9da6		a9 00		lda #$00	                lda #>output
.9da8		95 01		sta $01,x	                sta 1,x
.9daa		60		rts		z_output:       rts
.9dab						xt_r_to_input:
.9dab		68		pla		                pla
.9dac		85 25		sta $25		                sta tmp1
.9dae		68		pla		                pla
.9daf		85 26		sta $26		                sta tmp1+1
.9db1		a0 00		ldy #$00	                ldy #0
.9db3						_loop:
.9db3		68		pla		                pla
.9db4		99 0a 00	sta $000a,y	                sta insrc,y
.9db7		c8		iny		                iny
.9db8		c0 08		cpy #$08	                cpy #8
.9dba		d0 f7		bne $9db3	                bne _loop
.9dbc		a5 26		lda $26		                lda tmp1+1
.9dbe		48		pha		                pha
.9dbf		a5 25		lda $25		                lda tmp1
.9dc1		48		pha		                pha
.9dc2		60		rts		z_r_to_input: 	rts
.9dc3						xt_strip_underflow:
.9dc3		a9 02		lda #$02	                lda #uf_strip_offset
.9dc5		4c 89 d6	jmp $d689	                jmp push_upvar_tos
.9dc8						z_strip_underflow:
.9dc8						xt_assembler_wordlist:
.9dc8						xt_two:
.9dc8		ca		dex		                dex
.9dc9		ca		dex		                dex
.9dca		a9 02		lda #$02	                lda #2
.9dcc		95 00		sta $00,x	                sta 0,x
.9dce		74 01		stz $01,x	                stz 1,x
.9dd0						z_assembler_wordlist:
.9dd0		60		rts		z_two:          rts
.9dd1						xt_useraddr:
.9dd1		ca		dex		                dex
.9dd2		ca		dex		                dex
.9dd3		a9 08		lda #$08	                lda #<up
.9dd5		95 00		sta $00,x	                sta 0,x
.9dd7		a9 00		lda #$00	                lda #>up
.9dd9		95 01		sta $01,x	                sta 1,x
.9ddb		60		rts		z_useraddr:     rts
.9ddc						xt_wordsize:
.9ddc		20 df d7	jsr $d7df	                jsr underflow_1
.9ddf		b5 00		lda $00,x	                lda 0,x
.9de1		85 25		sta $25		                sta tmp1
.9de3		b5 01		lda $01,x	                lda 1,x
.9de5		85 26		sta $26		                sta tmp1+1
.9de7		a0 06		ldy #$06	                ldy #6
.9de9		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB of z
.9deb		88		dey		                dey
.9dec		88		dey		                dey
.9ded		38		sec		                sec
.9dee		f1 25		sbc ($25),y	                sbc (tmp1),y    ; LSB of xt
.9df0		95 00		sta $00,x	                sta 0,x
.9df2		a0 07		ldy #$07	                ldy #7
.9df4		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB of z
.9df6		88		dey		                dey
.9df7		88		dey		                dey
.9df8		f1 25		sbc ($25),y	                sbc (tmp1),y    ; MSB of xt
.9dfa		95 01		sta $01,x	                sta 1,x
.9dfc		60		rts		z_wordsize:     rts
.9dfd						xt_case:
.9dfd						xt_false:
.9dfd						xt_forth_wordlist:
.9dfd						xt_zero:
.9dfd		ca		dex		                dex             ; push
.9dfe		ca		dex		                dex
.9dff		74 00		stz $00,x	                stz 0,x
.9e01		74 01		stz $01,x	                stz 1,x
.9e03						z_case:
.9e03						z_false:
.9e03						z_forth_wordlist:
.9e03						z_zero:
.9e03		60		rts		                rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/double.asm

.9e04						xt_d_minus:
.9e04		20 ee d7	jsr $d7ee	                jsr underflow_4 ; two double numbers
.9e07		38		sec		                sec
.9e08		b5 06		lda $06,x	                lda 6,x         ; LSB of lower word
.9e0a		f5 02		sbc $02,x	                sbc 2,x
.9e0c		95 06		sta $06,x	                sta 6,x
.9e0e		b5 07		lda $07,x	                lda 7,x         ; MSB of lower word
.9e10		f5 03		sbc $03,x	                sbc 3,x
.9e12		95 07		sta $07,x	                sta 7,x
.9e14		b5 04		lda $04,x	                lda 4,x         ; LSB of upper word
.9e16		f5 00		sbc $00,x	                sbc 0,x
.9e18		95 04		sta $04,x	                sta 4,x
.9e1a		b5 05		lda $05,x	                lda 5,x         ; MSB of upper word
.9e1c		f5 01		sbc $01,x	                sbc 1,x
.9e1e		95 05		sta $05,x	                sta 5,x
.9e20		e8		inx		                inx
.9e21		e8		inx		                inx
.9e22		e8		inx		                inx
.9e23		e8		inx		                inx
.9e24		60		rts		z_d_minus:      rts
.9e25						xt_d_plus:
.9e25		20 ee d7	jsr $d7ee	                jsr underflow_4 ; two double numbers
.9e28		18		clc		                clc
.9e29		b5 02		lda $02,x	                lda 2,x         ; LSB of lower word
.9e2b		75 06		adc $06,x	                adc 6,x
.9e2d		95 06		sta $06,x	                sta 6,x
.9e2f		b5 03		lda $03,x	                lda 3,x         ; MSB of lower word
.9e31		75 07		adc $07,x	                adc 7,x
.9e33		95 07		sta $07,x	                sta 7,x
.9e35		b5 00		lda $00,x	                lda 0,x         ; LSB of upper word
.9e37		75 04		adc $04,x	                adc 4,x
.9e39		95 04		sta $04,x	                sta 4,x
.9e3b		b5 01		lda $01,x	                lda 1,x         ; MSB of upper word
.9e3d		75 05		adc $05,x	                adc 5,x
.9e3f		95 05		sta $05,x	                sta 5,x
.9e41		e8		inx		                inx
.9e42		e8		inx		                inx
.9e43		e8		inx		                inx
.9e44		e8		inx		                inx
.9e45		60		rts		z_d_plus:       rts
.9e46						xt_d_to_s:
.9e46		20 e4 d7	jsr $d7e4	                jsr underflow_2
.9e49		e8		inx		                inx
.9e4a		e8		inx		                inx
.9e4b		60		rts		z_d_to_s:       rts
.9e4c						xt_dabs:
.9e4c		20 e4 d7	jsr $d7e4	                jsr underflow_2 ; double number
.9e4f		b5 01		lda $01,x	                lda 1,x         ; MSB of high cell
.9e51		10 17		bpl $9e6a	                bpl _done       ; positive, we get off light
.9e53		a0 00		ldy #$00	                ldy #0
.9e55		38		sec		                sec
.9e56		98		tya		                tya
.9e57		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.9e59		95 02		sta $02,x	                sta 2,x
.9e5b		98		tya		                tya
.9e5c		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.9e5e		95 03		sta $03,x	                sta 3,x
.9e60		98		tya		                tya
.9e61		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.9e63		95 00		sta $00,x	                sta 0,x
.9e65		98		tya		                tya
.9e66		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.9e68		95 01		sta $01,x	                sta 1,x
.9e6a						_done:
.9e6a		60		rts		z_dabs:         rts
.9e6b						xt_dnegate:
.9e6b		20 e4 d7	jsr $d7e4	                jsr underflow_2 ; double number
.9e6e		a0 00		ldy #$00	     		ldy #0
.9e70		38		sec		                sec
.9e71		98		tya		                tya
.9e72		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.9e74		95 02		sta $02,x	                sta 2,x
.9e76		98		tya		                tya
.9e77		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.9e79		95 03		sta $03,x	                sta 3,x
.9e7b		98		tya		                tya
.9e7c		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.9e7e		95 00		sta $00,x	                sta 0,x
.9e80		98		tya		                tya
.9e81		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.9e83		95 01		sta $01,x	                sta 1,x
.9e85		60		rts		z_dnegate:      rts
.9e86						xt_d_dot:
.9e86		20 e4 d7	jsr $d7e4	                jsr underflow_2
.9e89		20 19 95	jsr $9519	                jsr xt_tuck
.9e8c		20 4c 9e	jsr $9e4c	                jsr xt_dabs
.9e8f		20 87 8b	jsr $8b87	                jsr xt_less_number_sign
.9e92		20 0c 8e	jsr $8e0c	                jsr xt_number_sign_s
.9e95		20 e4 90	jsr $90e4	                jsr xt_rot
.9e98		20 be 92	jsr $92be	                jsr xt_sign
.9e9b		20 ea 8d	jsr $8dea	                jsr xt_number_sign_greater
.9e9e		20 45 96	jsr $9645	                jsr xt_type
.9ea1		20 39 93	jsr $9339	                jsr xt_space
.9ea4		60		rts		z_d_dot:        rts
.9ea5						xt_d_dot_r:
.9ea5		20 e9 d7	jsr $d7e9	                jsr underflow_3
.9ea8		20 fc 94	jsr $94fc	                jsr xt_to_r
.9eab		20 19 95	jsr $9519	                jsr xt_tuck
.9eae		20 4c 9e	jsr $9e4c	                jsr xt_dabs
.9eb1		20 87 8b	jsr $8b87	                jsr xt_less_number_sign
.9eb4		20 0c 8e	jsr $8e0c	                jsr xt_number_sign_s
.9eb7		20 e4 90	jsr $90e4	                jsr xt_rot
.9eba		20 be 92	jsr $92be	                jsr xt_sign
.9ebd		20 ea 8d	jsr $8dea	                jsr xt_number_sign_greater
.9ec0		20 47 90	jsr $9047	                jsr xt_r_from
.9ec3		20 5e 8e	jsr $8e5e	                jsr xt_over
.9ec6		20 3d 8d	jsr $8d3d	                jsr xt_minus
.9ec9		20 3f 93	jsr $933f	                jsr xt_spaces
.9ecc		20 45 96	jsr $9645	                jsr xt_type
.9ecf		60		rts		z_d_dot_r:      rts
.9ed0						xt_two_constant:
.9ed0		20 e4 d7	jsr $d7e4	                jsr underflow_2
.9ed3		20 6f 85	jsr $856f	                jsr xt_create
.9ed6		20 be 93	jsr $93be	                jsr xt_swap
.9ed9		20 da 83	jsr $83da	                jsr xt_comma
.9edc		20 da 83	jsr $83da	                jsr xt_comma
.9edf		20 29 87	jsr $8729	                jsr does_runtime    ; does> turns into these two routines.
.9ee2		20 62 d6	jsr $d662	                jsr dodoes
.9ee5		20 cb 87	jsr $87cb	                jsr xt_dup
.9ee8		20 90 89	jsr $8990	                jsr xt_fetch
.9eeb		20 be 93	jsr $93be	                jsr xt_swap
.9eee		20 50 83	jsr $8350	                jsr xt_cell_plus
.9ef1		20 90 89	jsr $8990	                jsr xt_fetch
.9ef4		60		rts		z_two_constant: rts
.9ef5						xt_two_literal:
.9ef5		20 e4 d7	jsr $d7e4	                jsr underflow_2 ; double number
.9ef8		20 be 93	jsr $93be	                jsr xt_swap
.9efb		20 aa 8b	jsr $8baa	                jsr xt_literal
.9efe		20 aa 8b	jsr $8baa	                jsr xt_literal
.9f01		60		rts		z_two_literal:  rts
.9f02						xt_two_variable:
.9f02		20 6f 85	jsr $856f	                jsr xt_create
.9f05		ca		dex		                dex
.9f06		ca		dex		                dex
.9f07		a9 04		lda #$04	                lda #4
.9f09		95 00		sta $00,x	                sta 0,x
.9f0b		74 01		stz $01,x	                stz 1,x
.9f0d		20 30 82	jsr $8230	                jsr xt_allot
.9f10		60		rts		z_two_variable: rts
.9f11						xt_ud_dot:
.9f11		20 e4 d7	jsr $d7e4	                jsr underflow_2 ; double number
.9f14		20 87 8b	jsr $8b87	                jsr xt_less_number_sign
.9f17		20 0c 8e	jsr $8e0c	                jsr xt_number_sign_s
.9f1a		20 ea 8d	jsr $8dea	                jsr xt_number_sign_greater
.9f1d		20 45 96	jsr $9645	                jsr xt_type
.9f20		20 39 93	jsr $9339	                jsr xt_space
.9f23		60		rts		z_ud_dot:        rts
.9f24						xt_ud_dot_r:
.9f24		20 e9 d7	jsr $d7e9	                jsr underflow_3
.9f27		20 fc 94	jsr $94fc	                jsr xt_to_r
.9f2a		20 87 8b	jsr $8b87	                jsr xt_less_number_sign
.9f2d		20 0c 8e	jsr $8e0c	                jsr xt_number_sign_s
.9f30		20 ea 8d	jsr $8dea	                jsr xt_number_sign_greater
.9f33		20 47 90	jsr $9047	                jsr xt_r_from
.9f36		20 5e 8e	jsr $8e5e	                jsr xt_over
.9f39		20 3d 8d	jsr $8d3d	                jsr xt_minus
.9f3c		20 3f 93	jsr $933f	                jsr xt_spaces
.9f3f		20 45 96	jsr $9645	                jsr xt_type
.9f42		60		rts		z_ud_dot_r:      rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/string.asm

.9f43						xt_cmove:
.9f43		20 e9 d7	jsr $d7e9	                jsr underflow_3
.9f46		b5 02		lda $02,x	                lda 2,x
.9f48		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.9f4a		b5 03		lda $03,x	                lda 3,x
.9f4c		85 28		sta $28		                sta tmp2+1
.9f4e		b5 04		lda $04,x	                lda 4,x
.9f50		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.9f52		b5 05		lda $05,x	                lda 5,x
.9f54		85 26		sta $26		                sta tmp1+1
.9f56		a0 00		ldy #$00	                ldy #0
.9f58		b5 01		lda $01,x	                lda 1,x         ; number of whole pages to move
.9f5a		f0 0f		beq $9f6b	                beq _dopartial
.9f5c						_page:
.9f5c		b1 25		lda ($25),y	                lda (tmp1),y
.9f5e		91 27		sta ($27),y	                sta (tmp2),y
.9f60		c8		iny		                iny
.9f61		d0 f9		bne $9f5c	                bne _page
.9f63		e6 26		inc $26		                inc tmp1+1
.9f65		e6 28		inc $28		                inc tmp2+1
.9f67		d6 01		dec $01,x	                dec 1,x
.9f69		d0 f1		bne $9f5c	                bne _page
.9f6b						_dopartial:
.9f6b		b5 00		lda $00,x	                lda 0,x         ; length of last page
.9f6d		f0 09		beq $9f78	                beq _done
.9f6f						_partial:
.9f6f		b1 25		lda ($25),y	                lda (tmp1),y
.9f71		91 27		sta ($27),y	                sta (tmp2),y
.9f73		c8		iny		                iny
.9f74		d6 00		dec $00,x	                dec 0,x
.9f76		d0 f7		bne $9f6f	                bne _partial
.9f78						_done:
.9f78		8a		txa		                txa
.9f79		18		clc		                clc
.9f7a		69 06		adc #$06	                adc #6
.9f7c		aa		tax		                tax
.9f7d		60		rts		z_cmove:        rts
.9f7e						xt_cmove_up:
.9f7e		20 e9 d7	jsr $d7e9	                jsr underflow_3
.9f81		b5 02		lda $02,x	                lda 2,x
.9f83		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.9f85		b5 03		lda $03,x	                lda 3,x
.9f87		18		clc		                clc
.9f88		75 01		adc $01,x	                adc 1,x
.9f8a		85 28		sta $28		                sta tmp2+1      ; point to last page of destination
.9f8c		b5 04		lda $04,x	                lda 4,x
.9f8e		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.9f90		b5 05		lda $05,x	                lda 5,x
.9f92		18		clc		                clc
.9f93		75 01		adc $01,x	                adc 1,x
.9f95		85 26		sta $26		                sta tmp1+1      ; point to last page of source
.9f97		f6 01		inc $01,x	                inc 1,x         ; allows us to use bne with dec 1,x below
.9f99		b4 00		ldy $00,x	                ldy 0,x         ; length of last page
.9f9b		f0 0e		beq $9fab	                beq _nopartial
.9f9d						_outerloop:
.9f9d		88		dey		                dey
.9f9e		f0 07		beq $9fa7	                beq _finishpage
.9fa0						_innerloop:
.9fa0		b1 25		lda ($25),y	                lda (tmp1),y
.9fa2		91 27		sta ($27),y	                sta (tmp2),y
.9fa4		88		dey		                dey
.9fa5		d0 f9		bne $9fa0	                bne _innerloop
.9fa7						_finishpage:
.9fa7		b2 25		lda ($25)	                lda (tmp1)      ; handle y = 0 separately
.9fa9		92 27		sta ($27)	                sta (tmp2)
.9fab						_nopartial:
.9fab		c6 26		dec $26		                dec tmp1+1      ; back up to previous pages
.9fad		c6 28		dec $28		                dec tmp2+1
.9faf		d6 01		dec $01,x	                dec 1,x
.9fb1		d0 ea		bne $9f9d	                bne _outerloop
.9fb3						_done:
.9fb3		8a		txa		                txa
.9fb4		18		clc		                clc
.9fb5		69 06		adc #$06	                adc #6
.9fb7		aa		tax		                tax
.9fb8		60		rts		z_cmove_up:     rts
.9fb9						xt_compare:
.9fb9		20 ee d7	jsr $d7ee	                jsr underflow_4
.9fbc		b5 02		lda $02,x	                lda 2,x
.9fbe		85 27		sta $27		                sta tmp2
.9fc0		b5 03		lda $03,x	                lda 3,x
.9fc2		85 28		sta $28		                sta tmp2+1
.9fc4		b5 06		lda $06,x	                lda 6,x
.9fc6		85 25		sta $25		                sta tmp1
.9fc8		b5 07		lda $07,x	                lda 7,x
.9fca		85 26		sta $26		                sta tmp1+1
.9fcc						_compare_loop:
.9fcc		b5 04		lda $04,x	                lda 4,x
.9fce		15 05		ora $05,x	                ora 5,x
.9fd0		f0 2c		beq $9ffe	                beq _str1_done
.9fd2		b5 00		lda $00,x	                lda 0,x
.9fd4		15 01		ora $01,x	                ora 1,x
.9fd6		f0 3a		beq $a012	                beq _greater    ; Str2 empty first
.9fd8						_check_letter:
.9fd8		b2 25		lda ($25)	                lda (tmp1)
.9fda		d2 27		cmp ($27)	                cmp (tmp2)
.9fdc		90 26		bcc $a004	                bcc _less
.9fde		d0 32		bne $a012	                bne _greater
.9fe0						_next_letter:
.9fe0		e6 25		inc $25		                inc tmp1
.9fe2		d0 02		bne $9fe6	                bne +
.9fe4		e6 26		inc $26		                inc tmp1+1
.9fe6						+
.9fe6		e6 27		inc $27		                inc tmp2
.9fe8		d0 02		bne $9fec	                bne +
.9fea		e6 28		inc $28		                inc tmp2+1
.9fec						+
.9fec		b5 04		lda $04,x	                lda 4,x
.9fee		d0 02		bne $9ff2	                bne +
.9ff0		d6 05		dec $05,x	                dec 5,x
.9ff2						+
.9ff2		d6 04		dec $04,x	                dec 4,x
.9ff4		b5 00		lda $00,x	                lda 0,x
.9ff6		d0 02		bne $9ffa	                bne +
.9ff8		d6 01		dec $01,x	                dec 1,x
.9ffa						+
.9ffa		d6 00		dec $00,x	                dec 0,x
.9ffc		80 ce		bra $9fcc	                bra _compare_loop
.9ffe						_str1_done:
.9ffe		b5 00		lda $00,x	                lda 0,x
.a000		15 01		ora $01,x	                ora 1,x
.a002		f0 08		beq $a00c	                beq _equal      ; Both out of letters
.a004						_less:
.a004		a9 ff		lda #$ff	                lda #$FF
.a006		95 06		sta $06,x	                sta 6,x
.a008		95 07		sta $07,x	                sta 7,x
.a00a		80 0c		bra $a018	                bra _done
.a00c						_equal:
.a00c		74 06		stz $06,x	                stz 6,x
.a00e		74 07		stz $07,x	                stz 7,x
.a010		80 06		bra $a018	                bra _done
.a012						_greater:
.a012		a9 01		lda #$01	                lda #1
.a014		95 06		sta $06,x	                sta 6,x
.a016		74 07		stz $07,x	                stz 7,x
.a018						_done:
.a018		8a		txa		                txa
.a019		18		clc		                clc
.a01a		69 06		adc #$06	                adc #6
.a01c		aa		tax		                tax
.a01d		60		rts		z_compare:      rts
.a01e						xt_minus_leading:
.a01e		20 e4 d7	jsr $d7e4	                jsr underflow_2
.a021						_loop:
.a021		b5 00		lda $00,x	                lda 0,x
.a023		15 01		ora $01,x	                ora 1,x
.a025		f0 0f		beq $a036	                beq _done
.a027		a1 02		lda ($02,x)	                lda (2,x)               ; get first character
.a029		20 d2 d7	jsr $d7d2	                jsr is_whitespace
.a02c		90 08		bcc $a036	                bcc _done
.a02e		20 97 9d	jsr $9d97	                jsr xt_one              ; ( addr u 1 )
.a031		20 13 a1	jsr $a113	                jsr xt_slash_string     ; ( addr+ u-1 )
.a034		80 eb		bra $a021	                bra _loop
.a036						_done:
.a036						z_minus_leading:
.a036		60		rts		                rts
.a037						xt_minus_trailing:
.a037		20 e4 d7	jsr $d7e4	                jsr underflow_2
.a03a		b5 00		lda $00,x	                lda 0,x         ; LSB of n
.a03c		15 01		ora $01,x	                ora 1,x         ; MSB of n
.a03e		f0 33		beq $a073	                beq _done
.a040		18		clc		                clc
.a041		b5 02		lda $02,x	                lda 2,x         ; LSB of addr
.a043		75 00		adc $00,x	                adc 0,x
.a045		85 25		sta $25		                sta tmp1
.a047		b5 03		lda $03,x	                lda 3,x         ; MSB of addr
.a049		75 01		adc $01,x	                adc 1,x
.a04b		85 26		sta $26		                sta tmp1+1
.a04d		a5 25		lda $25		                lda tmp1
.a04f		d0 02		bne $a053	                bne +
.a051		c6 26		dec $26		                dec tmp1+1
.a053						+
.a053		c6 25		dec $25		                dec tmp1
.a055						_loop:
.a055		b2 25		lda ($25)	                lda (tmp1)
.a057		c9 20		cmp #$20	                cmp #AscSP
.a059		d0 18		bne $a073	                bne _done
.a05b		a5 25		lda $25		                lda tmp1
.a05d		d0 02		bne $a061	                bne +
.a05f		c6 26		dec $26		                dec tmp1+1
.a061						+
.a061		c6 25		dec $25		                dec tmp1
.a063		b5 00		lda $00,x	                lda 0,x
.a065		d0 02		bne $a069	                bne +
.a067		d6 01		dec $01,x	                dec 1,x
.a069						+
.a069		d6 00		dec $00,x	                dec 0,x
.a06b		b5 00		lda $00,x	                lda 0,x
.a06d		15 01		ora $01,x	                ora 1,x
.a06f		f0 02		beq $a073	                beq _done       ; Count has reached zero - we're done!
.a071		80 e2		bra $a055	                bra _loop
.a073						_done:
.a073						z_minus_trailing:
.a073		60		rts		                rts
.a074						xt_search:
.a074		20 ee d7	jsr $d7ee	                jsr underflow_4
.a077		b5 00		lda $00,x	                lda 0,x
.a079		15 01		ora $01,x	                ora 1,x
.a07b		d0 0b		bne $a088	                bne _start_search
.a07d		e8		inx		                inx             ; Remove u2
.a07e		e8		inx		                inx
.a07f		a9 ff		lda #$ff	                lda #$FF        ; Turn addr2 into a true flag
.a081		95 00		sta $00,x	                sta 0,x
.a083		95 01		sta $01,x	                sta 1,x
.a085		4c 12 a1	jmp $a112	                jmp z_search
.a088						_start_search:
.a088		20 fd 9d	jsr $9dfd	                jsr xt_zero
.a08b						_search_loop:
.a08b		18		clc		                clc
.a08c		b5 00		lda $00,x	                lda 0,x
.a08e		75 02		adc $02,x	                adc 2,x
.a090		85 25		sta $25		                sta tmp1
.a092		b5 01		lda $01,x	                lda 1,x
.a094		75 03		adc $03,x	                adc 3,x
.a096		d5 07		cmp $07,x	                cmp 7,x
.a098		90 12		bcc $a0ac	                bcc _init_comparison ; Obviously less
.a09a		d0 06		bne $a0a2	                bne _not_found
.a09c		b5 06		lda $06,x	                lda 6,x
.a09e		c5 25		cmp $25		                cmp tmp1
.a0a0		b0 0a		bcs $a0ac	                bcs _init_comparison
.a0a2						_not_found:
.a0a2		e8		inx		                inx             ; Remove offset
.a0a3		e8		inx		                inx
.a0a4		e8		inx		                inx             ; Remove u2
.a0a5		e8		inx		                inx
.a0a6		74 00		stz $00,x	                stz 0,x         ; Turn addr2 into a false flag
.a0a8		74 01		stz $01,x	                stz 1,x
.a0aa		80 66		bra $a112	                bra z_search
.a0ac						_init_comparison:
.a0ac		18		clc		                clc
.a0ad		b5 08		lda $08,x	                lda 8,x
.a0af		75 00		adc $00,x	                adc 0,x
.a0b1		85 25		sta $25		                sta tmp1
.a0b3		b5 09		lda $09,x	                lda 9,x
.a0b5		75 01		adc $01,x	                adc 1,x
.a0b7		85 26		sta $26		                sta tmp1+1
.a0b9		b5 04		lda $04,x	                lda 4,x
.a0bb		85 27		sta $27		                sta tmp2
.a0bd		b5 05		lda $05,x	                lda 5,x
.a0bf		85 28		sta $28		                sta tmp2+1
.a0c1		b5 02		lda $02,x	                lda 2,x
.a0c3		85 29		sta $29		                sta tmp3
.a0c5		b5 03		lda $03,x	                lda 3,x
.a0c7		85 2a		sta $2a		                sta tmp3+1
.a0c9						_comparison_loop:
.a0c9		b2 25		lda ($25)	                lda (tmp1)
.a0cb		d2 27		cmp ($27)	                cmp (tmp2)
.a0cd		f0 05		beq $a0d4	                beq _letters_match
.a0cf		20 42 8e	jsr $8e42	                jsr xt_one_plus
.a0d2		80 b7		bra $a08b	                bra _search_loop
.a0d4						_letters_match:
.a0d4		e6 25		inc $25		                inc tmp1
.a0d6		d0 02		bne $a0da	                bne +
.a0d8		e6 26		inc $26		                inc tmp1+1
.a0da						+
.a0da		e6 27		inc $27		                inc tmp2
.a0dc		d0 02		bne $a0e0	                bne +
.a0de		e6 28		inc $28		                inc tmp2+1
.a0e0						+
.a0e0		a5 29		lda $29		                lda tmp3
.a0e2		d0 02		bne $a0e6	                bne +
.a0e4		c6 2a		dec $2a		                dec tmp3+1
.a0e6						+
.a0e6		c6 29		dec $29		                dec tmp3
.a0e8		a5 29		lda $29		                lda tmp3
.a0ea		05 2a		ora $2a		                ora tmp3+1
.a0ec		d0 db		bne $a0c9	                bne _comparison_loop ; Check the next letter
.a0ee		18		clc		                clc
.a0ef		b5 00		lda $00,x	                lda 0,x
.a0f1		75 08		adc $08,x	                adc 8,x
.a0f3		95 08		sta $08,x	                sta 8,x
.a0f5		b5 01		lda $01,x	                lda 1,x
.a0f7		75 09		adc $09,x	                adc 9,x
.a0f9		95 09		sta $09,x	                sta 9,x
.a0fb		38		sec		                sec
.a0fc		b5 06		lda $06,x	                lda 6,x
.a0fe		f5 00		sbc $00,x	                sbc 0,x
.a100		95 06		sta $06,x	                sta 6,x
.a102		b5 07		lda $07,x	                lda 7,x
.a104		f5 01		sbc $01,x	                sbc 1,x
.a106		95 07		sta $07,x	                sta 7,x
.a108		e8		inx		                inx             ; drop offset
.a109		e8		inx		                inx
.a10a		e8		inx		                inx             ; drop u2
.a10b		e8		inx		                inx
.a10c		a9 ff		lda #$ff	                lda #$FF
.a10e		95 00		sta $00,x	                sta 0,x         ; Turn addr2 into a true flag.
.a110		95 01		sta $01,x	                sta 1,x
.a112		60		rts		z_search:       rts
.a113						xt_slash_string:
.a113		20 e9 d7	jsr $d7e9	                jsr underflow_3
.a116		18		clc		                clc             ; 3OS+TOS
.a117		b5 00		lda $00,x	                lda 0,x
.a119		75 04		adc $04,x	                adc 4,x
.a11b		95 04		sta $04,x	                sta 4,x
.a11d		b5 01		lda $01,x	                lda 1,x
.a11f		75 05		adc $05,x	                adc 5,x
.a121		95 05		sta $05,x	                sta 5,x
.a123		38		sec		                sec             ; NOS-TOS
.a124		b5 02		lda $02,x	                lda 2,x
.a126		f5 00		sbc $00,x	                sbc 0,x
.a128		95 02		sta $02,x	                sta 2,x
.a12a		b5 03		lda $03,x	                lda 3,x
.a12c		f5 01		sbc $01,x	                sbc 1,x
.a12e		95 03		sta $03,x	                sta 3,x
.a130		e8		inx		                inx
.a131		e8		inx		                inx
.a132		60		rts		z_slash_string: rts
.a133						xt_sliteral:
.a133		20 e4 d7	jsr $d7e4	                jsr underflow_2
.a136		20 21 d6	jsr $d621	                jsr cmpl_jump
.a139		8a		txa		                txa
.a13a		38		sec		                sec
.a13b		e9 06		sbc #$06	                sbc #6
.a13d		aa		tax		                tax
.a13e		b5 08		lda $08,x	                lda 8,x
.a140		95 04		sta $04,x	                sta 4,x
.a142		b5 09		lda $09,x	                lda 9,x
.a144		95 05		sta $05,x	                sta 5,x
.a146		b5 06		lda $06,x	                lda 6,x
.a148		95 00		sta $00,x	                sta 0,x
.a14a		b5 07		lda $07,x	                lda 7,x
.a14c		95 01		sta $01,x	                sta 1,x
.a14e		a5 00		lda $00		                lda cp
.a150		95 08		sta $08,x	                sta 8,x
.a152		95 02		sta $02,x	                sta 2,x
.a154		a5 01		lda $01		                lda cp+1
.a156		95 09		sta $09,x	                sta 9,x
.a158		95 03		sta $03,x	                sta 3,x
.a15a		20 59 8d	jsr $8d59	                jsr xt_move
.a15d		18		clc		                clc
.a15e		a5 00		lda $00		                lda cp
.a160		75 00		adc $00,x	                adc 0,x
.a162		85 00		sta $00		                sta cp
.a164		a5 01		lda $01		                lda cp+1
.a166		75 01		adc $01,x	                adc 1,x
.a168		85 01		sta $01		                sta cp+1
.a16a		b5 02		lda $02,x	                lda 2,x
.a16c		38		sec		                sec
.a16d		e9 02		sbc #$02	                sbc #2
.a16f		85 25		sta $25		                sta tmp1
.a171		b5 03		lda $03,x	                lda 3,x
.a173		e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.a175		85 26		sta $26		                sta tmp1+1
.a177		a5 00		lda $00		                lda cp
.a179		92 25		sta ($25)	                sta (tmp1)
.a17b		a0 01		ldy #$01	                ldy #1
.a17d		a5 01		lda $01		                lda cp+1
.a17f		91 25		sta ($25),y	                sta (tmp1),y
.a181						sliteral_const_str:
.a181		a0 a1		ldy #$a1	                ldy #>sliteral_runtime
.a183		a9 9b		lda #$9b	                lda #<sliteral_runtime
.a185		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.a188		b4 03		ldy $03,x	                ldy 3,x                ; address MSB
.a18a		b5 02		lda $02,x	                lda 2,x                ; address LSB
.a18c		20 28 d6	jsr $d628	                jsr cmpl_word
.a18f		b4 01		ldy $01,x	                ldy 1,x                ; length MSB
.a191		b5 00		lda $00,x	                lda 0,x                ; length LSB
.a193		20 28 d6	jsr $d628	                jsr cmpl_word
.a196		e8		inx		                inx
.a197		e8		inx		                inx
.a198		e8		inx		                inx
.a199		e8		inx		                inx
.a19a		60		rts		z_sliteral:     rts
.a19b						sliteral_runtime:
.a19b		ca		dex		                dex
.a19c		ca		dex		                dex
.a19d		ca		dex		                dex
.a19e		ca		dex		                dex
.a19f		68		pla		                pla
.a1a0		85 25		sta $25		                sta tmp1        ; LSB of address
.a1a2		68		pla		                pla
.a1a3		85 26		sta $26		                sta tmp1+1      ; MSB of address
.a1a5		a0 01		ldy #$01	                ldy #1          ; adjust for JSR/RTS mechanics on 65c02
.a1a7		b1 25		lda ($25),y	                lda (tmp1),y
.a1a9		95 02		sta $02,x	                sta 2,x         ; LSB of address
.a1ab		c8		iny		                iny
.a1ac		b1 25		lda ($25),y	                lda (tmp1),y
.a1ae		95 03		sta $03,x	                sta 3,x         ; MSB of address
.a1b0		c8		iny		                iny
.a1b1		b1 25		lda ($25),y	                lda (tmp1),y
.a1b3		95 00		sta $00,x	                sta 0,x         ; LSB of length
.a1b5		c8		iny		                iny
.a1b6		b1 25		lda ($25),y	                lda (tmp1),y
.a1b8		95 01		sta $01,x	                sta 1,x         ; MSB of length
.a1ba		18		clc		                clc
.a1bb		a5 25		lda $25		                lda tmp1
.a1bd		69 04		adc #$04	                adc #4
.a1bf		a8		tay		                tay             ; LSB
.a1c0		a5 26		lda $26		                lda tmp1+1
.a1c2		69 00		adc #$00	                adc #0          ; we only need carry
.a1c4		48		pha		                pha             ; MSB
.a1c5		5a		phy		                phy
.a1c6		60		rts		                rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/disasm.asm

.a1c7						xt_disasm:
.a1c7		20 e4 d7	jsr $d7e4	                jsr underflow_2
.a1ca		20 ce a1	jsr $a1ce	                jsr disassembler
.a1cd		60		rts		z_disasm:       rts
.a1ce						disassembler:
.a1ce		20 69 85	jsr $8569	                jsr xt_cr       ; ( addr u )
.a1d1						_byte_loop:
.a1d1		20 5e 8e	jsr $8e5e	                jsr xt_over     ; ( addr u addr )
.a1d4		20 70 96	jsr $9670	                jsr xt_u_dot    ; ( addr u )
.a1d7		20 39 93	jsr $9339	                jsr xt_space
.a1da		a9 f2		lda #$f2	                lda #<oc_index_table
.a1dc		85 27		sta $27		                sta tmp2
.a1de		a9 b3		lda #$b3	                lda #>oc_index_table
.a1e0		85 28		sta $28		                sta tmp2+1
.a1e2		a1 02		lda ($02,x)	                lda (2,x)       ; get opcode that addr points to
.a1e4		85 2d		sta $2d		                sta scratch     ; Save opcode
.a1e6		0a		asl a		                asl             ; multiply by two for offset
.a1e7		90 02		bcc $a1eb	                bcc +
.a1e9		e6 28		inc $28		                inc tmp2+1      ; we're on second page
.a1eb						+
.a1eb		a8		tay		                tay             ; use Y as the index
.a1ec		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB
.a1ee		85 29		sta $29		                sta tmp3
.a1f0		48		pha		                pha
.a1f1		c8		iny		                iny
.a1f2		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB
.a1f4		85 2a		sta $2a		                sta tmp3+1
.a1f6		48		pha		                pha
.a1f7		b2 29		lda ($29)	                lda (tmp3)
.a1f9		a8		tay		                tay                     ; save copy of lengths byte
.a1fa		10 3c		bpl $a238	                bpl _no_operand         ; bit 7 clear, single-byte instruction
.a1fc		20 fd 9d	jsr $9dfd	                jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
.a1ff		f6 04		inc $04,x	                inc 4,x
.a201		d0 02		bne $a205	                bne +
.a203		f6 05		inc $05,x	                inc 5,x                 ; ( addr+1 u 0 )
.a205						+
.a205		b5 02		lda $02,x	                lda 2,x
.a207		d0 02		bne $a20b	                bne +
.a209		d6 03		dec $03,x	                dec 3,x
.a20b						+
.a20b		d6 02		dec $02,x	                dec 2,x                 ; ( addr+1 u-1 0 )
.a20d		a1 04		lda ($04,x)	                lda (4,x)
.a20f		95 00		sta $00,x	                sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
.a211		85 2e		sta $2e		                sta scratch+1           ; Save a copy in the scratch buffer
.a213		98		tya		                tya                     ; retrieve copy of lengths byte
.a214		2a		rol a		                rol                     ; shift bit 6 to bit 7
.a215		10 14		bpl $a22b	                bpl _print_operand
.a217		f6 04		inc $04,x	                inc 4,x
.a219		d0 02		bne $a21d	                bne +
.a21b		f6 05		inc $05,x	                inc 5,x                 ; ( addr+2 u-1 LSB )
.a21d						+
.a21d		b5 02		lda $02,x	                lda 2,x
.a21f		d0 02		bne $a223	                bne +
.a221		d6 03		dec $03,x	                dec 3,x
.a223						+
.a223		d6 02		dec $02,x	                dec 2,x                 ; ( addr+2 u-2 LSB )
.a225		a1 04		lda ($04,x)	                lda (4,x)
.a227		95 01		sta $01,x	                sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
.a229		85 2f		sta $2f		                sta scratch+2           ; Save a copy in the scratch buffer
.a22b						_print_operand:
.a22b		ca		dex		                dex
.a22c		ca		dex		                dex
.a22d		a9 05		lda #$05	                lda #5
.a22f		95 00		sta $00,x	                sta 0,x
.a231		74 01		stz $01,x	                stz 1,x                 ; ( addr+n u-n opr 5 )
.a233		20 7c 96	jsr $967c	                jsr xt_u_dot_r          ; U.R ( addr+n u-n )
.a236		80 0b		bra $a243	                bra _print_mnemonic
.a238						_no_operand:
.a238		ca		dex		                dex
.a239		ca		dex		                dex
.a23a		a9 05		lda #$05	                lda #5
.a23c		95 00		sta $00,x	                sta 0,x
.a23e		74 01		stz $01,x	                stz 1,x                 ; ( addr u 5 )
.a240		20 3f 93	jsr $933f	                jsr xt_spaces           ; ( addr u )
.a243						_print_mnemonic:
.a243		20 39 93	jsr $9339	                jsr xt_space
.a246		ca		dex		                dex
.a247		ca		dex		                dex                     ; ( addr u ? )
.a248		68		pla		                pla                     ; MSB
.a249		95 01		sta $01,x	                sta 1,x                 ; ( addr u MSB )
.a24b		68		pla		                pla                     ; LSB
.a24c		95 00		sta $00,x	                sta 0,x                 ; ( addr u addr-o )
.a24e		20 55 85	jsr $8555	                jsr xt_count            ; ( addr u addr-o u-o )
.a251		74 01		stz $01,x	                stz 1,x                 ; paranoid
.a253		b5 00		lda $00,x	                lda 0,x
.a255		29 07		and #$07	                and #%00000111          ; ( addr u addr-o u-o )
.a257		95 00		sta $00,x	                sta 0,x
.a259		20 45 96	jsr $9645	                jsr xt_type             ; ( addr u )
.a25c		a5 2d		lda $2d		                lda scratch
.a25e		c9 20		cmp #$20	                cmp #OpJSR
.a260		d0 4e		bne $a2b0	                bne _not_jsr
.a262		ca		dex		                dex
.a263		ca		dex		                dex
.a264		a9 05		lda #$05	                lda #5
.a266		95 00		sta $00,x	                sta 0,x
.a268		74 01		stz $01,x	                stz 1,x
.a26a		20 3f 93	jsr $933f	                jsr xt_spaces
.a26d		a0 10		ldy #$10	                ldy #(_end_handlers - _special_handlers - 4)
.a26f		b9 9c a2	lda $a29c,y	_check_handler: lda _special_handlers,y
.a272		c5 2e		cmp $2e		                cmp scratch+1
.a274		d0 07		bne $a27d	                bne _next_handler
.a276		b9 9d a2	lda $a29d,y	                lda _special_handlers+1,y
.a279		c5 2f		cmp $2f		                cmp scratch+2
.a27b		f0 0c		beq $a289	                beq _run_handler
.a27d		88		dey		_next_handler:  dey
.a27e		88		dey		                dey
.a27f		88		dey		                dey
.a280		88		dey		                dey
.a281		10 ec		bpl $a26f	                bpl _check_handler
.a283						_not_special:
.a283		20 d3 a3	jsr $a3d3	                jsr disasm_jsr
.a286		4c 1a a3	jmp $a31a	                jmp _printing_done
.a289						_run_handler:
.a289		b9 9e a2	lda $a29e,y	                lda _special_handlers+2,y
.a28c		85 30		sta $30		                sta scratch+3
.a28e		b9 9f a2	lda $a29f,y	                lda _special_handlers+3,y
.a291		85 31		sta $31		                sta scratch+4
.a293		20 99 a2	jsr $a299	                jsr _dispatch_handler
.a296		4c 1a a3	jmp $a31a	                jmp _printing_done
.a299						_dispatch_handler:
.a299		6c 30 00	jmp ($0030)	                jmp (scratch+3)
.a29c						_special_handlers:
>a29c		b8 8b b5 a3			    .word literal_runtime,      disasm_literal
>a2a0		9b a1 60 a3			    .word sliteral_runtime,     disasm_sliteral
>a2a4		e5 8a 97 a3			    .word zero_branch_runtime,  disasm_0branch
>a2a8		db 8a a3 a3			    .word zero_test_runtime,    disasm_0test
>a2ac		e7 86 ab a3			    .word do_runtime,           disasm_do
.a2b0						_end_handlers:
.a2b0						_not_jsr:
.a2b0		c9 4c		cmp #$4c	                cmp #OpJMP
.a2b2		d0 2c		bne $a2e0	                bne _not_jmp
.a2b4		a5 2e		lda $2e		                lda scratch+1   ; Copy the pointer.
.a2b6		85 30		sta $30		                sta scratch+3
.a2b8		a5 2f		lda $2f		                lda scratch+2
.a2ba		85 31		sta $31		                sta scratch+4
.a2bc		b2 30		lda ($30)	                lda (scratch+3)
.a2be		c9 20		cmp #$20	                cmp #OpJSR ; check for JSR
.a2c0		d0 58		bne $a31a	                bne _printing_done
.a2c2		e6 30		inc $30		                inc scratch+3
.a2c4		d0 02		bne $a2c8	                bne +
.a2c6		e6 31		inc $31		                inc scratch+4
.a2c8						+
.a2c8		b2 30		lda ($30)	                lda (scratch+3)
.a2ca		c9 9b		cmp #$9b	                cmp #<sliteral_runtime
.a2cc		d0 4c		bne $a31a	                bne _printing_done
.a2ce		e6 30		inc $30		                inc scratch+3
.a2d0		d0 02		bne $a2d4	                bne +
.a2d2		e6 31		inc $31		                inc scratch+4
.a2d4						+
.a2d4		b2 30		lda ($30)	                lda (scratch+3)
.a2d6		c9 a1		cmp #$a1	                cmp #>sliteral_runtime
.a2d8		d0 40		bne $a31a	                bne _printing_done
.a2da		20 36 a3	jsr $a336	                jsr disasm_sliteral_jump
.a2dd		4c 1a a3	jmp $a31a	                jmp _printing_done
.a2e0						_not_jmp:
.a2e0		c9 80		cmp #$80	                cmp #OpBRA            ; is it bra?
.a2e2		f0 06		beq $a2ea	                beq _is_rel
.a2e4		29 1f		and #$1f	                and #$1F
.a2e6		49 10		eor #$10	                eor #$10            ; do bottom five bits match xxx10000 ?
.a2e8		d0 30		bne $a31a	                bne _printing_done
.a2ea						_is_rel:
.a2ea		a0 76		ldy #$76	                ldy #'v'            ; we'll indicate branch forward or back with v or ^
.a2ec		ca		dex		                dex
.a2ed		ca		dex		                dex
.a2ee		74 01		stz $01,x	                stz 1,x
.a2f0		a5 2e		lda $2e		                lda scratch+1
.a2f2		95 00		sta $00,x	                sta 0,x
.a2f4		10 04		bpl $a2fa	                bpl +
.a2f6		d6 01		dec $01,x	                dec 1,x             ; for negative offsets extend the sign bit so add works out
.a2f8		a0 5e		ldy #$5e	                ldy #'^'            ; it's a backward branch
.a2fa		38		sec		+               sec                 ; start counting from address after opcode
.a2fb		75 04		adc $04,x	                adc 4,x
.a2fd		95 00		sta $00,x	                sta 0,x
.a2ff		b5 01		lda $01,x	                lda 1,x
.a301		75 05		adc $05,x	                adc 5,x
.a303		95 01		sta $01,x	                sta 1,x
.a305		5a		phy		                phy                 ; save the direction indicator
.a306		ca		dex		                dex
.a307		ca		dex		                dex
.a308		a9 09		lda #$09	                lda #9
.a30a		95 00		sta $00,x	                sta 0,x
.a30c		74 01		stz $01,x	                stz 1,x
.a30e		20 7c 96	jsr $967c	                jsr xt_u_dot_r      ; print the destination with 5 leading spaces
.a311		a9 20		lda #$20	                lda #AscSp          ; print space and branch direction indicator
.a313		20 3b 88	jsr $883b	                jsr emit_a
.a316		68		pla		                pla
.a317		20 3b 88	jsr $883b	                jsr emit_a
.a31a						_printing_done:
.a31a		20 69 85	jsr $8569	                jsr xt_cr
.a31d		f6 02		inc $02,x	                inc 2,x
.a31f		d0 02		bne $a323	                bne +
.a321		f6 03		inc $03,x	                inc 3,x                 ; ( addr+1 u )
.a323						+
.a323		20 36 8e	jsr $8e36	                jsr xt_one_minus        ; ( addr+1 u-1 )
.a326		b5 00		lda $00,x	                lda 0,x                 ; All done?
.a328		15 01		ora $01,x	                ora 1,x
.a32a		f0 07		beq $a333	                beq _done
.a32c		b5 01		lda $01,x	                lda 1,x                 ; Catch mid-instruction ranges
.a32e		30 03		bmi $a333	                bmi _done
.a330		4c d1 a1	jmp $a1d1	                jmp _byte_loop          ; out of range for BRA
.a333						_done:
.a333		4c 33 95	jmp $9533	                jmp xt_two_drop         ; JSR/RTS
.a336						disasm_sliteral_jump:
.a336		20 be 93	jsr $93be	                jsr xt_swap
.a339		ca		dex		                dex
.a33a		ca		dex		                dex
.a33b		a5 2e		lda $2e		                lda scratch+1
.a33d		95 00		sta $00,x	                sta 0,x
.a33f		a5 2f		lda $2f		                lda scratch+2
.a341		95 01		sta $01,x	                sta 1,x
.a343		20 be 93	jsr $93be	                jsr xt_swap
.a346		20 3d 8d	jsr $8d3d	                jsr xt_minus
.a349		20 36 8e	jsr $8e36	                jsr xt_one_minus
.a34c		20 3d 8d	jsr $8d3d	                jsr xt_minus
.a34f		ca		dex		                dex
.a350		ca		dex		                dex
.a351		a5 2e		lda $2e		                lda scratch+1
.a353		95 00		sta $00,x	                sta 0,x
.a355		a5 2f		lda $2f		                lda scratch+2
.a357		95 01		sta $01,x	                sta 1,x
.a359		20 36 8e	jsr $8e36	                jsr xt_one_minus
.a35c		20 be 93	jsr $93be	                jsr xt_swap ; ( new_addr new_n )
.a35f		60		rts		                rts
.a360						disasm_sliteral:
.a360		a9 53		lda #$53	                lda #'S'
.a362		20 3b 88	jsr $883b	                jsr emit_a ; Print S before LITERAL so it becomes SLITERAL
.a365		a9 0c		lda #$0c	                lda #str_disasm_lit     ; "LITERAL "
.a367		20 1b d8	jsr $d81b	                jsr print_string_no_lf
.a36a		20 be 93	jsr $93be	                jsr xt_swap             ; switch to (u addr)
.a36d		20 42 8e	jsr $8e42	                jsr xt_one_plus
.a370		20 cb 87	jsr $87cb	                jsr xt_dup
.a373		20 90 89	jsr $8990	                jsr xt_fetch
.a376		20 70 96	jsr $9670	                jsr xt_u_dot            ; Print the address of the string
.a379		20 c8 9d	jsr $9dc8	                jsr xt_two
.a37c		20 ac 8f	jsr $8fac	                jsr xt_plus
.a37f		20 cb 87	jsr $87cb	                jsr xt_dup
.a382		20 28 99	jsr $9928	                jsr xt_question         ; Print the length of the string
.a385		20 42 8e	jsr $8e42	                jsr xt_one_plus
.a388		20 be 93	jsr $93be	                jsr xt_swap            ; ( addr+4 u )
.a38b		ca		dex		                dex
.a38c		ca		dex		                dex
.a38d		a9 04		lda #$04	                lda #4
.a38f		95 00		sta $00,x	                sta 0,x
.a391		74 01		stz $01,x	                stz 1,x
.a393		20 3d 8d	jsr $8d3d	                jsr xt_minus            ; ( addr+4 u-4 )
.a396		60		rts		                rts
.a397						disasm_0branch:
.a397		a9 30		lda #$30	                lda #'0'
.a399		20 3b 88	jsr $883b	                jsr emit_a ; Print 0 before BRANCH so it becomes 0BRANCH
.a39c						disasm_branch:
.a39c		a9 0e		lda #$0e	                lda #str_disasm_bra
.a39e		20 1b d8	jsr $d81b	                jsr print_string_no_lf ; "BRANCH "
.a3a1		80 17		bra $a3ba	                bra disasm_print_literal
.a3a3						disasm_0test:
.a3a3		a9 0f		lda #$0f	                lda #str_disasm_0test
.a3a5		20 1b d8	jsr $d81b	                jsr print_string_no_lf
.a3a8		4c 3b 88	jmp $883b	                jmp emit_a
.a3ab						disasm_do:
.a3ab		a9 44		lda #$44	                lda #'D'
.a3ad		20 3b 88	jsr $883b	                jsr emit_a
.a3b0		a9 4f		lda #$4f	                lda #'O'
.a3b2		4c 3b 88	jmp $883b	                jmp emit_a
.a3b5						disasm_literal:
.a3b5		a9 0c		lda #$0c	                lda #str_disasm_lit
.a3b7		20 1b d8	jsr $d81b	                jsr print_string_no_lf ; "LITERAL "
.a3ba						disasm_print_literal:
.a3ba		20 be 93	jsr $93be	                jsr xt_swap ; switch to (u addr)
.a3bd		20 42 8e	jsr $8e42	                jsr xt_one_plus
.a3c0		20 cb 87	jsr $87cb	                jsr xt_dup
.a3c3		20 28 99	jsr $9928	                jsr xt_question ; Print the value at the address
.a3c6		20 42 8e	jsr $8e42	                jsr xt_one_plus
.a3c9		20 be 93	jsr $93be	                jsr xt_swap ; (addr+2 u)
.a3cc		20 36 8e	jsr $8e36	                jsr xt_one_minus
.a3cf		20 36 8e	jsr $8e36	                jsr xt_one_minus ; (addr+2 u-2)
.a3d2		60		rts		                rts
.a3d3						disasm_jsr:
.a3d3		ca		dex		                dex
.a3d4		ca		dex		                dex
.a3d5		a5 2e		lda $2e		                lda scratch+1
.a3d7		95 00		sta $00,x	                sta 0,x
.a3d9		a5 2f		lda $2f		                lda scratch+2
.a3db		95 01		sta $01,x	                sta 1,x
.a3dd		20 b4 9b	jsr $9bb4	                jsr xt_int_to_name
.a3e0		b5 00		lda $00,x	                lda 0,x
.a3e2		15 01		ora $01,x	                ora 1,x
.a3e4		f0 07		beq $a3ed	                beq _disasm_no_nt
.a3e6		20 57 9c	jsr $9c57	                jsr xt_name_to_string
.a3e9		20 45 96	jsr $9645	                jsr xt_type
.a3ec		60		rts		                rts
.a3ed						_disasm_no_nt:
.a3ed		20 c5 87	jsr $87c5	                jsr xt_drop ; the 0 indicating no name token
.a3f0		ca		dex		                dex
.a3f1		ca		dex		                dex
.a3f2		a5 2e		lda $2e		                lda scratch+1
.a3f4		95 00		sta $00,x	                sta 0,x
.a3f6		a5 2f		lda $2f		                lda scratch+2
.a3f8		95 01		sta $01,x	                sta 1,x
.a3fa		ca		dex		                dex
.a3fb		ca		dex		                dex
.a3fc		a9 df		lda #$df	                lda #<underflow_1
.a3fe		95 00		sta $00,x	                sta 0,x
.a400		a9 d7		lda #$d7	                lda #>underflow_1
.a402		95 01		sta $01,x	                sta 1,x
.a404		20 0b d7	jsr $d70b	                jsr compare_16bit
.a407		f0 02		beq $a40b	                beq _disasm_jsr_uflow_check_upper
.a409		b0 14		bcs $a41f	                bcs _disasm_jsr_unknown
.a40b						_disasm_jsr_uflow_check_upper:
.a40b		a9 ee		lda #$ee	                lda #<underflow_4
.a40d		95 00		sta $00,x	                sta 0,x
.a40f		a9 d7		lda #$d7	                lda #>underflow_4
.a411		95 01		sta $01,x	                sta 1,x
.a413		20 0b d7	jsr $d70b	                jsr compare_16bit
.a416		f0 02		beq $a41a	                beq _disasm_jsr_soc
.a418		90 05		bcc $a41f	                bcc _disasm_jsr_unknown
.a41a						_disasm_jsr_soc:
.a41a		a9 0d		lda #$0d	                lda #str_disasm_sdc
.a41c		20 1b d8	jsr $d81b	                jsr print_string_no_lf  ; "STACK DEPTH CHECK"
.a41f						_disasm_jsr_unknown:
.a41f		20 33 95	jsr $9533	                jsr xt_two_drop
.a422		60		rts		                rts
.a423						disassembler_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/assembler.asm

.a423						assembler:
.a423						xt_asm_adc_h:
.a423		a9 69		lda #$69	                lda #$69
.a425		4c 7e a7	jmp $a77e	                jmp asm_common
.a428						z_asm_adc_h:
.a428						xt_asm_adc_x:
.a428		a9 7d		lda #$7d	                lda #$7D
.a42a		4c 7e a7	jmp $a77e	                jmp asm_common
.a42d						z_asm_adc_x:
.a42d						xt_asm_adc_y:
.a42d		a9 79		lda #$79	                lda #$79
.a42f		4c 7e a7	jmp $a77e	                jmp asm_common
.a432						z_asm_adc_y:
.a432						xt_asm_adc_z:
.a432		a9 65		lda #$65	                lda #$65
.a434		4c 7e a7	jmp $a77e	                jmp asm_common
.a437						z_asm_adc_z:
.a437						xt_asm_adc_zi:
.a437		a9 72		lda #$72	                lda #$72
.a439		4c 7e a7	jmp $a77e	                jmp asm_common
.a43c						z_asm_adc_zi:
.a43c						xt_asm_adc_ziy:
.a43c		a9 71		lda #$71	                lda #$71
.a43e		4c 7e a7	jmp $a77e	                jmp asm_common
.a441						z_asm_adc_ziy:
.a441						xt_asm_adc_zx:
.a441		a9 75		lda #$75	                lda #$75
.a443		4c 7e a7	jmp $a77e	                jmp asm_common
.a446						z_asm_adc_zx:
.a446						xt_asm_adc_zxi:
.a446		a9 61		lda #$61	                lda #$61
.a448		4c 7e a7	jmp $a77e	                jmp asm_common
.a44b						z_asm_adc_zxi:
.a44b						xt_asm_and:
.a44b		a9 2d		lda #$2d	                lda #$2D
.a44d		4c 7e a7	jmp $a77e	                jmp asm_common
.a450						z_asm_and:
.a450						xt_asm_and_h:
.a450		a9 29		lda #$29	                lda #$29
.a452		4c 7e a7	jmp $a77e	                jmp asm_common
.a455						z_asm_and_h:
.a455						xt_asm_and_x:
.a455		a9 3d		lda #$3d	                lda #$3D
.a457		4c 7e a7	jmp $a77e	                jmp asm_common
.a45a						z_asm_and_x:
.a45a						xt_asm_and_y:
.a45a		a9 39		lda #$39	                lda #$39
.a45c		4c 7e a7	jmp $a77e	                jmp asm_common
.a45f						z_asm_and_y:
.a45f						xt_asm_and_z:
.a45f		a9 25		lda #$25	                lda #$25
.a461		4c 7e a7	jmp $a77e	                jmp asm_common
.a464						z_asm_and_z:
.a464						xt_asm_and_zi:
.a464		a9 32		lda #$32	                lda #$32
.a466		4c 7e a7	jmp $a77e	                jmp asm_common
.a469						z_asm_and_zi:
.a469						xt_asm_and_ziy:
.a469		a9 31		lda #$31	                lda #$31
.a46b		4c 7e a7	jmp $a77e	                jmp asm_common
.a46e						z_asm_and_ziy:
.a46e						xt_asm_and_zx:
.a46e		a9 35		lda #$35	                lda #$35
.a470		4c 7e a7	jmp $a77e	                jmp asm_common
.a473						z_asm_and_zx:
.a473						xt_asm_and_zxi:
.a473		a9 21		lda #$21	                lda #$21
.a475		4c 7e a7	jmp $a77e	                jmp asm_common
.a478						z_asm_and_zxi:
.a478						xt_asm_asl:
.a478		a9 0e		lda #$0e	                lda #$0E
.a47a		4c 7e a7	jmp $a77e	                jmp asm_common
.a47d						z_asm_asl:
.a47d						xt_asm_asl_a:
.a47d		a9 0a		lda #$0a	                lda #$0A
.a47f		4c 7e a7	jmp $a77e	                jmp asm_common
.a482						z_asm_asl_a:
.a482						xt_asm_asl_x:
.a482		a9 1e		lda #$1e	                lda #$1E
.a484		4c 7e a7	jmp $a77e	                jmp asm_common
.a487						z_asm_asl_x:
.a487						xt_asm_asl_z:
.a487		a9 06		lda #$06	                lda #$06
.a489		4c 7e a7	jmp $a77e	                jmp asm_common
.a48c						z_asm_asl_z:
.a48c						xt_asm_asl_zx:
.a48c		a9 16		lda #$16	                lda #$16
.a48e		4c 7e a7	jmp $a77e	                jmp asm_common
.a491						z_asm_asl_zx:
.a491						xt_asm_bcc:
.a491		a9 90		lda #$90	                lda #$90
.a493		4c 7e a7	jmp $a77e	                jmp asm_common
.a496						z_asm_bcc:
.a496						xt_asm_bcs:
.a496		a9 b0		lda #$b0	                lda #$B0
.a498		a0 02		ldy #$02	                ldy #2
.a49a		4c 7e a7	jmp $a77e	                jmp asm_common
.a49d						z_asm_bcs:
.a49d						xt_asm_beq:
.a49d		a9 f0		lda #$f0	                lda #$F0
.a49f		4c 7e a7	jmp $a77e	                jmp asm_common
.a4a2						z_asm_beq:
.a4a2						xt_asm_bit:
.a4a2		a9 2c		lda #$2c	                lda #$2C
.a4a4		4c 7e a7	jmp $a77e	                jmp asm_common
.a4a7						z_asm_bit:
.a4a7						xt_asm_bit_h:
.a4a7		a9 89		lda #$89	                lda #$89
.a4a9		4c 7e a7	jmp $a77e	                jmp asm_common
.a4ac						z_asm_bit_h:
.a4ac						xt_asm_bit_x:
.a4ac		a9 3c		lda #$3c	                lda #$3C
.a4ae		4c 7e a7	jmp $a77e	                jmp asm_common
.a4b1						z_asm_bit_x:
.a4b1						xt_asm_bit_z:
.a4b1		a9 24		lda #$24	                lda #$24
.a4b3		4c 7e a7	jmp $a77e	                jmp asm_common
.a4b6						z_asm_bit_z:
.a4b6						xt_asm_bit_zx:
.a4b6		a9 34		lda #$34	                lda #$34
.a4b8		4c 7e a7	jmp $a77e	                jmp asm_common
.a4bb						z_asm_bit_zx:
.a4bb						xt_asm_bmi:
.a4bb		a9 30		lda #$30	                lda #$30
.a4bd		4c 7e a7	jmp $a77e	                jmp asm_common
.a4c0						z_asm_bmi:
.a4c0						xt_asm_bne:
.a4c0		a9 d0		lda #$d0	                lda #$D0
.a4c2		4c 7e a7	jmp $a77e	                jmp asm_common
.a4c5						z_asm_bne:
.a4c5						xt_asm_bpl:
.a4c5		a9 10		lda #$10	                lda #$10
.a4c7		4c 7e a7	jmp $a77e	                jmp asm_common
.a4ca						z_asm_bpl:
.a4ca						xt_asm_bra:
.a4ca		a9 80		lda #$80	                lda #$80
.a4cc		4c 7e a7	jmp $a77e	                jmp asm_common
.a4cf						z_asm_bra:
.a4cf						xt_asm_brk:
.a4cf		a9 00		lda #$00	                lda #$00
.a4d1		4c 7e a7	jmp $a77e	                jmp asm_common
.a4d4						z_asm_brk:
.a4d4						xt_asm_bvc:
.a4d4		a9 50		lda #$50	                lda #$50
.a4d6		4c 7e a7	jmp $a77e	                jmp asm_common
.a4d9						z_asm_bvc:
.a4d9						xt_asm_bvs:
.a4d9		a9 70		lda #$70	                lda #$70
.a4db		4c 7e a7	jmp $a77e	                jmp asm_common
.a4de						z_asm_bvs:
.a4de						xt_asm_clc:
.a4de		a9 18		lda #$18	                lda #$18
.a4e0		4c 7e a7	jmp $a77e	                jmp asm_common
.a4e3						z_asm_clc:
.a4e3						xt_asm_cld:
.a4e3		a9 d8		lda #$d8	                lda #$D8
.a4e5		4c 7e a7	jmp $a77e	                jmp asm_common
.a4e8						z_asm_cld:
.a4e8						xt_asm_cli:
.a4e8		a9 58		lda #$58	                lda #$58
.a4ea		4c 7e a7	jmp $a77e	                jmp asm_common
.a4ed						z_asm_cli:
.a4ed						xt_asm_clv:
.a4ed		a9 b8		lda #$b8	                lda #$B8
.a4ef		4c 7e a7	jmp $a77e	                jmp asm_common
.a4f2						z_asm_clv:
.a4f2						xt_asm_cmp:
.a4f2		a9 cd		lda #$cd	                lda #$CD
.a4f4		4c 7e a7	jmp $a77e	                jmp asm_common
.a4f7						z_asm_cmp:
.a4f7						xt_asm_cmp_h:
.a4f7		a9 c9		lda #$c9	                lda #$C9
.a4f9		4c 7e a7	jmp $a77e	                jmp asm_common
.a4fc						z_asm_cmp_h:
.a4fc						xt_asm_cmp_x:
.a4fc		a9 dd		lda #$dd	                lda #$DD
.a4fe		4c 7e a7	jmp $a77e	                jmp asm_common
.a501						z_asm_cmp_x:
.a501						xt_asm_cmp_y:
.a501		a9 d9		lda #$d9	                lda #$D9
.a503		4c 7e a7	jmp $a77e	                jmp asm_common
.a506						z_asm_cmp_y:
.a506						xt_asm_cmp_z:
.a506		a9 c5		lda #$c5	                lda #$C5
.a508		4c 7e a7	jmp $a77e	                jmp asm_common
.a50b						z_asm_cmp_z:
.a50b						xt_asm_cmp_zi:
.a50b		a9 d2		lda #$d2	                lda #$D2
.a50d		4c 7e a7	jmp $a77e	                jmp asm_common
.a510						z_asm_cmp_zi:
.a510						xt_asm_cmp_ziy:
.a510		a9 d1		lda #$d1	                lda #$D1
.a512		4c 7e a7	jmp $a77e	                jmp asm_common
.a515						z_asm_cmp_ziy:
.a515						xt_asm_cmp_zx:
.a515		a9 d5		lda #$d5	                lda #$D5
.a517		4c 7e a7	jmp $a77e	                jmp asm_common
.a51a						z_asm_cmp_zx:
.a51a						xt_asm_cmp_zxi:
.a51a		a9 c1		lda #$c1	                lda #$C1
.a51c		4c 7e a7	jmp $a77e	                jmp asm_common
.a51f						z_asm_cmp_zxi:
.a51f						xt_asm_cpx:
.a51f		a9 ec		lda #$ec	                lda #$EC
.a521		4c 7e a7	jmp $a77e	                jmp asm_common
.a524						z_asm_cpx:
.a524						xt_asm_cpx_h:
.a524		a9 e0		lda #$e0	                lda #$E0
.a526		4c 7e a7	jmp $a77e	                jmp asm_common
.a529						z_asm_cpx_h:
.a529						xt_asm_cpx_z:
.a529		a9 e4		lda #$e4	                lda #$E4
.a52b		4c 7e a7	jmp $a77e	                jmp asm_common
.a52e						z_asm_cpx_z:
.a52e						xt_asm_cpy:
.a52e		a9 cc		lda #$cc	                lda #$CC
.a530		a0 03		ldy #$03	                ldy #3
.a532		4c 7e a7	jmp $a77e	                jmp asm_common
.a535						z_asm_cpy:
.a535						xt_asm_cpy_h:
.a535		a9 c0		lda #$c0	                lda #$C0
.a537		4c 7e a7	jmp $a77e	                jmp asm_common
.a53a						z_asm_cpy_h:
.a53a						xt_asm_cpy_z:
.a53a		a9 c4		lda #$c4	                lda #$C4
.a53c		4c 7e a7	jmp $a77e	                jmp asm_common
.a53f						z_asm_cpy_z:
.a53f						xt_asm_dec:
.a53f		a9 ce		lda #$ce	                lda #$CE
.a541		4c 7e a7	jmp $a77e	                jmp asm_common
.a544						z_asm_dec:
.a544						xt_asm_dec_a:
.a544		a9 3a		lda #$3a	                lda #$3A
.a546		4c 7e a7	jmp $a77e	                jmp asm_common
.a549						z_asm_dec_a:
.a549						xt_asm_dec_x:
.a549		a9 de		lda #$de	                lda #$DE
.a54b		4c 7e a7	jmp $a77e	                jmp asm_common
.a54e						z_asm_dec_x:
.a54e						xt_asm_dec_z:
.a54e		a9 c6		lda #$c6	                lda #$C6
.a550		4c 7e a7	jmp $a77e	                jmp asm_common
.a553						z_asm_dec_z:
.a553						xt_asm_dec_zx:
.a553		a9 d6		lda #$d6	                lda #$D6
.a555		4c 7e a7	jmp $a77e	                jmp asm_common
.a558						z_asm_dec_zx:
.a558						xt_asm_dex:
.a558		a9 ca		lda #$ca	                lda #$CA
.a55a		4c 7e a7	jmp $a77e	                jmp asm_common
.a55d						z_asm_dex:
.a55d						xt_asm_dey:
.a55d		a9 88		lda #$88	                lda #$88
.a55f		4c 7e a7	jmp $a77e	                jmp asm_common
.a562						z_asm_dey:
.a562						xt_asm_eor:
.a562		a9 4d		lda #$4d	                lda #$4D
.a564		4c 7e a7	jmp $a77e	                jmp asm_common
.a567						z_asm_eor:
.a567						xt_asm_eor_h:
.a567		a9 49		lda #$49	                lda #$49
.a569		4c 7e a7	jmp $a77e	                jmp asm_common
.a56c						z_asm_eor_h:
.a56c						xt_asm_eor_x:
.a56c		a9 5d		lda #$5d	                lda #$5D
.a56e		4c 7e a7	jmp $a77e	                jmp asm_common
.a571						z_asm_eor_x:
.a571						xt_asm_eor_y:
.a571		a9 59		lda #$59	                lda #$59
.a573		4c 7e a7	jmp $a77e	                jmp asm_common
.a576						z_asm_eor_y:
.a576						xt_asm_eor_z:
.a576		a9 45		lda #$45	                lda #$45
.a578		4c 7e a7	jmp $a77e	                jmp asm_common
.a57b						z_asm_eor_z:
.a57b						xt_asm_eor_zi:
.a57b		a9 52		lda #$52	                lda #$52
.a57d		4c 7e a7	jmp $a77e	                jmp asm_common
.a580						z_asm_eor_zi:
.a580						xt_asm_eor_ziy:
.a580		a9 51		lda #$51	                lda #$51
.a582		4c 7e a7	jmp $a77e	                jmp asm_common
.a585						z_asm_eor_ziy:
.a585						xt_asm_eor_zx:
.a585		a9 55		lda #$55	                lda #$55
.a587		4c 7e a7	jmp $a77e	                jmp asm_common
.a58a						z_asm_eor_zx:
.a58a						xt_asm_eor_zxi:
.a58a		a9 41		lda #$41	                lda #$41
.a58c		4c 7e a7	jmp $a77e	                jmp asm_common
.a58f						z_asm_eor_zxi:
.a58f						xt_asm_inc:
.a58f		a9 ee		lda #$ee	                lda #$EE
.a591		4c 7e a7	jmp $a77e	                jmp asm_common
.a594						z_asm_inc:
.a594						xt_asm_inc_a:
.a594		a9 1a		lda #$1a	                lda #$1A
.a596		4c 7e a7	jmp $a77e	                jmp asm_common
.a599						z_asm_inc_a:
.a599						xt_asm_inc_x:
.a599		a9 fe		lda #$fe	                lda #$FE
.a59b		4c 7e a7	jmp $a77e	                jmp asm_common
.a59e						z_asm_inc_x:
.a59e						xt_asm_inc_z:
.a59e		a9 e6		lda #$e6	                lda #$E6
.a5a0		4c 7e a7	jmp $a77e	                jmp asm_common
.a5a3						z_asm_inc_z:
.a5a3						xt_asm_inc_zx:
.a5a3		a9 f6		lda #$f6	                lda #$F6
.a5a5		4c 7e a7	jmp $a77e	                jmp asm_common
.a5a8						z_asm_inc_zx:
.a5a8						xt_asm_inx:
.a5a8		a9 e8		lda #$e8	                lda #$E8
.a5aa		4c 7e a7	jmp $a77e	                jmp asm_common
.a5ad						z_asm_inx:
.a5ad						xt_asm_iny:
.a5ad		a9 c8		lda #$c8	                lda #$C8
.a5af		4c 7e a7	jmp $a77e	                jmp asm_common
.a5b2						z_asm_iny:
.a5b2						xt_asm_jmp:
.a5b2		a9 4c		lda #$4c	                lda #$4C
.a5b4		4c 7e a7	jmp $a77e	                jmp asm_common
.a5b7						z_asm_jmp:
.a5b7						xt_asm_jmp_i:
.a5b7		a9 6c		lda #$6c	                lda #$6C
.a5b9		4c 7e a7	jmp $a77e	                jmp asm_common
.a5bc						z_asm_jmp_i:
.a5bc						xt_asm_jmp_xi:
.a5bc		a9 7c		lda #$7c	                lda #$7C
.a5be		4c 7e a7	jmp $a77e	                jmp asm_common
.a5c1						z_asm_jmp_xi:
.a5c1						xt_asm_jsr:
.a5c1		a9 20		lda #$20	                lda #$20
.a5c3		4c 7e a7	jmp $a77e	                jmp asm_common
.a5c6						z_asm_jsr:
.a5c6						xt_asm_lda:
.a5c6		a9 ad		lda #$ad	                lda #$AD
.a5c8		4c 7e a7	jmp $a77e	                jmp asm_common
.a5cb						z_asm_lda:
.a5cb						xt_asm_lda_h:
.a5cb		a9 a9		lda #$a9	                lda #$A9
.a5cd		4c 7e a7	jmp $a77e	                jmp asm_common
.a5d0						z_asm_lda_h:
.a5d0						xt_asm_lda_x:
.a5d0		a9 bd		lda #$bd	                lda #$BD
.a5d2		4c 7e a7	jmp $a77e	                jmp asm_common
.a5d5						z_asm_lda_x:
.a5d5						xt_asm_lda_y:
.a5d5		a9 b9		lda #$b9	                lda #$B9
.a5d7		4c 7e a7	jmp $a77e	                jmp asm_common
.a5da						z_asm_lda_y:
.a5da						xt_asm_lda_z:
.a5da		a9 a5		lda #$a5	                lda #$A5
.a5dc		4c 7e a7	jmp $a77e	                jmp asm_common
.a5df						z_asm_lda_z:
.a5df						xt_asm_lda_zi:
.a5df		a9 b2		lda #$b2	                lda #$B2
.a5e1		4c 7e a7	jmp $a77e	                jmp asm_common
.a5e4						z_asm_lda_zi:
.a5e4						xt_asm_lda_ziy:
.a5e4		a9 b1		lda #$b1	                lda #$B1
.a5e6		4c 7e a7	jmp $a77e	                jmp asm_common
.a5e9						z_asm_lda_ziy:
.a5e9						xt_asm_lda_zx:
.a5e9		a9 b5		lda #$b5	                lda #$B5
.a5eb		4c 7e a7	jmp $a77e	                jmp asm_common
.a5ee						z_asm_lda_zx:
.a5ee						xt_asm_lda_zxi:
.a5ee		a9 a1		lda #$a1	                lda #$A1
.a5f0		4c 7e a7	jmp $a77e	                jmp asm_common
.a5f3						z_asm_lda_zxi:
.a5f3						xt_asm_ldx:
.a5f3		a9 ae		lda #$ae	                lda #$AE
.a5f5		4c 7e a7	jmp $a77e	                jmp asm_common
.a5f8						z_asm_ldx:
.a5f8						xt_asm_ldx_h:
.a5f8		a9 a2		lda #$a2	                lda #$A2
.a5fa		4c 7e a7	jmp $a77e	                jmp asm_common
.a5fd						z_asm_ldx_h:
.a5fd						xt_asm_ldx_y:
.a5fd		a9 be		lda #$be	                lda #$BE
.a5ff		4c 7e a7	jmp $a77e	                jmp asm_common
.a602						z_asm_ldx_y:
.a602						xt_asm_ldx_z:
.a602		a9 a6		lda #$a6	                lda #$A6
.a604		4c 7e a7	jmp $a77e	                jmp asm_common
.a607						z_asm_ldx_z:
.a607						xt_asm_ldx_zy:
.a607		a9 b6		lda #$b6	                lda #$B6
.a609		4c 7e a7	jmp $a77e	                jmp asm_common
.a60c						z_asm_ldx_zy:
.a60c						xt_asm_ldy:
.a60c		a9 ac		lda #$ac	                lda #$AC
.a60e		4c 7e a7	jmp $a77e	                jmp asm_common
.a611						z_asm_ldy:
.a611						xt_asm_ldy_h:
.a611		a9 a0		lda #$a0	                lda #$A0
.a613		4c 7e a7	jmp $a77e	                jmp asm_common
.a616						z_asm_ldy_h:
.a616						xt_asm_ldy_x:
.a616		a9 bc		lda #$bc	                lda #$BC
.a618		4c 7e a7	jmp $a77e	                jmp asm_common
.a61b						z_asm_ldy_x:
.a61b						xt_asm_ldy_z:
.a61b		a9 a4		lda #$a4	                lda #$A4
.a61d		4c 7e a7	jmp $a77e	                jmp asm_common
.a620						z_asm_ldy_z:
.a620						xt_asm_ldy_zx:
.a620		a9 b4		lda #$b4	                lda #$B4
.a622		4c 7e a7	jmp $a77e	                jmp asm_common
.a625						z_asm_ldy_zx:
.a625						xt_asm_lsr:
.a625		a9 4e		lda #$4e	                lda #$4E
.a627		4c 7e a7	jmp $a77e	                jmp asm_common
.a62a						z_asm_lsr:
.a62a						xt_asm_lsr_a:
.a62a		a9 4a		lda #$4a	                lda #$4A
.a62c		4c 7e a7	jmp $a77e	                jmp asm_common
.a62f						z_asm_lsr_a:
.a62f						xt_asm_lsr_x:
.a62f		a9 5e		lda #$5e	                lda #$5E
.a631		4c 7e a7	jmp $a77e	                jmp asm_common
.a634						z_asm_lsr_x:
.a634						xt_asm_lsr_z:
.a634		a9 46		lda #$46	                lda #$46
.a636		4c 7e a7	jmp $a77e	                jmp asm_common
.a639						z_asm_lsr_z:
.a639						xt_asm_lsr_zx:
.a639		a9 56		lda #$56	                lda #$56
.a63b		4c 7e a7	jmp $a77e	                jmp asm_common
.a63e						z_asm_lsr_zx:
.a63e						xt_asm_nop:
.a63e		a9 ea		lda #$ea	                lda #$EA
.a640		4c 7e a7	jmp $a77e	                jmp asm_common
.a643						z_asm_nop:
.a643						xt_asm_ora:
.a643		a9 0d		lda #$0d	                lda #$0D
.a645		4c 7e a7	jmp $a77e	                jmp asm_common
.a648						z_asm_ora:
.a648						xt_asm_ora_h:
.a648		a9 09		lda #$09	                lda #$09
.a64a		4c 7e a7	jmp $a77e	                jmp asm_common
.a64d						z_asm_ora_h:
.a64d						xt_asm_ora_x:
.a64d		a9 1d		lda #$1d	                lda #$1D
.a64f		4c 7e a7	jmp $a77e	                jmp asm_common
.a652						z_asm_ora_x:
.a652						xt_asm_ora_y:
.a652		a9 19		lda #$19	                lda #$19
.a654		4c 7e a7	jmp $a77e	                jmp asm_common
.a657						z_asm_ora_y:
.a657						xt_asm_ora_z:
.a657		a9 05		lda #$05	                lda #$05
.a659		4c 7e a7	jmp $a77e	                jmp asm_common
.a65c						z_asm_ora_z:
.a65c						xt_asm_ora_zi:
.a65c		a9 12		lda #$12	                lda #$12
.a65e		a0 02		ldy #$02	                ldy #2
.a660		4c 7e a7	jmp $a77e	                jmp asm_common
.a663						z_asm_ora_zi:
.a663						xt_asm_ora_ziy:
.a663		a9 11		lda #$11	                lda #$11
.a665		4c 7e a7	jmp $a77e	                jmp asm_common
.a668						z_asm_ora_ziy:
.a668						xt_asm_ora_zx:
.a668		a9 15		lda #$15	                lda #$15
.a66a		4c 7e a7	jmp $a77e	                jmp asm_common
.a66d						z_asm_ora_zx:
.a66d						xt_asm_ora_zxi:
.a66d		a9 01		lda #$01	                lda #$01
.a66f		4c 7e a7	jmp $a77e	                jmp asm_common
.a672						z_asm_ora_zxi:
.a672						xt_asm_pha:
.a672		a9 48		lda #$48	                lda #$48
.a674		4c 7e a7	jmp $a77e	                jmp asm_common
.a677						z_asm_pha:
.a677						xt_asm_php:
.a677		a9 08		lda #$08	                lda #$08
.a679		4c 7e a7	jmp $a77e	                jmp asm_common
.a67c						z_asm_php:
.a67c						xt_asm_phx:
.a67c		a9 da		lda #$da	                lda #$DA
.a67e		4c 7e a7	jmp $a77e	                jmp asm_common
.a681						z_asm_phx:
.a681						xt_asm_phy:
.a681		a9 5a		lda #$5a	                lda #$5A
.a683		4c 7e a7	jmp $a77e	                jmp asm_common
.a686						z_asm_phy:
.a686						xt_asm_pla:
.a686		a9 68		lda #$68	                lda #$68
.a688		4c 7e a7	jmp $a77e	                jmp asm_common
.a68b						z_asm_pla:
.a68b						xt_asm_plp:
.a68b		a9 28		lda #$28	                lda #$28
.a68d		4c 7e a7	jmp $a77e	                jmp asm_common
.a690						z_asm_plp:
.a690						xt_asm_plx:
.a690		a9 fa		lda #$fa	                lda #$FA
.a692		4c 7e a7	jmp $a77e	                jmp asm_common
.a695						z_asm_plx:
.a695						xt_asm_ply:
.a695		a9 7a		lda #$7a	                lda #$7A
.a697		4c 7e a7	jmp $a77e	                jmp asm_common
.a69a						z_asm_ply:
.a69a						xt_asm_rol:
.a69a		a9 2e		lda #$2e	                lda #$2E
.a69c		4c 7e a7	jmp $a77e	                jmp asm_common
.a69f						z_asm_rol:
.a69f						xt_asm_rol_a:
.a69f		a9 2a		lda #$2a	                lda #$2A
.a6a1		4c 7e a7	jmp $a77e	                jmp asm_common
.a6a4						z_asm_rol_a:
.a6a4						xt_asm_rol_x:
.a6a4		a9 3e		lda #$3e	                lda #$3E
.a6a6		4c 7e a7	jmp $a77e	                jmp asm_common
.a6a9						z_asm_rol_x:
.a6a9						xt_asm_rol_z:
.a6a9		a9 26		lda #$26	                lda #$26
.a6ab		4c 7e a7	jmp $a77e	                jmp asm_common
.a6ae						z_asm_rol_z:
.a6ae						xt_asm_rol_zx:
.a6ae		a9 36		lda #$36	                lda #$36
.a6b0		4c 7e a7	jmp $a77e	                jmp asm_common
.a6b3						z_asm_rol_zx:
.a6b3						xt_asm_ror:
.a6b3		a9 6e		lda #$6e	                lda #$6E
.a6b5		4c 7e a7	jmp $a77e	                jmp asm_common
.a6b8						z_asm_ror:
.a6b8						xt_asm_ror_a:
.a6b8		a9 6a		lda #$6a	                lda #$6A
.a6ba		4c 7e a7	jmp $a77e	                jmp asm_common
.a6bd						z_asm_ror_a:
.a6bd						xt_asm_ror_x:
.a6bd		a9 7e		lda #$7e	                lda #$7E
.a6bf		4c 7e a7	jmp $a77e	                jmp asm_common
.a6c2						z_asm_ror_x:
.a6c2						xt_asm_ror_z:
.a6c2		a9 66		lda #$66	                lda #$66
.a6c4		4c 7e a7	jmp $a77e	                jmp asm_common
.a6c7						z_asm_ror_z:
.a6c7						xt_asm_ror_zx:
.a6c7		a9 76		lda #$76	                lda #$76
.a6c9		4c 7e a7	jmp $a77e	                jmp asm_common
.a6cc						z_asm_ror_zx:
.a6cc						xt_asm_rti:
.a6cc		a9 40		lda #$40	                lda #$40
.a6ce		4c 7e a7	jmp $a77e	                jmp asm_common
.a6d1						z_asm_rti:
.a6d1						xt_asm_rts:
.a6d1		a9 60		lda #$60	                lda #$60
.a6d3		4c 7e a7	jmp $a77e	                jmp asm_common
.a6d6						z_asm_rts:
.a6d6						xt_asm_sbc:
.a6d6		a9 ed		lda #$ed	                lda #$ED
.a6d8		4c 7e a7	jmp $a77e	                jmp asm_common
.a6db						z_asm_sbc:
.a6db						xt_asm_sbc_h:
.a6db		a9 e9		lda #$e9	                lda #$E9
.a6dd		4c 7e a7	jmp $a77e	                jmp asm_common
.a6e0						z_asm_sbc_h:
.a6e0						xt_asm_sbc_x:
.a6e0		a9 fd		lda #$fd	                lda #$FD
.a6e2		4c 7e a7	jmp $a77e	                jmp asm_common
.a6e5						z_asm_sbc_x:
.a6e5						xt_asm_sbc_y:
.a6e5		a9 f9		lda #$f9	                lda #$F9
.a6e7		4c 7e a7	jmp $a77e	                jmp asm_common
.a6ea						z_asm_sbc_y:
.a6ea						xt_asm_sbc_z:
.a6ea		a9 e5		lda #$e5	                lda #$E5
.a6ec		4c 7e a7	jmp $a77e	                jmp asm_common
.a6ef						z_asm_sbc_z:
.a6ef						xt_asm_sbc_zi:
.a6ef		a9 f2		lda #$f2	                lda #$F2
.a6f1		4c 7e a7	jmp $a77e	                jmp asm_common
.a6f4						z_asm_sbc_zi:
.a6f4						xt_asm_sbc_ziy:
.a6f4		a9 f1		lda #$f1	                lda #$F1
.a6f6		4c 7e a7	jmp $a77e	                jmp asm_common
.a6f9						z_asm_sbc_ziy:
.a6f9						xt_asm_sbc_zx:
.a6f9		a9 f5		lda #$f5	                lda #$F5
.a6fb		4c 7e a7	jmp $a77e	                jmp asm_common
.a6fe						z_asm_sbc_zx:
.a6fe						xt_asm_sbc_zxi:
.a6fe		a9 e1		lda #$e1	                lda #$E1
.a700		80 7c		bra $a77e	                bra asm_common  ; <-- limit for BRA instead of JMP
.a702						z_asm_sbc_zxi:
.a702						xt_asm_sec:
.a702		a9 38		lda #$38	                lda #$38
.a704		80 78		bra $a77e	                bra asm_common
.a706						z_asm_sec:
.a706						xt_asm_sed:
.a706		a9 f8		lda #$f8	                lda #$F8
.a708		80 74		bra $a77e	                bra asm_common
.a70a						z_asm_sed:
.a70a						xt_asm_sei:
.a70a		a9 78		lda #$78	                lda #$78
.a70c		80 70		bra $a77e	                bra asm_common
.a70e						z_asm_sei:
.a70e						xt_asm_sta:
.a70e		a9 8d		lda #$8d	                lda #$8D
.a710		80 6c		bra $a77e	                bra asm_common
.a712						z_asm_sta:
.a712						xt_asm_sta_x:
.a712		a9 9d		lda #$9d	                lda #$9D
.a714		80 68		bra $a77e	                bra asm_common
.a716						z_asm_sta_x:
.a716						xt_asm_sta_y:
.a716		a9 99		lda #$99	                lda #$99
.a718		80 64		bra $a77e	                bra asm_common
.a71a						z_asm_sta_y:
.a71a						xt_asm_sta_z:
.a71a		a9 85		lda #$85	                lda #$85
.a71c		80 60		bra $a77e	                bra asm_common
.a71e						z_asm_sta_z:
.a71e						xt_asm_sta_zi:
.a71e		a9 92		lda #$92	                lda #$92
.a720		80 5c		bra $a77e	                bra asm_common
.a722						z_asm_sta_zi:
.a722						xt_asm_sta_ziy:
.a722		a9 91		lda #$91	                lda #$91
.a724		80 58		bra $a77e	                bra asm_common
.a726						z_asm_sta_ziy:
.a726						xt_asm_sta_zx:
.a726		a9 95		lda #$95	                lda #$95
.a728		80 54		bra $a77e	                bra asm_common
.a72a						z_asm_sta_zx:
.a72a						xt_asm_sta_zxi:
.a72a		a9 81		lda #$81	                lda #$81
.a72c		80 50		bra $a77e	                bra asm_common
.a72e						z_asm_sta_zxi:
.a72e						xt_asm_stx:
.a72e		a9 8e		lda #$8e	                lda #$8E
.a730		80 4c		bra $a77e	                bra asm_common
.a732						z_asm_stx:
.a732						xt_asm_stx_z:
.a732		a9 86		lda #$86	                lda #$86
.a734		80 48		bra $a77e	                bra asm_common
.a736						z_asm_stx_z:
.a736						xt_asm_stx_zy:
.a736		a9 96		lda #$96	                lda #$96
.a738		80 44		bra $a77e	                bra asm_common
.a73a						z_asm_stx_zy:
.a73a						xt_asm_sty:
.a73a		a9 8c		lda #$8c	                lda #$8C
.a73c		80 40		bra $a77e	                bra asm_common
.a73e						z_asm_sty:
.a73e						xt_asm_sty_z:
.a73e		a9 84		lda #$84	                lda #$84
.a740		80 3c		bra $a77e	                bra asm_common
.a742						z_asm_sty_z:
.a742						xt_asm_sty_zx:
.a742		a9 94		lda #$94	                lda #$94
.a744		80 38		bra $a77e	                bra asm_common
.a746						z_asm_sty_zx:
.a746						xt_asm_stz:
.a746		a9 9c		lda #$9c	                lda #$9C
.a748		80 34		bra $a77e	                bra asm_common
.a74a						z_asm_stz:
.a74a						xt_asm_stz_x:
.a74a		a9 9e		lda #$9e	                lda #$9E
.a74c		80 30		bra $a77e	                bra asm_common
.a74e						z_asm_stz_x:
.a74e						xt_asm_stz_z:
.a74e		a9 64		lda #$64	                lda #$64
.a750		80 2c		bra $a77e	                bra asm_common
.a752						z_asm_stz_z:
.a752						xt_asm_stz_zx:
.a752		a9 74		lda #$74	                lda #$74
.a754		80 28		bra $a77e	                bra asm_common
.a756						z_asm_stz_zx:
.a756						xt_asm_tax:
.a756		a9 aa		lda #$aa	                lda #$AA
.a758		80 24		bra $a77e	                bra asm_common
.a75a						z_asm_tax:
.a75a						xt_asm_tay:
.a75a		a9 a8		lda #$a8	                lda #$A8
.a75c		80 20		bra $a77e	                bra asm_common
.a75e						z_asm_tay:
.a75e						xt_asm_trb:
.a75e		a9 1c		lda #$1c	                lda #$1C
.a760		80 1c		bra $a77e	                bra asm_common
.a762						z_asm_trb:
.a762						xt_asm_trb_z:
.a762		a9 14		lda #$14	                lda #$14
.a764		80 18		bra $a77e	                bra asm_common
.a766						z_asm_trb_z:
.a766						xt_asm_tsb:
.a766		a9 0c		lda #$0c	                lda #$0C
.a768		80 14		bra $a77e	                bra asm_common
.a76a						z_asm_tsb:
.a76a						xt_asm_tsb_z:
.a76a		a9 04		lda #$04	                lda #$04
.a76c		80 10		bra $a77e	                bra asm_common
.a76e						z_asm_tsb_z:
.a76e						xt_asm_tsx:
.a76e		a9 ba		lda #$ba	                lda #$BA
.a770		80 0c		bra $a77e	                bra asm_common
.a772						z_asm_tsx:
.a772						xt_asm_txa:
.a772		a9 8a		lda #$8a	                lda #$8A
.a774		80 08		bra $a77e	                bra asm_common
.a776						z_asm_txa:
.a776						xt_asm_txs:
.a776		a9 9a		lda #$9a	                lda #$9A
.a778		80 04		bra $a77e	                bra asm_common
.a77a						z_asm_txs:
.a77a						xt_asm_tya:
.a77a		a9 98		lda #$98	                lda #$98
.a77c		80 00		bra $a77e	                bra asm_common
.a77e						z_asm_tya:
.a77e						asm_common:
.a77e		a8		tay		                tay
.a77f		20 2c d6	jsr $d62c	                jsr cmpl_a
.a782		a9 f2		lda #$f2	                lda #<oc_index_table
.a784		85 27		sta $27		                sta tmp2
.a786		a9 b3		lda #$b3	                lda #>oc_index_table
.a788		85 28		sta $28		                sta tmp2+1
.a78a		98		tya		                tya             ; retrieve opcode
.a78b		0a		asl a		                asl             ; times two for offset
.a78c		90 02		bcc $a790	                bcc +
.a78e		e6 28		inc $28		                inc tmp2+1
.a790						+
.a790		a8		tay		                tay             ; use Y as the index
.a791		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB
.a793		85 29		sta $29		                sta tmp3
.a795		c8		iny		                iny
.a796		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB
.a798		85 2a		sta $2a		                sta tmp3+1
.a79a		b2 29		lda ($29)	                lda (tmp3)      ; get "lengths byte"
.a79c		2a		rol a		                rol
.a79d		2a		rol a		                rol
.a79e		2a		rol a		                rol             ; Three times because we go through Carry
.a79f		29 03		and #$03	                and #%00000011
.a7a1		a8		tay		                tay
.a7a2		88		dey		                dey
.a7a3		f0 12		beq $a7b7	                beq _done
.a7a5		20 df d7	jsr $d7df	                jsr underflow_1
.a7a8		b5 00		lda $00,x	                lda 0,x
.a7aa		20 2c d6	jsr $d62c	                jsr cmpl_a      ; does not use Y
.a7ad		88		dey		                dey
.a7ae		f0 05		beq $a7b5	                beq _done_drop
.a7b0		b5 01		lda $01,x	                lda 1,x
.a7b2		20 2c d6	jsr $d62c	                jsr cmpl_a      ; Fall through to _done_drop
.a7b5						_done_drop:
.a7b5		e8		inx		                inx
.a7b6		e8		inx		                inx             ; Fall through to _done
.a7b7						_done:
.a7b7		60		rts		                rts             ; Returns to original caller
.a7b8						xt_asm_push_a:
.a7b8		a0 00		ldy #$00	                ldy #0
.a7ba						_loop:
.a7ba		b9 c8 a7	lda $a7c8,y	                lda asm_push_a_data,y
.a7bd		c9 ff		cmp #$ff	                cmp #$FF
.a7bf		f0 06		beq $a7c7	                beq _done
.a7c1		20 2c d6	jsr $d62c	                jsr cmpl_a      ; does not change Y
.a7c4		c8		iny		                iny
.a7c5		80 f3		bra $a7ba	                bra _loop
.a7c7						_done:
.a7c7						z_asm_push_a:
.a7c7		60		rts		                rts
.a7c8						asm_push_a_data:
>a7c8		ca ca 95 00 74 01		        .byte $CA, $CA, $95, 00, $74, $01
>a7ce		ff				        .byte $FF               ; terminator
.a7cf						xt_asm_back_jump:
.a7cf						z_asm_back_jump:
.a7cf		60		rts		                rts
.a7d0						xt_asm_back_branch:
.a7d0		20 91 8a	jsr $8a91	                jsr xt_here             ; ( addr-l addr-h )
.a7d3		20 3d 8d	jsr $8d3d	                jsr xt_minus            ; ( offset )
.a7d6		3a		dec a		                dea
.a7d7		3a		dec a		                dea
.a7d8						z_asm_back_branch:
.a7d8		60		rts		                rts
.a7d9						assembler_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/ed.asm

.a7d9						xt_ed:
.a7d9		20 dd a7	jsr $a7dd	                jsr ed6502      ; kept in separate file
.a7dc		60		rts		z_ed:           rts
=$0035						ed_head  = tmped    ; pointer to first list element (addr) (2 bytes)
=$0037						ed_cur   = tmped+2  ; current line number (1 is first line) (2 bytes)
=$0039						ed_flags = tmped+4  ; Flags used by ed, where
=$003a						ed_base  = tmped+5  ; used to hold BASE and put it back at the end.
.a7dd						ed6502:
.a7dd		a5 18		lda $18		                lda base
.a7df		85 3a		sta $3a		                sta ed_base
.a7e1		a9 0a		lda #$0a	                lda #10
.a7e3		85 18		sta $18		                sta base
.a7e5		64 35		stz $35		                stz ed_head
.a7e7		64 36		stz $36		                stz ed_head+1
.a7e9		64 37		stz $37		                stz ed_cur
.a7eb		64 38		stz $38		                stz ed_cur+1
.a7ed		64 39		stz $39		                stz ed_flags
.a7ef		20 fd 9d	jsr $9dfd	                jsr xt_zero
.a7f2		20 fd 9d	jsr $9dfd	                jsr xt_zero             ; ( addr-t u-t )
.a7f5		20 69 85	jsr $8569	                jsr xt_cr
.a7f8						ed_input_loop:
.a7f8		a9 81		lda #$81	                lda #%10000001
.a7fa		14 39		trb $39		                trb ed_flags
.a7fc		20 d7 ac	jsr $acd7	                jsr ed_get_input
.a7ff		a5 0e		lda $0e		                lda ciblen
.a801		d0 1f		bne $a822	                bne _command_mode
.a803		ca		dex		                dex
.a804		ca		dex		                dex                     ; ( addr-t u-t ? )
.a805		a5 37		lda $37		                lda ed_cur
.a807		95 00		sta $00,x	                sta 0,x
.a809		a5 38		lda $38		                lda ed_cur+1
.a80b		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t u )
.a80d		a9 80		lda #$80	                lda #%10000000
.a80f		04 39		tsb $39		                tsb ed_flags
.a811		20 42 8e	jsr $8e42	                jsr xt_one_plus         ; ( addr-t u-t u+1 )
.a814		20 f3 ac	jsr $acf3	                jsr ed_is_valid_line
.a817		b0 03		bcs $a81c	                bcs +
.a819		4c c7 ac	jmp $acc7	                jmp ed_error_1drop
.a81c						+
.a81c		20 fd 9d	jsr $9dfd	                jsr xt_zero             ; ( addr-t u-t u+1 0 )
.a81f		4c ed a8	jmp $a8ed	                jmp _line_number_only_from_external
.a822						_command_mode:
.a822		20 fd 9d	jsr $9dfd	                jsr xt_zero             ; parameter 1 is NOS ( addr-t u-t 0 )
.a825		20 fd 9d	jsr $9dfd	                jsr xt_zero             ; parameter 2 is TOS ( addr-t u-t 0 0 )
.a828						_prefix_dot:
.a828		b2 0c		lda ($0c)	                lda (cib)
.a82a		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII '.'
.a82c		d0 3a		bne $a868	                bne _prefix_dollar
.a82e		20 e8 ac	jsr $ace8	                jsr ed_have_text
.a831		a5 37		lda $37		                lda ed_cur
.a833		95 02		sta $02,x	                sta 2,x
.a835		a5 38		lda $38		                lda ed_cur+1
.a837		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.a839		a9 80		lda #$80	                lda #%10000000
.a83b		04 39		tsb $39		                tsb ed_flags
.a83d		a5 0e		lda $0e		                lda ciblen
.a83f		3a		dec a		                dea                     ; sets Z if A was 1
.a840		d0 03		bne $a845	                bne +
.a842		4c ed a8	jmp $a8ed	                jmp _line_number_only_from_external
.a845						+
.a845		ca		dex		                dex
.a846		ca		dex		                dex
.a847		ca		dex		                dex
.a848		ca		dex		                dex
.a849		a5 0c		lda $0c		                lda cib
.a84b		95 02		sta $02,x	                sta 2,x
.a84d		a5 0d		lda $0d		                lda cib+1
.a84f		95 03		sta $03,x	                sta 3,x
.a851		a5 0e		lda $0e		                lda ciblen
.a853		95 00		sta $00,x	                sta 0,x
.a855		a5 0f		lda $0f		                lda ciblen+1
.a857		95 01		sta $01,x	                sta 1,x
.a859		20 36 8e	jsr $8e36	                jsr xt_one_minus        ; ( addr-t u-t para1 0 addr u-1 )
.a85c		20 be 93	jsr $93be	                jsr xt_swap             ; ( addr-t u-t para1 0 u-1 addr )
.a85f		20 42 8e	jsr $8e42	                jsr xt_one_plus         ; ( addr-t u-t para1 0 u-1 addr+1 )
.a862		20 be 93	jsr $93be	                jsr xt_swap             ; ( addr-t u-t para1 0 addr+1 u-1 )
.a865		4c 45 a9	jmp $a945	                jmp _check_for_para2
.a868						_prefix_dollar:
.a868		b2 0c		lda ($0c)	                lda (cib)
.a86a		c9 24		cmp #$24	                cmp #'$'
.a86c		d0 1c		bne $a88a	                bne _prefix_percent
.a86e		20 e8 ac	jsr $ace8	                jsr ed_have_text
.a871		e8		inx		                inx
.a872		e8		inx		                inx                     ; ( addr-t u-t 0 )
.a873		20 15 ad	jsr $ad15	                jsr ed_last_line          ; ( addr-t u-t 0 para1 )
.a876		20 be 93	jsr $93be	                jsr xt_swap             ; SWAP ( addr-t u-t para1 0 )
.a879		a9 80		lda #$80	                lda #%10000000
.a87b		04 39		tsb $39		                tsb ed_flags
.a87d		a5 0e		lda $0e		                lda ciblen
.a87f		3a		dec a		                dea                     ; sets Z if A was 1
.a880		d0 03		bne $a885	                bne +
.a882		4c ed a8	jmp $a8ed	                jmp _line_number_only_from_external
.a885						+
.a885		a0 01		ldy #$01	                ldy #01
.a887		4c c1 a9	jmp $a9c1	                jmp _check_command
.a88a						_prefix_percent:
.a88a		b2 0c		lda ($0c)	                lda (cib)
.a88c		c9 25		cmp #$25	                cmp #'%'                ; ASCII '%'
.a88e		f0 04		beq $a894	                beq _whole_text
.a890		c9 2c		cmp #$2c	                cmp #','                ; ASCII ','
.a892		d0 17		bne $a8ab	                bne _prefix_semicolon
.a894						_whole_text:
.a894		20 e8 ac	jsr $ace8	                jsr ed_have_text
.a897		a9 01		lda #$01	                lda #01
.a899		95 02		sta $02,x	                sta 2,x                 ; LSB of NOS is para 1
.a89b		74 03		stz $03,x	                stz 3,x                 ; ( addr-t u-t para1 0 )
.a89d						_semicolon_entry:
.a89d		e8		inx		                inx
.a89e		e8		inx		                inx                     ; DROP ( addr-t u-t para1 )
.a89f		20 15 ad	jsr $ad15	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.a8a2		a9 80		lda #$80	                lda #%10000000
.a8a4		04 39		tsb $39		                tsb ed_flags
.a8a6		a0 01		ldy #$01	                ldy #01
.a8a8		4c c1 a9	jmp $a9c1	                jmp _check_command
.a8ab						_prefix_semicolon:
.a8ab		b2 0c		lda ($0c)	                lda (cib)
.a8ad		c9 3b		cmp #$3b	                cmp #';'                ; ASCII ';'
.a8af		d0 0d		bne $a8be	                bne _prefix_number
.a8b1		20 e8 ac	jsr $ace8	                jsr ed_have_text
.a8b4		a5 37		lda $37		                lda ed_cur
.a8b6		95 02		sta $02,x	                sta 2,x
.a8b8		a5 38		lda $38		                lda ed_cur+1
.a8ba		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.a8bc		80 df		bra $a89d	                bra _semicolon_entry
.a8be						_prefix_number:
.a8be		20 fd 9d	jsr $9dfd	                jsr xt_zero
.a8c1		20 fd 9d	jsr $9dfd	                jsr xt_zero             ; ( addr-t u-t 0 0 0 0 )
.a8c4		ca		dex		                dex
.a8c5		ca		dex		                dex
.a8c6		ca		dex		                dex
.a8c7		ca		dex		                dex                     ; ( addr-t u-t 0 0 0 0 ? ? )
.a8c8		a5 0c		lda $0c		                lda cib
.a8ca		95 02		sta $02,x	                sta 2,x
.a8cc		a5 0d		lda $0d		                lda cib+1
.a8ce		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t 0 0 0 0 cib ? )
.a8d0		a5 0e		lda $0e		                lda ciblen
.a8d2		95 00		sta $00,x	                sta 0,x
.a8d4		a5 0f		lda $0f		                lda ciblen+1
.a8d6		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 0 0 cib ciblen )
.a8d8		20 5c 94	jsr $945c	                jsr xt_to_number        ; ( addr-t u-t 0 0 ud addr2 u2 )
.a8db		b5 00		lda $00,x	                lda 0,x
.a8dd		15 01		ora $01,x	                ora 1,x
.a8df		d0 24		bne $a905	                bne _have_unconverted_chars
.a8e1		e8		inx		                inx
.a8e2		e8		inx		                inx
.a8e3		e8		inx		                inx
.a8e4		e8		inx		                inx                     ; 2DROP ( addr-t u-t 0 0 ud )
.a8e5		20 46 9e	jsr $9e46	                jsr xt_d_to_s           ; D>S ( addr-t u-t 0 0 u )
.a8e8		20 81 9c	jsr $9c81	                jsr xt_not_rote         ; -ROT ( addr-t u-t u 0 0 )
.a8eb		e8		inx		                inx
.a8ec		e8		inx		                inx                     ; ( addr-t u-t u 0 ) drop through
.a8ed						_line_number_only_from_external:
.a8ed		20 be 93	jsr $93be	                jsr xt_swap             ; ( addr-t u-t 0 u )
.a8f0		20 f3 ac	jsr $acf3	                jsr ed_is_valid_line
.a8f3		b0 03		bcs $a8f8	                bcs +
.a8f5		4c c5 ac	jmp $acc5	                jmp ed_error_2drop
.a8f8						+
.a8f8		20 be 93	jsr $93be	                jsr xt_swap             ; ( addr-t u-t u 0 )
.a8fb		20 82 ad	jsr $ad82	                jsr ed_para1_to_cur
.a8fe		a9 80		lda #$80	                lda #%10000000
.a900		04 39		tsb $39		                tsb ed_flags
.a902		4c a0 ab	jmp $aba0	                jmp ed_cmd_p_from_external
.a905						_have_unconverted_chars:
.a905		20 cb 87	jsr $87cb	                jsr xt_dup              ; ( addr-t u-t 0 0 ud addr2 u2 u2 )
.a908		ca		dex		                dex
.a909		ca		dex		                dex                     ; ( addr-t u-t 0 0 ud addr2 u2 u2 ? )
.a90a		a5 0e		lda $0e		                lda ciblen
.a90c		95 00		sta $00,x	                sta 0,x
.a90e		a5 0f		lda $0f		                lda ciblen+1
.a910		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 ud addr2 u2 u2 ciblen )
.a912		20 0c 89	jsr $890c	                jsr xt_equal            ; ( addr-t u-t 0 0 ud addr2 u2 f )
.a915		b5 00		lda $00,x	                lda 0,x
.a917		15 01		ora $01,x	                ora 1,x
.a919		f0 0e		beq $a929	                beq _no_command_yet
.a91b		8a		txa		                txa
.a91c		18		clc		                clc
.a91d		69 0a		adc #$0a	                adc #10
.a91f		aa		tax		                tax                     ; ( addr-t u-t 0 0 )
.a920		a9 80		lda #$80	                lda #%10000000
.a922		14 39		trb $39		                trb ed_flags
.a924		a0 00		ldy #$00	                ldy #00
.a926		4c c1 a9	jmp $a9c1	                jmp _check_command
.a929						_no_command_yet:
.a929		e8		inx		                inx
.a92a		e8		inx		                inx                     ; ( ... 0 0 ud addr2 u2 )
.a92b		20 fc 94	jsr $94fc	                jsr xt_to_r             ; >R ( ... 0 0 ud addr2 ) (R: u2)
.a92e		20 81 9c	jsr $9c81	                jsr xt_not_rote         ; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.a931		20 46 9e	jsr $9e46	                jsr xt_d_to_s           ; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.a934		b5 00		lda $00,x	                lda 0,x                 ; LSB
.a936		95 06		sta $06,x	                sta 6,x
.a938		b5 01		lda $01,x	                lda 1,x                 ; MSB
.a93a		95 07		sta $07,x	                sta 7,x                 ; ( ... para1 0 addr2 para1 ) (R: u2)
.a93c		e8		inx		                inx
.a93d		e8		inx		                inx                     ; ( addr-t u-t para1 0 addr2 ) (R: u2)
.a93e		20 47 90	jsr $9047	                jsr xt_r_from           ; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.a941		a9 80		lda #$80	                lda #%10000000
.a943		04 39		tsb $39		                tsb ed_flags
.a945						_check_for_para2:
.a945		a1 02		lda ($02,x)	                lda (2,x)
.a947		c9 2c		cmp #$2c	                cmp #','                ; ASCII code for ',' (comma)
.a949		f0 0d		beq $a958	                beq _got_comma
.a94b		38		sec		                sec
.a94c		a5 0e		lda $0e		                lda ciblen
.a94e		f5 00		sbc $00,x	                sbc 0,x
.a950		a8		tay		                tay
.a951		e8		inx		                inx
.a952		e8		inx		                inx
.a953		e8		inx		                inx
.a954		e8		inx		                inx                     ; 2DROP ( addr-t u-t para1 0 )
.a955		4c c1 a9	jmp $a9c1	                jmp _check_command
.a958						_got_comma:
.a958		f6 02		inc $02,x	                inc 2,x
.a95a		d0 02		bne $a95e	                bne +
.a95c		f6 03		inc $03,x	                inc 3,x                 ; ( addr-t u-t para1 0 addr2+1 u2 )
.a95e						+
.a95e		b5 01		lda $01,x	                lda 1,x
.a960		f0 02		beq $a964	                beq +
.a962		d6 01		dec $01,x	                dec 1,x
.a964						+
.a964		d6 00		dec $00,x	                dec 0,x                 ; ( addr-t u-t para1 0 addr2+1 u2-1 )
.a966		a1 02		lda ($02,x)	                lda (2,x)
.a968		c9 24		cmp #$24	                cmp #$24                ; ASCII for '$'
.a96a		d0 14		bne $a980	                bne _para2_not_dollar
.a96c		38		sec		                sec
.a96d		a5 0e		lda $0e		                lda ciblen
.a96f		f5 02		sbc $02,x	                sbc 2,x
.a971		a8		tay		                tay
.a972		c8		iny		                iny
.a973		5a		phy		                phy
.a974		8a		txa		                txa
.a975		18		clc		                clc
.a976		69 06		adc #$06	                adc #06
.a978		aa		tax		                tax                     ; ( addr-t u-t para1 )
.a979		20 15 ad	jsr $ad15	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.a97c		7a		ply		                ply
.a97d		4c c1 a9	jmp $a9c1	                jmp _check_command
.a980						_para2_not_dollar:
.a980		20 fc 94	jsr $94fc	                jsr xt_to_r             ; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.a983		20 fd 9d	jsr $9dfd	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.a986		20 fd 9d	jsr $9dfd	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.a989		20 e4 90	jsr $90e4	                jsr xt_rot              ; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.a98c		20 47 90	jsr $9047	                jsr xt_r_from           ; R> ( ... para1 0 0 0 addr2+1 u2-1)
.a98f		20 cb 87	jsr $87cb	                jsr xt_dup              ; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.a992		20 fc 94	jsr $94fc	                jsr xt_to_r             ; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.a995		20 5c 94	jsr $945c	                jsr xt_to_number        ; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.a998		20 cb 87	jsr $87cb	                jsr xt_dup              ; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.a99b		20 47 90	jsr $9047	                jsr xt_r_from           ; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.a99e		20 0c 89	jsr $890c	                jsr xt_equal            ; = ( ... para1 0 ud addr3 u3 f )
.a9a1		b5 00		lda $00,x	                lda 0,x
.a9a3		15 01		ora $01,x	                ora 1,x
.a9a5		f0 08		beq $a9af	                beq _second_number
.a9a7		8a		txa		                txa
.a9a8		18		clc		                clc
.a9a9		69 0c		adc #$0c	                adc #12
.a9ab		aa		tax		                tax                     ; back to ( addr-t u-t )
.a9ac		4c c9 ac	jmp $acc9	                jmp ed_error
.a9af						_second_number:
.a9af		e8		inx		                inx
.a9b0		e8		inx		                inx                     ; ( addr-t u-t para1 0 ud addr3 u3 )
.a9b1		38		sec		                sec
.a9b2		a5 0e		lda $0e		                lda ciblen
.a9b4		f5 00		sbc $00,x	                sbc 0,x
.a9b6		48		pha		                pha
.a9b7		20 33 95	jsr $9533	                jsr xt_two_drop         ; 2DROP ( addr-t u-t para1 0 ud )
.a9ba		20 46 9e	jsr $9e46	                jsr xt_d_to_s           ; D>S  ( addr-t u-t para1 0 para2 )
.a9bd		20 89 8d	jsr $8d89	                jsr xt_nip              ; NIP ( addr-t u-t para1 para2 )
.a9c0		7a		ply		                ply
.a9c1						_check_command:
.a9c1		24 39		bit $39		                bit ed_flags
.a9c3		30 08		bmi $a9cd	                bmi _check_command_have_arg
.a9c5		a5 37		lda $37		                lda ed_cur
.a9c7		95 02		sta $02,x	                sta 2,x
.a9c9		a5 38		lda $38		                lda ed_cur+1
.a9cb		95 03		sta $03,x	                sta 3,x
.a9cd						_check_command_have_arg:
.a9cd		b1 0c		lda ($0c),y	                lda (cib),y             ; get mystery char from input
.a9cf		85 25		sta $25		                sta tmp1
.a9d1		da		phx		                phx
.a9d2		a2 00		ldx #$00	                ldx #00
.a9d4						_cmd_loop:
.a9d4		bd ad ad	lda $adad,x	                lda ed_cmd_list,x
.a9d7		f0 07		beq $a9e0	                beq _illegal_command    ; zero marks end of list
.a9d9		c5 25		cmp $25		                cmp tmp1
.a9db		f0 07		beq $a9e4	                beq _found_cmd
.a9dd		e8		inx		                inx
.a9de		80 f4		bra $a9d4	                bra _cmd_loop
.a9e0						_illegal_command:
.a9e0		fa		plx		                plx
.a9e1		4c c5 ac	jmp $acc5	                jmp ed_error_2drop
.a9e4						_found_cmd:
.a9e4		8a		txa		                txa
.a9e5		0a		asl a		                asl
.a9e6		aa		tax		                tax                     ; X * 2 for table
.a9e7		7c b8 ad	jmp ($adb8,x)	                jmp (ed_cmd_table,x)
.a9ea						ed_next_command:
.a9ea		e8		inx		                inx
.a9eb		e8		inx		                inx
.a9ec		e8		inx		                inx
.a9ed		e8		inx		                inx                     ; ( addr-t u-t ) Fall through
.a9ee						_next_command_empty:
.a9ee		4c f8 a7	jmp $a7f8	                jmp ed_input_loop
.a9f1						ed_all_done:
.a9f1		64 0e		stz $0e		                stz ciblen
.a9f3		64 0f		stz $0f		                stz ciblen+1
.a9f5		20 33 95	jsr $9533	                jsr xt_two_drop                 ; 2DROP ( addr-t u-t )
.a9f8		a5 3a		lda $3a		                lda ed_base
.a9fa		85 18		sta $18		                sta base
.a9fc		60		rts		                rts
.a9fd						ed_cmd_a:
.a9fd		fa		plx		                plx
.a9fe		e8		inx		                inx
.a9ff		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.aa00						ed_entry_cmd_i:
.aa00						ed_cmd_a_have_para:
.aa00		20 4b ad	jsr $ad4b	                jsr ed_num_to_addr        ;  ( addr-t u-t addr1 )
.aa03		20 69 85	jsr $8569	                jsr xt_cr
.aa06						_next_string_loop:
.aa06		20 d7 ac	jsr $acd7	                jsr ed_get_input
.aa09		b2 0c		lda ($0c)	                lda (cib)
.aa0b		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII for '.'
.aa0d		d0 16		bne $aa25	                bne _add_line
.aa0f		a4 0e		ldy $0e		                ldy ciblen
.aa11		c0 01		cpy #$01	                cpy #01
.aa13		d0 10		bne $aa25	                bne _add_line
.aa15		a4 0f		ldy $0f		                ldy ciblen+1
.aa17		d0 0c		bne $aa25	                bne _add_line
.aa19		e8		inx		                inx
.aa1a		e8		inx		                inx
.aa1b		a9 40		lda #$40	                lda #%01000000
.aa1d		04 39		tsb $39		                tsb ed_flags
.aa1f		20 69 85	jsr $8569	                jsr xt_cr
.aa22		4c f8 a7	jmp $a7f8	                jmp ed_input_loop
.aa25						_add_line:
.aa25		20 cb 87	jsr $87cb	                jsr xt_dup              ; DUP ( addr-t u-t addr1 addr1 )
.aa28		20 91 8a	jsr $8a91	                jsr xt_here             ; HERE ( addr-t u-t addr1 addr1 here )
.aa2b		20 be 93	jsr $93be	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 here addr1 )
.aa2e		20 90 89	jsr $8990	                jsr xt_fetch            ; @  ( addr-t u-t addr1 here addr2 )
.aa31		20 da 83	jsr $83da	                jsr xt_comma            ; ,  ( addr-t u-t addr1 here )
.aa34		20 19 95	jsr $9519	                jsr xt_tuck             ; TUCK ( addr-t u-t here addr1 here )
.aa37		20 be 93	jsr $93be	                jsr xt_swap             ; SWAP ( addr-t u-t here here addr1 )
.aa3a		20 a8 93	jsr $93a8	                jsr xt_store            ; ! ( addr-t u-t here )
.aa3d		20 91 8a	jsr $8a91	                jsr xt_here             ; HERE ( addr-t u-t here here2)
.aa40		a5 00		lda $00		                lda cp
.aa42		18		clc		                clc
.aa43		69 04		adc #$04	                adc #04
.aa45		85 00		sta $00		                sta cp
.aa47		90 02		bcc $aa4b	                bcc +
.aa49		e6 01		inc $01		                inc cp+1
.aa4b						+
.aa4b		e6 37		inc $37		                inc ed_cur
.aa4d		d0 02		bne $aa51	                bne +
.aa4f		e6 38		inc $38		                inc ed_cur+1
.aa51						+
.aa51		20 91 8a	jsr $8a91	                jsr xt_here     ; HERE ( addr-t u-t here here2 here3 )
.aa54		20 cb 87	jsr $87cb	                jsr xt_dup      ; DUP ( addr-t u-t here here2 here3 here3 )
.aa57		ca		dex		                dex
.aa58		ca		dex		                dex             ; ( addr-t u-t here here2 here3 here3 ? )
.aa59		a5 0c		lda $0c		                lda cib
.aa5b		95 00		sta $00,x	                sta 0,x
.aa5d		a5 0d		lda $0d		                lda cib+1
.aa5f		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 here3 cib )
.aa61		20 be 93	jsr $93be	                jsr xt_swap     ; SWAP ( addr-t u-t here here2 here3 cib here3 )
.aa64		ca		dex		                dex
.aa65		ca		dex		                dex             ; ( addr-t u-t here here2 here3 cib here3 ? )
.aa66		a5 0e		lda $0e		                lda ciblen
.aa68		95 00		sta $00,x	                sta 0,x
.aa6a		a5 0f		lda $0f		                lda ciblen+1
.aa6c		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 cib here3 ciblen )
.aa6e		20 59 8d	jsr $8d59	                jsr xt_move     ; ( addr-t u-t here here2 here3 )
.aa71		18		clc		                clc
.aa72		a5 00		lda $00		                lda cp
.aa74		65 0e		adc $0e		                adc ciblen
.aa76		85 00		sta $00		                sta cp
.aa78		90 06		bcc $aa80	                bcc +
.aa7a		a5 01		lda $01		                lda cp+1
.aa7c		65 0f		adc $0f		                adc ciblen+1
.aa7e		85 01		sta $01		                sta cp+1
.aa80						+
.aa80		20 5e 8e	jsr $8e5e	                jsr xt_over             ; OVER ( addr-t u-t here here2 here3 here2 )
.aa83		20 a8 93	jsr $93a8	                jsr xt_store            ; ! ( addr-t u-t here here2 )
.aa86		20 42 8e	jsr $8e42	                jsr xt_one_plus         ; 1+
.aa89		20 42 8e	jsr $8e42	                jsr xt_one_plus         ; 1+ ( addr-t u-t here here2+2 )
.aa8c		20 cb 87	jsr $87cb	                jsr xt_dup              ; DUP ( addr-t u-t here here2+2 here2+2 )
.aa8f		a5 0e		lda $0e		                lda ciblen
.aa91		95 02		sta $02,x	                sta 2,x
.aa93		a5 0f		lda $0f		                lda ciblen+1
.aa95		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t here ciblen here2+2 )
.aa97		20 a8 93	jsr $93a8	                jsr xt_store            ; ! ( addr-t u-t here )
.aa9a		20 69 85	jsr $8569	                jsr xt_cr
.aa9d		4c 06 aa	jmp $aa06	                jmp _next_string_loop
.aaa0						ed_cmd_d:
.aaa0		fa		plx		                plx
.aaa1		20 e8 ac	jsr $ace8	                jsr ed_have_text
.aaa4		20 3d ad	jsr $ad3d	                jsr ed_no_line_zero
.aaa7		b5 00		lda $00,x	                lda 0,x
.aaa9		15 01		ora $01,x	                ora 1,x
.aaab		d0 08		bne $aab5	                bne +
.aaad		20 5e 8e	jsr $8e5e	                jsr xt_over             ; ( addr-t u-t para1 0 para1 )
.aab0		20 f2 aa	jsr $aaf2	                jsr _cmd_d_common       ; ( addr-t u-t para1 0 )
.aab3		80 33		bra $aae8	                bra _cmd_d_done
.aab5						+
.aab5		20 f3 ac	jsr $acf3	                jsr ed_is_valid_line      ; result is in C flag
.aab8		b0 03		bcs $aabd	                bcs _cmd_d_loop
.aaba		4c c5 ac	jmp $acc5	                jmp ed_error_2drop
.aabd						_cmd_d_loop:
.aabd		20 3b 95	jsr $953b	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.aac0		20 7c 8a	jsr $8a7c	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.aac3		b5 00		lda $00,x	                lda 0,x
.aac5		15 01		ora $01,x	                ora 1,x
.aac7		d0 0d		bne $aad6	                bne _cmd_d_done_with_flag
.aac9		e8		inx		                inx
.aaca		e8		inx		                inx                     ; Get rid of the flag from >
.aacb		20 cb 87	jsr $87cb	                jsr xt_dup              ; DUP ( addr-t u-t para1 para2 para2 )
.aace		20 f2 aa	jsr $aaf2	                jsr _cmd_d_common       ; ( addr-t u-t para1 para2 )
.aad1		20 36 8e	jsr $8e36	                jsr xt_one_minus        ; 1- ( addr-t u-t para1 para2-1 )
.aad4		80 e7		bra $aabd	                bra _cmd_d_loop
.aad6						_cmd_d_done_with_flag:
.aad6		e8		inx		                inx                     ; ( addr-t u-t para1 para2 )
.aad7		e8		inx		                inx
.aad8		b5 02		lda $02,x	                lda 2,x
.aada		d0 02		bne $aade	                bne +
.aadc		d6 03		dec $03,x	                dec 3,x
.aade						+
.aade		d6 02		dec $02,x	                dec 2,x
.aae0		b5 02		lda $02,x	                lda 2,x
.aae2		85 37		sta $37		                sta ed_cur
.aae4		b5 03		lda $03,x	                lda 3,x
.aae6		85 38		sta $38		                sta ed_cur+1            ; drop through to _cmd_d_done
.aae8						_cmd_d_done:
.aae8		a9 40		lda #$40	                lda #%01000000
.aaea		04 39		tsb $39		                tsb ed_flags
.aaec		20 69 85	jsr $8569	                jsr xt_cr
.aaef		4c ea a9	jmp $a9ea	                jmp ed_next_command
.aaf2						_cmd_d_common:
.aaf2		20 cb 87	jsr $87cb	                jsr xt_dup              ; DUP ( addr-t u-t u u )
.aaf5		20 4b ad	jsr $ad4b	                jsr ed_num_to_addr        ; ( addr-t u-t u addr )
.aaf8		20 90 89	jsr $8990	                jsr xt_fetch            ; @ ( addr-t u-t u addr1 )
.aafb		20 be 93	jsr $93be	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 u )
.aafe		20 36 8e	jsr $8e36	                jsr xt_one_minus        ; 1- ( addr-t u-t addr1 u-1 )
.ab01		20 4b ad	jsr $ad4b	                jsr ed_num_to_addr        ; ( addr-t u-t addr1 addr-1 )
.ab04		20 a8 93	jsr $93a8	                jsr xt_store            ; ! ( addr-t u-t )
.ab07		60		rts		                rts
.ab08						ed_cmd_equ:
.ab08		fa		plx		                plx
.ab09		a5 35		lda $35		                lda ed_head
.ab0b		05 36		ora $36		                ora ed_head+1
.ab0d		d0 08		bne $ab17	                bne _cmd_equ_have_text
.ab0f		ca		dex		                dex
.ab10		ca		dex		                dex
.ab11		74 00		stz $00,x	                stz 0,x
.ab13		74 01		stz $01,x	                stz 1,x                 ; ( addr-t u-t para1 para2 0 )
.ab15		80 21		bra $ab38	                bra _cmd_equ_done
.ab17						_cmd_equ_have_text:
.ab17		20 3d ad	jsr $ad3d	                jsr ed_no_line_zero
.ab1a		24 39		bit $39		                bit ed_flags
.ab1c		30 0c		bmi $ab2a	                bmi _cmd_equ_have_para
.ab1e		ca		dex		                dex
.ab1f		ca		dex		                dex                     ; ( addr-t u-t para1 para2 ? )
.ab20		a5 37		lda $37		                lda ed_cur
.ab22		95 00		sta $00,x	                sta 0,x
.ab24		a5 38		lda $38		                lda ed_cur+1
.ab26		95 01		sta $01,x	                sta 1,x
.ab28		80 0e		bra $ab38	                bra _cmd_equ_done       ; ( addr-t u-t para1 para2 cur )
.ab2a						_cmd_equ_have_para:
.ab2a		b5 00		lda $00,x	                lda 0,x
.ab2c		15 01		ora $01,x	                ora 1,x
.ab2e		d0 05		bne $ab35	                bne _cmd_equ_two_paras
.ab30		20 5e 8e	jsr $8e5e	                jsr xt_over             ; ( addr-t u-t para1 para2 para1)
.ab33		80 03		bra $ab38	                bra _cmd_equ_done
.ab35						_cmd_equ_two_paras:
.ab35		20 cb 87	jsr $87cb	                jsr xt_dup              ; ( addr-t u-t para1 para2 para2) drop through
.ab38						_cmd_equ_done:
.ab38		20 69 85	jsr $8569	                jsr xt_cr               ; number goes on new line
.ab3b		20 70 96	jsr $9670	                jsr xt_u_dot            ; ( addr-t u-t para1 para2 )
.ab3e		20 69 85	jsr $8569	                jsr xt_cr
.ab41		4c ea a9	jmp $a9ea	                jmp ed_next_command
.ab44						ed_cmd_f:
.ab44		fa		plx		                plx
.ab45		24 39		bit $39		                bit ed_flags
.ab47		30 17		bmi $ab60	                bmi _cmd_f_have_para
.ab49		20 69 85	jsr $8569	                jsr xt_cr
.ab4c		20 fc 94	jsr $94fc	                jsr xt_to_r             ; >R   ( addr-t u-t 0 ) ( R: 0 )
.ab4f		20 e4 90	jsr $90e4	                jsr xt_rot              ; ROT  ( u-t 0 addr-t ) ( R: 0 )
.ab52		20 cb 87	jsr $87cb	                jsr xt_dup              ; DUP  ( u-t 0 addr-t addr-t ) ( R: 0 )
.ab55		20 70 96	jsr $9670	                jsr xt_u_dot            ; U.   ( u-t 0 addr-t ) ( R: 0 )
.ab58		20 81 9c	jsr $9c81	                jsr xt_not_rote         ; -ROT ( addr-t u-t 0 ) ( R: 0 )
.ab5b		20 47 90	jsr $9047	                jsr xt_r_from           ; R>   ( addr-t u-t 0 0 )
.ab5e		80 11		bra $ab71	                bra _cmd_f_done
.ab60						_cmd_f_have_para:
.ab60		20 5e 8e	jsr $8e5e	                jsr xt_over
.ab63		20 69 85	jsr $8569	                jsr xt_cr
.ab66		20 70 96	jsr $9670	                jsr xt_u_dot
.ab69		b5 02		lda $02,x	                lda 2,x
.ab6b		95 06		sta $06,x	                sta 6,x
.ab6d		b5 03		lda $03,x	                lda 3,x
.ab6f		95 07		sta $07,x	                sta 7,x                 ; fall through to _cmd_f_done
.ab71						_cmd_f_done:
.ab71		20 69 85	jsr $8569	                jsr xt_cr
.ab74		4c ea a9	jmp $a9ea	                jmp ed_next_command
.ab77						ed_cmd_i:
.ab77		fa		plx		                plx
.ab78		e8		inx		                inx
.ab79		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.ab7a		24 39		bit $39		                bit ed_flags
.ab7c		30 08		bmi $ab86	                bmi _cmd_i_have_para
.ab7e		a5 37		lda $37		                lda ed_cur
.ab80		95 00		sta $00,x	                sta 0,x
.ab82		a5 38		lda $38		                lda ed_cur+1
.ab84		95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.ab86						_cmd_i_have_para:
.ab86		b5 00		lda $00,x	                lda 0,x
.ab88		15 01		ora $01,x	                ora 1,x
.ab8a		f0 09		beq $ab95	                beq _cmd_i_done
.ab8c		20 36 8e	jsr $8e36	                jsr xt_one_minus        ; 1-  ( addr-t u-t para1-1 )
.ab8f		20 fd 9d	jsr $9dfd	                jsr xt_zero             ; 0   ( addr-t u-t para1-1 0 )
.ab92		20 05 8d	jsr $8d05	                jsr xt_max              ; MAX ( addr-t u-t para1-1 | 0 )
.ab95						_cmd_i_done:
.ab95		4c 00 aa	jmp $aa00	                jmp ed_entry_cmd_i
.ab98						ed_cmd_n:
.ab98		fa		plx		                plx
.ab99		a9 01		lda #$01	                lda #%00000001
.ab9b		04 39		tsb $39		                tsb ed_flags
.ab9d		80 05		bra $aba4	                bra ed_cmd_p_entry_for_cmd_n
.ab9f						ed_cmd_p:
.ab9f		fa		plx		                plx
.aba0						ed_cmd_p_from_external:
.aba0		a9 01		lda #$01	                lda #%00000001
.aba2		14 39		trb $39		                trb ed_flags
.aba4						ed_cmd_p_entry_for_cmd_n:
.aba4		20 e8 ac	jsr $ace8	                jsr ed_have_text
.aba7		20 3d ad	jsr $ad3d	                jsr ed_no_line_zero
.abaa		20 69 85	jsr $8569	                jsr xt_cr
.abad		b5 00		lda $00,x	                lda 0,x
.abaf		15 01		ora $01,x	                ora 1,x
.abb1		d0 10		bne $abc3	                bne _cmd_p_loop
.abb3		b5 02		lda $02,x	                lda 2,x
.abb5		85 37		sta $37		                sta ed_cur
.abb7		b5 03		lda $03,x	                lda 3,x
.abb9		85 38		sta $38		                sta ed_cur+1
.abbb		20 5e 8e	jsr $8e5e	                jsr xt_over             ; OVER ( addr-t u-t para1 para2 para1 )
.abbe		20 ec ab	jsr $abec	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.abc1		80 26		bra $abe9	                bra _cmd_p_all_done
.abc3						_cmd_p_loop:
.abc3		20 3b 95	jsr $953b	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.abc6		20 7c 8a	jsr $8a7c	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.abc9		b5 00		lda $00,x	                lda 0,x
.abcb		15 01		ora $01,x	                ora 1,x
.abcd		d0 10		bne $abdf	                bne _cmd_p_done
.abcf		e8		inx		                inx
.abd0		e8		inx		                inx                     ; Get rid of the flag from >
.abd1		20 5e 8e	jsr $8e5e	                jsr xt_over             ; ( addr-t u-t para1 para2 para1 )
.abd4		20 ec ab	jsr $abec	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.abd7		f6 02		inc $02,x	                inc 2,x
.abd9		d0 02		bne $abdd	                bne +
.abdb		f6 03		inc $03,x	                inc 3,x
.abdd						+
.abdd		80 e4		bra $abc3	                bra _cmd_p_loop
.abdf						_cmd_p_done:
.abdf		e8		inx		                inx
.abe0		e8		inx		                inx                     ; fall through to _cmp_p_all_done
.abe1		b5 00		lda $00,x	                lda 0,x
.abe3		85 37		sta $37		                sta ed_cur
.abe5		b5 01		lda $01,x	                lda 1,x
.abe7		85 38		sta $38		                sta ed_cur+1
.abe9						_cmd_p_all_done:
.abe9		4c ea a9	jmp $a9ea	                jmp ed_next_command
.abec						_cmd_p_common:
.abec		a5 39		lda $39		                lda ed_flags
.abee		4a		lsr a		                lsr                     ; bit 0 now in carry
.abef		90 0b		bcc $abfc	                bcc _cmd_p_common_no_num
.abf1		20 cb 87	jsr $87cb	                jsr xt_dup              ; DUP ( addr-t u-t para1 para1 )
.abf4		20 70 96	jsr $9670	                jsr xt_u_dot            ; U. ( addr-t u-t para1 )
.abf7		a9 09		lda #$09	                lda #$09                 ; ASCII for Tab
.abf9		20 3b 88	jsr $883b	                jsr emit_a
.abfc						_cmd_p_common_no_num:
.abfc		20 4b ad	jsr $ad4b	                jsr ed_num_to_addr        ; ( addr-t u-t addr )
.abff		20 8b ad	jsr $ad8b	                jsr ed_print_addr
.ac02		60		rts		                rts
.ac03						ed_cmd_q:
.ac03		fa		plx		                plx
.ac04		24 39		bit $39		                bit ed_flags            ; bit 6 is change flag
.ac06		50 03		bvc $ac0b	                bvc +
.ac08		4c c5 ac	jmp $acc5	                jmp ed_error_2drop
.ac0b						+
.ac0b		4c f1 a9	jmp $a9f1	                jmp ed_all_done            ; can't fall thru because of PLX
.ac0e						ed_cmd_qq:
.ac0e		fa		plx		                plx
.ac0f		4c f1 a9	jmp $a9f1	                jmp ed_all_done
.ac12						ed_cmd_w:
.ac12		fa		plx		                plx
.ac13		20 e8 ac	jsr $ace8	                jsr ed_have_text
.ac16		24 39		bit $39		                bit ed_flags
.ac18		30 13		bmi $ac2d	                bmi _cmd_w_have_para
.ac1a		b5 06		lda $06,x	                lda 6,x
.ac1c		15 07		ora $07,x	                ora 7,x
.ac1e		d0 03		bne $ac23	                bne +
.ac20		4c c5 ac	jmp $acc5	                jmp ed_error_2drop
.ac23						+
.ac23		b5 06		lda $06,x	                lda 6,x
.ac25		95 02		sta $02,x	                sta 2,x
.ac27		b5 07		lda $07,x	                lda 7,x
.ac29		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t addr-t ? )
.ac2b		80 08		bra $ac35	                bra _cmd_w_para_ready
.ac2d						_cmd_w_have_para:
.ac2d		b5 02		lda $02,x	                lda 2,x
.ac2f		95 06		sta $06,x	                sta 6,x
.ac31		b5 03		lda $03,x	                lda 3,x
.ac33		95 07		sta $07,x	                sta 7,x                 ; drop through to _cmd_w_para_ready
.ac35						_cmd_w_para_ready:
.ac35		a9 35		lda #$35	                lda #<ed_head
.ac37		95 00		sta $00,x	                sta 0,x
.ac39		a9 00		lda #$00	                lda #>ed_head
.ac3b		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t addr-t addr-h )
.ac3d		20 5e 8e	jsr $8e5e	                jsr xt_over             ; OVER ( addr-t u-t addr-t addr-h addr-t )
.ac40		20 fc 94	jsr $94fc	                jsr xt_to_r             ; >R ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.ac43						_cmd_w_loop:
.ac43		20 90 89	jsr $8990	                jsr xt_fetch            ; @ ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.ac46		b5 00		lda $00,x	                lda 0,x
.ac48		15 01		ora $01,x	                ora 1,x
.ac4a		f0 55		beq $aca1	                beq _cmd_w_eol
.ac4c		20 3b 95	jsr $953b	                jsr xt_two_dup          ; 2DUP ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.ac4f		20 25 96	jsr $9625	                jsr xt_two_to_r         ; 2>R  ( addr-t addr-1 ) (R: ... )
.ac52		20 42 8e	jsr $8e42	                jsr xt_one_plus         ; 1+ ( addr-t addr1+1 ) (R: ... )
.ac55		20 42 8e	jsr $8e42	                jsr xt_one_plus         ; 1+ ( addr-t addr1+2 ) (R: ... )
.ac58		20 cb 87	jsr $87cb	                jsr xt_dup              ; DUP ( addr-t addr1+2 addr1+2 ) ( R: ... )
.ac5b		20 90 89	jsr $8990	                jsr xt_fetch            ; @ ( addr-t addr1+2 addr-s ) ( R: ... )
.ac5e		20 be 93	jsr $93be	                jsr xt_swap             ; SWAP ( addr-t addr-s addr1+2 ) ( R: ... )
.ac61		20 42 8e	jsr $8e42	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+1 ) (R: ... )
.ac64		20 42 8e	jsr $8e42	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+2 ) (R: ... )
.ac67		20 90 89	jsr $8990	                jsr xt_fetch            ; @ ( addr-t addr-s u-s ) ( R: ... )
.ac6a		20 81 9c	jsr $9c81	                jsr xt_not_rote         ; -ROT ( u-s addr-t addr-s ) ( R: ... )
.ac6d		20 be 93	jsr $93be	                jsr xt_swap             ; SWAP ( u-s addr-s addr-t ) ( R: ... )
.ac70		20 e4 90	jsr $90e4	                jsr xt_rot              ; ROT (addr-s addr-t u-s ) ( R: ... )
.ac73		20 cb 87	jsr $87cb	                jsr xt_dup              ; DUP (addr-s addr-t u-s u-s ) ( R: ... )
.ac76		20 fc 94	jsr $94fc	                jsr xt_to_r             ; >R (addr-s addr-t u-s ) ( R: ... u-s )
.ac79		20 59 8d	jsr $8d59	                jsr xt_move             ; MOVE ( )( R: addr-t addr-1 addr-t )
.ac7c		20 47 90	jsr $9047	                jsr xt_r_from           ; R> ( u-s )  ( R: addr-t addr-h addr-t )
.ac7f		20 ab 95	jsr $95ab	                jsr xt_two_r_from       ; 2R> ( u-s addr-t addr-h ) ( R: addr-t )
.ac82		20 81 9c	jsr $9c81	                jsr xt_not_rote         ; -ROT ( addr-h u-s addr-t ) ( R: addr-t )
.ac85		20 ac 8f	jsr $8fac	                jsr xt_plus             ; + ( addr-h addr-t1 ) ( R: addr-t )
.ac88		20 cb 87	jsr $87cb	                jsr xt_dup              ; DUP ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.ac8b		ca		dex		                dex
.ac8c		ca		dex		                dex                     ; ( addr-h addr-t1 addr-t1 ? ) ( R: addr-t )
.ac8d		a9 0a		lda #$0a	                lda #AscLF              ; ASCII for LF
.ac8f		95 00		sta $00,x	                sta 0,x
.ac91		74 01		stz $01,x	                stz 1,x                 ; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.ac93		20 be 93	jsr $93be	                jsr xt_swap             ; SWAP ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.ac96		20 a8 93	jsr $93a8	                jsr xt_store            ; ! ( addr-h addr-t1 ) ( R: addr-t )
.ac99		20 42 8e	jsr $8e42	                jsr xt_one_plus         ; 1+ ( addr-h addr-t1+1 ) ( R: addr-t )
.ac9c		20 be 93	jsr $93be	                jsr xt_swap             ; SWAP ( addr-t1+1 addr-h ) ( R: addr-t )
.ac9f		80 a2		bra $ac43	                bra _cmd_w_loop
.aca1						_cmd_w_eol:
.aca1		20 be 93	jsr $93be	                jsr xt_swap             ; SWAP ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.aca4		20 47 90	jsr $9047	                jsr xt_r_from           ; R> ( addr-t u-t addr-n addr-tn addr-t )
.aca7		20 3d 8d	jsr $8d3d	                jsr xt_minus            ; - ( addr-t u-t addr-n u )
.acaa		b5 00		lda $00,x	                lda 0,x
.acac		95 04		sta $04,x	                sta 4,x
.acae		b5 01		lda $01,x	                lda 1,x
.acb0		95 05		sta $05,x	                sta 5,x                 ; ( addr-t u addr-n u )
.acb2		20 69 85	jsr $8569	                jsr xt_cr
.acb5		20 cb 87	jsr $87cb	                jsr xt_dup              ; DUP ( addr-t u addr-n u u )
.acb8		20 70 96	jsr $9670	                jsr xt_u_dot            ; U. ( addr-t u addr-n u )
.acbb		20 69 85	jsr $8569	                jsr xt_cr
.acbe		a9 40		lda #$40	                lda #%01000000
.acc0		14 39		trb $39		                trb ed_flags
.acc2		4c ea a9	jmp $a9ea	                jmp ed_next_command
.acc5						ed_error_2drop:
.acc5		e8		inx		                inx
.acc6		e8		inx		                inx                     ; drop through to _error_1drop
.acc7						ed_error_1drop:
.acc7		e8		inx		                inx
.acc8		e8		inx		                inx                     ; drop through to _error
.acc9						ed_error:
.acc9		20 69 85	jsr $8569	                jsr xt_cr
.accc		a9 3f		lda #$3f	                lda #'?'
.acce		20 3b 88	jsr $883b	                jsr emit_a
.acd1		20 69 85	jsr $8569	                jsr xt_cr
.acd4		4c f8 a7	jmp $a7f8	                jmp ed_input_loop
.acd7						ed_get_input:
.acd7		20 95 90	jsr $9095	                jsr xt_refill           ;  ( addr-t u-t f )
.acda		b5 00		lda $00,x	                lda 0,x
.acdc		15 01		ora $01,x	                ora 1,x
.acde		d0 05		bne $ace5	                bne +
.ace0		7a		ply		                ply
.ace1		7a		ply		                ply
.ace2		4c c7 ac	jmp $acc7	                jmp ed_error_1drop
.ace5						+
.ace5		e8		inx		                inx
.ace6		e8		inx		                inx
.ace7		60		rts		                rts
.ace8						ed_have_text:
.ace8		a5 35		lda $35		                lda ed_head
.acea		05 36		ora $36		                ora ed_head+1
.acec		d0 04		bne $acf2	                bne +
.acee		7a		ply		                ply
.acef		7a		ply		                ply
.acf0		80 d7		bra $acc9	                bra ed_error
.acf2						+
.acf2		60		rts		                rts
.acf3						ed_is_valid_line:
.acf3		38		sec		                sec                             ; default is legal line number
.acf4		b5 00		lda $00,x	                lda 0,x
.acf6		15 01		ora $01,x	                ora 1,x
.acf8		f0 19		beq $ad13	                beq _is_valid_line_nope_zero    ; ( n )
.acfa		20 cb 87	jsr $87cb	                jsr xt_dup                      ; DUP ( n n )
.acfd		20 15 ad	jsr $ad15	                jsr ed_last_line                  ; ( n n last )
.ad00		20 be 93	jsr $93be	                jsr xt_swap                     ; SWAP ( n last n )
.ad03		20 95 8b	jsr $8b95	                jsr xt_less_than                ; < ( n f )
.ad06		b5 00		lda $00,x	                lda 0,x                         ; 0 flag is good
.ad08		15 01		ora $01,x	                ora 1,x
.ad0a		d0 05		bne $ad11	                bne _is_valid_line_too_small
.ad0c		e8		inx		                inx
.ad0d		e8		inx		                inx                     ; DROP flag ( n )
.ad0e		38		sec		                sec                     ; Who knows what's happened to C by now
.ad0f		80 03		bra $ad14	                bra _is_valid_line_done ; only one exit from this routine
.ad11						_is_valid_line_too_small:
.ad11		e8		inx		                inx
.ad12		e8		inx		                inx                     ; drop through to _is_valid_line_zero
.ad13						_is_valid_line_nope_zero:
.ad13		18		clc		                clc                     ; drop through to _is_valid_line_done
.ad14						_is_valid_line_done:
.ad14		60		rts		                rts
.ad15						ed_last_line:
.ad15		64 25		stz $25		                stz tmp1
.ad17		64 26		stz $26		                stz tmp1+1
.ad19		ca		dex		                dex
.ad1a		ca		dex		                dex                     ; ( ? )
.ad1b		a9 35		lda #$35	                lda #<ed_head
.ad1d		95 00		sta $00,x	                sta 0,x
.ad1f		a9 00		lda #$00	                lda #>ed_head
.ad21		95 01		sta $01,x	                sta 1,x                 ; ( addr )
.ad23						_last_line_loop:
.ad23		20 90 89	jsr $8990	                jsr xt_fetch            ; ( addr | 0 )
.ad26		b5 00		lda $00,x	                lda 0,x
.ad28		15 01		ora $01,x	                ora 1,x
.ad2a		f0 08		beq $ad34	                beq _last_line_done
.ad2c		e6 25		inc $25		                inc tmp1
.ad2e		d0 02		bne $ad32	                bne +
.ad30		e6 26		inc $26		                inc tmp1+1
.ad32						+
.ad32		80 ef		bra $ad23	                bra _last_line_loop
.ad34						_last_line_done:
.ad34		a5 25		lda $25		                lda tmp1
.ad36		95 00		sta $00,x	                sta 0,x
.ad38		a5 26		lda $26		                lda tmp1+1
.ad3a		95 01		sta $01,x	                sta 1,x                 ; ( u )
.ad3c		60		rts		                rts
.ad3d						ed_no_line_zero:
.ad3d		b5 02		lda $02,x	                lda 2,x
.ad3f		15 03		ora $03,x	                ora 3,x
.ad41		d0 07		bne $ad4a	                bne _no_line_zero_done
.ad43		24 39		bit $39		                bit ed_flags
.ad45		10 03		bpl $ad4a	                bpl _no_line_zero_done
.ad47		4c c5 ac	jmp $acc5	                jmp ed_error_2drop
.ad4a						_no_line_zero_done:
.ad4a		60		rts		                rts
.ad4b						ed_num_to_addr:
.ad4b		ca		dex		                dex
.ad4c		ca		dex		                dex                     ; ( u ? )
.ad4d		a9 35		lda #$35	                lda #<ed_head
.ad4f		95 00		sta $00,x	                sta 0,x
.ad51		a9 00		lda #$00	                lda #>ed_head
.ad53		95 01		sta $01,x	                sta 1,x                 ; ( u addr-h )
.ad55		b5 02		lda $02,x	                lda 2,x
.ad57		15 03		ora $03,x	                ora 3,x
.ad59		d0 05		bne $ad60	                bne _num_to_addr_loop
.ad5b		20 89 8d	jsr $8d89	                jsr xt_nip              ; ( addr-h )
.ad5e		80 21		bra $ad81	                bra _num_to_addr_done
.ad60						_num_to_addr_loop:
.ad60		20 90 89	jsr $8990	                jsr xt_fetch            ; @ ( u addr1 )
.ad63		b5 00		lda $00,x	                lda 0,x
.ad65		15 01		ora $01,x	                ora 1,x
.ad67		d0 05		bne $ad6e	                bne +
.ad69		20 89 8d	jsr $8d89	                jsr xt_nip              ; NIP ( addr1 )
.ad6c		80 13		bra $ad81	                bra _num_to_addr_done
.ad6e						+
.ad6e		20 be 93	jsr $93be	                jsr xt_swap             ; SWAP ( addr1 u )
.ad71		20 36 8e	jsr $8e36	                jsr xt_one_minus        ; 1- ( addr1 u-1 )
.ad74		b5 00		lda $00,x	                lda 0,x
.ad76		15 01		ora $01,x	                ora 1,x
.ad78		f0 05		beq $ad7f	                beq _num_to_addr_finished
.ad7a		20 be 93	jsr $93be	                jsr xt_swap             ; SWAP ( u-1 addr1 )
.ad7d		80 e1		bra $ad60	                bra _num_to_addr_loop
.ad7f						_num_to_addr_finished:
.ad7f		e8		inx		                inx
.ad80		e8		inx		                inx                     ; ( addr )
.ad81						_num_to_addr_done:
.ad81		60		rts		                rts
.ad82						ed_para1_to_cur:
.ad82		b5 02		lda $02,x	                lda 2,x
.ad84		85 37		sta $37		                sta ed_cur
.ad86		b5 03		lda $03,x	                lda 3,x
.ad88		85 38		sta $38		                sta ed_cur+1
.ad8a		60		rts		                rts
.ad8b						ed_print_addr:
.ad8b		20 42 8e	jsr $8e42	                jsr xt_one_plus
.ad8e		20 42 8e	jsr $8e42	                jsr xt_one_plus         ; ( addr+2 )
.ad91		20 cb 87	jsr $87cb	                jsr xt_dup              ; ( addr+2 addr+2 )
.ad94		20 42 8e	jsr $8e42	                jsr xt_one_plus
.ad97		20 42 8e	jsr $8e42	                jsr xt_one_plus         ; ( addr+2 addr+4 )
.ad9a		20 90 89	jsr $8990	                jsr xt_fetch            ; ( addr+2 u-s )
.ad9d		20 be 93	jsr $93be	                jsr xt_swap             ; ( u-s addr+2 )
.ada0		20 90 89	jsr $8990	                jsr xt_fetch            ; ( u-s addr-s )
.ada3		20 be 93	jsr $93be	                jsr xt_swap             ; ( addr-s u-s )
.ada6		20 45 96	jsr $9645	                jsr xt_type
.ada9		20 69 85	jsr $8569	                jsr xt_cr
.adac		60		rts		                rts
>adad		61 66 69 64 70 6e 3d 77		ed_cmd_list:    .text "afidpn=wqQ", 0
>adb5		71 51 00
.adb8						ed_cmd_table:
>adb8		fd a9 44 ab 77 ab a0 aa		                .word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>adc0		9f ab 98 ab
>adc4		08 ab 12 ac 03 ac 0e ac		                .word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.adcc						ed6502_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/block.asm

.adcc						xt_blk:
.adcc		a9 04		lda #$04	                lda #blk_offset
.adce		4c 89 d6	jmp $d689	                jmp push_upvar_tos
.add1						z_blk:
.add1						xt_blkbuffer:
.add1		ca		dex		                dex
.add2		ca		dex		                dex
.add3		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.add5		b1 08		lda ($08),y	                lda (up),y
.add7		95 00		sta $00,x	                sta 0,x
.add9		c8		iny		                iny             ; Move along to the next byte
.adda		b1 08		lda ($08),y	                lda (up),y
.addc		95 01		sta $01,x	                sta 1,x
.adde		60		rts		z_blkbuffer:    rts
.addf						xt_block:
.addf		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.ade1		b1 08		lda ($08),y	                lda (up),y
.ade3		d5 00		cmp $00,x	                cmp 0,x
.ade5		d0 0f		bne $adf6	                bne _not_in_buffer
.ade7		c8		iny		                iny
.ade8		b1 08		lda ($08),y	                lda (up),y
.adea		d5 01		cmp $01,x	                cmp 1,x
.adec		d0 08		bne $adf6	                bne _not_in_buffer
.adee		a0 30		ldy #$30	                ldy #buffstatus_offset
.adf0		b1 08		lda ($08),y	                lda (up),y
.adf2		29 01		and #$01	                and #1          ; Check the in-use flag (bit 0)
.adf4		d0 30		bne $ae26	                bne _done       ; It's already in the buffer and in use.
.adf6						_not_in_buffer:
.adf6		a0 30		ldy #$30	                ldy #buffstatus_offset
.adf8		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.adfa		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.adfc		d0 0c		bne $ae0a	                bne _buffer_available ; Unused or not dirty = available
.adfe		20 d1 ad	jsr $add1	                jsr xt_blkbuffer
.ae01		20 db af	jsr $afdb	                jsr xt_buffblocknum
.ae04		20 90 89	jsr $8990	                jsr xt_fetch
.ae07		20 c8 af	jsr $afc8	                jsr xt_block_write
.ae0a						_buffer_available:
.ae0a		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.ae0c		b5 00		lda $00,x	                lda 0,x
.ae0e		91 08		sta ($08),y	                sta (up),y
.ae10		c8		iny		                iny
.ae11		b5 01		lda $01,x	                lda 1,x
.ae13		91 08		sta ($08),y	                sta (up),y
.ae15		20 d1 ad	jsr $add1	                jsr xt_blkbuffer
.ae18		20 be 93	jsr $93be	                jsr xt_swap
.ae1b		20 b0 af	jsr $afb0	                jsr xt_block_read
.ae1e		a9 01		lda #$01	                lda #1
.ae20		a0 30		ldy #$30	                ldy #buffstatus_offset
.ae22		91 08		sta ($08),y	                sta (up),y
.ae24		ca		dex		                dex
.ae25		ca		dex		                dex
.ae26						_done:
.ae26		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.ae28		b1 08		lda ($08),y	                lda (up),y
.ae2a		95 00		sta $00,x	                sta 0,x
.ae2c		c8		iny		                iny
.ae2d		b1 08		lda ($08),y	                lda (up),y
.ae2f		95 01		sta $01,x	                sta 1,x
.ae31		60		rts		z_block:        rts
.ae32						xt_block_c65_init:
.ae32		a9 ff		lda #$ff	                lda #$ff
.ae34		8d 11 f0	sta $f011	                sta io_blk_status
.ae37		a9 00		lda #$00	                lda #$0
.ae39		8d 10 f0	sta $f010	                sta io_blk_action
.ae3c		ad 11 f0	lda $f011	                lda io_blk_status      ; $0 if OK, $ff otherwise
.ae3f		49 ff		eor #$ff	                eor #$ff            ; invert to forth true/false
.ae41		ca		dex		                dex
.ae42		ca		dex		                dex
.ae43		95 00		sta $00,x	                sta 0,x             ; true ($ff) if OK, false (0) otherwise
.ae45		95 01		sta $01,x	                sta 1,x
.ae47		ca		dex		                dex
.ae48		ca		dex		                dex
.ae49		a9 6c		lda #$6c	                lda #<c65_blk_read
.ae4b		95 00		sta $00,x	                sta 0,x
.ae4d		a9 ae		lda #$ae	                lda #>c65_blk_read
.ae4f		95 01		sta $01,x	                sta 1,x
.ae51		20 be af	jsr $afbe	                jsr xt_block_read_vector
.ae54		20 a8 93	jsr $93a8	                jsr xt_store
.ae57		ca		dex		                dex
.ae58		ca		dex		                dex
.ae59		a9 68		lda #$68	                lda #<c65_blk_write
.ae5b		95 00		sta $00,x	                sta 0,x
.ae5d		a9 ae		lda #$ae	                lda #>c65_blk_write
.ae5f		95 01		sta $01,x	                sta 1,x
.ae61		20 d6 af	jsr $afd6	                jsr xt_block_write_vector
.ae64		20 a8 93	jsr $93a8	                jsr xt_store
.ae67						z_block_c65_init:
.ae67		60		rts		                rts
.ae68		a0 02		ldy #$02	c65_blk_write:  ldy #2
.ae6a		80 02		bra $ae6e	                bra c65_blk_rw
.ae6c		a0 01		ldy #$01	c65_blk_read:   ldy #1
.ae6e		b5 00		lda $00,x	c65_blk_rw:     lda 0,x                 ; ( addr blk# )
.ae70		8d 12 f0	sta $f012	                sta io_blk_number
.ae73		b5 01		lda $01,x	                lda 1,x
.ae75		8d 13 f0	sta $f013	                sta io_blk_number+1
.ae78		b5 02		lda $02,x	                lda 2,x
.ae7a		8d 14 f0	sta $f014	                sta io_blk_buffer
.ae7d		b5 03		lda $03,x	                lda 3,x
.ae7f		8d 15 f0	sta $f015	                sta io_blk_buffer+1
.ae82		8c 10 f0	sty $f010	                sty io_blk_action       ; trigger the r/w
.ae85		e8		inx		                inx                     ; clean up stack
.ae86		e8		inx		                inx
.ae87		e8		inx		                inx
.ae88		e8		inx		                inx
.ae89		60		rts		                rts
.ae8a						xt_block_ramdrive_init:
.ae8a		20 df d7	jsr $d7df	                jsr underflow_1
.ae8d		20 9b a1	jsr $a19b	                jsr sliteral_runtime
>ae90		98 ae 18 01			                .word ramdrive_code, ramdrive_code_end-ramdrive_code
.ae94		20 28 8a	jsr $8a28	                jsr xt_evaluate
.ae97						z_block_ramdrive_init:
.ae97		60		rts		                rts
.ae98						ramdrive_code:
>ae98		62 61 73 65 20 40 20 73		        .text "base @ swap decimal"
>aea0		77 61 70 20 64 65 63 69 6d 61 6c
>aeab		20 31 30 32 34 20 2a		        .text " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
>aeb2		20 64 75 70			        .text " dup"    ; ( Save a copy for formatting it at the end )
>aeb6		20 62 75 66 66 65 72 3a		        .text " buffer: ramdrive" ; ( Create ramdrive )
>aebe		20 72 61 6d 64 72 69 76 65
>aec7		20 3a 20 62 6c 6f 63 6b		        .text " : block-read-ramdrive"  ; ( addr u -- )
>aecf		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65
>aedd		20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + swap 1024 move ;"
>aee5		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>aef5		73 77 61 70 20 31 30 32 34 20 6d 6f 76 65 20 3b
>af05		20 3a 20 62 6c 6f 63 6b		        .text " : block-write-ramdrive" ; ( addr u -- )
>af0d		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65
>af1c		20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + 1024 move ;"
>af24		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>af34		31 30 32 34 20 6d 6f 76 65 20 3b
>af3f		20 27 20 62 6c 6f 63 6b		        .text " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
>af47		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65 20 62
>af57		6c 6f 63 6b 2d 72 65 61 64 2d 76 65 63 74 6f 72
>af67		20 21
>af69		20 27 20 62 6c 6f 63 6b		        .text " ' block-write-ramdrive block-write-vector !"
>af71		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65 20
>af81		62 6c 6f 63 6b 2d 77 72 69 74 65 2d 76 65 63 74
>af91		6f 72 20 21
>af95		20 72 61 6d 64 72 69 76		        .text " ramdrive swap blank base !"
>af9d		65 20 73 77 61 70 20 62 6c 61 6e 6b 20 62 61 73
>afad		65 20 21
.afb0						ramdrive_code_end:
.afb0						xt_block_read:
.afb0		a0 32		ldy #$32	                ldy #blockread_offset
.afb2		b1 08		lda ($08),y	                lda (up),y
.afb4		85 25		sta $25		                sta tmp1
.afb6		c8		iny		                iny
.afb7		b1 08		lda ($08),y	                lda (up),y
.afb9		85 26		sta $26		                sta tmp1+1
.afbb		6c 25 00	jmp ($0025)	                jmp (tmp1)
.afbe						z_block_read:
.afbe						xt_block_read_vector:
.afbe		a9 32		lda #$32	                lda #blockread_offset
.afc0		4c 89 d6	jmp $d689	                jmp push_upvar_tos
.afc3						z_block_read_vector:
.afc3						xt_block_word_error:
.afc3		a9 0c		lda #$0c	                lda #err_blockwords
.afc5		4c f5 d7	jmp $d7f5	                jmp error       ; no RTS needed
.afc8						z_block_word_error:
.afc8						xt_block_write:
.afc8		a0 34		ldy #$34	                ldy #blockwrite_offset
.afca		b1 08		lda ($08),y	                lda (up),y
.afcc		85 25		sta $25		                sta tmp1
.afce		c8		iny		                iny
.afcf		b1 08		lda ($08),y	                lda (up),y
.afd1		85 26		sta $26		                sta tmp1+1
.afd3		6c 25 00	jmp ($0025)	                jmp (tmp1)
.afd6						z_block_write:
.afd6						xt_block_write_vector:
.afd6		a9 34		lda #$34	                lda #blockwrite_offset
.afd8		4c 89 d6	jmp $d689	                jmp push_upvar_tos
.afdb						z_block_write_vector:
.afdb						xt_buffblocknum:
.afdb		a9 2e		lda #$2e	                lda #buffblocknum_offset
.afdd		4c 89 d6	jmp $d689	                jmp push_upvar_tos
.afe0						z_buffblocknum:
.afe0						xt_buffer:
.afe0		a0 30		ldy #$30	                ldy #buffstatus_offset
.afe2		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.afe4		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.afe6		d0 0c		bne $aff4	                bne _buffer_available ; Unused or not dirty = available
.afe8		20 d1 ad	jsr $add1	                jsr xt_blkbuffer
.afeb		20 db af	jsr $afdb	                jsr xt_buffblocknum
.afee		20 90 89	jsr $8990	                jsr xt_fetch
.aff1		20 c8 af	jsr $afc8	                jsr xt_block_write
.aff4						_buffer_available:
.aff4		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.aff6		b5 00		lda $00,x	                lda 0,x
.aff8		91 08		sta ($08),y	                sta (up),y
.affa		c8		iny		                iny
.affb		b5 01		lda $01,x	                lda 1,x
.affd		91 08		sta ($08),y	                sta (up),y
.afff		a9 01		lda #$01	                lda #1
.b001		a0 30		ldy #$30	                ldy #buffstatus_offset
.b003		91 08		sta ($08),y	                sta (up),y
.b005						_done:
.b005		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.b007		b1 08		lda ($08),y	                lda (up),y
.b009		95 00		sta $00,x	                sta 0,x
.b00b		c8		iny		                iny
.b00c		b1 08		lda ($08),y	                lda (up),y
.b00e		95 01		sta $01,x	                sta 1,x
.b010		60		rts		z_buffer:       rts
.b011						xt_buffstatus:
.b011		a9 30		lda #$30	                lda #buffstatus_offset
.b013		4c 89 d6	jmp $d689	                jmp push_upvar_tos
.b016						z_buffstatus:
.b016						xt_empty_buffers:
.b016		a0 30		ldy #$30	                ldy #buffstatus_offset
.b018		a9 00		lda #$00	                lda #0
.b01a		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.b01c						z_empty_buffers:
.b01c		60		rts		                rts
.b01d						xt_flush:
.b01d		20 78 b0	jsr $b078	                jsr xt_save_buffers
.b020		a0 30		ldy #$30	                ldy #buffstatus_offset
.b022		a9 00		lda #$00	                lda #0
.b024		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.b026						z_flush:
.b026		60		rts		                rts
.b027						xt_list:
.b027		20 df d7	jsr $d7df	                jsr underflow_1
.b02a		20 93 b0	jsr $b093	                jsr xt_scr
.b02d		20 a8 93	jsr $93a8	                jsr xt_store
.b030		20 33 b1	jsr $b133	                jsr xt_editor_l
.b033		60		rts		z_list:         rts
.b034						xt_load:
.b034		20 df d7	jsr $d7df	                jsr underflow_1
.b037		a0 05		ldy #$05	                ldy #blk_offset+1
.b039		b1 08		lda ($08),y	                lda (up),y
.b03b		48		pha		                pha
.b03c		88		dey		                dey
.b03d		b1 08		lda ($08),y	                lda (up),y
.b03f		48		pha		                pha
.b040		b5 00		lda $00,x	                lda 0,x
.b042		91 08		sta ($08),y	                sta (up),y
.b044		c8		iny		                iny
.b045		b5 01		lda $01,x	                lda 1,x
.b047		91 08		sta ($08),y	                sta (up),y
.b049		20 df ad	jsr $addf	                jsr xt_block
.b04c		ca		dex		                dex
.b04d		ca		dex		                dex
.b04e		a9 04		lda #$04	                lda #4
.b050		95 01		sta $01,x	                sta 1,x
.b052		74 00		stz $00,x	                stz 0,x
.b054		20 22 8a	jsr $8a22	                jsr load_evaluate
.b057		a0 04		ldy #$04	                ldy #blk_offset
.b059		68		pla		                pla
.b05a		91 08		sta ($08),y	                sta (up),y
.b05c		c8		iny		                iny
.b05d		68		pla		                pla
.b05e		91 08		sta ($08),y	                sta (up),y
.b060		88		dey		                dey
.b061		11 08		ora ($08),y	                ora (up),y
.b063		f0 12		beq $b077	                beq _done
.b065		ca		dex		                dex
.b066		ca		dex		                dex
.b067		a0 04		ldy #$04	                ldy #blk_offset
.b069		b1 08		lda ($08),y	                lda (up),y
.b06b		95 00		sta $00,x	                sta 0,x
.b06d		c8		iny		                iny
.b06e		b1 08		lda ($08),y	                lda (up),y
.b070		95 01		sta $01,x	                sta 1,x
.b072		20 df ad	jsr $addf	                jsr xt_block
.b075		e8		inx		                inx
.b076		e8		inx		                inx
.b077						_done:
.b077		60		rts		z_load:         rts
.b078						xt_save_buffers:
.b078		a0 30		ldy #$30	                ldy #buffstatus_offset
.b07a		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.b07c		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.b07e		d0 12		bne $b092	                bne _done       ; Either not used or not dirty = done!
.b080		20 d1 ad	jsr $add1	                jsr xt_blkbuffer
.b083		20 db af	jsr $afdb	                jsr xt_buffblocknum
.b086		20 90 89	jsr $8990	                jsr xt_fetch
.b089		20 c8 af	jsr $afc8	                jsr xt_block_write
.b08c		a9 01		lda #$01	                lda #1
.b08e		a0 30		ldy #$30	                ldy #buffstatus_offset
.b090		91 08		sta ($08),y	                sta (up),y
.b092						_done:
.b092		60		rts		z_save_buffers: rts
.b093						xt_scr:
.b093		a9 06		lda #$06	                lda #scr_offset
.b095		4c 89 d6	jmp $d689	                jmp push_upvar_tos
.b098						z_scr:
.b098						xt_thru:
.b098		20 e4 d7	jsr $d7e4	                jsr underflow_2
.b09b		b5 01		lda $01,x	                lda 1,x
.b09d		48		pha		                pha
.b09e		b5 00		lda $00,x	                lda 0,x
.b0a0		48		pha		                pha
.b0a1		e8		inx		                inx
.b0a2		e8		inx		                inx
.b0a3						_thru_loop:
.b0a3		b5 01		lda $01,x	                lda 1,x
.b0a5		48		pha		                pha
.b0a6		b5 00		lda $00,x	                lda 0,x
.b0a8		48		pha		                pha
.b0a9		20 34 b0	jsr $b034	                jsr xt_load
.b0ac		68		pla		                pla
.b0ad		85 25		sta $25		                sta tmp1
.b0af		68		pla		                pla
.b0b0		85 26		sta $26		                sta tmp1+1
.b0b2		68		pla		                pla
.b0b3		85 27		sta $27		                sta tmp2
.b0b5		68		pla		                pla
.b0b6		85 28		sta $28		                sta tmp2+1
.b0b8		c5 26		cmp $26		                cmp tmp1+1
.b0ba		d0 08		bne $b0c4	                bne _next_screen
.b0bc		a5 27		lda $27		                lda tmp2        ; Compare the LSB
.b0be		c5 25		cmp $25		                cmp tmp1
.b0c0		d0 02		bne $b0c4	                bne _next_screen
.b0c2		80 18		bra $b0dc	                bra _done       ; We just did the last screen.
.b0c4						_next_screen:
.b0c4		a5 28		lda $28		                lda tmp2+1
.b0c6		48		pha		                pha
.b0c7		a5 27		lda $27		                lda tmp2
.b0c9		48		pha		                pha
.b0ca		e6 25		inc $25		                inc tmp1
.b0cc		d0 02		bne $b0d0	                bne +
.b0ce		e6 26		inc $26		                inc tmp1+1
.b0d0						+
.b0d0		ca		dex		                dex
.b0d1		ca		dex		                dex
.b0d2		a5 25		lda $25		                lda tmp1
.b0d4		95 00		sta $00,x	                sta 0,x
.b0d6		a5 26		lda $26		                lda tmp1+1
.b0d8		95 01		sta $01,x	                sta 1,x
.b0da		80 c7		bra $b0a3	                bra _thru_loop
.b0dc						_done:
.b0dc		60		rts		z_thru:         rts
.b0dd						xt_update:
.b0dd		a0 30		ldy #$30	                ldy #buffstatus_offset
.b0df		b1 08		lda ($08),y	                lda (up),y
.b0e1		09 02		ora #$02	                ora #2          ; Turn on dirty flag (bit 2)
.b0e3		91 08		sta ($08),y	                sta (up),y
.b0e5		60		rts		z_update:       rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/editor.asm

.b0e6						xt_editor_screen_helper:
.b0e6		20 cb 87	jsr $87cb	                jsr xt_dup
.b0e9		20 93 b0	jsr $b093	                jsr xt_scr
.b0ec		20 a8 93	jsr $93a8	                jsr xt_store
.b0ef		20 e0 af	jsr $afe0	                jsr xt_buffer
.b0f2						z_editor_screen_helper:
.b0f2		60		rts		                rts
.b0f3						xt_editor_enter_screen:
.b0f3		20 e6 b0	jsr $b0e6	                jsr xt_editor_screen_helper
.b0f6		20 c5 87	jsr $87c5	                jsr xt_drop
.b0f9		64 35		stz $35		                stz ed_head
.b0fb						_prompt_loop:
.b0fb		ca		dex		                dex
.b0fc		ca		dex		                dex
.b0fd		a5 35		lda $35		                lda ed_head
.b0ff		95 00		sta $00,x	                sta 0,x
.b101		74 01		stz $01,x	                stz 1,x
.b103		20 c6 b1	jsr $b1c6	                jsr xt_editor_o
.b106		e6 35		inc $35		                inc ed_head
.b108		a9 10		lda #$10	                lda #16
.b10a		c5 35		cmp $35		                cmp ed_head
.b10c		d0 ed		bne $b0fb	                bne _prompt_loop
.b10e						z_editor_enter_screen:
.b10e		60		rts		                rts
.b10f						xt_editor_erase_screen:
.b10f		20 e6 b0	jsr $b0e6	                jsr xt_editor_screen_helper
.b112		ca		dex		                dex
.b113		ca		dex		                dex
.b114		74 00		stz $00,x	                stz 0,x
.b116		a9 04		lda #$04	                lda #4          ; 4 in MSB makes 1024 ($400).
.b118		95 01		sta $01,x	                sta 1,x
.b11a		20 28 89	jsr $8928	                jsr xt_blank
.b11d		20 dd b0	jsr $b0dd	                jsr xt_update
.b120						z_editor_erase_screen:
.b120		60		rts		                rts
.b121						xt_editor_el:
.b121		20 ad b1	jsr $b1ad	                jsr xt_editor_line
.b124		ca		dex		                dex
.b125		ca		dex		                dex
.b126		a9 40		lda #$40	                lda #64
.b128		95 00		sta $00,x	                sta 0,x
.b12a		74 01		stz $01,x	                stz 1,x
.b12c		20 28 89	jsr $8928	                jsr xt_blank
.b12f		20 dd b0	jsr $b0dd	                jsr xt_update
.b132		60		rts		z_editor_el:    rts
.b133						xt_editor_l:
.b133		ca		dex		                dex             ; Put SCR on the stack.
.b134		ca		dex		                dex
.b135		a0 06		ldy #$06	                ldy #scr_offset
.b137		b1 08		lda ($08),y	                lda (up),y
.b139		95 00		sta $00,x	                sta 0,x
.b13b		c8		iny		                iny
.b13c		b1 08		lda ($08),y	                lda (up),y
.b13e		95 01		sta $01,x	                sta 1,x
.b140		20 df ad	jsr $addf	                jsr xt_block    ; Get the current screen.
.b143		20 69 85	jsr $8569	                jsr xt_cr
.b146		80 08		bra $b150	                bra _after_screen_msg
.b148						_screen_msg:
>b148		53 63 72 65 65 6e 20 23		                .text "Screen #"
.b150						_after_screen_msg:
.b150		20 9b a1	jsr $a19b	                jsr sliteral_runtime
>b153		48 b1 08 00			                .word _screen_msg, _after_screen_msg-_screen_msg
.b157		20 45 96	jsr $9645	                jsr xt_type
.b15a		20 93 b0	jsr $b093	                jsr xt_scr
.b15d		20 90 89	jsr $8990	                jsr xt_fetch
.b160		ca		dex		                dex
.b161		ca		dex		                dex
.b162		a9 04		lda #$04	                lda #4          ; four spaces
.b164		95 00		sta $00,x	                sta 0,x
.b166		74 01		stz $01,x	                stz 1,x
.b168		20 7c 96	jsr $967c	                jsr xt_u_dot_r
.b16b		64 29		stz $29		                stz tmp3
.b16d						_line_loop:
.b16d		20 69 85	jsr $8569	                jsr xt_cr
.b170		ca		dex		                dex
.b171		ca		dex		                dex
.b172		ca		dex		                dex
.b173		ca		dex		                dex
.b174		74 03		stz $03,x	                stz 3,x
.b176		a5 29		lda $29		                lda tmp3
.b178		95 02		sta $02,x	                sta 2,x
.b17a		74 01		stz $01,x	                stz 1,x
.b17c		a9 02		lda #$02	                lda #2
.b17e		95 00		sta $00,x	                sta 0,x
.b180		20 7c 96	jsr $967c	                jsr xt_u_dot_r
.b183		20 39 93	jsr $9339	                jsr xt_space
.b186		20 cb 87	jsr $87cb	                jsr xt_dup
.b189		ca		dex		                dex
.b18a		ca		dex		                dex
.b18b		a9 40		lda #$40	                lda #64
.b18d		95 00		sta $00,x	                sta 0,x
.b18f		74 01		stz $01,x	                stz 1,x
.b191		20 45 96	jsr $9645	                jsr xt_type
.b194		18		clc		                clc
.b195		a9 40		lda #$40	                lda #64
.b197		75 00		adc $00,x	                adc 0,x
.b199		95 00		sta $00,x	                sta 0,x
.b19b		90 02		bcc $b19f	                bcc +
.b19d		f6 01		inc $01,x	                inc 1,x
.b19f						+
.b19f		e6 29		inc $29		                inc tmp3
.b1a1		a5 29		lda $29		                lda tmp3
.b1a3		c9 10		cmp #$10	                cmp #16
.b1a5		d0 c6		bne $b16d	                bne _line_loop
.b1a7		20 69 85	jsr $8569	                jsr xt_cr
.b1aa		e8		inx		                inx
.b1ab		e8		inx		                inx
.b1ac		60		rts		z_editor_l:            rts
.b1ad						xt_editor_line:
.b1ad		20 df d7	jsr $d7df	                jsr underflow_1
.b1b0		a0 06		ldy #$06	                ldy #6          ; *64 is same as left shift 6 times.
.b1b2						_shift_tos_left:
.b1b2		16 00		asl $00,x	                asl 0,x         ; Shift TOS to the left
.b1b4		36 01		rol $01,x	                rol 1,x         ; ROL brings MSb from lower byte.
.b1b6		88		dey		                dey
.b1b7		d0 f9		bne $b1b2	                bne _shift_tos_left
.b1b9		20 93 b0	jsr $b093	                jsr xt_scr
.b1bc		20 90 89	jsr $8990	                jsr xt_fetch
.b1bf		20 df ad	jsr $addf	                jsr xt_block
.b1c2		20 ac 8f	jsr $8fac	                jsr xt_plus
.b1c5		60		rts		z_editor_line:  rts
.b1c6						xt_editor_o:
.b1c6		20 69 85	jsr $8569	                jsr xt_cr
.b1c9		20 cb 87	jsr $87cb	                jsr xt_dup
.b1cc		20 c8 9d	jsr $9dc8	                jsr xt_two
.b1cf		20 7c 96	jsr $967c	                jsr xt_u_dot_r
.b1d2		20 39 93	jsr $9339	                jsr xt_space
.b1d5		a9 2a		lda #$2a	                lda #'*'
.b1d7		20 3b 88	jsr $883b	                jsr emit_a
.b1da		20 39 93	jsr $9339	                jsr xt_space
.b1dd		20 ad b1	jsr $b1ad	                jsr xt_editor_line
.b1e0		20 cb 87	jsr $87cb	                jsr xt_dup      ; Save a copy of the line address for later.
.b1e3		ca		dex		                dex
.b1e4		ca		dex		                dex
.b1e5		a9 40		lda #$40	                lda #64         ; chars/line
.b1e7		95 00		sta $00,x	                sta 0,x
.b1e9		74 01		stz $01,x	                stz 1,x
.b1eb		20 e6 80	jsr $80e6	                jsr xt_accept
.b1ee		20 cb 87	jsr $87cb	                jsr xt_dup
.b1f1		20 81 9c	jsr $9c81	                jsr xt_not_rote ; -rot
.b1f4		20 ac 8f	jsr $8fac	                jsr xt_plus
.b1f7		ca		dex		                dex
.b1f8		ca		dex		                dex
.b1f9		a9 40		lda #$40	                lda #64         ; chars/line
.b1fb		95 00		sta $00,x	                sta 0,x
.b1fd		74 01		stz $01,x	                stz 1,x
.b1ff		20 e4 90	jsr $90e4	                jsr xt_rot
.b202		20 3d 8d	jsr $8d3d	                jsr xt_minus
.b205		20 28 89	jsr $8928	                jsr xt_blank
.b208		20 dd b0	jsr $b0dd	                jsr xt_update
.b20b		60		rts		z_editor_o:     rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/wordlist.asm

.b20c						xt_also:
.b20c		20 37 b2	jsr $b237	                jsr xt_get_order
.b20f		20 5e 8e	jsr $8e5e	                jsr xt_over
.b212		20 be 93	jsr $93be	                jsr xt_swap
.b215		20 42 8e	jsr $8e42	                jsr xt_one_plus
.b218		20 40 b3	jsr $b340	                jsr xt_set_order
.b21b		60		rts		z_also:         rts
.b21c						xt_definitions:
.b21c		a0 23		ldy #$23	                ldy #search_order_offset    ; Transfer byte variable
.b21e		b1 08		lda ($08),y	                lda (up),y                  ; SEARCH_ORDER[0] to
.b220		a0 08		ldy #$08	                ldy #current_offset         ; byte variable CURRENT.
.b222		91 08		sta ($08),y	                sta (up),y
.b224		60		rts		z_definitions:  rts
.b225						xt_forth:
.b225		a0 23		ldy #$23	                ldy #search_order_offset
.b227		a9 00		lda #$00	                lda #0          ; The WID for Forth is 0.
.b229		91 08		sta ($08),y	                sta (up),y
.b22b						z_forth:
.b22b		60		rts		                rts
.b22c						xt_get_current:
.b22c		ca		dex		                dex
.b22d		ca		dex		                dex
.b22e		a0 08		ldy #$08	                ldy #current_offset
.b230		b1 08		lda ($08),y	                lda (up),y
.b232		95 00		sta $00,x	                sta 0,x         ; CURRENT is a byte variable
.b234		74 01		stz $01,x	                stz 1,x         ; so the MSB is zero.
.b236		60		rts		z_get_current:  rts
.b237						xt_get_order:
.b237		a0 22		ldy #$22	                ldy #num_order_offset
.b239		b1 08		lda ($08),y	                lda (up),y
.b23b		85 25		sta $25		                sta tmp1
.b23d		f0 16		beq $b255	                beq _done       ; If zero, there are no wordlists.
.b23f						_loop:
.b23f		c6 25		dec $25		                dec tmp1        ; Count down by bytes.
.b241		a9 23		lda #$23	                lda #search_order_offset
.b243		18		clc		                clc
.b244		65 25		adc $25		                adc tmp1
.b246		a8		tay		                tay
.b247		ca		dex		                dex
.b248		ca		dex		                dex
.b249		b1 08		lda ($08),y	                lda (up),y
.b24b		95 00		sta $00,x	                sta 0,x         ; Search order array is bytes, so
.b24d		74 01		stz $01,x	                stz 1,x         ; put a zero in the high byte.
.b24f		a9 00		lda #$00	                lda #0
.b251		c5 25		cmp $25		                cmp tmp1
.b253		d0 ea		bne $b23f	                bne _loop
.b255						_done:
.b255		ca		dex		                dex
.b256		ca		dex		                dex
.b257		a0 22		ldy #$22	                ldy #num_order_offset
.b259		b1 08		lda ($08),y	                lda (up),y
.b25b		95 00		sta $00,x	                sta 0,x
.b25d		74 01		stz $01,x	                stz 1,x         ; We only support 8 wordlists.
.b25f		60		rts		z_get_order:    rts
.b260						xt_only:
.b260		20 10 95	jsr $9510	                jsr xt_true
.b263		20 40 b3	jsr $b340	                jsr xt_set_order
.b266		60		rts		z_only:         rts
.b267						xt_order:
.b267		20 69 85	jsr $8569	                jsr xt_cr
.b26a		20 37 b2	jsr $b237	                jsr xt_get_order        ; ( wid_n ... wid_1 n )
.b26d		b5 00		lda $00,x	                lda 0,x                 ; assumes no more than 255 wordlists
.b26f		f0 1e		beq $b28f	                beq _drop_done
.b271						_have_wordlists:
.b271		a8		tay		                tay
.b272						_loop:
.b272		e8		inx		                inx
.b273		e8		inx		                inx                     ; DROP, now ( wid_n ... wid_1 )
.b274		b5 00		lda $00,x	                lda 0,x
.b276		5a		phy		                phy
.b277		20 92 b2	jsr $b292	                jsr order_print_wid_string   ; internal helper function
.b27a		7a		ply		                ply
.b27b		88		dey		                dey
.b27c		d0 f4		bne $b272	                bne _loop
.b27e		20 39 93	jsr $9339	                jsr xt_space
.b281		20 39 93	jsr $9339	                jsr xt_space
.b284		20 2c b2	jsr $b22c	                jsr xt_get_current      ; ( wid )
.b287		b5 00		lda $00,x	                lda 0,x
.b289		20 92 b2	jsr $b292	                jsr order_print_wid_string
.b28c		20 69 85	jsr $8569	                jsr xt_cr
.b28f						_drop_done:
.b28f		e8		inx		                inx
.b290		e8		inx		                inx
.b291						z_order:
.b291		60		rts		                rts
.b292						order_print_wid_string:
.b292		c9 04		cmp #$04	                cmp #4
.b294		90 09		bcc $b29f	                bcc _output_string      ; less than 4, print a real string
.b296		ca		dex		                dex
.b297		ca		dex		                dex
.b298		95 00		sta $00,x	                sta 0,x
.b29a		74 01		stz $01,x	                stz 1,x
.b29c		4c 70 96	jmp $9670	                jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
.b29f						_output_string:
.b29f		a8		tay		                tay
.b2a0		b9 a6 b2	lda $b2a6,y	                lda _wid_data,y
.b2a3		4c 1b d8	jmp $d81b	                jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
.b2a6						_wid_data:
>b2a6		04				        .byte str_wid_forth            ; WID 0: "Forth"
>b2a7		05				        .byte str_wid_editor           ; WID 1: "Editor"
>b2a8		06				        .byte str_wid_assembler        ; WID 2: "Assembler"
>b2a9		07				        .byte str_wid_root             ; WID 3: "Root"
.b2aa						xt_previous:
.b2aa		20 37 b2	jsr $b237	                jsr xt_get_order
.b2ad		20 89 8d	jsr $8d89	                jsr xt_nip
.b2b0		20 36 8e	jsr $8e36	                jsr xt_one_minus
.b2b3		20 40 b3	jsr $b340	                jsr xt_set_order
.b2b6		60		rts		z_previous:     rts
.b2b7						xt_root_wordlist:
.b2b7		ca		dex		                dex             ; The WID for the Root wordlist is 3.
.b2b8		ca		dex		                dex
.b2b9		a9 03		lda #$03	                lda #3
.b2bb		95 00		sta $00,x	                sta 0,x
.b2bd		74 01		stz $01,x	                stz 1,x
.b2bf						z_root_wordlist:
.b2bf		60		rts		                rts
.b2c0						xt_search_wordlist:
.b2c0		20 e9 d7	jsr $d7e9	                jsr underflow_3
.b2c3		a5 08		lda $08		                lda up
.b2c5		18		clc		                clc
.b2c6		69 0a		adc #$0a	                adc #wordlists_offset
.b2c8		85 27		sta $27		                sta tmp2
.b2ca		a5 09		lda $09		                lda up+1
.b2cc		69 00		adc #$00	                adc #0          ; Adding carry
.b2ce		85 28		sta $28		                sta tmp2+1
.b2d0		b5 00		lda $00,x	                lda 0,x
.b2d2		0a		asl a		                asl             ; Convert wid to offset in cells (x2)
.b2d3		65 27		adc $27		                adc tmp2
.b2d5		85 27		sta $27		                sta tmp2
.b2d7		90 02		bcc $b2db	                bcc +
.b2d9		e6 28		inc $28		                inc tmp2+1      ; Propagate carry if needed.
.b2db						+
.b2db		e8		inx		                inx
.b2dc		e8		inx		                inx
.b2dd		b5 00		lda $00,x	                lda 0,x
.b2df		15 01		ora $01,x	                ora 1,x
.b2e1		f0 4e		beq $b331	                beq _done
.b2e3		a5 27		lda $27		                lda tmp2
.b2e5		05 28		ora $28		                ora tmp2+1
.b2e7		f0 48		beq $b331	                beq _done
.b2e9		b2 27		lda ($27)	                lda (tmp2)              ; nt of first word in Dictionary
.b2eb		85 25		sta $25		                sta tmp1
.b2ed		e6 27		inc $27		                inc tmp2                ; Move to the upper byte
.b2ef		d0 02		bne $b2f3	                bne +
.b2f1		e6 28		inc $28		                inc tmp2+1
.b2f3						+
.b2f3		b2 27		lda ($27)	                lda (tmp2)
.b2f5		85 26		sta $26		                sta tmp1+1
.b2f7		20 af d6	jsr $d6af	                jsr find_header_name
.b2fa		f0 31		beq $b32d	                beq _fail_done
.b2fc		e8		inx		                inx
.b2fd		e8		inx		                inx
.b2fe		a5 25		lda $25		                lda tmp1
.b300		95 00		sta $00,x	                sta 0,x
.b302		a5 26		lda $26		                lda tmp1+1
.b304		95 01		sta $01,x	                sta 1,x
.b306		20 cb 87	jsr $87cb	                jsr xt_dup              ; ( nt nt )
.b309		20 3a 9c	jsr $9c3a	                jsr xt_name_to_int      ; ( nt xt )
.b30c		20 be 93	jsr $93be	                jsr xt_swap             ; ( xt nt )
.b30f		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.b311		f6 00		inc $00,x	                inc 0,x
.b313		d0 02		bne $b317	                bne +
.b315		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.b317						+
.b317		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.b319		29 04		and #$04	                and #IM
.b31b		d0 08		bne $b325	                bne _immediate          ; bit set, we're immediate
.b31d		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.b31f		95 00		sta $00,x	                sta 0,x
.b321		95 01		sta $01,x	                sta 1,x
.b323		80 0e		bra $b333	                bra _done_nodrop
.b325						_immediate:
.b325		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.b327		95 00		sta $00,x	                sta 0,x
.b329		74 01		stz $01,x	                stz 1,x
.b32b		80 06		bra $b333	                bra _done_nodrop
.b32d						_fail_done:
.b32d		74 02		stz $02,x	                stz 2,x         ; failure flag
.b32f		74 03		stz $03,x	                stz 3,x
.b331						_done:
.b331		e8		inx		                inx
.b332		e8		inx		                inx
.b333						_done_nodrop:
.b333						z_search_wordlist:
.b333		60		rts		                rts
.b334						xt_set_current:
.b334		20 df d7	jsr $d7df	                jsr underflow_1
.b337		a0 08		ldy #$08	                ldy #current_offset
.b339		b5 00		lda $00,x	                lda 0,x         ; CURRENT is byte variable
.b33b		91 08		sta ($08),y	                sta (up),y      ; so only the LSB is used.
.b33d		e8		inx		                inx
.b33e		e8		inx		                inx
.b33f		60		rts		z_set_current:  rts
.b340						xt_set_order:
.b340		a9 ff		lda #$ff	                lda #$FF
.b342		d5 01		cmp $01,x	                cmp 1,x
.b344		d0 12		bne $b358	                bne _start
.b346		d5 00		cmp $00,x	                cmp 0,x
.b348		d0 0e		bne $b358	                bne _start
.b34a		ca		dex		                dex             ; Make room for the count.
.b34b		ca		dex		                dex
.b34c		74 03		stz $03,x	                stz 3,x         ; ROOT-WORDLIST is 3
.b34e		a9 03		lda #$03	                lda #3
.b350		95 02		sta $02,x	                sta 2,x
.b352		74 01		stz $01,x	                stz 1,x         ; Count is 1.
.b354		a9 01		lda #$01	                lda #1
.b356		95 00		sta $00,x	                sta 0,x
.b358						_start:
.b358		a0 22		ldy #$22	                ldy #num_order_offset
.b35a		b5 00		lda $00,x	                lda 0,x
.b35c		91 08		sta ($08),y	                sta (up),y      ; #ORDER is a byte variable.
.b35e		85 25		sta $25		                sta tmp1        ; Save a copy for zero check and looping.
.b360		e8		inx		                inx             ; Drop the count off the data stack.
.b361		e8		inx		                inx
.b362		a5 25		lda $25		                lda tmp1
.b364		f0 0d		beq $b373	                beq _done       ; If zero, there are no wordlists.
.b366		a0 23		ldy #$23	                ldy #search_order_offset
.b368						_loop:
.b368		b5 00		lda $00,x	                lda 0,x         ; The search order is a byte array
.b36a		91 08		sta ($08),y	                sta (up),y      ; so only save the LSB
.b36c		c8		iny		                iny
.b36d		e8		inx		                inx
.b36e		e8		inx		                inx
.b36f		c6 25		dec $25		                dec tmp1
.b371		d0 f5		bne $b368	                bne _loop
.b373						_done:
.b373		60		rts		z_set_order:    rts
.b374						xt_to_order:
.b374		20 fc 94	jsr $94fc	                jsr xt_to_r
.b377		20 37 b2	jsr $b237	                jsr xt_get_order
.b37a		20 47 90	jsr $9047	                jsr xt_r_from
.b37d		20 be 93	jsr $93be	                jsr xt_swap
.b380		20 42 8e	jsr $8e42	                jsr xt_one_plus
.b383		20 40 b3	jsr $b340	                jsr xt_set_order
.b386		60		rts		z_to_order:     rts
.b387						xt_wordlist:
.b387		a0 09		ldy #$09	                ldy #num_wordlists_offset
.b389		b1 08		lda ($08),y	                lda (up),y      ; This is a byte variable, so only
.b38b		c9 0c		cmp #$0c	                cmp #max_wordlists
.b38d		d0 05		bne $b394	                bne _ok
.b38f		a9 0b		lda #$0b	                lda #err_wordlist
.b391		4c f5 d7	jmp $d7f5	                jmp error
.b394						_ok:
.b394		1a		inc a		                ina             ; Increment the wordlist#
.b395		91 08		sta ($08),y	                sta (up),y      ; Save it into byte variable #wordlists
.b397		ca		dex		                dex             ; and put it on the stack.
.b398		ca		dex		                dex
.b399		95 00		sta $00,x	                sta 0,x
.b39b		74 01		stz $01,x	                stz 1,x         ; 12 is the max, so upper byte is always zero.
.b39d		60		rts		z_wordlist:     rts

;******  Return to file: platform/../words/all.asm


;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../definitions.asm

=120						dsp0      = zpage_end-7    ; initial Data Stack Pointer
.b39e						cold_zp_table:
>b39e	0000	00 08				cp:         .word cp0+256+1024      ; Compiler Pointer
>b3a0	0002	6e bb				dp:         .word dictionary_start  ; Dictionary Pointer
>b3a2	0004	00 00				ip:         .word 0                 ; Instruction Pointer (current xt)
>b3a4	0006	00 00				workword:   .word 0                 ; nt (not xt!) of word being compiled, except in
>b3a6	0008	00 03				up:         .word cp0               ; Forth user vars at start of available RAM
>b3a8	000a	00 00				insrc:      .word 0                 ; input source for SOURCE-ID (0 for keyboard)
>b3aa	000c	00 02				cib:        .word buffer0           ; address of current input buffer
>b3ac	000e	00 00				ciblen:     .word 0                 ; length of current input buffer
>b3ae	0010	00 00				toin:       .word 0                 ; pointer to CIB (>IN in Forth)
>b3b0	0012	2d f0				output:     .word kernel_putc       ; vector for EMIT
>b3b2	0014	27 f0				input:      .word kernel_getc       ; vector for KEY
>b3b4	0016	00 00				havekey:    .word 0                 ; vector for KEY?
>b3b6	0018	0a 00				base:       .word 10                ; number radix, default decimal
>b3b8	001a	00 00				state:      .word 0                 ; STATE: -1 compile, 0 interpret
>b3ba	001c	00 00				status:     .word 0                 ; internal status used by : :NONAME ; ACCEPT
>b3bc	001e					tmpdsp:     .byte ?         ; temporary DSP (X) storage (single byte)
>b3bd	001f					loopctrl:   .byte ?         ; Offset and flags for DO/LOOP/+LOOP control.
>b3be	0020					loopidx0    .byte ?         ; cached LSB of current loop index for LOOP (not +LOOP)
=$100						lcbstack = $100
=256						loopindex = lcbstack+0      ; loop control block index for adjusted loopindex
=258						loopfufa  = lcbstack+2      ; loop control block offset for limit fudge factor
>b3bf	0021					loopleave:  .word ?         ; tmp for LEAVE chaining ;TODO could it use existing tmp?
>b3c1	0023					tmptos:     .word ?         ; temporary TOS storage
>b3c3	0025					tmp1:       .word ?         ; temporary storage
>b3c5	0027					tmp2:       .word ?         ; temporary storage
>b3c7	0029					tmp3:       .word ?         ; temporary storage (especially for print)
>b3c9	002b					tohold:     .word ?         ; pointer for formatted output
>b3cb	002d					scratch:    .word ?,?,?,?   ; 8 byte scratchpad (see UM/MOD)
>b3d3	0035					tmped:      .word ?,?,?     ; temporary for editors
.b3bc						cold_zp_table_end:
.b3bc						cold_user_table:
>b3bc	0000	14 00				nc_limit_offset:        .word 20        ; byte limit for Native Compile size
>b3be	0002	00 00				uf_strip_offset:        .word 0         ; flag to strip underflow detection (0 off)
>b3c0	0004	00 00				blk_offset:             .word 0         ; BLK
>b3c2	0006	00 00				scr_offset:             .word 0         ; SCR
=12						max_wordlists = 12    ; Maximum number of wordlists supported (4 built-in, 8 user wordlists)
>b3c4	0008	00				current_offset:         .byte 0         ; CURRENT = FORTH-WORDLIST (compilation wordlist)
>b3c5	0009	04				num_wordlists_offset:   .byte 4         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
.b3c6	000a					wordlists_offset:
>b3c6	000a	6e bb				    .word dictionary_start              ; FORTH-WORDLIST
>b3c8	000c	cd c9				    .word editor_dictionary_start       ; EDITOR-WORDLIST
>b3ca	000e	1d ca				    .word assembler_dictionary_start    ; ASSEMBLER-WORDLIST
>b3cc	0010	8c c9				    .word root_dictionary_start         ; ROOT-WORDLIST
>b3ce	0012	00 00 00 00 00 00 00 00		    .word 0,0,0,0,0,0,0,0               ; Space for 8 User wordlists
>b3d6	001a	00 00 00 00 00 00 00 00
>b3de	0022	01				num_order_offset:       .byte 1         ; #ORDER (Number of wordlists in search order)
.b3df	0023					search_order_offset:
>b3df	0023	00 00 00 00 00 00 00 00		    .byte 0,0,0,0,0,0,0,0,0             ; SEARCH-ORDER (9 bytes to keep offsets even)
>b3e7	002b	00
>b3e8	002c	00 04				blkbuffer_offset:       .word cp0+256   ; Address of buffer (right after USER vars)
>b3ea	002e	00 00				buffblocknum_offset:    .word 0         ; Block number current in buffer
>b3ec	0030	00 00				buffstatus_offset:      .word 0         ; Buffer status (bit 0 = used, bit 1 = dirty) (not in use)
>b3ee	0032	c3 af				blockread_offset:       .word xt_block_word_error   ; Vector to block reading routine
>b3f0	0034	c3 af				blockwrite_offset:      .word xt_block_word_error   ; Vector to block writing routine
.b3f2						cold_user_table_end:
=$03						AscCC   = $03  ; break (CTRL-c)
=$07						AscBELL = $07  ; bell sound
=$08						AscBS   = $08  ; backspace
=$0a						AscLF   = $0A  ; line feed
=$0d						AscCR   = $0D  ; carriage return
=$1b						AscESC  = $1B  ; escape
=$20						AscSP   = $20  ; space
=$7f						AscDEL  = $7F  ; delete (CTRL-h)
=$10						AscCP   = $10  ; CTRL-p (used to recall previous input history)
=$0e						AscCN   = $0E  ; CTRL-n (used to recall next input history)
=$20						OpJSR   = $20
=$4c						OpJMP   = $4C
=$60						OpRTS   = $60
=$80						OpBRA   = $80
=1						CO = 1  ; Compile Only
=2						AN = 2  ; Always Native Compile
=4						IM = 4  ; Immediate Word
=8						NN = 8  ; Never Native Compile
=16						UF = 16 ; Includes Underflow Check (RESERVED)
=32						HC = 32 ; Word has Code Field Area (CFA)
=79						MAX_LINE_LENGTH  = 79      ; assumes 80 character lines

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../opcodes.asm

.b3f2						oc_index_table:
>b3f2		f2 b5 f6 b5 8a ba 8a ba		        .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc__
>b3fa		fe b5 04 b6 0a b6 8a ba
>b402		10 b6 14 b6 1a b6 8a ba		        .word oc08, oc09, oc0A, oc__, oc0C, oc0D, oc0E, oc0F
>b40a		20 b6 24 b6 28 b6 2c b6
>b412		31 b6 35 b6 3d b6 8a ba		        .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
>b41a		44 b6 4a b6 51 b6 58 b6
>b422		5f b6 63 b6 69 b6 8a ba		        .word oc18, oc19, oc1A, oc__, oc1C, oc1D, oc__, oc1F
>b42a		6f b6 73 b6 8a ba 79 b6
>b432		7f b6 83 b6 8a ba 8a ba		        .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
>b43a		8b b6 91 b6 97 b6 9d b6
>b442		a4 b6 a8 b6 ae b6 8a ba		        .word oc28, oc29, oc2A, oc__, OC2C, oc2D, oc2E, oc2F
>b44a		b4 b6 b8 b6 bd b6 c1 b6
>b452		c6 b6 ca b6 d2 b6 8a ba		        .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
>b45a		d9 b6 e1 b6 e8 b6 ef b6
>b462		f6 b6 fa b6 00 b7 8a ba		        .word oc38, oc39, oc3A, oc__, oc3C, oc3D, oc3E, oc0F
>b46a		06 b7 0c b7 12 b7 2c b6
>b472		1d b7 21 b7 8a ba 8a ba		        .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
>b47a		8a ba 29 b7 2f b7 35 b7
>b482		3c b7 40 b7 46 b7 8a ba		        .word oc48, oc49, oc4A, oc__, oc4C, oc4D, oc4E, oc4F
>b48a		4c b7 50 b7 54 b7 58 b7
>b492		5d b7 61 b7 69 b7 8a ba		        .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
>b49a		8a ba 70 b7 77 b7 7e b7
>b4a2		85 b7 89 b7 8f b7 8a ba		        .word oc58, oc59, oc5A, oc__, oc__, oc__, oc5E, oc5F
>b4aa		8a ba 8a ba 99 b7 9f b7
>b4b2		a4 b7 a8 b7 8a ba 8a ba		        .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
>b4ba		b0 b7 b6 b7 bc b7 c2 b7
>b4c2		c9 b7 cd b7 d3 b7 8a ba		        .word oc68, oc69, oc6A, oc__, oc6C, oc6D, oc6E, oc6F
>b4ca		d9 b7 df b7 e3 b7 e7 b7
>b4d2		ec b7 f0 b7 f8 b7 8a ba		        .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
>b4da		ff b7 06 b8 0d b8 14 b8
>b4e2		1b b8 1f b8 25 b8 8a ba		        .word oc78, oc79, oc7A, oc__, oc7C, oc7D, oc7E, oc7F
>b4ea		29 b8 30 b8 36 b8 3c b8
>b4f2		41 b8 45 b8 8a ba 8a ba		        .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc__
>b4fa		4d b8 53 b8 59 b8 8a ba
>b502		5f b8 63 b8 69 b8 8a ba		        .word oc88, oc89, oc8A, oc__, oc8C, oc8D, oc8E, oc8F
>b50a		6d b8 71 b8 75 b8 79 b8
>b512		7e b8 82 b8 8a b8 8a ba		        .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
>b51a		91 b8 98 b8 9f b8 a6 b8
>b522		ad b8 b1 b8 b7 b8 8a ba		        .word oc98, oc99, oc9A, oc__, oc9C, oc9D, oc9E, oc9F
>b52a		bb b8 bf b8 c5 b8 cb b8
>b532		d0 b8 d6 b8 de b8 8a ba		        .word ocA0, ocA1, ocA2, oc__, ocA4, ocA5, ocA6, ocA7
>b53a		e4 b8 ea b8 f0 b8 f6 b8
>b542		fd b8 01 b9 07 b9 8a ba		        .word ocA8, ocA9, ocAA, oc__, ocAC, ocAD, ocAE, ocAF
>b54a		0b b9 0f b9 13 b9 17 b9
>b552		1c b9 20 b9 28 b9 8a ba		        .word ocB0, ocB1, ocB2, oc__, ocB4, ocB5, ocB6, ocB7
>b55a		2f b9 36 b9 3d b9 44 b9
>b562		4b b9 4f b9 55 b9 8a ba		        .word ocB8, ocB9, ocBA, oc__, ocBC, ocBD, ocBE, ocBF
>b56a		59 b9 5f b9 65 b9 6b b9
>b572		70 b9 76 b9 8a ba 8a ba		        .word ocC0, ocC1, oc__, oc__, ocC4, ocC5, ocC6, ocC7
>b57a		7e b9 84 b9 8a b9 90 b9
>b582		97 b9 9b b9 a1 b9 8a ba		        .word ocC8, ocC9, ocCA, oc__, ocCC, ocCD, ocCE, ocCF
>b58a		a5 b9 a9 b9 ad b9 b1 b9
>b592		b6 b9 ba b9 c2 b9 8a ba		        .word ocD0, ocD1, ocD2, oc__, oc__, ocD5, ocD6, ocD7
>b59a		8a ba c9 b9 d0 b9 d7 b9
>b5a2		de b9 e2 b9 e8 b9 8a ba		        .word ocD8, ocD9, ocDA, oc__, oc__, ocDD, ocDE, ocDF
>b5aa		8a ba ec b9 f2 b9 f8 b9
>b5b2		fd b9 03 ba 8a ba 8a ba		        .word ocE0, ocE1, oc__, oc__, ocE4, ocE5, ocE6, ocE7
>b5ba		0b ba 11 ba 17 ba 1d ba
>b5c2		24 ba 28 ba 2e ba 8a ba		        .word ocE8, ocE9, ocEA, oc__, ocEC, ocED, ocEE, ocEF
>b5ca		32 ba 36 ba 3a ba 3e ba
>b5d2		43 ba 47 ba 4f ba 8a ba		        .word ocF0, ocF1, ocF2, oc__, oc__, ocF5, ocF6, ocF7
>b5da		8a ba 56 ba 5d ba 64 ba
>b5e2		6b ba 6f ba 75 ba 8a ba		        .word ocF8, ocF9, ocFA, oc__, oc__, ocFD, ocFE, ocFF
>b5ea		8a ba 79 ba 7f ba 85 ba
.b5f2						oc_table:
>b5f2		83 62 72 6b				oc00:	.text 2*64+3, "brk"              ; enforce the signature byte
>b5f6		87 6f 72 61 2e 7a 78 69			oc01:	.text 2*64+7, "ora.zxi"
>b5fe		85 74 73 62 2e 7a		    oc04:   .text 2*64+5, "tsb.z"
>b604		85 6f 72 61 2e 7a			oc05:	.text 2*64+5, "ora.z"
>b60a		85 61 73 6c 2e 7a			oc06:	.text 2*64+5, "asl.z"
>b610		43 70 68 70				oc08:	.text 1*64+3, "php"
>b614		85 6f 72 61 2e 23			oc09:	.text 2*64+5, "ora.#"
>b61a		45 61 73 6c 2e 61			oc0A:	.text 1*64+5, "asl.a"
>b620		c3 74 73 62				oc0C:	.text 3*64+3, "tsb"
>b624		c3 6f 72 61				oc0D:	.text 3*64+3, "ora"
>b628		c3 61 73 6c				oc0E:	.text 3*64+3, "asl"
>b62c		c4 62 62 72 30				oc0F:	.text 3*64+4, "bbr0"
>b631		83 62 70 6c				oc10:	.text 2*64+3, "bpl"
>b635		87 6f 72 61 2e 7a 69 79			oc11:	.text 2*64+7, "ora.ziy"
>b63d		86 6f 72 61 2e 7a 69			oc12:	.text 2*64+6, "ora.zi"
>b644		85 74 72 62 2e 7a			oc14:	.text 2*64+5, "trb.z"
>b64a		86 6f 72 61 2e 7a 78			oc15:	.text 2*64+6, "ora.zx"
>b651		86 61 73 6c 2e 7a 78			oc16:	.text 2*64+6, "asl.zx"
>b658		86 72 6d 62 31 2e 7a			oc17:	.text 2*64+6, "rmb1.z"
>b65f		43 63 6c 63				oc18:	.text 1*64+3, "clc"
>b663		c5 6f 72 61 2e 79			oc19:	.text 3*64+5, "ora.y"
>b669		45 69 6e 63 2e 61			oc1A:	.text 1*64+5, "inc.a"
>b66f		c3 74 72 62				oc1C:	.text 3*64+3, "trb"
>b673		c5 6f 72 61 2e 78			oc1D:	.text 3*64+5, "ora.x"
>b679		c5 61 73 6c 2e 78			oc1F:	.text 3*64+5, "asl.x"
>b67f		c3 6a 73 72				oc20:	.text 3*64+3, "jsr"
>b683		87 61 6e 64 2e 7a 78 69			oc21:	.text 2*64+7, "and.zxi"
>b68b		85 62 69 74 2e 7a			oc24:	.text 2*64+5, "bit.z"
>b691		85 61 6e 64 2e 7a			oc25:	.text 2*64+5, "and.z"
>b697		85 72 6f 6c 2e 7a			oc26:	.text 2*64+5, "rol.z"
>b69d		86 72 6d 62 32 2e 7a			oc27:	.text 2*64+6, "rmb2.z"
>b6a4		43 70 6c 70				oc28:	.text 1*64+3, "plp"
>b6a8		85 61 6e 64 2e 23			oc29:	.text 2*64+5, "and.#"
>b6ae		45 72 6f 6c 2e 61			oc2A:	.text 1*64+5, "rol.a"
>b6b4		c3 62 69 74				oc2C:	.text 3*64+3, "bit"
>b6b8		c4 61 6e 64 2e				oc2D:	.text 3*64+4, "and."
>b6bd		c3 72 6f 6c				oc2E:	.text 3*64+3, "rol"
>b6c1		c4 62 62 72 32				oc2F:	.text 3*64+4, "bbr2"
>b6c6		83 62 6d 69				oc30:	.text 2*64+3, "bmi"
>b6ca		87 61 6e 64 2e 7a 69 79			oc31:	.text 2*64+7, "and.ziy"
>b6d2		86 61 6e 64 2e 7a 69			oc32:	.text 2*64+6, "and.zi"
>b6d9		87 62 69 74 2e 7a 78 69			oc34:	.text 2*64+7, "bit.zxi"
>b6e1		86 61 6e 64 2e 7a 78			oc35:	.text 2*64+6, "and.zx"
>b6e8		86 72 6f 6c 2e 7a 78			oc36:	.text 2*64+6, "rol.zx"
>b6ef		86 72 6d 62 33 2e 7a			oc37:	.text 2*64+6, "rmb3.z"
>b6f6		43 73 65 63				oc38:	.text 1*64+3, "sec"
>b6fa		c5 61 6e 64 2e 79			oc39:	.text 3*64+5, "and.y"
>b700		45 64 65 63 2e 61			oc3A:	.text 1*64+5, "dec.a"
>b706		c5 62 69 74 2e 78			oc3C:	.text 3*64+5, "bit.x"
>b70c		c5 61 6e 64 2e 78			oc3D:	.text 3*64+5, "and.x"
>b712		c5 72 6f 6c 2e 78			oc3E:	.text 3*64+5, "rol.x"
>b718		c4 62 62 72 33				oc3F:	.text 3*64+4, "bbr3"
>b71d		43 72 74 69				oc40:	.text 1*64+3, "rti"
>b721		87 65 6f 72 2e 7a 78 69			oc41:	.text 2*64+7, "eor.zxi"
>b729		85 65 6f 72 2e 7a			oc45:	.text 2*64+5, "eor.z"
>b72f		85 6c 73 72 2e 7a			oc46:	.text 2*64+5, "lsr.z"
>b735		86 72 62 6d 34 2e 7a			oc47:	.text 2*64+6, "rbm4.z"
>b73c		43 70 68 61				oc48:	.text 1*64+3, "pha"
>b740		85 65 6f 72 2e 23			oc49:	.text 2*64+5, "eor.#"
>b746		45 6c 73 72 2e 61			oc4A:	.text 1*64+5, "lsr.a"
>b74c		c3 6a 6d 70				oc4C:	.text 3*64+3, "jmp"
>b750		c3 65 6f 72				oc4D:	.text 3*64+3, "eor"
>b754		c3 6c 73 72				oc4E:	.text 3*64+3, "lsr"
>b758		c4 62 62 72 34				oc4F:	.text 3*64+4, "bbr4"
>b75d		83 62 76 63				oc50:	.text 2*64+3, "bvc"
>b761		87 65 6f 72 2e 7a 69 79			oc51:	.text 2*64+7, "eor.ziy"
>b769		86 65 6f 72 2e 7a 69			oc52:	.text 2*64+6, "eor.zi"
>b770		86 65 6f 72 2e 7a 78			oc55:	.text 2*64+6, "eor.zx"
>b777		86 6c 73 72 2e 7a 78			oc56:	.text 2*64+6, "lsr.zx"
>b77e		86 72 62 6d 35 2e 7a			oc57:	.text 2*64+6, "rbm5.z"
>b785		43 63 6c 69				oc58:	.text 1*64+3, "cli"
>b789		c5 65 6f 72 2e 79			oc59:	.text 3*64+5, "eor.y"
>b78f		43 70 68 79				oc5A:	.text 1*64+3, "phy"
>b793		c5 65 6f 72 2e 78			oc5D:	.text 3*64+5, "eor.x"
>b799		c5 6c 73 72 2e 78			oc5E:	.text 3*64+5, "lsr.x"
>b79f		c4 62 62 72 35				oc5F:	.text 3*64+4, "bbr5"
>b7a4		43 72 74 73				oc60:	.text 1*64+3, "rts"
>b7a8		87 61 64 63 2e 7a 78 69			oc61:	.text 2*64+7, "adc.zxi"
>b7b0		85 73 74 7a 2e 7a			oc64:	.text 2*64+5, "stz.z"
>b7b6		85 61 64 63 2e 7a			oc65:	.text 2*64+5, "adc.z"
>b7bc		85 72 6f 72 2e 7a			oc66:	.text 2*64+5, "ror.z"
>b7c2		86 72 6d 62 36 2e 7a			oc67:	.text 2*64+6, "rmb6.z"
>b7c9		43 70 6c 61				oc68:	.text 1*64+3, "pla"
>b7cd		85 61 64 63 2e 23			oc69:	.text 2*64+5, "adc.#"
>b7d3		45 72 6f 72 2e 61			oc6A:	.text 1*64+5, "ror.a"
>b7d9		c5 6a 6d 70 2e 69			oc6C:	.text 3*64+5, "jmp.i"
>b7df		c3 61 64 63				oc6D:	.text 3*64+3, "adc"
>b7e3		c3 72 6f 72				oc6E:	.text 3*64+3, "ror"
>b7e7		c4 62 62 72 36				oc6F:	.text 3*64+4, "bbr6"
>b7ec		83 62 76 73				oc70:	.text 2*64+3, "bvs"
>b7f0		87 61 64 63 2e 7a 69 79			oc71:	.text 2*64+7, "adc.ziy"
>b7f8		86 61 64 63 2e 7a 69			oc72:	.text 2*64+6, "adc.zi"
>b7ff		86 73 74 7a 2e 7a 78			oc74:	.text 2*64+6, "stz.zx"
>b806		86 61 64 63 2e 7a 78			oc75:	.text 2*64+6, "adc.zx"
>b80d		86 72 6f 72 2e 7a 78			oc76:	.text 2*64+6, "ror.zx"
>b814		86 72 6d 62 37 2e 7a			oc77:	.text 2*64+6, "rmb7.z"
>b81b		43 73 65 69				oc78:	.text 1*64+3, "sei"
>b81f		c5 61 64 63 2e 79			oc79:	.text 3*64+5, "adc.y"
>b825		43 70 6c 79				oc7A:	.text 1*64+3, "ply"
>b829		c6 6a 6d 70 2e 78 69			oc7C:	.text 3*64+6, "jmp.xi"
>b830		c5 61 64 63 2e 78			oc7D:	.text 3*64+5, "adc.x"
>b836		c5 72 6f 72 2e 78			oc7E:	.text 3*64+5, "ror.x"
>b83c		c4 62 62 72 37				oc7F:	.text 3*64+4, "bbr7"
>b841		83 62 72 61				oc80:	.text 2*64+3, "bra"
>b845		87 73 74 61 2e 7a 78 69			oc81:	.text 2*64+7, "sta.zxi"
>b84d		85 73 74 79 2e 7a			oc84:	.text 2*64+5, "sty.z"
>b853		85 73 74 61 2e 7a			oc85:	.text 2*64+5, "sta.z"
>b859		85 73 74 78 2e 7a			oc86:	.text 2*64+5, "stx.z"
>b85f		43 64 65 79				oc88:	.text 1*64+3, "dey"
>b863		85 62 69 74 2e 23			oc89:	.text 2*64+5, "bit.#"
>b869		43 74 78 61				oc8A:	.text 1*64+3, "txa"
>b86d		c3 73 74 79				oc8C:	.text 3*64+3, "sty"
>b871		c3 73 74 61				oc8D:	.text 3*64+3, "sta"
>b875		c3 73 74 78				oc8E:	.text 3*64+3, "stx"
>b879		c4 62 62 73 30				oc8F:	.text 3*64+4, "bbs0"
>b87e		83 62 63 63				oc90:	.text 2*64+3, "bcc"
>b882		87 73 74 61 2e 7a 69 79			oc91:	.text 2*64+7, "sta.ziy"
>b88a		86 73 74 61 2e 7a 69			oc92:	.text 2*64+6, "sta.zi"
>b891		86 73 74 79 2e 7a 78			oc94:	.text 2*64+6, "sty.zx"
>b898		86 73 74 61 2e 7a 78			oc95:	.text 2*64+6, "sta.zx"
>b89f		86 73 74 78 2e 7a 79			oc96:	.text 2*64+6, "stx.zy"
>b8a6		86 73 6d 62 31 2e 7a			oc97:	.text 2*64+6, "smb1.z"
>b8ad		43 74 79 61				oc98:	.text 1*64+3, "tya"
>b8b1		c5 73 74 61 2e 79			oc99:	.text 3*64+5, "sta.y"
>b8b7		43 74 78 73				oc9A:	.text 1*64+3, "txs"
>b8bb		c3 73 74 7a				oc9C:	.text 3*64+3, "stz"
>b8bf		c5 73 74 61 2e 78			oc9D:	.text 3*64+5, "sta.x"
>b8c5		c5 73 74 7a 2e 78			oc9E:	.text 3*64+5, "stz.x"
>b8cb		c4 62 62 73 31				oc9F:	.text 3*64+4, "bbs1"
>b8d0		85 6c 64 79 2e 23			ocA0:	.text 2*64+5, "ldy.#"
>b8d6		87 6c 64 61 2e 7a 78 69			ocA1:	.text 2*64+7, "lda.zxi"
>b8de		85 6c 64 78 2e 23			ocA2:	.text 2*64+5, "ldx.#"
>b8e4		85 6c 64 79 2e 7a			ocA4:	.text 2*64+5, "ldy.z"
>b8ea		85 6c 64 61 2e 7a			ocA5:	.text 2*64+5, "lda.z"
>b8f0		85 6c 64 78 2e 7a			ocA6:	.text 2*64+5, "ldx.z"
>b8f6		86 73 6d 62 32 2e 7a			ocA7:	.text 2*64+6, "smb2.z"
>b8fd		43 74 61 79				ocA8:	.text 1*64+3, "tay"
>b901		85 6c 64 61 2e 23			ocA9:	.text 2*64+5, "lda.#"
>b907		43 74 61 78				ocAA:	.text 1*64+3, "tax"
>b90b		c3 6c 64 79				ocAC:	.text 3*64+3, "ldy"
>b90f		c3 6c 64 61				ocAD:	.text 3*64+3, "lda"
>b913		c3 6c 64 78				ocAE:	.text 3*64+3, "ldx"
>b917		c4 62 62 73 32				ocAF:	.text 3*64+4, "bbs2"
>b91c		83 62 63 73				ocB0:	.text 2*64+3, "bcs"
>b920		87 6c 64 61 2e 7a 69 79			ocB1:	.text 2*64+7, "lda.ziy"
>b928		86 6c 64 61 2e 7a 69			ocB2:	.text 2*64+6, "lda.zi"
>b92f		86 6c 64 79 2e 7a 78			ocB4:	.text 2*64+6, "ldy.zx"
>b936		86 6c 64 61 2e 7a 78			ocB5:	.text 2*64+6, "lda.zx"
>b93d		86 6c 64 78 2e 7a 79			ocB6:	.text 2*64+6, "ldx.zy"
>b944		86 73 6d 62 33 2e 7a			ocB7:	.text 2*64+6, "smb3.z"
>b94b		43 63 6c 76				ocB8:	.text 1*64+3, "clv"
>b94f		c5 6c 64 61 2e 79			ocB9:	.text 3*64+5, "lda.y"
>b955		43 74 73 78				ocBA:	.text 1*64+3, "tsx"
>b959		c5 6c 64 79 2e 78			ocBC:	.text 3*64+5, "ldy.x"
>b95f		c5 6c 64 61 2e 78			ocBD:	.text 3*64+5, "lda.x"
>b965		c5 6c 64 78 2e 79			ocBE:	.text 3*64+5, "ldx.y"
>b96b		c4 62 62 73 34				ocBF:	.text 3*64+4, "bbs4"
>b970		85 63 70 79 2e 23			ocC0:	.text 2*64+5, "cpy.#"
>b976		87 63 6d 70 2e 7a 78 69			ocC1:	.text 2*64+7, "cmp.zxi"
>b97e		85 63 70 79 2e 7a			ocC4:	.text 2*64+5, "cpy.z"
>b984		85 63 6d 70 2e 7a			ocC5:	.text 2*64+5, "cmp.z"
>b98a		85 64 65 63 2e 7a			ocC6:	.text 2*64+5, "dec.z"
>b990		86 73 6d 62 34 2e 7a			ocC7:	.text 2*64+6, "smb4.z"
>b997		43 69 6e 79				ocC8:	.text 1*64+3, "iny"
>b99b		85 63 6d 70 2e 23			ocC9:	.text 2*64+5, "cmp.#"
>b9a1		43 64 65 78				ocCA:	.text 1*64+3, "dex"
>b9a5		c3 63 70 79				ocCC:	.text 3*64+3, "cpy"
>b9a9		c3 63 6d 70				ocCD:	.text 3*64+3, "cmp"
>b9ad		c3 64 65 63				ocCE:	.text 3*64+3, "dec"
>b9b1		c4 62 62 73 34				ocCF:	.text 3*64+4, "bbs4"
>b9b6		83 62 6e 65				ocD0:	.text 2*64+3, "bne"
>b9ba		87 63 6d 70 2e 7a 69 79			ocD1:	.text 2*64+7, "cmp.ziy"
>b9c2		86 63 6d 70 2e 7a 69			ocD2:	.text 2*64+6, "cmp.zi"
>b9c9		86 63 6d 70 2e 7a 78			ocD5:	.text 2*64+6, "cmp.zx"
>b9d0		86 64 65 63 2e 7a 78			ocD6:	.text 2*64+6, "dec.zx"
>b9d7		86 73 6d 62 35 2e 7a			ocD7:	.text 2*64+6, "smb5.z"
>b9de		43 63 6c 64				ocD8:	.text 1*64+3, "cld"
>b9e2		c5 63 6d 70 2e 79			ocD9:	.text 3*64+5, "cmp.y"
>b9e8		43 70 68 78				ocDA:	.text 1*64+3, "phx"
>b9ec		c5 63 6d 70 2e 78			ocDD:	.text 3*64+5, "cmp.x"
>b9f2		c5 64 65 63 2e 78			ocDE:	.text 3*64+5, "dec.x"
>b9f8		c4 62 62 73 35				ocDF:	.text 3*64+4, "bbs5"
>b9fd		85 63 70 78 2e 23			ocE0:	.text 2*64+5, "cpx.#"
>ba03		87 73 62 63 2e 7a 78 69			ocE1:	.text 2*64+7, "sbc.zxi"
>ba0b		85 63 70 78 2e 7a			ocE4:	.text 2*64+5, "cpx.z"
>ba11		85 73 62 63 2e 7a			ocE5:	.text 2*64+5, "sbc.z"
>ba17		85 69 6e 63 2e 7a			ocE6:	.text 2*64+5, "inc.z"
>ba1d		86 73 6d 62 36 2e 7a			ocE7:	.text 2*64+6, "smb6.z"
>ba24		43 69 6e 78				ocE8:	.text 1*64+3, "inx"
>ba28		85 73 62 63 2e 23			ocE9:	.text 2*64+5, "sbc.#"
>ba2e		43 6e 6f 70				ocEA:	.text 1*64+3, "nop"
>ba32		c3 63 70 78				ocEC:	.text 3*64+3, "cpx"
>ba36		c3 73 62 63				ocED:	.text 3*64+3, "sbc"
>ba3a		c3 69 6e 63				ocEE:	.text 3*64+3, "inc"
>ba3e		c4 62 62 73 36				ocEF:	.text 3*64+4, "bbs6"
>ba43		83 62 65 71				ocF0:	.text 2*64+3, "beq"
>ba47		87 73 62 63 2e 7a 69 79			ocF1:	.text 2*64+7, "sbc.ziy"
>ba4f		86 73 62 63 2e 7a 69			ocF2:	.text 2*64+6, "sbc.zi"
>ba56		86 73 62 63 2e 7a 78			ocF5:	.text 2*64+6, "sbc.zx"
>ba5d		86 69 6e 63 2e 7a 78			ocF6:	.text 2*64+6, "inc.zx"
>ba64		86 73 6d 62 37 2e 7a			ocF7:	.text 2*64+6, "smb7.z"
>ba6b		43 73 65 64				ocF8:	.text 1*64+3, "sed"
>ba6f		c5 73 62 63 2e 79			ocF9:	.text 3*64+5, "sbc.y"
>ba75		43 70 6c 78				ocFA:	.text 1*64+3, "plx"
>ba79		c5 73 62 63 2e 78			ocFD:	.text 3*64+5, "sbc.x"
>ba7f		c5 69 6e 63 2e 78			ocFE:	.text 3*64+5, "inc.x"
>ba85		c4 62 62 73 37				ocFF:	.text 3*64+4, "bbs7"
>ba8a		01 3f					oc__:	.text 1, "?"

;******  Return to file: platform/../taliforth.asm

.ba8c						forth_words_start:
>ba8c		20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>ba94		61 6c 69 20 46 6f 72 74 68 20 32 20 66 6f 72 20
>baa4		74 68 65 20 36 35 63 30 32 29 20 63 72 20 2e 28
>bab4		20 56 65 72 73 69 6f 6e 20 31 2e 31 20 30 36 2e
>bac4		20 41 70 72 20 32 30 32 34 20 29 20 63 72 20 2e
>bad4		28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31 34
>bae4		2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53 74
>baf4		65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f 6c
>bb04		77 65 6c 6c 2c 20 50 61 74 72 69 63 6b 20 53 75
>bb14		72 72 79 29 20 63 72 20 2e 28 20 54 61 6c 69 20
>bb24		46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20 77 69
>bb34		74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20 4e 4f
>bb44		20 57 41 52 52 41 4e 54 59 29 20 63 72 20 2e 28
>bb54		20 54 79 70 65 20 27 62 79 65 27 20 74 6f 20 65
>bb64		78 69 74 29 20 63 72 20
.bb6c						forth_words_end:
.bb6c						user_words_start:
>bb6c		20 20				.binary "user_words.asc"
.bb6e						user_words_end:

;******  Processing file: platform/../headers.asm

.bb6e						dictionary_start:
.bb6e						nt_drop:
>bb6e		04 10				        .byte 4, UF
>bb70		7a bb c5 87 ca 87		        .word nt_dup, xt_drop, z_drop
>bb76		64 72 6f 70			        .text "drop"
.bb7a						nt_dup:
>bb7a		03 10				        .byte 3, UF
>bb7c		85 bb cb 87 d8 87		        .word nt_swap, xt_dup, z_dup
>bb82		64 75 70			        .text "dup"
.bb85						nt_swap:
>bb85		04 10				        .byte 4, UF
>bb87		91 bb be 93 d1 93		        .word nt_store, xt_swap, z_swap
>bb8d		73 77 61 70			        .text "swap"
.bb91						nt_store:
>bb91		01 10				        .byte 1, UF
>bb93		9a bb a8 93 bd 93		        .word nt_fetch, xt_store, z_store
>bb99		21				        .text "!"
.bb9a						nt_fetch:
>bb9a		01 10				        .byte 1, UF
>bb9c		a3 bb 90 89 a2 89		        .word nt_over, xt_fetch, z_fetch
>bba2		40				        .text "@"
.bba3						nt_over:
>bba3		04 10				        .byte 4, UF
>bba5		af bb 5e 8e 6b 8e		        .word nt_to_r, xt_over, z_over
>bbab		6f 76 65 72			        .text "over"
.bbaf						nt_to_r:
>bbaf		02 11				        .byte 2, CO+UF ; native is special case
>bbb1		b9 bb fc 94 0f 95		        .word nt_r_from, xt_to_r, z_to_r
>bbb7		3e 72				        .text ">r"
.bbb9						nt_r_from:
>bbb9		02 01				        .byte 2, CO    ; native is special case
>bbbb		c3 bb 47 90 57 90		        .word nt_r_fetch, xt_r_from, z_r_from
>bbc1		72 3e				        .text "r>"
.bbc3						nt_r_fetch:
>bbc3		02 01				        .byte 2, CO    ; native is special case
>bbc5		cd bb 32 90 46 90		        .word nt_nip, xt_r_fetch, z_r_fetch
>bbcb		72 40				        .text "r@"
.bbcd						nt_nip:
>bbcd		03 10				        .byte 3, UF
>bbcf		d8 bb 89 8d 96 8d		        .word nt_rot, xt_nip, z_nip
>bbd5		6e 69 70			        .text "nip"
.bbd8						nt_rot:
>bbd8		03 10				        .byte 3, UF
>bbda		e3 bb e4 90 ff 90		        .word nt_not_rote, xt_rot, z_rot
>bbe0		72 6f 74			        .text "rot"
.bbe3						nt_not_rote:
>bbe3		04 10				        .byte 4, UF
>bbe5		ef bb 81 9c 9c 9c		        .word nt_tuck, xt_not_rote, z_not_rote
>bbeb		2d 72 6f 74			        .text "-rot"
.bbef						nt_tuck:
>bbef		04 10				        .byte 4, UF
>bbf1		fb bb 19 95 32 95		        .word nt_comma, xt_tuck, z_tuck
>bbf7		74 75 63 6b			        .text "tuck"
.bbfb						nt_comma:
>bbfb		01 10				        .byte 1, UF
>bbfd		04 bc da 83 f3 83		        .word nt_c_fetch, xt_comma, z_comma
>bc03		2c				        .text ","
.bc04						nt_c_fetch:
>bc04		02 10				        .byte 2, UF
>bc06		0e bc 3a 83 43 83		        .word nt_c_store, xt_c_fetch, z_c_fetch
>bc0c		63 40				        .text "c@"
.bc0e						nt_c_store:
>bc0e		02 10				        .byte 2, UF
>bc10		18 bc 44 83 4f 83		        .word nt_plus_store, xt_c_store, z_c_store
>bc16		63 21				        .text "c!"
.bc18						nt_plus_store:
>bc18		02 10				        .byte 2, UF
>bc1a		22 bc bf 8f de 8f		        .word nt_execute, xt_plus_store, z_plus_store
>bc20		2b 21				        .text "+!"
.bc22						nt_execute:
>bc22		07 10				        .byte 7, UF
>bc24		31 bc 7b 89 81 89		        .word nt_emit, xt_execute, z_execute
>bc2a		65 78 65 63 75 74 65		        .text "execute"
.bc31						nt_emit:
>bc31		04 18				        .byte 4, NN+UF
>bc33		3d bc 34 88 3e 88		        .word nt_type, xt_emit, z_emit
>bc39		65 6d 69 74			        .text "emit"
.bc3d						nt_type:
>bc3d		04 10				        .byte 4, UF
>bc3f		49 bc 45 96 6f 96		        .word nt_dot, xt_type, z_type
>bc45		74 79 70 65			        .text "type"
.bc49						nt_dot:
>bc49		01 10				        .byte 1, UF
>bc4b		52 bc 5b 87 7c 87		        .word nt_u_dot, xt_dot, z_dot
>bc51		2e				        .text "."
.bc52						nt_u_dot:
>bc52		02 10				        .byte 2, UF
>bc54		5c bc 70 96 7b 96		        .word nt_u_dot_r, xt_u_dot, z_u_dot
>bc5a		75 2e				        .text "u."
.bc5c						nt_u_dot_r:
>bc5c		03 10				        .byte 3, UF
>bc5e		67 bc 7c 96 9d 96		        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
>bc64		75 2e 72			        .text "u.r"
.bc67						nt_dot_r:
>bc67		02 10				        .byte 2, UF
>bc69		71 bc 97 87 c4 87		        .word nt_d_dot, xt_dot_r, z_dot_r
>bc6f		2e 72				        .text ".r"
.bc71						nt_d_dot:
>bc71		02 10				        .byte 2, UF
>bc73		7b bc 86 9e a4 9e		        .word nt_d_dot_r, xt_d_dot, z_d_dot
>bc79		64 2e				        .text "d."
.bc7b						nt_d_dot_r:
>bc7b		03 10				        .byte 3, UF
>bc7d		86 bc a5 9e cf 9e		        .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
>bc83		64 2e 72			        .text "d.r"
.bc86						nt_ud_dot:
>bc86		03 10				        .byte 3, UF
>bc88		91 bc 11 9f 23 9f		        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
>bc8e		75 64 2e			        .text "ud."
.bc91						nt_ud_dot_r:
>bc91		04 10				        .byte 4, UF
>bc93		9d bc 24 9f 42 9f		        .word nt_question, xt_ud_dot_r, z_ud_dot_r
>bc99		75 64 2e 72			        .text "ud.r"
.bc9d						nt_question:
>bc9d		01 00				        .byte 1, 0
>bc9f		a6 bc 28 99 2e 99		        .word nt_false, xt_question, z_question
>bca5		3f				        .text "?"
.bca6						nt_false:
>bca6		05 00				        .byte 5, 0
>bca8		b3 bc fd 9d 03 9e		        .word nt_true, xt_false, z_false
>bcae		66 61 6c 73 65			        .text "false"
.bcb3						nt_true:
>bcb3		04 00				        .byte 4, 0
>bcb5		bf bc 10 95 18 95		        .word nt_space, xt_true, z_true
>bcbb		74 72 75 65			        .text "true"
.bcbf						nt_space:
>bcbf		05 00				        .byte 5, 0
>bcc1		cc bc 39 93 3e 93		        .word nt_zero, xt_space, z_space
>bcc7		73 70 61 63 65			        .text "space"
.bccc						nt_zero:
>bccc		01 00				        .byte 1, 0
>bcce		d5 bc fd 9d 03 9e		        .word nt_one, xt_zero, z_zero
>bcd4		30				        .text "0"
.bcd5						nt_one:
>bcd5		01 00				        .byte 1, 0
>bcd7		de bc 97 9d 9f 9d		        .word nt_two, xt_one, z_one
>bcdd		31				        .text "1"
.bcde						nt_two:
>bcde		01 00				        .byte 1, 0
>bce0		e7 bc c8 9d d0 9d		        .word nt_two_dup, xt_two, z_two
>bce6		32				        .text "2"
.bce7						nt_two_dup:
>bce7		04 10				        .byte 4, UF
>bce9		f3 bc 3b 95 52 95		        .word nt_question_dup, xt_two_dup, z_two_dup
>bcef		32 64 75 70			        .text "2dup"
.bcf3						nt_question_dup:
>bcf3		04 10				        .byte 4, UF
>bcf5		ff bc 1e 90 31 90		        .word nt_plus, xt_question_dup, z_question_dup
>bcfb		3f 64 75 70			        .text "?dup"
.bcff						nt_plus:
>bcff		01 10				        .byte 1, UF
>bd01		08 bd ac 8f be 8f		        .word nt_minus, xt_plus, z_plus
>bd07		2b				        .text "+"
.bd08						nt_minus:
>bd08		01 10				        .byte 1, UF
>bd0a		11 bd 3d 8d 4f 8d		        .word nt_one_minus, xt_minus, z_minus
>bd10		2d				        .text "-"
.bd11						nt_one_minus:
>bd11		02 10				        .byte 2, UF
>bd13		1b bd 36 8e 41 8e		        .word nt_one_plus, xt_one_minus, z_one_minus
>bd19		31 2d				        .text "1-"
.bd1b						nt_one_plus:
>bd1b		02 10				        .byte 2, UF
>bd1d		25 bd 42 8e 4b 8e		        .word nt_two_star, xt_one_plus, z_one_plus
>bd23		31 2b				        .text "1+"
.bd25						nt_two_star:
>bd25		02 10				        .byte 2, UF
>bd27		2f bd d3 95 da 95		        .word nt_two_slash, xt_two_star, z_two_star
>bd2d		32 2a				        .text "2*"
.bd2f						nt_two_slash:
>bd2f		02 10				        .byte 2, UF
>bd31		39 bd c8 95 d2 95		        .word nt_abs, xt_two_slash, z_two_slash
>bd37		32 2f				        .text "2/"
.bd39						nt_abs:
>bd39		03 10				        .byte 3, UF
>bd3b		44 bd d1 80 e5 80		        .word nt_dabs, xt_abs, z_abs
>bd41		61 62 73			        .text "abs"
.bd44						nt_dabs:
>bd44		04 10				        .byte 4, UF
>bd46		50 bd 4c 9e 6a 9e		        .word nt_and, xt_dabs, z_dabs
>bd4c		64 61 62 73			        .text "dabs"
.bd50						nt_and:
>bd50		03 10				        .byte 3, UF
>bd52		5b bd 99 82 aa 82		        .word nt_or, xt_and, z_and
>bd58		61 6e 64			        .text "and"
.bd5b						nt_or:
>bd5b		02 10				        .byte 2, UF
>bd5d		65 bd 4c 8e 5d 8e		        .word nt_xor, xt_or, z_or
>bd63		6f 72				        .text "or"
.bd65						nt_xor:
>bd65		03 10				        .byte 3, UF
>bd67		70 bd 0e 98 1f 98		        .word nt_rshift, xt_xor, z_xor
>bd6d		78 6f 72			        .text "xor"
.bd70						nt_rshift:
>bd70		06 10				        .byte 6, UF
>bd72		7e bd 00 91 13 91		        .word nt_lshift, xt_rshift, z_rshift
>bd78		72 73 68 69 66 74		        .text "rshift"
.bd7e						nt_lshift:
>bd7e		06 10				        .byte 6, UF
>bd80		8c bd 67 8c 7a 8c		        .word nt_pick, xt_lshift, z_lshift
>bd86		6c 73 68 69 66 74		        .text "lshift"
.bd8c						nt_pick:
>bd8c		04 00				        .byte 4, 0    ; underflow check is complicated, leave off here
>bd8e		98 bd 9b 8f ab 8f		        .word nt_char, xt_pick, z_pick
>bd94		70 69 63 6b			        .text "pick"
.bd98						nt_char:
>bd98		04 00				        .byte 4, 0
>bd9a		a4 bd 60 83 76 83		        .word nt_bracket_char, xt_char, z_char
>bda0		63 68 61 72			        .text "char"
.bda4						nt_bracket_char:
>bda4		06 05				        .byte 6, CO+IM
>bda6		b2 bd 1a 83 20 83		        .word nt_char_plus, xt_bracket_char, z_bracket_char
>bdac		5b 63 68 61 72 5d		        .text "[char]"
.bdb2						nt_char_plus:
>bdb2		05 00				        .byte 5, 0
>bdb4		bf bd 42 8e 4b 8e		        .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
>bdba		63 68 61 72 2b			        .text "char+"
.bdbf						nt_chars:
>bdbf		05 12				        .byte 5, AN+UF   ; deleted during compile
>bdc1		cc bd 77 83 7a 83		        .word nt_cells, xt_chars, z_chars
>bdc7		63 68 61 72 73			        .text "chars"
.bdcc						nt_cells:
>bdcc		05 00				        .byte 5, 0
>bdce		d9 bd d3 95 da 95		        .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
>bdd4		63 65 6c 6c 73			        .text "cells"
.bdd9						nt_cell_plus:
>bdd9		05 10				        .byte 5, UF
>bddb		e6 bd 50 83 5f 83		        .word nt_here, xt_cell_plus, z_cell_plus
>bde1		63 65 6c 6c 2b			        .text "cell+"
.bde6						nt_here:
>bde6		04 00				        .byte 4, 0
>bde8		f2 bd 91 8a 9b 8a		        .word nt_equal, xt_here, z_here
>bdee		68 65 72 65			        .text "here"
.bdf2						nt_equal:
>bdf2		01 10				        .byte 1, UF
>bdf4		fb bd 0c 89 27 89		        .word nt_not_equals, xt_equal, z_equal
>bdfa		3d				        .text "="
.bdfb						nt_not_equals:
>bdfb		02 10				        .byte 2, UF
>bdfd		05 be 97 8d b4 8d		        .word nt_less_than, xt_not_equals, z_not_equals
>be03		3c 3e				        .text "<>"
.be05						nt_less_than:
>be05		01 10				        .byte 1, UF
>be07		0e be 95 8b a9 8b		        .word nt_u_less_than, xt_less_than, z_less_than
>be0d		3c				        .text "<"
.be0e						nt_u_less_than:
>be0e		02 10				        .byte 2, UF
>be10		18 be b4 96 c9 96		        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
>be16		75 3c				        .text "u<"
.be18						nt_u_greater_than:
>be18		02 10				        .byte 2, UF
>be1a		22 be 9e 96 b3 96		        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
>be20		75 3e				        .text "u>"
.be22						nt_greater_than:
>be22		01 10				        .byte 1, UF
>be24		2b be 7c 8a 90 8a		        .word nt_zero_equal, xt_greater_than, z_greater_than
>be2a		3e				        .text ">"
.be2b						nt_zero_equal:
>be2b		02 10				        .byte 2, UF
>be2d		35 be 20 98 31 98		        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
>be33		30 3d				        .text "0="
.be35						nt_zero_unequal:
>be35		03 10				        .byte 3, UF
>be37		40 be 56 98 65 98		        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
>be3d		30 3c 3e			        .text "0<>"
.be40						nt_zero_greater:
>be40		02 10				        .byte 2, UF
>be42		4a be 32 98 45 98		        .word nt_zero_less, xt_zero_greater, z_zero_greater
>be48		30 3e				        .text "0>"
.be4a						nt_zero_less:
>be4a		02 10				        .byte 2, UF
>be4c		54 be 46 98 55 98		        .word nt_min, xt_zero_less, z_zero_less
>be52		30 3c				        .text "0<"
.be54						nt_min:
>be54		03 10				        .byte 3, UF
>be56		5f be 21 8d 3c 8d		        .word nt_max, xt_min, z_min
>be5c		6d 69 6e			        .text "min"
.be5f						nt_max:
>be5f		03 10				        .byte 3, UF
>be61		6a be 05 8d 20 8d		        .word nt_two_drop, xt_max, z_max
>be67		6d 61 78			        .text "max"
.be6a						nt_two_drop:
>be6a		05 10				        .byte 5, UF
>be6c		77 be 33 95 3a 95		        .word nt_two_swap, xt_two_drop, z_two_drop
>be72		32 64 72 6f 70			        .text "2drop"
.be77						nt_two_swap:
>be77		05 10				        .byte 5, UF
>be79		84 be 01 96 24 96		        .word nt_two_over, xt_two_swap, z_two_swap
>be7f		32 73 77 61 70			        .text "2swap"
.be84						nt_two_over:
>be84		05 10				        .byte 5, UF
>be86		91 be 75 95 8c 95		        .word nt_two_store, xt_two_over, z_two_over
>be8c		32 6f 76 65 72			        .text "2over"
.be91						nt_two_store:
>be91		02 10				        .byte 2, UF
>be93		9b be db 95 00 96		        .word nt_two_fetch, xt_two_store, z_two_store
>be99		32 21				        .text "2!"
.be9b						nt_two_fetch:
>be9b		02 10				        .byte 2, UF
>be9d		a5 be 53 95 74 95		        .word nt_two_variable, xt_two_fetch, z_two_fetch
>bea3		32 40				        .text "2@"
.bea5						nt_two_variable:
>bea5		09 00				        .byte 9, 0
>bea7		b6 be 02 9f 10 9f		        .word nt_two_constant, xt_two_variable, z_two_variable
>bead		32 76 61 72 69 61 62 6c		        .text "2variable"
>beb5		65
.beb6						nt_two_constant:
>beb6		09 10				        .byte 9, UF
>beb8		c7 be d0 9e f4 9e		        .word nt_two_literal, xt_two_constant, z_two_constant
>bebe		32 63 6f 6e 73 74 61 6e		        .text "2constant"
>bec6		74
.bec7						nt_two_literal:
>bec7		08 14				        .byte 8, UF+IM
>bec9		d7 be f5 9e 01 9f		        .word nt_two_r_fetch, xt_two_literal, z_two_literal
>becf		32 6c 69 74 65 72 61 6c		        .text "2literal"
.bed7						nt_two_r_fetch:
>bed7		03 09				        .byte 3, CO+NN          ; native is special case, leave NN for now
>bed9		e2 be 8d 95 aa 95		        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
>bedf		32 72 40			        .text "2r@"
.bee2						nt_two_r_from:
>bee2		03 01				        .byte 3, CO             ; native is special case
>bee4		ed be ab 95 c7 95		        .word nt_two_to_r, xt_two_r_from, z_two_r_from
>beea		32 72 3e			        .text "2r>"
.beed						nt_two_to_r:
>beed		03 11				        .byte 3, CO+UF          ; native is special case
>beef		f8 be 25 96 44 96		        .word nt_invert, xt_two_to_r, z_two_to_r
>bef5		32 3e 72			        .text "2>r"
.bef8						nt_invert:
>bef8		06 10				        .byte 6, UF
>befa		06 bf 1c 8b 2b 8b		        .word nt_negate, xt_invert, z_invert
>bf00		69 6e 76 65 72 74		        .text "invert"
.bf06						nt_negate:
>bf06		06 10				        .byte 6, UF
>bf08		14 bf 78 8d 88 8d		        .word nt_dnegate, xt_negate, z_negate
>bf0e		6e 65 67 61 74 65		        .text "negate"
.bf14						nt_dnegate:
>bf14		07 10				        .byte 7, UF
>bf16		23 bf 6b 9e 85 9e		        .word nt_c_comma, xt_dnegate, z_dnegate
>bf1c		64 6e 65 67 61 74 65		        .text "dnegate"
.bf23						nt_c_comma:
>bf23		02 10				        .byte 2, UF
>bf25		2d bf 2f 83 39 83		        .word nt_bounds, xt_c_comma, z_c_comma
>bf2b		63 2c				        .text "c,"
.bf2d						nt_bounds:
>bf2d		06 10				        .byte 6, UF
>bf2f		3b bf 3a 9a 52 9a		        .word nt_spaces, xt_bounds, z_bounds
>bf35		62 6f 75 6e 64 73		        .text "bounds"
.bf3b						nt_spaces:
>bf3b		06 10				        .byte 6, UF
>bf3d		49 bf 3f 93 7a 93		        .word nt_bl, xt_spaces, z_spaces
>bf43		73 70 61 63 65 73		        .text "spaces"
.bf49						nt_bl:
>bf49		02 00				        .byte 2, 0
>bf4b		53 bf 11 83 19 83		        .word nt_minus_trailing, xt_bl, z_bl
>bf51		62 6c				        .text "bl"
.bf53						nt_minus_trailing:
>bf53		09 10				        .byte 9, UF
>bf55		64 bf 37 a0 73 a0		        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
>bf5b		2d 74 72 61 69 6c 69 6e		        .text "-trailing"
>bf63		67
.bf64						nt_minus_leading:
>bf64		08 10				        .byte 8, UF
>bf66		74 bf 1e a0 36 a0		        .word nt_slash_string, xt_minus_leading, z_minus_leading
>bf6c		2d 6c 65 61 64 69 6e 67		        .text "-leading"
.bf74						nt_slash_string:
>bf74		07 10				        .byte 7, UF
>bf76		83 bf 13 a1 32 a1		        .word nt_refill, xt_slash_string, z_slash_string
>bf7c		2f 73 74 72 69 6e 67		        .text "/string"
.bf83						nt_refill:
>bf83		06 00				        .byte 6, 0
>bf85		91 bf 95 90 d6 90		        .word nt_accept, xt_refill, z_refill
>bf8b		72 65 66 69 6c 6c		        .text "refill"
.bf91						nt_accept:
>bf91		06 18				        .byte 6, UF+NN
>bf93		9f bf e6 80 de 81		        .word nt_input_to_r, xt_accept, z_accept
>bf99		61 63 63 65 70 74		        .text "accept"
.bf9f						nt_input_to_r:
>bf9f		07 08				        .byte 7, NN
>bfa1		ae bf 9e 9b b3 9b		        .word nt_r_to_input, xt_input_to_r, z_input_to_r
>bfa7		69 6e 70 75 74 3e 72		        .text "input>r"
.bfae						nt_r_to_input:
>bfae		07 08				        .byte 7, NN
>bfb0		bd bf ab 9d c2 9d		        .word nt_unused, xt_r_to_input, z_r_to_input
>bfb6		72 3e 69 6e 70 75 74		        .text "r>input"
.bfbd						nt_unused:
>bfbd		06 00				        .byte 6, 0
>bfbf		cb bf 77 97 86 97		        .word nt_depth, xt_unused, z_unused
>bfc5		75 6e 75 73 65 64		        .text "unused"
.bfcb						nt_depth:
>bfcb		05 00				        .byte 5, 0
>bfcd		d8 bf 8b 86 99 86		        .word nt_key, xt_depth, z_depth
>bfd3		64 65 70 74 68			        .text "depth"
.bfd8						nt_key:
>bfd8		03 00				        .byte 3, 0
>bfda		e3 bf 5f 8b 68 8b		        .word nt_allot, xt_key, z_key
>bfe0		6b 65 79			        .text "key"
.bfe3						nt_allot:
>bfe3		05 10				        .byte 5, UF
>bfe5		f0 bf 30 82 98 82		        .word nt_create, xt_allot, z_allot
>bfeb		61 6c 6c 6f 74			        .text "allot"
.bff0						nt_create:
>bff0		06 00				        .byte 6, 0
>bff2		fe bf 6f 85 42 86		        .word nt_does, xt_create, z_create
>bff8		63 72 65 61 74 65		        .text "create"
.bffe						nt_does:
>bffe		05 05				        .byte 5, CO+IM
>c000		0b c0 1a 87 28 87		        .word nt_variable, xt_does, z_does
>c006		64 6f 65 73 3e			        .text "does>"
.c00b						nt_variable:
>c00b		08 00				        .byte 8, 0
>c00d		1b c0 87 97 9f 97		        .word nt_constant, xt_variable, z_variable
>c013		76 61 72 69 61 62 6c 65		        .text "variable"
.c01b						nt_constant:
>c01b		08 10				        .byte 8, UF
>c01d		2b c0 17 85 54 85		        .word nt_value, xt_constant, z_constant
>c023		63 6f 6e 73 74 61 6e 74		        .text "constant"
.c02b						nt_value:
>c02b		05 10				        .byte 5, UF
>c02d		38 c0 17 85 54 85		        .word nt_to, xt_constant, z_constant
>c033		76 61 6c 75 65			        .text "value"
.c038						nt_to:
>c038		02 0c				        .byte 2, NN+IM
>c03a		42 c0 f2 93 2d 94		        .word nt_s_to_d, xt_to, z_to
>c040		74 6f				        .text "to"
.c042						nt_s_to_d:
>c042		03 10				        .byte 3, UF
>c044		4d c0 4d 92 5e 92		        .word nt_d_to_s, xt_s_to_d, z_s_to_d
>c04a		73 3e 64			        .text "s>d"
.c04d						nt_d_to_s:
>c04d		03 10				        .byte 3, UF
>c04f		58 c0 46 9e 4b 9e		        .word nt_d_minus, xt_d_to_s, z_d_to_s
>c055		64 3e 73			        .text "d>s"
.c058						nt_d_minus:
>c058		02 10				        .byte 2, UF
>c05a		62 c0 04 9e 24 9e		        .word nt_d_plus, xt_d_minus, z_d_minus
>c060		64 2d				        .text "d-"
.c062						nt_d_plus:
>c062		02 10				        .byte 2, UF
>c064		6c c0 25 9e 45 9e		        .word nt_erase, xt_d_plus, z_d_plus
>c06a		64 2b				        .text "d+"
.c06c						nt_erase:
>c06c		05 00				        .byte 5, 0      ; underflow checked by FILL
>c06e		79 c0 32 89 7a 89		        .word nt_blank, xt_erase, z_erase
>c074		65 72 61 73 65			        .text "erase"
.c079						nt_blank:
>c079		05 00				        .byte 5, 0     ; underflow checked by FILL
>c07b		86 c0 28 89 7a 89		        .word nt_fill, xt_blank, z_blank
>c081		62 6c 61 6e 6b			        .text "blank"
.c086						nt_fill:
>c086		04 10				        .byte 4, UF
>c088		92 c0 38 89 7a 89		        .word nt_find_name, xt_fill, z_fill
>c08e		66 69 6c 6c			        .text "fill"
.c092						nt_find_name:
>c092		09 10				        .byte 9, UF
>c094		a3 c0 fc 9a 3f 9b		        .word nt_tick, xt_find_name, z_find_name
>c09a		66 69 6e 64 2d 6e 61 6d		        .text "find-name"
>c0a2		65
.c0a3						nt_tick:
>c0a3		01 00				        .byte 1, 0
>c0a5		ac c0 d2 93 f1 93		        .word nt_bracket_tick, xt_tick, z_tick
>c0ab		27				        .text "'"
.c0ac						nt_bracket_tick:
>c0ac		03 05				        .byte 3, CO+IM
>c0ae		b7 c0 21 83 27 83		        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
>c0b4		5b 27 5d			        .text "[']"
.c0b7						nt_name_to_int:
>c0b7		08 10				        .byte 8, UF
>c0b9		c7 c0 3a 9c 56 9c		        .word nt_int_to_name, xt_name_to_int, z_name_to_int
>c0bf		6e 61 6d 65 3e 69 6e 74		        .text "name>int"
.c0c7						nt_int_to_name:
>c0c7		08 10				        .byte 8, UF
>c0c9		d7 c0 b4 9b 24 9c		        .word nt_name_to_string, xt_int_to_name, z_int_to_name
>c0cf		69 6e 74 3e 6e 61 6d 65		        .text "int>name"
.c0d7						nt_name_to_string:
>c0d7		0b 10				        .byte 11, UF
>c0d9		ea c0 57 9c 6d 9c		        .word nt_to_body, xt_name_to_string, z_name_to_string
>c0df		6e 61 6d 65 3e 73 74 72		        .text "name>string"
>c0e7		69 6e 67
.c0ea						nt_to_body:
>c0ea		05 10				        .byte 5, UF
>c0ec		f7 c0 2e 94 50 94		        .word nt_defer, xt_to_body, z_to_body
>c0f2		3e 62 6f 64 79			        .text ">body"
.c0f7						nt_defer:
>c0f7		05 00				        .byte 5, 0
>c0f9		04 c1 4a 86 7c 86		        .word nt_latestxt, xt_defer, z_defer
>c0ff		64 65 66 65 72			        .text "defer"
.c104						nt_latestxt:
>c104		08 00				        .byte 8, 0
>c106		14 c1 33 9c 39 9c		        .word nt_latestnt, xt_latestxt, z_latestxt
>c10c		6c 61 74 65 73 74 78 74		        .text "latestxt"
.c114						nt_latestnt:
>c114		08 00				        .byte 8, 0
>c116		24 c1 25 9c 32 9c		        .word nt_parse_name, xt_latestnt, z_latestnt
>c11c		6c 61 74 65 73 74 6e 74		        .text "latestnt"
.c124						nt_parse_name:
>c124		0a 08				        .byte 10, NN
>c126		36 c1 aa 8e 9a 8f		        .word nt_parse, xt_parse_name, z_parse_name
>c12c		70 61 72 73 65 2d 6e 61		        .text "parse-name"
>c134		6d 65
.c136						nt_parse:
>c136		05 10				        .byte 5, UF
>c138		43 c1 05 8f 9a 8f		        .word nt_execute_parsing, xt_parse, z_parse
>c13e		70 61 72 73 65			        .text "parse"
.c143						nt_execute_parsing:
>c143		0f 10				        .byte 15, UF
>c145		5a c1 d5 9a fb 9a		        .word nt_source, xt_execute_parsing, z_execute_parsing
>c14b		65 78 65 63 75 74 65 2d		        .text "execute-parsing"
>c153		70 61 72 73 69 6e 67
.c15a						nt_source:
>c15a		06 00				        .byte 6, 0
>c15c		68 c1 19 93 2d 93		        .word nt_source_id, xt_source, z_source
>c162		73 6f 75 72 63 65		        .text "source"
.c168						nt_source_id:
>c168		09 00				        .byte 9, 0
>c16a		79 c1 2e 93 38 93		        .word nt_colon, xt_source_id, z_source_id
>c170		73 6f 75 72 63 65 2d 69		        .text "source-id"
>c178		64
.c179						nt_colon:
>c179		01 00				        .byte 1, 0
>c17b		82 c1 7b 83 bd 83		        .word nt_semicolon, xt_colon, z_colon
>c181		3a				        .text ":"
.c182						nt_semicolon:
>c182		01 05				        .byte 1, CO+IM
>c184		8b c1 5f 92 bd 92		        .word nt_colon_noname, xt_semicolon, z_semicolon
>c18a		3b				        .text ";"
.c18b						nt_colon_noname:
>c18b		07 00				        .byte 7, 0
>c18d		9a c1 be 83 d9 83		        .word nt_compile_comma, xt_colon_noname, z_colon_noname
>c193		3a 6e 6f 6e 61 6d 65		        .text ":noname"
.c19a						nt_compile_comma:
>c19a		08 18				        .byte 8, UF+NN
>c19c		aa c1 f4 83 0a 85		        .word nt_left_bracket, xt_compile_comma, z_compile_comma
>c1a2		63 6f 6d 70 69 6c 65 2c		        .text "compile,"
.c1aa						nt_left_bracket:
>c1aa		01 05				        .byte 1, IM+CO
>c1ac		b3 c1 82 8b 86 8b		        .word nt_right_bracket, xt_left_bracket, z_left_bracket
>c1b2		5b				        .text "["
.c1b3						nt_right_bracket:
>c1b3		01 04				        .byte 1, IM
>c1b5		bc c1 dd 90 e3 90		        .word nt_literal, xt_right_bracket, z_right_bracket
>c1bb		5d				        .text "]"
.c1bc						nt_literal:
>c1bc		07 15				        .byte 7, IM+CO+UF
>c1be		cb c1 aa 8b b7 8b		        .word nt_sliteral, xt_literal, z_literal
>c1c4		6c 69 74 65 72 61 6c		        .text "literal"
.c1cb						nt_sliteral:
>c1cb		08 15				        .byte 8, CO+IM+UF
>c1cd		db c1 33 a1 9a a1		        .word nt_dot_quote, xt_sliteral, z_sliteral
>c1d3		73 6c 69 74 65 72 61 6c		        .text "sliteral"
.c1db						nt_dot_quote:
>c1db		02 05				        .byte 2, CO+IM
>c1dd		e5 c1 8c 87 96 87		        .word nt_s_quote, xt_dot_quote, z_dot_quote
>c1e3		2e 22				        .text ".", $22
.c1e5						nt_s_quote:
>c1e5		02 0c				        .byte 2, IM+NN
>c1e7		ef c1 2d 91 4c 92		        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
>c1ed		73 22				        .text "s", $22
.c1ef						nt_s_backslash_quote:
>c1ef		03 04				        .byte 3, IM
>c1f1		fa c1 14 91 1d 91		        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
>c1f7		73 5c 22			        .text "s", $5C, $22
.c1fa						nt_postpone:
>c1fa		08 05				        .byte 8, IM+CO
>c1fc		0a c2 df 8f 1d 90		        .word nt_immediate, xt_postpone, z_postpone
>c202		70 6f 73 74 70 6f 6e 65		        .text "postpone"
.c20a						nt_immediate:
>c20a		09 00				        .byte 9, 0
>c20c		1b c2 10 8b 1b 8b		        .word nt_compile_only, xt_immediate, z_immediate
>c212		69 6d 6d 65 64 69 61 74		        .text "immediate"
>c21a		65
.c21b						nt_compile_only:
>c21b		0c 00				        .byte 12, 0
>c21d		2f c2 0b 85 16 85		        .word nt_never_native, xt_compile_only, z_compile_only
>c223		63 6f 6d 70 69 6c 65 2d		        .text "compile-only"
>c22b		6f 6e 6c 79
.c22f						nt_never_native:
>c22f		0c 00				        .byte 12, 0
>c231		43 c2 73 9c 80 9c		        .word nt_always_native, xt_never_native, z_never_native
>c237		6e 65 76 65 72 2d 6e 61		        .text "never-native"
>c23f		74 69 76 65
.c243						nt_always_native:
>c243		0d 00				        .byte 13, 0
>c245		58 c2 26 9a 33 9a		        .word nt_allow_native, xt_always_native, z_always_native
>c24b		61 6c 77 61 79 73 2d 6e		        .text "always-native"
>c253		61 74 69 76 65
.c258						nt_allow_native:
>c258		0c 00				        .byte 12, 0
>c25a		6c c2 1a 9a 25 9a		        .word nt_nc_limit, xt_allow_native, z_allow_native
>c260		61 6c 6c 6f 77 2d 6e 61		        .text "allow-native"
>c268		74 69 76 65
.c26c						nt_nc_limit:
>c26c		08 08				        .byte 8, NN
>c26e		7c c2 6e 9c 73 9c		        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
>c274		6e 63 2d 6c 69 6d 69 74		        .text "nc-limit"
.c27c						nt_strip_underflow:
>c27c		0f 08				        .byte 15, NN
>c27e		93 c2 c3 9d c8 9d		        .word nt_abort, xt_strip_underflow, z_strip_underflow
>c284		73 74 72 69 70 2d 75 6e		        .text "strip-underflow"
>c28c		64 65 72 66 6c 6f 77
.c293						nt_abort:
>c293		05 00				        .byte 5, 0
>c295		a0 c2 60 80 b1 80		        .word nt_abort_quote, xt_abort, z_abort
>c29b		61 62 6f 72 74			        .text "abort"
.c2a0						nt_abort_quote:
>c2a0		06 0d				        .byte 6, CO+IM+NN
>c2a2		ae c2 b1 80 bb 80		        .word nt_do, xt_abort_quote, z_abort_quote
>c2a8		61 62 6f 72 74 22		        .text "abort", $22
.c2ae						nt_do:
>c2ae		02 0d				        .byte 2, CO+IM+NN
>c2b0		b8 c2 9e 86 d7 86		        .word nt_question_do, xt_do, z_do
>c2b6		64 6f				        .text "do"
.c2b8						nt_question_do:
>c2b8		03 0d				        .byte 3, CO+IM+NN
>c2ba		c3 c2 9a 86 d7 86		        .word nt_i, xt_question_do, z_question_do
>c2c0		3f 64 6f			        .text "?do"
.c2c3						nt_i:
>c2c3		01 01				        .byte 1, CO
>c2c5		cc c2 b5 8a c9 8a		        .word nt_j, xt_i, z_i
>c2cb		69				        .text "i"
.c2cc						nt_j:
>c2cc		01 01				        .byte 1, CO
>c2ce		d5 c2 45 8b 5e 8b		        .word nt_loop, xt_j, z_j
>c2d4		6a				        .text "j"
.c2d5						nt_loop:
>c2d5		04 05				        .byte 4, CO+IM
>c2d7		e1 c2 d7 8b 39 8c		        .word nt_plus_loop, xt_loop, z_loop
>c2dd		6c 6f 6f 70			        .text "loop"
.c2e1						nt_plus_loop:
>c2e1		05 05				        .byte 5, CO+IM
>c2e3		ee c2 e8 8b 39 8c		        .word nt_exit, xt_plus_loop, z_plus_loop
>c2e9		2b 6c 6f 6f 70			        .text "+loop"
.c2ee						nt_exit:
>c2ee		04 03				        .byte 4, AN+CO
>c2f0		fa c2 8f 89 90 89		        .word nt_unloop, xt_exit, z_exit
>c2f6		65 78 69 74			        .text "exit"
.c2fa						nt_unloop:
>c2fa		06 01				        .byte 6, CO
>c2fc		08 c3 52 97 61 97		        .word nt_leave, xt_unloop, z_unloop
>c302		75 6e 6c 6f 6f 70		        .text "unloop"
.c308						nt_leave:
>c308		05 05				        .byte 5, CO+IM
>c30a		15 c3 6c 8b 81 8b		        .word nt_recurse, xt_leave, z_leave
>c310		6c 65 61 76 65			        .text "leave"
.c315						nt_recurse:
>c315		07 0d				        .byte 7, CO+IM+NN
>c317		24 c3 58 90 94 90		        .word nt_quit, xt_recurse, z_recurse
>c31d		72 65 63 75 72 73 65		        .text "recurse"
.c324						nt_quit:
>c324		04 00				        .byte 4, 0
>c326		30 c3 62 80 b1 80		        .word nt_begin, xt_quit, z_quit
>c32c		71 75 69 74			        .text "quit"
.c330						nt_begin:
>c330		05 07				        .byte 5, AN+CO+IM
>c332		3d c3 0d 83 10 83		        .word nt_again, xt_begin, z_begin
>c338		62 65 67 69 6e			        .text "begin"
.c33d						nt_again:
>c33d		05 17				        .byte 5, AN+CO+IM+UF
>c33f		4a c3 21 82 2e 82		        .word nt_state, xt_again, z_again
>c345		61 67 61 69 6e			        .text "again"
.c34a						nt_state:
>c34a		05 00				        .byte 5, 0
>c34c		57 c3 9d 93 a7 93		        .word nt_evaluate, xt_state, z_state
>c352		73 74 61 74 65			        .text "state"
.c357						nt_evaluate:
>c357		08 10				        .byte 8, UF
>c359		67 c3 28 8a 7b 8a		        .word nt_base, xt_evaluate, z_evaluate
>c35f		65 76 61 6c 75 61 74 65		        .text "evaluate"
.c367						nt_base:
>c367		04 00				        .byte 4, 0
>c369		73 c3 04 83 0c 83		        .word nt_digit_question, xt_base, z_base
>c36f		62 61 73 65			        .text "base"
.c373						nt_digit_question:
>c373		06 10				        .byte 6, UF
>c375		81 c3 a0 9a d4 9a		        .word nt_number, xt_digit_question, z_digit_question
>c37b		64 69 67 69 74 3f		        .text "digit?"
.c381						nt_number:
>c381		06 10				        .byte 6, UF
>c383		8f c3 9d 9c 96 9d		        .word nt_to_number, xt_number, z_number
>c389		6e 75 6d 62 65 72		        .text "number"
.c38f						nt_to_number:
>c38f		07 10				        .byte 7, UF
>c391		9e c3 5c 94 fb 94		        .word nt_hex, xt_to_number, z_to_number
>c397		3e 6e 75 6d 62 65 72		        .text ">number"
.c39e						nt_hex:
>c39e		03 00				        .byte 3, 0
>c3a0		a9 c3 9c 8a a2 8a		        .word nt_decimal, xt_hex, z_hex
>c3a6		68 65 78			        .text "hex"
.c3a9						nt_decimal:
>c3a9		07 00				        .byte 7, 0
>c3ab		b8 c3 43 86 49 86		        .word nt_count, xt_decimal, z_decimal
>c3b1		64 65 63 69 6d 61 6c		        .text "decimal"
.c3b8						nt_count:
>c3b8		05 10				        .byte 5, UF
>c3ba		c5 c3 55 85 68 85		        .word nt_m_star, xt_count, z_count
>c3c0		63 6f 75 6e 74			        .text "count"
.c3c5						nt_m_star:
>c3c5		02 10				        .byte 2, UF
>c3c7		cf c3 7b 8c 95 8c		        .word nt_um_star, xt_m_star, z_m_star
>c3cd		6d 2a				        .text "m*"
.c3cf						nt_um_star:
>c3cf		03 10				        .byte 3, UF
>c3d1		da c3 0c 97 51 97		        .word nt_star, xt_um_star, z_um_star
>c3d7		75 6d 2a			        .text "um*"
.c3da						nt_star:
>c3da		01 10				        .byte 1, UF
>c3dc		e3 c3 7b 93 83 93		        .word nt_um_slash_mod, xt_star, z_star
>c3e2		2a				        .text "*"
.c3e3						nt_um_slash_mod:
>c3e3		06 10				        .byte 6, UF
>c3e5		f1 c3 ca 96 0b 97		        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
>c3eb		75 6d 2f 6d 6f 64		        .text "um/mod"
.c3f1						nt_sm_slash_rem:
>c3f1		06 10				        .byte 6, UF
>c3f3		ff c3 f0 92 18 93		        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
>c3f9		73 6d 2f 72 65 6d		        .text "sm/rem"
.c3ff						nt_fm_slash_mod:
>c3ff		06 10				        .byte 6, UF
>c401		0d c4 eb 89 21 8a		        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
>c407		66 6d 2f 6d 6f 64		        .text "fm/mod"
.c40d						nt_slash:
>c40d		01 10				        .byte 1, UF
>c40f		16 c4 d3 92 ef 92		        .word nt_slash_mod, xt_slash, z_slash
>c415		2f				        .text "/"
.c416						nt_slash_mod:
>c416		04 10				        .byte 4, UF
>c418		22 c4 d8 92 ef 92		        .word nt_mod, xt_slash_mod, z_slash_mod
>c41e		2f 6d 6f 64			        .text "/mod"
.c422						nt_mod:
>c422		03 10				        .byte 3, UF
>c424		2d c4 50 8d 58 8d		        .word nt_star_slash_mod, xt_mod, z_mod
>c42a		6d 6f 64			        .text "mod"
.c42d						nt_star_slash_mod:
>c42d		05 10				        .byte 5, UF
>c42f		3a c4 8d 93 9c 93		        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
>c435		2a 2f 6d 6f 64			        .text "*/mod"
.c43a						nt_star_slash:
>c43a		02 10				        .byte 2, UF
>c43c		44 c4 84 93 8c 93		        .word nt_backslash, xt_star_slash, z_star_slash
>c442		2a 2f				        .text "*/"
.c444						nt_backslash:
>c444		01 04				        .byte 1, IM
>c446		4d c4 d9 82 03 83		        .word nt_move, xt_backslash, z_backslash
>c44c		5c				        .byte '\'
.c44d						nt_move:
>c44d		04 18				        .byte 4, NN+UF
>c44f		59 c4 59 8d 77 8d		        .word nt_cmove_up, xt_move, z_move
>c455		6d 6f 76 65			        .text "move"
.c459						nt_cmove_up:
>c459		06 10				        .byte 6, UF
>c45b		67 c4 7e 9f b8 9f		        .word nt_cmove, xt_cmove_up, z_cmove_up
>c461		63 6d 6f 76 65 3e		        .text "cmove>"
.c467						nt_cmove:
>c467		05 10				        .byte 5, UF
>c469		74 c4 43 9f 7d 9f		        .word nt_pad, xt_cmove, z_cmove
>c46f		63 6d 6f 76 65			        .text "cmove"
.c474						nt_pad:
>c474		03 00				        .byte 3, 0
>c476		7f c4 6c 8e 7b 8e		        .word nt_cleave, xt_pad, z_pad
>c47c		70 61 64			        .text "pad"
.c47f						nt_cleave:
>c47f		06 10				        .byte 6, UF
>c481		8d c4 53 9a 9f 9a		        .word nt_hexstore, xt_cleave, z_cleave
>c487		63 6c 65 61 76 65		        .text "cleave"
.c48d						nt_hexstore:
>c48d		08 10				        .byte 8, UF
>c48f		9d c4 40 9b 92 9b		        .word nt_within, xt_hexstore, z_hexstore
>c495		68 65 78 73 74 6f 72 65		        .text "hexstore"
.c49d						nt_within:
>c49d		06 10				        .byte 6, UF
>c49f		ab c4 b4 97 c9 97		        .word nt_to_in, xt_within, z_within
>c4a5		77 69 74 68 69 6e		        .text "within"
.c4ab						nt_to_in:
>c4ab		03 00				        .byte 3, 0
>c4ad		b6 c4 51 94 5b 94		        .word nt_less_number_sign, xt_to_in, z_to_in
>c4b3		3e 69 6e			        .text ">in"
.c4b6						nt_less_number_sign:
>c4b6		02 00				        .byte 2, 0
>c4b8		c0 c4 87 8b 94 8b		        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
>c4be		3c 23				        .text "<#"
.c4c0						nt_number_sign:
>c4c0		01 10				        .byte 1, UF
>c4c2		c9 c4 b5 8d e9 8d		        .word nt_number_sign_s, xt_number_sign, z_number_sign
>c4c8		23				        .text "#"
.c4c9						nt_number_sign_s:
>c4c9		02 10				        .byte 2, UF
>c4cb		d3 c4 0c 8e 1c 8e		        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
>c4d1		23 73				        .text "#s"
.c4d3						nt_number_sign_greater:
>c4d3		02 10				        .byte 2, UF
>c4d5		dd c4 ea 8d 0b 8e		        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
>c4db		23 3e				        .text "#>"
.c4dd						nt_hold:
>c4dd		04 10				        .byte 4, UF
>c4df		e9 c4 a3 8a b4 8a		        .word nt_sign, xt_hold, z_hold
>c4e5		68 6f 6c 64			        .text "hold"
.c4e9						nt_sign:
>c4e9		04 10				        .byte 4, UF
>c4eb		f5 c4 be 92 d2 92		        .word nt_output, xt_sign, z_sign
>c4f1		73 69 67 6e			        .text "sign"
.c4f5						nt_output:
>c4f5		06 00				        .byte 6, 0
>c4f7		03 c5 a0 9d aa 9d		        .word nt_input, xt_output, z_output
>c4fd		6f 75 74 70 75 74		        .text "output"
.c503						nt_input:
>c503		05 00				        .byte 5, 0
>c505		10 c5 93 9b 9d 9b		        .word nt_cr, xt_input, z_input
>c50b		69 6e 70 75 74			        .text "input"
.c510						nt_cr:
>c510		02 00				        .byte 2, 0
>c512		1a c5 69 85 6e 85		        .word nt_page, xt_cr, z_cr
>c518		63 72				        .text "cr"
.c51a						nt_page:
>c51a		04 00				        .byte 4, 0
>c51c		26 c5 7c 8e 99 8e		        .word nt_at_xy, xt_page, z_page
>c522		70 61 67 65			        .text "page"
.c526						nt_at_xy:
>c526		05 10				        .byte 5, UF
>c528		33 c5 ab 82 d8 82		        .word nt_marker, xt_at_xy, z_at_xy
>c52e		61 74 2d 78 79			        .text "at-xy"
.c533						nt_marker:
>c533		06 04				        .byte 6, IM
>c535		41 c5 96 8c d3 8c		        .word nt_words, xt_marker, z_marker
>c53b		6d 61 72 6b 65 72		        .text "marker"
.c541						nt_words:
>c541		05 00				        .byte 5, 0
>c543		4e c5 bd 99 19 9a		        .word nt_wordsize, xt_words, z_words
>c549		77 6f 72 64 73			        .text "words"
.c54e						nt_wordsize:
>c54e		08 10				        .byte 8, UF
>c550		5e c5 dc 9d fc 9d		        .word nt_aligned, xt_wordsize, z_wordsize
>c556		77 6f 72 64 73 69 7a 65		        .text "wordsize"
.c55e						nt_aligned:
>c55e		07 00				        .byte 7, 0
>c560		6d c5 2f 82 2f 82		        .word nt_align, xt_align, z_align
>c566		61 6c 69 67 6e 65 64		        .text "aligned"
.c56d						nt_align:
>c56d		05 00				        .byte 5, 0
>c56f		7a c5 2f 82 2f 82		        .word nt_bell, xt_align, z_align
>c575		61 6c 69 67 6e			        .text "align"
.c57a						nt_bell:
>c57a		04 00				        .byte 4, 0
>c57c		86 c5 34 9a 39 9a		        .word nt_dump, xt_bell, z_bell
>c582		62 65 6c 6c			        .text "bell"
.c586						nt_dump:
>c586		04 10				        .byte 4, UF
>c588		92 c5 ad 98 13 99		        .word nt_dot_s, xt_dump, z_dump
>c58e		64 75 6d 70			        .text "dump"
.c592						nt_dot_s:
>c592		02 00				        .byte 2, 0
>c594		9c c5 69 98 ac 98		        .word +, xt_dot_s, z_dot_s
>c59a		2e 73				        .text ".s"
.c59c						+
.c59c						nt_disasm:
>c59c		06 10				        .byte 6, UF
>c59e		aa c5 c7 a1 cd a1		        .word +, xt_disasm, z_disasm
>c5a4		64 69 73 61 73 6d		        .text "disasm"
.c5aa						+
.c5aa						nt_compare:
>c5aa		07 10				        .byte 7, UF
>c5ac		b9 c5 b9 9f 1d a0		        .word nt_search, xt_compare, z_compare
>c5b2		63 6f 6d 70 61 72 65		        .text "compare"
.c5b9						nt_search:
>c5b9		06 18				        .byte 6, UF+NN
>c5bb		c7 c5 74 a0 12 a1		        .word +, xt_search, z_search
>c5c1		73 65 61 72 63 68		        .text "search"
.c5c7						+
.c5c7						nt_environment_q:
>c5c7		0c 10				        .byte 12, UF
>c5c9		db c5 53 88 cf 88		        .word +, xt_environment_q, z_environment_q
>c5cf		65 6e 76 69 72 6f 6e 6d		        .text "environment?"
>c5d7		65 6e 74 3f
.c5db						+
.c5db						nt_find:
>c5db		04 10				        .byte 4, UF
>c5dd		e7 c5 a3 89 ea 89		        .word nt_word, xt_find, z_find
>c5e3		66 69 6e 64			        .text "find"
.c5e7						nt_word:
>c5e7		04 10				        .byte 4, UF
>c5e9		f3 c5 ca 97 0d 98		        .word nt_paren, xt_word, z_word
>c5ef		77 6f 72 64			        .text "word"
.c5f3						nt_paren:
>c5f3		01 04				        .byte 1, IM
>c5f5		fc c5 9a 8e a9 8e		        .word nt_dot_paren, xt_paren, z_paren
>c5fb		28				        .text "("
.c5fc						nt_dot_paren:
>c5fc		02 04				        .byte 2, IM
>c5fe		06 c6 7d 87 8b 87		        .word nt_if, xt_dot_paren, z_dot_paren
>c604		2e 28				        .text ".("
.c606						nt_if:
>c606		02 0d				        .byte 2, IM+CO+NN
>c608		10 c6 ca 8a da 8a		        .word nt_then, xt_if, z_if
>c60e		69 66				        .text "if"
.c610						nt_then:
>c610		04 0d				        .byte 4, IM+CO+NN
>c612		1c c6 e5 87 2e 88		        .word nt_else, xt_then, z_then
>c618		74 68 65 6e			        .text "then"
.c61c						nt_else:
>c61c		04 0d				        .byte 4, IM+CO+NN
>c61e		28 c6 d9 87 2e 88		        .word nt_repeat, xt_else, z_else
>c624		65 6c 73 65			        .text "else"
.c628						nt_repeat:
>c628		06 0d				        .byte 6, IM+CO+NN
>c62a		36 c6 d7 90 dd 90		        .word nt_until, xt_repeat, z_repeat
>c630		72 65 70 65 61 74		        .text "repeat"
.c636						nt_until:
>c636		05 0d				        .byte 5, IM+CO+NN
>c638		43 c6 62 97 76 97		        .word nt_while, xt_until, z_until
>c63e		75 6e 74 69 6c			        .text "until"
.c643						nt_while:
>c643		05 0d				        .byte 5, IM+CO+NN
>c645		50 c6 a0 97 b3 97		        .word nt_case, xt_while, z_while
>c64b		77 68 69 6c 65			        .text "while"
.c650						nt_case:
>c650		04 0d				        .byte 4, IM+CO+NN
>c652		5c c6 fd 9d 03 9e		        .word nt_of, xt_case, z_case    ; shares code with ZERO
>c658		63 61 73 65			        .text "case"
.c65c						nt_of:
>c65c		02 0d				        .byte 2, IM+CO+NN
>c65e		66 c6 1d 8e 35 8e		        .word nt_endof, xt_of, z_of
>c664		6f 66				        .text "of"
.c666						nt_endof:
>c666		05 0d				        .byte 5, IM+CO+NN
>c668		73 c6 d9 87 2e 88		        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
>c66e		65 6e 64 6f 66			        .text "endof"
.c673						nt_endcase:
>c673		07 0d				        .byte 7, IM+CO+NN
>c675		82 c6 3e 88 52 88		        .word nt_defer_fetch, xt_endcase, z_endcase
>c67b		65 6e 64 63 61 73 65		        .text "endcase"
.c682						nt_defer_fetch:
>c682		06 00				        .byte 6, 0
>c684		90 c6 7d 86 83 86		        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
>c68a		64 65 66 65 72 40		        .text "defer@"
.c690						nt_defer_store:
>c690		06 00				        .byte 6, 0
>c692		9e c6 84 86 8a 86		        .word nt_is, xt_defer_store, z_defer_store
>c698		64 65 66 65 72 21		        .text "defer!"
.c69e						nt_is:
>c69e		02 04				        .byte 2, IM
>c6a0		a8 c6 2c 8b 44 8b		        .word nt_action_of, xt_is, z_is
>c6a6		69 73				        .text "is"
.c6a8						nt_action_of:
>c6a8		09 04				        .byte 9, IM
>c6aa		b9 c6 08 82 20 82		        .word nt_useraddr, xt_action_of, z_action_of
>c6b0		61 63 74 69 6f 6e 2d 6f		        .text "action-of"
>c6b8		66
.c6b9						nt_useraddr:
>c6b9		08 00				        .byte 8, 0
>c6bb		c9 c6 d1 9d db 9d		        .word nt_buffer_colon, xt_useraddr, z_useraddr
>c6c1		75 73 65 72 61 64 64 72		        .text "useraddr"
.c6c9						nt_buffer_colon:
>c6c9		07 00				        .byte 7, 0
>c6cb		d8 c6 28 83 2e 83		        .word +, xt_buffer_colon, z_buffer_colon
>c6d1		62 75 66 66 65 72 3a		        .text "buffer:"
.c6d8						+
.c6d8						nt_buffstatus:
>c6d8		0a 00				        .byte 10, 0
>c6da		ea c6 11 b0 16 b0		        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
>c6e0		62 75 66 66 73 74 61 74		        .text "buffstatus"
>c6e8		75 73
.c6ea						nt_buffblocknum:
>c6ea		0c 00				        .byte 12, 0
>c6ec		fe c6 db af e0 af		        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
>c6f2		62 75 66 66 62 6c 6f 63		        .text "buffblocknum"
>c6fa		6b 6e 75 6d
.c6fe						nt_blkbuffer:
>c6fe		09 00				        .byte 9, 0
>c700		0f c7 d1 ad de ad		        .word nt_scr, xt_blkbuffer, z_blkbuffer
>c706		62 6c 6b 62 75 66 66 65		        .text "blkbuffer"
>c70e		72
.c70f						nt_scr:
>c70f		03 08				        .byte 3, NN
>c711		1a c7 93 b0 98 b0		        .word nt_blk, xt_scr, z_scr
>c717		73 63 72			        .text "scr"
.c71a						nt_blk:
>c71a		03 08				        .byte 3, NN
>c71c		25 c7 cc ad d1 ad		        .word nt_block_write, xt_blk, z_blk
>c722		62 6c 6b			        .text "blk"
.c725						nt_block_write:
>c725		0b 08				        .byte 11, NN ; Deferred words need the HC (Code Field) flag.
>c727		38 c7 c8 af d6 af		        .word nt_block_write_vector, xt_block_write, z_block_write
>c72d		62 6c 6f 63 6b 2d 77 72		        .text "block-write"
>c735		69 74 65
.c738						nt_block_write_vector:
>c738		12 08				        .byte 18, NN ; Deferred words need the HC (Code Field) flag.
>c73a		52 c7 d6 af db af		        .word nt_block_read, xt_block_write_vector, z_block_write_vector
>c740		62 6c 6f 63 6b 2d 77 72		        .text "block-write-vector"
>c748		69 74 65 2d 76 65 63 74 6f 72
.c752						nt_block_read:
>c752		0a 28				        .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
>c754		64 c7 b0 af be af		        .word nt_block_read_vector, xt_block_read, z_block_read
>c75a		62 6c 6f 63 6b 2d 72 65		        .text "block-read"
>c762		61 64
.c764						nt_block_read_vector:
>c764		11 28				        .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
>c766		7d c7 be af c3 af		        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
>c76c		62 6c 6f 63 6b 2d 72 65		        .text "block-read-vector"
>c774		61 64 2d 76 65 63 74 6f 72
.c77d						nt_save_buffers:
>c77d		0c 00				        .byte 12, 0
>c77f		91 c7 78 b0 92 b0		        .word nt_block, xt_save_buffers, z_save_buffers
>c785		73 61 76 65 2d 62 75 66		        .text "save-buffers"
>c78d		66 65 72 73
.c791						nt_block:
>c791		05 00				        .byte 5, 0
>c793		9e c7 df ad 31 ae		        .word nt_update, xt_block, z_block
>c799		62 6c 6f 63 6b			        .text "block"
.c79e						nt_update:
>c79e		06 00				        .byte 6, 0
>c7a0		ac c7 dd b0 e5 b0		        .word nt_buffer, xt_update, z_update
>c7a6		75 70 64 61 74 65		        .text "update"
.c7ac						nt_buffer:
>c7ac		06 00				        .byte 6, 0
>c7ae		ba c7 e0 af 10 b0		        .word nt_empty_buffers, xt_buffer, z_buffer
>c7b4		62 75 66 66 65 72		        .text "buffer"
.c7ba						nt_empty_buffers:
>c7ba		0d 00				        .byte 13, 0
>c7bc		cf c7 16 b0 1c b0		        .word nt_flush, xt_empty_buffers, z_empty_buffers
>c7c2		65 6d 70 74 79 2d 62 75		        .text "empty-buffers"
>c7ca		66 66 65 72 73
.c7cf						nt_flush:
>c7cf		05 00				        .byte 5, 0
>c7d1		dc c7 1d b0 26 b0		        .word nt_load, xt_flush, z_flush
>c7d7		66 6c 75 73 68			        .text "flush"
.c7dc						nt_load:
>c7dc		04 10				        .byte 4, UF
>c7de		e8 c7 34 b0 77 b0		        .word nt_thru, xt_load, z_load
>c7e4		6c 6f 61 64			        .text "load"
.c7e8						nt_thru:
>c7e8		04 10				        .byte 4, UF
>c7ea		f4 c7 98 b0 dc b0		        .word +, xt_thru, z_thru
>c7f0		74 68 72 75			        .text "thru"
.c7f4						+
.c7f4						nt_list:
>c7f4		04 10				        .byte 4, UF
>c7f6		00 c8 27 b0 33 b0		        .word nt_block_c65_init, xt_list, z_list
>c7fc		6c 69 73 74			        .text "list"
.c800						nt_block_c65_init:
>c800		0e 00				        .byte 14, 0
>c802		16 c8 32 ae 67 ae		        .word +, xt_block_c65_init, z_block_c65_init
>c808		62 6c 6f 63 6b 2d 63 36		        .text "block-c65-init"
>c810		35 2d 69 6e 69 74
.c816						+
.c816						nt_block_ramdrive_init:
>c816		13 10				        .byte 19, UF
>c818		31 c8 8a ae 97 ae		        .word +, xt_block_ramdrive_init, z_block_ramdrive_init
>c81e		62 6c 6f 63 6b 2d 72 61		        .text "block-ramdrive-init"
>c826		6d 64 72 69 76 65 2d 69 6e 69 74
.c831						+
.c831						nt_definitions:
>c831		0b 00				        .byte 11, 0
>c833		44 c8 1c b2 24 b2		        .word nt_wordlist, xt_definitions, z_definitions
>c839		64 65 66 69 6e 69 74 69		        .text "definitions"
>c841		6f 6e 73
.c844						nt_wordlist:
>c844		08 00				        .byte 8, 0
>c846		54 c8 87 b3 9d b3		        .word nt_search_wordlist, xt_wordlist, z_wordlist
>c84c		77 6f 72 64 6c 69 73 74		        .text "wordlist"
.c854						nt_search_wordlist:
>c854		0f 10				        .byte 15, UF
>c856		6b c8 c0 b2 33 b3		        .word nt_set_current, xt_search_wordlist, z_search_wordlist
>c85c		73 65 61 72 63 68 2d 77		        .text "search-wordlist"
>c864		6f 72 64 6c 69 73 74
.c86b						nt_set_current:
>c86b		0b 10				        .byte 11, UF
>c86d		7e c8 34 b3 3f b3		        .word nt_get_current, xt_set_current, z_set_current
>c873		73 65 74 2d 63 75 72 72		        .text "set-current"
>c87b		65 6e 74
.c87e						nt_get_current:
>c87e		0b 00				        .byte 11, 0
>c880		91 c8 2c b2 36 b2		        .word nt_set_order, xt_get_current, z_get_current
>c886		67 65 74 2d 63 75 72 72		        .text "get-current"
>c88e		65 6e 74
.c891						nt_set_order:
>c891		09 00				        .byte 9, 0
>c893		a2 c8 40 b3 73 b3		        .word nt_get_order, xt_set_order, z_set_order
>c899		73 65 74 2d 6f 72 64 65		        .text "set-order"
>c8a1		72
.c8a2						nt_get_order:
>c8a2		09 00				        .byte 9, 0
>c8a4		b3 c8 37 b2 5f b2		        .word nt_root_wordlist, xt_get_order, z_get_order
>c8aa		67 65 74 2d 6f 72 64 65		        .text "get-order"
>c8b2		72
.c8b3						nt_root_wordlist:
>c8b3		0d 00				        .byte 13, 0
>c8b5		c8 c8 b7 b2 bf b2		        .word +, xt_root_wordlist, z_root_wordlist
>c8bb		72 6f 6f 74 2d 77 6f 72		        .text "root-wordlist"
>c8c3		64 6c 69 73 74
.c8c8						+
.c8c8						nt_assembler_wordlist:
>c8c8		12 00				        .byte 18, 0
>c8ca		e2 c8 c8 9d d0 9d		        .word +, xt_assembler_wordlist, z_assembler_wordlist
>c8d0		61 73 73 65 6d 62 6c 65		        .text "assembler-wordlist"
>c8d8		72 2d 77 6f 72 64 6c 69 73 74
.c8e2						+
.c8e2						nt_editor_wordlist:
>c8e2		0f 00				        .byte 15, 0
>c8e4		f9 c8 97 9d 9f 9d		        .word +, xt_editor_wordlist, z_editor_wordlist
>c8ea		65 64 69 74 6f 72 2d 77		        .text "editor-wordlist"
>c8f2		6f 72 64 6c 69 73 74
.c8f9						+
.c8f9						nt_forth_wordlist:
>c8f9		0e 00				        .byte 14, 0
>c8fb		0f c9 fd 9d 03 9e		        .word nt_only, xt_forth_wordlist, z_forth_wordlist
>c901		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c909		72 64 6c 69 73 74
.c90f						nt_only:
>c90f		04 00				        .byte 4, 0
>c911		1b c9 60 b2 66 b2		        .word nt_also, xt_only, z_only
>c917		6f 6e 6c 79			        .text "only"
.c91b						nt_also:
>c91b		04 00				        .byte 4, 0
>c91d		27 c9 0c b2 1b b2		        .word nt_previous, xt_also, z_also
>c923		61 6c 73 6f			        .text "also"
.c927						nt_previous:
>c927		08 00				        .byte 8, 0
>c929		37 c9 aa b2 b6 b2		        .word nt_to_order, xt_previous, z_previous
>c92f		70 72 65 76 69 6f 75 73		        .text "previous"
.c937						nt_to_order:
>c937		06 00				        .byte 6, 0
>c939		45 c9 74 b3 86 b3		        .word nt_order, xt_to_order, z_to_order
>c93f		3e 6f 72 64 65 72		        .text ">order"
.c945						nt_order:
>c945		05 00				        .byte 5, 0
>c947		52 c9 67 b2 91 b2		        .word nt_forth, xt_order, z_order
>c94d		6f 72 64 65 72			        .text "order"
.c952						nt_forth:
>c952		05 00				        .byte 5, 0
>c954		5f c9 25 b2 2b b2		        .word +, xt_forth, z_forth
>c95a		66 6f 72 74 68			        .text "forth"
.c95f						+
>c95f		03 08				nt_see: .byte 3, NN
>c961		6a c9 2f 99 bc 99		        .word +, xt_see, z_see
>c967		73 65 65			        .text "see"
.c96a						+
.c96a						nt_ed:
>c96a		03 08				        .byte 3, NN
>c96c		75 c9 d9 a7 dc a7		        .word +, xt_ed, z_ed
>c972		65 64 3a			        .text "ed:"
.c975						+
.c975						nt_cold:
>c975		04 00				        .byte 4, 0
>c977		81 c9 00 80 b1 80		        .word nt_bye, xt_cold, z_cold
>c97d		63 6f 6c 64			        .text "cold"
.c981						nt_bye:
>c981		03				        .byte 3         ; length of word strings
>c982		00				        .byte 0         ; status byte
>c983		00 00				        .word 0000      ; next word in Dictionary, 0000 signals end
>c985		66 98				        .word xt_bye    ; start of code block (xt of this word)
>c987		69 98				        .word z_bye     ; end of code (RTS)
>c989		62 79 65			        .text "bye"     ; word name, always lower case, not zero-terminated
.c98c						root_dictionary_start:
.c98c						nt_root_set_order:
>c98c		09 00				        .byte 9, 0
>c98e		9d c9 40 b3 73 b3		        .word nt_root_forth, xt_set_order, z_set_order
>c994		73 65 74 2d 6f 72 64 65		        .text "set-order"
>c99c		72
.c99d						nt_root_forth:
>c99d		05 00				        .byte 5, 0
>c99f		aa c9 25 b2 2b b2		        .word nt_root_forth_wordlist, xt_forth, z_forth
>c9a5		66 6f 72 74 68			        .text "forth"
.c9aa						nt_root_forth_wordlist:
>c9aa		0e 00				        .byte 14, 0
>c9ac		c0 c9 fd 9d 03 9e		        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
>c9b2		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c9ba		72 64 6c 69 73 74
.c9c0						nt_root_words:
>c9c0		05 00				        .byte 5, 0
>c9c2		00 00 bd 99 19 9a		        .word 0000, xt_words, z_words
>c9c8		77 6f 72 64 73			        .text "words"
.c9cd						editor_dictionary_start:
.c9cd						nt_editor_o:
>c9cd		01 00				        .byte 1, 0
>c9cf		d6 c9 c6 b1 0b b2		        .word nt_editor_line, xt_editor_o, z_editor_o
>c9d5		6f				        .text "o"
.c9d6						nt_editor_line:
>c9d6		04 10				        .byte 4, UF
>c9d8		e2 c9 ad b1 c5 b1		        .word nt_editor_l, xt_editor_line, z_editor_line
>c9de		6c 69 6e 65			        .text "line"
.c9e2						nt_editor_l:
>c9e2		01 00				        .byte 1, 0
>c9e4		eb c9 33 b1 ac b1		        .word nt_editor_el, xt_editor_l, z_editor_l
>c9ea		6c				        .text "l"
.c9eb						nt_editor_el:
>c9eb		02 00				        .byte 2, 0
>c9ed		f5 c9 21 b1 32 b1		        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
>c9f3		65 6c				        .text "el"
.c9f5						nt_editor_erase_screen:
>c9f5		0c 00				        .byte 12, 0
>c9f7		09 ca 0f b1 20 b1		        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
>c9fd		65 72 61 73 65 2d 73 63		        .text "erase-screen"
>ca05		72 65 65 6e
.ca09						nt_editor_enter_screen:
>ca09		0c 00				        .byte 12, 0
>ca0b		00 00 f3 b0 0e b1		        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
>ca11		65 6e 74 65 72 2d 73 63		        .text "enter-screen"
>ca19		72 65 65 6e
.ca1d						assembler_dictionary_start:
.ca1d						nt_asm_adc_h:
>ca1d		05 0c						.byte 5, IM+NN
>ca1f		2a ca				                .word nt_asm_adc_x
>ca21		23 a4 28 a4					.word xt_asm_adc_h, z_asm_adc_h
>ca25		61 64 63 2e 23					.text "adc.#"
.ca2a						nt_asm_adc_x:
>ca2a		05 0c						.byte 5, IM+NN
>ca2c		37 ca				                .word nt_asm_adc_y
>ca2e		28 a4 2d a4					.word xt_asm_adc_x, z_asm_adc_x
>ca32		61 64 63 2e 78					.text "adc.x"
.ca37						nt_asm_adc_y:
>ca37		05 0c						.byte 5, IM+NN
>ca39		44 ca				                .word nt_asm_adc_z
>ca3b		2d a4 32 a4					.word xt_asm_adc_y, z_asm_adc_y
>ca3f		61 64 63 2e 79					.text "adc.y"
.ca44						nt_asm_adc_z:
>ca44		05 0c						.byte 5, IM+NN
>ca46		51 ca				                .word nt_asm_adc_zi
>ca48		32 a4 37 a4					.word xt_asm_adc_z, z_asm_adc_z
>ca4c		61 64 63 2e 7a					.text "adc.z"
.ca51						nt_asm_adc_zi:
>ca51		06 0c						.byte 6, IM+NN
>ca53		5f ca				                .word nt_asm_adc_ziy
>ca55		37 a4 3c a4					.word xt_asm_adc_zi, z_asm_adc_zi
>ca59		61 64 63 2e 7a 69				.text "adc.zi"
.ca5f						nt_asm_adc_ziy:
>ca5f		07 0c						.byte 7, IM+NN
>ca61		6e ca				                .word nt_asm_adc_zx
>ca63		3c a4 41 a4					.word xt_asm_adc_ziy, z_asm_adc_ziy
>ca67		61 64 63 2e 7a 69 79				.text "adc.ziy"
.ca6e						nt_asm_adc_zx:
>ca6e		06 0c						.byte 6, IM+NN
>ca70		7c ca				                .word nt_asm_adc_zxi
>ca72		41 a4 46 a4					.word xt_asm_adc_zx, z_asm_adc_zx
>ca76		61 64 63 2e 7a 78				.text "adc.zx"
.ca7c						nt_asm_adc_zxi:
>ca7c		07 0c						.byte 7, IM+NN
>ca7e		8b ca				                .word nt_asm_and
>ca80		46 a4 4b a4					.word xt_asm_adc_zxi, z_asm_adc_zxi
>ca84		61 64 63 2e 7a 78 69				.text "adc.zxi"
.ca8b						nt_asm_and:
>ca8b		04 0c						.byte 4, IM+NN
>ca8d		97 ca				                .word nt_asm_and_h
>ca8f		4b a4 50 a4					.word xt_asm_and, z_asm_and
>ca93		61 6e 64 2e					.text "and."
.ca97						nt_asm_and_h:
>ca97		05 0c						.byte 5, IM+NN
>ca99		a4 ca				                .word nt_asm_and_x
>ca9b		50 a4 55 a4					.word xt_asm_and_h, z_asm_and_h
>ca9f		61 6e 64 2e 23					.text "and.#"
.caa4						nt_asm_and_x:
>caa4		05 0c						.byte 5, IM+NN
>caa6		b1 ca				                .word nt_asm_and_y
>caa8		55 a4 5a a4					.word xt_asm_and_x, z_asm_and_x
>caac		61 6e 64 2e 78					.text "and.x"
.cab1						nt_asm_and_y:
>cab1		05 0c						.byte 5, IM+NN
>cab3		be ca				                .word nt_asm_and_z
>cab5		5a a4 5f a4					.word xt_asm_and_y, z_asm_and_y
>cab9		61 6e 64 2e 79					.text "and.y"
.cabe						nt_asm_and_z:
>cabe		05 0c						.byte 5, IM+NN
>cac0		cb ca				                .word nt_asm_and_zi
>cac2		5f a4 64 a4					.word xt_asm_and_z, z_asm_and_z
>cac6		61 6e 64 2e 7a					.text "and.z"
.cacb						nt_asm_and_zi:
>cacb		06 0c						.byte 6, IM+NN
>cacd		d9 ca				                .word nt_asm_and_ziy
>cacf		64 a4 69 a4					.word xt_asm_and_zi, z_asm_and_zi
>cad3		61 6e 64 2e 7a 69				.text "and.zi"
.cad9						nt_asm_and_ziy:
>cad9		07 0c						.byte 7, IM+NN
>cadb		e8 ca				                .word nt_asm_and_zx
>cadd		69 a4 6e a4					.word xt_asm_and_ziy, z_asm_and_ziy
>cae1		61 6e 64 2e 7a 69 79				.text "and.ziy"
.cae8						nt_asm_and_zx:
>cae8		06 0c						.byte 6, IM+NN
>caea		f6 ca				                .word nt_asm_and_zxi
>caec		6e a4 73 a4					.word xt_asm_and_zx, z_asm_and_zx
>caf0		61 6e 64 2e 7a 78				.text "and.zx"
.caf6						nt_asm_and_zxi:
>caf6		07 0c						.byte 7, IM+NN
>caf8		05 cb				                .word nt_asm_asl
>cafa		73 a4 78 a4					.word xt_asm_and_zxi, z_asm_and_zxi
>cafe		61 6e 64 2e 7a 78 69				.text "and.zxi"
.cb05						nt_asm_asl:
>cb05		03 0c						.byte 3, IM+NN
>cb07		10 cb				                .word nt_asm_asl_a
>cb09		78 a4 7d a4					.word xt_asm_asl, z_asm_asl
>cb0d		61 73 6c					.text "asl"
.cb10						nt_asm_asl_a:
>cb10		05 0c						.byte 5, IM+NN
>cb12		1d cb				                .word nt_asm_asl_x
>cb14		7d a4 82 a4					.word xt_asm_asl_a, z_asm_asl_a
>cb18		61 73 6c 2e 61					.text "asl.a"
.cb1d						nt_asm_asl_x:
>cb1d		05 0c						.byte 5, IM+NN
>cb1f		2a cb				                .word nt_asm_asl_z
>cb21		82 a4 87 a4					.word xt_asm_asl_x, z_asm_asl_x
>cb25		61 73 6c 2e 78					.text "asl.x"
.cb2a						nt_asm_asl_z:
>cb2a		05 0c						.byte 5, IM+NN
>cb2c		37 cb				                .word nt_asm_asl_zx
>cb2e		87 a4 8c a4					.word xt_asm_asl_z, z_asm_asl_z
>cb32		61 73 6c 2e 7a					.text "asl.z"
.cb37						nt_asm_asl_zx:
>cb37		06 0c						.byte 6, IM+NN
>cb39		45 cb				                .word nt_asm_bcc
>cb3b		8c a4 91 a4					.word xt_asm_asl_zx, z_asm_asl_zx
>cb3f		61 73 6c 2e 7a 78				.text "asl.zx"
.cb45						nt_asm_bcc:
>cb45		03 0c						.byte 3, IM+NN
>cb47		50 cb				                .word nt_asm_bcs
>cb49		91 a4 96 a4					.word xt_asm_bcc, z_asm_bcc
>cb4d		62 63 63					.text "bcc"
.cb50						nt_asm_bcs:
>cb50		03 0c						.byte 3, IM+NN
>cb52		5b cb				                .word nt_asm_beq
>cb54		96 a4 9d a4					.word xt_asm_bcs, z_asm_bcs
>cb58		62 63 73					.text "bcs"
.cb5b						nt_asm_beq:
>cb5b		03 0c						.byte 3, IM+NN
>cb5d		66 cb				                .word nt_asm_bit
>cb5f		9d a4 a2 a4					.word xt_asm_beq, z_asm_beq
>cb63		62 65 71					.text "beq"
.cb66						nt_asm_bit:
>cb66		03 0c						.byte 3, IM+NN
>cb68		71 cb				                .word nt_asm_bit_h
>cb6a		a2 a4 a7 a4					.word xt_asm_bit, z_asm_bit
>cb6e		62 69 74					.text "bit"
.cb71						nt_asm_bit_h:
>cb71		05 0c						.byte 5, IM+NN
>cb73		7e cb				                .word nt_asm_bit_x
>cb75		a7 a4 ac a4					.word xt_asm_bit_h, z_asm_bit_h
>cb79		62 69 74 2e 23					.text "bit.#"
.cb7e						nt_asm_bit_x:
>cb7e		05 0c						.byte 5, IM+NN
>cb80		8b cb				                .word nt_asm_bit_z
>cb82		ac a4 b1 a4					.word xt_asm_bit_x, z_asm_bit_x
>cb86		62 69 74 2e 78					.text "bit.x"
.cb8b						nt_asm_bit_z:
>cb8b		05 0c						.byte 5, IM+NN
>cb8d		98 cb				                .word nt_asm_bit_zx
>cb8f		b1 a4 b6 a4					.word xt_asm_bit_z, z_asm_bit_z
>cb93		62 69 74 2e 7a					.text "bit.z"
.cb98						nt_asm_bit_zx:
>cb98		06 0c						.byte 6, IM+NN
>cb9a		a6 cb				                .word nt_asm_bmi
>cb9c		b6 a4 bb a4					.word xt_asm_bit_zx, z_asm_bit_zx
>cba0		62 69 74 2e 7a 78				.text "bit.zx"
.cba6						nt_asm_bmi:
>cba6		03 0c						.byte 3, IM+NN
>cba8		b1 cb				                .word nt_asm_bne
>cbaa		bb a4 c0 a4					.word xt_asm_bmi, z_asm_bmi
>cbae		62 6d 69					.text "bmi"
.cbb1						nt_asm_bne:
>cbb1		03 0c						.byte 3, IM+NN
>cbb3		bc cb				                .word nt_asm_bpl
>cbb5		c0 a4 c5 a4					.word xt_asm_bne, z_asm_bne
>cbb9		62 6e 65					.text "bne"
.cbbc						nt_asm_bpl:
>cbbc		03 0c						.byte 3, IM+NN
>cbbe		c7 cb				                .word nt_asm_bra
>cbc0		c5 a4 ca a4					.word xt_asm_bpl, z_asm_bpl
>cbc4		62 70 6c					.text "bpl"
.cbc7						nt_asm_bra:
>cbc7		03 0c						.byte 3, IM+NN
>cbc9		d2 cb				                .word nt_asm_brk
>cbcb		ca a4 cf a4					.word xt_asm_bra, z_asm_bra
>cbcf		62 72 61					.text "bra"
.cbd2						nt_asm_brk:
>cbd2		03 0c						.byte 3, IM+NN
>cbd4		dd cb				                .word nt_asm_bvc
>cbd6		cf a4 d4 a4					.word xt_asm_brk, z_asm_brk
>cbda		62 72 6b					.text "brk"
.cbdd						nt_asm_bvc:
>cbdd		03 0c						.byte 3, IM+NN
>cbdf		e8 cb				                .word nt_asm_bvs
>cbe1		d4 a4 d9 a4					.word xt_asm_bvc, z_asm_bvc
>cbe5		62 76 63					.text "bvc"
.cbe8						nt_asm_bvs:
>cbe8		03 0c						.byte 3, IM+NN
>cbea		f3 cb				                .word nt_asm_clc
>cbec		d9 a4 de a4					.word xt_asm_bvs, z_asm_bvs
>cbf0		62 76 73					.text "bvs"
.cbf3						nt_asm_clc:
>cbf3		03 0c						.byte 3, IM+NN
>cbf5		fe cb				                .word nt_asm_cld
>cbf7		de a4 e3 a4					.word xt_asm_clc, z_asm_clc
>cbfb		63 6c 63					.text "clc"
.cbfe						nt_asm_cld:
>cbfe		03 0c						.byte 3, IM+NN
>cc00		09 cc				                .word nt_asm_cli
>cc02		e3 a4 e8 a4					.word xt_asm_cld, z_asm_cld
>cc06		63 6c 64					.text "cld"
.cc09						nt_asm_cli:
>cc09		03 0c						.byte 3, IM+NN
>cc0b		14 cc				                .word nt_asm_clv
>cc0d		e8 a4 ed a4					.word xt_asm_cli, z_asm_cli
>cc11		63 6c 69					.text "cli"
.cc14						nt_asm_clv:
>cc14		03 0c						.byte 3, IM+NN
>cc16		1f cc				                .word nt_asm_cmp
>cc18		ed a4 f2 a4					.word xt_asm_clv, z_asm_clv
>cc1c		63 6c 76					.text "clv"
.cc1f						nt_asm_cmp:
>cc1f		03 0c						.byte 3, IM+NN
>cc21		2a cc				                .word nt_asm_cmp_h
>cc23		f2 a4 f7 a4					.word xt_asm_cmp, z_asm_cmp
>cc27		63 6d 70					.text "cmp"
.cc2a						nt_asm_cmp_h:
>cc2a		05 0c						.byte 5, IM+NN
>cc2c		37 cc				                .word nt_asm_cmp_x
>cc2e		f7 a4 fc a4					.word xt_asm_cmp_h, z_asm_cmp_h
>cc32		63 6d 70 2e 23					.text "cmp.#"
.cc37						nt_asm_cmp_x:
>cc37		05 0c						.byte 5, IM+NN
>cc39		44 cc				                .word nt_asm_cmp_y
>cc3b		fc a4 01 a5					.word xt_asm_cmp_x, z_asm_cmp_x
>cc3f		63 6d 70 2e 78					.text "cmp.x"
.cc44						nt_asm_cmp_y:
>cc44		05 0c						.byte 5, IM+NN
>cc46		51 cc				                .word nt_asm_cmp_z
>cc48		01 a5 06 a5					.word xt_asm_cmp_y, z_asm_cmp_y
>cc4c		63 6d 70 2e 79					.text "cmp.y"
.cc51						nt_asm_cmp_z:
>cc51		05 0c						.byte 5, IM+NN
>cc53		5e cc				                .word nt_asm_cmp_zi
>cc55		06 a5 0b a5					.word xt_asm_cmp_z, z_asm_cmp_z
>cc59		63 6d 70 2e 7a					.text "cmp.z"
.cc5e						nt_asm_cmp_zi:
>cc5e		06 0c						.byte 6, IM+NN
>cc60		6c cc				                .word nt_asm_cmp_ziy
>cc62		0b a5 10 a5					.word xt_asm_cmp_zi, z_asm_cmp_zi
>cc66		63 6d 70 2e 7a 69				.text "cmp.zi"
.cc6c						nt_asm_cmp_ziy:
>cc6c		07 0c						.byte 7, IM+NN
>cc6e		7b cc				                .word nt_asm_cmp_zx
>cc70		10 a5 15 a5					.word xt_asm_cmp_ziy, z_asm_cmp_ziy
>cc74		63 6d 70 2e 7a 69 79				.text "cmp.ziy"
.cc7b						nt_asm_cmp_zx:
>cc7b		06 0c						.byte 6, IM+NN
>cc7d		89 cc				                .word nt_asm_cmp_zxi
>cc7f		15 a5 1a a5					.word xt_asm_cmp_zx, z_asm_cmp_zx
>cc83		63 6d 70 2e 7a 78				.text "cmp.zx"
.cc89						nt_asm_cmp_zxi:
>cc89		07 0c						.byte 7, IM+NN
>cc8b		98 cc				                .word nt_asm_cpx
>cc8d		1a a5 1f a5					.word xt_asm_cmp_zxi, z_asm_cmp_zxi
>cc91		63 6d 70 2e 7a 78 69				.text "cmp.zxi"
.cc98						nt_asm_cpx:
>cc98		03 0c						.byte 3, IM+NN
>cc9a		a3 cc				                .word nt_asm_cpx_h
>cc9c		1f a5 24 a5					.word xt_asm_cpx, z_asm_cpx
>cca0		63 70 78					.text "cpx"
.cca3						nt_asm_cpx_h:
>cca3		05 0c						.byte 5, IM+NN
>cca5		b0 cc				                .word nt_asm_cpx_z
>cca7		24 a5 29 a5					.word xt_asm_cpx_h, z_asm_cpx_h
>ccab		63 70 78 2e 23					.text "cpx.#"
.ccb0						nt_asm_cpx_z:
>ccb0		05 0c						.byte 5, IM+NN
>ccb2		bd cc				                .word nt_asm_cpy
>ccb4		29 a5 2e a5					.word xt_asm_cpx_z, z_asm_cpx_z
>ccb8		63 70 78 2e 7a					.text "cpx.z"
.ccbd						nt_asm_cpy:
>ccbd		03 0c						.byte 3, IM+NN
>ccbf		c8 cc				                .word nt_asm_cpy_h
>ccc1		2e a5 35 a5					.word xt_asm_cpy, z_asm_cpy
>ccc5		63 70 79					.text "cpy"
.ccc8						nt_asm_cpy_h:
>ccc8		05 0c						.byte 5, IM+NN
>ccca		d5 cc				                .word nt_asm_cpy_z
>cccc		35 a5 3a a5					.word xt_asm_cpy_h, z_asm_cpy_h
>ccd0		63 70 79 2e 23					.text "cpy.#"
.ccd5						nt_asm_cpy_z:
>ccd5		05 0c						.byte 5, IM+NN
>ccd7		e2 cc				                .word nt_asm_dec
>ccd9		3a a5 3f a5					.word xt_asm_cpy_z, z_asm_cpy_z
>ccdd		63 70 79 2e 7a					.text "cpy.z"
.cce2						nt_asm_dec:
>cce2		03 0c						.byte 3, IM+NN
>cce4		ed cc				                .word nt_asm_dec_a
>cce6		3f a5 44 a5					.word xt_asm_dec, z_asm_dec
>ccea		64 65 63					.text "dec"
.cced						nt_asm_dec_a:
>cced		05 0c						.byte 5, IM+NN
>ccef		fa cc				                .word nt_asm_dec_x
>ccf1		44 a5 49 a5					.word xt_asm_dec_a, z_asm_dec_a
>ccf5		64 65 63 2e 61					.text "dec.a"
.ccfa						nt_asm_dec_x:
>ccfa		05 0c						.byte 5, IM+NN
>ccfc		07 cd				                .word nt_asm_dec_z
>ccfe		49 a5 4e a5					.word xt_asm_dec_x, z_asm_dec_x
>cd02		64 65 63 2e 78					.text "dec.x"
.cd07						nt_asm_dec_z:
>cd07		05 0c						.byte 5, IM+NN
>cd09		14 cd				                .word nt_asm_dec_zx
>cd0b		4e a5 53 a5					.word xt_asm_dec_z, z_asm_dec_z
>cd0f		64 65 63 2e 7a					.text "dec.z"
.cd14						nt_asm_dec_zx:
>cd14		06 0c						.byte 6, IM+NN
>cd16		22 cd				                .word nt_asm_dex
>cd18		53 a5 58 a5					.word xt_asm_dec_zx, z_asm_dec_zx
>cd1c		64 65 63 2e 7a 78				.text "dec.zx"
.cd22						nt_asm_dex:
>cd22		03 0c						.byte 3, IM+NN
>cd24		2d cd				                .word nt_asm_dey
>cd26		58 a5 5d a5					.word xt_asm_dex, z_asm_dex
>cd2a		64 65 78					.text "dex"
.cd2d						nt_asm_dey:
>cd2d		03 0c						.byte 3, IM+NN
>cd2f		38 cd				                .word nt_asm_eor
>cd31		5d a5 62 a5					.word xt_asm_dey, z_asm_dey
>cd35		64 65 79					.text "dey"
.cd38						nt_asm_eor:
>cd38		03 0c						.byte 3, IM+NN
>cd3a		43 cd				                .word nt_asm_eor_h
>cd3c		62 a5 67 a5					.word xt_asm_eor, z_asm_eor
>cd40		65 6f 72					.text "eor"
.cd43						nt_asm_eor_h:
>cd43		05 0c						.byte 5, IM+NN
>cd45		50 cd				                .word nt_asm_eor_x
>cd47		67 a5 6c a5					.word xt_asm_eor_h, z_asm_eor_h
>cd4b		65 6f 72 2e 23					.text "eor.#"
.cd50						nt_asm_eor_x:
>cd50		05 0c						.byte 5, IM+NN
>cd52		5d cd				                .word nt_asm_eor_y
>cd54		6c a5 71 a5					.word xt_asm_eor_x, z_asm_eor_x
>cd58		65 6f 72 2e 78					.text "eor.x"
.cd5d						nt_asm_eor_y:
>cd5d		05 0c						.byte 5, IM+NN
>cd5f		6a cd				                .word nt_asm_eor_z
>cd61		71 a5 76 a5					.word xt_asm_eor_y, z_asm_eor_y
>cd65		65 6f 72 2e 79					.text "eor.y"
.cd6a						nt_asm_eor_z:
>cd6a		05 0c						.byte 5, IM+NN
>cd6c		77 cd				                .word nt_asm_eor_zi
>cd6e		76 a5 7b a5					.word xt_asm_eor_z, z_asm_eor_z
>cd72		65 6f 72 2e 7a					.text "eor.z"
.cd77						nt_asm_eor_zi:
>cd77		06 0c						.byte 6, IM+NN
>cd79		85 cd				                .word nt_asm_eor_ziy
>cd7b		7b a5 80 a5					.word xt_asm_eor_zi, z_asm_eor_zi
>cd7f		65 6f 72 2e 7a 69				.text "eor.zi"
.cd85						nt_asm_eor_ziy:
>cd85		07 0c						.byte 7, IM+NN
>cd87		94 cd				                .word nt_asm_eor_zx
>cd89		80 a5 85 a5					.word xt_asm_eor_ziy, z_asm_eor_ziy
>cd8d		65 6f 72 2e 7a 69 79				.text "eor.ziy"
.cd94						nt_asm_eor_zx:
>cd94		06 0c						.byte 6, IM+NN
>cd96		a2 cd				                .word nt_asm_eor_zxi
>cd98		85 a5 8a a5					.word xt_asm_eor_zx, z_asm_eor_zx
>cd9c		65 6f 72 2e 7a 78				.text "eor.zx"
.cda2						nt_asm_eor_zxi:
>cda2		07 0c						.byte 7, IM+NN
>cda4		b1 cd				                .word nt_asm_inc
>cda6		8a a5 8f a5					.word xt_asm_eor_zxi, z_asm_eor_zxi
>cdaa		65 6f 72 2e 7a 78 69				.text "eor.zxi"
.cdb1						nt_asm_inc:
>cdb1		03 0c						.byte 3, IM+NN
>cdb3		bc cd				                .word nt_asm_inc_a
>cdb5		8f a5 94 a5					.word xt_asm_inc, z_asm_inc
>cdb9		69 6e 63					.text "inc"
.cdbc						nt_asm_inc_a:
>cdbc		05 0c						.byte 5, IM+NN
>cdbe		c9 cd				                .word nt_asm_inc_x
>cdc0		94 a5 99 a5					.word xt_asm_inc_a, z_asm_inc_a
>cdc4		69 6e 63 2e 61					.text "inc.a"
.cdc9						nt_asm_inc_x:
>cdc9		05 0c						.byte 5, IM+NN
>cdcb		d6 cd				                .word nt_asm_inc_z
>cdcd		99 a5 9e a5					.word xt_asm_inc_x, z_asm_inc_x
>cdd1		69 6e 63 2e 78					.text "inc.x"
.cdd6						nt_asm_inc_z:
>cdd6		05 0c						.byte 5, IM+NN
>cdd8		e3 cd				                .word nt_asm_inc_zx
>cdda		9e a5 a3 a5					.word xt_asm_inc_z, z_asm_inc_z
>cdde		69 6e 63 2e 7a					.text "inc.z"
.cde3						nt_asm_inc_zx:
>cde3		06 0c						.byte 6, IM+NN
>cde5		f1 cd				                .word nt_asm_inx
>cde7		a3 a5 a8 a5					.word xt_asm_inc_zx, z_asm_inc_zx
>cdeb		69 6e 63 2e 7a 78				.text "inc.zx"
.cdf1						nt_asm_inx:
>cdf1		03 0c						.byte 3, IM+NN
>cdf3		fc cd				                .word nt_asm_iny
>cdf5		a8 a5 ad a5					.word xt_asm_inx, z_asm_inx
>cdf9		69 6e 78					.text "inx"
.cdfc						nt_asm_iny:
>cdfc		03 0c						.byte 3, IM+NN
>cdfe		07 ce				                .word nt_asm_jmp
>ce00		ad a5 b2 a5					.word xt_asm_iny, z_asm_iny
>ce04		69 6e 79					.text "iny"
.ce07						nt_asm_jmp:
>ce07		03 0c						.byte 3, IM+NN
>ce09		12 ce				                .word nt_asm_jmp_i
>ce0b		b2 a5 b7 a5					.word xt_asm_jmp, z_asm_jmp
>ce0f		6a 6d 70					.text "jmp"
.ce12						nt_asm_jmp_i:
>ce12		05 0c						.byte 5, IM+NN
>ce14		1f ce				                .word nt_asm_jmp_xi
>ce16		b7 a5 bc a5					.word xt_asm_jmp_i, z_asm_jmp_i
>ce1a		6a 6d 70 2e 69					.text "jmp.i"
.ce1f						nt_asm_jmp_xi:
>ce1f		06 0c						.byte 6, IM+NN
>ce21		2d ce				                .word nt_asm_jsr
>ce23		bc a5 c1 a5					.word xt_asm_jmp_xi, z_asm_jmp_xi
>ce27		6a 6d 70 2e 78 69				.text "jmp.xi"
.ce2d						nt_asm_jsr:
>ce2d		03 0c						.byte 3, IM+NN
>ce2f		38 ce				                .word nt_asm_lda
>ce31		c1 a5 c6 a5					.word xt_asm_jsr, z_asm_jsr
>ce35		6a 73 72					.text "jsr"
.ce38						nt_asm_lda:
>ce38		03 0c						.byte 3, IM+NN
>ce3a		43 ce				                .word nt_asm_lda_h
>ce3c		c6 a5 cb a5					.word xt_asm_lda, z_asm_lda
>ce40		6c 64 61					.text "lda"
.ce43						nt_asm_lda_h:
>ce43		05 0c						.byte 5, IM+NN
>ce45		50 ce				                .word nt_asm_lda_x
>ce47		cb a5 d0 a5					.word xt_asm_lda_h, z_asm_lda_h
>ce4b		6c 64 61 2e 23					.text "lda.#"
.ce50						nt_asm_lda_x:
>ce50		05 0c						.byte 5, IM+NN
>ce52		5d ce				                .word nt_asm_lda_y
>ce54		d0 a5 d5 a5					.word xt_asm_lda_x, z_asm_lda_x
>ce58		6c 64 61 2e 78					.text "lda.x"
.ce5d						nt_asm_lda_y:
>ce5d		05 0c						.byte 5, IM+NN
>ce5f		6a ce				                .word nt_asm_lda_z
>ce61		d5 a5 da a5					.word xt_asm_lda_y, z_asm_lda_y
>ce65		6c 64 61 2e 79					.text "lda.y"
.ce6a						nt_asm_lda_z:
>ce6a		05 0c						.byte 5, IM+NN
>ce6c		77 ce				                .word nt_asm_lda_zi
>ce6e		da a5 df a5					.word xt_asm_lda_z, z_asm_lda_z
>ce72		6c 64 61 2e 7a					.text "lda.z"
.ce77						nt_asm_lda_zi:
>ce77		06 0c						.byte 6, IM+NN
>ce79		85 ce				                .word nt_asm_lda_ziy
>ce7b		df a5 e4 a5					.word xt_asm_lda_zi, z_asm_lda_zi
>ce7f		6c 64 61 2e 7a 69				.text "lda.zi"
.ce85						nt_asm_lda_ziy:
>ce85		07 0c						.byte 7, IM+NN
>ce87		94 ce				                .word nt_asm_lda_zx
>ce89		e4 a5 e9 a5					.word xt_asm_lda_ziy, z_asm_lda_ziy
>ce8d		6c 64 61 2e 7a 69 79				.text "lda.ziy"
.ce94						nt_asm_lda_zx:
>ce94		06 0c						.byte 6, IM+NN
>ce96		a2 ce				                .word nt_asm_lda_zxi
>ce98		e9 a5 ee a5					.word xt_asm_lda_zx, z_asm_lda_zx
>ce9c		6c 64 61 2e 7a 78				.text "lda.zx"
.cea2						nt_asm_lda_zxi:
>cea2		07 0c						.byte 7, IM+NN
>cea4		b1 ce				                .word nt_asm_ldx
>cea6		ee a5 f3 a5					.word xt_asm_lda_zxi, z_asm_lda_zxi
>ceaa		6c 64 61 2e 7a 78 69				.text "lda.zxi"
.ceb1						nt_asm_ldx:
>ceb1		03 0c						.byte 3, IM+NN
>ceb3		bc ce				                .word nt_asm_ldx_h
>ceb5		f3 a5 f8 a5					.word xt_asm_ldx, z_asm_ldx
>ceb9		6c 64 78					.text "ldx"
.cebc						nt_asm_ldx_h:
>cebc		05 0c						.byte 5, IM+NN
>cebe		c9 ce				                .word nt_asm_ldx_y
>cec0		f8 a5 fd a5					.word xt_asm_ldx_h, z_asm_ldx_h
>cec4		6c 64 78 2e 23					.text "ldx.#"
.cec9						nt_asm_ldx_y:
>cec9		05 0c						.byte 5, IM+NN
>cecb		d6 ce				                .word nt_asm_ldx_z
>cecd		fd a5 02 a6					.word xt_asm_ldx_y, z_asm_ldx_y
>ced1		6c 64 78 2e 79					.text "ldx.y"
.ced6						nt_asm_ldx_z:
>ced6		05 0c						.byte 5, IM+NN
>ced8		e3 ce				                .word nt_asm_ldx_zy
>ceda		02 a6 07 a6					.word xt_asm_ldx_z, z_asm_ldx_z
>cede		6c 64 78 2e 7a					.text "ldx.z"
.cee3						nt_asm_ldx_zy:
>cee3		06 0c						.byte 6, IM+NN
>cee5		f1 ce				                .word nt_asm_ldy
>cee7		07 a6 0c a6					.word xt_asm_ldx_zy, z_asm_ldx_zy
>ceeb		6c 64 78 2e 7a 79				.text "ldx.zy"
.cef1						nt_asm_ldy:
>cef1		03 0c						.byte 3, IM+NN
>cef3		fc ce				                .word nt_asm_ldy_h
>cef5		0c a6 11 a6					.word xt_asm_ldy, z_asm_ldy
>cef9		6c 64 79					.text "ldy"
.cefc						nt_asm_ldy_h:
>cefc		05 0c						.byte 5, IM+NN
>cefe		09 cf				                .word nt_asm_ldy_x
>cf00		11 a6 16 a6					.word xt_asm_ldy_h, z_asm_ldy_h
>cf04		6c 64 79 2e 23					.text "ldy.#"
.cf09						nt_asm_ldy_x:
>cf09		05 0c						.byte 5, IM+NN
>cf0b		16 cf				                .word nt_asm_ldy_z
>cf0d		16 a6 1b a6					.word xt_asm_ldy_x, z_asm_ldy_x
>cf11		6c 64 79 2e 78					.text "ldy.x"
.cf16						nt_asm_ldy_z:
>cf16		05 0c						.byte 5, IM+NN
>cf18		23 cf				                .word nt_asm_ldy_zx
>cf1a		1b a6 20 a6					.word xt_asm_ldy_z, z_asm_ldy_z
>cf1e		6c 64 79 2e 7a					.text "ldy.z"
.cf23						nt_asm_ldy_zx:
>cf23		06 0c						.byte 6, IM+NN
>cf25		31 cf				                .word nt_asm_lsr
>cf27		20 a6 25 a6					.word xt_asm_ldy_zx, z_asm_ldy_zx
>cf2b		6c 64 79 2e 7a 78				.text "ldy.zx"
.cf31						nt_asm_lsr:
>cf31		03 0c						.byte 3, IM+NN
>cf33		3c cf				                .word nt_asm_lsr_a
>cf35		25 a6 2a a6					.word xt_asm_lsr, z_asm_lsr
>cf39		6c 73 72					.text "lsr"
.cf3c						nt_asm_lsr_a:
>cf3c		05 0c						.byte 5, IM+NN
>cf3e		49 cf				                .word nt_asm_lsr_x
>cf40		2a a6 2f a6					.word xt_asm_lsr_a, z_asm_lsr_a
>cf44		6c 73 72 2e 61					.text "lsr.a"
.cf49						nt_asm_lsr_x:
>cf49		05 0c						.byte 5, IM+NN
>cf4b		56 cf				                .word nt_asm_lsr_z
>cf4d		2f a6 34 a6					.word xt_asm_lsr_x, z_asm_lsr_x
>cf51		6c 73 72 2e 78					.text "lsr.x"
.cf56						nt_asm_lsr_z:
>cf56		05 0c						.byte 5, IM+NN
>cf58		63 cf				                .word nt_asm_lsr_zx
>cf5a		34 a6 39 a6					.word xt_asm_lsr_z, z_asm_lsr_z
>cf5e		6c 73 72 2e 7a					.text "lsr.z"
.cf63						nt_asm_lsr_zx:
>cf63		06 0c						.byte 6, IM+NN
>cf65		71 cf				                .word nt_asm_nop
>cf67		39 a6 3e a6					.word xt_asm_lsr_zx, z_asm_lsr_zx
>cf6b		6c 73 72 2e 7a 78				.text "lsr.zx"
.cf71						nt_asm_nop:
>cf71		03 0c						.byte 3, IM+NN
>cf73		7c cf				                .word nt_asm_ora
>cf75		3e a6 43 a6					.word xt_asm_nop, z_asm_nop
>cf79		6e 6f 70					.text "nop"
.cf7c						nt_asm_ora:
>cf7c		03 0c						.byte 3, IM+NN
>cf7e		87 cf				                .word nt_asm_ora_h
>cf80		43 a6 48 a6					.word xt_asm_ora, z_asm_ora
>cf84		6f 72 61					.text "ora"
.cf87						nt_asm_ora_h:
>cf87		05 0c						.byte 5, IM+NN
>cf89		94 cf				                .word nt_asm_ora_x
>cf8b		48 a6 4d a6					.word xt_asm_ora_h, z_asm_ora_h
>cf8f		6f 72 61 2e 23					.text "ora.#"
.cf94						nt_asm_ora_x:
>cf94		05 0c						.byte 5, IM+NN
>cf96		a1 cf				                .word nt_asm_ora_y
>cf98		4d a6 52 a6					.word xt_asm_ora_x, z_asm_ora_x
>cf9c		6f 72 61 2e 78					.text "ora.x"
.cfa1						nt_asm_ora_y:
>cfa1		05 0c						.byte 5, IM+NN
>cfa3		ae cf				                .word nt_asm_ora_z
>cfa5		52 a6 57 a6					.word xt_asm_ora_y, z_asm_ora_y
>cfa9		6f 72 61 2e 79					.text "ora.y"
.cfae						nt_asm_ora_z:
>cfae		05 0c						.byte 5, IM+NN
>cfb0		bb cf				                .word nt_asm_ora_zi
>cfb2		57 a6 5c a6					.word xt_asm_ora_z, z_asm_ora_z
>cfb6		6f 72 61 2e 7a					.text "ora.z"
.cfbb						nt_asm_ora_zi:
>cfbb		06 0c						.byte 6, IM+NN
>cfbd		c9 cf				                .word nt_asm_ora_ziy
>cfbf		5c a6 63 a6					.word xt_asm_ora_zi, z_asm_ora_zi
>cfc3		6f 72 61 2e 7a 69				.text "ora.zi"
.cfc9						nt_asm_ora_ziy:
>cfc9		07 0c						.byte 7, IM+NN
>cfcb		d8 cf				                .word nt_asm_ora_zx
>cfcd		63 a6 68 a6					.word xt_asm_ora_ziy, z_asm_ora_ziy
>cfd1		6f 72 61 2e 7a 69 79				.text "ora.ziy"
.cfd8						nt_asm_ora_zx:
>cfd8		06 0c						.byte 6, IM+NN
>cfda		e6 cf				                .word nt_asm_ora_zxi
>cfdc		68 a6 6d a6					.word xt_asm_ora_zx, z_asm_ora_zx
>cfe0		6f 72 61 2e 7a 78				.text "ora.zx"
.cfe6						nt_asm_ora_zxi:
>cfe6		07 0c						.byte 7, IM+NN
>cfe8		f5 cf				                .word nt_asm_pha
>cfea		6d a6 72 a6					.word xt_asm_ora_zxi, z_asm_ora_zxi
>cfee		6f 72 61 2e 7a 78 69				.text "ora.zxi"
.cff5						nt_asm_pha:
>cff5		03 0c						.byte 3, IM+NN
>cff7		00 d0				                .word nt_asm_php
>cff9		72 a6 77 a6					.word xt_asm_pha, z_asm_pha
>cffd		70 68 61					.text "pha"
.d000						nt_asm_php:
>d000		03 0c						.byte 3, IM+NN
>d002		0b d0				                .word nt_asm_phx
>d004		77 a6 7c a6					.word xt_asm_php, z_asm_php
>d008		70 68 70					.text "php"
.d00b						nt_asm_phx:
>d00b		03 0c						.byte 3, IM+NN
>d00d		16 d0				                .word nt_asm_phy
>d00f		7c a6 81 a6					.word xt_asm_phx, z_asm_phx
>d013		70 68 78					.text "phx"
.d016						nt_asm_phy:
>d016		03 0c						.byte 3, IM+NN
>d018		21 d0				                .word nt_asm_pla
>d01a		81 a6 86 a6					.word xt_asm_phy, z_asm_phy
>d01e		70 68 79					.text "phy"
.d021						nt_asm_pla:
>d021		03 0c						.byte 3, IM+NN
>d023		2c d0				                .word nt_asm_plp
>d025		86 a6 8b a6					.word xt_asm_pla, z_asm_pla
>d029		70 6c 61					.text "pla"
.d02c						nt_asm_plp:
>d02c		03 0c						.byte 3, IM+NN
>d02e		37 d0				                .word nt_asm_plx
>d030		8b a6 90 a6					.word xt_asm_plp, z_asm_plp
>d034		70 6c 70					.text "plp"
.d037						nt_asm_plx:
>d037		03 0c						.byte 3, IM+NN
>d039		42 d0				                .word nt_asm_ply
>d03b		90 a6 95 a6					.word xt_asm_plx, z_asm_plx
>d03f		70 6c 78					.text "plx"
.d042						nt_asm_ply:
>d042		03 0c						.byte 3, IM+NN
>d044		4d d0				                .word nt_asm_rol
>d046		95 a6 9a a6					.word xt_asm_ply, z_asm_ply
>d04a		70 6c 79					.text "ply"
.d04d						nt_asm_rol:
>d04d		03 0c						.byte 3, IM+NN
>d04f		58 d0				                .word nt_asm_rol_a
>d051		9a a6 9f a6					.word xt_asm_rol, z_asm_rol
>d055		72 6f 6c					.text "rol"
.d058						nt_asm_rol_a:
>d058		05 0c						.byte 5, IM+NN
>d05a		65 d0				                .word nt_asm_rol_x
>d05c		9f a6 a4 a6					.word xt_asm_rol_a, z_asm_rol_a
>d060		72 6f 6c 2e 61					.text "rol.a"
.d065						nt_asm_rol_x:
>d065		05 0c						.byte 5, IM+NN
>d067		72 d0				                .word nt_asm_rol_z
>d069		a4 a6 a9 a6					.word xt_asm_rol_x, z_asm_rol_x
>d06d		72 6f 6c 2e 78					.text "rol.x"
.d072						nt_asm_rol_z:
>d072		05 0c						.byte 5, IM+NN
>d074		7f d0				                .word nt_asm_rol_zx
>d076		a9 a6 ae a6					.word xt_asm_rol_z, z_asm_rol_z
>d07a		72 6f 6c 2e 7a					.text "rol.z"
.d07f						nt_asm_rol_zx:
>d07f		06 0c						.byte 6, IM+NN
>d081		8d d0				                .word nt_asm_ror
>d083		ae a6 b3 a6					.word xt_asm_rol_zx, z_asm_rol_zx
>d087		72 6f 6c 2e 7a 78				.text "rol.zx"
.d08d						nt_asm_ror:
>d08d		03 0c						.byte 3, IM+NN
>d08f		98 d0				                .word nt_asm_ror_a
>d091		b3 a6 b8 a6					.word xt_asm_ror, z_asm_ror
>d095		72 6f 72					.text "ror"
.d098						nt_asm_ror_a:
>d098		05 0c						.byte 5, IM+NN
>d09a		a5 d0				                .word nt_asm_ror_x
>d09c		b8 a6 bd a6					.word xt_asm_ror_a, z_asm_ror_a
>d0a0		72 6f 72 2e 61					.text "ror.a"
.d0a5						nt_asm_ror_x:
>d0a5		05 0c						.byte 5, IM+NN
>d0a7		b2 d0				                .word nt_asm_ror_z
>d0a9		bd a6 c2 a6					.word xt_asm_ror_x, z_asm_ror_x
>d0ad		72 6f 72 2e 78					.text "ror.x"
.d0b2						nt_asm_ror_z:
>d0b2		05 0c						.byte 5, IM+NN
>d0b4		bf d0				                .word nt_asm_ror_zx
>d0b6		c2 a6 c7 a6					.word xt_asm_ror_z, z_asm_ror_z
>d0ba		72 6f 72 2e 7a					.text "ror.z"
.d0bf						nt_asm_ror_zx:
>d0bf		06 0c						.byte 6, IM+NN
>d0c1		cd d0				                .word nt_asm_rti
>d0c3		c7 a6 cc a6					.word xt_asm_ror_zx, z_asm_ror_zx
>d0c7		72 6f 72 2e 7a 78				.text "ror.zx"
.d0cd						nt_asm_rti:
>d0cd		03 0c						.byte 3, IM+NN
>d0cf		d8 d0				                .word nt_asm_rts
>d0d1		cc a6 d1 a6					.word xt_asm_rti, z_asm_rti
>d0d5		72 74 69					.text "rti"
.d0d8						nt_asm_rts:
>d0d8		03 0c						.byte 3, IM+NN
>d0da		e3 d0				                .word nt_asm_sbc
>d0dc		d1 a6 d6 a6					.word xt_asm_rts, z_asm_rts
>d0e0		72 74 73					.text "rts"
.d0e3						nt_asm_sbc:
>d0e3		03 0c						.byte 3, IM+NN
>d0e5		ee d0				                .word nt_asm_sbc_h
>d0e7		d6 a6 db a6					.word xt_asm_sbc, z_asm_sbc
>d0eb		73 62 63					.text "sbc"
.d0ee						nt_asm_sbc_h:
>d0ee		05 0c						.byte 5, IM+NN
>d0f0		fb d0				                .word nt_asm_sbc_x
>d0f2		db a6 e0 a6					.word xt_asm_sbc_h, z_asm_sbc_h
>d0f6		73 62 63 2e 23					.text "sbc.#"
.d0fb						nt_asm_sbc_x:
>d0fb		05 0c						.byte 5, IM+NN
>d0fd		08 d1				                .word nt_asm_sbc_y
>d0ff		e0 a6 e5 a6					.word xt_asm_sbc_x, z_asm_sbc_x
>d103		73 62 63 2e 78					.text "sbc.x"
.d108						nt_asm_sbc_y:
>d108		05 0c						.byte 5, IM+NN
>d10a		15 d1				                .word nt_asm_sbc_z
>d10c		e5 a6 ea a6					.word xt_asm_sbc_y, z_asm_sbc_y
>d110		73 62 63 2e 79					.text "sbc.y"
.d115						nt_asm_sbc_z:
>d115		05 0c						.byte 5, IM+NN
>d117		22 d1				                .word nt_asm_sbc_zi
>d119		ea a6 ef a6					.word xt_asm_sbc_z, z_asm_sbc_z
>d11d		73 62 63 2e 7a					.text "sbc.z"
.d122						nt_asm_sbc_zi:
>d122		06 0c						.byte 6, IM+NN
>d124		30 d1				                .word nt_asm_sbc_ziy
>d126		ef a6 f4 a6					.word xt_asm_sbc_zi, z_asm_sbc_zi
>d12a		73 62 63 2e 7a 69				.text "sbc.zi"
.d130						nt_asm_sbc_ziy:
>d130		07 0c						.byte 7, IM+NN
>d132		3f d1				                .word nt_asm_sbc_zx
>d134		f4 a6 f9 a6					.word xt_asm_sbc_ziy, z_asm_sbc_ziy
>d138		73 62 63 2e 7a 69 79				.text "sbc.ziy"
.d13f						nt_asm_sbc_zx:
>d13f		06 0c						.byte 6, IM+NN
>d141		4d d1				                .word nt_asm_sbc_zxi
>d143		f9 a6 fe a6					.word xt_asm_sbc_zx, z_asm_sbc_zx
>d147		73 62 63 2e 7a 78				.text "sbc.zx"
.d14d						nt_asm_sbc_zxi:
>d14d		07 0c						.byte 7, IM+NN
>d14f		5c d1				                .word nt_asm_sec
>d151		fe a6 02 a7					.word xt_asm_sbc_zxi, z_asm_sbc_zxi
>d155		73 62 63 2e 7a 78 69				.text "sbc.zxi"
.d15c						nt_asm_sec:
>d15c		03 0c						.byte 3, IM+NN
>d15e		67 d1				                .word nt_asm_sed
>d160		02 a7 06 a7					.word xt_asm_sec, z_asm_sec
>d164		73 65 63					.text "sec"
.d167						nt_asm_sed:
>d167		03 0c						.byte 3, IM+NN
>d169		72 d1				                .word nt_asm_sei
>d16b		06 a7 0a a7					.word xt_asm_sed, z_asm_sed
>d16f		73 65 64					.text "sed"
.d172						nt_asm_sei:
>d172		03 0c						.byte 3, IM+NN
>d174		7d d1				                .word nt_asm_sta
>d176		0a a7 0e a7					.word xt_asm_sei, z_asm_sei
>d17a		73 65 69					.text "sei"
.d17d						nt_asm_sta:
>d17d		03 0c						.byte 3, IM+NN
>d17f		88 d1				                .word nt_asm_sta_x
>d181		0e a7 12 a7					.word xt_asm_sta, z_asm_sta
>d185		73 74 61					.text "sta"
.d188						nt_asm_sta_x:
>d188		05 0c						.byte 5, IM+NN
>d18a		95 d1				                .word nt_asm_sta_y
>d18c		12 a7 16 a7					.word xt_asm_sta_x, z_asm_sta_x
>d190		73 74 61 2e 78					.text "sta.x"
.d195						nt_asm_sta_y:
>d195		05 0c						.byte 5, IM+NN
>d197		a2 d1				                .word nt_asm_sta_z
>d199		16 a7 1a a7					.word xt_asm_sta_y, z_asm_sta_y
>d19d		73 74 61 2e 79					.text "sta.y"
.d1a2						nt_asm_sta_z:
>d1a2		05 0c						.byte 5, IM+NN
>d1a4		af d1				                .word nt_asm_sta_zi
>d1a6		1a a7 1e a7					.word xt_asm_sta_z, z_asm_sta_z
>d1aa		73 74 61 2e 7a					.text "sta.z"
.d1af						nt_asm_sta_zi:
>d1af		06 0c						.byte 6, IM+NN
>d1b1		bd d1				                .word nt_asm_sta_ziy
>d1b3		1e a7 22 a7					.word xt_asm_sta_zi, z_asm_sta_zi
>d1b7		73 74 61 2e 7a 69				.text "sta.zi"
.d1bd						nt_asm_sta_ziy:
>d1bd		07 0c						.byte 7, IM+NN
>d1bf		cc d1				                .word nt_asm_sta_zx
>d1c1		22 a7 26 a7					.word xt_asm_sta_ziy, z_asm_sta_ziy
>d1c5		73 74 61 2e 7a 69 79				.text "sta.ziy"
.d1cc						nt_asm_sta_zx:
>d1cc		06 0c						.byte 6, IM+NN
>d1ce		da d1				                .word nt_asm_sta_zxi
>d1d0		26 a7 2a a7					.word xt_asm_sta_zx, z_asm_sta_zx
>d1d4		73 74 61 2e 7a 78				.text "sta.zx"
.d1da						nt_asm_sta_zxi:
>d1da		07 0c						.byte 7, IM+NN
>d1dc		e9 d1				                .word nt_asm_stx
>d1de		2a a7 2e a7					.word xt_asm_sta_zxi, z_asm_sta_zxi
>d1e2		73 74 61 2e 7a 78 69				.text "sta.zxi"
.d1e9						nt_asm_stx:
>d1e9		03 0c						.byte 3, IM+NN
>d1eb		f4 d1				                .word nt_asm_stx_z
>d1ed		2e a7 32 a7					.word xt_asm_stx, z_asm_stx
>d1f1		73 74 78					.text "stx"
.d1f4						nt_asm_stx_z:
>d1f4		05 0c						.byte 5, IM+NN
>d1f6		01 d2				                .word nt_asm_stx_zy
>d1f8		32 a7 36 a7					.word xt_asm_stx_z, z_asm_stx_z
>d1fc		73 74 78 2e 7a					.text "stx.z"
.d201						nt_asm_stx_zy:
>d201		06 0c						.byte 6, IM+NN
>d203		0f d2				                .word nt_asm_sty
>d205		36 a7 3a a7					.word xt_asm_stx_zy, z_asm_stx_zy
>d209		73 74 78 2e 7a 79				.text "stx.zy"
.d20f						nt_asm_sty:
>d20f		03 0c						.byte 3, IM+NN
>d211		1a d2				                .word nt_asm_sty_z
>d213		3a a7 3e a7					.word xt_asm_sty, z_asm_sty
>d217		73 74 79					.text "sty"
.d21a						nt_asm_sty_z:
>d21a		05 0c						.byte 5, IM+NN
>d21c		27 d2				                .word nt_asm_sty_zx
>d21e		3e a7 42 a7					.word xt_asm_sty_z, z_asm_sty_z
>d222		73 74 79 2e 7a					.text "sty.z"
.d227						nt_asm_sty_zx:
>d227		06 0c						.byte 6, IM+NN
>d229		35 d2				                .word nt_asm_stz
>d22b		42 a7 46 a7					.word xt_asm_sty_zx, z_asm_sty_zx
>d22f		73 74 79 2e 7a 78				.text "sty.zx"
.d235						nt_asm_stz:
>d235		03 0c						.byte 3, IM+NN
>d237		40 d2				                .word nt_asm_stz_x
>d239		46 a7 4a a7					.word xt_asm_stz, z_asm_stz
>d23d		73 74 7a					.text "stz"
.d240						nt_asm_stz_x:
>d240		05 0c						.byte 5, IM+NN
>d242		4d d2				                .word nt_asm_stz_z
>d244		4a a7 4e a7					.word xt_asm_stz_x, z_asm_stz_x
>d248		73 74 7a 2e 78					.text "stz.x"
.d24d						nt_asm_stz_z:
>d24d		05 0c						.byte 5, IM+NN
>d24f		5a d2				                .word nt_asm_stz_zx
>d251		4e a7 52 a7					.word xt_asm_stz_z, z_asm_stz_z
>d255		73 74 7a 2e 7a					.text "stz.z"
.d25a						nt_asm_stz_zx:
>d25a		06 0c						.byte 6, IM+NN
>d25c		68 d2				                .word nt_asm_tax
>d25e		52 a7 56 a7					.word xt_asm_stz_zx, z_asm_stz_zx
>d262		73 74 7a 2e 7a 78				.text "stz.zx"
.d268						nt_asm_tax:
>d268		03 0c						.byte 3, IM+NN
>d26a		73 d2				                .word nt_asm_tay
>d26c		56 a7 5a a7					.word xt_asm_tax, z_asm_tax
>d270		74 61 78					.text "tax"
.d273						nt_asm_tay:
>d273		03 0c						.byte 3, IM+NN
>d275		7e d2				                .word nt_asm_trb
>d277		5a a7 5e a7					.word xt_asm_tay, z_asm_tay
>d27b		74 61 79					.text "tay"
.d27e						nt_asm_trb:
>d27e		03 0c						.byte 3, IM+NN
>d280		89 d2				                .word nt_asm_trb_z
>d282		5e a7 62 a7					.word xt_asm_trb, z_asm_trb
>d286		74 72 62					.text "trb"
.d289						nt_asm_trb_z:
>d289		05 0c						.byte 5, IM+NN
>d28b		96 d2				                .word nt_asm_tsb
>d28d		62 a7 66 a7					.word xt_asm_trb_z, z_asm_trb_z
>d291		74 72 62 2e 7a					.text "trb.z"
.d296						nt_asm_tsb:
>d296		03 0c						.byte 3, IM+NN
>d298		a1 d2				                .word nt_asm_tsb_z
>d29a		66 a7 6a a7					.word xt_asm_tsb, z_asm_tsb
>d29e		74 73 62					.text "tsb"
.d2a1						nt_asm_tsb_z:
>d2a1		05 0c						.byte 5, IM+NN
>d2a3		ae d2				                .word nt_asm_tsx
>d2a5		6a a7 6e a7					.word xt_asm_tsb_z, z_asm_tsb_z
>d2a9		74 73 62 2e 7a					.text "tsb.z"
.d2ae						nt_asm_tsx:
>d2ae		03 0c						.byte 3, IM+NN
>d2b0		b9 d2				                .word nt_asm_txa
>d2b2		6e a7 72 a7					.word xt_asm_tsx, z_asm_tsx
>d2b6		74 73 78					.text "tsx"
.d2b9						nt_asm_txa:
>d2b9		03 0c						.byte 3, IM+NN
>d2bb		c4 d2				                .word nt_asm_txs
>d2bd		72 a7 76 a7					.word xt_asm_txa, z_asm_txa
>d2c1		74 78 61					.text "txa"
.d2c4						nt_asm_txs:
>d2c4		03 0c						.byte 3, IM+NN
>d2c6		cf d2				                .word nt_asm_tya
>d2c8		76 a7 7a a7					.word xt_asm_txs, z_asm_txs
>d2cc		74 78 73					.text "txs"
.d2cf						nt_asm_tya:
>d2cf		03 0c						.byte 3, IM+NN
>d2d1		da d2				                .word nt_asm_arrow
>d2d3		7a a7 7e a7					.word xt_asm_tya, z_asm_tya
>d2d7		74 79 61					.text "tya"
.d2da						nt_asm_arrow:
>d2da		03 04				                .byte 3, IM
>d2dc		e5 d2				                .word nt_asm_back_jump
>d2de		91 8a 9b 8a			                .word xt_asm_arrow, z_asm_arrow
>d2e2		2d 2d 3e			                .text "-->"
.d2e5						nt_asm_back_jump:
>d2e5		02 04				                .byte 2, IM
>d2e7		ef d2				                .word nt_asm_back_branch
>d2e9		cf a7 cf a7			                .word xt_asm_back_jump, z_asm_back_jump
>d2ed		3c 6a				                .text "<j"
.d2ef						nt_asm_back_branch:
>d2ef		02 04				                .byte 2, IM
>d2f1		f9 d2				                .word nt_asm_push_a
>d2f3		d0 a7 d8 a7			                .word xt_asm_back_branch, z_asm_back_branch
>d2f7		3c 62				                .text "<b"
.d2f9						nt_asm_push_a:
>d2f9		06 0c				                .byte 6, IM+NN
>d2fb		00 00				                .word 0000
>d2fd		b8 a7 c7 a7			                .word xt_asm_push_a, z_asm_push_a
>d301		70 75 73 68 2d 61		                .text "push-a"

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../strings.asm

=0						ix := 0
=0						str_ok             = ix
=1						ix += 1
=1						str_compile        = ix
=2						ix += 1
=2						str_redefined      = ix
=3						ix += 1
=3						str_abc_upper      = ix
=4						ix += 1
=4						str_wid_forth      = ix
=5						ix += 1
=5						str_wid_editor     = ix
=6						ix += 1
=6						str_wid_assembler  = ix
=7						ix += 1
=7						str_wid_root       = ix
=8						ix += 1
=8						str_see_flags      = ix
=9						ix += 1
=9						str_see_nt         = ix
=10						ix += 1
=10						str_see_xt         = ix
=11						ix += 1
=11						str_see_size       = ix
=12						ix += 1
=12						str_disasm_lit     = ix
=13						ix += 1
=13						str_disasm_sdc     = ix
=14						ix += 1
=14						str_disasm_bra     = ix
=15						ix += 1
=15						str_disasm_0test   = ix
=16						ix += 1
.d307						string_table:
>d307		27 d3 2b d3 35 d3 40 d3		        .word s_ok, s_compiled, s_redefined, s_abc_upper              ; 0-3
>d30f		77 d3 6f d3 64 d3 7e d3		        .word s_wid_forth, s_wid_editor, s_wid_asm, s_wid_root        ; 4-7
>d317		84 d3 a0 d3 a5 d3 aa d3		        .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 8-11
>d31f		bb d3 c4 d3 d6 d3 de d3		        .word s_disasm_lit, s_disasm_sdc, s_disasm_bra, s_disasm_0test ; 12-15
>d327		20 6f 6b 00			s_ok:         .text " ok", 0         ; note space at beginning
>d32b		20 63 6f 6d 70 69 6c 65		s_compiled:   .text " compiled", 0   ; note space at beginning
>d333		64 00
>d335		72 65 64 65 66 69 6e 65		s_redefined:  .text "redefined ", 0  ; note space at end
>d33d		64 20 00
>d340		30 31 32 33 34 35 36 37		s_abc_upper:  .text "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
>d348		38 39 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e
>d358		4f 50 51 52 53 54 55 56 57 58 59 5a
>d364		41 73 73 65 6d 62 6c 65		s_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>d36c		72 20 00
>d36f		45 64 69 74 6f 72 20 00		s_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>d377		46 6f 72 74 68 20 00		s_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>d37e		52 6f 6f 74 20 00		s_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>d384		66 6c 61 67 73 20 28 43		s_see_flags:  .text "flags (CO AN IM NN UF HC): ", 0
>d38c		4f 20 41 4e 20 49 4d 20 4e 4e 20 55 46 20 48 43
>d39c		29 3a 20 00
>d3a0		6e 74 3a 20 00			s_see_nt:     .text "nt: ", 0
>d3a5		78 74 3a 20 00			s_see_xt:     .text "xt: ", 0
>d3aa		73 69 7a 65 20 28 64 65		s_see_size:   .text "size (decimal): ", 0
>d3b2		63 69 6d 61 6c 29 3a 20 00
>d3bb		4c 49 54 45 52 41 4c 20		s_disasm_lit: .text "LITERAL ", 0
>d3c3		00
>d3c4		53 54 41 43 4b 20 44 45		s_disasm_sdc: .text "STACK DEPTH CHECK", 0
>d3cc		50 54 48 20 43 48 45 43 4b 00
>d3d6		42 52 41 4e 43 48 20 00		s_disasm_bra: .text "BRANCH ",0
>d3de		30 54 45 53 54 00		s_disasm_0test: .text "0TEST",0
=0						err_allot        = 0
=1						err_badsource    = 1
=2						err_compileonly  = 2
=3						err_defer        = 3
=4						err_divzero      = 4
=5						err_noname       = 5
=6						err_refill       = 6
=7						err_state        = 7
=8						err_syntax       = 8
=9						err_underflow    = 9
=10						err_negallot     = 10
=11						err_wordlist     = 11
=12						err_blockwords   = 12
=13						err_returnstack  = 13
.d3e4						error_table:
>d3e4		00 d4 21 d4 41 d4 62 d4		        .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
>d3ec		7f d4 90 d4 a0 d4 ce d4		        .word es_divzero, es_noname, es_refill, es_state        ;  4-7
>d3f4		e6 d4 07 d5 1c d5 38 d5		        .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
>d3fc		4f d5 8e d5			        .word es_blockwords, es_returnstack                     ; 12-13
>d400		41 4c 4c 4f 54 20 75 73		es_allot:       .text "ALLOT using all available memory", 0
>d408		69 6e 67 20 61 6c 6c 20 61 76 61 69 6c 61 62 6c
>d418		65 20 6d 65 6d 6f 72 79 00
>d421		49 6c 6c 65 67 61 6c 20		es_badsource:   .text "Illegal SOURCE-ID during REFILL", 0
>d429		53 4f 55 52 43 45 2d 49 44 20 64 75 72 69 6e 67
>d439		20 52 45 46 49 4c 4c 00
>d441		49 6e 74 65 72 70 72 65		es_compileonly: .text "Interpreting a compile-only word", 0
>d449		74 69 6e 67 20 61 20 63 6f 6d 70 69 6c 65 2d 6f
>d459		6e 6c 79 20 77 6f 72 64 00
>d462		44 45 46 45 52 65 64 20		es_defer:       .text "DEFERed word not defined yet", 0
>d46a		77 6f 72 64 20 6e 6f 74 20 64 65 66 69 6e 65 64
>d47a		20 79 65 74 00
>d47f		44 69 76 69 73 69 6f 6e		es_divzero:     .text "Division by zero", 0
>d487		20 62 79 20 7a 65 72 6f 00
>d490		50 61 72 73 69 6e 67 20		es_noname:      .text "Parsing failure", 0
>d498		66 61 69 6c 75 72 65 00
>d4a0		51 55 49 54 20 63 6f 75		es_refill:      .text "QUIT could not get input (REFILL returned -1)", 0
>d4a8		6c 64 20 6e 6f 74 20 67 65 74 20 69 6e 70 75 74
>d4b8		20 28 52 45 46 49 4c 4c 20 72 65 74 75 72 6e 65
>d4c8		64 20 2d 31 29 00
>d4ce		41 6c 72 65 61 64 79 20		es_state:       .text "Already in compile mode", 0
>d4d6		69 6e 20 63 6f 6d 70 69 6c 65 20 6d 6f 64 65 00
>d4e6		55 6e 64 65 66 69 6e 65		es_syntax:      .text "Undefined word or invalid number", 0
>d4ee		64 20 77 6f 72 64 20 6f 72 20 69 6e 76 61 6c 69
>d4fe		64 20 6e 75 6d 62 65 72 00
>d507		44 61 74 61 20 73 74 61		es_underflow:   .text "Data stack underflow", 0
>d50f		63 6b 20 75 6e 64 65 72 66 6c 6f 77 00
>d51c		4d 61 78 20 6d 65 6d 6f		es_negallot:    .text "Max memory freed with ALLOT", 0
>d524		72 79 20 66 72 65 65 64 20 77 69 74 68 20 41 4c
>d534		4c 4f 54 00
>d538		4e 6f 20 77 6f 72 64 6c		es_wordlist:    .text "No wordlists available", 0
>d540		69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>d54f		50 6c 65 61 73 65 20 61		es_blockwords:  .text "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>d557		73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42 4c
>d567		4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52 20
>d577		61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45 2d
>d587		56 45 43 54 4f 52 00
>d58e		52 65 74 75 72 6e 20 73		es_returnstack: .text "Return stack:", 0
>d596		74 61 63 6b 3a 00
>d59c		0f 2f 43 4f 55 4e 54 45		envs_cs:        .text 15, "/COUNTED-STRING"
>d5a4		44 2d 53 54 52 49 4e 47
>d5ac		05 2f 48 4f 4c 44		envs_hold:      .text 5, "/HOLD"
>d5b2		04 2f 50 41 44			envs_pad:       .text 4, "/PAD"
>d5b7		11 41 44 44 52 45 53 53		envs_aub:       .text 17, "ADDRESS-UNIT-BITS"
>d5bf		2d 55 4e 49 54 2d 42 49 54 53
>d5c9		07 46 4c 4f 4f 52 45 44		envs_floored:   .text 7, "FLOORED"
>d5d1		08 4d 41 58 2d 43 48 41		envs_max_char:  .text 8, "MAX-CHAR"
>d5d9		52
>d5da		05 4d 41 58 2d 4e		envs_max_n:     .text 5, "MAX-N"
>d5e0		05 4d 41 58 2d 55		envs_max_u:     .text 5, "MAX-U"
>d5e6		12 52 45 54 55 52 4e 2d		envs_rsc:       .text 18, "RETURN-STACK-CELLS"
>d5ee		53 54 41 43 4b 2d 43 45 4c 4c 53
>d5f9		0b 53 54 41 43 4b 2d 43		envs_sc:        .text 11, "STACK-CELLS"
>d601		45 4c 4c 53
>d605		09 57 4f 52 44 4c 49 53		envs_wl:        .text 9, "WORDLISTS"
>d60d		54 53
>d60f		05 4d 41 58 2d 44		envs_max_d:     .text 5, "MAX-D"
>d615		06 4d 41 58 2d 55 44		envs_max_ud:    .text 6, "MAX-UD"

;******  Return to file: platform/../taliforth.asm

.d61c						cmpl_subroutine:
.d61c		48		pha		                pha             ; save LSB of address
.d61d		a9 20		lda #$20	                lda #OpJSR      ; load opcode for JSR
.d61f		80 03		bra $d624	                bra +
.d621						cmpl_jump:
.d621		48		pha		                pha             ; save LSB of address
.d622		a9 4c		lda #$4c	                lda #OpJMP      ; load opcode for JMP, fall thru
.d624						+
.d624		20 2c d6	jsr $d62c	                jsr cmpl_a      ; compile opcode
.d627		68		pla		                pla             ; retrieve address LSB; fall thru to cmpl_word
.d628						cmpl_word:
.d628		20 2c d6	jsr $d62c	                jsr cmpl_a      ; compile LSB of address
.d62b		98		tya		                tya             ; fall thru for MSB
.d62c						cmpl_a:
.d62c		92 00		sta ($00)	                sta (cp)
.d62e		e6 00		inc $00		                inc cp
.d630		d0 02		bne $d634	                bne _done
.d632		e6 01		inc $01		                inc cp+1
.d634						_done:
.d634		60		rts		                rts
.d635						doconst:
.d635		ca		dex		                dex             ; make room for constant
.d636		ca		dex		                dex
.d637		68		pla		                pla             ; LSB of return address
.d638		85 25		sta $25		                sta tmp1
.d63a		68		pla		                pla             ; MSB of return address
.d63b		85 26		sta $26		                sta tmp1+1
.d63d		a0 01		ldy #$01	                ldy #1
.d63f		b1 25		lda ($25),y	                lda (tmp1),y
.d641		95 00		sta $00,x	                sta 0,x
.d643		c8		iny		                iny
.d644		b1 25		lda ($25),y	                lda (tmp1),y
.d646		95 01		sta $01,x	                sta 1,x
.d648		60		rts		                rts
.d649						dodefer:
.d649		68		pla		                pla             ; LSB
.d64a		85 25		sta $25		                sta tmp1
.d64c		68		pla		                pla             ; MSB
.d64d		85 26		sta $26		                sta tmp1+1
.d64f		a0 01		ldy #$01	                ldy #1
.d651		b1 25		lda ($25),y	                lda (tmp1),y
.d653		85 27		sta $27		                sta tmp2
.d655		c8		iny		                iny
.d656		b1 25		lda ($25),y	                lda (tmp1),y
.d658		85 28		sta $28		                sta tmp2+1
.d65a		6c 27 00	jmp ($0027)	                jmp (tmp2)      ; This is actually a jump to the new target
.d65d						defer_error:
.d65d		a9 03		lda #$03	                lda #err_defer
.d65f		4c f5 d7	jmp $d7f5	                jmp error
.d662						dodoes:
.d662		7a		ply		                ply             ; LSB
.d663		68		pla		                pla             ; MSB
.d664		c8		iny		                iny
.d665		d0 01		bne $d668	                bne +
.d667		1a		inc a		                ina
.d668						+
.d668		84 27		sty $27		                sty tmp2
.d66a		85 28		sta $28		                sta tmp2+1
.d66c		ca		dex		                dex
.d66d		ca		dex		                dex
.d66e		7a		ply		                ply
.d66f		68		pla		                pla
.d670		c8		iny		                iny
.d671		d0 01		bne $d674	                bne +
.d673		1a		inc a		                ina
.d674						+
.d674		94 00		sty $00,x	                sty 0,x         ; LSB
.d676		95 01		sta $01,x	                sta 1,x         ; MSB
.d678		6c 27 00	jmp ($0027)	                jmp (tmp2)
.d67b						dovar:
.d67b		7a		ply		                ply             ; LSB
.d67c		68		pla		                pla             ; MSB
.d67d		c8		iny		                iny
.d67e		d0 01		bne $d681	                bne +
.d680		1a		inc a		                ina
.d681						+
.d681		ca		dex		                dex
.d682		ca		dex		                dex
.d683		95 01		sta $01,x	                sta 1,x
.d685		98		tya		                tya
.d686		95 00		sta $00,x	                sta 0,x
.d688		60		rts		                rts
.d689						push_upvar_tos:
.d689		ca		dex		                dex
.d68a		ca		dex		                dex
.d68b		18		clc		                clc
.d68c		65 08		adc $08		                adc up
.d68e		95 00		sta $00,x	                sta 0,x
.d690		a5 09		lda $09		                lda up+1
.d692		90 01		bcc $d695	                bcc +
.d694		1a		inc a		                ina
.d695						+
.d695		95 01		sta $01,x	                sta 1,x
.d697		60		rts		                rts
.d698						byte_to_ascii:
.d698		48		pha		                pha
.d699		4a		lsr a		                lsr             ; convert high nibble first
.d69a		4a		lsr a		                lsr
.d69b		4a		lsr a		                lsr
.d69c		4a		lsr a		                lsr
.d69d		20 a1 d6	jsr $d6a1	                jsr _nibble_to_ascii
.d6a0		68		pla		                pla
.d6a1						_nibble_to_ascii:
.d6a1		29 0f		and #$0f	                and #$F
.d6a3		09 30		ora #$30	                ora #'0'
.d6a5		c9 3a		cmp #$3a	                cmp #'9'+1
.d6a7		90 02		bcc $d6ab	                bcc +
.d6a9		69 06		adc #$06	                adc #6
.d6ab		4c 3b 88	jmp $883b	+               jmp emit_a
.d6ae		60		rts		                rts
.d6af						find_header_name:
.d6af		b5 02		lda $02,x	                lda 2,x                 ; Copy mystery string to tmp2
.d6b1		85 27		sta $27		                sta tmp2
.d6b3		b5 03		lda $03,x	                lda 3,x
.d6b5		85 28		sta $28		                sta tmp2+1
.d6b7						_loop:
.d6b7		b2 25		lda ($25)	                lda (tmp1)
.d6b9		d5 00		cmp $00,x	                cmp 0,x
.d6bb		d0 3a		bne $d6f7	                bne _next_entry
.d6bd		b2 27		lda ($27)	                lda (tmp2)      ; first character of mystery string
.d6bf		a0 08		ldy #$08	                ldy #8
.d6c1		51 25		eor ($25),y	                eor (tmp1),y    ; flag any mismatched bits
.d6c3		29 df		and #$df	                and #%11011111  ; but ignore upper/lower case bit
.d6c5		d0 30		bne $d6f7	                bne _next_entry ; definitely not equal if any bits differ
.d6c7		a5 25		lda $25		                lda tmp1
.d6c9		48		pha		                pha             ; Save original address on the stack
.d6ca		18		clc		                clc
.d6cb		69 08		adc #$08	                adc #8
.d6cd		85 25		sta $25		                sta tmp1
.d6cf		a5 26		lda $26		                lda tmp1+1
.d6d1		48		pha		                pha
.d6d2		90 03		bcc $d6d7	                bcc +
.d6d4		1a		inc a		                ina
.d6d5		85 26		sta $26		                sta tmp1+1
.d6d7						+
.d6d7		b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.d6d9		88		dey		                dey
.d6da						_next_char:
.d6da		b1 27		lda ($27),y	                lda (tmp2),y    ; last char of mystery string
.d6dc		c9 5b		cmp #$5b	                cmp #'Z'+1
.d6de		b0 06		bcs $d6e6	                bcs _check_char
.d6e0		c9 41		cmp #$41	                cmp #'A'
.d6e2		90 02		bcc $d6e6	                bcc _check_char
.d6e4		09 20		ora #$20	                ora #$20
.d6e6						_check_char:
.d6e6		d1 25		cmp ($25),y	                cmp (tmp1),y    ; last char of word we're testing against
.d6e8		d0 03		bne $d6ed	                bne _reset_tmp1
.d6ea		88		dey		                dey
.d6eb		10 ed		bpl $d6da	                bpl _next_char
.d6ed						_reset_tmp1:
.d6ed		68		pla		                pla
.d6ee		85 26		sta $26		                sta tmp1+1
.d6f0		68		pla		                pla
.d6f1		85 25		sta $25		                sta tmp1
.d6f3		98		tya		                tya             ; leave A = $FF on success
.d6f4		c8		iny		                iny             ; if Y was $FF, we succeeded
.d6f5		f0 11		beq $d708	                beq _done
.d6f7						_next_entry:
.d6f7		a0 02		ldy #$02	                ldy #2
.d6f9		b1 25		lda ($25),y	                lda (tmp1),y
.d6fb		48		pha		                pha
.d6fc		c8		iny		                iny
.d6fd		b1 25		lda ($25),y	                lda (tmp1),y
.d6ff		85 26		sta $26		                sta tmp1+1
.d701		68		pla		                pla
.d702		85 25		sta $25		                sta tmp1
.d704		05 26		ora $26		                ora tmp1+1
.d706		d0 af		bne $d6b7	                bne _loop
.d708		c9 00		cmp #$00	_done:          cmp #0      ; A is 0 on failure and $FF on success
.d70a		60		rts		                rts         ; so cmp #0 sets Z on failure and clears on success
.d70b						compare_16bit:
.d70b		b5 00		lda $00,x	                lda 0,x                 ; LSB of TOS
.d70d		d5 02		cmp $02,x	                cmp 2,x                 ; LSB of NOS
.d70f		f0 0a		beq $d71b	                beq _equal
.d711		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d713		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d715		09 01		ora #$01	                ora #1                  ; Make zero flag 0 because not equal
.d717		70 08		bvs $d721	                bvs _overflow
.d719		80 08		bra $d723	                bra _not_equal
.d71b						_equal:
.d71b		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d71d		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d71f		50 04		bvc $d725	                bvc _done
.d721						_overflow:
.d721		49 80		eor #$80	                eor #$80                ; complement negative flag
.d723						_not_equal:
.d723		09 01		ora #$01	                ora #1                  ; if overflow, we can't be equal
.d725						_done:
.d725		60		rts		                rts
.d726						current_to_dp:
.d726		a0 08		ldy #$08	                ldy #current_offset
.d728		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d72a		0a		asl a		                asl             ; turn it into an offset (in cells)
.d72b		18		clc		                clc
.d72c		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d72e		a8		tay		                tay
.d72f		b1 08		lda ($08),y	                lda (up),y              ; get the dp for that wordlist.
.d731		85 02		sta $02		                sta dp
.d733		c8		iny		                iny
.d734		b1 08		lda ($08),y	                lda (up),y
.d736		85 03		sta $03		                sta dp+1
.d738		60		rts		                rts
.d739						dp_to_current:
.d739		a0 08		ldy #$08	                ldy #current_offset
.d73b		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d73d		0a		asl a		                asl             ; turn it into an offset (in cells)
.d73e		18		clc		                clc
.d73f		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d741		a8		tay		                tay
.d742		a5 02		lda $02		                lda dp
.d744		91 08		sta ($08),y	                sta (up),y              ; get the dp for that wordlist.
.d746		c8		iny		                iny
.d747		a5 03		lda $03		                lda dp+1
.d749		91 08		sta ($08),y	                sta (up),y
.d74b		60		rts		                rts
.d74c						interpret:
.d74c						_loop:
.d74c		20 aa 8e	jsr $8eaa	                jsr xt_parse_name       ; ( "string" -- addr u )
.d74f		b5 00		lda $00,x	                lda 0,x
.d751		15 01		ora $01,x	                ora 1,x
.d753		f0 6b		beq $d7c0	                beq _line_done
.d755		20 3b 95	jsr $953b	                jsr xt_two_dup          ; ( addr u -- addr u addr u )
.d758		20 fc 9a	jsr $9afc	                jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
.d75b		b5 00		lda $00,x	                lda 0,x
.d75d		15 01		ora $01,x	                ora 1,x
.d75f		d0 28		bne $d789	                bne _got_name_token
.d761		e8		inx		                inx                     ; ( addr u 0 -- addr u )
.d762		e8		inx		                inx
.d763		20 9d 9c	jsr $9c9d	                jsr xt_number           ; ( addr u -- u|d )
.d766		a5 1a		lda $1a		                lda state
.d768		f0 e2		beq $d74c	                beq _loop
.d76a		a9 20		lda #$20	                lda #%00100000
.d76c		24 1c		bit $1c		                bit status
.d76e		f0 0d		beq $d77d	                beq _single_number
.d770		20 be 93	jsr $93be	                jsr xt_swap
.d773		a0 8b		ldy #$8b	                ldy #>literal_runtime
.d775		a9 b8		lda #$b8	                lda #<literal_runtime
.d777		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.d77a		20 da 83	jsr $83da	                jsr xt_comma
.d77d						_single_number:
.d77d		a0 8b		ldy #$8b	                ldy #>literal_runtime
.d77f		a9 b8		lda #$b8	                lda #<literal_runtime
.d781		20 1c d6	jsr $d61c	                jsr cmpl_subroutine
.d784		20 da 83	jsr $83da	                jsr xt_comma
.d787		80 c3		bra $d74c	                bra _loop
.d789						_got_name_token:
.d789		b5 00		lda $00,x	                lda 0,x
.d78b		95 04		sta $04,x	                sta 4,x
.d78d		b5 01		lda $01,x	                lda 1,x
.d78f		95 05		sta $05,x	                sta 5,x
.d791		e8		inx		                inx
.d792		e8		inx		                inx
.d793		e8		inx		                inx
.d794		e8		inx		                inx                     ; ( nt )
.d795		20 42 8e	jsr $8e42	                jsr xt_one_plus
.d798		a1 00		lda ($00,x)	                lda (0,x)
.d79a		48		pha		                pha
.d79b		20 36 8e	jsr $8e36	                jsr xt_one_minus
.d79e		20 3a 9c	jsr $9c3a	                jsr xt_name_to_int      ; ( nt - xt )
.d7a1		a5 1a		lda $1a		                lda state
.d7a3		d0 10		bne $d7b5	                bne _compile
.d7a5		68		pla		                pla
.d7a6		29 01		and #$01	                and #CO                 ; mask everything but Compile Only bit
.d7a8		f0 05		beq $d7af	                beq _interpret
.d7aa		a9 02		lda #$02	                lda #err_compileonly
.d7ac		4c f5 d7	jmp $d7f5	                jmp error
.d7af						_interpret:
.d7af		20 7b 89	jsr $897b	                jsr xt_execute
.d7b2		4c 4c d7	jmp $d74c	                jmp _loop
.d7b5						_compile:
.d7b5		68		pla		                pla
.d7b6		29 04		and #$04	                and #IM                 ; Mask all but IM bit
.d7b8		d0 f5		bne $d7af	                bne _interpret          ; IMMEDIATE word, execute right now
.d7ba		20 f4 83	jsr $83f4	                jsr xt_compile_comma
.d7bd		4c 4c d7	jmp $d74c	                jmp _loop
.d7c0						_line_done:
.d7c0		e8		inx		                inx
.d7c1		e8		inx		                inx
.d7c2		e8		inx		                inx
.d7c3		e8		inx		                inx
.d7c4		60		rts		                rts
.d7c5						is_printable:
.d7c5		c9 20		cmp #$20	                cmp #AscSP              ; $20
.d7c7		90 08		bcc $d7d1	                bcc _done
.d7c9		c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.d7cb		b0 03		bcs $d7d0	                bcs _failed
.d7cd		38		sec		                sec
.d7ce		80 01		bra $d7d1	                bra _done
.d7d0						_failed:
.d7d0		18		clc		                clc
.d7d1						_done:
.d7d1		60		rts		                rts
.d7d2						is_whitespace:
.d7d2		c9 00		cmp #$00	                cmp #00         ; explicit comparison to leave Y untouched
.d7d4		90 08		bcc $d7de	                bcc _done
.d7d6		c9 21		cmp #$21	                cmp #AscSP+1
.d7d8		b0 03		bcs $d7dd	                bcs _failed
.d7da		38		sec		                sec
.d7db		80 01		bra $d7de	                bra _done
.d7dd						_failed:
.d7dd		18		clc		                clc
.d7de						_done:
.d7de		60		rts		                rts
.d7df						underflow_1:
.d7df		e0 77		cpx #$77	                cpx #dsp0-1
.d7e1		10 10		bpl $d7f3	                bpl underflow_error
.d7e3		60		rts		                rts
.d7e4						underflow_2:
.d7e4		e0 75		cpx #$75	                cpx #dsp0-3
.d7e6		10 0b		bpl $d7f3	                bpl underflow_error
.d7e8		60		rts		                rts
.d7e9						underflow_3:
.d7e9		e0 73		cpx #$73	                cpx #dsp0-5
.d7eb		10 06		bpl $d7f3	                bpl underflow_error
.d7ed		60		rts		                rts
.d7ee						underflow_4:
.d7ee		e0 71		cpx #$71	                cpx #dsp0-7
.d7f0		10 01		bpl $d7f3	                bpl underflow_error
.d7f2		60		rts		                rts
.d7f3						underflow_error:
.d7f3		a9 09		lda #$09	                lda #err_underflow      ; fall through to error
.d7f5						error:
.d7f5		48		pha		                pha                     ; save error
.d7f6		20 35 d8	jsr $d835	                jsr print_error
.d7f9		20 69 85	jsr $8569	                jsr xt_cr
.d7fc		68		pla		                pla
.d7fd		c9 09		cmp #$09	                cmp #err_underflow      ; should we display return stack?
.d7ff		d0 17		bne $d818	                bne _no_underflow
.d801		a9 0d		lda #$0d	                lda #err_returnstack
.d803		20 35 d8	jsr $d835	                jsr print_error
.d806		ba		tsx		                tsx
.d807						-
.d807		e8		inx		                inx
.d808		f0 0b		beq $d815	                beq +
.d80a		20 39 93	jsr $9339	                jsr xt_space
.d80d		bd 00 01	lda $0100,x	                lda $100,x
.d810		20 98 d6	jsr $d698	                jsr byte_to_ascii
.d813		80 f2		bra $d807	                bra -
.d815						+
.d815		20 69 85	jsr $8569	                jsr xt_cr
.d818						_no_underflow:
.d818		4c 60 80	jmp $8060	                jmp xt_abort            ; no jsr, as we clobber return stack
.d81b						print_string_no_lf:
.d81b		0a		asl a		                asl
.d81c		a8		tay		                tay
.d81d		b9 07 d3	lda $d307,y	                lda string_table,y
.d820		85 29		sta $29		                sta tmp3                ; LSB
.d822		c8		iny		                iny
.d823		b9 07 d3	lda $d307,y	                lda string_table,y
.d826		85 2a		sta $2a		                sta tmp3+1              ; MSB
.d828						print_common:
.d828		a0 00		ldy #$00	                ldy #0
.d82a						_loop:
.d82a		b1 29		lda ($29),y	                lda (tmp3),y
.d82c		f0 06		beq $d834	                beq _done               ; strings are zero-terminated
.d82e		20 3b 88	jsr $883b	                jsr emit_a              ; allows vectoring via output
.d831		c8		iny		                iny
.d832		80 f6		bra $d82a	                bra _loop
.d834						_done:
.d834		60		rts		                rts
.d835						print_error:
.d835		0a		asl a		                asl
.d836		a8		tay		                tay
.d837		b9 e4 d3	lda $d3e4,y	                lda error_table,y
.d83a		85 29		sta $29		                sta tmp3                ; LSB
.d83c		c8		iny		                iny
.d83d		b9 e4 d3	lda $d3e4,y	                lda error_table,y
.d840		85 2a		sta $2a		                sta tmp3+1              ; MSB
.d842		20 28 d8	jsr $d828	                jsr print_common
.d845		60		rts		                rts
.d846						print_string:
.d846		20 1b d8	jsr $d81b	                jsr print_string_no_lf
.d849		4c 69 85	jmp $8569	                jmp xt_cr               ; JSR/RTS because never compiled
.d84c						print_u:
.d84c		20 fd 9d	jsr $9dfd	                jsr xt_zero                     ; 0
.d84f		20 87 8b	jsr $8b87	                jsr xt_less_number_sign         ; <#
.d852		20 0c 8e	jsr $8e0c	                jsr xt_number_sign_s            ; #S
.d855		20 ea 8d	jsr $8dea	                jsr xt_number_sign_greater      ; #>
.d858		4c 45 96	jmp $9645	                jmp xt_type                     ; JSR/RTS because never compiled

;******  Return to file: platform/platform-py65mon.asm


;******  Processing file: platform/simulator.asm

=$f000						io_start = $f000
>f000						                .byte ?
>f001						io_putc:        .byte ?     ; $f001     write byte to stdout
>f002						                .word ?
>f004						io_getc:        .byte ?     ; $f004     read byte from stdin
>f005						io_peekc:       .byte ?     ; $f005     non-blocking input
>f006						io_clk_start:   .byte ?     ; $f006     *read* to start cycle counter
>f007						io_clk_stop:    .byte ?     ; $f007     *read* to stop the cycle counter
>f008						io_clk_cycles:  .word ?,?   ; $f008-b   32-bit cycle count in NUXI order
>f00c						                .word ?,?
>f010						io_blk_action:  .byte ?     ; $f010     Write to act (status:0 read:1 write:2 quit:ff)
>f011						io_blk_status:  .byte ?     ; $f011     Read action result (0 = OK)
>f012						io_blk_number:  .word ?     ; $f012     Little endian block number 0-ffff
>f014						io_blk_buffer:  .word ?     ; $f014     Little endian memory address
.f016						io_end:
.f016						kernel_init:
.f016		78		sei		                sei             ; Disable interrupts
.f017		a2 00		ldx #$00	                ldx #0
.f019		bd 32 f0	lda $f032,x	-               lda s_kernel_id,x
.f01c		f0 06		beq $f024	                beq _done
.f01e		20 2d f0	jsr $f02d	                jsr kernel_putc
.f021		e8		inx		                inx
.f022		80 f5		bra $f019	                bra -
.f024						_done:
.f024		4c 00 80	jmp $8000	                jmp forth
.f027						kernel_getc:
.f027						_loop:
.f027		ad 04 f0	lda $f004	                lda io_getc
.f02a		f0 fb		beq $f027	                beq _loop
.f02c		60		rts		                rts
.f02d						kernel_putc:
.f02d		8d 01 f0	sta $f001	                sta io_putc
.f030		60		rts		                rts
.f031						kernel_bye:
.f031		00		brk #		                brk

;******  Return to file: platform/platform-py65mon.asm

.f032						s_kernel_id:
>f032		54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 default kernel for py65mon (04. Dec 2022)", AscLF, 0
>f03a		74 68 20 32 20 64 65 66 61 75 6c 74 20 6b 65 72
>f04a		6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f 6e 20
>f05a		28 30 34 2e 20 44 65 63 20 32 30 32 32 29 0a 00
>fffa		16 f0				v_nmi   .word kernel_init
>fffc		16 f0				v_reset .word kernel_init
>fffe		16 f0				v_irq   .word kernel_init

;******  End of listing
