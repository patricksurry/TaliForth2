
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output taliforth-py65mon.bin platform/platform-py65mon.asm
; Wed May 22 21:08:54 2024

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0000						ram_start = $0000          ; start of installed 32 KiB of RAM
=32767						ram_end   = $8000-1        ; end of installed RAM
=$0000						zpage     = ram_start      ; begin of Zero Page ($0000-$00ff)
=$7f						zpage_end = $7F            ; end of Zero Page used ($0000-$007f)
=$0100						stack0    = $0100          ; begin of Return Stack ($0100-$01ff)
=31744						hist_buff = ram_end-$03ff  ; begin of history buffers
=$0000						user0     = zpage            ; TaliForth2 system variables
=$ff						rsp0      = $ff              ; initial Return Stack Pointer (65c02 stack)
=$ff						bsize     = $ff              ; size of input/output buffers
=512						buffer0   = stack0+$100      ; input buffer ($0200-$027f)
=768						cp0       = buffer0+bsize+1  ; Dictionary starts after last buffer
=31744						cp_end    = hist_buff        ; Last RAM byte available for code
=$ff						padoffset = $ff              ; offset from CP to PAD (holds number strings)
=						TALI_OPTIONAL_WORDS := [ "ed", "editor", "ramdrive", "block", "environment?", "assembler", "disassembler", "wordlist" ]
=["lf"]						TALI_OPTION_CR_EOL := [ "lf" ]
=1						TALI_OPTION_HISTORY := 1
=0						TALI_OPTION_TERSE := 0

;******  Processing file: platform/../taliforth.asm

.8000						code0:
.8000						forth:

;******  Processing file: platform/../words/all.asm

.8000						xt_cold:
.8000		d8		cld		                cld
.8001		a9 2d		lda #$2d	                lda #<kernel_putc
.8003		85 12		sta $12		                sta output
.8005		a9 f0		lda #$f0	                lda #>kernel_putc
.8007		85 13		sta $13		                sta output+1
.8009		a2 1d		ldx #$1d	                ldx #cold_zp_table_end-cold_zp_table-1
.800b						_load_zp_loop:
.800b		bd 7b b3	lda $b37b,x	                lda cold_zp_table,x
.800e		95 00		sta $00,x	                sta zpage,x
.8010		ca		dex		                dex
.8011		d0 f8		bne $800b	                bne _load_zp_loop
.8013		ad 7b b3	lda $b37b	                lda cold_zp_table
.8016		85 00		sta $00		                sta zpage
.8018		a2 ff		ldx #$ff	                ldx #rsp0
.801a		9a		txs		                txs
.801b		a2 78		ldx #$78	                ldx #dsp0
.801d		a0 35		ldy #$35	                ldy #cold_user_table_end-cold_user_table-1
.801f						_load_user_vars_loop:
.801f		b9 99 b3	lda $b399,y	                lda cold_user_table,y
.8022		91 08		sta ($08),y	                sta (up),y
.8024		88		dey		                dey
.8025		d0 f8		bne $801f	                bne _load_user_vars_loop
.8027		ad 99 b3	lda $b399	                lda cold_user_table
.802a		92 08		sta ($08)	                sta (up)
.802c		20 3a 84	jsr $843a	                jsr xt_cr
.802f		ca		dex		                dex
.8030		ca		dex		                dex
.8031		ca		dex		                dex
.8032		ca		dex		                dex
.8033		a9 7c		lda #$7c	                lda #<forth_words_start
.8035		95 02		sta $02,x	                sta 2,x
.8037		a9 ba		lda #$ba	                lda #>forth_words_start
.8039		95 03		sta $03,x	                sta 3,x
.803b		a9 e2		lda #$e2	                lda #<(user_words_end-forth_words_start)
.803d		95 00		sta $00,x	                sta 0,x
.803f		a9 00		lda #$00	                lda #>(user_words_end-forth_words_start)
.8041		95 01		sta $01,x	                sta 1,x
.8043		20 b2 88	jsr $88b2	                jsr xt_evaluate
.8046		9c 00 7c	stz $7c00	                stz hist_buff
.8049		9c 80 7c	stz $7c80	                stz hist_buff+$80
.804c		9c 00 7d	stz $7d00	                stz hist_buff+$100
.804f		9c 80 7d	stz $7d80	                stz hist_buff+$180
.8052		9c 00 7e	stz $7e00	                stz hist_buff+$200
.8055		9c 80 7e	stz $7e80	                stz hist_buff+$280
.8058		9c 00 7f	stz $7f00	                stz hist_buff+$300
.805b		9c 80 7f	stz $7f80	                stz hist_buff+$380
.805e						xt_abort:
.805e		a2 78		ldx #$78	                ldx #dsp0
.8060						xt_quit:
.8060		8a		txa		                txa             ; Save the DSP that we just defined
.8061		a2 ff		ldx #$ff	                ldx #rsp0
.8063		9a		txs		                txs
.8064		aa		tax		                tax             ; Restore the DSP. Dude, seriously.
.8065		64 04		stz $04		                stz ip
.8067		64 05		stz $05		                stz ip+1
.8069		64 0a		stz $0a		                stz insrc
.806b		64 0b		stz $0b		                stz insrc+1
.806d		a9 00		lda #$00	                lda #0
.806f		a0 04		ldy #$04	                ldy #blk_offset
.8071		91 08		sta ($08),y	                sta (up),y
.8073		c8		iny		                iny
.8074		91 08		sta ($08),y	                sta (up),y
.8076		a9 fc		lda #$fc	                lda #(256-4)
.8078		85 1f		sta $1f		                sta loopctrl
.807a		64 1a		stz $1a		                stz state
.807c		64 1b		stz $1b		                stz state+1
.807e						_get_line:
.807e		a9 00		lda #$00	                lda #<buffer0   ; input buffer, this is paranoid
.8080		85 0c		sta $0c		                sta cib
.8082		a9 02		lda #$02	                lda #>buffer0
.8084		85 0d		sta $0d		                sta cib+1
.8086		64 0e		stz $0e		                stz ciblen
.8088		64 0f		stz $0f		                stz ciblen+1
.808a		20 3c 8f	jsr $8f3c	                jsr xt_refill           ; ( -- f )
.808d		b5 00		lda $00,x	                lda 0,x
.808f		d0 05		bne $8096	                bne _success
.8091		a9 06		lda #$06	                lda #err_refill
.8093		4c c2 d7	jmp $d7c2	                jmp error
.8096						_success:
.8096		e8		inx		                inx                     ; drop
.8097		e8		inx		                inx
.8098		20 29 d7	jsr $d729	                jsr interpret
.809b		e0 78		cpx #$78	                cpx #dsp0
.809d		f0 05		beq $80a4	                beq _stack_ok
.809f		90 03		bcc $80a4	                bcc _stack_ok           ; DSP must always be smaller than DSP0
.80a1		4c c0 d7	jmp $d7c0	                jmp underflow_error
.80a4						_stack_ok:
.80a4		a5 1a		lda $1a		                lda state
.80a6		f0 02		beq $80aa	                beq _print
.80a8		a9 01		lda #$01	                lda #1                  ; number for "compile" string
.80aa						_print:
.80aa		20 13 d8	jsr $d813	                jsr print_string
.80ad		80 cf		bra $807e	                bra _get_line
.80af						z_cold:
.80af						z_abort:
.80af						z_quit:

;******  Processing file: platform/../words/core.asm

.80af						xt_abort_quote:
.80af		20 d4 8f	jsr $8fd4	                jsr xt_s_quote          ; S"
.80b2		a0 80		ldy #$80	                ldy #>abort_quote_runtime
.80b4		a9 ba		lda #$ba	                lda #<abort_quote_runtime
.80b6		20 9c 97	jsr $979c	                jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
.80b9		60		rts		z_abort_quote:  rts
.80ba						abort_quote_runtime:
.80ba		b5 04		lda $04,x	                lda 4,x
.80bc		15 05		ora $05,x	                ora 5,x
.80be		f0 09		beq $80c9	                beq _done       ; if FALSE, we're done
.80c0		20 d1 94	jsr $94d1	                jsr xt_type
.80c3		20 3a 84	jsr $843a	                jsr xt_cr
.80c6		4c 5e 80	jmp $805e	                jmp xt_abort    ; not JSR, so never come back
.80c9						_done:
.80c9		8a		txa		                txa
.80ca		18		clc		                clc
.80cb		69 06		adc #$06	                adc #6
.80cd		aa		tax		                tax
.80ce		60		rts		                rts
.80cf						xt_abs:
.80cf		20 ac d7	jsr $d7ac	                jsr underflow_1
.80d2		b5 01		lda $01,x	                lda 1,x
.80d4		10 0d		bpl $80e3	                bpl _done       ; positive number, easy money!
.80d6		38		sec		                sec
.80d7		a9 00		lda #$00	                lda #0
.80d9		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.80db		95 00		sta $00,x	                sta 0,x
.80dd		a9 00		lda #$00	                lda #0          ; MSB
.80df		f5 01		sbc $01,x	                sbc 1,x
.80e1		95 01		sta $01,x	                sta 1,x
.80e3						_done:
.80e3		60		rts		z_abs:          rts
.80e4						xt_accept:
.80e4		20 b1 d7	jsr $d7b1	                jsr underflow_2
.80e7		b5 00		lda $00,x	                lda 0,x
.80e9		15 01		ora $01,x	                ora 1,x
.80eb		d0 09		bne $80f6	                bne _not_zero
.80ed		e8		inx		                inx
.80ee		e8		inx		                inx
.80ef		74 00		stz $00,x	                stz 0,x
.80f1		74 01		stz $01,x	                stz 1,x
.80f3		4c c2 81	jmp $81c2	                jmp accept_done
.80f6						_not_zero:
.80f6		b5 00		lda $00,x	                lda 0,x         ; number of chars to get in tmp2 ...
.80f8		85 27		sta $27		                sta tmp2
.80fa		64 28		stz $28		                stz tmp2+1      ; ... but we only accept max 255 chars
.80fc		b5 02		lda $02,x	                lda 2,x         ; address of buffer is NOS, to tmp1
.80fe		85 25		sta $25		                sta tmp1
.8100		b5 03		lda $03,x	                lda 3,x
.8102		85 26		sta $26		                sta tmp1+1
.8104		e8		inx		                inx
.8105		e8		inx		                inx
.8106		a0 00		ldy #$00	                ldy #0
.8108		a5 1c		lda $1c		                lda status
.810a		29 f7		and #$f7	                and #$F7
.810c		1a		inc a		                ina
.810d		09 08		ora #$08	                ora #%00001000
.810f		85 1c		sta $1c		                sta status
.8111						accept_loop:
.8111		20 b1 89	jsr $89b1	                jsr key_a
.8114		c9 0a		cmp #$0a	                cmp #AscLF
.8116		f0 20		beq $8138	                beq _eol
.8118		c9 0d		cmp #$0d	                cmp #AscCR
.811a		f0 1c		beq $8138	                beq _eol
.811c		c9 08		cmp #$08	                cmp #AscBS
.811e		f0 22		beq $8142	                beq _backspace
.8120		c9 7f		cmp #$7f	                cmp #AscDEL     ; (CTRL-h)
.8122		f0 1e		beq $8142	                beq _backspace
.8124		c9 10		cmp #$10	                cmp #AscCP
.8126		f0 36		beq $815e	                beq _ctrl_p
.8128		c9 0e		cmp #$0e	                cmp #AscCN
.812a		f0 44		beq $8170	                beq _ctrl_n
.812c		91 25		sta ($25),y	                sta (tmp1),y
.812e		c8		iny		                iny
.812f		20 c5 86	jsr $86c5	                jsr emit_a
.8132		c4 27		cpy $27		                cpy tmp2        ; reached character limit?
.8134		d0 db		bne $8111	                bne accept_loop       ; fall through if buffer limit reached
.8136		80 03		bra $813b	                bra _buffer_full
.8138						_eol:
.8138		20 c5 91	jsr $91c5	                jsr xt_space    ; print final space
.813b						_buffer_full:
.813b		94 00		sty $00,x	                sty 0,x         ; Y contains number of chars accepted already
.813d		74 01		stz $01,x	                stz 1,x         ; we only accept 256 chars
.813f		4c c2 81	jmp $81c2	                jmp accept_done
.8142						_backspace:
.8142		c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8144		d0 06		bne $814c	                bne +
.8146		a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.8148		20 c5 86	jsr $86c5	                jsr emit_a
.814b		c8		iny		                iny
.814c						+
.814c		88		dey		                dey
.814d		a9 08		lda #$08	                lda #AscBS      ; move back one
.814f		20 c5 86	jsr $86c5	                jsr emit_a
.8152		a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.8154		20 c5 86	jsr $86c5	                jsr emit_a
.8157		a9 08		lda #$08	                lda #AscBS      ; move back over space
.8159		20 c5 86	jsr $86c5	                jsr emit_a
.815c		80 b3		bra $8111	                bra accept_loop
.815e						_ctrl_p:
.815e		a5 1c		lda $1c		                lda status
.8160		29 07		and #$07	                and #7
.8162		d0 08		bne $816c	                bne _ctrl_p_dec
.8164		a5 1c		lda $1c		                lda status
.8166		09 07		ora #$07	                ora #7
.8168		85 1c		sta $1c		                sta status
.816a		80 11		bra $817d	                bra _recall_history
.816c						_ctrl_p_dec:
.816c		c6 1c		dec $1c		                dec status
.816e		80 0d		bra $817d	                bra _recall_history
.8170						_ctrl_n:
.8170		a9 08		lda #$08	                lda #$8
.8172		24 1c		bit $1c		                bit status
.8174		d0 07		bne $817d	                bne _recall_history
.8176		a5 1c		lda $1c		                lda status
.8178		29 f7		and #$f7	                and #$F7
.817a		1a		inc a		               ina
.817b		85 1c		sta $1c		                sta status
.817d						_recall_history:
.817d		a9 08		lda #$08	                lda #%00001000
.817f		14 1c		trb $1c		                trb status
.8181		20 dd 81	jsr $81dd	                jsr accept_total_recall
.8184		a9 0d		lda #$0d	                lda #AscCR
.8186		20 c5 86	jsr $86c5	                jsr emit_a
.8189						input_clear:
.8189		c0 00		cpy #$00	                cpy #0
.818b		f0 08		beq $8195	                beq input_cleared
.818d		a9 20		lda #$20	                lda #AscSP
.818f		20 c5 86	jsr $86c5	                jsr emit_a
.8192		88		dey		                dey
.8193		80 f4		bra $8189	                bra input_clear
.8195						input_cleared:
.8195		a9 0d		lda #$0d	                lda #AscCR
.8197		20 c5 86	jsr $86c5	                jsr emit_a
.819a		b1 29		lda ($29),y	                lda (tmp3),y
.819c		85 1d		sta $1d		                sta status+1
.819e		e6 29		inc $29		                inc tmp3
.81a0		d0 02		bne $81a4	                bne +           ; Increment the upper byte on carry.
.81a2		e6 2a		inc $2a		                inc tmp3+1
.81a4						+
.81a4		a9 0d		lda #$0d	                lda #AscCR
.81a6		20 c5 86	jsr $86c5	                jsr emit_a
.81a9						_history_loop:
.81a9		c4 1d		cpy $1d		                cpy status+1
.81ab		d0 03		bne $81b0	                bne +
.81ad		4c 11 81	jmp $8111	                jmp accept_loop       ; Needs a long jump
.81b0						+
.81b0		c4 27		cpy $27		                cpy tmp2
.81b2		f0 0a		beq $81be	                beq _hist_filled_buffer
.81b4		b1 29		lda ($29),y	                lda (tmp3),y
.81b6		91 25		sta ($25),y	                sta (tmp1),y
.81b8		20 c5 86	jsr $86c5	                jsr emit_a
.81bb		c8		iny		                iny
.81bc		80 eb		bra $81a9	                bra _history_loop
.81be						_hist_filled_buffer:
.81be		88		dey		                dey
.81bf		4c 11 81	jmp $8111	                jmp accept_loop
.81c2						accept_done:
.81c2		20 dd 81	jsr $81dd	                jsr accept_total_recall
.81c5		85 1d		sta $1d		                sta status+1
.81c7		a0 00		ldy #$00	                ldy #0
.81c9		91 29		sta ($29),y	                sta (tmp3),y
.81cb		e6 29		inc $29		                inc tmp3
.81cd		d0 02		bne $81d1	                bne +           ; Increment the upper byte on carry.
.81cf		e6 2a		inc $2a		                inc tmp3+1
.81d1						+
.81d1						_save_history_loop:
.81d1		c4 1d		cpy $1d		                cpy status+1
.81d3		f0 07		beq $81dc	                beq _save_history_done
.81d5		b1 25		lda ($25),y	                lda (tmp1),y
.81d7		91 29		sta ($29),y	                sta (tmp3),y
.81d9		c8		iny		                iny
.81da		80 f5		bra $81d1	                bra _save_history_loop
.81dc						_save_history_done:
.81dc						z_accept:
.81dc		60		rts		                rts
.81dd						accept_total_recall:
.81dd		a9 00		lda #$00	                lda #<hist_buff
.81df		85 29		sta $29		                sta tmp3
.81e1		a9 7c		lda #$7c	                lda #>hist_buff
.81e3		85 2a		sta $2a		                sta tmp3+1
.81e5		a5 1c		lda $1c		                lda status
.81e7		6a		ror a		                ror
.81e8		29 03		and #$03	                and #3
.81ea		18		clc		                clc
.81eb		65 2a		adc $2a		                adc tmp3+1
.81ed		85 2a		sta $2a		                sta tmp3+1
.81ef		a5 1c		lda $1c		                lda status
.81f1		6a		ror a		                ror             ; Rotate through carry into msb.
.81f2		6a		ror a		                ror
.81f3		29 80		and #$80	                and #$80
.81f5		18		clc		                clc
.81f6		65 29		adc $29		                adc tmp3
.81f8		85 29		sta $29		                sta tmp3
.81fa		90 02		bcc $81fe	                bcc +           ; Increment the upper byte on carry.
.81fc		e6 2a		inc $2a		                inc tmp3+1
.81fe						+
.81fe		98		tya		                tya
.81ff		c9 80		cmp #$80	                cmp #$80
.8201		90 02		bcc $8205	                bcc +
.8203		a9 7f		lda #$7f	                lda #$7F
.8205						+
.8205		60		rts		                rts
.8206						xt_action_of:
.8206		a5 1a		lda $1a		                lda state
.8208		05 1b		ora $1b		                ora state+1
.820a		f0 0c		beq $8218	                beq _interpreting
.820c		20 14 83	jsr $8314	                jsr xt_bracket_tick
.820f		a0 85		ldy #$85	                ldy #>xt_defer_fetch
.8211		a9 44		lda #$44	                lda #<xt_defer_fetch
.8213		20 9c 97	jsr $979c	                jsr cmpl_subroutine
.8216		80 06		bra $821e	                bra _done
.8218						_interpreting:
.8218		20 5e 92	jsr $925e	                jsr xt_tick
.821b		20 44 85	jsr $8544	                jsr xt_defer_fetch
.821e						_done:
.821e		60		rts		z_action_of:           rts
.821f						xt_again:
.821f		20 ac d7	jsr $d7ac	                jsr underflow_1
.8222		20 b5 97	jsr $97b5	                jsr cmpl_jump_tos
.8225		60		rts		z_again:        rts
.8226						xt_align:
.8226						xt_aligned:
.8226						z_align:
.8226						z_aligned:
.8226		60		rts		                rts             ; stripped out during native compile
.8227						xt_allot:
.8227		20 ac d7	jsr $d7ac	                jsr underflow_1
.822a		b5 01		lda $01,x	                lda 1,x
.822c		30 22		bmi $8250	                bmi _release
.822e		18		clc		                clc
.822f		a5 00		lda $00		                lda cp
.8231		75 00		adc $00,x	                adc 0,x
.8233		85 00		sta $00		                sta cp
.8235		a5 01		lda $01		                lda cp+1
.8237		75 01		adc $01,x	                adc 1,x
.8239		85 01		sta $01		                sta cp+1
.823b		a0 00		ldy #$00	                ldy #<cp_end
.823d		c4 00		cpy $00		                cpy cp
.823f		a9 7c		lda #$7c	                lda #>cp_end
.8241		e5 01		sbc $01		                sbc cp+1
.8243		b0 48		bcs $828d	                bcs _done               ; we're fine.
.8245		84 00		sty $00		                sty cp                  ; still #<cp_end
.8247		a9 7c		lda #$7c	                lda #>cp_end
.8249		85 01		sta $01		                sta cp+1
.824b		a9 00		lda #$00	                lda #err_allot
.824d		4c c2 d7	jmp $d7c2	                jmp error
.8250						_release:
.8250		ca		dex		                dex
.8251		ca		dex		                dex
.8252		a5 00		lda $00		                lda cp
.8254		95 00		sta $00,x	                sta 0,x
.8256		a5 01		lda $01		                lda cp+1
.8258		95 01		sta $01,x	                sta 1,x
.825a		20 53 8e	jsr $8e53	                jsr xt_plus                     ; new CP is now TOS
.825d		ca		dex		                dex
.825e		ca		dex		                dex                             ; new CP now NOS
.825f		a9 00		lda #$00	                lda #<cp0
.8261		95 00		sta $00,x	                sta 0,x
.8263		a9 03		lda #$03	                lda #>cp0
.8265		95 01		sta $01,x	                sta 1,x                         ; CP0 is TOS
.8267		20 ea d6	jsr $d6ea	                jsr compare_16bit               ; still ( CP CP0 )
.826a		f0 17		beq $8283	                beq _nega_done
.826c		30 15		bmi $8283	                bmi _nega_done
.826e		a9 00		lda #$00	                lda #<cp0
.8270		85 00		sta $00		                sta cp
.8272		a9 03		lda #$03	                lda #>cp0
.8274		85 01		sta $01		                sta cp+1
.8276		a9 5e		lda #$5e	                lda #<dictionary_start
.8278		85 02		sta $02		                sta dp
.827a		a9 bb		lda #$bb	                lda #>dictionary_start
.827c		85 03		sta $03		                sta dp+1
.827e		a9 0a		lda #$0a	                lda #err_negallot
.8280		4c c2 d7	jmp $d7c2	                jmp error
.8283						_nega_done:
.8283		b5 02		lda $02,x	                lda 2,x
.8285		85 00		sta $00		                sta cp
.8287		b5 03		lda $03,x	                lda 3,x
.8289		85 01		sta $01		                sta cp+1
.828b		e8		inx		                inx
.828c		e8		inx		                inx                     ; drop through to _done
.828d						_done:
.828d		e8		inx		                inx
.828e		e8		inx		                inx
.828f						z_allot:
.828f		60		rts		                rts
.8290						xt_and:
.8290		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8293		b5 00		lda $00,x	                lda 0,x
.8295		35 02		and $02,x	                and 2,x
.8297		95 02		sta $02,x	                sta 2,x
.8299		b5 01		lda $01,x	                lda 1,x
.829b		35 03		and $03,x	                and 3,x
.829d		95 03		sta $03,x	                sta 3,x
.829f		e8		inx		                inx
.82a0		e8		inx		                inx
.82a1		60		rts		z_and:          rts
.82a2						xt_at_xy:
.82a2		20 b1 d7	jsr $d7b1	                jsr underflow_2
.82a5		a5 18		lda $18		                lda base
.82a7		48		pha		                pha
.82a8		a9 0a		lda #$0a	                lda #10
.82aa		85 18		sta $18		                sta base
.82ac		a9 1b		lda #$1b	                lda #AscESC
.82ae		20 c5 86	jsr $86c5	                jsr emit_a
.82b1		a9 5b		lda #$5b	                lda #'['
.82b3		20 c5 86	jsr $86c5	                jsr emit_a
.82b6		20 e9 8c	jsr $8ce9	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82b9		20 19 d8	jsr $d819	                jsr print_u
.82bc		a9 3b		lda #$3b	                lda #';'
.82be		20 c5 86	jsr $86c5	                jsr emit_a
.82c1		20 e9 8c	jsr $8ce9	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82c4		20 19 d8	jsr $d819	                jsr print_u
.82c7		a9 48		lda #$48	                lda #'H'
.82c9		20 c5 86	jsr $86c5	                jsr emit_a
.82cc		68		pla		                pla
.82cd		85 18		sta $18		                sta base
.82cf		60		rts		z_at_xy:        rts
.82d0						xt_backslash:
.82d0		a0 04		ldy #$04	                ldy #blk_offset
.82d2		b1 08		lda ($08),y	                lda (up),y
.82d4		c8		iny		                iny
.82d5		11 08		ora ($08),y	                ora (up),y
.82d7		f0 19		beq $82f2	                beq backslash_not_block
.82d9		a5 10		lda $10		                lda toin
.82db		29 3f		and #$3f	                and #$3F
.82dd		f0 1b		beq $82fa	                beq z_backslash
.82df		c9 01		cmp #$01	                cmp #$1
.82e1		f0 17		beq $82fa	                beq z_backslash
.82e3		a5 10		lda $10		                lda toin
.82e5		29 c0		and #$c0	                and #$C0        ; Clear lower bits to move to beginning of line.
.82e7		18		clc		                clc             ; Add $40 (64 decimal) to move to next line.
.82e8		69 40		adc #$40	                adc #$40
.82ea		85 10		sta $10		                sta toin
.82ec		90 0c		bcc $82fa	                bcc z_backslash
.82ee		e6 11		inc $11		                inc toin+1
.82f0		80 08		bra $82fa	                bra z_backslash
.82f2						backslash_not_block:
.82f2		a5 0e		lda $0e		                lda ciblen
.82f4		85 10		sta $10		                sta toin
.82f6		a5 0f		lda $0f		                lda ciblen+1
.82f8		85 11		sta $11		                sta toin+1
.82fa		60		rts		z_backslash:    rts
.82fb						xt_base:
.82fb		ca		dex		                dex
.82fc		ca		dex		                dex
.82fd		a9 18		lda #$18	                lda #<base
.82ff		95 00		sta $00,x	                sta 0,x         ; LSB
.8301		74 01		stz $01,x	                stz 1,x         ; MSB is always 0
.8303		60		rts		z_base:         rts
.8304						xt_bl:
.8304		ca		dex		                dex
.8305		ca		dex		                dex
.8306		a9 20		lda #$20	                lda #AscSP
.8308		95 00		sta $00,x	                sta 0,x
.830a		74 01		stz $01,x	                stz 1,x
.830c		60		rts		z_bl:           rts
.830d						xt_bracket_char:
.830d		20 53 83	jsr $8353	                jsr xt_char
.8310		20 f2 89	jsr $89f2	                jsr xt_literal
.8313		60		rts		z_bracket_char: rts
.8314						xt_bracket_tick:
.8314		20 5e 92	jsr $925e	                jsr xt_tick
.8317		20 f2 89	jsr $89f2	                jsr xt_literal
.831a		60		rts		z_bracket_tick: rts
.831b						xt_buffer_colon:
.831b		20 40 84	jsr $8440	                jsr xt_create
.831e		20 27 82	jsr $8227	                jsr xt_allot
.8321		60		rts		z_buffer_colon: rts
.8322						xt_c_comma:
.8322		20 ac d7	jsr $d7ac	                jsr underflow_1
.8325		b5 00		lda $00,x	                lda 0,x
.8327		20 ac 97	jsr $97ac	                jsr cmpl_a
.832a		e8		inx		                inx
.832b		e8		inx		                inx
.832c		60		rts		z_c_comma:      rts
.832d						xt_c_fetch:
.832d		20 ac d7	jsr $d7ac	                jsr underflow_1
.8330		a1 00		lda ($00,x)	                lda (0,x)
.8332		95 00		sta $00,x	                sta 0,x
.8334		74 01		stz $01,x	                stz 1,x         ; Ignore LSB
.8336		60		rts		z_c_fetch:      rts
.8337						xt_c_store:
.8337		20 b1 d7	jsr $d7b1	                jsr underflow_2
.833a		b5 02		lda $02,x	                lda 2,x
.833c		81 00		sta ($00,x)	                sta (0,x)
.833e		e8		inx		                inx
.833f		e8		inx		                inx
.8340		e8		inx		                inx
.8341		e8		inx		                inx
.8342		60		rts		z_c_store:      rts
.8343						xt_cell_plus:
.8343		20 ac d7	jsr $d7ac	                jsr underflow_1
.8346		f6 00		inc $00,x	                inc 0,x
.8348		d0 02		bne $834c	                bne +
.834a		f6 01		inc $01,x	                inc 1,x
.834c						+
.834c		f6 00		inc $00,x	                inc 0,x
.834e		d0 02		bne $8352	                bne _done
.8350		f6 01		inc $01,x	                inc 1,x
.8352						_done:
.8352		60		rts		z_cell_plus:    rts
.8353						xt_char:
.8353		20 51 8d	jsr $8d51	                jsr xt_parse_name
.8356		b5 00		lda $00,x	                lda 0,x
.8358		15 01		ora $01,x	                ora 1,x
.835a		d0 05		bne $8361	                bne _not_empty
.835c		a9 05		lda #$05	                lda #err_noname
.835e		4c c2 d7	jmp $d7c2	                jmp error
.8361						_not_empty:
.8361		e8		inx		                inx             ; drop number of characters, leave addr
.8362		e8		inx		                inx
.8363		a1 00		lda ($00,x)	                lda (0,x)       ; get character (equivalent to C@)
.8365		95 00		sta $00,x	                sta 0,x
.8367		74 01		stz $01,x	                stz 1,x         ; MSB is always zero
.8369		60		rts		z_char:         rts
.836a						xt_chars:
.836a		20 ac d7	jsr $d7ac	                jsr underflow_1
.836d		60		rts		z_chars:        rts
.836e						xt_colon:
.836e		a5 1a		lda $1a		                lda state
.8370		05 1b		ora $1b		                ora state+1
.8372		f0 05		beq $8379	                beq +
.8374		a9 07		lda #$07	                lda #err_state
.8376		4c c2 d7	jmp $d7c2	                jmp error
.8379						+
.8379		c6 1a		dec $1a		                dec state
.837b		c6 1b		dec $1b		                dec state+1
.837d		a9 40		lda #$40	                lda #%01000000
.837f		04 1c		tsb $1c		                tsb status
.8381		20 03 d7	jsr $d703	                jsr current_to_dp
.8384		a5 03		lda $03		                lda dp+1            ; CREATE uses a lot of variables
.8386		48		pha		                pha
.8387		a5 02		lda $02		                lda dp
.8389		48		pha		                pha
.838a		a9 80		lda #$80	                lda #%10000000
.838c		04 1c		tsb $1c		                tsb status
.838e		20 40 84	jsr $8440	                jsr xt_create
.8391		20 03 d7	jsr $d703	                jsr current_to_dp   ; This might be able to be omitted
.8394		a5 02		lda $02		                lda dp
.8396		85 06		sta $06		                sta workword
.8398		a5 03		lda $03		                lda dp+1
.839a		85 07		sta $07		                sta workword+1
.839c		68		pla		                pla
.839d		85 02		sta $02		                sta dp
.839f		68		pla		                pla
.83a0		85 03		sta $03		                sta dp+1
.83a2		20 16 d7	jsr $d716	                jsr dp_to_current
.83a5		a5 00		lda $00		                lda cp
.83a7		38		sec		                sec
.83a8		e9 03		sbc #$03	                sbc #3
.83aa		85 00		sta $00		                sta cp
.83ac		b0 02		bcs $83b0	                bcs _done
.83ae		c6 01		dec $01		                dec cp+1
.83b0						_done:
.83b0		60		rts		z_colon:        rts
.83b1						xt_colon_noname:
.83b1		a5 1a		lda $1a		                lda state
.83b3		05 1b		ora $1b		                ora state+1
.83b5		f0 05		beq $83bc	                beq +
.83b7		a9 07		lda #$07	                lda #err_state
.83b9		4c c2 d7	jmp $d7c2	                jmp error
.83bc						+
.83bc		c6 1a		dec $1a		                dec state
.83be		c6 1b		dec $1b		                dec state+1
.83c0		a9 40		lda #$40	                lda #%01000000
.83c2		14 1c		trb $1c		                trb status
.83c4		a5 00		lda $00		                lda cp
.83c6		85 06		sta $06		                sta workword
.83c8		a5 01		lda $01		                lda cp+1
.83ca		85 07		sta $07		                sta workword+1
.83cc		60		rts		z_colon_noname:        rts
.83cd						xt_comma:
.83cd		20 ac d7	jsr $d7ac	                jsr underflow_1
.83d0		a0 02		ldy #$02	                ldy #2
.83d2		b5 00		lda $00,x	_twice:         lda 0,x
.83d4		20 ac 97	jsr $97ac	                jsr cmpl_a
.83d7		e8		inx		                inx
.83d8		88		dey		                dey
.83d9		d0 f7		bne $83d2	                bne _twice
.83db		60		rts		z_comma:        rts
.83dc						xt_compile_only:
.83dc		20 03 d7	jsr $d703	                jsr current_to_dp
.83df		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.83e1		b1 02		lda ($02),y	                lda (dp),y
.83e3		09 01		ora #$01	                ora #CO        ; make sure bit 7 is set
.83e5		91 02		sta ($02),y	                sta (dp),y
.83e7		60		rts		z_compile_only: rts
.83e8						xt_value:
.83e8						xt_constant:
.83e8		20 ac d7	jsr $d7ac	                jsr underflow_1
.83eb		20 40 84	jsr $8440	                jsr xt_create
.83ee		38		sec		                sec
.83ef		a5 00		lda $00		                lda cp
.83f1		e9 02		sbc #$02	                sbc #2
.83f3		85 25		sta $25		                sta tmp1
.83f5		a5 01		lda $01		                lda cp+1
.83f7		e9 00		sbc #$00	                sbc #0
.83f9		85 26		sta $26		                sta tmp1+1
.83fb		a9 14		lda #$14	                lda #<doconst           ; LSB of DOCONST
.83fd		92 25		sta ($25)	                sta (tmp1)
.83ff		a0 01		ldy #$01	                ldy #1
.8401		a9 d6		lda #$d6	                lda #>doconst           ; MSB of DOCONST
.8403		91 25		sta ($25),y	                sta (tmp1),y
.8405		20 cd 83	jsr $83cd	                jsr xt_comma            ; drop through to adjust_z
.8408						adjust_z:
.8408		20 3b 9c	jsr $9c3b	                jsr xt_latestnt         ; gives us ( -- nt )
.840b		b5 00		lda $00,x	                lda 0,x
.840d		85 25		sta $25		                sta tmp1
.840f		b5 01		lda $01,x	                lda 1,x
.8411		85 26		sta $26		                sta tmp1+1
.8413		a0 06		ldy #$06	                ldy #6
.8415		b1 25		lda ($25),y	                lda (tmp1),y
.8417		18		clc		                clc
.8418		69 02		adc #$02	                adc #2
.841a		91 25		sta ($25),y	                sta (tmp1),y
.841c		c8		iny		                iny
.841d		b1 25		lda ($25),y	                lda (tmp1),y
.841f		69 00		adc #$00	                adc #0                  ; only need carry
.8421		91 25		sta ($25),y	                sta (tmp1),y
.8423		e8		inx		                inx
.8424		e8		inx		                inx
.8425						z_value:
.8425		60		rts		z_constant:     rts
.8426						xt_count:
.8426		20 ac d7	jsr $d7ac	                jsr underflow_1
.8429		a1 00		lda ($00,x)	                lda (0,x)       ; Get number of characters (255 max)
.842b		a8		tay		                tay
.842c		f6 00		inc $00,x	                inc 0,x         ; LSB
.842e		d0 02		bne $8432	                bne +
.8430		f6 01		inc $01,x	                inc 1,x         ; MSB
.8432		98		tya		+               tya
.8433		ca		dex		                dex
.8434		ca		dex		                dex
.8435		95 00		sta $00,x	                sta 0,x         ; LSB
.8437		74 01		stz $01,x	                stz 1,x         ; MSB, always zero
.8439		60		rts		z_count:        rts
.843a						xt_cr:
.843a		a9 0a		lda #$0a	                lda #AscLF
.843c		20 c5 86	jsr $86c5	                jsr emit_a
.843f		60		rts		z_cr:           rts
.8440						xt_create:
.8440		20 51 8d	jsr $8d51	                jsr xt_parse_name       ; ( addr u )
.8443		b5 00		lda $00,x	                lda 0,x
.8445		15 01		ora $01,x	                ora 1,x
.8447		d0 05		bne $844e	                bne _got_name
.8449		a9 05		lda #$05	                lda #err_noname
.844b		4c c2 d7	jmp $d7c2	                jmp error
.844e						_got_name:
.844e		74 01		stz $01,x	                stz 1,x
.8450		20 c7 93	jsr $93c7	                jsr xt_two_dup          ; ( addr u addr u )
.8453		20 12 9b	jsr $9b12	                jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
.8456		b5 00		lda $00,x	                lda 0,x
.8458		15 01		ora $01,x	                ora 1,x
.845a		f0 1e		beq $847a	                beq _new_name           ; We haven't seen this one before.
.845c		e8		inx		                inx                     ; Drop flag (nt) from find-name.
.845d		e8		inx		                inx
.845e		24 1c		bit $1c		                bit status
.8460		10 08		bpl $846a	                bpl _redefined_name     ; Bit 7 is zero, so print the message.
.8462		a9 80		lda #$80	                lda #$80                ; Set bit 7 to indicate dup
.8464		05 1c		ora $1c		                ora status
.8466		85 1c		sta $1c		                sta status
.8468		80 18		bra $8482	                bra _process_name
.846a						_redefined_name:
.846a		a9 02		lda #$02	                lda #str_redefined
.846c		20 e8 d7	jsr $d7e8	                jsr print_string_no_lf
.846f		20 c7 93	jsr $93c7	                jsr xt_two_dup           ; ( addr u addr u )
.8472		20 d1 94	jsr $94d1	                jsr xt_type
.8475		20 c5 91	jsr $91c5	                jsr xt_space
.8478		80 08		bra $8482	                bra _process_name
.847a						_new_name:
.847a		e8		inx		                inx                     ; Drop flag (0) from find-name.
.847b		e8		inx		                inx
.847c		a9 7f		lda #$7f	                lda #$7F                ; Clear bit 0 of status to indicate new word.
.847e		25 1c		and $1c		                and status
.8480		85 1c		sta $1c		                sta status
.8482						_process_name:
.8482		b5 00		lda $00,x	                lda 0,x
.8484		85 27		sta $27		                sta tmp2                ; store length of string in tmp2
.8486		a5 00		lda $00		                lda cp
.8488		85 25		sta $25		                sta tmp1
.848a		a5 01		lda $01		                lda cp+1
.848c		85 26		sta $26		                sta tmp1+1
.848e		b5 00		lda $00,x	                lda 0,x
.8490		18		clc		                clc
.8491		69 08		adc #$08	                adc #8
.8493		85 29		sta $29		                sta tmp3                ; total header length
.8495		95 00		sta $00,x	                sta 0,x
.8497		74 01		stz $01,x	                stz 1,x         ; max header size is 255 chars
.8499		20 27 82	jsr $8227	                jsr xt_allot    ; ( addr )
.849c		20 03 d7	jsr $d703	                jsr current_to_dp
.849f		a0 00		ldy #$00	                ldy #0
.84a1		a5 27		lda $27		                lda tmp2
.84a3		91 25		sta ($25),y	                sta (tmp1),y
.84a5		a9 08		lda #$08	                lda #NN
.84a7		09 20		ora #$20	                ora #HC
.84a9		c8		iny		                iny
.84aa		91 25		sta ($25),y	                sta (tmp1),y
.84ac		c8		iny		                iny
.84ad		a5 02		lda $02		                lda dp
.84af		91 25		sta ($25),y	                sta (tmp1),y
.84b1		c8		iny		                iny
.84b2		a5 03		lda $03		                lda dp+1
.84b4		91 25		sta ($25),y	                sta (tmp1),y
.84b6		c8		iny		                iny
.84b7		a5 26		lda $26		                lda tmp1+1
.84b9		85 03		sta $03		                sta dp+1
.84bb		a5 25		lda $25		                lda tmp1
.84bd		85 02		sta $02		                sta dp
.84bf		18		clc		                clc
.84c0		65 29		adc $29		                adc tmp3        ; add total header length
.84c2		91 25		sta ($25),y	                sta (tmp1),y
.84c4		48		pha		                pha             ; we need this in the next step
.84c5		c8		iny		                iny
.84c6		a5 26		lda $26		                lda tmp1+1
.84c8		69 00		adc #$00	                adc #0          ; only need the carry
.84ca		91 25		sta ($25),y	                sta (tmp1),y
.84cc		c8		iny		                iny
.84cd		68		pla		                pla             ; LSB of "z_" address
.84ce		18		clc		                clc
.84cf		69 03		adc #$03	                adc #3
.84d1		91 25		sta ($25),y	                sta (tmp1),y
.84d3		88		dey		                dey             ; get the MSB of xt back
.84d4		b1 25		lda ($25),y	                lda (tmp1),y
.84d6		69 00		adc #$00	                adc #0          ; only need the carry
.84d8		c8		iny		                iny
.84d9		c8		iny		                iny
.84da		91 25		sta ($25),y	                sta (tmp1),y
.84dc		c8		iny		                iny
.84dd		b5 00		lda $00,x	                lda 0,x
.84df		38		sec		                sec
.84e0		e9 08		sbc #$08	                sbc #8
.84e2		85 23		sta $23		                sta tmptos
.84e4		b5 01		lda $01,x	                lda 1,x
.84e6		e9 00		sbc #$00	                sbc #0          ; only need carry
.84e8		85 24		sta $24		                sta tmptos+1
.84ea						_name_loop:
.84ea		b1 23		lda ($23),y	                lda (tmptos),y
.84ec		c9 5b		cmp #$5b	                cmp #'Z'+1
.84ee		b0 06		bcs $84f6	                bcs _store_name
.84f0		c9 41		cmp #$41	                cmp #'A'
.84f2		90 02		bcc $84f6	                bcc _store_name
.84f4		09 20		ora #$20	                ora #$20
.84f6						_store_name:
.84f6		91 25		sta ($25),y	                sta (tmp1),y
.84f8		c8		iny		                iny
.84f9		c6 27		dec $27		                dec tmp2
.84fb		d0 ed		bne $84ea	                bne _name_loop
.84fd		a0 d6		ldy #$d6	                ldy #>dovar
.84ff		a9 5a		lda #$5a	                lda #<dovar
.8501		20 9c 97	jsr $979c	                jsr cmpl_subroutine
.8504		20 16 d7	jsr $d716	                jsr dp_to_current
.8507		e8		inx		                inx
.8508		e8		inx		                inx
.8509		60		rts		z_create:       rts
.850a						xt_decimal:
.850a		a9 0a		lda #$0a	                lda #10
.850c		85 18		sta $18		                sta base
.850e		64 19		stz $19		                stz base+1              ; paranoid
.8510		60		rts		z_decimal:      rts
.8511						xt_defer:
.8511		20 40 84	jsr $8440	                jsr xt_create
.8514		a5 00		lda $00		                lda cp          ; LSB
.8516		38		sec		                sec
.8517		e9 02		sbc #$02	                sbc #2
.8519		85 25		sta $25		                sta tmp1
.851b		a5 01		lda $01		                lda cp+1        ; MSB
.851d		e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.851f		85 26		sta $26		                sta tmp1+1
.8521		a0 00		ldy #$00	                ldy #0
.8523		a9 28		lda #$28	                lda #<dodefer   ; LSB
.8525		91 25		sta ($25),y	                sta (tmp1),y
.8527		c8		iny		                iny
.8528		a9 d6		lda #$d6	                lda #>dodefer   ; MSB
.852a		91 25		sta ($25),y	                sta (tmp1),y
.852c		a9 3c		lda #$3c	                lda #<defer_error
.852e		92 00		sta ($00)	                sta (cp)
.8530		e6 00		inc $00		                inc cp
.8532		d0 02		bne $8536	                bne +
.8534		e6 01		inc $01		                inc cp+1
.8536						+
.8536		a9 d6		lda #$d6	                lda #>defer_error
.8538		92 00		sta ($00)	                sta (cp)
.853a		e6 00		inc $00		                inc cp
.853c		d0 02		bne $8540	                bne +
.853e		e6 01		inc $01		                inc cp+1
.8540						+
.8540		20 08 84	jsr $8408	                jsr adjust_z    ; adjust header to correct length
.8543		60		rts		z_defer:        rts
.8544						xt_defer_fetch:
.8544		20 ba 92	jsr $92ba	                jsr xt_to_body
.8547		20 1a 88	jsr $881a	                jsr xt_fetch
.854a		60		rts		z_defer_fetch:  rts
.854b						xt_defer_store:
.854b		20 ba 92	jsr $92ba	                jsr xt_to_body
.854e		20 34 92	jsr $9234	                jsr xt_store
.8551		60		rts		z_defer_store:  rts
.8552						xt_depth:
.8552		a9 78		lda #$78	                lda #dsp0
.8554		86 1e		stx $1e		                stx tmpdsp
.8556		38		sec		                sec
.8557		e5 1e		sbc $1e		                sbc tmpdsp
.8559		4a		lsr a		                lsr
.855a		ca		dex		                dex
.855b		ca		dex		                dex
.855c		95 00		sta $00,x	                sta 0,x
.855e		74 01		stz $01,x	                stz 1,x
.8560		60		rts		z_depth:        rts
.8561						xt_question_do:
.8561		ca		dex		                dex
.8562		ca		dex		                dex
.8563		a9 a4		lda #$a4	                lda #<question_do_runtime
.8565		95 00		sta $00,x	                sta 0,x
.8567		a9 85		lda #$85	                lda #>question_do_runtime
.8569		95 01		sta $01,x	                sta 1,x
.856b		20 a0 86	jsr $86a0	                jsr xt_dup              ; xt and xt' are the same
.856e		ca		dex		                dex
.856f		ca		dex		                dex
.8570		a9 10		lda #$10	                lda #question_do_runtime_size
.8572		95 00		sta $00,x	                sta 0,x
.8574		74 01		stz $01,x	                stz 1,x
.8576		20 27 97	jsr $9727	                jsr cmpl_by_limit
.8579		90 0b		bcc $8586	                bcc _native
.857b		20 1b 89	jsr $891b	                jsr xt_here
.857e		20 13 9e	jsr $9e13	                jsr xt_zero
.8581		20 cd 83	jsr $83cd	                jsr xt_comma
.8584		80 08		bra $858e	                bra do_common
.8586						_native:
.8586		20 bd 97	jsr $97bd	                jsr cmpl_jump_later
.8589		80 03		bra $858e	                bra do_common
.858b						xt_do:
.858b		20 13 9e	jsr $9e13	                jsr xt_zero             ; push 0 TOS
.858e						do_common:
.858e		ca		dex		                dex
.858f		ca		dex		                dex
.8590		a5 21		lda $21		                lda loopleave
.8592		95 00		sta $00,x	                sta 0,x
.8594		a5 22		lda $22		                lda loopleave+1
.8596		95 01		sta $01,x	                sta 1,x
.8598		64 22		stz $22		                stz loopleave+1
.859a		a0 85		ldy #$85	                ldy #>do_runtime
.859c		a9 bc		lda #$bc	                lda #<do_runtime
.859e		20 9c 97	jsr $979c	                jsr cmpl_subroutine
.85a1		4c 1b 89	jmp $891b	                jmp xt_here
.85a4						z_question_do:
.85a4						z_do:
.85a4						question_do_runtime:
.85a4		b5 00		lda $00,x	                lda 0,x
.85a6		d5 02		cmp $02,x	                cmp 2,x
.85a8		d0 0d		bne $85b7	                bne _begin
.85aa		b5 01		lda $01,x	                lda 1,x
.85ac		d5 03		cmp $03,x	                cmp 3,x
.85ae		d0 07		bne $85b7	                bne _begin
.85b0		e8		inx		                inx                     ; drop loop limits and skip
.85b1		e8		inx		                inx
.85b2		e8		inx		                inx
.85b3		e8		inx		                inx
=16						question_do_runtime_size = * - question_do_runtime
.85b4		a9 00		lda #$00	                lda #0
>85b6		2c				                .byte $2c               ; BIT llhh to hide the lda #1
.85b7		a9 01		lda #$01	_begin:         lda #1
.85b9		4c 56 98	jmp $9856	                jmp zbranch_runtime
.85bc						do_runtime:
.85bc		a4 1f		ldy $1f		                ldy loopctrl
.85be		30 05		bmi $85c5	                bmi +                   ; is this the first LCB?
.85c0		a5 20		lda $20		                lda loopidx0            ; no, write cached LSB
.85c2		99 00 01	sta $0100,y	                sta loopindex,y         ; back to loopindex in the LCB
.85c5						+
.85c5		c8		iny		                iny                     ; Reserve 4 bytes for next LCB
.85c6		c8		iny		                iny
.85c7		c8		iny		                iny
.85c8		c8		iny		                iny
.85c9		84 1f		sty $1f		                sty loopctrl            ; Udpate LCB stack pointer
.85cb		38		sec		                sec
.85cc		a9 00		lda #$00	                lda #0
.85ce		f5 02		sbc $02,x	                sbc 2,x             ; LSB of limit
.85d0		99 02 01	sta $0102,y	                sta loopfufa,y      ; write to loop control block
.85d3		a9 80		lda #$80	                lda #$80
.85d5		f5 03		sbc $03,x	                sbc 3,x             ; MSB of limit
.85d7		99 03 01	sta $0103,y	                sta loopfufa+1,y
.85da		18		clc		                clc
.85db		b5 00		lda $00,x	                lda 0,x             ; LSB of original index
.85dd		79 02 01	adc $0102,y	                adc loopfufa,y
.85e0		85 20		sta $20		                sta loopidx0        ; write LSB to cache not LCB
.85e2		b5 01		lda $01,x	                lda 1,x             ; MSB of orginal index
.85e4		79 03 01	adc $0103,y	                adc loopfufa+1,y
.85e7		99 01 01	sta $0101,y	                sta loopindex+1,y
.85ea		e8		inx		                inx                 ; clean up the stack
.85eb		e8		inx		                inx
.85ec		e8		inx		                inx
.85ed		e8		inx		                inx
.85ee		60		rts		                rts
.85ef						xt_does:
.85ef		a0 85		ldy #$85	                ldy #>does_runtime
.85f1		a9 fe		lda #$fe	                lda #<does_runtime
.85f3		20 9c 97	jsr $979c	                jsr cmpl_subroutine
.85f6		a0 d6		ldy #$d6	                ldy #>dodoes
.85f8		a9 41		lda #$41	                lda #<dodoes
.85fa		20 9c 97	jsr $979c	                jsr cmpl_subroutine
.85fd		60		rts		z_does:         rts
.85fe						does_runtime:
.85fe		7a		ply		                ply             ; LSB
.85ff		68		pla		                pla             ; MSB
.8600		c8		iny		                iny
.8601		d0 01		bne $8604	                bne +
.8603		1a		inc a		                ina
.8604						+
.8604		84 25		sty $25		                sty tmp1
.8606		85 26		sta $26		                sta tmp1+1
.8608		20 03 d7	jsr $d703	                jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.860b		a5 02		lda $02		                lda dp
.860d		18		clc		                clc
.860e		69 04		adc #$04	                adc #4
.8610		85 27		sta $27		                sta tmp2
.8612		a5 03		lda $03		                lda dp+1
.8614		69 00		adc #$00	                adc #0          ; we only care about the carry
.8616		85 28		sta $28		                sta tmp2+1
.8618		b2 27		lda ($27)	                lda (tmp2)
.861a		18		clc		                clc
.861b		69 01		adc #$01	                adc #1
.861d		85 29		sta $29		                sta tmp3
.861f		a0 01		ldy #$01	                ldy #1
.8621		b1 27		lda ($27),y	                lda (tmp2),y
.8623		69 00		adc #$00	                adc #0          ; we only care about the carry
.8625		85 2a		sta $2a		                sta tmp3+1
.8627		a5 25		lda $25		                lda tmp1        ; LSB
.8629		92 29		sta ($29)	                sta (tmp3)
.862b		a5 26		lda $26		                lda tmp1+1
.862d		91 29		sta ($29),y	                sta (tmp3),y    ; Y is still 1
.862f		60		rts		                rts
.8630						xt_dot:
.8630		20 ac d7	jsr $d7ac	                jsr underflow_1
.8633		20 a0 86	jsr $86a0	                jsr xt_dup                      ; ( n n )
.8636		20 cf 80	jsr $80cf	                jsr xt_abs                      ; ( n u )
.8639		20 13 9e	jsr $9e13	                jsr xt_zero                     ; ( n u 0 )
.863c		20 cf 89	jsr $89cf	                jsr xt_less_number_sign         ; ( n u 0 )
.863f		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s            ; ( n ud )
.8642		20 8b 8f	jsr $8f8b	                jsr xt_rot                      ; ( ud n )
.8645		20 4a 91	jsr $914a	                jsr xt_sign                     ; ( ud )
.8648		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater      ; ( addr u )
.864b		20 d1 94	jsr $94d1	                jsr xt_type
.864e		20 c5 91	jsr $91c5	                jsr xt_space
.8651		60		rts		z_dot:          rts
.8652						xt_dot_paren:
.8652		ca		dex		                dex
.8653		ca		dex		                dex
.8654		a9 29		lda #$29	                lda #41     ; Right parenthesis
.8656		95 00		sta $00,x	                sta 0,x
.8658		74 01		stz $01,x	                stz 1,x
.865a		20 ac 8d	jsr $8dac	                jsr xt_parse
.865d		20 d1 94	jsr $94d1	                jsr xt_type
.8660		60		rts		z_dot_paren:    rts
.8661						xt_dot_quote:
.8661		20 d4 8f	jsr $8fd4	                jsr xt_s_quote
.8664		a0 94		ldy #$94	                ldy #>xt_type
.8666		a9 d1		lda #$d1	                lda #<xt_type
.8668		20 9c 97	jsr $979c	                jsr cmpl_subroutine
.866b		60		rts		z_dot_quote:    rts
.866c						xt_dot_r:
.866c		20 b1 d7	jsr $d7b1	                jsr underflow_2
.866f		20 88 93	jsr $9388	                jsr xt_to_r
.8672		20 a0 86	jsr $86a0	                jsr xt_dup
.8675		20 cf 80	jsr $80cf	                jsr xt_abs
.8678		20 13 9e	jsr $9e13	                jsr xt_zero
.867b		20 cf 89	jsr $89cf	                jsr xt_less_number_sign
.867e		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s
.8681		20 8b 8f	jsr $8f8b	                jsr xt_rot
.8684		20 4a 91	jsr $914a	                jsr xt_sign
.8687		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater
.868a		20 ee 8e	jsr $8eee	                jsr xt_r_from
.868d		20 05 8d	jsr $8d05	                jsr xt_over
.8690		20 e4 8b	jsr $8be4	                jsr xt_minus
.8693		20 cb 91	jsr $91cb	                jsr xt_spaces
.8696		20 d1 94	jsr $94d1	                jsr xt_type
.8699		60		rts		z_dot_r:        rts
.869a						xt_drop:
.869a		20 ac d7	jsr $d7ac	                jsr underflow_1
.869d		e8		inx		                inx
.869e		e8		inx		                inx
.869f		60		rts		z_drop:         rts
.86a0						xt_dup:
.86a0		20 ac d7	jsr $d7ac	                jsr underflow_1
.86a3		ca		dex		                dex
.86a4		ca		dex		                dex
.86a5		b5 02		lda $02,x	                lda 2,x         ; LSB
.86a7		95 00		sta $00,x	                sta 0,x
.86a9		b5 03		lda $03,x	                lda 3,x         ; MSB
.86ab		95 01		sta $01,x	                sta 1,x
.86ad		60		rts		z_dup:          rts
.86ae						xt_else:
.86ae						xt_endof:
.86ae		20 bd 97	jsr $97bd	                jsr cmpl_jump_later
.86b1		20 4a 92	jsr $924a	                jsr xt_swap         ; ( target orig )
.86b4						xt_then:
.86b4		20 1b 89	jsr $891b	                jsr xt_here
.86b7		20 4a 92	jsr $924a	                jsr xt_swap
.86ba		20 34 92	jsr $9234	                jsr xt_store
.86bd						z_else:
.86bd						z_endof:
.86bd		60		rts		z_then:         rts
.86be						xt_emit:
.86be		20 ac d7	jsr $d7ac	                jsr underflow_1
.86c1		b5 00		lda $00,x	                lda 0,x
.86c3		e8		inx		                inx
.86c4		e8		inx		                inx
.86c5						emit_a:
.86c5		6c 12 00	jmp ($0012)	                jmp (output)            ; JSR/RTS
.86c8						z_emit:
.86c8						xt_endcase:
.86c8		a0 86		ldy #$86	                ldy #>xt_drop
.86ca		a9 9a		lda #$9a	                lda #<xt_drop
.86cc		20 9c 97	jsr $979c	                jsr cmpl_subroutine
.86cf						_endcase_loop:
.86cf		b5 00		lda $00,x	                lda 0,x
.86d1		15 01		ora $01,x	                ora 1,x
.86d3		f0 05		beq $86da	                beq _done
.86d5		20 b4 86	jsr $86b4	                jsr xt_then
.86d8		80 f5		bra $86cf	                bra _endcase_loop
.86da						_done:
.86da		e8		inx		                inx
.86db		e8		inx		                inx
.86dc		60		rts		z_endcase:      rts
.86dd						xt_environment_q:
.86dd		20 ac d7	jsr $d7ac	                jsr underflow_1
.86e0		a0 00		ldy #$00	                ldy #00                 ; counter for table
.86e2		5a		phy		                phy
.86e3						_table_loop:
.86e3		20 c7 93	jsr $93c7	                jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
.86e6		ca		dex		                dex
.86e7		ca		dex		                dex                     ; ( addr u addr u ? )
.86e8		b9 5a 87	lda $875a,y	                lda env_table_single,y
.86eb		95 00		sta $00,x	                sta 0,x
.86ed		c8		iny		                iny
.86ee		b9 5a 87	lda $875a,y	                lda env_table_single,y
.86f1		95 01		sta $01,x	                sta 1,x                 ; ( addr u addr u addr-t )
.86f3		c8		iny		                iny
.86f4		15 00		ora $00,x	                ora 0,x
.86f6		f0 4d		beq $8745	                beq _table_done
.86f8		5a		phy		                phy                     ; save Y, which is used by COUNT
.86f9		20 26 84	jsr $8426	                jsr xt_count            ; ( addr u addr u addr-s u-s )
.86fc		20 da 9f	jsr $9fda	                jsr xt_compare          ; ( addr u f )
.86ff		7a		ply		                ply
.8700		b5 00		lda $00,x	                lda 0,x
.8702		15 01		ora $01,x	                ora 1,x
.8704		f0 04		beq $870a	                beq _got_result
.8706		e8		inx		                inx                     ; DROP, now ( addr u )
.8707		e8		inx		                inx
.8708		80 d9		bra $86e3	                bra _table_loop
.870a						_got_result:
.870a		e8		inx		                inx                     ; drop flag, now ( addr u )
.870b		e8		inx		                inx
.870c		88		dey		                dey                     ; go back to index we had
.870d		88		dey		                dey
.870e		68		pla		                pla
.870f		d0 0d		bne $871e	                bne _double_result
.8711		b9 78 87	lda $8778,y	                lda env_results_single,y
.8714		95 02		sta $02,x	                sta 2,x
.8716		c8		iny		                iny
.8717		b9 78 87	lda $8778,y	                lda env_results_single,y
.871a		95 03		sta $03,x	                sta 3,x                 ; ( res u )
.871c		80 1f		bra $873d	                bra _set_flag
.871e						_double_result:
.871e		ca		dex		                dex                     ; ( addr u ? )
.871f		ca		dex		                dex
.8720		98		tya		                tya
.8721		38		sec		                sec
.8722		e9 18		sbc #$18	                sbc #24
.8724		0a		asl a		                asl
.8725		a8		tay		                tay
.8726		b9 8e 87	lda $878e,y	                lda env_results_double,y
.8729		95 02		sta $02,x	                sta 2,x
.872b		c8		iny		                iny
.872c		b9 8e 87	lda $878e,y	                lda env_results_double,y
.872f		95 03		sta $03,x	                sta 3,x                 ; ( res u ? )
.8731		c8		iny		                iny
.8732		b9 8e 87	lda $878e,y	                lda env_results_double,y
.8735		95 04		sta $04,x	                sta 4,x
.8737		c8		iny		                iny
.8738		b9 8e 87	lda $878e,y	                lda env_results_double,y
.873b		95 05		sta $05,x	                sta 5,x                 ; ( res res ? )
.873d						_set_flag:
.873d		a9 ff		lda #$ff	                lda #$FF
.873f		95 00		sta $00,x	                sta 0,x
.8741		95 01		sta $01,x	                sta 1,x                 ; ( res f )
.8743		80 14		bra $8759	                bra _done
.8745						_table_done:
.8745		68		pla		                pla
.8746		d0 09		bne $8751	                bne _no_match
.8748		1a		inc a		                ina
.8749		48		pha		                pha
.874a		8a		txa		                txa
.874b		18		clc		                clc
.874c		69 06		adc #$06	                adc #6                  ; skip six bytes
.874e		aa		tax		                tax                     ; ( addr u )
.874f		80 92		bra $86e3	                bra _table_loop
.8751						_no_match:
.8751		8a		txa		                txa
.8752		18		clc		                clc
.8753		69 0a		adc #$0a	                adc #10
.8755		aa		tax		                tax                     ; ( addr ) - not ( 0 ) !
.8756		20 13 9e	jsr $9e13	                jsr xt_false
.8759						_done:
.8759						z_environment_q:
.8759		60		rts		                rts
.875a						env_table_single:
>875a		94 d5 a4 d5 aa d5 af d5		        .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
>8762		c1 d5
>8764		c9 d5 d2 d5 d8 d5 de d5		        .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
>876c		f1 d5 fd d5 00 00		        .word envs_sc, envs_wl, 0000
.8772						env_table_double:
>8772		07 d6 0d d6 00 00		        .word envs_max_d, envs_max_ud, 0000
.8778						env_results_single:
>8778		ff 00				        .word $00FF     ; /COUNTED-STRING
>877a		ff 00				        .word $00FF     ; /HOLD
>877c		54 00				        .word $0054     ; /PAD (this is 84 decimal)
>877e		08 00				        .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
>8780		00 00				        .word 0000      ; FLOORED ("FALSE", we have symmetric)
>8782		ff 00				        .word $00FF     ; MAX-CHAR
>8784		ff 7f				        .word $7FFF     ; MAX-N
>8786		ff ff				        .word $FFFF     ; MAX-U
>8788		80 00				        .word $0080     ; RETURN-STACK-CELLS
>878a		20 00				        .word $0020     ; STACK-CELLS (from definitions.asm)
>878c		09 00				        .word $0009     ; WORDLISTS
.878e						env_results_double:
>878e		ff 7f ff ff			        .word $7FFF, $FFFF      ; MAX-D
>8792		ff ff ff ff			        .word $FFFF, $FFFF      ; MAX-UD
.8796						xt_equal:
.8796		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8799		b5 00		lda $00,x	                lda 0,x                 ; LSB
.879b		d5 02		cmp $02,x	                cmp 2,x
.879d		d0 0a		bne $87a9	                bne _false
.879f		b5 01		lda $01,x	                lda 1,x                 ; MSB
.87a1		d5 03		cmp $03,x	                cmp 3,x
.87a3		d0 04		bne $87a9	                bne _false
.87a5		a9 ff		lda #$ff	                lda #$FF
.87a7		80 02		bra $87ab	                bra _done
.87a9		a9 00		lda #$00	_false:         lda #0                  ; drop thru to done
.87ab		95 02		sta $02,x	_done:          sta 2,x
.87ad		95 03		sta $03,x	                sta 3,x
.87af		e8		inx		                inx
.87b0		e8		inx		                inx
.87b1		60		rts		z_equal:        rts
.87b2						xt_blank:
.87b2		ca		dex		                dex
.87b3		ca		dex		                dex
.87b4		a9 20		lda #$20	                lda #AscSP
.87b6		95 00		sta $00,x	                sta 0,x
.87b8		74 01		stz $01,x	                stz 1,x
.87ba		80 06		bra $87c2	                bra xt_fill     ; skip over code for ERASE
.87bc						xt_erase:
.87bc		ca		dex		                dex
.87bd		ca		dex		                dex
.87be		74 00		stz $00,x	                stz 0,x
.87c0		74 01		stz $01,x	                stz 1,x
.87c2						xt_fill:
.87c2		20 b6 d7	jsr $d7b6	                jsr underflow_3
.87c5		b5 04		lda $04,x	                lda 4,x         ; LSB
.87c7		85 25		sta $25		                sta tmp1
.87c9		b5 05		lda $05,x	                lda 5,x
.87cb		85 26		sta $26		                sta tmp1+1
.87cd		b5 02		lda $02,x	                lda 2,x
.87cf		85 27		sta $27		                sta tmp2
.87d1		b5 03		lda $03,x	                lda 3,x
.87d3		85 28		sta $28		                sta tmp2+1
.87d5		b5 00		lda $00,x	                lda 0,x
.87d7		a8		tay		                tay
.87d8						_loop:
.87d8		a9 7f		lda #$7f	                lda #>ram_end           ; MSB
.87da		c5 26		cmp $26		                cmp tmp1+1
.87dc		90 21		bcc $87ff	                bcc _done               ; RAM_END < TMP1, so leave
.87de		d0 06		bne $87e6	                bne _check_counter      ; RAM_END is not smaller and not equal
.87e0		a9 ff		lda #$ff	                lda #<ram_end           ; LSB, because MSBs were equal
.87e2		c5 25		cmp $25		                cmp tmp1
.87e4		90 19		bcc $87ff	                bcc _done               ; RAM_END < TMP1, so leave
.87e6						_check_counter:
.87e6		a5 27		lda $27		                lda tmp2
.87e8		05 28		ora $28		                ora tmp2+1
.87ea		f0 13		beq $87ff	                beq _done
.87ec		98		tya		                tya
.87ed		92 25		sta ($25)	                sta (tmp1)
.87ef		a5 27		lda $27		                lda tmp2
.87f1		d0 02		bne $87f5	                bne +
.87f3		c6 28		dec $28		                dec tmp2+1
.87f5		c6 27		dec $27		+               dec tmp2
.87f7		e6 25		inc $25		                inc tmp1
.87f9		d0 dd		bne $87d8	                bne _loop
.87fb		e6 26		inc $26		                inc tmp1+1
.87fd		80 d9		bra $87d8	                bra _loop
.87ff						_done:
.87ff		8a		txa		                txa
.8800		18		clc		                clc
.8801		69 06		adc #$06	                adc #6
.8803		aa		tax		                tax
.8804						z_blank:
.8804						z_erase:
.8804		60		rts		z_fill:         rts
.8805						xt_execute:
.8805		20 ac d7	jsr $d7ac	                jsr underflow_1
.8808		20 0c 88	jsr $880c	                jsr doexecute   ; do not combine to JMP (native coding)
.880b		60		rts		z_execute:      rts
.880c						doexecute:
.880c		b5 00		lda $00,x	                lda 0,x
.880e		85 04		sta $04		                sta ip
.8810		b5 01		lda $01,x	                lda 1,x
.8812		85 05		sta $05		                sta ip+1
.8814		e8		inx		                inx
.8815		e8		inx		                inx
.8816		6c 04 00	jmp ($0004)	                jmp (ip)
.8819						xt_exit:
.8819		60		rts		                rts             ; keep before z_exit
.881a						z_exit:
.881a						xt_fetch:
.881a		20 ac d7	jsr $d7ac	                jsr underflow_1
.881d		a1 00		lda ($00,x)	                lda (0,x)               ; LSB
.881f		a8		tay		                tay
.8820		f6 00		inc $00,x	                inc 0,x
.8822		d0 02		bne $8826	                bne +
.8824		f6 01		inc $01,x	                inc 1,x
.8826						+
.8826		a1 00		lda ($00,x)	                lda (0,x)               ; MSB
.8828		95 01		sta $01,x	                sta 1,x
.882a		94 00		sty $00,x	                sty 0,x
.882c		60		rts		z_fetch:        rts
.882d						xt_find:
.882d		20 ac d7	jsr $d7ac	                jsr underflow_1
.8830		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8832		48		pha		                pha
.8833		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8835		48		pha		                pha
.8836		20 26 84	jsr $8426	                jsr xt_count            ; ( caddr -- addr u )
.8839		20 12 9b	jsr $9b12	                jsr xt_find_name        ; ( addr u -- nt | 0 )
.883c		b5 00		lda $00,x	                lda 0,x
.883e		15 01		ora $01,x	                ora 1,x
.8840		d0 0b		bne $884d	                bne _found_word
.8842		20 13 9e	jsr $9e13	                jsr xt_false            ; ( 0 0 )
.8845		68		pla		                pla                     ; LSB of address
.8846		95 02		sta $02,x	                sta 2,x
.8848		68		pla		                pla
.8849		95 03		sta $03,x	                sta 3,x                 ; MSB of address
.884b		80 27		bra $8874	                bra _done               ; ( addr 0 )
.884d						_found_word:
.884d		68		pla		                pla
.884e		68		pla		                pla
.884f		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt nt )
.8852		20 50 9c	jsr $9c50	                jsr xt_name_to_int      ; ( nt xt )
.8855		20 4a 92	jsr $924a	                jsr xt_swap             ; ( xt nt )
.8858		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.885a		f6 00		inc $00,x	                inc 0,x
.885c		d0 02		bne $8860	                bne +
.885e		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.8860						+
.8860		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.8862		29 04		and #$04	                and #IM
.8864		d0 08		bne $886e	                bne _immediate          ; bit set, we're immediate
.8866		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.8868		95 00		sta $00,x	                sta 0,x
.886a		95 01		sta $01,x	                sta 1,x
.886c		80 06		bra $8874	                bra _done
.886e						_immediate:
.886e		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.8870		95 00		sta $00,x	                sta 0,x
.8872		74 01		stz $01,x	                stz 1,x
.8874						_done:
.8874		60		rts		z_find:         rts
.8875						xt_fm_slash_mod:
.8875		20 b6 d7	jsr $d7b6	                jsr underflow_3
.8878		64 27		stz $27		                stz tmp2        ; default: n is positive
.887a		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.887c		10 0e		bpl $888c	                bpl _check_d
.887e		e6 27		inc $27		                inc tmp2        ; set flag to negative for n1
.8880		20 1f 8c	jsr $8c1f	                jsr xt_negate   ; NEGATE
.8883		20 88 93	jsr $9388	                jsr xt_to_r     ; >R
.8886		20 81 9e	jsr $9e81	                jsr xt_dnegate  ; DNEGATE
.8889		20 ee 8e	jsr $8eee	                jsr xt_r_from   ; R>
.888c						_check_d:
.888c		b5 03		lda $03,x	                lda 3,x         ; MSB of high word of d
.888e		10 0d		bpl $889d	                bpl _multiply
.8890		18		clc		                clc
.8891		b5 00		lda $00,x	                lda 0,x         ; LSB of n1
.8893		75 02		adc $02,x	                adc 2,x         ; LSB of dh
.8895		95 02		sta $02,x	                sta 2,x
.8897		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8899		75 03		adc $03,x	                adc 3,x         ; MSB of dh
.889b		95 03		sta $03,x	                sta 3,x
.889d						_multiply:
.889d		20 56 95	jsr $9556	                jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
.88a0		a5 27		lda $27		                lda tmp2
.88a2		f0 07		beq $88ab	                beq _done
.88a4		e8		inx		                inx             ; pretend that we SWAP
.88a5		e8		inx		                inx
.88a6		20 1f 8c	jsr $8c1f	                jsr xt_negate
.88a9		ca		dex		                dex
.88aa		ca		dex		                dex
.88ab						_done:
.88ab		60		rts		z_fm_slash_mod: rts
.88ac						load_evaluate:
.88ac		a9 ff		lda #$ff	                lda #$FF
.88ae		85 25		sta $25		                sta tmp1
.88b0		80 11		bra $88c3	                bra load_evaluate_start
.88b2						xt_evaluate:
.88b2		20 b1 d7	jsr $d7b1	                jsr underflow_2
.88b5		64 25		stz $25		                stz tmp1
.88b7		b5 00		lda $00,x	                lda 0,x
.88b9		15 01		ora $01,x	                ora 1,x
.88bb		d0 06		bne $88c3	                bne evaluate_got_work
.88bd		e8		inx		                inx
.88be		e8		inx		                inx
.88bf		e8		inx		                inx
.88c0		e8		inx		                inx
.88c1		80 42		bra $8905	                bra evaluate_done
.88c3						load_evaluate_start:
.88c3						evaluate_got_work:
.88c3		a0 05		ldy #$05	                ldy #blk_offset+1
.88c5		b1 08		lda ($08),y	                lda (up),y
.88c7		48		pha		                pha
.88c8		88		dey		                dey
.88c9		b1 08		lda ($08),y	                lda (up),y
.88cb		48		pha		                pha
.88cc		a5 25		lda $25		                lda tmp1
.88ce		d0 05		bne $88d5	                bne _nozero
.88d0		91 08		sta ($08),y	                sta (up),y
.88d2		c8		iny		                iny
.88d3		91 08		sta ($08),y	                sta (up),y
.88d5						_nozero:
.88d5		20 b4 9b	jsr $9bb4	                jsr xt_input_to_r
.88d8		a9 ff		lda #$ff	                lda #$FF
.88da		85 0a		sta $0a		                sta insrc
.88dc		85 0b		sta $0b		                sta insrc+1
.88de		64 10		stz $10		                stz toin
.88e0		64 11		stz $11		                stz toin+1
.88e2		b5 00		lda $00,x	                lda 0,x
.88e4		85 0e		sta $0e		                sta ciblen
.88e6		b5 01		lda $01,x	                lda 1,x
.88e8		85 0f		sta $0f		                sta ciblen+1
.88ea		b5 02		lda $02,x	                lda 2,x
.88ec		85 0c		sta $0c		                sta cib
.88ee		b5 03		lda $03,x	                lda 3,x
.88f0		85 0d		sta $0d		                sta cib+1
.88f2		e8		inx		                inx             ; A clean stack is a clean mind
.88f3		e8		inx		                inx
.88f4		e8		inx		                inx
.88f5		e8		inx		                inx
.88f6		20 29 d7	jsr $d729	                jsr interpret   ; ( -- )
.88f9		20 c1 9d	jsr $9dc1	                jsr xt_r_to_input
.88fc		a0 04		ldy #$04	                ldy #blk_offset
.88fe		68		pla		                pla
.88ff		91 08		sta ($08),y	                sta (up),y
.8901		c8		iny		                iny
.8902		68		pla		                pla
.8903		91 08		sta ($08),y	                sta (up),y
.8905						evaluate_done:
.8905		60		rts		z_evaluate:     rts
.8906						xt_greater_than:
.8906		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8909		a0 00		ldy #$00	                ldy #0          ; default false
.890b		20 ea d6	jsr $d6ea	                jsr compare_16bit
.890e		f0 03		beq $8913	                beq _false
.8910		10 01		bpl $8913	                bpl _false
.8912		88		dey		                dey
.8913						_false:
.8913		98		tya		                tya
.8914		e8		inx		                inx
.8915		e8		inx		                inx
.8916		95 00		sta $00,x	                sta 0,x
.8918		95 01		sta $01,x	                sta 1,x
.891a		60		rts		z_greater_than: rts
.891b						xt_here:
.891b						xt_begin:
.891b						xt_asm_arrow:
.891b		ca		dex		                dex
.891c		ca		dex		                dex
.891d		a5 00		lda $00		                lda cp
.891f		95 00		sta $00,x	                sta 0,x
.8921		a5 01		lda $01		                lda cp+1
.8923		95 01		sta $01,x	                sta 1,x
.8925						z_here:
.8925						z_begin:
.8925						z_asm_arrow:
.8925		60		rts		                rts
.8926						xt_hex:
.8926		a9 10		lda #$10	                lda #16
.8928		85 18		sta $18		                sta base
.892a		64 19		stz $19		                stz base+1              ; paranoid
.892c		60		rts		z_hex:          rts
.892d						xt_hold:
.892d		20 ac d7	jsr $d7ac	                jsr underflow_1
.8930		a5 2b		lda $2b		                lda tohold
.8932		d0 02		bne $8936	                bne +
.8934		c6 2c		dec $2c		                dec tohold+1
.8936						+
.8936		c6 2b		dec $2b		                dec tohold
.8938		b5 00		lda $00,x	                lda 0,x
.893a		92 2b		sta ($2b)	                sta (tohold)
.893c		e8		inx		                inx
.893d		e8		inx		                inx
.893e		60		rts		z_hold:         rts
.893f						xt_i:
.893f		ca		dex		                dex
.8940		ca		dex		                dex
.8941		a4 1f		ldy $1f		                ldy loopctrl
.8943		38		sec		                sec
.8944		a5 20		lda $20		                lda loopidx0        ; cached LSB of loopindex
.8946		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.8949		95 00		sta $00,x	                sta 0,x
.894b		b9 01 01	lda $0101,y	                lda loopindex+1,y
.894e		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.8951		95 01		sta $01,x	                sta 1,x
.8953		60		rts		z_i:            rts
.8954						xt_if:
.8954		20 d9 97	jsr $97d9	                jsr cmpl_0branch_later
.8957		60		rts		z_if:           rts
.8958						xt_immediate:
.8958		20 03 d7	jsr $d703	                jsr current_to_dp
.895b		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.895d		b1 02		lda ($02),y	                lda (dp),y
.895f		09 04		ora #$04	                ora #IM        ; make sure bit 7 is set
.8961		91 02		sta ($02),y	                sta (dp),y
.8963		60		rts		z_immediate:    rts
.8964						xt_invert:
.8964		20 ac d7	jsr $d7ac	                jsr underflow_1
.8967		a9 ff		lda #$ff	                lda #$FF
.8969		55 00		eor $00,x	                eor 0,x         ; LSB
.896b		95 00		sta $00,x	                sta 0,x
.896d		a9 ff		lda #$ff	                lda #$FF
.896f		55 01		eor $01,x	                eor 1,x         ; MSB
.8971		95 01		sta $01,x	                sta 1,x
.8973		60		rts		z_invert:       rts
.8974						xt_is:
.8974		a5 1a		lda $1a		                lda state
.8976		05 1b		ora $1b		                ora state+1
.8978		f0 0c		beq $8986	                beq _interpreting
.897a		20 14 83	jsr $8314	                jsr xt_bracket_tick
.897d		a0 85		ldy #$85	                ldy #>xt_defer_store
.897f		a9 4b		lda #$4b	                lda #<xt_defer_store
.8981		20 9c 97	jsr $979c	                jsr cmpl_subroutine
.8984		80 06		bra $898c	                bra _done
.8986						_interpreting:
.8986		20 5e 92	jsr $925e	                jsr xt_tick
.8989		20 4b 85	jsr $854b	                jsr xt_defer_store
.898c						_done:
.898c		60		rts		z_is:           rts
.898d						xt_j:
.898d		ca		dex		                dex                 ; make space on the stack
.898e		ca		dex		                dex
.898f		a5 1f		lda $1f		                lda loopctrl
.8991		38		sec		                sec
.8992		e9 04		sbc #$04	                sbc #4
.8994		a8		tay		                tay
.8995		38		sec		                sec
.8996		b9 00 01	lda $0100,y	                lda loopindex,y
.8999		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.899c		95 00		sta $00,x	                sta 0,x
.899e		b9 01 01	lda $0101,y	                lda loopindex+1,y
.89a1		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.89a4		95 01		sta $01,x	                sta 1,x
.89a6		60		rts		z_j:            rts
.89a7						xt_key:
.89a7		20 b1 89	jsr $89b1	                jsr key_a               ; returns char in A
.89aa		ca		dex		                dex
.89ab		ca		dex		                dex
.89ac		95 00		sta $00,x	                sta 0,x
.89ae		74 01		stz $01,x	                stz 1,x
.89b0		60		rts		z_key:          rts
.89b1						key_a:
.89b1		6c 14 00	jmp ($0014)	                jmp (input)             ; JSR/RTS
.89b4						xt_leave:
.89b4		a5 21		lda $21		                lda loopleave
.89b6		a4 22		ldy $22		                ldy loopleave+1
.89b8		20 a1 97	jsr $97a1	                jsr cmpl_jump   ; emit the JMP chaining prior leave address
.89bb		38		sec		                sec
.89bc		a5 00		lda $00		                lda cp
.89be		e9 02		sbc #$02	                sbc #2
.89c0		85 21		sta $21		                sta loopleave
.89c2		a5 01		lda $01		                lda cp+1
.89c4		b0 01		bcs $89c7	                bcs +
.89c6		3a		dec a		                dea
.89c7		85 22		sta $22		+               sta loopleave+1
.89c9						z_leave:
.89c9		60		rts		                rts
.89ca						xt_left_bracket:
.89ca		64 1a		stz $1a		                stz state
.89cc		64 1b		stz $1b		                stz state+1
.89ce		60		rts		z_left_bracket: rts
.89cf						xt_less_number_sign:
.89cf		20 13 8d	jsr $8d13	                jsr xt_pad      ; ( addr )
.89d2		b5 00		lda $00,x	                lda 0,x
.89d4		85 2b		sta $2b		                sta tohold
.89d6		b5 01		lda $01,x	                lda 1,x
.89d8		85 2c		sta $2c		                sta tohold+1
.89da		e8		inx		                inx
.89db		e8		inx		                inx
.89dc						z_less_number_sign:
.89dc		60		rts		                rts
.89dd						xt_less_than:
.89dd		20 b1 d7	jsr $d7b1	                jsr underflow_2
.89e0		a0 00		ldy #$00	                ldy #0          ; default false
.89e2		20 ea d6	jsr $d6ea	                jsr compare_16bit
.89e5		f0 03		beq $89ea	                beq _false
.89e7		30 01		bmi $89ea	                bmi _false
.89e9		88		dey		                dey
.89ea						_false:
.89ea		98		tya		                tya
.89eb		e8		inx		                inx
.89ec		e8		inx		                inx
.89ed		95 00		sta $00,x	                sta 0,x
.89ef		95 01		sta $01,x	                sta 1,x
.89f1		60		rts		z_less_than:    rts
.89f2						xt_literal:
.89f2		20 ac d7	jsr $d7ac	                jsr underflow_1
.89f5		a9 0a		lda #$0a	                lda #template_push_tos_size
.89f7		20 c7 97	jsr $97c7	                jsr check_nc_limit
.89fa		90 0c		bcc $8a08	                bcc _inline
.89fc		a0 8a		ldy #$8a	                ldy #>literal_runtime
.89fe		a9 3a		lda #$3a	                lda #<literal_runtime
.8a00		20 9c 97	jsr $979c	                jsr cmpl_subroutine
.8a03		20 cd 83	jsr $83cd	                jsr xt_comma
.8a06		80 27		bra $8a2f	                bra z_literal
.8a08						_inline:
.8a08		a0 94		ldy #$94	                ldy #$94        ; STY opcode
.8a0a		b5 01		lda $01,x	                lda 1,x         ; MSB
.8a0c		d0 02		bne $8a10	                bne +
.8a0e		a0 74		ldy #$74	                ldy #$74        ; STZ opcode
.8a10		5a		phy		+               phy
.8a11		b5 00		lda $00,x	                lda 0,x         ; LSB
.8a13		48		pha		                pha
.8a14		a0 02		ldy #$02	                ldy #2
.8a16		b5 01		lda $01,x	                lda 1,x         ; MSB
.8a18		f0 03		beq $8a1d	                beq _copy
.8a1a		a0 00		ldy #$00	                ldy #0
.8a1c		48		pha		                pha
.8a1d		b9 30 8a	lda $8a30,y	_copy:          lda template_push_tos,y
.8a20		c9 ff		cmp #$ff	                cmp #$ff        ; is it a placeholder?
.8a22		d0 01		bne $8a25	                bne +
.8a24		68		pla		                pla
.8a25		20 ac 97	jsr $97ac	+               jsr cmpl_a
.8a28		c8		iny		                iny
.8a29		c0 0a		cpy #$0a	                cpy #template_push_tos_size
.8a2b		d0 f0		bne $8a1d	                bne _copy
.8a2d		e8		inx		                inx             ; drop the literal
.8a2e		e8		inx		                inx
.8a2f		60		rts		z_literal:      rts
.8a30						template_push_tos:
.8a30		a0 ff		ldy #$ff	                ldy #$ff        ; we'll omit this if MSB is zero
.8a32		a9 ff		lda #$ff	                lda #$ff
.8a34		ca		dex		                dex
.8a35		ca		dex		                dex
.8a36		95 00		sta $00,x	                sta 0,x
>8a38		ff 01				                .byte $ff, 1    ; this will become either sty 1,x or stz 1,x
=10						template_push_tos_size = * - template_push_tos
.8a3a						literal_runtime:
.8a3a		ca		dex		                dex
.8a3b		ca		dex		                dex
.8a3c		68		pla		                pla             ; LSB
.8a3d		85 25		sta $25		                sta tmp1
.8a3f		68		pla		                pla             ; MSB
.8a40		85 26		sta $26		                sta tmp1+1
.8a42		a0 01		ldy #$01	                ldy #1
.8a44		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB
.8a46		95 00		sta $00,x	                sta 0,x
.8a48		c8		iny		                iny
.8a49		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB
.8a4b		95 01		sta $01,x	                sta 1,x
.8a4d		98		tya		                tya
.8a4e		18		clc		                clc
.8a4f		65 25		adc $25		                adc tmp1
.8a51		a8		tay		                tay
.8a52		a5 26		lda $26		                lda tmp1+1
.8a54		69 00		adc #$00	                adc #0
.8a56		48		pha		                pha
.8a57		5a		phy		                phy
.8a58		60		rts		                rts
.8a59						xt_loop:
.8a59		ca		dex		                dex
.8a5a		ca		dex		                dex
.8a5b		ca		dex		                dex
.8a5c		ca		dex		                dex
.8a5d		a9 d2		lda #$d2	                lda #<loop_runtime
.8a5f		95 02		sta $02,x	                sta 2,x
.8a61		a9 8a		lda #$8a	                lda #>loop_runtime
.8a63		95 03		sta $03,x	                sta 3,x
.8a65		a9 11		lda #$11	                lda #loop_runtime_size
.8a67		95 00		sta $00,x	                sta 0,x
.8a69		74 01		stz $01,x	                stz 1,x
.8a6b		80 12		bra $8a7f	                bra xt_loop_common
.8a6d						xt_plus_loop:
.8a6d		ca		dex		                dex
.8a6e		ca		dex		                dex
.8a6f		ca		dex		                dex
.8a70		ca		dex		                dex
.8a71		a9 eb		lda #$eb	                lda #<plus_loop_runtime
.8a73		95 02		sta $02,x	                sta 2,x
.8a75		a9 8a		lda #$8a	                lda #>plus_loop_runtime
.8a77		95 03		sta $03,x	                sta 3,x
.8a79		a9 1a		lda #$1a	                lda #plus_loop_runtime_size
.8a7b		95 00		sta $00,x	                sta 0,x
.8a7d		74 01		stz $01,x	                stz 1,x
.8a7f						xt_loop_common:
.8a7f		20 05 8d	jsr $8d05	                jsr xt_over
.8a82		20 4a 92	jsr $924a	                jsr xt_swap             ; xt and xt' are the same
.8a85		20 27 97	jsr $9727	                jsr cmpl_by_limit
.8a88		90 05		bcc $8a8f	                bcc _native
.8a8a		20 cd 83	jsr $83cd	                jsr xt_comma
.8a8d		80 03		bra $8a92	                bra +
.8a8f						_native:
.8a8f		20 b5 97	jsr $97b5	                jsr cmpl_jump_tos
.8a92						+
.8a92		a5 22		lda $22		                lda loopleave+1         ; MSB=0 means we're done
.8a94		f0 19		beq $8aaf	                beq _noleave
.8a96						_next:
.8a96		a0 01		ldy #$01	                ldy #1
.8a98		b1 21		lda ($21),y	                lda (loopleave),y
.8a9a		48		pha		                pha
.8a9b		a5 01		lda $01		                lda cp+1
.8a9d		91 21		sta ($21),y	                sta (loopleave),y
.8a9f		88		dey		                dey
.8aa0		b1 21		lda ($21),y	                lda (loopleave),y
.8aa2		48		pha		                pha
.8aa3		a5 00		lda $00		                lda cp
.8aa5		91 21		sta ($21),y	                sta (loopleave),y
.8aa7		68		pla		                pla
.8aa8		85 21		sta $21		                sta loopleave
.8aaa		68		pla		                pla
.8aab		85 22		sta $22		                sta loopleave+1
.8aad		d0 e7		bne $8a96	                bne _next
.8aaf						_noleave:
.8aaf		b5 00		lda $00,x	                lda 0,x
.8ab1		85 21		sta $21		                sta loopleave
.8ab3		b5 01		lda $01,x	                lda 1,x
.8ab5		85 22		sta $22		                sta loopleave+1
.8ab7		a9 de		lda #$de	                lda #<xt_unloop
.8ab9		95 00		sta $00,x	                sta 0,x
.8abb		a9 95		lda #$95	                lda #>xt_unloop
.8abd		95 01		sta $01,x	                sta 1,x
.8abf		20 d4 96	jsr $96d4	                jsr xt_compile_comma
.8ac2		b5 01		lda $01,x	                lda 1,x                 ; MSB=0 means DO so nothing to do
.8ac4		f0 09		beq $8acf	                beq +
.8ac6		20 1b 89	jsr $891b	                jsr xt_here
.8ac9		20 4a 92	jsr $924a	                jsr xt_swap
.8acc		4c 34 92	jmp $9234	                jmp xt_store            ; write here as ?DO jmp target and return
.8acf		e8		inx		+               inx                     ; drop the ignored word for DO
.8ad0		e8		inx		                inx
.8ad1						z_loop:
.8ad1		60		rts		z_plus_loop:    rts
.8ad2						loop_runtime:
.8ad2		e6 20		inc $20		                inc loopidx0            ; increment the LSB of loopindex
.8ad4		d0 0d		bne $8ae3	                bne _repeat             ; avoid expensive test most of the time
.8ad6		a4 1f		ldy $1f		                ldy loopctrl
.8ad8		b9 01 01	lda $0101,y	                lda loopindex+1,y
.8adb		1a		inc a		                ina
.8adc		c9 80		cmp #$80	                cmp #$80
.8ade		f0 06		beq $8ae6	                beq _done
.8ae0		99 01 01	sta $0101,y	                sta loopindex+1,y
=17						loop_runtime_size = * - loop_runtime
.8ae3						_repeat:
.8ae3		a9 00		lda #$00	                lda #0
>8ae5		2c				                .byte $2c               ; BIT llhh to hide the lda #1
.8ae6		a9 01		lda #$01	_done:          lda #1
.8ae8		4c 56 98	jmp $9856	                jmp zbranch_runtime
.8aeb						plus_loop_runtime:
.8aeb		18		clc		                clc
.8aec		b5 00		lda $00,x	                lda 0,x                 ; LSB of step
.8aee		65 20		adc $20		                adc loopidx0
.8af0		85 20		sta $20		                sta loopidx0
.8af2		e8		inx		                inx                     ; dump step from TOS before MSB test
.8af3		e8		inx		                inx                     ; since we might skip it
.8af4		b5 ff		lda $ff,x	                lda $FF,x               ; MSB of step since 1,x == -1,x+2
.8af6		d0 02		bne $8afa	                bne _chkv               ; if it's non-zero we have to check
.8af8		90 0b		bcc $8b05	                bcc _repeat             ; but if 0 and no carry, we're good
.8afa		b8		clv		_chkv:          clv
.8afb		a4 1f		ldy $1f		                ldy loopctrl            ; get LCB offset
.8afd		79 01 01	adc $0101,y	                adc loopindex+1,y       ; MSB of index
.8b00		99 01 01	sta $0101,y	                sta loopindex+1,y       ; put MSB of index back on stack
.8b03		70 03		bvs $8b08	                bvs _done               ; skip over JMP instruction
=26						plus_loop_runtime_size = * - plus_loop_runtime
.8b05						_repeat:
.8b05		a9 00		lda #$00	                lda #0
>8b07		2c				                .byte $2c               ; BIT llhh to hide the lda #1
.8b08		a9 01		lda #$01	_done:          lda #1
.8b0a		4c 56 98	jmp $9856	                jmp zbranch_runtime
.8b0d						xt_lshift:
.8b0d		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8b10		b5 00		lda $00,x	                lda 0,x
.8b12		29 0f		and #$0f	                and #%00001111
.8b14		f0 08		beq $8b1e	                beq _done
.8b16		a8		tay		                tay
.8b17						_loop:
.8b17		16 02		asl $02,x	                asl 2,x
.8b19		36 03		rol $03,x	                rol 3,x
.8b1b		88		dey		                dey
.8b1c		d0 f9		bne $8b17	                bne _loop
.8b1e						_done:
.8b1e		e8		inx		                inx
.8b1f		e8		inx		                inx
.8b20		60		rts		z_lshift:       rts
.8b21						xt_m_star:
.8b21		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8b24		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8b26		55 03		eor $03,x	                eor 3,x         ; MSB of n2
.8b28		48		pha		                pha
.8b29		20 cf 80	jsr $80cf	                jsr xt_abs
.8b2c		20 4a 92	jsr $924a	                jsr xt_swap
.8b2f		20 cf 80	jsr $80cf	                jsr xt_abs
.8b32		20 98 95	jsr $9598	                jsr xt_um_star          ; ( d )
.8b35		68		pla		                pla
.8b36		10 03		bpl $8b3b	                bpl _done
.8b38		20 81 9e	jsr $9e81	                jsr xt_dnegate
.8b3b						_done:
.8b3b		60		rts		z_m_star:       rts
.8b3c						xt_marker:
.8b3c		20 03 d7	jsr $d703	                jsr current_to_dp
.8b3f		a5 02		lda $02		                lda dp
.8b41		48		pha		                pha
.8b42		a5 03		lda $03		                lda dp+1
.8b44		48		pha		                pha
.8b45		a5 00		lda $00		                lda cp
.8b47		48		pha		                pha
.8b48		a5 01		lda $01		                lda cp+1
.8b4a		48		pha		                pha
.8b4b		20 40 84	jsr $8440	                jsr xt_create
.8b4e		a5 00		lda $00		                lda cp          ; LSB
.8b50		38		sec		                sec
.8b51		e9 02		sbc #$02	                sbc #2
.8b53		85 00		sta $00		                sta cp
.8b55		b0 02		bcs $8b59	                bcs +
.8b57		c6 01		dec $01		                dec cp+1        ; we only care about the borrow
.8b59						+
.8b59		a0 8b		ldy #$8b	                ldy #>marker_runtime
.8b5b		a9 77		lda #$77	                lda #<marker_runtime
.8b5d		20 a8 97	jsr $97a8	                jsr cmpl_word
.8b60		7a		ply		                ply                     ; MSB
.8b61		68		pla		                pla                     ; LSB
.8b62		20 a8 97	jsr $97a8	                jsr cmpl_word
.8b65		7a		ply		                ply                     ; MSB
.8b66		68		pla		                pla                     ; LSB
.8b67		20 a8 97	jsr $97a8	                jsr cmpl_word
.8b6a		a0 08		ldy #$08	                ldy #marker_start_offset
.8b6c						-
.8b6c		b1 08		lda ($08),y	                lda (up),y
.8b6e		20 ac 97	jsr $97ac	                jsr cmpl_a
.8b71		c8		iny		                iny
.8b72		c0 2c		cpy #$2c	                cpy #marker_end_offset
.8b74		d0 f6		bne $8b6c	                bne -
.8b76		60		rts		z_marker:       rts
.8b77						marker_runtime:
.8b77		68		pla		                pla
.8b78		85 25		sta $25		                sta tmp1        ; LSB of address
.8b7a		68		pla		                pla
.8b7b		85 26		sta $26		                sta tmp1+1      ; MSB of address
.8b7d		a0 01		ldy #$01	                ldy #1          ; start at 1 due to RTS mechanics
.8b7f		b1 25		lda ($25),y	                lda (tmp1),y
.8b81		85 00		sta $00		                sta cp
.8b83		c8		iny		                iny
.8b84		b1 25		lda ($25),y	                lda (tmp1),y
.8b86		85 01		sta $01		                sta cp+1
.8b88		c8		iny		                iny
.8b89		b1 25		lda ($25),y	                lda (tmp1),y
.8b8b		85 02		sta $02		                sta dp
.8b8d		c8		iny		                iny
.8b8e		b1 25		lda ($25),y	                lda (tmp1),y
.8b90		85 03		sta $03		                sta dp+1
.8b92		38		sec		                sec
.8b93		a5 25		lda $25		                lda tmp1
.8b95		e9 03		sbc #$03	                sbc #marker_start_offset - 5
.8b97		85 25		sta $25		                sta tmp1
.8b99		b0 02		bcs $8b9d	                bcs +
.8b9b		c6 26		dec $26		                dec tmp1+1
.8b9d						+
.8b9d		a0 08		ldy #$08	                ldy #marker_start_offset
.8b9f						-
.8b9f		b1 25		lda ($25),y	                lda (tmp1),y
.8ba1		91 08		sta ($08),y	                sta (up),y
.8ba3		c8		iny		                iny
.8ba4		c0 2c		cpy #$2c	                cpy #marker_end_offset
.8ba6		d0 f7		bne $8b9f	                bne -
.8ba8		20 16 d7	jsr $d716	                jsr dp_to_current       ; Move the CURRENT DP back.
.8bab		60		rts		                rts
.8bac						xt_max:
.8bac		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8baf		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.8bb1		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets the carry
.8bb3		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.8bb5		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.8bb7		50 02		bvc $8bbb	                bvc _no_overflow
.8bb9		49 80		eor #$80	                eor #$80        ; complement negative flag
.8bbb						_no_overflow:
.8bbb		30 08		bmi $8bc5	                bmi _keep_nos
.8bbd		b5 00		lda $00,x	                lda 0,x
.8bbf		95 02		sta $02,x	                sta 2,x
.8bc1		b5 01		lda $01,x	                lda 1,x
.8bc3		95 03		sta $03,x	                sta 3,x
.8bc5						_keep_nos:
.8bc5		e8		inx		                inx
.8bc6		e8		inx		                inx
.8bc7		60		rts		z_max:          rts
.8bc8						xt_min:
.8bc8		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8bcb		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.8bcd		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets carry
.8bcf		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.8bd1		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.8bd3		50 02		bvc $8bd7	                bvc _no_overflow
.8bd5		49 80		eor #$80	                eor #$80
.8bd7						_no_overflow:
.8bd7		10 08		bpl $8be1	                bpl _keep_nos
.8bd9		b5 00		lda $00,x	                lda 0,x
.8bdb		95 02		sta $02,x	                sta 2,x
.8bdd		b5 01		lda $01,x	                lda 1,x
.8bdf		95 03		sta $03,x	                sta 3,x
.8be1						_keep_nos:
.8be1		e8		inx		                inx
.8be2		e8		inx		                inx
.8be3		60		rts		z_min:          rts
.8be4						xt_minus:
.8be4		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8be7		38		sec		                sec
.8be8		b5 02		lda $02,x	                lda 2,x         ; LSB
.8bea		f5 00		sbc $00,x	                sbc 0,x
.8bec		95 02		sta $02,x	                sta 2,x
.8bee		b5 03		lda $03,x	                lda 3,x         ; MSB
.8bf0		f5 01		sbc $01,x	                sbc 1,x
.8bf2		95 03		sta $03,x	                sta 3,x
.8bf4		e8		inx		                inx
.8bf5		e8		inx		                inx
.8bf6		60		rts		z_minus:        rts
.8bf7						xt_mod:
.8bf7		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8bfa		20 64 91	jsr $9164	                jsr xt_slash_mod
.8bfd		e8		inx		                inx             ; DROP
.8bfe		e8		inx		                inx
.8bff						z_mod:
.8bff		60		rts		                rts
.8c00						xt_move:
.8c00		b5 03		lda $03,x	                lda 3,x                 ; MSB of addr2
.8c02		d5 05		cmp $05,x	                cmp 5,x                 ; MSB of addr1
.8c04		f0 05		beq $8c0b	                beq _lsb                ; wasn't helpful, move to LSB
.8c06		b0 0e		bcs $8c16	                bcs _to_move_up         ; we want CMOVE>
.8c08		4c 64 9f	jmp $9f64	                jmp xt_cmove            ; JSR/RTS
.8c0b						_lsb:
.8c0b		b5 02		lda $02,x	                lda 2,x                 ; LSB of addr2
.8c0d		d5 04		cmp $04,x	                cmp 4,x                 ; LSB of addr1
.8c0f		f0 08		beq $8c19	                beq _equal              ; LSB is equal as well
.8c11		b0 03		bcs $8c16	                bcs _to_move_up         ; we want CMOVE>
.8c13		4c 64 9f	jmp $9f64	                jmp xt_cmove            ; JSR/RTS
.8c16						_to_move_up:
.8c16		4c 9f 9f	jmp $9f9f	                jmp xt_cmove_up         ; JSR/RTS
.8c19						_equal:
.8c19		8a		txa		                txa
.8c1a		18		clc		                clc
.8c1b		69 06		adc #$06	                adc #6
.8c1d		aa		tax		                tax
.8c1e		60		rts		z_move:         rts
.8c1f						xt_negate:
.8c1f		20 ac d7	jsr $d7ac	                jsr underflow_1
.8c22		a9 00		lda #$00	        	lda #0
.8c24		38		sec		                sec
.8c25		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.8c27		95 00		sta $00,x	                sta 0,x
.8c29		a9 00		lda #$00	                lda #0
.8c2b		f5 01		sbc $01,x	                sbc 1,x         ; MSB
.8c2d		95 01		sta $01,x	                sta 1,x
.8c2f		60		rts		z_negate:       rts
.8c30						xt_nip:
.8c30		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8c33		b5 00		lda $00,x	                lda 0,x         ; LSB
.8c35		95 02		sta $02,x	                sta 2,x
.8c37		b5 01		lda $01,x	                lda 1,x         ; MSB
.8c39		95 03		sta $03,x	                sta 3,x
.8c3b		e8		inx		                inx
.8c3c		e8		inx		                inx
.8c3d		60		rts		z_nip:          rts
.8c3e						xt_not_equals:
.8c3e		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8c41		a0 00		ldy #$00	                ldy #0                  ; default is true
.8c43		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8c45		d5 02		cmp $02,x	                cmp 2,x
.8c47		d0 0a		bne $8c53	                bne _not_equal
.8c49		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8c4b		d5 03		cmp $03,x	                cmp 3,x
.8c4d		d0 04		bne $8c53	                bne _not_equal
.8c4f		a9 ff		lda #$ff	                lda #$FF
.8c51		80 01		bra $8c54	                bra _done
.8c53						_not_equal:
.8c53		88		dey		                dey                     ; drop thru to done
.8c54						_done:
.8c54		98		tya		                tya
.8c55		e8		inx		                inx
.8c56		e8		inx		                inx
.8c57		95 00		sta $00,x	                sta 0,x
.8c59		95 01		sta $01,x	                sta 1,x
.8c5b		60		rts		z_not_equals:   rts
.8c5c						xt_number_sign:
.8c5c		20 b1 d7	jsr $d7b1	                jsr underflow_2         ; double number
.8c5f		20 fb 82	jsr $82fb	                jsr xt_base
.8c62		20 1a 88	jsr $881a	                jsr xt_fetch            ; ( ud1 base )
.8c65		20 88 93	jsr $9388	                jsr xt_to_r             ; >r
.8c68		20 13 9e	jsr $9e13	                jsr xt_zero             ; 0
.8c6b		20 d9 8e	jsr $8ed9	                jsr xt_r_fetch          ; r@
.8c6e		20 56 95	jsr $9556	                jsr xt_um_slash_mod     ; um/mod
.8c71		20 8b 8f	jsr $8f8b	                jsr xt_rot              ; rot
.8c74		20 8b 8f	jsr $8f8b	                jsr xt_rot              ; rot
.8c77		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; r>
.8c7a		20 56 95	jsr $9556	                jsr xt_um_slash_mod     ; um/mod
.8c7d		20 8b 8f	jsr $8f8b	                jsr xt_rot              ; rot
.8c80		20 8b 8f	jsr $8f8b	                jsr xt_rot              ; ( ud rem )
.8c83		b5 00		lda $00,x	                lda 0,x
.8c85		a8		tay		                tay
.8c86		b9 32 d3	lda $d332,y	                lda s_abc_upper,y
.8c89		95 00		sta $00,x	                sta 0,x
.8c8b		74 01		stz $01,x	                stz 1,x                 ; paranoid; now ( ud char )
.8c8d		20 2d 89	jsr $892d	                jsr xt_hold
.8c90						z_number_sign:
.8c90		60		rts		                rts
.8c91						xt_number_sign_greater:
.8c91		20 b1 d7	jsr $d7b1	                jsr underflow_2         ; double number
.8c94		a5 2b		lda $2b		                lda tohold
.8c96		95 00		sta $00,x	                sta 0,x         ; LSB of tohold
.8c98		95 02		sta $02,x	                sta 2,x
.8c9a		a5 2c		lda $2c		                lda tohold+1
.8c9c		95 01		sta $01,x	                sta 1,x         ; MSB of addr
.8c9e		95 03		sta $03,x	                sta 3,x         ; ( addr addr )
.8ca0		20 13 8d	jsr $8d13	                jsr xt_pad      ; ( addr addr pad )
.8ca3		38		sec		                sec
.8ca4		b5 00		lda $00,x	                lda 0,x         ; LSB of pad address
.8ca6		f5 02		sbc $02,x	                sbc 2,x
.8ca8		95 02		sta $02,x	                sta 2,x
.8caa		b5 01		lda $01,x	                lda 1,x         ; MSB, which should always be zero
.8cac		f5 03		sbc $03,x	                sbc 3,x
.8cae		95 03		sta $03,x	                sta 3,x         ; ( addr u pad )
.8cb0		e8		inx		                inx
.8cb1		e8		inx		                inx
.8cb2						z_number_sign_greater:
.8cb2		60		rts		                rts
.8cb3						xt_number_sign_s:
.8cb3		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8cb6						_loop:
.8cb6		20 5c 8c	jsr $8c5c	                jsr xt_number_sign
.8cb9		b5 00		lda $00,x	                lda 0,x
.8cbb		15 01		ora $01,x	                ora 1,x
.8cbd		15 02		ora $02,x	                ora 2,x
.8cbf		15 03		ora $03,x	                ora 3,x
.8cc1		d0 f3		bne $8cb6	                bne _loop
.8cc3						z_number_sign_s:
.8cc3		60		rts		                rts
.8cc4						xt_of:
.8cc4		a0 8d		ldy #$8d	                ldy #>xt_over
.8cc6		a9 05		lda #$05	                lda #<xt_over
.8cc8		20 9c 97	jsr $979c	                jsr cmpl_subroutine
.8ccb		a0 87		ldy #$87	                ldy #>xt_equal
.8ccd		a9 96		lda #$96	                lda #<xt_equal
.8ccf		20 9c 97	jsr $979c	                jsr cmpl_subroutine
.8cd2		20 54 89	jsr $8954	                jsr xt_if
.8cd5		a0 86		ldy #$86	                ldy #>xt_drop
.8cd7		a9 9a		lda #$9a	                lda #<xt_drop
.8cd9		20 9c 97	jsr $979c	                jsr cmpl_subroutine
.8cdc		60		rts		z_of:           rts
.8cdd						xt_one_minus:
.8cdd		20 ac d7	jsr $d7ac	                jsr underflow_1
.8ce0		b5 00		lda $00,x	                lda 0,x
.8ce2		d0 02		bne $8ce6	                bne +
.8ce4		d6 01		dec $01,x	                dec 1,x
.8ce6						+
.8ce6		d6 00		dec $00,x	                dec 0,x
.8ce8		60		rts		z_one_minus:    rts
.8ce9						xt_char_plus:
.8ce9						xt_one_plus:
.8ce9		20 ac d7	jsr $d7ac	                jsr underflow_1
.8cec		f6 00		inc $00,x	                inc 0,x
.8cee		d0 02		bne $8cf2	                bne _done
.8cf0		f6 01		inc $01,x	                inc 1,x
.8cf2						_done:
.8cf2						z_char_plus:
.8cf2		60		rts		z_one_plus:     rts
.8cf3						xt_or:
.8cf3		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8cf6		b5 00		lda $00,x	                lda 0,x
.8cf8		15 02		ora $02,x	                ora 2,x
.8cfa		95 02		sta $02,x	                sta 2,x
.8cfc		b5 01		lda $01,x	                lda 1,x
.8cfe		15 03		ora $03,x	                ora 3,x
.8d00		95 03		sta $03,x	                sta 3,x
.8d02		e8		inx		                inx
.8d03		e8		inx		                inx
.8d04		60		rts		z_or:           rts
.8d05						xt_over:
.8d05		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8d08		ca		dex		                dex
.8d09		ca		dex		                dex
.8d0a		b5 04		lda $04,x	                lda 4,x         ; LSB
.8d0c		95 00		sta $00,x	                sta 0,x
.8d0e		b5 05		lda $05,x	                lda 5,x         ; MSB
.8d10		95 01		sta $01,x	                sta 1,x
.8d12		60		rts		z_over:         rts
.8d13						xt_pad:
.8d13		ca		dex		                dex
.8d14		ca		dex		                dex
.8d15		a5 00		lda $00		                lda cp
.8d17		18		clc		                clc
.8d18		69 ff		adc #$ff	                adc #padoffset  ; assumes padoffset one byte in size
.8d1a		95 00		sta $00,x	                sta 0,x
.8d1c		a5 01		lda $01		                lda cp+1
.8d1e		69 00		adc #$00	                adc #0          ; only need carry
.8d20		95 01		sta $01,x	                sta 1,x
.8d22		60		rts		z_pad:          rts
.8d23						xt_page:
.8d23		a9 1b		lda #$1b	                lda #AscESC
.8d25		20 c5 86	jsr $86c5	                jsr emit_a
.8d28		a9 5b		lda #$5b	                lda #'['
.8d2a		20 c5 86	jsr $86c5	                jsr emit_a
.8d2d		a9 32		lda #$32	                lda #'2'
.8d2f		20 c5 86	jsr $86c5	                jsr emit_a
.8d32		a9 4a		lda #$4a	                lda #'J'
.8d34		20 c5 86	jsr $86c5	                jsr emit_a
.8d37		20 13 9e	jsr $9e13	                jsr xt_zero
.8d3a		20 13 9e	jsr $9e13	                jsr xt_zero
.8d3d		20 a2 82	jsr $82a2	                jsr xt_at_xy
.8d40		60		rts		z_page:         rts
.8d41						xt_paren:
.8d41		ca		dex		                dex
.8d42		ca		dex		                dex
.8d43		a9 29		lda #$29	                lda #41     ; Right parenthesis
.8d45		95 00		sta $00,x	                sta 0,x
.8d47		74 01		stz $01,x	                stz 1,x
.8d49		20 ac 8d	jsr $8dac	                jsr xt_parse
.8d4c		e8		inx		                inx
.8d4d		e8		inx		                inx
.8d4e		e8		inx		                inx
.8d4f		e8		inx		                inx
.8d50		60		rts		z_paren:        rts
.8d51						xt_parse_name:
.8d51		a5 0e		lda $0e		                lda ciblen              ; LSB of counter
.8d53		38		sec		                sec
.8d54		e5 10		sbc $10		                sbc toin
.8d56		85 25		sta $25		                sta tmp1
.8d58		a5 0f		lda $0f		                lda ciblen+1            ; MSB
.8d5a		e5 11		sbc $11		                sbc toin+1
.8d5c		85 26		sta $26		                sta tmp1+1
.8d5e		a5 25		lda $25		                lda tmp1
.8d60		05 26		ora $26		                ora tmp1+1
.8d62		f0 28		beq $8d8c	                beq _empty_line
.8d64		a5 0c		lda $0c		                lda cib
.8d66		18		clc		                clc
.8d67		65 10		adc $10		                adc toin
.8d69		85 27		sta $27		                sta tmp2                ; LSB of first character
.8d6b		a5 0d		lda $0d		                lda cib+1
.8d6d		65 11		adc $11		                adc toin+1
.8d6f		85 28		sta $28		                sta tmp2+1              ; MSB
.8d71						_skip_loop:
.8d71		b2 27		lda ($27)	                lda (tmp2)              ; work copy of cib
.8d73		20 9f d7	jsr $d79f	                jsr is_whitespace
.8d76		90 1f		bcc $8d97	                bcc _char_found
.8d78		e6 27		inc $27		                inc tmp2
.8d7a		d0 02		bne $8d7e	                bne +
.8d7c		e6 28		inc $28		                inc tmp2+1
.8d7e						+
.8d7e		a5 25		lda $25		                lda tmp1
.8d80		d0 02		bne $8d84	                bne +
.8d82		c6 26		dec $26		                dec tmp1+1
.8d84		c6 25		dec $25		+               dec tmp1
.8d86		a5 25		lda $25		                lda tmp1
.8d88		05 26		ora $26		                ora tmp1+1
.8d8a		d0 e5		bne $8d71	                bne _skip_loop          ; fall through if empty line
.8d8c						_empty_line:
.8d8c		ca		dex		                dex
.8d8d		ca		dex		                dex
.8d8e		ca		dex		                dex
.8d8f		ca		dex		                dex
.8d90		74 00		stz $00,x	                stz 0,x                 ; TOS is zero
.8d92		74 01		stz $01,x	                stz 1,x
.8d94		4c 41 8e	jmp $8e41	                jmp z_parse_name        ; skip over PARSE
.8d97						_char_found:
.8d97		a5 27		lda $27		                lda tmp2
.8d99		38		sec		                sec
.8d9a		e5 0c		sbc $0c		                sbc cib
.8d9c		85 10		sta $10		                sta toin
.8d9e		a5 28		lda $28		                lda tmp2+1
.8da0		e5 0d		sbc $0d		                sbc cib+1
.8da2		85 11		sta $11		                sta toin+1
.8da4		ca		dex		                dex
.8da5		ca		dex		                dex
.8da6		a9 20		lda #$20	                lda #AscSP
.8da8		95 00		sta $00,x	                sta 0,x
.8daa		74 01		stz $01,x	                stz 1,x                 ; paranoid, now ( "name" c )
.8dac						xt_parse:
.8dac		20 ac d7	jsr $d7ac	                jsr underflow_1
.8daf		a5 0e		lda $0e		                lda ciblen
.8db1		05 0f		ora $0f		                ora ciblen+1
.8db3		f0 0c		beq $8dc1	                beq _abort_parse
.8db5		a5 11		lda $11		                lda toin+1              ; MSB
.8db7		c5 0f		cmp $0f		                cmp ciblen+1
.8db9		90 0e		bcc $8dc9	                bcc _go_parse           ; unsigned comparison
.8dbb		a5 10		lda $10		                lda toin                ; LSB
.8dbd		c5 0e		cmp $0e		                cmp ciblen
.8dbf		90 08		bcc $8dc9	                bcc _go_parse
.8dc1						_abort_parse:
.8dc1		ca		dex		                dex
.8dc2		ca		dex		                dex
.8dc3		74 00		stz $00,x	                stz 0,x
.8dc5		74 01		stz $01,x	                stz 1,x
.8dc7		80 78		bra $8e41	                bra _done
.8dc9						_go_parse:
.8dc9		b5 00		lda $00,x	                lda 0,x
.8dcb		85 23		sta $23		                sta tmptos
.8dcd		ca		dex		                dex
.8dce		ca		dex		                dex
.8dcf		a5 0c		lda $0c		                lda cib
.8dd1		18		clc		                clc
.8dd2		65 10		adc $10		                adc toin        ; LSB
.8dd4		85 25		sta $25		                sta tmp1
.8dd6		85 27		sta $27		                sta tmp2
.8dd8		95 02		sta $02,x	                sta 2,x
.8dda		a5 0d		lda $0d		                lda cib+1
.8ddc		65 11		adc $11		                adc toin+1      ; MSB
.8dde		85 26		sta $26		                sta tmp1+1
.8de0		85 28		sta $28		                sta tmp2+1
.8de2		95 03		sta $03,x	                sta 3,x
.8de4		a5 0c		lda $0c		                lda cib
.8de6		18		clc		                clc
.8de7		65 0e		adc $0e		                adc ciblen
.8de9		85 29		sta $29		                sta tmp3
.8deb		a5 0d		lda $0d		                lda cib+1
.8ded		65 0f		adc $0f		                adc ciblen+1
.8def		85 2a		sta $2a		                sta tmp3+1
.8df1		64 24		stz $24		                stz tmptos+1
.8df3						_loop:
.8df3		a5 27		lda $27		                lda tmp2
.8df5		c5 29		cmp $29		                cmp tmp3
.8df7		d0 06		bne $8dff	                bne _not_empty
.8df9		a5 28		lda $28		                lda tmp2+1
.8dfb		c5 2a		cmp $2a		                cmp tmp3+1
.8dfd		f0 1d		beq $8e1c	                beq _eol
.8dff						_not_empty:
.8dff		b2 27		lda ($27)	                lda (tmp2)
.8e01		a4 23		ldy $23		                ldy tmptos
.8e03		c0 20		cpy #$20	                cpy #AscSP
.8e05		d0 07		bne $8e0e	                bne _not_whitespace
.8e07		20 9f d7	jsr $d79f	                jsr is_whitespace
.8e0a		90 02		bcc $8e0e	                bcc _not_whitespace
.8e0c		80 0c		bra $8e1a	                bra _found_delimiter
.8e0e						_not_whitespace:
.8e0e		c5 23		cmp $23		                cmp tmptos
.8e10		f0 08		beq $8e1a	                beq _found_delimiter
.8e12		e6 27		inc $27		                inc tmp2
.8e14		d0 dd		bne $8df3	                bne _loop
.8e16		e6 28		inc $28		                inc tmp2+1
.8e18		80 d9		bra $8df3	                bra _loop
.8e1a						_found_delimiter:
.8e1a		e6 24		inc $24		                inc tmptos+1
.8e1c						_eol:
.8e1c		a5 27		lda $27		                lda tmp2
.8e1e		38		sec		                sec
.8e1f		e5 25		sbc $25		                sbc tmp1
.8e21		95 00		sta $00,x	                sta 0,x
.8e23		a5 28		lda $28		                lda tmp2+1
.8e25		e5 26		sbc $26		                sbc tmp1+1
.8e27		95 01		sta $01,x	                sta 1,x
.8e29		a5 27		lda $27		                lda tmp2
.8e2b		38		sec		                sec
.8e2c		e5 0c		sbc $0c		                sbc cib
.8e2e		85 10		sta $10		                sta toin
.8e30		a5 28		lda $28		                lda tmp2+1
.8e32		e5 0d		sbc $0d		                sbc cib+1
.8e34		85 11		sta $11		                sta toin+1
.8e36		a5 10		lda $10		                lda toin
.8e38		18		clc		                clc
.8e39		65 24		adc $24		                adc tmptos+1
.8e3b		85 10		sta $10		                sta toin
.8e3d		90 02		bcc $8e41	                bcc +
.8e3f		e6 11		inc $11		                inc toin+1
.8e41						+
.8e41						_done:
.8e41						z_parse_name:
.8e41		60		rts		z_parse:        rts
.8e42						xt_pick:
.8e42		16 00		asl $00,x	                asl 0,x         ; we assume u < 128 (stack is small)
.8e44		8a		txa		                txa
.8e45		75 00		adc $00,x	                adc 0,x
.8e47		a8		tay		                tay
.8e48		b9 02 00	lda $0002,y	                lda 0002,y
.8e4b		95 00		sta $00,x	                sta 0,x
.8e4d		b9 03 00	lda $0003,y	                lda 0003,y
.8e50		95 01		sta $01,x	                sta 1,x
.8e52		60		rts		z_pick:         rts
.8e53						xt_plus:
.8e53		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8e56		18		clc		                clc
.8e57		b5 00		lda $00,x	                lda 0,x         ; LSB
.8e59		75 02		adc $02,x	                adc 2,x
.8e5b		95 02		sta $02,x	                sta 2,x
.8e5d		b5 01		lda $01,x	                lda 1,x         ; MSB. No CLC, conserve carry bit
.8e5f		75 03		adc $03,x	                adc 3,x
.8e61		95 03		sta $03,x	                sta 3,x
.8e63		e8		inx		                inx
.8e64		e8		inx		                inx
.8e65		60		rts		z_plus:         rts
.8e66						xt_plus_store:
.8e66		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8e69		b5 00		lda $00,x	                lda 0,x
.8e6b		85 25		sta $25		                sta tmp1
.8e6d		b5 01		lda $01,x	                lda 1,x
.8e6f		85 26		sta $26		                sta tmp1+1
.8e71		a0 00		ldy #$00	                ldy #0          ; LSB
.8e73		b1 25		lda ($25),y	                lda (tmp1),y
.8e75		18		clc		                clc
.8e76		75 02		adc $02,x	                adc 2,x
.8e78		91 25		sta ($25),y	                sta (tmp1),y
.8e7a		c8		iny		                iny             ; MSB
.8e7b		b1 25		lda ($25),y	                lda (tmp1),y
.8e7d		75 03		adc $03,x	                adc 3,x
.8e7f		91 25		sta ($25),y	                sta (tmp1),y
.8e81		e8		inx		                inx
.8e82		e8		inx		                inx
.8e83		e8		inx		                inx
.8e84		e8		inx		                inx
.8e85		60		rts		z_plus_store:   rts
.8e86						xt_postpone:
.8e86		20 51 8d	jsr $8d51	                jsr xt_parse_name               ; ( -- addr n )
.8e89		b5 00		lda $00,x	                lda 0,x
.8e8b		15 01		ora $01,x	                ora 1,x
.8e8d		d0 05		bne $8e94	                bne +
.8e8f		a9 05		lda #$05	                lda #err_noname
.8e91		4c c2 d7	jmp $d7c2	                jmp error
.8e94						+
.8e94		20 12 9b	jsr $9b12	                jsr xt_find_name                ; ( -- nt | 0 )
.8e97		d0 05		bne $8e9e	                bne +
.8e99		a9 05		lda #$05	                lda #err_noname
.8e9b		4c c2 d7	jmp $d7c2	                jmp error
.8e9e						+
.8e9e		b5 00		lda $00,x	                lda 0,x
.8ea0		85 25		sta $25		                sta tmp1
.8ea2		b5 01		lda $01,x	                lda 1,x
.8ea4		85 26		sta $26		                sta tmp1+1
.8ea6		20 50 9c	jsr $9c50	                jsr xt_name_to_int              ; ( nt -- xt )
.8ea9		e6 25		inc $25		                inc tmp1
.8eab		d0 02		bne $8eaf	                bne +
.8ead		e6 26		inc $26		                inc tmp1+1
.8eaf						+
.8eaf		b2 25		lda ($25)	                lda (tmp1)
.8eb1		29 04		and #$04	                and #IM         ; mask all but Intermediate flag
.8eb3		f0 05		beq $8eba	                beq _not_immediate
.8eb5		20 d4 96	jsr $96d4	                jsr xt_compile_comma
.8eb8		80 0a		bra $8ec4	                bra _done
.8eba						_not_immediate:
.8eba		20 f2 89	jsr $89f2	                jsr xt_literal
.8ebd		a0 96		ldy #$96	                ldy #>xt_compile_comma
.8ebf		a9 d4		lda #$d4	                lda #<xt_compile_comma
.8ec1		20 9c 97	jsr $979c	                jsr cmpl_subroutine
.8ec4						_done:
.8ec4		60		rts		z_postpone:     rts
.8ec5						xt_question_dup:
.8ec5		20 ac d7	jsr $d7ac	                jsr underflow_1
.8ec8		b5 00		lda $00,x	                lda 0,x
.8eca		15 01		ora $01,x	                ora 1,x
.8ecc		f0 0a		beq $8ed8	                beq _done
.8ece		ca		dex		                dex
.8ecf		ca		dex		                dex
.8ed0		b5 02		lda $02,x	                lda 2,x
.8ed2		95 00		sta $00,x	                sta 0,x
.8ed4		b5 03		lda $03,x	                lda 3,x
.8ed6		95 01		sta $01,x	                sta 1,x
.8ed8						_done:
.8ed8		60		rts		z_question_dup: rts
.8ed9						xt_r_fetch:
.8ed9		7a		ply		                ply             ; LSB
.8eda		84 25		sty $25		                sty tmp1
.8edc		7a		ply		                ply             ; MSB
.8edd		ca		dex		                dex
.8ede		ca		dex		                dex
.8edf		68		pla		                pla             ; LSB
.8ee0		95 00		sta $00,x	                sta 0,x
.8ee2		68		pla		                pla             ; MSB
.8ee3		95 01		sta $01,x	                sta 1,x
.8ee5		48		pha		                pha
.8ee6		b5 00		lda $00,x	                lda 0,x
.8ee8		48		pha		                pha
.8ee9		5a		phy		                phy             ; MSB
.8eea		a4 25		ldy $25		                ldy tmp1
.8eec		5a		phy		                phy             ; LSB
.8eed		60		rts		z_r_fetch:      rts
.8eee						xt_r_from:
.8eee		68		pla		                pla             ; LSB
.8eef		85 23		sta $23		                sta tmptos
.8ef1		7a		ply		                ply             ; MSB
.8ef2		ca		dex		                dex
.8ef3		ca		dex		                dex
.8ef4		68		pla		                pla             ; LSB
.8ef5		95 00		sta $00,x	                sta 0,x
.8ef7		68		pla		                pla             ; MSB
.8ef8		95 01		sta $01,x	                sta 1,x
.8efa		5a		phy		                phy             ; MSB
.8efb		a5 23		lda $23		                lda tmptos
.8efd		48		pha		                pha             ; LSB
.8efe		60		rts		z_r_from:       rts
.8eff						xt_recurse:
.8eff		a0 00		ldy #$00	                ldy #0
.8f01		a9 20		lda #$20	                lda #OpJSR
.8f03		91 00		sta ($00),y	                sta (cp),y
.8f05		c8		iny		                iny
.8f06		24 1c		bit $1c		                bit status
.8f08		70 0c		bvs $8f16	                bvs _nt_in_workword
.8f0a		a5 06		lda $06		                lda workword
.8f0c		91 00		sta ($00),y	                sta (cp),y
.8f0e		c8		iny		                iny
.8f0f		a5 07		lda $07		                lda workword+1
.8f11		91 00		sta ($00),y	                sta (cp),y
.8f13		c8		iny		                iny
.8f14		80 1b		bra $8f31	                bra _update_cp
.8f16						_nt_in_workword:
.8f16		a5 06		lda $06		                lda workword            ; LSB
.8f18		18		clc		                clc
.8f19		69 04		adc #$04	                adc #4
.8f1b		85 25		sta $25		                sta tmp1
.8f1d		a5 07		lda $07		                lda workword+1          ; MSB
.8f1f		69 00		adc #$00	                adc #0
.8f21		85 26		sta $26		                sta tmp1+1
.8f23		b2 25		lda ($25)	                lda (tmp1)
.8f25		91 00		sta ($00),y	                sta (cp),y
.8f27		5a		phy		                phy
.8f28		a0 01		ldy #$01	                ldy #1
.8f2a		b1 25		lda ($25),y	                lda (tmp1),y
.8f2c		7a		ply		                ply
.8f2d		c8		iny		                iny
.8f2e		91 00		sta ($00),y	                sta (cp),y
.8f30		c8		iny		                iny
.8f31						_update_cp:
.8f31		98		tya		                tya
.8f32		18		clc		                clc
.8f33		65 00		adc $00		                adc cp
.8f35		85 00		sta $00		                sta cp
.8f37		90 02		bcc $8f3b	                bcc _done
.8f39		e6 01		inc $01		                inc cp+1
.8f3b						_done:
.8f3b		60		rts		z_recurse:      rts
.8f3c						xt_refill:
.8f3c		a5 0a		lda $0a		                lda insrc               ; cheat: We only check LSB
.8f3e		d0 2d		bne $8f6d	                bne _src_not_kbd
.8f40		ca		dex		                dex
.8f41		ca		dex		                dex
.8f42		ca		dex		                dex
.8f43		ca		dex		                dex
.8f44		a5 0c		lda $0c		                lda cib                 ; address of CIB is NOS
.8f46		95 02		sta $02,x	                sta 2,x
.8f48		a5 0d		lda $0d		                lda cib+1
.8f4a		95 03		sta $03,x	                sta 3,x
.8f4c		64 0e		stz $0e		                stz ciblen              ; go in with empty buffer
.8f4e		64 0f		stz $0f		                stz ciblen+1
.8f50		a9 ff		lda #$ff	                lda #bsize              ; max number of chars is TOS
.8f52		95 00		sta $00,x	                sta 0,x
.8f54		74 01		stz $01,x	                stz 1,x                 ; cheat: We only accept max 255
.8f56		20 e4 80	jsr $80e4	                jsr xt_accept           ; ( addr n1 -- n2)
.8f59		b5 00		lda $00,x	                lda 0,x
.8f5b		85 0e		sta $0e		                sta ciblen
.8f5d		b5 01		lda $01,x	                lda 1,x
.8f5f		85 0f		sta $0f		                sta ciblen+1            ; though we only accept 255 chars
.8f61		64 10		stz $10		                stz toin
.8f63		64 11		stz $11		                stz toin+1
.8f65		a9 ff		lda #$ff	                lda #$FF                ; overwrite with TRUE flag
.8f67		95 00		sta $00,x	                sta 0,x
.8f69		95 01		sta $01,x	                sta 1,x
.8f6b		80 10		bra $8f7d	                bra _done
.8f6d						_src_not_kbd:
.8f6d		1a		inc a		                ina
.8f6e		d0 08		bne $8f78	                bne _src_not_string
.8f70		ca		dex		                dex
.8f71		ca		dex		                dex
.8f72		74 00		stz $00,x	                stz 0,x
.8f74		74 01		stz $01,x	                stz 1,x
.8f76		80 05		bra $8f7d	                bra z_refill
.8f78						_src_not_string:
.8f78		a9 01		lda #$01	                lda #err_badsource
.8f7a		4c c2 d7	jmp $d7c2	                jmp error
.8f7d						_done:
.8f7d		60		rts		z_refill:       rts
.8f7e						xt_repeat:
.8f7e		20 1f 82	jsr $821f	                jsr xt_again
.8f81		4c b4 86	jmp $86b4	                jmp xt_then
.8f84						z_repeat:
.8f84						xt_right_bracket:
.8f84		a9 ff		lda #$ff	                lda #$FF
.8f86		85 1a		sta $1a		                sta state
.8f88		85 1b		sta $1b		                sta state+1
.8f8a						z_right_bracket:
.8f8a		60		rts		                rts
.8f8b						xt_rot:
.8f8b		20 b6 d7	jsr $d7b6	                jsr underflow_3
.8f8e		b4 05		ldy $05,x	                ldy 5,x         ; MSB first
.8f90		b5 03		lda $03,x	                lda 3,x
.8f92		95 05		sta $05,x	                sta 5,x
.8f94		b5 01		lda $01,x	                lda 1,x
.8f96		95 03		sta $03,x	                sta 3,x
.8f98		94 01		sty $01,x	                sty 1,x
.8f9a		b4 04		ldy $04,x	                ldy 4,x         ; LSB next
.8f9c		b5 02		lda $02,x	                lda 2,x
.8f9e		95 04		sta $04,x	                sta 4,x
.8fa0		b5 00		lda $00,x	                lda 0,x
.8fa2		95 02		sta $02,x	                sta 2,x
.8fa4		94 00		sty $00,x	                sty 0,x
.8fa6		60		rts		z_rot:          rts
.8fa7						xt_rshift:
.8fa7		20 b1 d7	jsr $d7b1	                jsr underflow_2
.8faa		b5 00		lda $00,x	                lda 0,x
.8fac		29 0f		and #$0f	                and #%00001111
.8fae		f0 08		beq $8fb8	                beq _done               ; if 0 shifts, quit
.8fb0		a8		tay		                tay
.8fb1						_loop:
.8fb1		56 03		lsr $03,x	                lsr 3,x
.8fb3		76 02		ror $02,x	                ror 2,x
.8fb5		88		dey		                dey
.8fb6		d0 f9		bne $8fb1	                bne _loop
.8fb8						_done:
.8fb8		e8		inx		                inx
.8fb9		e8		inx		                inx
.8fba		60		rts		z_rshift:       rts
.8fbb						xt_s_backslash_quote:
.8fbb		a9 ff		lda #$ff	                lda #$FF
.8fbd		85 27		sta $27		                sta tmp2
.8fbf		64 28		stz $28		                stz tmp2+1
.8fc1		20 d8 8f	jsr $8fd8	                jsr s_quote_start
.8fc4						z_s_backslash_quote:
.8fc4		60		rts		                rts
.8fc5						convert_hex_value:
.8fc5		c9 41		cmp #$41	        cmp #'A'
.8fc7		90 07		bcc $8fd0	        bcc _digit
.8fc9		29 df		and #$df	        and #$DF                ; Make it uppercase.
.8fcb		38		sec		        sec
.8fcc		e9 37		sbc #$37	        sbc #'7'                ; gives value 10 for 'A'
.8fce		80 03		bra $8fd3	        bra _done
.8fd0						_digit:
.8fd0		38		sec		        sec
.8fd1		e9 30		sbc #$30	        sbc #'0'
.8fd3						_done:
.8fd3		60		rts		        rts
.8fd4						xt_s_quote:
.8fd4		64 27		stz $27		                stz tmp2
.8fd6		64 28		stz $28		                stz tmp2+1
.8fd8						s_quote_start:
.8fd8		20 bd 97	jsr $97bd	                jsr cmpl_jump_later
.8fdb		20 1b 89	jsr $891b	                jsr xt_here             ; the start of the string
.8fde						_savechars_loop:
.8fde		a5 11		lda $11		                lda toin+1              ; MSB
.8fe0		c5 0f		cmp $0f		                cmp ciblen+1
.8fe2		90 2a		bcc $900e	                bcc _input_fine         ; unsigned comparison
.8fe4		a5 10		lda $10		                lda toin                ; LSB
.8fe6		c5 0e		cmp $0e		                cmp ciblen
.8fe8		90 24		bcc $900e	                bcc _input_fine
.8fea		a5 27		lda $27		                lda tmp2
.8fec		48		pha		                pha
.8fed		a5 28		lda $28		                lda tmp2+1
.8fef		48		pha		                pha
.8ff0		a5 29		lda $29		                lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
.8ff2		48		pha		                pha
.8ff3		20 3c 8f	jsr $8f3c	                jsr xt_refill           ; ( -- f )
.8ff6		68		pla		                pla
.8ff7		85 29		sta $29		                sta tmp3
.8ff9		68		pla		                pla
.8ffa		85 28		sta $28		                sta tmp2+1
.8ffc		68		pla		                pla
.8ffd		85 27		sta $27		                sta tmp2
.8fff		b5 00		lda $00,x	                lda 0,x
.9001		15 01		ora $01,x	                ora 1,x
.9003		d0 05		bne $900a	                bne _refill_ok
.9005		a9 06		lda #$06	                lda #err_refill
.9007		4c c2 d7	jmp $d7c2	                jmp error
.900a						_refill_ok:
.900a		e8		inx		                inx
.900b		e8		inx		                inx
.900c		80 d0		bra $8fde	                bra _savechars_loop
.900e						_input_fine:
.900e		a5 0c		lda $0c		                lda cib
.9010		18		clc		                clc
.9011		65 10		adc $10		                adc toin        ; LSB
.9013		85 25		sta $25		                sta tmp1
.9015		a5 0d		lda $0d		                lda cib+1
.9017		65 11		adc $11		                adc toin+1      ; MSB
.9019		85 26		sta $26		                sta tmp1+1
.901b		b2 25		lda ($25)	                lda (tmp1)
.901d		24 27		bit $27		                bit tmp2
.901f		30 03		bmi $9024	                bmi _handle_escapes    ; Only checking bit 7
.9021		4c a7 90	jmp $90a7	                jmp _regular_char
.9024						_handle_escapes:
.9024		24 28		bit $28		                bit tmp2+1
.9026		30 03		bmi $902b	                bmi _escaped
.9028		4c 9d 90	jmp $909d	                jmp _not_escaped
.902b						_escaped:
.902b		70 3c		bvs $9069	                bvs _check_esc_chars
.902d		a9 01		lda #$01	                lda #1
.902f		24 28		bit $28		                bit tmp2+1
.9031		d0 10		bne $9043	                bne _esc_x_second_digit
.9033		e6 28		inc $28		                inc tmp2+1  ; Adjust flag for second digit next time.
.9035		b2 25		lda ($25)	                lda (tmp1)  ; Get the char again.
.9037		20 c5 8f	jsr $8fc5	                jsr convert_hex_value
.903a		0a		asl a		                asl
.903b		0a		asl a		                asl
.903c		0a		asl a		                asl
.903d		0a		asl a		                asl
.903e		85 29		sta $29		                sta tmp3    ; Save it for later.
.9040		4c ae 90	jmp $90ae	                jmp _next_character
.9043						_esc_x_second_digit:
.9043		64 28		stz $28		                stz tmp2+1
.9045		b2 25		lda ($25)	                lda (tmp1)
.9047		20 c5 8f	jsr $8fc5	                jsr convert_hex_value
.904a		05 29		ora $29		                ora tmp3
.904c		4c ab 90	jmp $90ab	                jmp _save_character
.904f						_esc_tr_table:
>904f		07				    .byte   7               ; a -> BEL (ASCII value 7)
>9050		08				    .byte   8               ; b -> Backspace (ASCII value 8)
>9051		00 00				    .byte   0,0             ; c, d no escape
>9053		1b				    .byte   27              ; e -> ESC (ASCII value 27)
>9054		0c				    .byte   12              ; f -> FF (ASCII value 12)
>9055		00 00 00 00 00			    .byte   0,0,0,0,0       ; g,h,i,j,k
>905a		0a				    .byte   10              ; l -> LF (ASCII value 10)
>905b		8d				    .byte   13+128          ; m -> CR/LF pair (ASCII values 13, 10)
>905c		0a				    .byte   10              ; n behaves like l --> lf
>905d		00 00				    .byte   0,0             ; o,p
>905f		22				    .byte   34              ; q -> Double quote (ASCII value 34)
>9060		0d				    .byte   13              ; r ->  CR (ASCII value 13)
>9061		00				    .byte   0               ; s
>9062		09				    .byte   9               ; t -> Horizontal TAB (ASCII value 9)
>9063		00				    .byte   0               ; u
>9064		0b				    .byte   11              ; v -> Vertical TAB (ASCII value 11)
>9065		00 00 00			    .byte   0,0,0           ; w,x,y   (x is a special case later)
>9068		80				    .byte   0+128           ; z -> NULL (ASCII value 0)
.9069						_check_esc_chars:
.9069		64 28		stz $28		                stz tmp2+1
.906b		c9 61		cmp #$61	                cmp #'a'
.906d		30 1a		bmi $9089	                bmi _check_esc_quote
.906f		c9 7b		cmp #$7b	                cmp #'z'+1
.9071		10 16		bpl $9089	                bpl _check_esc_quote
.9073		a8		tay		                tay
.9074		b9 ee 8f	lda $8fee,y	                lda _esc_tr_table - 'a',y   ; fake base address to index with a-z directly
.9077		d0 03		bne $907c	                bne _esc_replace
.9079		98		tya		                tya                     ; revert if no translation
.907a		80 0d		bra $9089	                bra _check_esc_quote
.907c		10 2d		bpl $90ab	_esc_replace:   bpl _save_character     ; simple replacement
.907e		29 7f		and #$7f	                and #$7F                ; clear hi bit
.9080		f0 29		beq $90ab	                beq _save_character     ; NUL we can just output
.9082		20 ac 97	jsr $97ac	                jsr cmpl_a              ; else output first char (CR)
.9085		a9 0a		lda #$0a	                lda #10                 ; followed by LF
.9087		80 22		bra $90ab	                bra _save_character
.9089						_check_esc_quote:
.9089		c9 22		cmp #$22	                cmp #'"'
.908b		f0 1e		beq $90ab	                beq _save_character
.908d		c9 78		cmp #$78	                cmp #'x'
.908f		d0 06		bne $9097	                bne _check_esc_backslash
.9091		a9 be		lda #$be	                lda #%10111110        ; Clear bits 6 and 0
.9093		85 28		sta $28		                sta tmp2+1
.9095		80 17		bra $90ae	                bra _next_character
.9097						_check_esc_backslash:
.9097		c9 5c		cmp #$5c	                cmp #'\'
.9099		d0 0c		bne $90a7	                bne _regular_char
.909b		80 0e		bra $90ab	                bra _save_character
.909d						_not_escaped:
.909d		c9 5c		cmp #$5c	                cmp #'\'
.909f		d0 06		bne $90a7	                bne _regular_char
.90a1		a9 ff		lda #$ff	                lda #$FF
.90a3		85 28		sta $28		                sta tmp2+1
.90a5		80 07		bra $90ae	                bra _next_character
.90a7						_regular_char:
.90a7		c9 22		cmp #$22	                cmp #'"'
.90a9		f0 0c		beq $90b7	                beq _found_string_end
.90ab						_save_character:
.90ab		20 ac 97	jsr $97ac	                jsr cmpl_a
.90ae						_next_character:
.90ae		e6 10		inc $10		                inc toin
.90b0		d0 02		bne $90b4	                bne _savechars_loop_longjump
.90b2		e6 11		inc $11		                inc toin+1
.90b4						_savechars_loop_longjump:
.90b4		4c de 8f	jmp $8fde	                jmp _savechars_loop
.90b7						_found_string_end:
.90b7		e6 10		inc $10		                inc toin
.90b9		d0 02		bne $90bd	                bne +
.90bb		e6 11		inc $11		                inc toin+1
.90bd						+
.90bd		20 1b 89	jsr $891b	                jsr xt_here
.90c0		20 8b 8f	jsr $8f8b	                jsr xt_rot
.90c3		20 34 92	jsr $9234	                jsr xt_store    ; Update the jmp target
.90c6		20 1b 89	jsr $891b	                jsr xt_here
.90c9		20 05 8d	jsr $8d05	                jsr xt_over
.90cc		20 e4 8b	jsr $8be4	                jsr xt_minus    ; HERE - addr gives string length
.90cf		a5 1a		lda $1a		                lda state
.90d1		05 1b		ora $1b		                ora state+1             ; paranoid
.90d3		f0 03		beq $90d8	                beq _done
.90d5		20 7e a1	jsr $a17e	                jsr cmpl_sliteral         ; ( addr u -- )
.90d8						_done:
.90d8		60		rts		z_s_quote:      rts
.90d9						xt_s_to_d:
.90d9		20 ac d7	jsr $d7ac	                jsr underflow_1
.90dc		ca		dex		                dex
.90dd		ca		dex		                dex
.90de		74 00		stz $00,x	                stz 0,x
.90e0		74 01		stz $01,x	                stz 1,x
.90e2		b5 03		lda $03,x	                lda 3,x
.90e4		10 04		bpl $90ea	                bpl _done
.90e6		d6 00		dec $00,x	                dec 0,x
.90e8		d6 01		dec $01,x	                dec 1,x
.90ea						_done:
.90ea		60		rts		z_s_to_d:       rts
.90eb						xt_semicolon:
.90eb		24 1c		bit $1c		                bit status
.90ed		70 11		bvs $9100	                bvs _colonword
.90ef		a9 60		lda #$60	                lda #OpRTS
.90f1		20 ac 97	jsr $97ac	                jsr cmpl_a
.90f4		ca		dex		                dex
.90f5		ca		dex		                dex
.90f6		a5 06		lda $06		                lda workword
.90f8		95 00		sta $00,x	                sta 0,x
.90fa		a5 07		lda $07		                lda workword+1
.90fc		95 01		sta $01,x	                sta 1,x
.90fe		80 45		bra $9145	                bra _semicolon_done
.9100						_colonword:
.9100		a0 06		ldy #$06	                ldy #6
.9102		a5 00		lda $00		                lda cp
.9104		91 06		sta ($06),y	                sta (workword),y
.9106		c8		iny		                iny
.9107		a5 01		lda $01		                lda cp+1
.9109		91 06		sta ($06),y	                sta (workword),y
.910b		a9 60		lda #$60	                lda #OpRTS
.910d		20 ac 97	jsr $97ac	                jsr cmpl_a
.9110		24 1c		bit $1c		                bit status
.9112		10 26		bpl $913a	                bpl _new_word   ; Bit 7 is clear = new word
.9114		ca		dex		                dex
.9115		ca		dex		                dex
.9116		ca		dex		                dex
.9117		ca		dex		                dex
.9118		b2 06		lda ($06)	                lda (workword)
.911a		95 00		sta $00,x	                sta 0,x
.911c		74 01		stz $01,x	                stz 1,x
.911e		a5 06		lda $06		                lda workword
.9120		18		clc		                clc
.9121		69 08		adc #$08	                adc #8
.9123		95 02		sta $02,x	                sta 2,x
.9125		a5 07		lda $07		                lda workword+1
.9127		69 00		adc #$00	                adc #0                  ; only want carry
.9129		95 03		sta $03,x	                sta 3,x
.912b		a9 02		lda #$02	                lda #str_redefined       ; address of string "redefined"
.912d		20 e8 d7	jsr $d7e8	                jsr print_string_no_lf
.9130		20 d1 94	jsr $94d1	                jsr xt_type
.9133		20 c5 91	jsr $91c5	                jsr xt_space
.9136		a9 80		lda #$80	                lda #%10000000
.9138		14 1c		trb $1c		                trb status
.913a						_new_word:
.913a		a5 06		lda $06		                lda workword
.913c		85 02		sta $02		                sta dp
.913e		a5 07		lda $07		                lda workword+1
.9140		85 03		sta $03		                sta dp+1
.9142		20 16 d7	jsr $d716	                jsr dp_to_current       ; Save the updated DP to the
.9145						_semicolon_done:
.9145		64 1a		stz $1a		                stz state
.9147		64 1b		stz $1b		                stz state+1
.9149		60		rts		z_semicolon:    rts
.914a						xt_sign:
.914a		20 ac d7	jsr $d7ac	                jsr underflow_1
.914d		b5 01		lda $01,x	                lda 1,x         ; check MSB of TOS
.914f		30 04		bmi $9155	                bmi _minus
.9151		e8		inx		                inx
.9152		e8		inx		                inx
.9153		80 09		bra $915e	                bra _done
.9155						_minus:
.9155		a9 2d		lda #$2d	                lda #'-'
.9157		95 00		sta $00,x	                sta 0,x         ; overwrite TOS
.9159		74 01		stz $01,x	                stz 1,x         ; paranoid
.915b		20 2d 89	jsr $892d	                jsr xt_hold
.915e						_done:
.915e		60		rts		z_sign:         rts
.915f						xt_slash:
.915f		a9 00		lda #$00	                lda #0
.9161		48		pha		                pha
.9162		80 03		bra $9167	                bra slashmod_common
.9164						xt_slash_mod:
.9164		a9 ff		lda #$ff	                lda #$FF
.9166		48		pha		                pha             ; falls through to _common
.9167						slashmod_common:
.9167		20 88 93	jsr $9388	                jsr xt_to_r             ; >R
.916a		20 d9 90	jsr $90d9	                jsr xt_s_to_d           ; S>D
.916d		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R>
.9170		20 7c 91	jsr $917c	                jsr xt_sm_slash_rem     ; SM/REM
.9173		68		pla		                pla
.9174		d0 05		bne $917b	                bne _done
.9176		20 4a 92	jsr $924a	                jsr xt_swap
.9179		e8		inx		                inx             ; DROP
.917a		e8		inx		                inx
.917b						_done:
.917b						z_slash_mod:
.917b		60		rts		z_slash:        rts
.917c						xt_sm_slash_rem:
.917c		20 b6 d7	jsr $d7b6	                jsr underflow_3 ; contains double number
.917f		b5 03		lda $03,x	                lda 3,x
.9181		48		pha		                pha
.9182		b5 01		lda $01,x	                lda 1,x
.9184		55 03		eor $03,x	                eor 3,x
.9186		48		pha		                pha
.9187		20 cf 80	jsr $80cf	                jsr xt_abs
.918a		e8		inx		                inx             ; pretend we pushed n1 to R
.918b		e8		inx		                inx
.918c		20 62 9e	jsr $9e62	                jsr xt_dabs
.918f		ca		dex		                dex
.9190		ca		dex		                dex
.9191		20 56 95	jsr $9556	                jsr xt_um_slash_mod     ; UM/MOD
.9194		68		pla		                pla
.9195		10 03		bpl $919a	                bpl +
.9197		20 1f 8c	jsr $8c1f	                jsr xt_negate
.919a						+
.919a		68		pla		                pla
.919b		10 07		bpl $91a4	                bpl _done
.919d		e8		inx		                inx             ; pretend we pushed quotient to R
.919e		e8		inx		                inx
.919f		20 1f 8c	jsr $8c1f	                jsr xt_negate
.91a2		ca		dex		                dex
.91a3		ca		dex		                dex
.91a4						_done:
.91a4		60		rts		z_sm_slash_rem: rts
.91a5						xt_source:
.91a5		ca		dex		                dex
.91a6		ca		dex		                dex
.91a7		a5 0c		lda $0c		                lda cib
.91a9		95 00		sta $00,x	                sta 0,x
.91ab		a5 0d		lda $0d		                lda cib+1
.91ad		95 01		sta $01,x	                sta 1,x
.91af		ca		dex		                dex
.91b0		ca		dex		                dex
.91b1		a5 0e		lda $0e		                lda ciblen
.91b3		95 00		sta $00,x	                sta 0,x
.91b5		a5 0f		lda $0f		                lda ciblen+1
.91b7		95 01		sta $01,x	                sta 1,x
.91b9		60		rts		z_source:       rts
.91ba						xt_source_id:
.91ba		ca		dex		                dex
.91bb		ca		dex		                dex
.91bc		a5 0a		lda $0a		                lda insrc
.91be		95 00		sta $00,x	                sta 0,x
.91c0		a5 0b		lda $0b		                lda insrc+1
.91c2		95 01		sta $01,x	                sta 1,x
.91c4		60		rts		z_source_id:    rts
.91c5						xt_space:
.91c5		a9 20		lda #$20	                lda #AscSP
.91c7		20 c5 86	jsr $86c5	                jsr emit_a
.91ca		60		rts		z_space:        rts
.91cb						xt_spaces:
.91cb		20 ac d7	jsr $d7ac	                jsr underflow_1
.91ce		20 13 9e	jsr $9e13	                jsr xt_zero
.91d1		20 ac 8b	jsr $8bac	                jsr xt_max
.91d4		b5 00		lda $00,x	                lda 0,x
.91d6		15 01		ora $01,x	                ora 1,x
.91d8		f0 2a		beq $9204	                beq _done
.91da		b4 01		ldy $01,x	                ldy 1,x
.91dc		d0 0c		bne $91ea	                bne _lots_of_spaces
.91de		b4 00		ldy $00,x	                ldy 0,x
.91e0						_quick_loop:
.91e0		a9 20		lda #$20	                lda #AscSP
.91e2		20 c5 86	jsr $86c5	                jsr emit_a
.91e5		88		dey		                dey
.91e6		f0 1c		beq $9204	                beq _done
.91e8		80 f6		bra $91e0	                bra _quick_loop
.91ea						_lots_of_spaces:
.91ea		b4 00		ldy $00,x	                ldy 0,x
.91ec						_first_slow_loop:
.91ec		f0 08		beq $91f6	                beq _slow_outer_loop
.91ee		a9 20		lda #$20	                lda #AscSP
.91f0		20 c5 86	jsr $86c5	                jsr emit_a
.91f3		88		dey		                dey
.91f4		80 f6		bra $91ec	                bra _first_slow_loop
.91f6						_slow_outer_loop:
.91f6		a0 00		ldy #$00	                ldy #00
.91f8						_slow_inner_loop:
.91f8		a9 20		lda #$20	                lda #AscSP
.91fa		20 c5 86	jsr $86c5	                jsr emit_a
.91fd		88		dey		                dey
.91fe		d0 f8		bne $91f8	                bne _slow_inner_loop
.9200		d6 01		dec $01,x	                dec 1,x
.9202		d0 f2		bne $91f6	                bne _slow_outer_loop
.9204						_done:
.9204		e8		inx		                inx             ; drop
.9205		e8		inx		                inx
.9206		60		rts		z_spaces:       rts
.9207						xt_star:
.9207		20 b1 d7	jsr $d7b1	                jsr underflow_2
.920a		20 98 95	jsr $9598	                jsr xt_um_star
.920d		e8		inx		                inx
.920e		e8		inx		                inx
.920f		60		rts		z_star:         rts
.9210						xt_star_slash:
.9210		20 19 92	jsr $9219	                jsr xt_star_slash_mod
.9213		20 4a 92	jsr $924a	                jsr xt_swap
.9216		e8		inx		                inx
.9217		e8		inx		                inx
.9218						z_star_slash:
.9218		60		rts		                rts
.9219						xt_star_slash_mod:
.9219		20 b6 d7	jsr $d7b6	                jsr underflow_3
.921c		20 88 93	jsr $9388	                jsr xt_to_r
.921f		20 21 8b	jsr $8b21	                jsr xt_m_star
.9222		20 ee 8e	jsr $8eee	                jsr xt_r_from
.9225		20 7c 91	jsr $917c	                jsr xt_sm_slash_rem
.9228						z_star_slash_mod:
.9228		60		rts		                rts
.9229						xt_state:
.9229		ca		dex		                dex
.922a		ca		dex		                dex
.922b		a9 1a		lda #$1a	                lda #<state
.922d		95 00		sta $00,x	                sta 0,x
.922f		a9 00		lda #$00	                lda #>state
.9231		95 01		sta $01,x	                sta 1,x
.9233		60		rts		z_state:        rts
.9234						xt_store:
.9234		20 b1 d7	jsr $d7b1	                jsr underflow_2
.9237		b5 02		lda $02,x	                lda 2,x         ; LSB
.9239		81 00		sta ($00,x)	                sta (0,x)
.923b		f6 00		inc $00,x	                inc 0,x
.923d		d0 02		bne $9241	                bne +
.923f		f6 01		inc $01,x	                inc 1,x
.9241						+
.9241		b5 03		lda $03,x	                lda 3,x         ; MSB
.9243		81 00		sta ($00,x)	                sta (0,x)
.9245		e8		inx		                inx             ; 2DROP
.9246		e8		inx		                inx
.9247		e8		inx		                inx
.9248		e8		inx		                inx
.9249		60		rts		z_store:        rts
.924a						xt_swap:
.924a		20 b1 d7	jsr $d7b1	                jsr underflow_2
.924d		b5 00		lda $00,x	                lda 0,x         ; LSB
.924f		b4 02		ldy $02,x	                ldy 2,x
.9251		95 02		sta $02,x	                sta 2,x
.9253		94 00		sty $00,x	                sty 0,x
.9255		b5 01		lda $01,x	                lda 1,x         ; MSB
.9257		b4 03		ldy $03,x	                ldy 3,x
.9259		95 03		sta $03,x	                sta 3,x
.925b		94 01		sty $01,x	                sty 1,x
.925d		60		rts		z_swap:         rts
.925e						xt_tick:
.925e		20 51 8d	jsr $8d51	                jsr xt_parse_name       ; ( -- addr u )
.9261		b5 00		lda $00,x	                lda 0,x
.9263		15 01		ora $01,x	                ora 1,x
.9265		d0 05		bne $926c	                bne +
.9267		a9 05		lda #$05	                lda #err_noname
.9269		4c c2 d7	jmp $d7c2	                jmp error
.926c						+
.926c		20 12 9b	jsr $9b12	                jsr xt_find_name        ; ( addr u -- nt )
.926f		b5 00		lda $00,x	                lda 0,x
.9271		15 01		ora $01,x	                ora 1,x
.9273		d0 05		bne $927a	                bne +
.9275		a9 08		lda #$08	                lda #err_syntax
.9277		4c c2 d7	jmp $d7c2	                jmp error
.927a						+
.927a		20 50 9c	jsr $9c50	                jsr xt_name_to_int      ; ( nt -- xt )
.927d		60		rts		z_tick:         rts
.927e						xt_to:
.927e		20 5e 92	jsr $925e	                jsr xt_tick             ; ( [n] xt )
.9281		b5 00		lda $00,x	                lda 0,x                 ; LSB
.9283		18		clc		                clc
.9284		69 03		adc #$03	                adc #3
.9286		85 25		sta $25		                sta tmp1
.9288		b5 01		lda $01,x	                lda 1,x                 ; MSB
.928a		69 00		adc #$00	                adc #0                  ; we just want the carry
.928c		85 26		sta $26		                sta tmp1+1
.928e		a5 1a		lda $1a		                lda state
.9290		05 1b		ora $1b		                ora state+1
.9292		f0 14		beq $92a8	                beq _interpret
.9294		a5 25		lda $25		                lda tmp1            ; replace TOS with tmp1
.9296		95 00		sta $00,x	                sta 0,x
.9298		a5 26		lda $26		                lda tmp1+1
.929a		95 01		sta $01,x	                sta 1,x
.929c		20 f2 89	jsr $89f2	                jsr xt_literal      ; generate the runtime for LITERAL tmp1
.929f		a0 92		ldy #$92	                ldy #>xt_store      ; write the runtime for !
.92a1		a9 34		lda #$34	                lda #<xt_store
.92a3		20 9c 97	jsr $979c	                jsr cmpl_subroutine
.92a6		80 11		bra $92b9	                bra _done
.92a8						_interpret:
.92a8		20 b1 d7	jsr $d7b1	                jsr underflow_2
.92ab		e8		inx		                inx
.92ac		e8		inx		                inx                     ; leaving just ( n )
.92ad		b5 00		lda $00,x	                lda 0,x
.92af		92 25		sta ($25)	                sta (tmp1)              ; LSB
.92b1		a0 01		ldy #$01	                ldy #1
.92b3		b5 01		lda $01,x	                lda 1,x                 ; MSB
.92b5		91 25		sta ($25),y	                sta (tmp1),y            ; fall through to common
.92b7		e8		inx		                inx                     ; DROP
.92b8		e8		inx		                inx
.92b9						_done:
.92b9		60		rts		z_to:           rts
.92ba						xt_to_body:
.92ba		20 ac d7	jsr $d7ac	                jsr underflow_1
.92bd		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( xt xt )
.92c0		20 ca 9b	jsr $9bca	                jsr xt_int_to_name      ; ( xt nt )
.92c3		f6 00		inc $00,x	                inc 0,x
.92c5		d0 02		bne $92c9	                bne +
.92c7		f6 01		inc $01,x	                inc 1,x
.92c9						+
.92c9		a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.92cb		29 20		and #$20	                and #HC
.92cd		f0 0b		beq $92da	                beq _no_cfa
.92cf		18		clc		                clc
.92d0		b5 02		lda $02,x	                lda 2,x         ; LSB
.92d2		69 03		adc #$03	                adc #3
.92d4		95 02		sta $02,x	                sta 2,x
.92d6		90 02		bcc $92da	                bcc _no_cfa
.92d8		f6 03		inc $03,x	                inc 3,x         ; MSB
.92da						_no_cfa:
.92da		e8		inx		                inx             ; get rid of the nt
.92db		e8		inx		                inx
.92dc		60		rts		z_to_body:      rts
.92dd						xt_to_in:
.92dd		ca		dex		                dex
.92de		ca		dex		                dex
.92df		a9 10		lda #$10	                lda #<toin
.92e1		95 00		sta $00,x	                sta 0,x
.92e3		a9 00		lda #$00	                lda #>toin      ; paranoid, should be zero
.92e5		95 01		sta $01,x	                sta 1,x
.92e7		60		rts		z_to_in:        rts
.92e8						xt_to_number:
.92e8		20 bb d7	jsr $d7bb	                jsr underflow_4
.92eb		b5 06		lda $06,x	                lda 6,x         ; ud-lo LSB
.92ed		85 2d		sta $2d		                sta scratch
.92ef		b5 07		lda $07,x	                lda 7,x         ; ud-lo MSB
.92f1		85 2e		sta $2e		                sta scratch+1
.92f3		b5 04		lda $04,x	                lda 4,x         ; ud-hi LSB
.92f5		85 2f		sta $2f		                sta scratch+2
.92f7		b5 05		lda $05,x	                lda 5,x         ; ud-hi MSB
.92f9		85 30		sta $30		                sta scratch+3
.92fb		ca		dex		                dex
.92fc		ca		dex		                dex
.92fd						_loop:
.92fd		a1 04		lda ($04,x)	                lda (4,x)
.92ff		95 00		sta $00,x	                sta 0,x                 ; ( ud-lo ud-hi addr u char )
.9301		74 01		stz $01,x	                stz 1,x                 ; paranoid
.9303		20 b6 9a	jsr $9ab6	                jsr xt_digit_question   ; ( char -- n -1 | char 0 )
.9306		b5 00		lda $00,x	                lda 0,x
.9308		d0 04		bne $930e	                bne _digit_ok
.930a		e8		inx		                inx
.930b		e8		inx		                inx
.930c		80 67		bra $9375	                bra _done       ; ( ud-lo ud-hi addr u char )
.930e						_digit_ok:
.930e		b5 02		lda $02,x	                lda 2,x
.9310		85 31		sta $31		                sta scratch+4
.9312		b5 03		lda $03,x	                lda 3,x
.9314		85 32		sta $32		                sta scratch+5
.9316		a5 2f		lda $2f		                lda scratch+2
.9318		95 02		sta $02,x	                sta 2,x         ; NOS
.931a		a5 30		lda $30		                lda scratch+3
.931c		95 03		sta $03,x	                sta 3,x
.931e		a5 18		lda $18		                lda base
.9320		95 00		sta $00,x	                sta 0,x         ; TOS
.9322		74 01		stz $01,x	                stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
.9324		20 98 95	jsr $9598	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
.9327		b5 02		lda $02,x	                lda 2,x         ; ud-hi-lo
.9329		85 33		sta $33		                sta scratch+6
.932b		b5 03		lda $03,x	                lda 3,x
.932d		85 34		sta $34		                sta scratch+7
.932f		a5 2d		lda $2d		                lda scratch
.9331		95 02		sta $02,x	                sta 2,x
.9333		a5 2e		lda $2e		                lda scratch+1
.9335		95 03		sta $03,x	                sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
.9337		a5 18		lda $18		                lda base
.9339		95 00		sta $00,x	                sta 0,x
.933b		74 01		stz $01,x	                stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
.933d		20 98 95	jsr $9598	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
.9340		b5 00		lda $00,x	                lda 0,x
.9342		85 2f		sta $2f		                sta scratch+2
.9344		b5 01		lda $01,x	                lda 1,x
.9346		85 30		sta $30		                sta scratch+3
.9348		b5 02		lda $02,x	                lda 2,x
.934a		85 2d		sta $2d		                sta scratch
.934c		b5 03		lda $03,x	                lda 3,x
.934e		85 2e		sta $2e		                sta scratch+1
.9350		18		clc		                clc
.9351		a5 2d		lda $2d		                lda scratch     ; ud-lo LSB
.9353		65 31		adc $31		                adc scratch+4   ; n LSB
.9355		85 2d		sta $2d		                sta scratch     ; this is the new ud-lo
.9357		a5 2e		lda $2e		                lda scratch+1   ; ud-lo MSB
.9359		65 32		adc $32		                adc scratch+5   ; n MSB
.935b		85 2e		sta $2e		                sta scratch+1
.935d		a5 2f		lda $2f		                lda scratch+2   ; LSB
.935f		65 33		adc $33		                adc scratch+6
.9361		85 2f		sta $2f		                sta scratch+2   ; this is the new ud-hi
.9363		a5 30		lda $30		                lda scratch+3   ; MSB
.9365		65 34		adc $34		                adc scratch+7
.9367		85 30		sta $30		                sta scratch+3
.9369		e8		inx		                inx
.936a		e8		inx		                inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
.936b		f6 04		inc $04,x	                inc 4,x
.936d		d0 02		bne $9371	                bne +
.936f		f6 05		inc $05,x	                inc 5,x
.9371						+
.9371		d6 02		dec $02,x	                dec 2,x
.9373		d0 88		bne $92fd	                bne _loop
.9375						_done:
.9375		e8		inx		                inx
.9376		e8		inx		                inx             ; ( ud-lo ud-hi addr u )
.9377		a5 2d		lda $2d		                lda scratch     ; new ud-lo
.9379		95 06		sta $06,x	                sta 6,x
.937b		a5 2e		lda $2e		                lda scratch+1
.937d		95 07		sta $07,x	                sta 7,x
.937f		a5 2f		lda $2f		                lda scratch+2
.9381		95 04		sta $04,x	                sta 4,x
.9383		a5 30		lda $30		                lda scratch+3
.9385		95 05		sta $05,x	                sta 5,x
.9387		60		rts		z_to_number:    rts
.9388						xt_to_r:
.9388		68		pla		                pla             ; LSB
.9389		85 23		sta $23		                sta tmptos
.938b		7a		ply		                ply             ; MSB
.938c		20 ac d7	jsr $d7ac	                jsr underflow_1
.938f		b5 01		lda $01,x	                lda 1,x         ; MSB
.9391		48		pha		                pha
.9392		b5 00		lda $00,x	                lda 0,x         ; LSB
.9394		48		pha		                pha
.9395		e8		inx		                inx
.9396		e8		inx		                inx
.9397		5a		phy		                phy             ; MSB
.9398		a5 23		lda $23		                lda tmptos
.939a		48		pha		                pha             ; LSB
.939b		60		rts		z_to_r:         rts
.939c						xt_true:
.939c		ca		dex		                dex
.939d		ca		dex		                dex
.939e		a9 ff		lda #$ff	                lda #$FF
.93a0		95 00		sta $00,x	                sta 0,x
.93a2		95 01		sta $01,x	                sta 1,x
.93a4		60		rts		z_true:         rts
.93a5						xt_tuck:
.93a5		20 b1 d7	jsr $d7b1	                jsr underflow_2
.93a8		ca		dex		                dex
.93a9		ca		dex		                dex
.93aa		b4 04		ldy $04,x	                ldy 4,x         ; LSB
.93ac		b5 02		lda $02,x	                lda 2,x
.93ae		95 04		sta $04,x	                sta 4,x
.93b0		94 02		sty $02,x	                sty 2,x
.93b2		95 00		sta $00,x	                sta 0,x
.93b4		b4 05		ldy $05,x	                ldy 5,x         ; MSB
.93b6		b5 03		lda $03,x	                lda 3,x
.93b8		95 05		sta $05,x	                sta 5,x
.93ba		94 03		sty $03,x	                sty 3,x         ; bba
.93bc		95 01		sta $01,x	                sta 1,x         ; baa
.93be		60		rts		z_tuck:         rts
.93bf						xt_two_drop:
.93bf		20 b1 d7	jsr $d7b1	                jsr underflow_2
.93c2		e8		inx		                inx
.93c3		e8		inx		                inx
.93c4		e8		inx		                inx
.93c5		e8		inx		                inx
.93c6		60		rts		z_two_drop:     rts
.93c7						xt_two_dup:
.93c7		20 b1 d7	jsr $d7b1	                jsr underflow_2
.93ca		ca		dex		                dex
.93cb		ca		dex		                dex
.93cc		ca		dex		                dex
.93cd		ca		dex		                dex
.93ce		b5 04		lda $04,x	                lda 4,x         ; TOS
.93d0		95 00		sta $00,x	                sta 0,x
.93d2		b5 05		lda $05,x	                lda 5,x
.93d4		95 01		sta $01,x	                sta 1,x
.93d6		b5 06		lda $06,x	                lda 6,x         ; NOS
.93d8		95 02		sta $02,x	                sta 2,x
.93da		b5 07		lda $07,x	                lda 7,x
.93dc		95 03		sta $03,x	                sta 3,x
.93de		60		rts		z_two_dup:      rts
.93df						xt_two_fetch:
.93df		20 ac d7	jsr $d7ac	                jsr underflow_1
.93e2		b5 00		lda $00,x	                lda 0,x
.93e4		85 25		sta $25		                sta tmp1
.93e6		b4 01		ldy $01,x	                ldy 1,x
.93e8		84 26		sty $26		                sty tmp1+1
.93ea		ca		dex		                dex             ; reuse one stack element
.93eb		ca		dex		                dex
.93ec		b2 25		lda ($25)	                lda (tmp1)      ; copy LSB
.93ee		95 00		sta $00,x	                sta 0,x
.93f0		a0 01		ldy #$01	                ldy #1          ; copy next
.93f2		b1 25		lda ($25),y	                lda (tmp1),y
.93f4		95 01		sta $01,x	                sta 1,x
.93f6		c8		iny		                iny             ; copy next
.93f7		b1 25		lda ($25),y	                lda (tmp1),y
.93f9		95 02		sta $02,x	                sta 2,x
.93fb		c8		iny		                iny             ; copy next
.93fc		b1 25		lda ($25),y	                lda (tmp1),y
.93fe		95 03		sta $03,x	                sta 3,x
.9400		60		rts		z_two_fetch:    rts
.9401						xt_two_over:
.9401		20 bb d7	jsr $d7bb	                jsr underflow_4
.9404		ca		dex		                dex
.9405		ca		dex		                dex
.9406		ca		dex		                dex
.9407		ca		dex		                dex
.9408		b5 08		lda $08,x	                lda 8,x
.940a		95 00		sta $00,x	                sta 0,x
.940c		b5 09		lda $09,x	                lda 9,x
.940e		95 01		sta $01,x	                sta 1,x
.9410		b5 0a		lda $0a,x	                lda 10,x
.9412		95 02		sta $02,x	                sta 2,x
.9414		b5 0b		lda $0b,x	                lda 11,x
.9416		95 03		sta $03,x	                sta 3,x
.9418		60		rts		z_two_over:     rts
.9419						xt_two_r_fetch:
.9419		ca		dex		                dex
.941a		ca		dex		                dex
.941b		ca		dex		                dex
.941c		ca		dex		                dex
.941d		8a		txa		                txa
.941e		ba		tsx		                tsx
.941f		da		phx		                phx             ; 65c02 has no TXY, so do it the hard way
.9420		7a		ply		                ply
.9421		aa		tax		                tax
.9422		b9 03 01	lda $0103,y	                lda $0103,y     ; LSB of top entry
.9425		95 00		sta $00,x	                sta 0,x
.9427		b9 04 01	lda $0104,y	                lda $0104,y     ; MSB of top entry
.942a		95 01		sta $01,x	                sta 1,x
.942c		b9 05 01	lda $0105,y	                lda $0105,y     ; LSB of bottom entry
.942f		95 02		sta $02,x	                sta 2,x
.9431		b9 06 01	lda $0106,y	                lda $0106,y     ; MSB of top entry
.9434		95 03		sta $03,x	                sta 3,x
.9436		60		rts		z_two_r_fetch:  rts
.9437						xt_two_r_from:
.9437		68		pla		                pla                     ; LSB
.9438		85 25		sta $25		                sta tmp1
.943a		68		pla		                pla                     ; MSB
.943b		85 26		sta $26		                sta tmp1+1
.943d		ca		dex		                dex
.943e		ca		dex		                dex
.943f		ca		dex		                dex
.9440		ca		dex		                dex
.9441		68		pla		                pla                     ; LSB
.9442		95 00		sta $00,x	                sta 0,x
.9444		68		pla		                pla                     ; MSB
.9445		95 01		sta $01,x	                sta 1,x
.9447		68		pla		                pla                     ; LSB
.9448		95 02		sta $02,x	                sta 2,x
.944a		68		pla		                pla                     ; MSB
.944b		95 03		sta $03,x	                sta 3,x
.944d		a5 26		lda $26		                lda tmp1+1              ; MSB
.944f		48		pha		                pha
.9450		a5 25		lda $25		                lda tmp1                ; LSB
.9452		48		pha		                pha
.9453		60		rts		z_two_r_from:   rts
.9454						xt_two_slash:
.9454		20 ac d7	jsr $d7ac	                jsr underflow_1
.9457		b5 01		lda $01,x	                lda 1,x
.9459		0a		asl a		                asl                     ; save the sign
.945a		76 01		ror $01,x	                ror 1,x
.945c		76 00		ror $00,x	                ror 0,x
.945e		60		rts		z_two_slash:    rts
.945f						xt_two_star:
.945f						xt_cells:
.945f		20 ac d7	jsr $d7ac	                jsr underflow_1
.9462		16 00		asl $00,x	                asl 0,x
.9464		36 01		rol $01,x	                rol 1,x
.9466						z_cells:
.9466		60		rts		z_two_star:     rts
.9467						xt_two_store:
.9467		20 b6 d7	jsr $d7b6	                jsr underflow_3
.946a		b5 00		lda $00,x	                lda 0,x
.946c		85 25		sta $25		                sta tmp1
.946e		b4 01		ldy $01,x	                ldy 1,x
.9470		84 26		sty $26		                sty tmp1+1
.9472		e8		inx		                inx
.9473		e8		inx		                inx
.9474		b5 00		lda $00,x	                lda 0,x         ; copy MSB
.9476		92 25		sta ($25)	                sta (tmp1)
.9478		b5 01		lda $01,x	                lda 1,x         ; copy next
.947a		a0 01		ldy #$01	                ldy #1
.947c		91 25		sta ($25),y	                sta (tmp1),y
.947e		b5 02		lda $02,x	                lda 2,x         ; copy next
.9480		c8		iny		                iny
.9481		91 25		sta ($25),y	                sta (tmp1),y
.9483		b5 03		lda $03,x	                lda 3,x         ; copy MSB
.9485		c8		iny		                iny
.9486		91 25		sta ($25),y	                sta (tmp1),y
.9488		e8		inx		                inx             ; 2DROP
.9489		e8		inx		                inx
.948a		e8		inx		                inx
.948b		e8		inx		                inx
.948c		60		rts		z_two_store:    rts
.948d						xt_two_swap:
.948d		20 bb d7	jsr $d7bb	                jsr underflow_4
.9490		b5 00		lda $00,x	                lda 0,x
.9492		b4 04		ldy $04,x	                ldy 4,x
.9494		95 04		sta $04,x	                sta 4,x
.9496		94 00		sty $00,x	                sty 0,x
.9498		b5 01		lda $01,x	                lda 1,x
.949a		b4 05		ldy $05,x	                ldy 5,x
.949c		95 05		sta $05,x	                sta 5,x
.949e		94 01		sty $01,x	                sty 1,x
.94a0		b5 02		lda $02,x	                lda 2,x
.94a2		b4 06		ldy $06,x	                ldy 6,x
.94a4		95 06		sta $06,x	                sta 6,x
.94a6		94 02		sty $02,x	                sty 2,x
.94a8		b5 03		lda $03,x	                lda 3,x
.94aa		b4 07		ldy $07,x	                ldy 7,x
.94ac		95 07		sta $07,x	                sta 7,x
.94ae		94 03		sty $03,x	                sty 3,x
.94b0		60		rts		z_two_swap:     rts
.94b1						xt_two_to_r:
.94b1		68		pla		                pla             ; LSB
.94b2		85 25		sta $25		                sta tmp1
.94b4		68		pla		                pla             ; MSB
.94b5		85 26		sta $26		                sta tmp1+1
.94b7		20 b1 d7	jsr $d7b1	                jsr underflow_2
.94ba		b5 03		lda $03,x	                lda 3,x         ; MSB
.94bc		48		pha		                pha
.94bd		b5 02		lda $02,x	                lda 2,x         ; LSB
.94bf		48		pha		                pha
.94c0		b5 01		lda $01,x	                lda 1,x         ; MSB
.94c2		48		pha		                pha
.94c3		b5 00		lda $00,x	                lda 0,x         ; LSB
.94c5		48		pha		                pha
.94c6		e8		inx		                inx
.94c7		e8		inx		                inx
.94c8		e8		inx		                inx
.94c9		e8		inx		                inx
.94ca		a5 26		lda $26		                lda tmp1+1      ; MSB
.94cc		48		pha		                pha
.94cd		a5 25		lda $25		                lda tmp1        ; LSB
.94cf		48		pha		                pha
.94d0		60		rts		z_two_to_r:     rts
.94d1						xt_type:
.94d1		20 b1 d7	jsr $d7b1	                jsr underflow_2
.94d4		b5 02		lda $02,x	                lda 2,x
.94d6		85 25		sta $25		                sta tmp1
.94d8		b5 03		lda $03,x	                lda 3,x
.94da		85 26		sta $26		                sta tmp1+1
.94dc						_loop:
.94dc		b5 00		lda $00,x	                lda 0,x
.94de		15 01		ora $01,x	                ora 1,x
.94e0		f0 15		beq $94f7	                beq _done
.94e2		b2 25		lda ($25)	                lda (tmp1)
.94e4		20 c5 86	jsr $86c5	                jsr emit_a      ; avoids stack foolery
.94e7		e6 25		inc $25		                inc tmp1
.94e9		d0 02		bne $94ed	                bne +
.94eb		e6 26		inc $26		                inc tmp1+1
.94ed						+
.94ed		b5 00		lda $00,x	                lda 0,x
.94ef		d0 02		bne $94f3	                bne +
.94f1		d6 01		dec $01,x	                dec 1,x
.94f3						+
.94f3		d6 00		dec $00,x	                dec 0,x
.94f5		80 e5		bra $94dc	                bra _loop
.94f7						_done:
.94f7		e8		inx		                inx
.94f8		e8		inx		                inx
.94f9		e8		inx		                inx
.94fa		e8		inx		                inx
.94fb		60		rts		z_type:         rts
.94fc						xt_u_dot:
.94fc		20 ac d7	jsr $d7ac	                jsr underflow_1
.94ff		20 19 d8	jsr $d819	                jsr print_u
.9502		a9 20		lda #$20	                lda #AscSP
.9504		20 c5 86	jsr $86c5	                jsr emit_a
.9507		60		rts		z_u_dot:        rts
.9508						xt_u_dot_r:
.9508		20 b1 d7	jsr $d7b1	                jsr underflow_2
.950b		20 88 93	jsr $9388	                jsr xt_to_r
.950e		20 13 9e	jsr $9e13	                jsr xt_zero
.9511		20 cf 89	jsr $89cf	                jsr xt_less_number_sign
.9514		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s
.9517		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater
.951a		20 ee 8e	jsr $8eee	                jsr xt_r_from
.951d		20 05 8d	jsr $8d05	                jsr xt_over
.9520		20 e4 8b	jsr $8be4	                jsr xt_minus
.9523		20 cb 91	jsr $91cb	                jsr xt_spaces
.9526		20 d1 94	jsr $94d1	                jsr xt_type
.9529		60		rts		z_u_dot_r:      rts
.952a						xt_u_greater_than:
.952a		20 b1 d7	jsr $d7b1	                jsr underflow_2
.952d		b5 00		lda $00,x	                lda 0,x
.952f		d5 02		cmp $02,x	                cmp 2,x
.9531		b5 01		lda $01,x	                lda 1,x
.9533		f5 03		sbc $03,x	                sbc 3,x
.9535		e8		inx		                inx
.9536		e8		inx		                inx
.9537		a9 00		lda #$00	                lda #0
.9539		69 ff		adc #$ff	                adc #$FF
.953b		95 00		sta $00,x	                sta 0,x         ; store flag
.953d		95 01		sta $01,x	                sta 1,x
.953f		60		rts		z_u_greater_than:    rts
.9540						xt_u_less_than:
.9540		20 b1 d7	jsr $d7b1	                jsr underflow_2
.9543		b5 02		lda $02,x	                lda 2,x
.9545		d5 00		cmp $00,x	                cmp 0,x
.9547		b5 03		lda $03,x	                lda 3,x
.9549		f5 01		sbc $01,x	                sbc 1,x
.954b		e8		inx		                inx
.954c		e8		inx		                inx
.954d		a9 00		lda #$00	                lda #0
.954f		69 ff		adc #$ff	                adc #$FF
.9551		95 00		sta $00,x	                sta 0,x         ; store flag
.9553		95 01		sta $01,x	                sta 1,x
.9555		60		rts		z_u_less_than:    rts
.9556						xt_um_slash_mod:
.9556		20 b6 d7	jsr $d7b6	                jsr underflow_3
.9559		b5 00		lda $00,x	                lda 0,x
.955b		15 01		ora $01,x	                ora 1,x
.955d		d0 05		bne $9564	                bne _not_zero
.955f		a9 04		lda #$04	                lda #err_divzero
.9561		4c c2 d7	jmp $d7c2	                jmp error
.9564						_not_zero:
.9564		a9 11		lda #$11	                lda #17
.9566		85 23		sta $23		                sta tmptos
.9568						_loop:
.9568		36 04		rol $04,x	                rol 4,x
.956a		36 05		rol $05,x	                rol 5,x
.956c		c6 23		dec $23		                dec tmptos
.956e		f0 22		beq $9592	                beq _done
.9570		36 02		rol $02,x	                rol 2,x
.9572		36 03		rol $03,x	                rol 3,x
.9574		64 25		stz $25		                stz tmp1        ; store the bit we got from hi cell (MSB)
.9576		26 25		rol $25		                rol tmp1
.9578		38		sec		                sec
.9579		b5 02		lda $02,x	                lda 2,x
.957b		f5 00		sbc $00,x	                sbc 0,x
.957d		85 26		sta $26		                sta tmp1+1
.957f		b5 03		lda $03,x	                lda 3,x
.9581		f5 01		sbc $01,x	                sbc 1,x
.9583		a8		tay		                tay
.9584		a5 25		lda $25		                lda tmp1
.9586		e9 00		sbc #$00	                sbc #0
.9588		90 de		bcc $9568	                bcc _loop
.958a		a5 26		lda $26		                lda tmp1+1
.958c		95 02		sta $02,x	                sta 2,x
.958e		94 03		sty $03,x	                sty 3,x         ; used as temp storage
.9590		80 d6		bra $9568	                bra _loop
.9592						_done:
.9592		e8		inx		                inx
.9593		e8		inx		                inx
.9594		20 4a 92	jsr $924a	                jsr xt_swap
.9597		60		rts		z_um_slash_mod: rts
.9598						xt_um_star:
.9598		20 b1 d7	jsr $d7b1	                jsr underflow_2
.959b		18		clc		                clc
.959c		b5 00		lda $00,x	                lda 0,x         ; copy TOS to tmp2
.959e		e9 00		sbc #$00	                sbc #0
.95a0		85 27		sta $27		                sta tmp2
.95a2		b5 01		lda $01,x	                lda 1,x
.95a4		e9 00		sbc #$00	                sbc #0
.95a6		90 31		bcc $95d9	                bcc _zero       ; is TOS zero?
.95a8		85 28		sta $28		                sta tmp2+1
.95aa		a9 00		lda #$00	                lda #0
.95ac		85 25		sta $25		                sta tmp1
.95ae		86 29		stx $29		                stx tmp3        ; tested for exit from outer loop
.95b0		ca		dex		                dex
.95b1		ca		dex		                dex
.95b2						_outer_loop:
.95b2		a0 08		ldy #$08	                ldy #8          ; counter inner loop
.95b4		56 04		lsr $04,x	                lsr 4,x         ; think "2,x" then later "3,x"
.95b6						_inner_loop:
.95b6		90 0c		bcc $95c4	                bcc _no_add
.95b8		85 26		sta $26		                sta tmp1+1      ; save time, don't CLC
.95ba		a5 25		lda $25		                lda tmp1
.95bc		65 27		adc $27		                adc tmp2
.95be		85 25		sta $25		                sta tmp1
.95c0		a5 26		lda $26		                lda tmp1+1
.95c2		65 28		adc $28		                adc tmp2+1
.95c4						_no_add:
.95c4		6a		ror a		                ror
.95c5		66 25		ror $25		                ror tmp1
.95c7		76 04		ror $04,x	                ror 4,x         ; think "2,x" then later "3,x"
.95c9		88		dey		                dey
.95ca		d0 ea		bne $95b6	                bne _inner_loop ; go back for one more shift?
.95cc		e8		inx		                inx
.95cd		e4 29		cpx $29		                cpx tmp3
.95cf		d0 e1		bne $95b2	                bne _outer_loop ; go back for eight more shifts?
.95d1		95 01		sta $01,x	                sta 1,x
.95d3		a5 25		lda $25		                lda tmp1
.95d5		95 00		sta $00,x	                sta 0,x
.95d7		80 04		bra $95dd	                bra _done
.95d9						_zero:
.95d9		74 02		stz $02,x	                stz 2,x
.95db		74 03		stz $03,x	                stz 3,x
.95dd						_done:
.95dd		60		rts		z_um_star:      rts
.95de						xt_unloop:
.95de		a4 1f		ldy $1f		                ldy loopctrl
.95e0		88		dey		                dey
.95e1		88		dey		                dey
.95e2		88		dey		                dey
.95e3		88		dey		                dey
.95e4		84 1f		sty $1f		                sty loopctrl
.95e6		30 05		bmi $95ed	                bmi z_unloop            ; no active loops?
.95e8		b9 00 01	lda $0100,y	                lda loopindex,y         ; else re-cache the LSB of loopindex
.95eb		85 20		sta $20		                sta loopidx0
.95ed		60		rts		z_unloop:       rts
.95ee						xt_until:
.95ee		20 ee 97	jsr $97ee	                jsr cmpl_0branch_tos
.95f1		60		rts		z_until:        rts
.95f2						xt_unused:
.95f2		ca		dex		                dex
.95f3		ca		dex		                dex
.95f4		a9 00		lda #$00	                lda #<cp_end
.95f6		38		sec		                sec
.95f7		e5 00		sbc $00		                sbc cp
.95f9		95 00		sta $00,x	                sta 0,x
.95fb		a9 7c		lda #$7c	                lda #>cp_end
.95fd		e5 01		sbc $01		                sbc cp+1
.95ff		95 01		sta $01,x	                sta 1,x
.9601		60		rts		z_unused:       rts
.9602						xt_variable:
.9602		20 40 84	jsr $8440	                jsr xt_create
.9605		a9 00		lda #$00	                lda #0
.9607		92 00		sta ($00)	                sta (cp)
.9609		e6 00		inc $00		                inc cp
.960b		d0 02		bne $960f	                bne +
.960d		e6 01		inc $01		                inc cp+1
.960f						+
.960f		92 00		sta ($00)	                sta (cp)
.9611		e6 00		inc $00		                inc cp
.9613		d0 02		bne $9617	                bne +
.9615		e6 01		inc $01		                inc cp+1
.9617						+
.9617		20 08 84	jsr $8408	                jsr adjust_z
.961a		60		rts		z_variable:     rts
.961b						xt_while:
.961b		20 d9 97	jsr $97d9	                jsr cmpl_0branch_later          ; branch to location we'll determine later
.961e		20 4a 92	jsr $924a	                jsr xt_swap
.9621		60		rts		z_while:        rts
.9622						xt_within:
.9622		20 b6 d7	jsr $d7b6	                jsr underflow_3
.9625		20 05 8d	jsr $8d05	                jsr xt_over
.9628		20 e4 8b	jsr $8be4	                jsr xt_minus
.962b		20 88 93	jsr $9388	                jsr xt_to_r
.962e		20 e4 8b	jsr $8be4	                jsr xt_minus
.9631		20 ee 8e	jsr $8eee	                jsr xt_r_from
.9634		20 40 95	jsr $9540	                jsr xt_u_less_than
.9637		60		rts		z_within:       rts
.9638						xt_word:
.9638		20 ac d7	jsr $d7ac	                jsr underflow_1
.963b		a4 10		ldy $10		                ldy toin                ; >IN
.963d						_loop:
.963d		c4 0e		cpy $0e		                cpy ciblen              ; quit if end of input
.963f		f0 09		beq $964a	                beq _found_char
.9641		b1 0c		lda ($0c),y	                lda (cib),y
.9643		d5 00		cmp $00,x	                cmp 0,x                 ; ASCII of delimiter
.9645		d0 03		bne $964a	                bne _found_char
.9647		c8		iny		                iny
.9648		80 f3		bra $963d	                bra _loop
.964a						_found_char:
.964a		84 10		sty $10		                sty toin
.964c		20 ac 8d	jsr $8dac	                jsr xt_parse            ; Returns ( addr u )
.964f		b5 00		lda $00,x	                lda 0,x
.9651		92 00		sta ($00)	                sta (cp)                ; Save length of string
.9653		48		pha		                pha                     ; Keep copy of length for later
.9654		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( addr u u )
.9657		a5 00		lda $00		                lda cp
.9659		18		clc		                clc
.965a		69 01		adc #$01	                adc #1
.965c		95 02		sta $02,x	                sta 2,x                 ; LSB of CP
.965e		a5 01		lda $01		                lda cp+1
.9660		69 00		adc #$00	                adc #0
.9662		95 03		sta $03,x	                sta 3,x                 ; ( addr cp+1 u )
.9664		20 00 8c	jsr $8c00	                jsr xt_move
.9667		ca		dex		                dex
.9668		ca		dex		                dex
.9669		a5 00		lda $00		                lda cp
.966b		95 00		sta $00,x	                sta 0,x
.966d		a5 01		lda $01		                lda cp+1
.966f		95 01		sta $01,x	                sta 1,x
.9671		68		pla		                pla                     ; length of string
.9672		18		clc		                clc
.9673		65 00		adc $00		                adc cp
.9675		85 00		sta $00		                sta cp
.9677		90 02		bcc $967b	                bcc z_word
.9679		e6 01		inc $01		                inc cp+1
.967b		60		rts		z_word:         rts
.967c						xt_xor:
.967c		20 b1 d7	jsr $d7b1	                jsr underflow_2
.967f		b5 00		lda $00,x	                lda 0,x
.9681		55 02		eor $02,x	                eor 2,x
.9683		95 02		sta $02,x	                sta 2,x
.9685		b5 01		lda $01,x	                lda 1,x
.9687		55 03		eor $03,x	                eor 3,x
.9689		95 03		sta $03,x	                sta 3,x
.968b		e8		inx		                inx
.968c		e8		inx		                inx
.968d		60		rts		z_xor:          rts
.968e						xt_zero_equal:
.968e		20 ac d7	jsr $d7ac	                jsr underflow_1
.9691		b5 00		lda $00,x	                lda 0,x
.9693		15 01		ora $01,x	                ora 1,x
.9695		f0 02		beq $9699	                beq _zero       ; if 0, A is inverse of the TRUE (-1) we want
.9697		a9 ff		lda #$ff	                lda #$FF        ; else set A inverse of the FALSE (0) we want
.9699						_zero:
.9699		49 ff		eor #$ff	                eor #$FF        ; now just invert:
.969b		95 00		sta $00,x	                sta 0,x
.969d		95 01		sta $01,x	                sta 1,x
.969f		60		rts		z_zero_equal:   rts
.96a0						xt_zero_greater:
.96a0		20 ac d7	jsr $d7ac	                jsr underflow_1
.96a3		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS is negative)
.96a5		b5 01		lda $01,x	                lda 1,x         ; MSB
.96a7		30 05		bmi $96ae	                bmi _done       ; TOS is negative, keep FLASE
.96a9		15 00		ora $00,x	                ora 0,x
.96ab		f0 01		beq $96ae	                beq _done       ; TOS is zero, keep FALSE
.96ad		88		dey		                dey             ; TOS is postive, make true
.96ae						_done:
.96ae		98		tya		                tya
.96af		95 00		sta $00,x	                sta 0,x
.96b1		95 01		sta $01,x	                sta 1,x
.96b3		60		rts		z_zero_greater: rts
.96b4						xt_zero_less:
.96b4		20 ac d7	jsr $d7ac	                jsr underflow_1
.96b7		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS positive)
.96b9		b5 01		lda $01,x	                lda 1,x         ; MSB
.96bb		10 01		bpl $96be	                bpl _done       ; TOS is positive, so keep FALSE
.96bd		88		dey		                dey             ; TOS is negative, make TRUE
.96be						_done:
.96be		98		tya		                tya
.96bf		95 00		sta $00,x	                sta 0,x
.96c1		95 01		sta $01,x	                sta 1,x
.96c3		60		rts		z_zero_less:    rts
.96c4						xt_zero_unequal:
.96c4		20 ac d7	jsr $d7ac	                jsr underflow_1
.96c7		b5 00		lda $00,x	                lda 0,x
.96c9		15 01		ora $01,x	                ora 1,x
.96cb		f0 02		beq $96cf	                beq _zero
.96cd		a9 ff		lda #$ff	                lda #$FF
.96cf						_zero:
.96cf		95 00		sta $00,x	                sta 0,x
.96d1		95 01		sta $01,x	                sta 1,x
.96d3		60		rts		z_zero_unequal: rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/compile.asm

.96d4						xt_compile_comma:
.96d4		20 ac d7	jsr $d7ac	                jsr underflow_1
.96d7		20 a0 86	jsr $86a0	                jsr xt_dup              ; keep an unadjusted copy of xt
.96da		20 a0 86	jsr $86a0	                jsr xt_dup              ; plus one to convert to nt
.96dd		20 ca 9b	jsr $9bca	                jsr xt_int_to_name
.96e0		b5 00		lda $00,x	                lda 0,x
.96e2		15 01		ora $01,x	                ora 1,x
.96e4		f0 52		beq $9738	                beq cmpl_as_call        ; No nt so unknown size; must compile as a JSR
.96e6		20 a0 86	jsr $86a0	                jsr xt_dup
.96e9		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; status is at nt+1
.96ec		a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.96ee		e8		inx		                inx                     ; drop pointer
.96ef		e8		inx		                inx
.96f0		85 29		sta $29		                sta tmp3                ; keep copy of status byte
.96f2		29 08		and #$08	                and #NN
.96f4		d0 42		bne $9738	                bne cmpl_as_call        ; never native
.96f6		20 f2 9d	jsr $9df2	                jsr xt_wordsize
.96f9		20 59 97	jsr $9759	                jsr check_strip_table
.96fc		a5 29		lda $29		                lda tmp3
.96fe		29 10		and #$10	                and #UF
.9700		f0 1f		beq $9721	                beq _check_limit
.9702		a0 02		ldy #$02	                ldy #uf_strip_offset
.9704		b1 08		lda ($08),y	                lda (up),y
.9706		c8		iny		                iny
.9707		11 08		ora ($08),y	                ora (up),y
.9709		f0 16		beq $9721	                beq _check_limit
.970b		18		clc		                clc
.970c		b5 02		lda $02,x	                lda 2,x
.970e		69 03		adc #$03	                adc #3
.9710		95 02		sta $02,x	                sta 2,x
.9712		90 02		bcc $9716	                bcc +
.9714		f6 03		inc $03,x	                inc 3,x                  ; we just care about the carry
.9716						+
.9716		38		sec		                sec
.9717		b5 00		lda $00,x	                lda 0,x
.9719		e9 03		sbc #$03	                sbc #3
.971b		95 00		sta $00,x	                sta 0,x
.971d		b0 02		bcs $9721	                bcs +
.971f		d6 01		dec $01,x	                dec 1,x                  ; we just care about the borrow
.9721						+
.9721						_check_limit:
.9721		a5 29		lda $29		                lda tmp3
.9723		29 02		and #$02	                and #AN                 ; check Always Native (AN) bit
.9725		d0 1e		bne $9745	                bne cmpl_inline         ; always natively compile
.9727						cmpl_by_limit:
.9727		a0 01		ldy #$01	                ldy #nc_limit_offset+1
.9729		b5 01		lda $01,x	                lda 1,x                 ; MSB of word size
.972b		d1 08		cmp ($08),y	                cmp (up),y              ; user-defined limit MSB
.972d		90 16		bcc $9745	                bcc cmpl_inline         ; borrow (C=0) means size < limit
.972f		d0 07		bne $9738	                bne cmpl_as_call        ; else non-zero means size > limit
.9731		88		dey		                dey
.9732		b1 08		lda ($08),y	                lda (up),y              ; user-defined limit LSB
.9734		d5 00		cmp $00,x	                cmp 0,x
.9736		b0 0d		bcs $9745	                bcs cmpl_inline         ; not bigger, so good to go
.9738						cmpl_as_call:
.9738		20 bf 93	jsr $93bf	                jsr xt_two_drop         ; either way 2drop leaves original xt
.973b		a9 20		lda #$20	                lda #OpJSR
.973d		20 ac 97	jsr $97ac	                jsr cmpl_a
.9740		20 cd 83	jsr $83cd	                jsr xt_comma
.9743		38		sec		                sec
.9744		60		rts		                rts
.9745						cmpl_inline:
.9745		20 1b 89	jsr $891b	                jsr xt_here
.9748		20 4a 92	jsr $924a	                jsr xt_swap
.974b		20 a0 86	jsr $86a0	                jsr xt_dup
.974e		20 27 82	jsr $8227	                jsr xt_allot            ; allocate space for the word
.9751		20 00 8c	jsr $8c00	                jsr xt_move
.9754		20 9a 86	jsr $869a	                jsr xt_drop             ; drop original xt
.9757		18		clc		                clc
.9758		60		rts		                rts
.9759						check_strip_table:
.9759		a0 00		ldy #$00	                ldy #0
.975b						_strip_loop:
.975b		b9 8d 97	lda $978d,y	                lda _strip_table,y       ; LSB of first word
.975e		d5 02		cmp $02,x	                cmp 2,x                 ; LSB of xt
.9760		d0 07		bne $9769	                bne _next_entry
.9762		b9 8e 97	lda $978e,y	                lda _strip_table+1,y
.9765		d5 03		cmp $03,x	                cmp 3,x
.9767		f0 07		beq $9770	                beq _found_entry
.9769						_next_entry:
.9769		c8		iny		                iny
.976a		c8		iny		                iny
.976b		c0 0a		cpy #$0a	                cpy #_strip_table_size
.976d		d0 ec		bne $975b	                bne _strip_loop
.976f		60		rts		                rts
.9770						_found_entry:
.9770		98		tya		                tya
.9771		4a		lsr a		                lsr
.9772		a8		tay		                tay
.9773		b9 97 97	lda $9797,y	                lda _strip_size,y
.9776		48		pha		                pha                     ; save a copy
.9777		18		clc		                clc
.9778		75 02		adc $02,x	                adc 2,x
.977a		95 02		sta $02,x	                sta 2,x
.977c		90 02		bcc $9780	                bcc +
.977e		f6 03		inc $03,x	                inc 3,x                 ; we just care about the carry
.9780						+
.9780		68		pla		                pla
.9781		0a		asl a		                asl a                   ; Double to cut off both top and bottom.
.9782		f5 00		sbc $00,x	                sbc 0,x
.9784		49 ff		eor #$ff	                eor #$ff
.9786		95 00		sta $00,x	                sta 0,x
.9788		90 02		bcc $978c	                bcc +                   ; note inverted carry check
.978a		d6 01		dec $01,x	                dec 1,x                 ; we just care about the borrow
.978c						+
.978c		60		rts		                rts
.978d						_strip_table:
>978d		ee 8e d9 8e 88 93		                .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
>9793		b1 94 37 94			                .word xt_two_to_r, xt_two_r_from        ; 2>R, 2R>
=10						_strip_table_size = * - _strip_table
.9797						_strip_size:
>9797		04 04 04			                .byte 4, 4, 4                           ; R>, R@, >R
>979a		06 06				                .byte 6, 6                              ; 2>R, 2R>
.979c						z_compile_comma:
.979c						cmpl_subroutine:
.979c		48		pha		                pha             ; save LSB of address
.979d		a9 20		lda #$20	                lda #OpJSR      ; load opcode for JSR
.979f		80 03		bra $97a4	                bra +
.97a1						cmpl_jump:
.97a1		48		pha		                pha             ; save LSB of address
.97a2		a9 4c		lda #$4c	                lda #OpJMP      ; load opcode for JMP, fall thru
.97a4						+
.97a4		20 ac 97	jsr $97ac	                jsr cmpl_a      ; compile opcode
.97a7		68		pla		                pla             ; retrieve address LSB; fall thru to cmpl_word
.97a8						cmpl_word:
.97a8		20 ac 97	jsr $97ac	                jsr cmpl_a      ; compile LSB of address
.97ab		98		tya		                tya             ; fall thru for MSB
.97ac						cmpl_a:
.97ac		92 00		sta ($00)	                sta (cp)
.97ae		e6 00		inc $00		                inc cp
.97b0		d0 02		bne $97b4	                bne _done
.97b2		e6 01		inc $01		                inc cp+1
.97b4						_done:
.97b4		60		rts		                rts
.97b5						cmpl_jump_tos:
.97b5		a9 4c		lda #$4c	                lda #OpJMP
.97b7		20 ac 97	jsr $97ac	                jsr cmpl_a
.97ba		4c cd 83	jmp $83cd	                jmp xt_comma
.97bd						cmpl_jump_later:
.97bd		a9 4c		lda #$4c	                lda #OpJMP
.97bf		20 ac 97	jsr $97ac	                jsr cmpl_a
.97c2		20 1b 89	jsr $891b	                jsr xt_here
.97c5		80 e1		bra $97a8	                bra cmpl_word
.97c7						check_nc_limit:
.97c7		48		pha		                pha
.97c8		38		sec		                sec
.97c9		a0 01		ldy #$01	                ldy #nc_limit_offset+1
.97cb		b1 08		lda ($08),y	                lda (up),y              ; if MSB non zero we're good, leave with C=0
.97cd		f0 01		beq $97d0	                beq +
.97cf		18		clc		                clc
.97d0						+
.97d0		68		pla		                pla
.97d1		90 05		bcc $97d8	                bcc _done
.97d3		3a		dec a		                dea                     ; simplify test to A-1 < nc-limit
.97d4		88		dey		                dey
.97d5		d1 08		cmp ($08),y	                cmp (up),y              ; A-1 < LSB leaves C=0, else C=1
.97d7		1a		inc a		                ina                     ; restore A, preserves carry
.97d8						_done:
.97d8		60		rts		                rts
.97d9						cmpl_0branch_later:
.97d9		20 13 9e	jsr $9e13	                jsr xt_zero             ; dummy placeholder, which forces long jmp in native version
.97dc		20 ee 97	jsr $97ee	                jsr cmpl_0branch_tos    ; generate native or subroutine branch code
.97df		20 1b 89	jsr $891b	                jsr xt_here             ; either way the target address is two bytes before here
.97e2		38		sec		                sec
.97e3		b5 00		lda $00,x	                lda 0,x
.97e5		e9 02		sbc #$02	                sbc #2
.97e7		95 00		sta $00,x	                sta 0,x
.97e9		b0 02		bcs $97ed	                bcs +
.97eb		d6 01		dec $01,x	                dec 1,x
.97ed						+
.97ed		60		rts		                rts
.97ee						cmpl_0branch_tos:
.97ee		a9 0b		lda #$0b	                lda #ztest_runtime_size+5       ; typical size of inline form
.97f0		20 c7 97	jsr $97c7	                jsr check_nc_limit              ; returns C=0 if we should native compile
.97f3		90 0a		bcc $97ff	                bcc _inline
.97f5		a0 98		ldy #$98	                ldy #>zero_branch_runtime
.97f7		a9 50		lda #$50	                lda #<zero_branch_runtime
.97f9		20 9c 97	jsr $979c	                jsr cmpl_subroutine             ; call the 0branch runtime
.97fc		4c cd 83	jmp $83cd	                jmp xt_comma                    ; add the payload and return
.97ff						_inline:
.97ff		a0 00		ldy #$00	                ldy #0
.9801						-
.9801		b9 50 98	lda $9850,y	                lda ztest_runtime,y
.9804		20 ac 97	jsr $97ac	                jsr cmpl_a
.9807		c8		iny		                iny
.9808		c0 06		cpy #$06	                cpy #ztest_runtime_size
.980a		d0 f5		bne $9801	                bne -
.980c		b5 00		lda $00,x	                lda 0,x
.980e		15 01		ora $01,x	                ora 1,x
.9810		f0 31		beq $9843	                beq _long               ; always use the long form if target is 0
.9812		20 a0 86	jsr $86a0	                jsr xt_dup
.9815		20 1b 89	jsr $891b	                jsr xt_here
.9818		18		clc		                clc
.9819		a9 02		lda #$02	                lda #2
.981b		75 00		adc $00,x	                adc 0,x
.981d		95 00		sta $00,x	                sta 0,x
.981f		90 02		bcc $9823	                bcc +
.9821		f6 01		inc $01,x	                inc 1,x
.9823						+
.9823		20 e4 8b	jsr $8be4	                jsr xt_minus
.9826		e8		inx		                inx             ; pre-drop offset and use wraparound indexing to preserve flags
.9827		e8		inx		                inx
.9828		b5 ff		lda $ff,x	                lda $ff,x
.982a		a8		tay		                tay             ; Y=MSB of offset
.982b		b5 fe		lda $fe,x	                lda $fe,x       ; A=LSB, setting N flag to bit 7
.982d		30 04		bmi $9833	                bmi _minus
.982f		c0 00		cpy #$00	                cpy #0          ; if LSB is positive we need MSB = 0
.9831		80 02		bra $9835	                bra +
.9833		c0 ff		cpy #$ff	_minus:         cpy #$ff        ; if LSB is negative we need MSB = ff
.9835		d0 0c		bne $9843	+               bne _long
.9837		a9 f0		lda #$f0	                lda #OpBEQ
.9839		20 ac 97	jsr $97ac	                jsr cmpl_a
.983c		b5 fe		lda $fe,x	                lda $fe,x
.983e		e8		inx		                inx             ; drop the original address we used to calc offset
.983f		e8		inx		                inx
.9840		4c ac 97	jmp $97ac	                jmp cmpl_a
.9843						_long:
.9843		a9 d0		lda #$d0	                lda #OpBNE
.9845		20 ac 97	jsr $97ac	                jsr cmpl_a
.9848		a9 03		lda #$03	                lda #3
.984a		20 ac 97	jsr $97ac	                jsr cmpl_a
.984d		4c b5 97	jmp $97b5	                jmp cmpl_jump_tos
.9850						zero_branch_runtime:
.9850						ztest_runtime:
.9850		e8		inx		                inx
.9851		e8		inx		                inx
.9852		b5 fe		lda $fe,x	                lda $FE,x           ; wraparound so inx doesn't wreck Z status
.9854		15 ff		ora $ff,x	                ora $FF,x
=6						ztest_runtime_size = * - ztest_runtime
.9856						zbranch_runtime:
.9856		7a		ply		                ply
.9857		84 25		sty $25		                sty tmp1
.9859		7a		ply		                ply
.985a		84 26		sty $26		                sty tmp1+1
.985c		a8		tay		                tay             ; test if A = 0 which tells us whether to branch
.985d		f0 0d		beq $986c	                beq _branch
.985f		18		clc		                clc
.9860		a5 25		lda $25		                lda tmp1        ; LSB
.9862		69 03		adc #$03	                adc #3          ; skip two bytes plus the extra for jsr/rts behavior
.9864		85 25		sta $25		                sta tmp1
.9866		90 11		bcc $9879	                bcc _jmp
.9868		e6 26		inc $26		                inc tmp1+1
.986a		80 0d		bra $9879	                bra _jmp
.986c						_branch:
.986c		a0 01		ldy #$01	                ldy #1
.986e		b1 25		lda ($25),y	                lda (tmp1),y
.9870		48		pha		                pha                     ; stash the LSB until we've read the MSB too
.9871		c8		iny		                iny
.9872		b1 25		lda ($25),y	                lda (tmp1),y
.9874		85 26		sta $26		                sta tmp1+1              ; update tmp1 with our branch target
.9876		68		pla		                pla
.9877		85 25		sta $25		                sta tmp1
.9879						_jmp:
.9879		6c 25 00	jmp ($0025)	                jmp (tmp1)

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/tools.asm

.987c						xt_bye:
.987c		4c 31 f0	jmp $f031	                jmp kernel_bye
.987f						z_bye:
.987f						xt_dot_s:
.987f		20 52 85	jsr $8552	                jsr xt_depth    ; ( -- u )
.9882		a9 3c		lda #$3c	                lda #'<'
.9884		20 c5 86	jsr $86c5	                jsr emit_a
.9887		b5 00		lda $00,x	                lda 0,x
.9889		48		pha		                pha
.988a		ca		dex		                dex             ; DUP
.988b		ca		dex		                dex
.988c		95 00		sta $00,x	                sta 0,x
.988e		74 01		stz $01,x	                stz 1,x
.9890		20 19 d8	jsr $d819	                jsr print_u
.9893		a9 3e		lda #$3e	                lda #'>'
.9895		20 c5 86	jsr $86c5	                jsr emit_a
.9898		a9 20		lda #$20	                lda #AscSP      ; ASCII for SPACE
.989a		20 c5 86	jsr $86c5	                jsr emit_a
.989d		e8		inx		                inx
.989e		e8		inx		                inx
.989f		e0 78		cpx #$78	                cpx #dsp0
.98a1		f0 1e		beq $98c1	                beq _done
.98a3		7a		ply		                ply
.98a4		a9 77		lda #$77	                lda #dsp0-1     ; go up one to avoid garbage
.98a6		85 29		sta $29		                sta tmp3
.98a8		64 2a		stz $2a		                stz tmp3+1      ; must be zero page on the 65c02
.98aa						_loop:
.98aa		ca		dex		                dex
.98ab		ca		dex		                dex
.98ac		b2 29		lda ($29)	                lda (tmp3)
.98ae		95 01		sta $01,x	                sta 1,x
.98b0		c6 29		dec $29		                dec tmp3
.98b2		b2 29		lda ($29)	                lda (tmp3)
.98b4		95 00		sta $00,x	                sta 0,x
.98b6		c6 29		dec $29		                dec tmp3
.98b8		5a		phy		                phy
.98b9		20 30 86	jsr $8630	                jsr xt_dot
.98bc		7a		ply		                ply
.98bd		88		dey		                dey
.98be		d0 ea		bne $98aa	                bne _loop
.98c0		48		pha		                pha             ; dummy to balance stack
.98c1						_done:
.98c1		68		pla		                pla
.98c2		60		rts		z_dot_s:        rts
.98c3						xt_dump:
.98c3		20 b1 d7	jsr $d7b1	                jsr underflow_2
.98c6						_row:
.98c6		a0 10		ldy #$10	                ldy #16
.98c8		64 27		stz $27		                stz tmp2
.98ca		20 3a 84	jsr $843a	                jsr xt_cr
.98cd		b5 03		lda $03,x	                lda 3,x
.98cf		20 77 d6	jsr $d677	                jsr byte_to_ascii
.98d2		b5 02		lda $02,x	                lda 2,x
.98d4		20 77 d6	jsr $d677	                jsr byte_to_ascii
.98d7		20 c5 91	jsr $91c5	                jsr xt_space
.98da		20 c5 91	jsr $91c5	                jsr xt_space
.98dd						_loop:
.98dd		b5 00		lda $00,x	                lda 0,x
.98df		15 01		ora $01,x	                ora 1,x
.98e1		f0 39		beq $991c	                beq _all_printed
.98e3		a1 02		lda ($02,x)	                lda (2,x)
.98e5		48		pha		                pha                     ; byte_to_ascii destroys A
.98e6		20 77 d6	jsr $d677	                jsr byte_to_ascii
.98e9		20 c5 91	jsr $91c5	                jsr xt_space
.98ec		68		pla		                pla
.98ed		20 92 d7	jsr $d792	                jsr is_printable
.98f0		b0 02		bcs $98f4	                bcs _printable
.98f2		a9 2e		lda #$2e	                lda #'.'                 ; Print dot if not printable
.98f4						_printable:
.98f4		5a		phy		                phy                     ; save counter
.98f5		a4 27		ldy $27		                ldy tmp2
.98f7		91 00		sta ($00),y	                sta (cp),y
.98f9		e6 27		inc $27		                inc tmp2
.98fb		7a		ply		                ply
.98fc		c0 09		cpy #$09	                cpy #9
.98fe		d0 03		bne $9903	                bne _next_char
.9900		20 c5 91	jsr $91c5	                jsr xt_space
.9903						_next_char:
.9903		f6 02		inc $02,x	                inc 2,x
.9905		d0 02		bne $9909	                bne _counter
.9907		f6 03		inc $03,x	                inc 3,x
.9909						_counter:
.9909		b5 00		lda $00,x	                lda 0,x
.990b		d0 02		bne $990f	                bne +
.990d		d6 01		dec $01,x	                dec 1,x
.990f						+
.990f		d6 00		dec $00,x	                dec 0,x
.9911		88		dey		                dey
.9912		d0 c9		bne $98dd	                bne _loop               ; next byte
.9914		20 c5 91	jsr $91c5	                jsr xt_space
.9917		20 2a 99	jsr $992a	                jsr dump_print_ascii
.991a		80 aa		bra $98c6	                bra _row                ; new row
.991c						_all_printed:
.991c		a5 27		lda $27		                lda tmp2
.991e		f0 06		beq $9926	                beq _done
.9920		20 c5 91	jsr $91c5	                jsr xt_space
.9923		20 2a 99	jsr $992a	                jsr dump_print_ascii
.9926						_done:
.9926		20 bf 93	jsr $93bf	                jsr xt_two_drop         ; one byte less than 4x INX
.9929		60		rts		z_dump:         rts
.992a						dump_print_ascii:
.992a		a0 00		ldy #$00	                ldy #0
.992c						_ascii_loop:
.992c		b1 00		lda ($00),y	                lda (cp),y
.992e		20 c5 86	jsr $86c5	                jsr emit_a
.9931		c8		iny		                iny
.9932		c0 08		cpy #$08	                cpy #8
.9934		d0 03		bne $9939	                bne +
.9936		20 c5 91	jsr $91c5	                jsr xt_space
.9939						+
.9939		c6 27		dec $27		                dec tmp2
.993b		d0 ef		bne $992c	                bne _ascii_loop
.993d		60		rts		                rts
.993e						xt_question:
.993e		20 1a 88	jsr $881a	                jsr xt_fetch
.9941		20 30 86	jsr $8630	                jsr xt_dot
.9944		60		rts		z_question:     rts
.9945						xt_see:
.9945		20 51 8d	jsr $8d51	                jsr xt_parse_name       ; ( addr u )
.9948		20 12 9b	jsr $9b12	                jsr xt_find_name        ; ( nt | 0 )
.994b		b5 00		lda $00,x	                lda 0,x
.994d		15 01		ora $01,x	                ora 1,x
.994f		d0 05		bne $9956	                bne +
.9951		a9 05		lda #$05	                lda #err_noname
.9953		4c c2 d7	jmp $d7c2	                jmp error
.9956						+
.9956		20 3a 84	jsr $843a	                jsr xt_cr
.9959		a5 18		lda $18		                lda base
.995b		48		pha		                pha
.995c		20 26 89	jsr $8926	                jsr xt_hex
.995f		a9 09		lda #$09	                lda #str_see_nt
.9961		20 e8 d7	jsr $d7e8	                jsr print_string_no_lf
.9964		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt nt )
.9967		20 fc 94	jsr $94fc	                jsr xt_u_dot
.996a		20 c5 91	jsr $91c5	                jsr xt_space            ; ( nt )
.996d		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt nt )
.9970		20 50 9c	jsr $9c50	                jsr xt_name_to_int      ; ( nt xt )
.9973		a9 0a		lda #$0a	                lda #str_see_xt
.9975		20 e8 d7	jsr $d7e8	                jsr print_string_no_lf
.9978		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt xt xt )
.997b		20 fc 94	jsr $94fc	                jsr xt_u_dot
.997e		20 3a 84	jsr $843a	                jsr xt_cr               ; ( nt xt )
.9981		a9 08		lda #$08	                lda #str_see_flags
.9983		20 e8 d7	jsr $d7e8	                jsr print_string_no_lf
.9986		20 05 8d	jsr $8d05	                jsr xt_over             ; ( nt xt nt )
.9989		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; ( nt xt nt+1 )
.998c		20 1a 88	jsr $881a	                jsr xt_fetch            ; ( nt xt flags )
.998f		b5 00		lda $00,x	                lda 0,x
.9991		a0 06		ldy #$06	                ldy #6                  ; Not all bits are used
.9993						_flag_loop:
.9993		48		pha		                pha
.9994		29 01		and #$01	                and #%00000001
.9996		18		clc		                clc
.9997		69 30		adc #$30	                adc #'0'
.9999		20 c5 86	jsr $86c5	                jsr emit_a
.999c		20 c5 91	jsr $91c5	                jsr xt_space
.999f		68		pla		                pla
.99a0		6a		ror a		                ror                     ; Next flag
.99a1		88		dey		                dey
.99a2		d0 ef		bne $9993	                bne _flag_loop
.99a4		20 3a 84	jsr $843a	                jsr xt_cr
.99a7		e8		inx		                inx
.99a8		e8		inx		                inx                     ; ( nt xt )
.99a9		a9 0b		lda #$0b	                lda #str_see_size
.99ab		20 e8 d7	jsr $d7e8	                jsr print_string_no_lf
.99ae		20 4a 92	jsr $924a	                jsr xt_swap             ; ( xt nt )
.99b1		20 f2 9d	jsr $9df2	                jsr xt_wordsize         ; ( xt u )
.99b4		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
.99b7		20 0a 85	jsr $850a	                jsr xt_decimal
.99ba		20 fc 94	jsr $94fc	                jsr xt_u_dot            ; ( xt u )
.99bd		20 26 89	jsr $8926	                jsr xt_hex
.99c0		20 3a 84	jsr $843a	                jsr xt_cr
.99c3		20 c7 93	jsr $93c7	                jsr xt_two_dup          ; ( xt u xt u )
.99c6		20 c3 98	jsr $98c3	                jsr xt_dump
.99c9		20 3a 84	jsr $843a	                jsr xt_cr
.99cc		20 c0 a1	jsr $a1c0	                jsr xt_disasm
.99cf		68		pla		                pla
.99d0		85 18		sta $18		                sta base
.99d2		60		rts		z_see:          rts
.99d3						xt_words:
.99d3		20 3a 84	jsr $843a	                jsr xt_cr
.99d6		a9 00		lda #$00	                lda #0
.99d8		48		pha		                pha
.99d9		ca		dex		                dex                     ; Make room on the stack for
.99da		ca		dex		                dex                     ; a dictionary pointer.
.99db		64 29		stz $29		                stz tmp3                ; Start at the beginning of
.99dd						_wordlist_loop:
.99dd		a0 22		ldy #$22	                ldy #num_order_offset   ; Check against byte variable #ORDER.
.99df		a5 29		lda $29		                lda tmp3
.99e1		d1 08		cmp ($08),y	                cmp (up),y              ; See if we are done.
.99e3		d0 02		bne $99e7	                bne _have_wordlist
.99e5		80 45		bra $9a2c	                bra _words_done
.99e7						_have_wordlist:
.99e7		18		clc		                clc                     ; Index into byte array SEARCH-ORDER.
.99e8		69 23		adc #$23	                adc #search_order_offset
.99ea		a8		tay		                tay
.99eb		b1 08		lda ($08),y	                lda (up),y              ; Get the index into array WORDLISTS
.99ed		0a		asl a		                asl                     ; Turn offset into cells offset.
.99ee		18		clc		                clc
.99ef		69 0a		adc #$0a	                adc #wordlists_offset
.99f1		a8		tay		                tay
.99f2		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.99f4		95 00		sta $00,x	                sta 0,x                 ; on the stack. ( nt )
.99f6		c8		iny		                iny
.99f7		b1 08		lda ($08),y	                lda (up),y
.99f9		95 01		sta $01,x	                sta 1,x
.99fb						_loop:
.99fb		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt nt )
.99fe		20 6d 9c	jsr $9c6d	                jsr xt_name_to_string   ; ( nt addr u )
.9a01		68		pla		                pla
.9a02		18		clc		                clc
.9a03		75 00		adc $00,x	                adc 0,x
.9a05		1a		inc a		                ina                     ; don't forget the space between words
.9a06		c9 4f		cmp #$4f	                cmp #MAX_LINE_LENGTH    ; usually 79
.9a08		90 06		bcc $9a10	                bcc +
.9a0a		20 3a 84	jsr $843a	                jsr xt_cr
.9a0d		b5 00		lda $00,x	                lda 0,x                 ; After going to next line, start
.9a0f		1a		inc a		                ina                     ; with length of this word.
.9a10						+
.9a10		48		pha		                pha
.9a11		20 d1 94	jsr $94d1	                jsr xt_type             ; ( nt )
.9a14		a9 20		lda #$20	                lda #AscSP
.9a16		20 c5 86	jsr $86c5	                jsr emit_a
.9a19		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+
.9a1c		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+
.9a1f		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( nt+1 )
.9a22		b5 00		lda $00,x	                lda 0,x
.9a24		15 01		ora $01,x	                ora 1,x
.9a26		d0 d3		bne $99fb	                bne _loop
.9a28		e6 29		inc $29		                inc tmp3
.9a2a		80 b1		bra $99dd	                bra _wordlist_loop
.9a2c						_words_done:
.9a2c		68		pla		                pla                     ; dump counter
.9a2d		e8		inx		                inx
.9a2e		e8		inx		                inx
.9a2f		60		rts		z_words:        rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/tali.asm

.9a30						xt_allow_native:
.9a30		20 03 d7	jsr $d703	                jsr current_to_dp
.9a33		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9a35		b1 02		lda ($02),y	                lda (dp),y
.9a37		29 f5		and #$f5	                and #$FF-NN-AN  ; AN and NN flag is clear.
.9a39		91 02		sta ($02),y	                sta (dp),y
.9a3b						z_allow_native:
.9a3b		60		rts		                rts
.9a3c						xt_always_native:
.9a3c		20 03 d7	jsr $d703	                jsr current_to_dp
.9a3f		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9a41		b1 02		lda ($02),y	                lda (dp),y
.9a43		09 02		ora #$02	                ora #AN         ; Make sure AN flag is set
.9a45		29 f7		and #$f7	                and #$FF-NN     ; and NN flag is clear.
.9a47		91 02		sta ($02),y	                sta (dp),y
.9a49						z_always_native:
.9a49		60		rts		                rts
.9a4a						xt_bell:
.9a4a		a9 07		lda #$07	                lda #7          ; ASCII value for BELl
.9a4c		20 c5 86	jsr $86c5	                jsr emit_a
.9a4f		60		rts		z_bell:         rts
.9a50						xt_bounds:
.9a50		20 b1 d7	jsr $d7b1	                jsr underflow_2
.9a53		18		clc		                clc
.9a54		b5 00		lda $00,x	                lda 0,x                 ; LSB u
.9a56		b4 02		ldy $02,x	                ldy 2,x                 ; LSB addr
.9a58		75 02		adc $02,x	                adc 2,x
.9a5a		95 02		sta $02,x	                sta 2,x                 ; LSB addr+u
.9a5c		94 00		sty $00,x	                sty 0,x
.9a5e		b5 01		lda $01,x	                lda 1,x                 ; MSB u
.9a60		b4 03		ldy $03,x	                ldy 3,x                 ; MSB addr
.9a62		75 03		adc $03,x	                adc 3,x
.9a64		95 03		sta $03,x	                sta 3,x                 ; MSB addr+u
.9a66		94 01		sty $01,x	                sty 1,x
.9a68		60		rts		z_bounds:       rts
.9a69						xt_cleave:
.9a69		20 b1 d7	jsr $d7b1	                jsr underflow_2
.9a6c		20 3f a0	jsr $a03f	                jsr xt_minus_leading    ; -LEADING ( addr u )
.9a6f		20 b4 9b	jsr $9bb4	                jsr xt_input_to_r       ; save old imput state
.9a72		b5 00		lda $00,x	                lda 0,x         ; u is new ciblen
.9a74		85 0e		sta $0e		                sta ciblen
.9a76		b5 01		lda $01,x	                lda 1,x
.9a78		85 0f		sta $0f		                sta ciblen+1
.9a7a		b5 02		lda $02,x	                lda 2,x         ; addr is new cib
.9a7c		85 0c		sta $0c		                sta cib
.9a7e		b5 03		lda $03,x	                lda 3,x
.9a80		85 0d		sta $0d		                sta cib+1
.9a82		64 10		stz $10		                stz toin        ; >IN pointer is zero
.9a84		64 11		stz $11		                stz toin+1
.9a86		20 51 8d	jsr $8d51	                jsr xt_parse_name       ; ( addr u addr-s u-s )
.9a89		b5 00		lda $00,x	                lda 0,x
.9a8b		15 01		ora $01,x	                ora 1,x
.9a8d		f0 23		beq $9ab2	                beq _done
.9a8f		b5 04		lda $04,x	                lda 4,x         ; LSB of original u
.9a91		38		sec		                sec
.9a92		f5 00		sbc $00,x	                sbc 0,x
.9a94		95 04		sta $04,x	                sta 4,x
.9a96		b5 05		lda $05,x	                lda 5,x         ; MSB of original u
.9a98		f5 01		sbc $01,x	                sbc 1,x
.9a9a		95 05		sta $05,x	                sta 5,x
.9a9c		b5 06		lda $06,x	                lda 6,x         ; LSB of original addr
.9a9e		18		clc		                clc
.9a9f		75 00		adc $00,x	                adc 0,x
.9aa1		95 06		sta $06,x	                sta 6,x
.9aa3		b5 07		lda $07,x	                lda 7,x         ; MSB of original addr
.9aa5		75 01		adc $01,x	                adc 1,x
.9aa7		95 07		sta $07,x	                sta 7,x
.9aa9		20 8d 94	jsr $948d	                jsr xt_two_swap         ; ( addr-s u-s addr u )
.9aac		20 3f a0	jsr $a03f	                jsr xt_minus_leading
.9aaf		20 8d 94	jsr $948d	                jsr xt_two_swap         ; ( addr u addr-s u-s )
.9ab2						_done:
.9ab2		20 c1 9d	jsr $9dc1	                jsr xt_r_to_input
.9ab5		60		rts		z_cleave:       rts
.9ab6						xt_digit_question:
.9ab6		20 ac d7	jsr $d7ac	                jsr underflow_1
.9ab9		ca		dex		                dex
.9aba		ca		dex		                dex
.9abb		74 00		stz $00,x	                stz 0,x                 ; default flag is failure
.9abd		74 01		stz $01,x	                stz 1,x
.9abf		74 03		stz $03,x	                stz 3,x                 ; paranoid
.9ac1		b5 02		lda $02,x	                lda 2,x
.9ac3		c9 30		cmp #$30	                cmp #'0'
.9ac5		90 23		bcc $9aea	                bcc _done               ; failure flag already set
.9ac7		c9 3a		cmp #$3a	                cmp #'9'+1               ; this is actually ":"
.9ac9		90 12		bcc $9add	                bcc _checkbase
.9acb		c9 41		cmp #$41	                cmp #'A'
.9acd		90 1b		bcc $9aea	                bcc _done               ; failure flag is already set
.9acf		c9 61		cmp #$61	                cmp #'a'
.9ad1		90 07		bcc $9ada	                bcc _case_done          ; not lower case, too low
.9ad3		c9 7b		cmp #$7b	                cmp #'z'+1
.9ad5		b0 03		bcs $9ada	                bcs _case_done          ; not lower case, too high
.9ad7		18		clc		                clc                     ; just right
.9ad8		69 e0		adc #$e0	                adc #$E0                ; offset to upper case (wraps)
.9ada						_case_done:
.9ada		38		sec		                sec
.9adb		e9 07		sbc #$07	                sbc #7                  ; fall through to _checkbase
.9add						_checkbase:
.9add		38		sec		                sec
.9ade		e9 30		sbc #$30	                sbc #'0'                 ; this is also the conversion step
.9ae0		c5 18		cmp $18		                cmp base
.9ae2		b0 06		bcs $9aea	                bcs _done               ; already have false flag
.9ae4		95 02		sta $02,x	                sta 2,x                 ; put number in NOS
.9ae6		d6 00		dec $00,x	                dec 0,x                 ; set success flag
.9ae8		d6 01		dec $01,x	                dec 1,x
.9aea						_done:
.9aea						z_digit_question:
.9aea		60		rts		                rts
.9aeb						xt_execute_parsing:
.9aeb		20 b6 d7	jsr $d7b6	                jsr underflow_3
.9aee		20 b4 9b	jsr $9bb4	                jsr xt_input_to_r       ; save normal input for later
.9af1		20 97 9c	jsr $9c97	                jsr xt_not_rote         ; -ROT ( xt addr u )
.9af4		b5 00		lda $00,x	                lda 0,x                 ; TOS is new ciblen
.9af6		85 0e		sta $0e		                sta ciblen
.9af8		b5 01		lda $01,x	                lda 1,x
.9afa		85 0f		sta $0f		                sta ciblen+1
.9afc		b5 02		lda $02,x	                lda 2,x                 ; NOS is new cib
.9afe		85 0c		sta $0c		                sta cib
.9b00		b5 03		lda $03,x	                lda 3,x
.9b02		85 0d		sta $0d		                sta cib+1
.9b04		64 10		stz $10		                stz toin                ; Set >IN to zero
.9b06		64 11		stz $11		                stz toin+1
.9b08		20 bf 93	jsr $93bf	                jsr xt_two_drop         ; 2DROP ( xt )
.9b0b		20 05 88	jsr $8805	                jsr xt_execute
.9b0e		20 c1 9d	jsr $9dc1	                jsr xt_r_to_input
.9b11						z_execute_parsing:
.9b11		60		rts		                rts
.9b12						xt_find_name:
.9b12		20 b1 d7	jsr $d7b1	                jsr underflow_2
.9b15		b5 00		lda $00,x	                lda 0,x
.9b17		15 01		ora $01,x	                ora 1,x
.9b19		d0 03		bne $9b1e	                bne _nonempty
.9b1b		4c 4f 9b	jmp $9b4f	                jmp _fail_done
.9b1e						_nonempty:
.9b1e		64 29		stz $29		                stz tmp3                ; Start at the beginning
.9b20						_wordlist_loop:
.9b20		a0 22		ldy #$22	                ldy #num_order_offset   ; Compare to byte variable #ORDER
.9b22		a5 29		lda $29		                lda tmp3
.9b24		d1 08		cmp ($08),y	                cmp (up),y              ; Check to see if we are done
.9b26		f0 27		beq $9b4f	                beq _fail_done
.9b28		18		clc		                clc             ; SEARCH-ORDER is array of bytes.
.9b29		69 23		adc #$23	                adc #search_order_offset
.9b2b		a8		tay		                tay
.9b2c		b1 08		lda ($08),y	                lda (up),y      ; Get the id byte, which is the offset
.9b2e		0a		asl a		                asl                     ; Turn offset into cells offset.
.9b2f		18		clc		                clc
.9b30		69 0a		adc #$0a	                adc #wordlists_offset
.9b32		a8		tay		                tay
.9b33		b1 08		lda ($08),y	                lda (up),y
.9b35		85 25		sta $25		                sta tmp1
.9b37		c8		iny		                iny
.9b38		b1 08		lda ($08),y	                lda (up),y
.9b3a		85 26		sta $26		                sta tmp1+1
.9b3c		20 8e d6	jsr $d68e	                jsr find_header_name
.9b3f		d0 04		bne $9b45	                bne _success
.9b41		e6 29		inc $29		                inc tmp3
.9b43		80 db		bra $9b20	                bra _wordlist_loop
.9b45						_success:
.9b45		a5 25		lda $25		                lda tmp1
.9b47		95 02		sta $02,x	                sta 2,x
.9b49		a5 26		lda $26		                lda tmp1+1
.9b4b		95 03		sta $03,x	                sta 3,x
.9b4d		80 04		bra $9b53	                bra _done
.9b4f						_fail_done:
.9b4f		74 02		stz $02,x	                stz 2,x         ; failure flag
.9b51		74 03		stz $03,x	                stz 3,x
.9b53						_done:
.9b53		e8		inx		                inx
.9b54		e8		inx		                inx
.9b55		60		rts		z_find_name:    rts
.9b56						xt_hexstore:
.9b56		20 b6 d7	jsr $d7b6	                jsr underflow_3
.9b59		20 a0 86	jsr $86a0	                jsr xt_dup              ; Save copy of original address
.9b5c		20 b1 94	jsr $94b1	                jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
.9b5f						_loop:
.9b5f		b5 00		lda $00,x	                lda 0,x
.9b61		15 01		ora $01,x	                ora 1,x
.9b63		f0 36		beq $9b9b	                beq _done
.9b65		20 69 9a	jsr $9a69	                jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.9b68		20 b1 94	jsr $94b1	                jsr xt_two_to_r
.9b6b		20 13 9e	jsr $9e13	                jsr xt_zero
.9b6e		20 13 9e	jsr $9e13	                jsr xt_zero
.9b71		20 37 94	jsr $9437	                jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.9b74		20 e8 92	jsr $92e8	                jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.9b77		b5 00		lda $00,x	                lda 0,x
.9b79		15 01		ora $01,x	                ora 1,x
.9b7b		d0 17		bne $9b94	                bne _have_chars_left
.9b7d		20 bf 93	jsr $93bf	                jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
.9b80		20 5c 9e	jsr $9e5c	                jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
.9b83		20 d9 8e	jsr $8ed9	                jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.9b86		20 37 83	jsr $8337	                jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
.9b89		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R>
.9b8c		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+
.9b8f		20 88 93	jsr $9388	                jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.9b92		80 cb		bra $9b5f	                bra _loop
.9b94						_have_chars_left:
.9b94		8a		txa		                txa
.9b95		18		clc		                clc
.9b96		69 08		adc #$08	                adc #8
.9b98		aa		tax		                tax
.9b99		80 c4		bra $9b5f	                bra _loop
.9b9b						_done:
.9b9b		e8		inx		                inx
.9b9c		e8		inx		                inx
.9b9d		e8		inx		                inx
.9b9e		e8		inx		                inx                     ; 2DROP
.9b9f		20 37 94	jsr $9437	                jsr xt_two_r_from       ; ( addr2+n addr2 )
.9ba2		20 4a 92	jsr $924a	                jsr xt_swap
.9ba5		20 e4 8b	jsr $8be4	                jsr xt_minus            ; ( n )
.9ba8		60		rts		z_hexstore:     rts
.9ba9						xt_input:
.9ba9		ca		dex		                dex
.9baa		ca		dex		                dex
.9bab		a9 14		lda #$14	                lda #<input
.9bad		95 00		sta $00,x	                sta 0,x
.9baf		a9 00		lda #$00	                lda #>input
.9bb1		95 01		sta $01,x	                sta 1,x
.9bb3		60		rts		z_input:        rts
.9bb4						xt_input_to_r:
.9bb4		68		pla		                pla
.9bb5		85 25		sta $25		                sta tmp1
.9bb7		68		pla		                pla
.9bb8		85 26		sta $26		                sta tmp1+1
.9bba		a0 07		ldy #$07	                ldy #7
.9bbc						_loop:
.9bbc		b9 0a 00	lda $000a,y	                lda insrc,y     ; insrc+7 is toin+1
.9bbf		48		pha		                pha
.9bc0		88		dey		                dey
.9bc1		10 f9		bpl $9bbc	                bpl _loop
.9bc3		a5 26		lda $26		                lda tmp1+1
.9bc5		48		pha		                pha
.9bc6		a5 25		lda $25		                lda tmp1
.9bc8		48		pha		                pha
.9bc9		60		rts		z_input_to_r: 	rts
.9bca						xt_int_to_name:
.9bca		20 ac d7	jsr $d7ac	                jsr underflow_1
.9bcd		ca		dex		                dex
.9bce		ca		dex		                dex
.9bcf		74 00		stz $00,x	                stz 0,x
.9bd1		74 01		stz $01,x	                stz 1,x
.9bd3						_wordlist_loop:
.9bd3		b5 00		lda $00,x	                lda 0,x                 ; Get the current wordlist.
.9bd5		0a		asl a		                asl                     ; Turn offset into cells offset.
.9bd6		18		clc		                clc
.9bd7		69 0a		adc #$0a	                adc #wordlists_offset
.9bd9		a8		tay		                tay
.9bda		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.9bdc		85 27		sta $27		                sta tmp2                ; into tmp2
.9bde		c8		iny		                iny
.9bdf		b1 08		lda ($08),y	                lda (up),y
.9be1		85 28		sta $28		                sta tmp2+1
.9be3		a5 27		lda $27		                lda tmp2
.9be5		05 28		ora $28		                ora tmp2+1
.9be7		f0 36		beq $9c1f	                beq _next_wordlist
.9be9		b5 02		lda $02,x	                lda 2,x         ; Target xt is now behind wordlist id.
.9beb		85 29		sta $29		                sta tmp3        ; Save target xt in tmp3
.9bed		b5 03		lda $03,x	                lda 3,x
.9bef		85 2a		sta $2a		                sta tmp3+1
.9bf1						_loop:
.9bf1		a0 04		ldy #$04	                ldy #4          ; xt is four bytes down
.9bf3		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB of xt of current nt
.9bf5		c5 29		cmp $29		                cmp tmp3
.9bf7		d0 07		bne $9c00	                bne _no_match
.9bf9		c8		iny		                iny
.9bfa		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB of xt of current nt
.9bfc		c5 2a		cmp $2a		                cmp tmp3+1
.9bfe		f0 30		beq $9c30	                beq _match
.9c00						_no_match:
.9c00		18		clc		                clc
.9c01		a5 27		lda $27		                lda tmp2
.9c03		69 02		adc #$02	                adc #2
.9c05		85 27		sta $27		                sta tmp2
.9c07		90 02		bcc $9c0b	                bcc +
.9c09		e6 28		inc $28		                inc tmp2+1
.9c0b						+
.9c0b		a0 00		ldy #$00	                ldy #0
.9c0d		b1 27		lda ($27),y	                lda (tmp2),y
.9c0f		48		pha		                pha
.9c10		c8		iny		                iny
.9c11		11 27		ora ($27),y	                ora (tmp2),y
.9c13		f0 09		beq $9c1e	                beq _zero
.9c15		b1 27		lda ($27),y	                lda (tmp2),y
.9c17		85 28		sta $28		                sta tmp2+1
.9c19		68		pla		                pla
.9c1a		85 27		sta $27		                sta tmp2
.9c1c		80 d3		bra $9bf1	                bra _loop
.9c1e						_zero:
.9c1e		68		pla		                pla             ; Leftover from above loop
.9c1f						_next_wordlist:
.9c1f		b5 00		lda $00,x	                lda 0,x
.9c21		1a		inc a		                ina
.9c22		95 00		sta $00,x	                sta 0,x
.9c24		c9 0c		cmp #$0c	                cmp #max_wordlists
.9c26		d0 ab		bne $9bd3	                bne _wordlist_loop
.9c28		e8		inx		                inx
.9c29		e8		inx		                inx
.9c2a		74 00		stz $00,x	                stz 0,x
.9c2c		74 01		stz $01,x	                stz 1,x
.9c2e		80 0a		bra $9c3a	                bra z_int_to_name
.9c30						_match:
.9c30		e8		inx		                inx
.9c31		e8		inx		                inx
.9c32		a5 27		lda $27		                lda tmp2
.9c34		95 00		sta $00,x	                sta 0,x
.9c36		a5 28		lda $28		                lda tmp2+1
.9c38		95 01		sta $01,x	                sta 1,x
.9c3a		60		rts		z_int_to_name:  rts
.9c3b						xt_latestnt:
.9c3b		ca		dex		                dex
.9c3c		ca		dex		                dex
.9c3d		20 03 d7	jsr $d703	                jsr current_to_dp
.9c40		a5 02		lda $02		                lda dp
.9c42		95 00		sta $00,x	                sta 0,x
.9c44		a5 03		lda $03		                lda dp+1
.9c46		95 01		sta $01,x	                sta 1,x
.9c48		60		rts		z_latestnt:     rts
.9c49						xt_latestxt:
.9c49		20 3b 9c	jsr $9c3b	                jsr xt_latestnt         ; ( nt )
.9c4c		20 50 9c	jsr $9c50	                jsr xt_name_to_int      ; ( xt )
.9c4f		60		rts		z_latestxt:     rts
.9c50						xt_name_to_int:
.9c50		20 ac d7	jsr $d7ac	                jsr underflow_1
.9c53		b5 00		lda $00,x	                lda 0,x
.9c55		18		clc		                clc
.9c56		69 04		adc #$04	                adc #4
.9c58		85 29		sta $29		                sta tmp3
.9c5a		b5 01		lda $01,x	                lda 1,x
.9c5c		90 01		bcc $9c5f	                bcc _done
.9c5e		1a		inc a		                ina
.9c5f						_done:
.9c5f		85 2a		sta $2a		                sta tmp3+1
.9c61		a0 00		ldy #$00	                ldy #0
.9c63		b1 29		lda ($29),y	                lda (tmp3),y
.9c65		95 00		sta $00,x	                sta 0,x
.9c67		c8		iny		                iny
.9c68		b1 29		lda ($29),y	                lda (tmp3),y
.9c6a		95 01		sta $01,x	                sta 1,x
.9c6c		60		rts		z_name_to_int:  rts
.9c6d						xt_name_to_string:
.9c6d		20 ac d7	jsr $d7ac	                jsr underflow_1
.9c70		ca		dex		                dex
.9c71		ca		dex		                dex
.9c72		a1 02		lda ($02,x)	                lda (2,x)
.9c74		95 00		sta $00,x	                sta 0,x
.9c76		74 01		stz $01,x	                stz 1,x
.9c78		b5 02		lda $02,x	                lda 2,x         ; LSB
.9c7a		18		clc		                clc
.9c7b		69 08		adc #$08	                adc #8
.9c7d		95 02		sta $02,x	                sta 2,x
.9c7f		90 02		bcc $9c83	                bcc z_name_to_string
.9c81		f6 03		inc $03,x	                inc 3,x         ; MSB
.9c83						z_name_to_string:
.9c83		60		rts		                rts
.9c84						xt_nc_limit:
.9c84		a9 00		lda #$00	                lda #nc_limit_offset
.9c86		4c 68 d6	jmp $d668	                jmp push_upvar_tos
.9c89						z_nc_limit:
.9c89						xt_never_native:
.9c89		20 03 d7	jsr $d703	                jsr current_to_dp
.9c8c		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9c8e		b1 02		lda ($02),y	                lda (dp),y
.9c90		09 08		ora #$08	                ora #NN         ; Make sure NN flag is set
.9c92		29 fd		and #$fd	                and #$FF-AN     ; and AN flag is clear.
.9c94		91 02		sta ($02),y	                sta (dp),y
.9c96						z_never_native:
.9c96		60		rts		                rts
.9c97						xt_not_rote:
.9c97		20 b6 d7	jsr $d7b6	                jsr underflow_3
.9c9a		b4 01		ldy $01,x	                ldy 1,x         ; MSB first
.9c9c		b5 03		lda $03,x	                lda 3,x
.9c9e		95 01		sta $01,x	                sta 1,x
.9ca0		b5 05		lda $05,x	                lda 5,x
.9ca2		95 03		sta $03,x	                sta 3,x
.9ca4		94 05		sty $05,x	                sty 5,x
.9ca6		b4 00		ldy $00,x	                ldy 0,x         ; LSB second
.9ca8		b5 02		lda $02,x	                lda 2,x
.9caa		95 00		sta $00,x	                sta 0,x
.9cac		b5 04		lda $04,x	                lda 4,x
.9cae		95 02		sta $02,x	                sta 2,x
.9cb0		94 04		sty $04,x	                sty 4,x
.9cb2		60		rts		z_not_rote:     rts
.9cb3						xt_number:
.9cb3		20 b1 d7	jsr $d7b1	                jsr underflow_2
.9cb6		64 1e		stz $1e		                stz tmpdsp      ; %n000 000d
.9cb8		a5 18		lda $18		                lda base
.9cba		48		pha		                pha
.9cbb		20 c7 93	jsr $93c7	                jsr xt_two_dup
.9cbe		a1 02		lda ($02,x)	                lda (2,x)
.9cc0		c9 23		cmp #$23	                cmp #'#'                ; decimal?
.9cc2		d0 04		bne $9cc8	                bne _check_hex
.9cc4		a9 0a		lda #$0a	                lda #10
.9cc6		80 42		bra $9d0a	                bra _base_changed
.9cc8						_check_hex:
.9cc8		c9 24		cmp #$24	                cmp #'$'
.9cca		d0 04		bne $9cd0	                bne _check_binary
.9ccc		a9 10		lda #$10	                lda #16
.9cce		80 3a		bra $9d0a	                bra _base_changed
.9cd0						_check_binary:
.9cd0		c9 25		cmp #$25	                cmp #'%'
.9cd2		d0 04		bne $9cd8	                bne _check_char
.9cd4		a9 02		lda #$02	                lda #2
.9cd6		80 32		bra $9d0a	                bra _base_changed
.9cd8						_check_char:
.9cd8		c9 27		cmp #$27	                cmp #"'"
.9cda		d0 3a		bne $9d16	                bne _check_minus
.9cdc		b5 00		lda $00,x	                lda 0,x         ; Get the length
.9cde		c9 03		cmp #$03	                cmp #3
.9ce0		d0 26		bne $9d08	                bne _not_a_char
.9ce2		b5 01		lda $01,x	                lda 1,x
.9ce4		d0 22		bne $9d08	                bne _not_a_char ; No compare needed to check for non-zero.
.9ce6		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9ce8		18		clc		                clc
.9ce9		69 02		adc #$02	                adc #2          ; length of string
.9ceb		85 23		sta $23		                sta tmptos
.9ced		b5 03		lda $03,x	                lda 3,x
.9cef		69 00		adc #$00	                adc #0          ; only need carry
.9cf1		85 24		sta $24		                sta tmptos+1
.9cf3		b2 23		lda ($23)	                lda (tmptos)
.9cf5		c9 27		cmp #$27	                cmp #"'"
.9cf7		d0 0f		bne $9d08	                bne _not_a_char
.9cf9		f6 02		inc $02,x	                inc 2,x
.9cfb		d0 02		bne $9cff	                bne +
.9cfd		f6 03		inc $03,x	                inc 3,x
.9cff						+
.9cff		a1 02		lda ($02,x)	                lda (2,x)
.9d01		95 02		sta $02,x	                sta 2,x
.9d03		74 03		stz $03,x	                stz 3,x
.9d05		4c 88 9d	jmp $9d88	                jmp _drop_original_string ; Single flag will drop the TOS for us.
.9d08						_not_a_char:
.9d08		80 5c		bra $9d66	                bra _number_error
.9d0a						_base_changed:
.9d0a		85 18		sta $18		                sta base        ; Switch to the new base
.9d0c		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9d0e		d0 02		bne $9d12	                bne +
.9d10		f6 03		inc $03,x	                inc 3,x
.9d12						+
.9d12		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9d14		a1 02		lda ($02,x)	                lda (2,x)       ; Load the first char again
.9d16						_check_minus:
.9d16		c9 2d		cmp #$2d	                cmp #'-'
.9d18		d0 0c		bne $9d26	                bne _check_dot
.9d1a		a9 80		lda #$80	                lda #$80
.9d1c		85 1e		sta $1e		                sta tmpdsp      ; set the sign bit
.9d1e		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9d20		d0 02		bne $9d24	                bne +
.9d22		f6 03		inc $03,x	                inc 3,x
.9d24						+
.9d24		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9d26						_check_dot:
.9d26		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9d28		18		clc		                clc
.9d29		75 00		adc $00,x	                adc 0,x         ; length of string
.9d2b		85 23		sta $23		                sta tmptos
.9d2d		b5 03		lda $03,x	                lda 3,x
.9d2f		69 00		adc #$00	                adc #0          ; only need carry
.9d31		85 24		sta $24		                sta tmptos+1
.9d33		a5 23		lda $23		                lda tmptos
.9d35		d0 02		bne $9d39	                bne +
.9d37		c6 24		dec $24		                dec tmptos+1
.9d39						+
.9d39		c6 23		dec $23		                dec tmptos
.9d3b		b2 23		lda ($23)	                lda (tmptos)
.9d3d		c9 2e		cmp #$2e	                cmp #'.'
.9d3f		d0 04		bne $9d45	                bne _main
.9d41		e6 1e		inc $1e		                inc tmpdsp
.9d43		d6 00		dec $00,x	                dec 0,x
.9d45						_main:
.9d45		ca		dex		                dex
.9d46		ca		dex		                dex
.9d47		ca		dex		                dex
.9d48		ca		dex		                dex
.9d49		b5 04		lda $04,x	                lda 4,x         ; LSB of length
.9d4b		95 00		sta $00,x	                sta 0,x
.9d4d		74 01		stz $01,x	                stz 1,x         ; MSB, max length 255 chars
.9d4f		b5 06		lda $06,x	                lda 6,x         ; LSB of address
.9d51		95 02		sta $02,x	                sta 2,x
.9d53		b5 07		lda $07,x	                lda 7,x         ; MSB of address
.9d55		95 03		sta $03,x	                sta 3,x
.9d57		74 04		stz $04,x	                stz 4,x         ; clear space for ud
.9d59		74 05		stz $05,x	                stz 5,x
.9d5b		74 06		stz $06,x	                stz 6,x
.9d5d		74 07		stz $07,x	                stz 7,x
.9d5f		20 e8 92	jsr $92e8	                jsr xt_to_number        ; (ud addr u -- ud addr u )
.9d62		b5 00		lda $00,x	                lda 0,x
.9d64		f0 1e		beq $9d84	                beq _all_converted
.9d66						_number_error:
.9d66		20 bf 93	jsr $93bf	                jsr xt_two_drop ; >NUMBER modified addr u
.9d69		20 bf 93	jsr $93bf	                jsr xt_two_drop ; ud   (partially converted number)
.9d6c		a9 3e		lda #$3e	                lda #'>'
.9d6e		20 c5 86	jsr $86c5	                jsr emit_a
.9d71		20 d1 94	jsr $94d1	                jsr xt_type
.9d74		a9 3c		lda #$3c	                lda #'<'
.9d76		20 c5 86	jsr $86c5	                jsr emit_a
.9d79		20 c5 91	jsr $91c5	                jsr xt_space
.9d7c		68		pla		                pla
.9d7d		85 18		sta $18		                sta base
.9d7f		a9 08		lda #$08	                lda #err_syntax
.9d81		4c c2 d7	jmp $d7c2	                jmp error
.9d84						_all_converted:
.9d84		e8		inx		                inx ; Drop the current addr u
.9d85		e8		inx		                inx
.9d86		e8		inx		                inx
.9d87		e8		inx		                inx
.9d88						_drop_original_string:
.9d88		20 8d 94	jsr $948d	                jsr xt_two_swap  ; Drop the original addr u
.9d8b		20 bf 93	jsr $93bf	                jsr xt_two_drop  ; (was saved for unknown word error message)
.9d8e		a5 1e		lda $1e		                lda tmpdsp      ; flag for double/minus
.9d90		a0 20		ldy #$20	                ldy #%00100000  ; status bit 5 for double(1) or single(0)
.9d92		0a		asl a		                asl             ; %n000 000d => %0000 00d0, C=n, Z=d
.9d93		f0 0a		beq $9d9f	                beq _single
.9d95		98		tya		                tya
.9d96		04 1c		tsb $1c		                tsb status
.9d98		90 0f		bcc $9da9	                bcc _done       ; no minus, all done
.9d9a		20 81 9e	jsr $9e81	                jsr xt_dnegate
.9d9d		80 0a		bra $9da9	                bra _done
.9d9f						_single:
.9d9f		e8		inx		                inx
.9da0		e8		inx		                inx
.9da1		98		tya		                tya
.9da2		14 1c		trb $1c		                trb status
.9da4		90 03		bcc $9da9	                bcc _done       ; no minus, all done
.9da6		20 1f 8c	jsr $8c1f	                jsr xt_negate
.9da9						_done:
.9da9		68		pla		                pla
.9daa		85 18		sta $18		                sta base
.9dac		60		rts		z_number:       rts
.9dad						xt_editor_wordlist:
.9dad						xt_one:
.9dad		ca		dex		                dex
.9dae		ca		dex		                dex
.9daf		a9 01		lda #$01	                lda #1
.9db1		95 00		sta $00,x	                sta 0,x
.9db3		74 01		stz $01,x	                stz 1,x
.9db5						z_editor_wordlist:
.9db5						z_one:
.9db5		60		rts		                rts
.9db6						xt_output:
.9db6		ca		dex		                dex
.9db7		ca		dex		                dex
.9db8		a9 12		lda #$12	                lda #<output
.9dba		95 00		sta $00,x	                sta 0,x
.9dbc		a9 00		lda #$00	                lda #>output
.9dbe		95 01		sta $01,x	                sta 1,x
.9dc0		60		rts		z_output:       rts
.9dc1						xt_r_to_input:
.9dc1		68		pla		                pla
.9dc2		85 25		sta $25		                sta tmp1
.9dc4		68		pla		                pla
.9dc5		85 26		sta $26		                sta tmp1+1
.9dc7		a0 00		ldy #$00	                ldy #0
.9dc9						_loop:
.9dc9		68		pla		                pla
.9dca		99 0a 00	sta $000a,y	                sta insrc,y
.9dcd		c8		iny		                iny
.9dce		c0 08		cpy #$08	                cpy #8
.9dd0		d0 f7		bne $9dc9	                bne _loop
.9dd2		a5 26		lda $26		                lda tmp1+1
.9dd4		48		pha		                pha
.9dd5		a5 25		lda $25		                lda tmp1
.9dd7		48		pha		                pha
.9dd8		60		rts		z_r_to_input: 	rts
.9dd9						xt_strip_underflow:
.9dd9		a9 02		lda #$02	                lda #uf_strip_offset
.9ddb		4c 68 d6	jmp $d668	                jmp push_upvar_tos
.9dde						z_strip_underflow:
.9dde						xt_assembler_wordlist:
.9dde						xt_two:
.9dde		ca		dex		                dex
.9ddf		ca		dex		                dex
.9de0		a9 02		lda #$02	                lda #2
.9de2		95 00		sta $00,x	                sta 0,x
.9de4		74 01		stz $01,x	                stz 1,x
.9de6						z_assembler_wordlist:
.9de6		60		rts		z_two:          rts
.9de7						xt_useraddr:
.9de7		ca		dex		                dex
.9de8		ca		dex		                dex
.9de9		a9 08		lda #$08	                lda #<up
.9deb		95 00		sta $00,x	                sta 0,x
.9ded		a9 00		lda #$00	                lda #>up
.9def		95 01		sta $01,x	                sta 1,x
.9df1		60		rts		z_useraddr:     rts
.9df2						xt_wordsize:
.9df2		20 ac d7	jsr $d7ac	                jsr underflow_1
.9df5		b5 00		lda $00,x	                lda 0,x
.9df7		85 25		sta $25		                sta tmp1
.9df9		b5 01		lda $01,x	                lda 1,x
.9dfb		85 26		sta $26		                sta tmp1+1
.9dfd		a0 06		ldy #$06	                ldy #6
.9dff		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB of z
.9e01		88		dey		                dey
.9e02		88		dey		                dey
.9e03		38		sec		                sec
.9e04		f1 25		sbc ($25),y	                sbc (tmp1),y    ; LSB of xt
.9e06		95 00		sta $00,x	                sta 0,x
.9e08		a0 07		ldy #$07	                ldy #7
.9e0a		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB of z
.9e0c		88		dey		                dey
.9e0d		88		dey		                dey
.9e0e		f1 25		sbc ($25),y	                sbc (tmp1),y    ; MSB of xt
.9e10		95 01		sta $01,x	                sta 1,x
.9e12		60		rts		z_wordsize:     rts
.9e13						xt_case:
.9e13						xt_false:
.9e13						xt_forth_wordlist:
.9e13						xt_zero:
.9e13		ca		dex		                dex             ; push
.9e14		ca		dex		                dex
.9e15		74 00		stz $00,x	                stz 0,x
.9e17		74 01		stz $01,x	                stz 1,x
.9e19						z_case:
.9e19						z_false:
.9e19						z_forth_wordlist:
.9e19						z_zero:
.9e19		60		rts		                rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/double.asm

.9e1a						xt_d_minus:
.9e1a		20 bb d7	jsr $d7bb	                jsr underflow_4 ; two double numbers
.9e1d		38		sec		                sec
.9e1e		b5 06		lda $06,x	                lda 6,x         ; LSB of lower word
.9e20		f5 02		sbc $02,x	                sbc 2,x
.9e22		95 06		sta $06,x	                sta 6,x
.9e24		b5 07		lda $07,x	                lda 7,x         ; MSB of lower word
.9e26		f5 03		sbc $03,x	                sbc 3,x
.9e28		95 07		sta $07,x	                sta 7,x
.9e2a		b5 04		lda $04,x	                lda 4,x         ; LSB of upper word
.9e2c		f5 00		sbc $00,x	                sbc 0,x
.9e2e		95 04		sta $04,x	                sta 4,x
.9e30		b5 05		lda $05,x	                lda 5,x         ; MSB of upper word
.9e32		f5 01		sbc $01,x	                sbc 1,x
.9e34		95 05		sta $05,x	                sta 5,x
.9e36		e8		inx		                inx
.9e37		e8		inx		                inx
.9e38		e8		inx		                inx
.9e39		e8		inx		                inx
.9e3a		60		rts		z_d_minus:      rts
.9e3b						xt_d_plus:
.9e3b		20 bb d7	jsr $d7bb	                jsr underflow_4 ; two double numbers
.9e3e		18		clc		                clc
.9e3f		b5 02		lda $02,x	                lda 2,x         ; LSB of lower word
.9e41		75 06		adc $06,x	                adc 6,x
.9e43		95 06		sta $06,x	                sta 6,x
.9e45		b5 03		lda $03,x	                lda 3,x         ; MSB of lower word
.9e47		75 07		adc $07,x	                adc 7,x
.9e49		95 07		sta $07,x	                sta 7,x
.9e4b		b5 00		lda $00,x	                lda 0,x         ; LSB of upper word
.9e4d		75 04		adc $04,x	                adc 4,x
.9e4f		95 04		sta $04,x	                sta 4,x
.9e51		b5 01		lda $01,x	                lda 1,x         ; MSB of upper word
.9e53		75 05		adc $05,x	                adc 5,x
.9e55		95 05		sta $05,x	                sta 5,x
.9e57		e8		inx		                inx
.9e58		e8		inx		                inx
.9e59		e8		inx		                inx
.9e5a		e8		inx		                inx
.9e5b		60		rts		z_d_plus:       rts
.9e5c						xt_d_to_s:
.9e5c		20 b1 d7	jsr $d7b1	                jsr underflow_2
.9e5f		e8		inx		                inx
.9e60		e8		inx		                inx
.9e61		60		rts		z_d_to_s:       rts
.9e62						xt_dabs:
.9e62		20 b1 d7	jsr $d7b1	                jsr underflow_2 ; double number
.9e65		b5 01		lda $01,x	                lda 1,x         ; MSB of high cell
.9e67		10 17		bpl $9e80	                bpl _done       ; positive, we get off light
.9e69		a0 00		ldy #$00	                ldy #0
.9e6b		38		sec		                sec
.9e6c		98		tya		                tya
.9e6d		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.9e6f		95 02		sta $02,x	                sta 2,x
.9e71		98		tya		                tya
.9e72		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.9e74		95 03		sta $03,x	                sta 3,x
.9e76		98		tya		                tya
.9e77		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.9e79		95 00		sta $00,x	                sta 0,x
.9e7b		98		tya		                tya
.9e7c		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.9e7e		95 01		sta $01,x	                sta 1,x
.9e80						_done:
.9e80		60		rts		z_dabs:         rts
.9e81						xt_dnegate:
.9e81		20 b1 d7	jsr $d7b1	                jsr underflow_2 ; double number
.9e84		a0 00		ldy #$00	     		ldy #0
.9e86		38		sec		                sec
.9e87		98		tya		                tya
.9e88		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.9e8a		95 02		sta $02,x	                sta 2,x
.9e8c		98		tya		                tya
.9e8d		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.9e8f		95 03		sta $03,x	                sta 3,x
.9e91		98		tya		                tya
.9e92		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.9e94		95 00		sta $00,x	                sta 0,x
.9e96		98		tya		                tya
.9e97		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.9e99		95 01		sta $01,x	                sta 1,x
.9e9b		60		rts		z_dnegate:      rts
.9e9c						xt_d_dot:
.9e9c		20 b1 d7	jsr $d7b1	                jsr underflow_2
.9e9f		20 a5 93	jsr $93a5	                jsr xt_tuck
.9ea2		20 62 9e	jsr $9e62	                jsr xt_dabs
.9ea5		20 cf 89	jsr $89cf	                jsr xt_less_number_sign
.9ea8		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s
.9eab		20 8b 8f	jsr $8f8b	                jsr xt_rot
.9eae		20 4a 91	jsr $914a	                jsr xt_sign
.9eb1		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater
.9eb4		20 d1 94	jsr $94d1	                jsr xt_type
.9eb7		20 c5 91	jsr $91c5	                jsr xt_space
.9eba		60		rts		z_d_dot:        rts
.9ebb						xt_d_dot_r:
.9ebb		20 b6 d7	jsr $d7b6	                jsr underflow_3
.9ebe		20 88 93	jsr $9388	                jsr xt_to_r
.9ec1		20 a5 93	jsr $93a5	                jsr xt_tuck
.9ec4		20 62 9e	jsr $9e62	                jsr xt_dabs
.9ec7		20 cf 89	jsr $89cf	                jsr xt_less_number_sign
.9eca		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s
.9ecd		20 8b 8f	jsr $8f8b	                jsr xt_rot
.9ed0		20 4a 91	jsr $914a	                jsr xt_sign
.9ed3		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater
.9ed6		20 ee 8e	jsr $8eee	                jsr xt_r_from
.9ed9		20 05 8d	jsr $8d05	                jsr xt_over
.9edc		20 e4 8b	jsr $8be4	                jsr xt_minus
.9edf		20 cb 91	jsr $91cb	                jsr xt_spaces
.9ee2		20 d1 94	jsr $94d1	                jsr xt_type
.9ee5		60		rts		z_d_dot_r:      rts
.9ee6						xt_two_constant:
.9ee6		20 b1 d7	jsr $d7b1	                jsr underflow_2
.9ee9		20 40 84	jsr $8440	                jsr xt_create
.9eec		20 4a 92	jsr $924a	                jsr xt_swap
.9eef		20 cd 83	jsr $83cd	                jsr xt_comma
.9ef2		20 cd 83	jsr $83cd	                jsr xt_comma
.9ef5		20 fe 85	jsr $85fe	                jsr does_runtime    ; does> turns into these two routines.
.9ef8		20 41 d6	jsr $d641	                jsr dodoes
.9efb		20 a0 86	jsr $86a0	                jsr xt_dup
.9efe		20 1a 88	jsr $881a	                jsr xt_fetch
.9f01		20 4a 92	jsr $924a	                jsr xt_swap
.9f04		20 43 83	jsr $8343	                jsr xt_cell_plus
.9f07		20 1a 88	jsr $881a	                jsr xt_fetch
.9f0a		60		rts		z_two_constant: rts
.9f0b						xt_two_literal:
.9f0b		20 b1 d7	jsr $d7b1	                jsr underflow_2 ; double number
.9f0e		a9 0a		lda #$0a	                lda #template_push_tos_size
.9f10		0a		asl a		                asl
.9f11		20 c7 97	jsr $97c7	                jsr check_nc_limit
.9f14		b0 09		bcs $9f1f	                bcs _no_inline
.9f16		20 4a 92	jsr $924a	                jsr xt_swap
.9f19		20 f2 89	jsr $89f2	                jsr xt_literal
.9f1c		4c f2 89	jmp $89f2	                jmp xt_literal
.9f1f						_no_inline:
.9f1f		20 7e a1	jsr $a17e	                jsr cmpl_two_literal
.9f22		60		rts		z_two_literal:  rts
.9f23						xt_two_variable:
.9f23		20 40 84	jsr $8440	                jsr xt_create
.9f26		ca		dex		                dex
.9f27		ca		dex		                dex
.9f28		a9 04		lda #$04	                lda #4
.9f2a		95 00		sta $00,x	                sta 0,x
.9f2c		74 01		stz $01,x	                stz 1,x
.9f2e		20 27 82	jsr $8227	                jsr xt_allot
.9f31		60		rts		z_two_variable: rts
.9f32						xt_ud_dot:
.9f32		20 b1 d7	jsr $d7b1	                jsr underflow_2 ; double number
.9f35		20 cf 89	jsr $89cf	                jsr xt_less_number_sign
.9f38		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s
.9f3b		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater
.9f3e		20 d1 94	jsr $94d1	                jsr xt_type
.9f41		20 c5 91	jsr $91c5	                jsr xt_space
.9f44		60		rts		z_ud_dot:        rts
.9f45						xt_ud_dot_r:
.9f45		20 b6 d7	jsr $d7b6	                jsr underflow_3
.9f48		20 88 93	jsr $9388	                jsr xt_to_r
.9f4b		20 cf 89	jsr $89cf	                jsr xt_less_number_sign
.9f4e		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s
.9f51		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater
.9f54		20 ee 8e	jsr $8eee	                jsr xt_r_from
.9f57		20 05 8d	jsr $8d05	                jsr xt_over
.9f5a		20 e4 8b	jsr $8be4	                jsr xt_minus
.9f5d		20 cb 91	jsr $91cb	                jsr xt_spaces
.9f60		20 d1 94	jsr $94d1	                jsr xt_type
.9f63		60		rts		z_ud_dot_r:      rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/string.asm

.9f64						xt_cmove:
.9f64		20 b6 d7	jsr $d7b6	                jsr underflow_3
.9f67		b5 02		lda $02,x	                lda 2,x
.9f69		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.9f6b		b5 03		lda $03,x	                lda 3,x
.9f6d		85 28		sta $28		                sta tmp2+1
.9f6f		b5 04		lda $04,x	                lda 4,x
.9f71		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.9f73		b5 05		lda $05,x	                lda 5,x
.9f75		85 26		sta $26		                sta tmp1+1
.9f77		a0 00		ldy #$00	                ldy #0
.9f79		b5 01		lda $01,x	                lda 1,x         ; number of whole pages to move
.9f7b		f0 0f		beq $9f8c	                beq _dopartial
.9f7d						_page:
.9f7d		b1 25		lda ($25),y	                lda (tmp1),y
.9f7f		91 27		sta ($27),y	                sta (tmp2),y
.9f81		c8		iny		                iny
.9f82		d0 f9		bne $9f7d	                bne _page
.9f84		e6 26		inc $26		                inc tmp1+1
.9f86		e6 28		inc $28		                inc tmp2+1
.9f88		d6 01		dec $01,x	                dec 1,x
.9f8a		d0 f1		bne $9f7d	                bne _page
.9f8c						_dopartial:
.9f8c		b5 00		lda $00,x	                lda 0,x         ; length of last page
.9f8e		f0 09		beq $9f99	                beq _done
.9f90						_partial:
.9f90		b1 25		lda ($25),y	                lda (tmp1),y
.9f92		91 27		sta ($27),y	                sta (tmp2),y
.9f94		c8		iny		                iny
.9f95		d6 00		dec $00,x	                dec 0,x
.9f97		d0 f7		bne $9f90	                bne _partial
.9f99						_done:
.9f99		8a		txa		                txa
.9f9a		18		clc		                clc
.9f9b		69 06		adc #$06	                adc #6
.9f9d		aa		tax		                tax
.9f9e		60		rts		z_cmove:        rts
.9f9f						xt_cmove_up:
.9f9f		20 b6 d7	jsr $d7b6	                jsr underflow_3
.9fa2		b5 02		lda $02,x	                lda 2,x
.9fa4		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.9fa6		b5 03		lda $03,x	                lda 3,x
.9fa8		18		clc		                clc
.9fa9		75 01		adc $01,x	                adc 1,x
.9fab		85 28		sta $28		                sta tmp2+1      ; point to last page of destination
.9fad		b5 04		lda $04,x	                lda 4,x
.9faf		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.9fb1		b5 05		lda $05,x	                lda 5,x
.9fb3		18		clc		                clc
.9fb4		75 01		adc $01,x	                adc 1,x
.9fb6		85 26		sta $26		                sta tmp1+1      ; point to last page of source
.9fb8		f6 01		inc $01,x	                inc 1,x         ; allows us to use bne with dec 1,x below
.9fba		b4 00		ldy $00,x	                ldy 0,x         ; length of last page
.9fbc		f0 0e		beq $9fcc	                beq _nopartial
.9fbe						_outerloop:
.9fbe		88		dey		                dey
.9fbf		f0 07		beq $9fc8	                beq _finishpage
.9fc1						_innerloop:
.9fc1		b1 25		lda ($25),y	                lda (tmp1),y
.9fc3		91 27		sta ($27),y	                sta (tmp2),y
.9fc5		88		dey		                dey
.9fc6		d0 f9		bne $9fc1	                bne _innerloop
.9fc8						_finishpage:
.9fc8		b2 25		lda ($25)	                lda (tmp1)      ; handle y = 0 separately
.9fca		92 27		sta ($27)	                sta (tmp2)
.9fcc						_nopartial:
.9fcc		c6 26		dec $26		                dec tmp1+1      ; back up to previous pages
.9fce		c6 28		dec $28		                dec tmp2+1
.9fd0		d6 01		dec $01,x	                dec 1,x
.9fd2		d0 ea		bne $9fbe	                bne _outerloop
.9fd4		8a		txa		                txa
.9fd5		18		clc		                clc
.9fd6		69 06		adc #$06	                adc #6
.9fd8		aa		tax		                tax
.9fd9		60		rts		z_cmove_up:     rts
.9fda						xt_compare:
.9fda		20 bb d7	jsr $d7bb	                jsr underflow_4
.9fdd		b5 02		lda $02,x	                lda 2,x
.9fdf		85 27		sta $27		                sta tmp2
.9fe1		b5 03		lda $03,x	                lda 3,x
.9fe3		85 28		sta $28		                sta tmp2+1
.9fe5		b5 06		lda $06,x	                lda 6,x
.9fe7		85 25		sta $25		                sta tmp1
.9fe9		b5 07		lda $07,x	                lda 7,x
.9feb		85 26		sta $26		                sta tmp1+1
.9fed						_compare_loop:
.9fed		b5 04		lda $04,x	                lda 4,x
.9fef		15 05		ora $05,x	                ora 5,x
.9ff1		f0 2c		beq $a01f	                beq _str1_done
.9ff3		b5 00		lda $00,x	                lda 0,x
.9ff5		15 01		ora $01,x	                ora 1,x
.9ff7		f0 3a		beq $a033	                beq _greater    ; Str2 empty first
.9ff9		b2 25		lda ($25)	                lda (tmp1)
.9ffb		d2 27		cmp ($27)	                cmp (tmp2)
.9ffd		90 26		bcc $a025	                bcc _less
.9fff		d0 32		bne $a033	                bne _greater
.a001		e6 25		inc $25		                inc tmp1
.a003		d0 02		bne $a007	                bne +
.a005		e6 26		inc $26		                inc tmp1+1
.a007						+
.a007		e6 27		inc $27		                inc tmp2
.a009		d0 02		bne $a00d	                bne +
.a00b		e6 28		inc $28		                inc tmp2+1
.a00d						+
.a00d		b5 04		lda $04,x	                lda 4,x
.a00f		d0 02		bne $a013	                bne +
.a011		d6 05		dec $05,x	                dec 5,x
.a013						+
.a013		d6 04		dec $04,x	                dec 4,x
.a015		b5 00		lda $00,x	                lda 0,x
.a017		d0 02		bne $a01b	                bne +
.a019		d6 01		dec $01,x	                dec 1,x
.a01b						+
.a01b		d6 00		dec $00,x	                dec 0,x
.a01d		80 ce		bra $9fed	                bra _compare_loop
.a01f						_str1_done:
.a01f		b5 00		lda $00,x	                lda 0,x
.a021		15 01		ora $01,x	                ora 1,x
.a023		f0 08		beq $a02d	                beq _equal      ; Both out of letters
.a025						_less:
.a025		a9 ff		lda #$ff	                lda #$FF
.a027		95 06		sta $06,x	                sta 6,x
.a029		95 07		sta $07,x	                sta 7,x
.a02b		80 0c		bra $a039	                bra _done
.a02d						_equal:
.a02d		74 06		stz $06,x	                stz 6,x
.a02f		74 07		stz $07,x	                stz 7,x
.a031		80 06		bra $a039	                bra _done
.a033						_greater:
.a033		a9 01		lda #$01	                lda #1
.a035		95 06		sta $06,x	                sta 6,x
.a037		74 07		stz $07,x	                stz 7,x
.a039						_done:
.a039		8a		txa		                txa
.a03a		18		clc		                clc
.a03b		69 06		adc #$06	                adc #6
.a03d		aa		tax		                tax
.a03e		60		rts		z_compare:      rts
.a03f						xt_minus_leading:
.a03f		20 b1 d7	jsr $d7b1	                jsr underflow_2
.a042						_loop:
.a042		b5 00		lda $00,x	                lda 0,x
.a044		15 01		ora $01,x	                ora 1,x
.a046		f0 0f		beq $a057	                beq _done
.a048		a1 02		lda ($02,x)	                lda (2,x)               ; get first character
.a04a		20 9f d7	jsr $d79f	                jsr is_whitespace
.a04d		90 08		bcc $a057	                bcc _done
.a04f		20 ad 9d	jsr $9dad	                jsr xt_one              ; ( addr u 1 )
.a052		20 34 a1	jsr $a134	                jsr xt_slash_string     ; ( addr+ u-1 )
.a055		80 eb		bra $a042	                bra _loop
.a057						_done:
.a057						z_minus_leading:
.a057		60		rts		                rts
.a058						xt_minus_trailing:
.a058		20 b1 d7	jsr $d7b1	                jsr underflow_2
.a05b		b5 00		lda $00,x	                lda 0,x         ; LSB of n
.a05d		15 01		ora $01,x	                ora 1,x         ; MSB of n
.a05f		f0 33		beq $a094	                beq _done
.a061		18		clc		                clc
.a062		b5 02		lda $02,x	                lda 2,x         ; LSB of addr
.a064		75 00		adc $00,x	                adc 0,x
.a066		85 25		sta $25		                sta tmp1
.a068		b5 03		lda $03,x	                lda 3,x         ; MSB of addr
.a06a		75 01		adc $01,x	                adc 1,x
.a06c		85 26		sta $26		                sta tmp1+1
.a06e		a5 25		lda $25		                lda tmp1
.a070		d0 02		bne $a074	                bne +
.a072		c6 26		dec $26		                dec tmp1+1
.a074						+
.a074		c6 25		dec $25		                dec tmp1
.a076						_loop:
.a076		b2 25		lda ($25)	                lda (tmp1)
.a078		c9 20		cmp #$20	                cmp #AscSP
.a07a		d0 18		bne $a094	                bne _done
.a07c		a5 25		lda $25		                lda tmp1
.a07e		d0 02		bne $a082	                bne +
.a080		c6 26		dec $26		                dec tmp1+1
.a082						+
.a082		c6 25		dec $25		                dec tmp1
.a084		b5 00		lda $00,x	                lda 0,x
.a086		d0 02		bne $a08a	                bne +
.a088		d6 01		dec $01,x	                dec 1,x
.a08a						+
.a08a		d6 00		dec $00,x	                dec 0,x
.a08c		b5 00		lda $00,x	                lda 0,x
.a08e		15 01		ora $01,x	                ora 1,x
.a090		f0 02		beq $a094	                beq _done       ; Count has reached zero - we're done!
.a092		80 e2		bra $a076	                bra _loop
.a094						_done:
.a094						z_minus_trailing:
.a094		60		rts		                rts
.a095						xt_search:
.a095		20 bb d7	jsr $d7bb	                jsr underflow_4
.a098		b5 00		lda $00,x	                lda 0,x
.a09a		15 01		ora $01,x	                ora 1,x
.a09c		d0 0b		bne $a0a9	                bne _start_search
.a09e		e8		inx		                inx             ; Remove u2
.a09f		e8		inx		                inx
.a0a0		a9 ff		lda #$ff	                lda #$FF        ; Turn addr2 into a true flag
.a0a2		95 00		sta $00,x	                sta 0,x
.a0a4		95 01		sta $01,x	                sta 1,x
.a0a6		4c 33 a1	jmp $a133	                jmp z_search
.a0a9						_start_search:
.a0a9		20 13 9e	jsr $9e13	                jsr xt_zero
.a0ac						_search_loop:
.a0ac		18		clc		                clc
.a0ad		b5 00		lda $00,x	                lda 0,x
.a0af		75 02		adc $02,x	                adc 2,x
.a0b1		85 25		sta $25		                sta tmp1
.a0b3		b5 01		lda $01,x	                lda 1,x
.a0b5		75 03		adc $03,x	                adc 3,x
.a0b7		d5 07		cmp $07,x	                cmp 7,x
.a0b9		90 12		bcc $a0cd	                bcc _init_comparison ; Obviously less
.a0bb		d0 06		bne $a0c3	                bne _not_found
.a0bd		b5 06		lda $06,x	                lda 6,x
.a0bf		c5 25		cmp $25		                cmp tmp1
.a0c1		b0 0a		bcs $a0cd	                bcs _init_comparison
.a0c3						_not_found:
.a0c3		e8		inx		                inx             ; Remove offset
.a0c4		e8		inx		                inx
.a0c5		e8		inx		                inx             ; Remove u2
.a0c6		e8		inx		                inx
.a0c7		74 00		stz $00,x	                stz 0,x         ; Turn addr2 into a false flag
.a0c9		74 01		stz $01,x	                stz 1,x
.a0cb		80 66		bra $a133	                bra z_search
.a0cd						_init_comparison:
.a0cd		18		clc		                clc
.a0ce		b5 08		lda $08,x	                lda 8,x
.a0d0		75 00		adc $00,x	                adc 0,x
.a0d2		85 25		sta $25		                sta tmp1
.a0d4		b5 09		lda $09,x	                lda 9,x
.a0d6		75 01		adc $01,x	                adc 1,x
.a0d8		85 26		sta $26		                sta tmp1+1
.a0da		b5 04		lda $04,x	                lda 4,x
.a0dc		85 27		sta $27		                sta tmp2
.a0de		b5 05		lda $05,x	                lda 5,x
.a0e0		85 28		sta $28		                sta tmp2+1
.a0e2		b5 02		lda $02,x	                lda 2,x
.a0e4		85 29		sta $29		                sta tmp3
.a0e6		b5 03		lda $03,x	                lda 3,x
.a0e8		85 2a		sta $2a		                sta tmp3+1
.a0ea						_comparison_loop:
.a0ea		b2 25		lda ($25)	                lda (tmp1)
.a0ec		d2 27		cmp ($27)	                cmp (tmp2)
.a0ee		f0 05		beq $a0f5	                beq _letters_match
.a0f0		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.a0f3		80 b7		bra $a0ac	                bra _search_loop
.a0f5						_letters_match:
.a0f5		e6 25		inc $25		                inc tmp1
.a0f7		d0 02		bne $a0fb	                bne +
.a0f9		e6 26		inc $26		                inc tmp1+1
.a0fb						+
.a0fb		e6 27		inc $27		                inc tmp2
.a0fd		d0 02		bne $a101	                bne +
.a0ff		e6 28		inc $28		                inc tmp2+1
.a101						+
.a101		a5 29		lda $29		                lda tmp3
.a103		d0 02		bne $a107	                bne +
.a105		c6 2a		dec $2a		                dec tmp3+1
.a107						+
.a107		c6 29		dec $29		                dec tmp3
.a109		a5 29		lda $29		                lda tmp3
.a10b		05 2a		ora $2a		                ora tmp3+1
.a10d		d0 db		bne $a0ea	                bne _comparison_loop ; Check the next letter
.a10f		18		clc		                clc
.a110		b5 00		lda $00,x	                lda 0,x
.a112		75 08		adc $08,x	                adc 8,x
.a114		95 08		sta $08,x	                sta 8,x
.a116		b5 01		lda $01,x	                lda 1,x
.a118		75 09		adc $09,x	                adc 9,x
.a11a		95 09		sta $09,x	                sta 9,x
.a11c		38		sec		                sec
.a11d		b5 06		lda $06,x	                lda 6,x
.a11f		f5 00		sbc $00,x	                sbc 0,x
.a121		95 06		sta $06,x	                sta 6,x
.a123		b5 07		lda $07,x	                lda 7,x
.a125		f5 01		sbc $01,x	                sbc 1,x
.a127		95 07		sta $07,x	                sta 7,x
.a129		e8		inx		                inx             ; drop offset
.a12a		e8		inx		                inx
.a12b		e8		inx		                inx             ; drop u2
.a12c		e8		inx		                inx
.a12d		a9 ff		lda #$ff	                lda #$FF
.a12f		95 00		sta $00,x	                sta 0,x         ; Turn addr2 into a true flag.
.a131		95 01		sta $01,x	                sta 1,x
.a133		60		rts		z_search:       rts
.a134						xt_slash_string:
.a134		20 b6 d7	jsr $d7b6	                jsr underflow_3
.a137		18		clc		                clc             ; 3OS+TOS
.a138		b5 00		lda $00,x	                lda 0,x
.a13a		75 04		adc $04,x	                adc 4,x
.a13c		95 04		sta $04,x	                sta 4,x
.a13e		b5 01		lda $01,x	                lda 1,x
.a140		75 05		adc $05,x	                adc 5,x
.a142		95 05		sta $05,x	                sta 5,x
.a144		38		sec		                sec             ; NOS-TOS
.a145		b5 02		lda $02,x	                lda 2,x
.a147		f5 00		sbc $00,x	                sbc 0,x
.a149		95 02		sta $02,x	                sta 2,x
.a14b		b5 03		lda $03,x	                lda 3,x
.a14d		f5 01		sbc $01,x	                sbc 1,x
.a14f		95 03		sta $03,x	                sta 3,x
.a151		e8		inx		                inx
.a152		e8		inx		                inx
.a153		60		rts		z_slash_string: rts
.a154						xt_sliteral:
.a154		20 b1 d7	jsr $d7b1	                jsr underflow_2
.a157		20 bd 97	jsr $97bd	                jsr cmpl_jump_later
.a15a		20 88 93	jsr $9388	                jsr xt_to_r
.a15d		20 1b 89	jsr $891b	                jsr xt_here
.a160		20 4a 92	jsr $924a	                jsr xt_swap
.a163		20 a0 86	jsr $86a0	                jsr xt_dup
.a166		20 27 82	jsr $8227	                jsr xt_allot            ; reserve u bytes for string
.a169		20 1b 89	jsr $891b	                jsr xt_here
.a16c		20 ee 8e	jsr $8eee	                jsr xt_r_from
.a16f		20 34 92	jsr $9234	                jsr xt_store            ; point jmp past string
.a172		20 c7 93	jsr $93c7	                jsr xt_two_dup
.a175		20 b1 94	jsr $94b1	                jsr xt_two_to_r
.a178		20 00 8c	jsr $8c00	                jsr xt_move             ; copy u bytes from addr -> addr'
.a17b		20 37 94	jsr $9437	                jsr xt_two_r_from
.a17e						cmpl_sliteral:
.a17e						cmpl_two_literal:
.a17e		a0 a1		ldy #$a1	                ldy #>sliteral_runtime
.a180		a9 98		lda #$98	                lda #<sliteral_runtime
.a182		20 9c 97	jsr $979c	                jsr cmpl_subroutine
.a185		b4 03		ldy $03,x	                ldy 3,x                ; address MSB
.a187		b5 02		lda $02,x	                lda 2,x                ; address LSB
.a189		20 a8 97	jsr $97a8	                jsr cmpl_word
.a18c		b4 01		ldy $01,x	                ldy 1,x                ; length MSB
.a18e		b5 00		lda $00,x	                lda 0,x                ; length LSB
.a190		20 a8 97	jsr $97a8	                jsr cmpl_word
.a193		e8		inx		                inx
.a194		e8		inx		                inx
.a195		e8		inx		                inx
.a196		e8		inx		                inx
.a197		60		rts		z_sliteral:     rts
.a198						sliteral_runtime:
.a198		ca		dex		                dex
.a199		ca		dex		                dex
.a19a		ca		dex		                dex
.a19b		ca		dex		                dex
.a19c		68		pla		                pla
.a19d		85 25		sta $25		                sta tmp1        ; LSB of address
.a19f		7a		ply		                ply
.a1a0		84 26		sty $26		                sty tmp1+1      ; MSB of address
.a1a2		18		clc		                clc
.a1a3		69 04		adc #$04	                adc #4
.a1a5		90 01		bcc $a1a8	                bcc +
.a1a7		c8		iny		                iny
.a1a8						+
.a1a8		5a		phy		                phy
.a1a9		48		pha		                pha
.a1aa		a0 01		ldy #$01	                ldy #1          ; adjust for JSR/RTS mechanics on 65c02
.a1ac		b1 25		lda ($25),y	                lda (tmp1),y
.a1ae		95 02		sta $02,x	                sta 2,x         ; LSB of address
.a1b0		c8		iny		                iny
.a1b1		b1 25		lda ($25),y	                lda (tmp1),y
.a1b3		95 03		sta $03,x	                sta 3,x         ; MSB of address
.a1b5		c8		iny		                iny
.a1b6		b1 25		lda ($25),y	                lda (tmp1),y
.a1b8		95 00		sta $00,x	                sta 0,x         ; LSB of length
.a1ba		c8		iny		                iny
.a1bb		b1 25		lda ($25),y	                lda (tmp1),y
.a1bd		95 01		sta $01,x	                sta 1,x         ; MSB of length
.a1bf		60		rts		                rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/disasm.asm

.a1c0						xt_disasm:
.a1c0		20 b1 d7	jsr $d7b1	                jsr underflow_2
.a1c3		20 c7 a1	jsr $a1c7	                jsr disassembler
.a1c6		60		rts		z_disasm:       rts
.a1c7						disassembler:
.a1c7		64 32		stz $32		                stz scratch+5   ; flag indicating whether we're arriving at sliteral (vs 2literal)
.a1c9		20 3a 84	jsr $843a	                jsr xt_cr       ; ( addr u )
.a1cc						_byte_loop:
.a1cc		20 05 8d	jsr $8d05	                jsr xt_over     ; ( addr u addr )
.a1cf		20 fc 94	jsr $94fc	                jsr xt_u_dot    ; ( addr u )
.a1d2		20 c5 91	jsr $91c5	                jsr xt_space
.a1d5		a9 cf		lda #$cf	                lda #<oc_index_table
.a1d7		85 27		sta $27		                sta tmp2
.a1d9		a9 b3		lda #$b3	                lda #>oc_index_table
.a1db		85 28		sta $28		                sta tmp2+1
.a1dd		a1 02		lda ($02,x)	                lda (2,x)       ; get opcode that addr points to
.a1df		85 2d		sta $2d		                sta scratch     ; Save opcode
.a1e1		0a		asl a		                asl             ; multiply by two for offset
.a1e2		90 02		bcc $a1e6	                bcc +
.a1e4		e6 28		inc $28		                inc tmp2+1      ; we're on second page
.a1e6						+
.a1e6		a8		tay		                tay             ; use Y as the index
.a1e7		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB
.a1e9		85 29		sta $29		                sta tmp3
.a1eb		48		pha		                pha
.a1ec		c8		iny		                iny
.a1ed		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB
.a1ef		85 2a		sta $2a		                sta tmp3+1
.a1f1		48		pha		                pha
.a1f2		b2 29		lda ($29)	                lda (tmp3)
.a1f4		a8		tay		                tay                     ; save copy of lengths byte
.a1f5		10 3c		bpl $a233	                bpl _no_operand         ; bit 7 clear, single-byte instruction
.a1f7		20 13 9e	jsr $9e13	                jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
.a1fa		f6 04		inc $04,x	                inc 4,x
.a1fc		d0 02		bne $a200	                bne +
.a1fe		f6 05		inc $05,x	                inc 5,x                 ; ( addr+1 u 0 )
.a200						+
.a200		b5 02		lda $02,x	                lda 2,x
.a202		d0 02		bne $a206	                bne +
.a204		d6 03		dec $03,x	                dec 3,x
.a206						+
.a206		d6 02		dec $02,x	                dec 2,x                 ; ( addr+1 u-1 0 )
.a208		a1 04		lda ($04,x)	                lda (4,x)
.a20a		95 00		sta $00,x	                sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
.a20c		85 2e		sta $2e		                sta scratch+1           ; Save a copy in the scratch buffer
.a20e		98		tya		                tya                     ; retrieve copy of lengths byte
.a20f		2a		rol a		                rol                     ; shift bit 6 to bit 7
.a210		10 14		bpl $a226	                bpl _print_operand
.a212		f6 04		inc $04,x	                inc 4,x
.a214		d0 02		bne $a218	                bne +
.a216		f6 05		inc $05,x	                inc 5,x                 ; ( addr+2 u-1 LSB )
.a218						+
.a218		b5 02		lda $02,x	                lda 2,x
.a21a		d0 02		bne $a21e	                bne +
.a21c		d6 03		dec $03,x	                dec 3,x
.a21e						+
.a21e		d6 02		dec $02,x	                dec 2,x                 ; ( addr+2 u-2 LSB )
.a220		a1 04		lda ($04,x)	                lda (4,x)
.a222		95 01		sta $01,x	                sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
.a224		85 2f		sta $2f		                sta scratch+2           ; Save a copy in the scratch buffer
.a226						_print_operand:
.a226		ca		dex		                dex
.a227		ca		dex		                dex
.a228		a9 05		lda #$05	                lda #5
.a22a		95 00		sta $00,x	                sta 0,x
.a22c		74 01		stz $01,x	                stz 1,x                 ; ( addr+n u-n opr 5 )
.a22e		20 08 95	jsr $9508	                jsr xt_u_dot_r          ; U.R ( addr+n u-n )
.a231		80 0b		bra $a23e	                bra _print_mnemonic
.a233						_no_operand:
.a233		ca		dex		                dex
.a234		ca		dex		                dex
.a235		a9 05		lda #$05	                lda #5
.a237		95 00		sta $00,x	                sta 0,x
.a239		74 01		stz $01,x	                stz 1,x                 ; ( addr u 5 )
.a23b		20 cb 91	jsr $91cb	                jsr xt_spaces           ; ( addr u )
.a23e						_print_mnemonic:
.a23e		20 c5 91	jsr $91c5	                jsr xt_space
.a241		ca		dex		                dex
.a242		ca		dex		                dex                     ; ( addr u ? )
.a243		68		pla		                pla                     ; MSB
.a244		95 01		sta $01,x	                sta 1,x                 ; ( addr u MSB )
.a246		68		pla		                pla                     ; LSB
.a247		95 00		sta $00,x	                sta 0,x                 ; ( addr u addr-o )
.a249		20 26 84	jsr $8426	                jsr xt_count            ; ( addr u addr-o u-o )
.a24c		74 01		stz $01,x	                stz 1,x                 ; paranoid
.a24e		b5 00		lda $00,x	                lda 0,x
.a250		29 07		and #$07	                and #%00000111          ; ( addr u addr-o u-o )
.a252		95 00		sta $00,x	                sta 0,x
.a254		20 d1 94	jsr $94d1	                jsr xt_type             ; ( addr u )
.a257		a5 2d		lda $2d		                lda scratch
.a259		c9 20		cmp #$20	                cmp #OpJSR
.a25b		d0 15		bne $a272	                bne _not_jsr
.a25d		ca		dex		                dex
.a25e		ca		dex		                dex
.a25f		a9 05		lda #$05	                lda #5
.a261		95 00		sta $00,x	                sta 0,x
.a263		74 01		stz $01,x	                stz 1,x
.a265		20 cb 91	jsr $91cb	                jsr xt_spaces
.a268		20 43 a3	jsr $a343	                jsr disasm_special
.a26b		b0 70		bcs $a2dd	                bcs _printing_done
.a26d		20 23 a3	jsr $a323	                jsr disasm_jsr
.a270		b0 6b		bcs $a2dd	                bcs _printing_done
.a272						_not_jsr:
.a272		c9 4c		cmp #$4c	                cmp #OpJMP
.a274		d0 2d		bne $a2a3	                bne _not_jmp
.a276		a5 2e		lda $2e		                lda scratch+1   ; Copy the pointer.
.a278		85 30		sta $30		                sta scratch+3
.a27a		a5 2f		lda $2f		                lda scratch+2
.a27c		85 31		sta $31		                sta scratch+4
.a27e		b2 30		lda ($30)	                lda (scratch+3)
.a280		c9 20		cmp #$20	                cmp #OpJSR          ; check for JSR
.a282		d0 59		bne $a2dd	                bne _printing_done
.a284		e6 30		inc $30		                inc scratch+3
.a286		d0 02		bne $a28a	                bne +
.a288		e6 31		inc $31		                inc scratch+4
.a28a						+
.a28a		b2 30		lda ($30)	                lda (scratch+3)
.a28c		c9 98		cmp #$98	                cmp #<sliteral_runtime
.a28e		d0 4d		bne $a2dd	                bne _printing_done
.a290		e6 30		inc $30		                inc scratch+3
.a292		d0 02		bne $a296	                bne +
.a294		e6 31		inc $31		                inc scratch+4
.a296						+
.a296		b2 30		lda ($30)	                lda (scratch+3)
.a298		c9 a1		cmp #$a1	                cmp #>sliteral_runtime
.a29a		d0 41		bne $a2dd	                bne _printing_done
.a29c		c6 32		dec $32		                dec scratch+5                   ; flag for next go round
.a29e		20 f9 a2	jsr $a2f9	                jsr disasm_sliteral_jump
.a2a1		80 3a		bra $a2dd	                bra _printing_done
.a2a3						_not_jmp:
.a2a3		c9 80		cmp #$80	                cmp #OpBRA            ; is it bra?
.a2a5		f0 06		beq $a2ad	                beq _is_rel
.a2a7		29 1f		and #$1f	                and #$1F
.a2a9		49 10		eor #$10	                eor #$10            ; do bottom five bits match xxx10000 ?
.a2ab		d0 30		bne $a2dd	                bne _printing_done
.a2ad						_is_rel:
.a2ad		a0 76		ldy #$76	                ldy #'v'            ; we'll indicate branch forward or back with v or ^
.a2af		ca		dex		                dex
.a2b0		ca		dex		                dex
.a2b1		74 01		stz $01,x	                stz 1,x
.a2b3		a5 2e		lda $2e		                lda scratch+1
.a2b5		95 00		sta $00,x	                sta 0,x
.a2b7		10 04		bpl $a2bd	                bpl +
.a2b9		d6 01		dec $01,x	                dec 1,x             ; for negative offsets extend the sign bit so add works out
.a2bb		a0 5e		ldy #$5e	                ldy #'^'            ; it's a backward branch
.a2bd		38		sec		+               sec                 ; start counting from address after opcode
.a2be		75 04		adc $04,x	                adc 4,x
.a2c0		95 00		sta $00,x	                sta 0,x
.a2c2		b5 01		lda $01,x	                lda 1,x
.a2c4		75 05		adc $05,x	                adc 5,x
.a2c6		95 01		sta $01,x	                sta 1,x
.a2c8		5a		phy		                phy                 ; save the direction indicator
.a2c9		ca		dex		                dex
.a2ca		ca		dex		                dex
.a2cb		a9 09		lda #$09	                lda #9
.a2cd		95 00		sta $00,x	                sta 0,x
.a2cf		74 01		stz $01,x	                stz 1,x
.a2d1		20 08 95	jsr $9508	                jsr xt_u_dot_r      ; print the destination with 5 leading spaces
.a2d4		a9 20		lda #$20	                lda #AscSP          ; print space and branch direction indicator
.a2d6		20 c5 86	jsr $86c5	                jsr emit_a
.a2d9		68		pla		                pla
.a2da		20 c5 86	jsr $86c5	                jsr emit_a
.a2dd						_printing_done:
.a2dd		20 3a 84	jsr $843a	                jsr xt_cr
.a2e0		f6 02		inc $02,x	                inc 2,x
.a2e2		d0 02		bne $a2e6	                bne +
.a2e4		f6 03		inc $03,x	                inc 3,x                 ; ( addr+1 u )
.a2e6						+
.a2e6		20 dd 8c	jsr $8cdd	                jsr xt_one_minus        ; ( addr+1 u-1 )
.a2e9		b5 00		lda $00,x	                lda 0,x                 ; All done?
.a2eb		15 01		ora $01,x	                ora 1,x
.a2ed		f0 07		beq $a2f6	                beq _done
.a2ef		b5 01		lda $01,x	                lda 1,x                 ; Catch mid-instruction ranges
.a2f1		30 03		bmi $a2f6	                bmi _done
.a2f3		4c cc a1	jmp $a1cc	                jmp _byte_loop          ; out of range for BRA
.a2f6						_done:
.a2f6		4c bf 93	jmp $93bf	                jmp xt_two_drop         ; JSR/RTS
.a2f9						disasm_sliteral_jump:
.a2f9		20 4a 92	jsr $924a	                jsr xt_swap
.a2fc		ca		dex		                dex
.a2fd		ca		dex		                dex
.a2fe		a5 2e		lda $2e		                lda scratch+1
.a300		95 00		sta $00,x	                sta 0,x
.a302		a5 2f		lda $2f		                lda scratch+2
.a304		95 01		sta $01,x	                sta 1,x
.a306		20 4a 92	jsr $924a	                jsr xt_swap
.a309		20 e4 8b	jsr $8be4	                jsr xt_minus
.a30c		20 dd 8c	jsr $8cdd	                jsr xt_one_minus
.a30f		20 e4 8b	jsr $8be4	                jsr xt_minus
.a312		ca		dex		                dex
.a313		ca		dex		                dex
.a314		a5 2e		lda $2e		                lda scratch+1
.a316		95 00		sta $00,x	                sta 0,x
.a318		a5 2f		lda $2f		                lda scratch+2
.a31a		95 01		sta $01,x	                sta 1,x
.a31c		20 dd 8c	jsr $8cdd	                jsr xt_one_minus
.a31f		20 4a 92	jsr $924a	                jsr xt_swap ; ( new_addr new_n )
.a322		60		rts		                rts
.a323						disasm_jsr:
.a323		ca		dex		                dex
.a324		ca		dex		                dex
.a325		a5 2e		lda $2e		                lda scratch+1
.a327		95 00		sta $00,x	                sta 0,x
.a329		a5 2f		lda $2f		                lda scratch+2
.a32b		95 01		sta $01,x	                sta 1,x
.a32d		20 ca 9b	jsr $9bca	                jsr xt_int_to_name
.a330		b5 00		lda $00,x	                lda 0,x
.a332		15 01		ora $01,x	                ora 1,x
.a334		f0 08		beq $a33e	                beq _no_nt
.a336		20 6d 9c	jsr $9c6d	                jsr xt_name_to_string
.a339		20 d1 94	jsr $94d1	                jsr xt_type
.a33c		38		sec		                sec
.a33d		60		rts		                rts
.a33e						_no_nt:
.a33e		20 bf 93	jsr $93bf	                jsr xt_two_drop
.a341		18		clc		                clc
.a342		60		rts		                rts
.a343						disasm_special:
.a343		a0 2c		ldy #$2c	                ldy #(_end_handlers - _special_handlers - 4)
.a345		b9 d1 a3	lda $a3d1,y	_check:         lda _special_handlers,y
.a348		c5 2e		cmp $2e		                cmp scratch+1
.a34a		d0 07		bne $a353	                bne _next
.a34c		b9 d2 a3	lda $a3d2,y	                lda _special_handlers+1,y
.a34f		c5 2f		cmp $2f		                cmp scratch+2
.a351		f0 08		beq $a35b	                beq _found_handler
.a353		88		dey		_next:          dey
.a354		88		dey		                dey
.a355		88		dey		                dey
.a356		88		dey		                dey
.a357		10 ec		bpl $a345	                bpl _check
.a359		18		clc		                clc
.a35a		60		rts		                rts
.a35b						_found_handler:
.a35b		a5 32		lda $32		                lda scratch+5               ; are we expecting sliteral?
.a35d		f0 04		beq $a363	                beq +
.a35f		64 32		stz $32		                stz scratch+5               ; yes, skip 2literal and match again
.a361		80 f0		bra $a353	                bra _next
.a363						+
.a363		b9 d4 a3	lda $a3d4,y	                lda _special_handlers+3,y   ; payload + prefix
.a366		48		pha		                pha                         ; stash a copy for payload later
.a367		4a		lsr a		                lsr
.a368		4a		lsr a		                lsr
.a369		f0 06		beq $a371	                beq _no_prefix
.a36b		18		clc		                clc
.a36c		69 20		adc #$20	                adc #32
.a36e		20 c5 86	jsr $86c5	                jsr emit_a
.a371						_no_prefix:
.a371		b9 d3 a3	lda $a3d3,y	                lda _special_handlers+2,y   ; string index
.a374		20 e8 d7	jsr $d7e8	                jsr print_string_no_lf
.a377		68		pla		                pla
.a378		29 03		and #$03	                and #3                      ; payload is 0, 1 or 2 words
.a37a		f0 0f		beq $a38b	                beq _done
.a37c		c9 03		cmp #$03	                cmp #3                      ; but 3 means a double-word
.a37e		d0 03		bne $a383	                bne _show_payload
.a380		4c a5 a3	jmp $a3a5	                jmp _print_2literal
.a383						_show_payload:
.a383		48		pha		                pha
.a384		20 8d a3	jsr $a38d	                jsr _print_literal
.a387		68		pla		                pla
.a388		3a		dec a		                dea
.a389		d0 f8		bne $a383	                bne _show_payload
.a38b		38		sec		_done:          sec
.a38c		60		rts		                rts
.a38d						_print_literal:
.a38d		20 4a 92	jsr $924a	                jsr xt_swap ; switch to (u addr)
.a390		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.a393		20 a0 86	jsr $86a0	                jsr xt_dup
.a396		20 3e 99	jsr $993e	                jsr xt_question ; Print the value at the address
.a399		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.a39c		20 4a 92	jsr $924a	                jsr xt_swap ; (addr+2 u)
.a39f		20 dd 8c	jsr $8cdd	                jsr xt_one_minus
.a3a2		4c dd 8c	jmp $8cdd	                jmp xt_one_minus ; (addr+2 u-2)
.a3a5						_print_2literal:
.a3a5		20 4a 92	jsr $924a	                jsr xt_swap
.a3a8		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.a3ab		20 a0 86	jsr $86a0	                jsr xt_dup
.a3ae		20 df 93	jsr $93df	                jsr xt_two_fetch
.a3b1		20 4a 92	jsr $924a	                jsr xt_swap             ; 2! / 2@ put MSW first; but 2literal writes LSW first
.a3b4		20 9c 9e	jsr $9e9c	                jsr xt_d_dot
.a3b7		18		clc		                clc
.a3b8		b5 00		lda $00,x	                lda 0,x
.a3ba		69 03		adc #$03	                adc #3
.a3bc		95 00		sta $00,x	                sta 0,x
.a3be		90 02		bcc $a3c2	                bcc +
.a3c0		f6 01		inc $01,x	                inc 1,x
.a3c2						+
.a3c2		20 4a 92	jsr $924a	                jsr xt_swap ; ( addr+4 u )
.a3c5		38		sec		                sec
.a3c6		b5 00		lda $00,x	                lda 0,x
.a3c8		e9 04		sbc #$04	                sbc #4
.a3ca		95 00		sta $00,x	                sta 0,x
.a3cc		b0 02		bcs $a3d0	                bcs +
.a3ce		d6 01		dec $01,x	                dec 1,x
.a3d0						+
.a3d0		60		rts		                rts
.a3d1						_special_handlers:
>a3d1		ac d7				    .word underflow_1
>a3d3		0c 44				        .byte str_disasm_sdc, 0 + ('1'-32)*4
>a3d5		b1 d7				    .word underflow_2
>a3d7		0c 48				        .byte str_disasm_sdc, 0 + ('2'-32)*4
>a3d9		b6 d7				    .word underflow_3
>a3db		0c 4c				        .byte str_disasm_sdc, 0 + ('3'-32)*4
>a3dd		bb d7				    .word underflow_4
>a3df		0c 50				        .byte str_disasm_sdc, 0 + ('4'-32)*4
>a3e1		3a 8a				    .word literal_runtime
>a3e3		0d 01				        .byte str_disasm_lit, 1
>a3e5		98 a1				    .word sliteral_runtime
>a3e7		0d ce				        .byte str_disasm_lit, 2 + ('S'-32)*4
>a3e9		98 a1				    .word sliteral_runtime                      ; 2literal and sliteral use the same runtime
>a3eb		0d 4b				        .byte str_disasm_lit, 3 + ('2'-32)*4    ; list is searched in reverse, put 2literal first
>a3ed		50 98				    .word zero_branch_runtime
>a3ef		0e 01				        .byte str_disasm_0bra, 1
>a3f1		d2 8a				    .word loop_runtime
>a3f3		0f 01				        .byte str_disasm_loop, 1
>a3f5		eb 8a				    .word plus_loop_runtime
>a3f7		0f 2d				        .byte str_disasm_loop, 1 + ('+'-32)*4
>a3f9		bc 85				    .word do_runtime
>a3fb		10 00				        .byte str_disasm_do, 0
>a3fd		a4 85				    .word question_do_runtime
>a3ff		10 7d				        .byte str_disasm_do, 1 + ('?'-32)*4
.a401						_end_handlers:
.a401						disassembler_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/assembler.asm

.a401						assembler:
.a401						xt_asm_adc_h:
.a401		a9 69		lda #$69	                lda #$69
.a403		4c 5c a7	jmp $a75c	                jmp asm_common
.a406						z_asm_adc_h:
.a406						xt_asm_adc_x:
.a406		a9 7d		lda #$7d	                lda #$7D
.a408		4c 5c a7	jmp $a75c	                jmp asm_common
.a40b						z_asm_adc_x:
.a40b						xt_asm_adc_y:
.a40b		a9 79		lda #$79	                lda #$79
.a40d		4c 5c a7	jmp $a75c	                jmp asm_common
.a410						z_asm_adc_y:
.a410						xt_asm_adc_z:
.a410		a9 65		lda #$65	                lda #$65
.a412		4c 5c a7	jmp $a75c	                jmp asm_common
.a415						z_asm_adc_z:
.a415						xt_asm_adc_zi:
.a415		a9 72		lda #$72	                lda #$72
.a417		4c 5c a7	jmp $a75c	                jmp asm_common
.a41a						z_asm_adc_zi:
.a41a						xt_asm_adc_ziy:
.a41a		a9 71		lda #$71	                lda #$71
.a41c		4c 5c a7	jmp $a75c	                jmp asm_common
.a41f						z_asm_adc_ziy:
.a41f						xt_asm_adc_zx:
.a41f		a9 75		lda #$75	                lda #$75
.a421		4c 5c a7	jmp $a75c	                jmp asm_common
.a424						z_asm_adc_zx:
.a424						xt_asm_adc_zxi:
.a424		a9 61		lda #$61	                lda #$61
.a426		4c 5c a7	jmp $a75c	                jmp asm_common
.a429						z_asm_adc_zxi:
.a429						xt_asm_and:
.a429		a9 2d		lda #$2d	                lda #$2D
.a42b		4c 5c a7	jmp $a75c	                jmp asm_common
.a42e						z_asm_and:
.a42e						xt_asm_and_h:
.a42e		a9 29		lda #$29	                lda #$29
.a430		4c 5c a7	jmp $a75c	                jmp asm_common
.a433						z_asm_and_h:
.a433						xt_asm_and_x:
.a433		a9 3d		lda #$3d	                lda #$3D
.a435		4c 5c a7	jmp $a75c	                jmp asm_common
.a438						z_asm_and_x:
.a438						xt_asm_and_y:
.a438		a9 39		lda #$39	                lda #$39
.a43a		4c 5c a7	jmp $a75c	                jmp asm_common
.a43d						z_asm_and_y:
.a43d						xt_asm_and_z:
.a43d		a9 25		lda #$25	                lda #$25
.a43f		4c 5c a7	jmp $a75c	                jmp asm_common
.a442						z_asm_and_z:
.a442						xt_asm_and_zi:
.a442		a9 32		lda #$32	                lda #$32
.a444		4c 5c a7	jmp $a75c	                jmp asm_common
.a447						z_asm_and_zi:
.a447						xt_asm_and_ziy:
.a447		a9 31		lda #$31	                lda #$31
.a449		4c 5c a7	jmp $a75c	                jmp asm_common
.a44c						z_asm_and_ziy:
.a44c						xt_asm_and_zx:
.a44c		a9 35		lda #$35	                lda #$35
.a44e		4c 5c a7	jmp $a75c	                jmp asm_common
.a451						z_asm_and_zx:
.a451						xt_asm_and_zxi:
.a451		a9 21		lda #$21	                lda #$21
.a453		4c 5c a7	jmp $a75c	                jmp asm_common
.a456						z_asm_and_zxi:
.a456						xt_asm_asl:
.a456		a9 0e		lda #$0e	                lda #$0E
.a458		4c 5c a7	jmp $a75c	                jmp asm_common
.a45b						z_asm_asl:
.a45b						xt_asm_asl_a:
.a45b		a9 0a		lda #$0a	                lda #$0A
.a45d		4c 5c a7	jmp $a75c	                jmp asm_common
.a460						z_asm_asl_a:
.a460						xt_asm_asl_x:
.a460		a9 1e		lda #$1e	                lda #$1E
.a462		4c 5c a7	jmp $a75c	                jmp asm_common
.a465						z_asm_asl_x:
.a465						xt_asm_asl_z:
.a465		a9 06		lda #$06	                lda #$06
.a467		4c 5c a7	jmp $a75c	                jmp asm_common
.a46a						z_asm_asl_z:
.a46a						xt_asm_asl_zx:
.a46a		a9 16		lda #$16	                lda #$16
.a46c		4c 5c a7	jmp $a75c	                jmp asm_common
.a46f						z_asm_asl_zx:
.a46f						xt_asm_bcc:
.a46f		a9 90		lda #$90	                lda #$90
.a471		4c 5c a7	jmp $a75c	                jmp asm_common
.a474						z_asm_bcc:
.a474						xt_asm_bcs:
.a474		a9 b0		lda #$b0	                lda #$B0
.a476		a0 02		ldy #$02	                ldy #2
.a478		4c 5c a7	jmp $a75c	                jmp asm_common
.a47b						z_asm_bcs:
.a47b						xt_asm_beq:
.a47b		a9 f0		lda #$f0	                lda #$F0
.a47d		4c 5c a7	jmp $a75c	                jmp asm_common
.a480						z_asm_beq:
.a480						xt_asm_bit:
.a480		a9 2c		lda #$2c	                lda #$2C
.a482		4c 5c a7	jmp $a75c	                jmp asm_common
.a485						z_asm_bit:
.a485						xt_asm_bit_h:
.a485		a9 89		lda #$89	                lda #$89
.a487		4c 5c a7	jmp $a75c	                jmp asm_common
.a48a						z_asm_bit_h:
.a48a						xt_asm_bit_x:
.a48a		a9 3c		lda #$3c	                lda #$3C
.a48c		4c 5c a7	jmp $a75c	                jmp asm_common
.a48f						z_asm_bit_x:
.a48f						xt_asm_bit_z:
.a48f		a9 24		lda #$24	                lda #$24
.a491		4c 5c a7	jmp $a75c	                jmp asm_common
.a494						z_asm_bit_z:
.a494						xt_asm_bit_zx:
.a494		a9 34		lda #$34	                lda #$34
.a496		4c 5c a7	jmp $a75c	                jmp asm_common
.a499						z_asm_bit_zx:
.a499						xt_asm_bmi:
.a499		a9 30		lda #$30	                lda #$30
.a49b		4c 5c a7	jmp $a75c	                jmp asm_common
.a49e						z_asm_bmi:
.a49e						xt_asm_bne:
.a49e		a9 d0		lda #$d0	                lda #$D0
.a4a0		4c 5c a7	jmp $a75c	                jmp asm_common
.a4a3						z_asm_bne:
.a4a3						xt_asm_bpl:
.a4a3		a9 10		lda #$10	                lda #$10
.a4a5		4c 5c a7	jmp $a75c	                jmp asm_common
.a4a8						z_asm_bpl:
.a4a8						xt_asm_bra:
.a4a8		a9 80		lda #$80	                lda #$80
.a4aa		4c 5c a7	jmp $a75c	                jmp asm_common
.a4ad						z_asm_bra:
.a4ad						xt_asm_brk:
.a4ad		a9 00		lda #$00	                lda #$00
.a4af		4c 5c a7	jmp $a75c	                jmp asm_common
.a4b2						z_asm_brk:
.a4b2						xt_asm_bvc:
.a4b2		a9 50		lda #$50	                lda #$50
.a4b4		4c 5c a7	jmp $a75c	                jmp asm_common
.a4b7						z_asm_bvc:
.a4b7						xt_asm_bvs:
.a4b7		a9 70		lda #$70	                lda #$70
.a4b9		4c 5c a7	jmp $a75c	                jmp asm_common
.a4bc						z_asm_bvs:
.a4bc						xt_asm_clc:
.a4bc		a9 18		lda #$18	                lda #$18
.a4be		4c 5c a7	jmp $a75c	                jmp asm_common
.a4c1						z_asm_clc:
.a4c1						xt_asm_cld:
.a4c1		a9 d8		lda #$d8	                lda #$D8
.a4c3		4c 5c a7	jmp $a75c	                jmp asm_common
.a4c6						z_asm_cld:
.a4c6						xt_asm_cli:
.a4c6		a9 58		lda #$58	                lda #$58
.a4c8		4c 5c a7	jmp $a75c	                jmp asm_common
.a4cb						z_asm_cli:
.a4cb						xt_asm_clv:
.a4cb		a9 b8		lda #$b8	                lda #$B8
.a4cd		4c 5c a7	jmp $a75c	                jmp asm_common
.a4d0						z_asm_clv:
.a4d0						xt_asm_cmp:
.a4d0		a9 cd		lda #$cd	                lda #$CD
.a4d2		4c 5c a7	jmp $a75c	                jmp asm_common
.a4d5						z_asm_cmp:
.a4d5						xt_asm_cmp_h:
.a4d5		a9 c9		lda #$c9	                lda #$C9
.a4d7		4c 5c a7	jmp $a75c	                jmp asm_common
.a4da						z_asm_cmp_h:
.a4da						xt_asm_cmp_x:
.a4da		a9 dd		lda #$dd	                lda #$DD
.a4dc		4c 5c a7	jmp $a75c	                jmp asm_common
.a4df						z_asm_cmp_x:
.a4df						xt_asm_cmp_y:
.a4df		a9 d9		lda #$d9	                lda #$D9
.a4e1		4c 5c a7	jmp $a75c	                jmp asm_common
.a4e4						z_asm_cmp_y:
.a4e4						xt_asm_cmp_z:
.a4e4		a9 c5		lda #$c5	                lda #$C5
.a4e6		4c 5c a7	jmp $a75c	                jmp asm_common
.a4e9						z_asm_cmp_z:
.a4e9						xt_asm_cmp_zi:
.a4e9		a9 d2		lda #$d2	                lda #$D2
.a4eb		4c 5c a7	jmp $a75c	                jmp asm_common
.a4ee						z_asm_cmp_zi:
.a4ee						xt_asm_cmp_ziy:
.a4ee		a9 d1		lda #$d1	                lda #$D1
.a4f0		4c 5c a7	jmp $a75c	                jmp asm_common
.a4f3						z_asm_cmp_ziy:
.a4f3						xt_asm_cmp_zx:
.a4f3		a9 d5		lda #$d5	                lda #$D5
.a4f5		4c 5c a7	jmp $a75c	                jmp asm_common
.a4f8						z_asm_cmp_zx:
.a4f8						xt_asm_cmp_zxi:
.a4f8		a9 c1		lda #$c1	                lda #$C1
.a4fa		4c 5c a7	jmp $a75c	                jmp asm_common
.a4fd						z_asm_cmp_zxi:
.a4fd						xt_asm_cpx:
.a4fd		a9 ec		lda #$ec	                lda #$EC
.a4ff		4c 5c a7	jmp $a75c	                jmp asm_common
.a502						z_asm_cpx:
.a502						xt_asm_cpx_h:
.a502		a9 e0		lda #$e0	                lda #$E0
.a504		4c 5c a7	jmp $a75c	                jmp asm_common
.a507						z_asm_cpx_h:
.a507						xt_asm_cpx_z:
.a507		a9 e4		lda #$e4	                lda #$E4
.a509		4c 5c a7	jmp $a75c	                jmp asm_common
.a50c						z_asm_cpx_z:
.a50c						xt_asm_cpy:
.a50c		a9 cc		lda #$cc	                lda #$CC
.a50e		a0 03		ldy #$03	                ldy #3
.a510		4c 5c a7	jmp $a75c	                jmp asm_common
.a513						z_asm_cpy:
.a513						xt_asm_cpy_h:
.a513		a9 c0		lda #$c0	                lda #$C0
.a515		4c 5c a7	jmp $a75c	                jmp asm_common
.a518						z_asm_cpy_h:
.a518						xt_asm_cpy_z:
.a518		a9 c4		lda #$c4	                lda #$C4
.a51a		4c 5c a7	jmp $a75c	                jmp asm_common
.a51d						z_asm_cpy_z:
.a51d						xt_asm_dec:
.a51d		a9 ce		lda #$ce	                lda #$CE
.a51f		4c 5c a7	jmp $a75c	                jmp asm_common
.a522						z_asm_dec:
.a522						xt_asm_dec_a:
.a522		a9 3a		lda #$3a	                lda #$3A
.a524		4c 5c a7	jmp $a75c	                jmp asm_common
.a527						z_asm_dec_a:
.a527						xt_asm_dec_x:
.a527		a9 de		lda #$de	                lda #$DE
.a529		4c 5c a7	jmp $a75c	                jmp asm_common
.a52c						z_asm_dec_x:
.a52c						xt_asm_dec_z:
.a52c		a9 c6		lda #$c6	                lda #$C6
.a52e		4c 5c a7	jmp $a75c	                jmp asm_common
.a531						z_asm_dec_z:
.a531						xt_asm_dec_zx:
.a531		a9 d6		lda #$d6	                lda #$D6
.a533		4c 5c a7	jmp $a75c	                jmp asm_common
.a536						z_asm_dec_zx:
.a536						xt_asm_dex:
.a536		a9 ca		lda #$ca	                lda #$CA
.a538		4c 5c a7	jmp $a75c	                jmp asm_common
.a53b						z_asm_dex:
.a53b						xt_asm_dey:
.a53b		a9 88		lda #$88	                lda #$88
.a53d		4c 5c a7	jmp $a75c	                jmp asm_common
.a540						z_asm_dey:
.a540						xt_asm_eor:
.a540		a9 4d		lda #$4d	                lda #$4D
.a542		4c 5c a7	jmp $a75c	                jmp asm_common
.a545						z_asm_eor:
.a545						xt_asm_eor_h:
.a545		a9 49		lda #$49	                lda #$49
.a547		4c 5c a7	jmp $a75c	                jmp asm_common
.a54a						z_asm_eor_h:
.a54a						xt_asm_eor_x:
.a54a		a9 5d		lda #$5d	                lda #$5D
.a54c		4c 5c a7	jmp $a75c	                jmp asm_common
.a54f						z_asm_eor_x:
.a54f						xt_asm_eor_y:
.a54f		a9 59		lda #$59	                lda #$59
.a551		4c 5c a7	jmp $a75c	                jmp asm_common
.a554						z_asm_eor_y:
.a554						xt_asm_eor_z:
.a554		a9 45		lda #$45	                lda #$45
.a556		4c 5c a7	jmp $a75c	                jmp asm_common
.a559						z_asm_eor_z:
.a559						xt_asm_eor_zi:
.a559		a9 52		lda #$52	                lda #$52
.a55b		4c 5c a7	jmp $a75c	                jmp asm_common
.a55e						z_asm_eor_zi:
.a55e						xt_asm_eor_ziy:
.a55e		a9 51		lda #$51	                lda #$51
.a560		4c 5c a7	jmp $a75c	                jmp asm_common
.a563						z_asm_eor_ziy:
.a563						xt_asm_eor_zx:
.a563		a9 55		lda #$55	                lda #$55
.a565		4c 5c a7	jmp $a75c	                jmp asm_common
.a568						z_asm_eor_zx:
.a568						xt_asm_eor_zxi:
.a568		a9 41		lda #$41	                lda #$41
.a56a		4c 5c a7	jmp $a75c	                jmp asm_common
.a56d						z_asm_eor_zxi:
.a56d						xt_asm_inc:
.a56d		a9 ee		lda #$ee	                lda #$EE
.a56f		4c 5c a7	jmp $a75c	                jmp asm_common
.a572						z_asm_inc:
.a572						xt_asm_inc_a:
.a572		a9 1a		lda #$1a	                lda #$1A
.a574		4c 5c a7	jmp $a75c	                jmp asm_common
.a577						z_asm_inc_a:
.a577						xt_asm_inc_x:
.a577		a9 fe		lda #$fe	                lda #$FE
.a579		4c 5c a7	jmp $a75c	                jmp asm_common
.a57c						z_asm_inc_x:
.a57c						xt_asm_inc_z:
.a57c		a9 e6		lda #$e6	                lda #$E6
.a57e		4c 5c a7	jmp $a75c	                jmp asm_common
.a581						z_asm_inc_z:
.a581						xt_asm_inc_zx:
.a581		a9 f6		lda #$f6	                lda #$F6
.a583		4c 5c a7	jmp $a75c	                jmp asm_common
.a586						z_asm_inc_zx:
.a586						xt_asm_inx:
.a586		a9 e8		lda #$e8	                lda #$E8
.a588		4c 5c a7	jmp $a75c	                jmp asm_common
.a58b						z_asm_inx:
.a58b						xt_asm_iny:
.a58b		a9 c8		lda #$c8	                lda #$C8
.a58d		4c 5c a7	jmp $a75c	                jmp asm_common
.a590						z_asm_iny:
.a590						xt_asm_jmp:
.a590		a9 4c		lda #$4c	                lda #$4C
.a592		4c 5c a7	jmp $a75c	                jmp asm_common
.a595						z_asm_jmp:
.a595						xt_asm_jmp_i:
.a595		a9 6c		lda #$6c	                lda #$6C
.a597		4c 5c a7	jmp $a75c	                jmp asm_common
.a59a						z_asm_jmp_i:
.a59a						xt_asm_jmp_xi:
.a59a		a9 7c		lda #$7c	                lda #$7C
.a59c		4c 5c a7	jmp $a75c	                jmp asm_common
.a59f						z_asm_jmp_xi:
.a59f						xt_asm_jsr:
.a59f		a9 20		lda #$20	                lda #$20
.a5a1		4c 5c a7	jmp $a75c	                jmp asm_common
.a5a4						z_asm_jsr:
.a5a4						xt_asm_lda:
.a5a4		a9 ad		lda #$ad	                lda #$AD
.a5a6		4c 5c a7	jmp $a75c	                jmp asm_common
.a5a9						z_asm_lda:
.a5a9						xt_asm_lda_h:
.a5a9		a9 a9		lda #$a9	                lda #$A9
.a5ab		4c 5c a7	jmp $a75c	                jmp asm_common
.a5ae						z_asm_lda_h:
.a5ae						xt_asm_lda_x:
.a5ae		a9 bd		lda #$bd	                lda #$BD
.a5b0		4c 5c a7	jmp $a75c	                jmp asm_common
.a5b3						z_asm_lda_x:
.a5b3						xt_asm_lda_y:
.a5b3		a9 b9		lda #$b9	                lda #$B9
.a5b5		4c 5c a7	jmp $a75c	                jmp asm_common
.a5b8						z_asm_lda_y:
.a5b8						xt_asm_lda_z:
.a5b8		a9 a5		lda #$a5	                lda #$A5
.a5ba		4c 5c a7	jmp $a75c	                jmp asm_common
.a5bd						z_asm_lda_z:
.a5bd						xt_asm_lda_zi:
.a5bd		a9 b2		lda #$b2	                lda #$B2
.a5bf		4c 5c a7	jmp $a75c	                jmp asm_common
.a5c2						z_asm_lda_zi:
.a5c2						xt_asm_lda_ziy:
.a5c2		a9 b1		lda #$b1	                lda #$B1
.a5c4		4c 5c a7	jmp $a75c	                jmp asm_common
.a5c7						z_asm_lda_ziy:
.a5c7						xt_asm_lda_zx:
.a5c7		a9 b5		lda #$b5	                lda #$B5
.a5c9		4c 5c a7	jmp $a75c	                jmp asm_common
.a5cc						z_asm_lda_zx:
.a5cc						xt_asm_lda_zxi:
.a5cc		a9 a1		lda #$a1	                lda #$A1
.a5ce		4c 5c a7	jmp $a75c	                jmp asm_common
.a5d1						z_asm_lda_zxi:
.a5d1						xt_asm_ldx:
.a5d1		a9 ae		lda #$ae	                lda #$AE
.a5d3		4c 5c a7	jmp $a75c	                jmp asm_common
.a5d6						z_asm_ldx:
.a5d6						xt_asm_ldx_h:
.a5d6		a9 a2		lda #$a2	                lda #$A2
.a5d8		4c 5c a7	jmp $a75c	                jmp asm_common
.a5db						z_asm_ldx_h:
.a5db						xt_asm_ldx_y:
.a5db		a9 be		lda #$be	                lda #$BE
.a5dd		4c 5c a7	jmp $a75c	                jmp asm_common
.a5e0						z_asm_ldx_y:
.a5e0						xt_asm_ldx_z:
.a5e0		a9 a6		lda #$a6	                lda #$A6
.a5e2		4c 5c a7	jmp $a75c	                jmp asm_common
.a5e5						z_asm_ldx_z:
.a5e5						xt_asm_ldx_zy:
.a5e5		a9 b6		lda #$b6	                lda #$B6
.a5e7		4c 5c a7	jmp $a75c	                jmp asm_common
.a5ea						z_asm_ldx_zy:
.a5ea						xt_asm_ldy:
.a5ea		a9 ac		lda #$ac	                lda #$AC
.a5ec		4c 5c a7	jmp $a75c	                jmp asm_common
.a5ef						z_asm_ldy:
.a5ef						xt_asm_ldy_h:
.a5ef		a9 a0		lda #$a0	                lda #$A0
.a5f1		4c 5c a7	jmp $a75c	                jmp asm_common
.a5f4						z_asm_ldy_h:
.a5f4						xt_asm_ldy_x:
.a5f4		a9 bc		lda #$bc	                lda #$BC
.a5f6		4c 5c a7	jmp $a75c	                jmp asm_common
.a5f9						z_asm_ldy_x:
.a5f9						xt_asm_ldy_z:
.a5f9		a9 a4		lda #$a4	                lda #$A4
.a5fb		4c 5c a7	jmp $a75c	                jmp asm_common
.a5fe						z_asm_ldy_z:
.a5fe						xt_asm_ldy_zx:
.a5fe		a9 b4		lda #$b4	                lda #$B4
.a600		4c 5c a7	jmp $a75c	                jmp asm_common
.a603						z_asm_ldy_zx:
.a603						xt_asm_lsr:
.a603		a9 4e		lda #$4e	                lda #$4E
.a605		4c 5c a7	jmp $a75c	                jmp asm_common
.a608						z_asm_lsr:
.a608						xt_asm_lsr_a:
.a608		a9 4a		lda #$4a	                lda #$4A
.a60a		4c 5c a7	jmp $a75c	                jmp asm_common
.a60d						z_asm_lsr_a:
.a60d						xt_asm_lsr_x:
.a60d		a9 5e		lda #$5e	                lda #$5E
.a60f		4c 5c a7	jmp $a75c	                jmp asm_common
.a612						z_asm_lsr_x:
.a612						xt_asm_lsr_z:
.a612		a9 46		lda #$46	                lda #$46
.a614		4c 5c a7	jmp $a75c	                jmp asm_common
.a617						z_asm_lsr_z:
.a617						xt_asm_lsr_zx:
.a617		a9 56		lda #$56	                lda #$56
.a619		4c 5c a7	jmp $a75c	                jmp asm_common
.a61c						z_asm_lsr_zx:
.a61c						xt_asm_nop:
.a61c		a9 ea		lda #$ea	                lda #$EA
.a61e		4c 5c a7	jmp $a75c	                jmp asm_common
.a621						z_asm_nop:
.a621						xt_asm_ora:
.a621		a9 0d		lda #$0d	                lda #$0D
.a623		4c 5c a7	jmp $a75c	                jmp asm_common
.a626						z_asm_ora:
.a626						xt_asm_ora_h:
.a626		a9 09		lda #$09	                lda #$09
.a628		4c 5c a7	jmp $a75c	                jmp asm_common
.a62b						z_asm_ora_h:
.a62b						xt_asm_ora_x:
.a62b		a9 1d		lda #$1d	                lda #$1D
.a62d		4c 5c a7	jmp $a75c	                jmp asm_common
.a630						z_asm_ora_x:
.a630						xt_asm_ora_y:
.a630		a9 19		lda #$19	                lda #$19
.a632		4c 5c a7	jmp $a75c	                jmp asm_common
.a635						z_asm_ora_y:
.a635						xt_asm_ora_z:
.a635		a9 05		lda #$05	                lda #$05
.a637		4c 5c a7	jmp $a75c	                jmp asm_common
.a63a						z_asm_ora_z:
.a63a						xt_asm_ora_zi:
.a63a		a9 12		lda #$12	                lda #$12
.a63c		a0 02		ldy #$02	                ldy #2
.a63e		4c 5c a7	jmp $a75c	                jmp asm_common
.a641						z_asm_ora_zi:
.a641						xt_asm_ora_ziy:
.a641		a9 11		lda #$11	                lda #$11
.a643		4c 5c a7	jmp $a75c	                jmp asm_common
.a646						z_asm_ora_ziy:
.a646						xt_asm_ora_zx:
.a646		a9 15		lda #$15	                lda #$15
.a648		4c 5c a7	jmp $a75c	                jmp asm_common
.a64b						z_asm_ora_zx:
.a64b						xt_asm_ora_zxi:
.a64b		a9 01		lda #$01	                lda #$01
.a64d		4c 5c a7	jmp $a75c	                jmp asm_common
.a650						z_asm_ora_zxi:
.a650						xt_asm_pha:
.a650		a9 48		lda #$48	                lda #$48
.a652		4c 5c a7	jmp $a75c	                jmp asm_common
.a655						z_asm_pha:
.a655						xt_asm_php:
.a655		a9 08		lda #$08	                lda #$08
.a657		4c 5c a7	jmp $a75c	                jmp asm_common
.a65a						z_asm_php:
.a65a						xt_asm_phx:
.a65a		a9 da		lda #$da	                lda #$DA
.a65c		4c 5c a7	jmp $a75c	                jmp asm_common
.a65f						z_asm_phx:
.a65f						xt_asm_phy:
.a65f		a9 5a		lda #$5a	                lda #$5A
.a661		4c 5c a7	jmp $a75c	                jmp asm_common
.a664						z_asm_phy:
.a664						xt_asm_pla:
.a664		a9 68		lda #$68	                lda #$68
.a666		4c 5c a7	jmp $a75c	                jmp asm_common
.a669						z_asm_pla:
.a669						xt_asm_plp:
.a669		a9 28		lda #$28	                lda #$28
.a66b		4c 5c a7	jmp $a75c	                jmp asm_common
.a66e						z_asm_plp:
.a66e						xt_asm_plx:
.a66e		a9 fa		lda #$fa	                lda #$FA
.a670		4c 5c a7	jmp $a75c	                jmp asm_common
.a673						z_asm_plx:
.a673						xt_asm_ply:
.a673		a9 7a		lda #$7a	                lda #$7A
.a675		4c 5c a7	jmp $a75c	                jmp asm_common
.a678						z_asm_ply:
.a678						xt_asm_rol:
.a678		a9 2e		lda #$2e	                lda #$2E
.a67a		4c 5c a7	jmp $a75c	                jmp asm_common
.a67d						z_asm_rol:
.a67d						xt_asm_rol_a:
.a67d		a9 2a		lda #$2a	                lda #$2A
.a67f		4c 5c a7	jmp $a75c	                jmp asm_common
.a682						z_asm_rol_a:
.a682						xt_asm_rol_x:
.a682		a9 3e		lda #$3e	                lda #$3E
.a684		4c 5c a7	jmp $a75c	                jmp asm_common
.a687						z_asm_rol_x:
.a687						xt_asm_rol_z:
.a687		a9 26		lda #$26	                lda #$26
.a689		4c 5c a7	jmp $a75c	                jmp asm_common
.a68c						z_asm_rol_z:
.a68c						xt_asm_rol_zx:
.a68c		a9 36		lda #$36	                lda #$36
.a68e		4c 5c a7	jmp $a75c	                jmp asm_common
.a691						z_asm_rol_zx:
.a691						xt_asm_ror:
.a691		a9 6e		lda #$6e	                lda #$6E
.a693		4c 5c a7	jmp $a75c	                jmp asm_common
.a696						z_asm_ror:
.a696						xt_asm_ror_a:
.a696		a9 6a		lda #$6a	                lda #$6A
.a698		4c 5c a7	jmp $a75c	                jmp asm_common
.a69b						z_asm_ror_a:
.a69b						xt_asm_ror_x:
.a69b		a9 7e		lda #$7e	                lda #$7E
.a69d		4c 5c a7	jmp $a75c	                jmp asm_common
.a6a0						z_asm_ror_x:
.a6a0						xt_asm_ror_z:
.a6a0		a9 66		lda #$66	                lda #$66
.a6a2		4c 5c a7	jmp $a75c	                jmp asm_common
.a6a5						z_asm_ror_z:
.a6a5						xt_asm_ror_zx:
.a6a5		a9 76		lda #$76	                lda #$76
.a6a7		4c 5c a7	jmp $a75c	                jmp asm_common
.a6aa						z_asm_ror_zx:
.a6aa						xt_asm_rti:
.a6aa		a9 40		lda #$40	                lda #$40
.a6ac		4c 5c a7	jmp $a75c	                jmp asm_common
.a6af						z_asm_rti:
.a6af						xt_asm_rts:
.a6af		a9 60		lda #$60	                lda #$60
.a6b1		4c 5c a7	jmp $a75c	                jmp asm_common
.a6b4						z_asm_rts:
.a6b4						xt_asm_sbc:
.a6b4		a9 ed		lda #$ed	                lda #$ED
.a6b6		4c 5c a7	jmp $a75c	                jmp asm_common
.a6b9						z_asm_sbc:
.a6b9						xt_asm_sbc_h:
.a6b9		a9 e9		lda #$e9	                lda #$E9
.a6bb		4c 5c a7	jmp $a75c	                jmp asm_common
.a6be						z_asm_sbc_h:
.a6be						xt_asm_sbc_x:
.a6be		a9 fd		lda #$fd	                lda #$FD
.a6c0		4c 5c a7	jmp $a75c	                jmp asm_common
.a6c3						z_asm_sbc_x:
.a6c3						xt_asm_sbc_y:
.a6c3		a9 f9		lda #$f9	                lda #$F9
.a6c5		4c 5c a7	jmp $a75c	                jmp asm_common
.a6c8						z_asm_sbc_y:
.a6c8						xt_asm_sbc_z:
.a6c8		a9 e5		lda #$e5	                lda #$E5
.a6ca		4c 5c a7	jmp $a75c	                jmp asm_common
.a6cd						z_asm_sbc_z:
.a6cd						xt_asm_sbc_zi:
.a6cd		a9 f2		lda #$f2	                lda #$F2
.a6cf		4c 5c a7	jmp $a75c	                jmp asm_common
.a6d2						z_asm_sbc_zi:
.a6d2						xt_asm_sbc_ziy:
.a6d2		a9 f1		lda #$f1	                lda #$F1
.a6d4		4c 5c a7	jmp $a75c	                jmp asm_common
.a6d7						z_asm_sbc_ziy:
.a6d7						xt_asm_sbc_zx:
.a6d7		a9 f5		lda #$f5	                lda #$F5
.a6d9		4c 5c a7	jmp $a75c	                jmp asm_common
.a6dc						z_asm_sbc_zx:
.a6dc						xt_asm_sbc_zxi:
.a6dc		a9 e1		lda #$e1	                lda #$E1
.a6de		80 7c		bra $a75c	                bra asm_common  ; <-- limit for BRA instead of JMP
.a6e0						z_asm_sbc_zxi:
.a6e0						xt_asm_sec:
.a6e0		a9 38		lda #$38	                lda #$38
.a6e2		80 78		bra $a75c	                bra asm_common
.a6e4						z_asm_sec:
.a6e4						xt_asm_sed:
.a6e4		a9 f8		lda #$f8	                lda #$F8
.a6e6		80 74		bra $a75c	                bra asm_common
.a6e8						z_asm_sed:
.a6e8						xt_asm_sei:
.a6e8		a9 78		lda #$78	                lda #$78
.a6ea		80 70		bra $a75c	                bra asm_common
.a6ec						z_asm_sei:
.a6ec						xt_asm_sta:
.a6ec		a9 8d		lda #$8d	                lda #$8D
.a6ee		80 6c		bra $a75c	                bra asm_common
.a6f0						z_asm_sta:
.a6f0						xt_asm_sta_x:
.a6f0		a9 9d		lda #$9d	                lda #$9D
.a6f2		80 68		bra $a75c	                bra asm_common
.a6f4						z_asm_sta_x:
.a6f4						xt_asm_sta_y:
.a6f4		a9 99		lda #$99	                lda #$99
.a6f6		80 64		bra $a75c	                bra asm_common
.a6f8						z_asm_sta_y:
.a6f8						xt_asm_sta_z:
.a6f8		a9 85		lda #$85	                lda #$85
.a6fa		80 60		bra $a75c	                bra asm_common
.a6fc						z_asm_sta_z:
.a6fc						xt_asm_sta_zi:
.a6fc		a9 92		lda #$92	                lda #$92
.a6fe		80 5c		bra $a75c	                bra asm_common
.a700						z_asm_sta_zi:
.a700						xt_asm_sta_ziy:
.a700		a9 91		lda #$91	                lda #$91
.a702		80 58		bra $a75c	                bra asm_common
.a704						z_asm_sta_ziy:
.a704						xt_asm_sta_zx:
.a704		a9 95		lda #$95	                lda #$95
.a706		80 54		bra $a75c	                bra asm_common
.a708						z_asm_sta_zx:
.a708						xt_asm_sta_zxi:
.a708		a9 81		lda #$81	                lda #$81
.a70a		80 50		bra $a75c	                bra asm_common
.a70c						z_asm_sta_zxi:
.a70c						xt_asm_stx:
.a70c		a9 8e		lda #$8e	                lda #$8E
.a70e		80 4c		bra $a75c	                bra asm_common
.a710						z_asm_stx:
.a710						xt_asm_stx_z:
.a710		a9 86		lda #$86	                lda #$86
.a712		80 48		bra $a75c	                bra asm_common
.a714						z_asm_stx_z:
.a714						xt_asm_stx_zy:
.a714		a9 96		lda #$96	                lda #$96
.a716		80 44		bra $a75c	                bra asm_common
.a718						z_asm_stx_zy:
.a718						xt_asm_sty:
.a718		a9 8c		lda #$8c	                lda #$8C
.a71a		80 40		bra $a75c	                bra asm_common
.a71c						z_asm_sty:
.a71c						xt_asm_sty_z:
.a71c		a9 84		lda #$84	                lda #$84
.a71e		80 3c		bra $a75c	                bra asm_common
.a720						z_asm_sty_z:
.a720						xt_asm_sty_zx:
.a720		a9 94		lda #$94	                lda #$94
.a722		80 38		bra $a75c	                bra asm_common
.a724						z_asm_sty_zx:
.a724						xt_asm_stz:
.a724		a9 9c		lda #$9c	                lda #$9C
.a726		80 34		bra $a75c	                bra asm_common
.a728						z_asm_stz:
.a728						xt_asm_stz_x:
.a728		a9 9e		lda #$9e	                lda #$9E
.a72a		80 30		bra $a75c	                bra asm_common
.a72c						z_asm_stz_x:
.a72c						xt_asm_stz_z:
.a72c		a9 64		lda #$64	                lda #$64
.a72e		80 2c		bra $a75c	                bra asm_common
.a730						z_asm_stz_z:
.a730						xt_asm_stz_zx:
.a730		a9 74		lda #$74	                lda #$74
.a732		80 28		bra $a75c	                bra asm_common
.a734						z_asm_stz_zx:
.a734						xt_asm_tax:
.a734		a9 aa		lda #$aa	                lda #$AA
.a736		80 24		bra $a75c	                bra asm_common
.a738						z_asm_tax:
.a738						xt_asm_tay:
.a738		a9 a8		lda #$a8	                lda #$A8
.a73a		80 20		bra $a75c	                bra asm_common
.a73c						z_asm_tay:
.a73c						xt_asm_trb:
.a73c		a9 1c		lda #$1c	                lda #$1C
.a73e		80 1c		bra $a75c	                bra asm_common
.a740						z_asm_trb:
.a740						xt_asm_trb_z:
.a740		a9 14		lda #$14	                lda #$14
.a742		80 18		bra $a75c	                bra asm_common
.a744						z_asm_trb_z:
.a744						xt_asm_tsb:
.a744		a9 0c		lda #$0c	                lda #$0C
.a746		80 14		bra $a75c	                bra asm_common
.a748						z_asm_tsb:
.a748						xt_asm_tsb_z:
.a748		a9 04		lda #$04	                lda #$04
.a74a		80 10		bra $a75c	                bra asm_common
.a74c						z_asm_tsb_z:
.a74c						xt_asm_tsx:
.a74c		a9 ba		lda #$ba	                lda #$BA
.a74e		80 0c		bra $a75c	                bra asm_common
.a750						z_asm_tsx:
.a750						xt_asm_txa:
.a750		a9 8a		lda #$8a	                lda #$8A
.a752		80 08		bra $a75c	                bra asm_common
.a754						z_asm_txa:
.a754						xt_asm_txs:
.a754		a9 9a		lda #$9a	                lda #$9A
.a756		80 04		bra $a75c	                bra asm_common
.a758						z_asm_txs:
.a758						xt_asm_tya:
.a758		a9 98		lda #$98	                lda #$98
.a75a		80 00		bra $a75c	                bra asm_common
.a75c						z_asm_tya:
.a75c						asm_common:
.a75c		a8		tay		                tay
.a75d		20 ac 97	jsr $97ac	                jsr cmpl_a
.a760		a9 cf		lda #$cf	                lda #<oc_index_table
.a762		85 27		sta $27		                sta tmp2
.a764		a9 b3		lda #$b3	                lda #>oc_index_table
.a766		85 28		sta $28		                sta tmp2+1
.a768		98		tya		                tya             ; retrieve opcode
.a769		0a		asl a		                asl             ; times two for offset
.a76a		90 02		bcc $a76e	                bcc +
.a76c		e6 28		inc $28		                inc tmp2+1
.a76e						+
.a76e		a8		tay		                tay             ; use Y as the index
.a76f		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB
.a771		85 29		sta $29		                sta tmp3
.a773		c8		iny		                iny
.a774		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB
.a776		85 2a		sta $2a		                sta tmp3+1
.a778		b2 29		lda ($29)	                lda (tmp3)      ; get "lengths byte"
.a77a		2a		rol a		                rol
.a77b		2a		rol a		                rol
.a77c		2a		rol a		                rol             ; Three times because we go through Carry
.a77d		29 03		and #$03	                and #%00000011
.a77f		a8		tay		                tay
.a780		88		dey		                dey
.a781		f0 12		beq $a795	                beq _done
.a783		20 ac d7	jsr $d7ac	                jsr underflow_1
.a786		b5 00		lda $00,x	                lda 0,x
.a788		20 ac 97	jsr $97ac	                jsr cmpl_a      ; does not use Y
.a78b		88		dey		                dey
.a78c		f0 05		beq $a793	                beq _done_drop
.a78e		b5 01		lda $01,x	                lda 1,x
.a790		20 ac 97	jsr $97ac	                jsr cmpl_a      ; Fall through to _done_drop
.a793						_done_drop:
.a793		e8		inx		                inx
.a794		e8		inx		                inx             ; Fall through to _done
.a795						_done:
.a795		60		rts		                rts             ; Returns to original caller
.a796						xt_asm_push_a:
.a796		a0 00		ldy #$00	                ldy #0
.a798						_loop:
.a798		b9 a6 a7	lda $a7a6,y	                lda asm_push_a_data,y
.a79b		c9 ff		cmp #$ff	                cmp #$FF
.a79d		f0 06		beq $a7a5	                beq _done
.a79f		20 ac 97	jsr $97ac	                jsr cmpl_a      ; does not change Y
.a7a2		c8		iny		                iny
.a7a3		80 f3		bra $a798	                bra _loop
.a7a5						_done:
.a7a5						z_asm_push_a:
.a7a5		60		rts		                rts
.a7a6						asm_push_a_data:
>a7a6		ca ca 95 00 74 01		        .byte $CA, $CA, $95, 00, $74, $01
>a7ac		ff				        .byte $FF               ; terminator
.a7ad						xt_asm_back_jump:
.a7ad						z_asm_back_jump:
.a7ad		60		rts		                rts
.a7ae						xt_asm_back_branch:
.a7ae		20 1b 89	jsr $891b	                jsr xt_here             ; ( addr-l addr-h )
.a7b1		20 e4 8b	jsr $8be4	                jsr xt_minus            ; ( offset )
.a7b4		3a		dec a		                dea
.a7b5		3a		dec a		                dea
.a7b6						z_asm_back_branch:
.a7b6		60		rts		                rts
.a7b7						assembler_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/ed.asm

.a7b7						xt_ed:
.a7b7		20 bb a7	jsr $a7bb	                jsr ed6502      ; kept in separate file
.a7ba		60		rts		z_ed:           rts
=$0035						ed_head  = tmped    ; pointer to first list element (addr) (2 bytes)
=$0037						ed_cur   = tmped+2  ; current line number (1 is first line) (2 bytes)
=$0039						ed_flags = tmped+4  ; Flags used by ed, where
=$003a						ed_base  = tmped+5  ; used to hold BASE and put it back at the end.
.a7bb						ed6502:
.a7bb		a5 18		lda $18		                lda base
.a7bd		85 3a		sta $3a		                sta ed_base
.a7bf		a9 0a		lda #$0a	                lda #10
.a7c1		85 18		sta $18		                sta base
.a7c3		64 35		stz $35		                stz ed_head
.a7c5		64 36		stz $36		                stz ed_head+1
.a7c7		64 37		stz $37		                stz ed_cur
.a7c9		64 38		stz $38		                stz ed_cur+1
.a7cb		64 39		stz $39		                stz ed_flags
.a7cd		20 13 9e	jsr $9e13	                jsr xt_zero
.a7d0		20 13 9e	jsr $9e13	                jsr xt_zero             ; ( addr-t u-t )
.a7d3		20 3a 84	jsr $843a	                jsr xt_cr
.a7d6						ed_input_loop:
.a7d6		a9 81		lda #$81	                lda #%10000001
.a7d8		14 39		trb $39		                trb ed_flags
.a7da		20 b5 ac	jsr $acb5	                jsr ed_get_input
.a7dd		a5 0e		lda $0e		                lda ciblen
.a7df		d0 1f		bne $a800	                bne _command_mode
.a7e1		ca		dex		                dex
.a7e2		ca		dex		                dex                     ; ( addr-t u-t ? )
.a7e3		a5 37		lda $37		                lda ed_cur
.a7e5		95 00		sta $00,x	                sta 0,x
.a7e7		a5 38		lda $38		                lda ed_cur+1
.a7e9		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t u )
.a7eb		a9 80		lda #$80	                lda #%10000000
.a7ed		04 39		tsb $39		                tsb ed_flags
.a7ef		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; ( addr-t u-t u+1 )
.a7f2		20 d1 ac	jsr $acd1	                jsr ed_is_valid_line
.a7f5		b0 03		bcs $a7fa	                bcs +
.a7f7		4c a5 ac	jmp $aca5	                jmp ed_error_1drop
.a7fa						+
.a7fa		20 13 9e	jsr $9e13	                jsr xt_zero             ; ( addr-t u-t u+1 0 )
.a7fd		4c cb a8	jmp $a8cb	                jmp _line_number_only_from_external
.a800						_command_mode:
.a800		20 13 9e	jsr $9e13	                jsr xt_zero             ; parameter 1 is NOS ( addr-t u-t 0 )
.a803		20 13 9e	jsr $9e13	                jsr xt_zero             ; parameter 2 is TOS ( addr-t u-t 0 0 )
.a806		b2 0c		lda ($0c)	                lda (cib)
.a808		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII '.'
.a80a		d0 3a		bne $a846	                bne _prefix_dollar
.a80c		20 c6 ac	jsr $acc6	                jsr ed_have_text
.a80f		a5 37		lda $37		                lda ed_cur
.a811		95 02		sta $02,x	                sta 2,x
.a813		a5 38		lda $38		                lda ed_cur+1
.a815		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.a817		a9 80		lda #$80	                lda #%10000000
.a819		04 39		tsb $39		                tsb ed_flags
.a81b		a5 0e		lda $0e		                lda ciblen
.a81d		3a		dec a		                dea                     ; sets Z if A was 1
.a81e		d0 03		bne $a823	                bne +
.a820		4c cb a8	jmp $a8cb	                jmp _line_number_only_from_external
.a823						+
.a823		ca		dex		                dex
.a824		ca		dex		                dex
.a825		ca		dex		                dex
.a826		ca		dex		                dex
.a827		a5 0c		lda $0c		                lda cib
.a829		95 02		sta $02,x	                sta 2,x
.a82b		a5 0d		lda $0d		                lda cib+1
.a82d		95 03		sta $03,x	                sta 3,x
.a82f		a5 0e		lda $0e		                lda ciblen
.a831		95 00		sta $00,x	                sta 0,x
.a833		a5 0f		lda $0f		                lda ciblen+1
.a835		95 01		sta $01,x	                sta 1,x
.a837		20 dd 8c	jsr $8cdd	                jsr xt_one_minus        ; ( addr-t u-t para1 0 addr u-1 )
.a83a		20 4a 92	jsr $924a	                jsr xt_swap             ; ( addr-t u-t para1 0 u-1 addr )
.a83d		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; ( addr-t u-t para1 0 u-1 addr+1 )
.a840		20 4a 92	jsr $924a	                jsr xt_swap             ; ( addr-t u-t para1 0 addr+1 u-1 )
.a843		4c 23 a9	jmp $a923	                jmp _check_for_para2
.a846						_prefix_dollar:
.a846		b2 0c		lda ($0c)	                lda (cib)
.a848		c9 24		cmp #$24	                cmp #'$'
.a84a		d0 1c		bne $a868	                bne _prefix_percent
.a84c		20 c6 ac	jsr $acc6	                jsr ed_have_text
.a84f		e8		inx		                inx
.a850		e8		inx		                inx                     ; ( addr-t u-t 0 )
.a851		20 f3 ac	jsr $acf3	                jsr ed_last_line          ; ( addr-t u-t 0 para1 )
.a854		20 4a 92	jsr $924a	                jsr xt_swap             ; SWAP ( addr-t u-t para1 0 )
.a857		a9 80		lda #$80	                lda #%10000000
.a859		04 39		tsb $39		                tsb ed_flags
.a85b		a5 0e		lda $0e		                lda ciblen
.a85d		3a		dec a		                dea                     ; sets Z if A was 1
.a85e		d0 03		bne $a863	                bne +
.a860		4c cb a8	jmp $a8cb	                jmp _line_number_only_from_external
.a863						+
.a863		a0 01		ldy #$01	                ldy #01
.a865		4c 9f a9	jmp $a99f	                jmp _check_command
.a868						_prefix_percent:
.a868		b2 0c		lda ($0c)	                lda (cib)
.a86a		c9 25		cmp #$25	                cmp #'%'                ; ASCII '%'
.a86c		f0 04		beq $a872	                beq _whole_text
.a86e		c9 2c		cmp #$2c	                cmp #','                ; ASCII ','
.a870		d0 17		bne $a889	                bne _prefix_semicolon
.a872						_whole_text:
.a872		20 c6 ac	jsr $acc6	                jsr ed_have_text
.a875		a9 01		lda #$01	                lda #01
.a877		95 02		sta $02,x	                sta 2,x                 ; LSB of NOS is para 1
.a879		74 03		stz $03,x	                stz 3,x                 ; ( addr-t u-t para1 0 )
.a87b						_semicolon_entry:
.a87b		e8		inx		                inx
.a87c		e8		inx		                inx                     ; DROP ( addr-t u-t para1 )
.a87d		20 f3 ac	jsr $acf3	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.a880		a9 80		lda #$80	                lda #%10000000
.a882		04 39		tsb $39		                tsb ed_flags
.a884		a0 01		ldy #$01	                ldy #01
.a886		4c 9f a9	jmp $a99f	                jmp _check_command
.a889						_prefix_semicolon:
.a889		b2 0c		lda ($0c)	                lda (cib)
.a88b		c9 3b		cmp #$3b	                cmp #';'                ; ASCII ';'
.a88d		d0 0d		bne $a89c	                bne _prefix_number
.a88f		20 c6 ac	jsr $acc6	                jsr ed_have_text
.a892		a5 37		lda $37		                lda ed_cur
.a894		95 02		sta $02,x	                sta 2,x
.a896		a5 38		lda $38		                lda ed_cur+1
.a898		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.a89a		80 df		bra $a87b	                bra _semicolon_entry
.a89c						_prefix_number:
.a89c		20 13 9e	jsr $9e13	                jsr xt_zero
.a89f		20 13 9e	jsr $9e13	                jsr xt_zero             ; ( addr-t u-t 0 0 0 0 )
.a8a2		ca		dex		                dex
.a8a3		ca		dex		                dex
.a8a4		ca		dex		                dex
.a8a5		ca		dex		                dex                     ; ( addr-t u-t 0 0 0 0 ? ? )
.a8a6		a5 0c		lda $0c		                lda cib
.a8a8		95 02		sta $02,x	                sta 2,x
.a8aa		a5 0d		lda $0d		                lda cib+1
.a8ac		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t 0 0 0 0 cib ? )
.a8ae		a5 0e		lda $0e		                lda ciblen
.a8b0		95 00		sta $00,x	                sta 0,x
.a8b2		a5 0f		lda $0f		                lda ciblen+1
.a8b4		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 0 0 cib ciblen )
.a8b6		20 e8 92	jsr $92e8	                jsr xt_to_number        ; ( addr-t u-t 0 0 ud addr2 u2 )
.a8b9		b5 00		lda $00,x	                lda 0,x
.a8bb		15 01		ora $01,x	                ora 1,x
.a8bd		d0 24		bne $a8e3	                bne _have_unconverted_chars
.a8bf		e8		inx		                inx
.a8c0		e8		inx		                inx
.a8c1		e8		inx		                inx
.a8c2		e8		inx		                inx                     ; 2DROP ( addr-t u-t 0 0 ud )
.a8c3		20 5c 9e	jsr $9e5c	                jsr xt_d_to_s           ; D>S ( addr-t u-t 0 0 u )
.a8c6		20 97 9c	jsr $9c97	                jsr xt_not_rote         ; -ROT ( addr-t u-t u 0 0 )
.a8c9		e8		inx		                inx
.a8ca		e8		inx		                inx                     ; ( addr-t u-t u 0 ) drop through
.a8cb						_line_number_only_from_external:
.a8cb		20 4a 92	jsr $924a	                jsr xt_swap             ; ( addr-t u-t 0 u )
.a8ce		20 d1 ac	jsr $acd1	                jsr ed_is_valid_line
.a8d1		b0 03		bcs $a8d6	                bcs +
.a8d3		4c a3 ac	jmp $aca3	                jmp ed_error_2drop
.a8d6						+
.a8d6		20 4a 92	jsr $924a	                jsr xt_swap             ; ( addr-t u-t u 0 )
.a8d9		20 60 ad	jsr $ad60	                jsr ed_para1_to_cur
.a8dc		a9 80		lda #$80	                lda #%10000000
.a8de		04 39		tsb $39		                tsb ed_flags
.a8e0		4c 7e ab	jmp $ab7e	                jmp ed_cmd_p_from_external
.a8e3						_have_unconverted_chars:
.a8e3		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( addr-t u-t 0 0 ud addr2 u2 u2 )
.a8e6		ca		dex		                dex
.a8e7		ca		dex		                dex                     ; ( addr-t u-t 0 0 ud addr2 u2 u2 ? )
.a8e8		a5 0e		lda $0e		                lda ciblen
.a8ea		95 00		sta $00,x	                sta 0,x
.a8ec		a5 0f		lda $0f		                lda ciblen+1
.a8ee		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 ud addr2 u2 u2 ciblen )
.a8f0		20 96 87	jsr $8796	                jsr xt_equal            ; ( addr-t u-t 0 0 ud addr2 u2 f )
.a8f3		b5 00		lda $00,x	                lda 0,x
.a8f5		15 01		ora $01,x	                ora 1,x
.a8f7		f0 0e		beq $a907	                beq _no_command_yet
.a8f9		8a		txa		                txa
.a8fa		18		clc		                clc
.a8fb		69 0a		adc #$0a	                adc #10
.a8fd		aa		tax		                tax                     ; ( addr-t u-t 0 0 )
.a8fe		a9 80		lda #$80	                lda #%10000000
.a900		14 39		trb $39		                trb ed_flags
.a902		a0 00		ldy #$00	                ldy #00
.a904		4c 9f a9	jmp $a99f	                jmp _check_command
.a907						_no_command_yet:
.a907		e8		inx		                inx
.a908		e8		inx		                inx                     ; ( ... 0 0 ud addr2 u2 )
.a909		20 88 93	jsr $9388	                jsr xt_to_r             ; >R ( ... 0 0 ud addr2 ) (R: u2)
.a90c		20 97 9c	jsr $9c97	                jsr xt_not_rote         ; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.a90f		20 5c 9e	jsr $9e5c	                jsr xt_d_to_s           ; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.a912		b5 00		lda $00,x	                lda 0,x                 ; LSB
.a914		95 06		sta $06,x	                sta 6,x
.a916		b5 01		lda $01,x	                lda 1,x                 ; MSB
.a918		95 07		sta $07,x	                sta 7,x                 ; ( ... para1 0 addr2 para1 ) (R: u2)
.a91a		e8		inx		                inx
.a91b		e8		inx		                inx                     ; ( addr-t u-t para1 0 addr2 ) (R: u2)
.a91c		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.a91f		a9 80		lda #$80	                lda #%10000000
.a921		04 39		tsb $39		                tsb ed_flags
.a923						_check_for_para2:
.a923		a1 02		lda ($02,x)	                lda (2,x)
.a925		c9 2c		cmp #$2c	                cmp #','                ; ASCII code for ',' (comma)
.a927		f0 0d		beq $a936	                beq _got_comma
.a929		38		sec		                sec
.a92a		a5 0e		lda $0e		                lda ciblen
.a92c		f5 00		sbc $00,x	                sbc 0,x
.a92e		a8		tay		                tay
.a92f		e8		inx		                inx
.a930		e8		inx		                inx
.a931		e8		inx		                inx
.a932		e8		inx		                inx                     ; 2DROP ( addr-t u-t para1 0 )
.a933		4c 9f a9	jmp $a99f	                jmp _check_command
.a936						_got_comma:
.a936		f6 02		inc $02,x	                inc 2,x
.a938		d0 02		bne $a93c	                bne +
.a93a		f6 03		inc $03,x	                inc 3,x                 ; ( addr-t u-t para1 0 addr2+1 u2 )
.a93c						+
.a93c		b5 01		lda $01,x	                lda 1,x
.a93e		f0 02		beq $a942	                beq +
.a940		d6 01		dec $01,x	                dec 1,x
.a942						+
.a942		d6 00		dec $00,x	                dec 0,x                 ; ( addr-t u-t para1 0 addr2+1 u2-1 )
.a944		a1 02		lda ($02,x)	                lda (2,x)
.a946		c9 24		cmp #$24	                cmp #$24                ; ASCII for '$'
.a948		d0 14		bne $a95e	                bne _para2_not_dollar
.a94a		38		sec		                sec
.a94b		a5 0e		lda $0e		                lda ciblen
.a94d		f5 02		sbc $02,x	                sbc 2,x
.a94f		a8		tay		                tay
.a950		c8		iny		                iny
.a951		5a		phy		                phy
.a952		8a		txa		                txa
.a953		18		clc		                clc
.a954		69 06		adc #$06	                adc #06
.a956		aa		tax		                tax                     ; ( addr-t u-t para1 )
.a957		20 f3 ac	jsr $acf3	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.a95a		7a		ply		                ply
.a95b		4c 9f a9	jmp $a99f	                jmp _check_command
.a95e						_para2_not_dollar:
.a95e		20 88 93	jsr $9388	                jsr xt_to_r             ; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.a961		20 13 9e	jsr $9e13	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.a964		20 13 9e	jsr $9e13	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.a967		20 8b 8f	jsr $8f8b	                jsr xt_rot              ; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.a96a		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R> ( ... para1 0 0 0 addr2+1 u2-1)
.a96d		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.a970		20 88 93	jsr $9388	                jsr xt_to_r             ; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.a973		20 e8 92	jsr $92e8	                jsr xt_to_number        ; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.a976		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.a979		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.a97c		20 96 87	jsr $8796	                jsr xt_equal            ; = ( ... para1 0 ud addr3 u3 f )
.a97f		b5 00		lda $00,x	                lda 0,x
.a981		15 01		ora $01,x	                ora 1,x
.a983		f0 08		beq $a98d	                beq _second_number
.a985		8a		txa		                txa
.a986		18		clc		                clc
.a987		69 0c		adc #$0c	                adc #12
.a989		aa		tax		                tax                     ; back to ( addr-t u-t )
.a98a		4c a7 ac	jmp $aca7	                jmp ed_error
.a98d						_second_number:
.a98d		e8		inx		                inx
.a98e		e8		inx		                inx                     ; ( addr-t u-t para1 0 ud addr3 u3 )
.a98f		38		sec		                sec
.a990		a5 0e		lda $0e		                lda ciblen
.a992		f5 00		sbc $00,x	                sbc 0,x
.a994		48		pha		                pha
.a995		20 bf 93	jsr $93bf	                jsr xt_two_drop         ; 2DROP ( addr-t u-t para1 0 ud )
.a998		20 5c 9e	jsr $9e5c	                jsr xt_d_to_s           ; D>S  ( addr-t u-t para1 0 para2 )
.a99b		20 30 8c	jsr $8c30	                jsr xt_nip              ; NIP ( addr-t u-t para1 para2 )
.a99e		7a		ply		                ply
.a99f						_check_command:
.a99f		24 39		bit $39		                bit ed_flags
.a9a1		30 08		bmi $a9ab	                bmi _check_command_have_arg
.a9a3		a5 37		lda $37		                lda ed_cur
.a9a5		95 02		sta $02,x	                sta 2,x
.a9a7		a5 38		lda $38		                lda ed_cur+1
.a9a9		95 03		sta $03,x	                sta 3,x
.a9ab						_check_command_have_arg:
.a9ab		b1 0c		lda ($0c),y	                lda (cib),y             ; get mystery char from input
.a9ad		85 25		sta $25		                sta tmp1
.a9af		da		phx		                phx
.a9b0		a2 00		ldx #$00	                ldx #00
.a9b2						_cmd_loop:
.a9b2		bd 8b ad	lda $ad8b,x	                lda ed_cmd_list,x
.a9b5		f0 07		beq $a9be	                beq _illegal_command    ; zero marks end of list
.a9b7		c5 25		cmp $25		                cmp tmp1
.a9b9		f0 07		beq $a9c2	                beq _found_cmd
.a9bb		e8		inx		                inx
.a9bc		80 f4		bra $a9b2	                bra _cmd_loop
.a9be						_illegal_command:
.a9be		fa		plx		                plx
.a9bf		4c a3 ac	jmp $aca3	                jmp ed_error_2drop
.a9c2						_found_cmd:
.a9c2		8a		txa		                txa
.a9c3		0a		asl a		                asl
.a9c4		aa		tax		                tax                     ; X * 2 for table
.a9c5		7c 96 ad	jmp ($ad96,x)	                jmp (ed_cmd_table,x)
.a9c8						ed_next_command:
.a9c8		e8		inx		                inx
.a9c9		e8		inx		                inx
.a9ca		e8		inx		                inx
.a9cb		e8		inx		                inx                     ; ( addr-t u-t ) Fall through
.a9cc		4c d6 a7	jmp $a7d6	                jmp ed_input_loop
.a9cf						ed_all_done:
.a9cf		64 0e		stz $0e		                stz ciblen
.a9d1		64 0f		stz $0f		                stz ciblen+1
.a9d3		20 bf 93	jsr $93bf	                jsr xt_two_drop                 ; 2DROP ( addr-t u-t )
.a9d6		a5 3a		lda $3a		                lda ed_base
.a9d8		85 18		sta $18		                sta base
.a9da		60		rts		                rts
.a9db						ed_cmd_a:
.a9db		fa		plx		                plx
.a9dc		e8		inx		                inx
.a9dd		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.a9de						ed_entry_cmd_i:
.a9de		20 29 ad	jsr $ad29	                jsr ed_num_to_addr        ;  ( addr-t u-t addr1 )
.a9e1		20 3a 84	jsr $843a	                jsr xt_cr
.a9e4						_next_string_loop:
.a9e4		20 b5 ac	jsr $acb5	                jsr ed_get_input
.a9e7		b2 0c		lda ($0c)	                lda (cib)
.a9e9		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII for '.'
.a9eb		d0 16		bne $aa03	                bne _add_line
.a9ed		a4 0e		ldy $0e		                ldy ciblen
.a9ef		c0 01		cpy #$01	                cpy #01
.a9f1		d0 10		bne $aa03	                bne _add_line
.a9f3		a4 0f		ldy $0f		                ldy ciblen+1
.a9f5		d0 0c		bne $aa03	                bne _add_line
.a9f7		e8		inx		                inx
.a9f8		e8		inx		                inx
.a9f9		a9 40		lda #$40	                lda #%01000000
.a9fb		04 39		tsb $39		                tsb ed_flags
.a9fd		20 3a 84	jsr $843a	                jsr xt_cr
.aa00		4c d6 a7	jmp $a7d6	                jmp ed_input_loop
.aa03						_add_line:
.aa03		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u-t addr1 addr1 )
.aa06		20 1b 89	jsr $891b	                jsr xt_here             ; HERE ( addr-t u-t addr1 addr1 here )
.aa09		20 4a 92	jsr $924a	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 here addr1 )
.aa0c		20 1a 88	jsr $881a	                jsr xt_fetch            ; @  ( addr-t u-t addr1 here addr2 )
.aa0f		20 cd 83	jsr $83cd	                jsr xt_comma            ; ,  ( addr-t u-t addr1 here )
.aa12		20 a5 93	jsr $93a5	                jsr xt_tuck             ; TUCK ( addr-t u-t here addr1 here )
.aa15		20 4a 92	jsr $924a	                jsr xt_swap             ; SWAP ( addr-t u-t here here addr1 )
.aa18		20 34 92	jsr $9234	                jsr xt_store            ; ! ( addr-t u-t here )
.aa1b		20 1b 89	jsr $891b	                jsr xt_here             ; HERE ( addr-t u-t here here2)
.aa1e		a5 00		lda $00		                lda cp
.aa20		18		clc		                clc
.aa21		69 04		adc #$04	                adc #04
.aa23		85 00		sta $00		                sta cp
.aa25		90 02		bcc $aa29	                bcc +
.aa27		e6 01		inc $01		                inc cp+1
.aa29						+
.aa29		e6 37		inc $37		                inc ed_cur
.aa2b		d0 02		bne $aa2f	                bne +
.aa2d		e6 38		inc $38		                inc ed_cur+1
.aa2f						+
.aa2f		20 1b 89	jsr $891b	                jsr xt_here     ; HERE ( addr-t u-t here here2 here3 )
.aa32		20 a0 86	jsr $86a0	                jsr xt_dup      ; DUP ( addr-t u-t here here2 here3 here3 )
.aa35		ca		dex		                dex
.aa36		ca		dex		                dex             ; ( addr-t u-t here here2 here3 here3 ? )
.aa37		a5 0c		lda $0c		                lda cib
.aa39		95 00		sta $00,x	                sta 0,x
.aa3b		a5 0d		lda $0d		                lda cib+1
.aa3d		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 here3 cib )
.aa3f		20 4a 92	jsr $924a	                jsr xt_swap     ; SWAP ( addr-t u-t here here2 here3 cib here3 )
.aa42		ca		dex		                dex
.aa43		ca		dex		                dex             ; ( addr-t u-t here here2 here3 cib here3 ? )
.aa44		a5 0e		lda $0e		                lda ciblen
.aa46		95 00		sta $00,x	                sta 0,x
.aa48		a5 0f		lda $0f		                lda ciblen+1
.aa4a		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 cib here3 ciblen )
.aa4c		20 00 8c	jsr $8c00	                jsr xt_move     ; ( addr-t u-t here here2 here3 )
.aa4f		18		clc		                clc
.aa50		a5 00		lda $00		                lda cp
.aa52		65 0e		adc $0e		                adc ciblen
.aa54		85 00		sta $00		                sta cp
.aa56		90 06		bcc $aa5e	                bcc +
.aa58		a5 01		lda $01		                lda cp+1
.aa5a		65 0f		adc $0f		                adc ciblen+1
.aa5c		85 01		sta $01		                sta cp+1
.aa5e						+
.aa5e		20 05 8d	jsr $8d05	                jsr xt_over             ; OVER ( addr-t u-t here here2 here3 here2 )
.aa61		20 34 92	jsr $9234	                jsr xt_store            ; ! ( addr-t u-t here here2 )
.aa64		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+
.aa67		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+ ( addr-t u-t here here2+2 )
.aa6a		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u-t here here2+2 here2+2 )
.aa6d		a5 0e		lda $0e		                lda ciblen
.aa6f		95 02		sta $02,x	                sta 2,x
.aa71		a5 0f		lda $0f		                lda ciblen+1
.aa73		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t here ciblen here2+2 )
.aa75		20 34 92	jsr $9234	                jsr xt_store            ; ! ( addr-t u-t here )
.aa78		20 3a 84	jsr $843a	                jsr xt_cr
.aa7b		4c e4 a9	jmp $a9e4	                jmp _next_string_loop
.aa7e						ed_cmd_d:
.aa7e		fa		plx		                plx
.aa7f		20 c6 ac	jsr $acc6	                jsr ed_have_text
.aa82		20 1b ad	jsr $ad1b	                jsr ed_no_line_zero
.aa85		b5 00		lda $00,x	                lda 0,x
.aa87		15 01		ora $01,x	                ora 1,x
.aa89		d0 08		bne $aa93	                bne +
.aa8b		20 05 8d	jsr $8d05	                jsr xt_over             ; ( addr-t u-t para1 0 para1 )
.aa8e		20 d0 aa	jsr $aad0	                jsr _cmd_d_common       ; ( addr-t u-t para1 0 )
.aa91		80 33		bra $aac6	                bra _cmd_d_done
.aa93						+
.aa93		20 d1 ac	jsr $acd1	                jsr ed_is_valid_line      ; result is in C flag
.aa96		b0 03		bcs $aa9b	                bcs _cmd_d_loop
.aa98		4c a3 ac	jmp $aca3	                jmp ed_error_2drop
.aa9b						_cmd_d_loop:
.aa9b		20 c7 93	jsr $93c7	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.aa9e		20 06 89	jsr $8906	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.aaa1		b5 00		lda $00,x	                lda 0,x
.aaa3		15 01		ora $01,x	                ora 1,x
.aaa5		d0 0d		bne $aab4	                bne _cmd_d_done_with_flag
.aaa7		e8		inx		                inx
.aaa8		e8		inx		                inx                     ; Get rid of the flag from >
.aaa9		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u-t para1 para2 para2 )
.aaac		20 d0 aa	jsr $aad0	                jsr _cmd_d_common       ; ( addr-t u-t para1 para2 )
.aaaf		20 dd 8c	jsr $8cdd	                jsr xt_one_minus        ; 1- ( addr-t u-t para1 para2-1 )
.aab2		80 e7		bra $aa9b	                bra _cmd_d_loop
.aab4						_cmd_d_done_with_flag:
.aab4		e8		inx		                inx                     ; ( addr-t u-t para1 para2 )
.aab5		e8		inx		                inx
.aab6		b5 02		lda $02,x	                lda 2,x
.aab8		d0 02		bne $aabc	                bne +
.aaba		d6 03		dec $03,x	                dec 3,x
.aabc						+
.aabc		d6 02		dec $02,x	                dec 2,x
.aabe		b5 02		lda $02,x	                lda 2,x
.aac0		85 37		sta $37		                sta ed_cur
.aac2		b5 03		lda $03,x	                lda 3,x
.aac4		85 38		sta $38		                sta ed_cur+1            ; drop through to _cmd_d_done
.aac6						_cmd_d_done:
.aac6		a9 40		lda #$40	                lda #%01000000
.aac8		04 39		tsb $39		                tsb ed_flags
.aaca		20 3a 84	jsr $843a	                jsr xt_cr
.aacd		4c c8 a9	jmp $a9c8	                jmp ed_next_command
.aad0						_cmd_d_common:
.aad0		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u-t u u )
.aad3		20 29 ad	jsr $ad29	                jsr ed_num_to_addr        ; ( addr-t u-t u addr )
.aad6		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( addr-t u-t u addr1 )
.aad9		20 4a 92	jsr $924a	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 u )
.aadc		20 dd 8c	jsr $8cdd	                jsr xt_one_minus        ; 1- ( addr-t u-t addr1 u-1 )
.aadf		20 29 ad	jsr $ad29	                jsr ed_num_to_addr        ; ( addr-t u-t addr1 addr-1 )
.aae2		20 34 92	jsr $9234	                jsr xt_store            ; ! ( addr-t u-t )
.aae5		60		rts		                rts
.aae6						ed_cmd_equ:
.aae6		fa		plx		                plx
.aae7		a5 35		lda $35		                lda ed_head
.aae9		05 36		ora $36		                ora ed_head+1
.aaeb		d0 08		bne $aaf5	                bne _cmd_equ_have_text
.aaed		ca		dex		                dex
.aaee		ca		dex		                dex
.aaef		74 00		stz $00,x	                stz 0,x
.aaf1		74 01		stz $01,x	                stz 1,x                 ; ( addr-t u-t para1 para2 0 )
.aaf3		80 21		bra $ab16	                bra _cmd_equ_done
.aaf5						_cmd_equ_have_text:
.aaf5		20 1b ad	jsr $ad1b	                jsr ed_no_line_zero
.aaf8		24 39		bit $39		                bit ed_flags
.aafa		30 0c		bmi $ab08	                bmi _cmd_equ_have_para
.aafc		ca		dex		                dex
.aafd		ca		dex		                dex                     ; ( addr-t u-t para1 para2 ? )
.aafe		a5 37		lda $37		                lda ed_cur
.ab00		95 00		sta $00,x	                sta 0,x
.ab02		a5 38		lda $38		                lda ed_cur+1
.ab04		95 01		sta $01,x	                sta 1,x
.ab06		80 0e		bra $ab16	                bra _cmd_equ_done       ; ( addr-t u-t para1 para2 cur )
.ab08						_cmd_equ_have_para:
.ab08		b5 00		lda $00,x	                lda 0,x
.ab0a		15 01		ora $01,x	                ora 1,x
.ab0c		d0 05		bne $ab13	                bne _cmd_equ_two_paras
.ab0e		20 05 8d	jsr $8d05	                jsr xt_over             ; ( addr-t u-t para1 para2 para1)
.ab11		80 03		bra $ab16	                bra _cmd_equ_done
.ab13						_cmd_equ_two_paras:
.ab13		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( addr-t u-t para1 para2 para2) drop through
.ab16						_cmd_equ_done:
.ab16		20 3a 84	jsr $843a	                jsr xt_cr               ; number goes on new line
.ab19		20 fc 94	jsr $94fc	                jsr xt_u_dot            ; ( addr-t u-t para1 para2 )
.ab1c		20 3a 84	jsr $843a	                jsr xt_cr
.ab1f		4c c8 a9	jmp $a9c8	                jmp ed_next_command
.ab22						ed_cmd_f:
.ab22		fa		plx		                plx
.ab23		24 39		bit $39		                bit ed_flags
.ab25		30 17		bmi $ab3e	                bmi _cmd_f_have_para
.ab27		20 3a 84	jsr $843a	                jsr xt_cr
.ab2a		20 88 93	jsr $9388	                jsr xt_to_r             ; >R   ( addr-t u-t 0 ) ( R: 0 )
.ab2d		20 8b 8f	jsr $8f8b	                jsr xt_rot              ; ROT  ( u-t 0 addr-t ) ( R: 0 )
.ab30		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP  ( u-t 0 addr-t addr-t ) ( R: 0 )
.ab33		20 fc 94	jsr $94fc	                jsr xt_u_dot            ; U.   ( u-t 0 addr-t ) ( R: 0 )
.ab36		20 97 9c	jsr $9c97	                jsr xt_not_rote         ; -ROT ( addr-t u-t 0 ) ( R: 0 )
.ab39		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R>   ( addr-t u-t 0 0 )
.ab3c		80 11		bra $ab4f	                bra _cmd_f_done
.ab3e						_cmd_f_have_para:
.ab3e		20 05 8d	jsr $8d05	                jsr xt_over
.ab41		20 3a 84	jsr $843a	                jsr xt_cr
.ab44		20 fc 94	jsr $94fc	                jsr xt_u_dot
.ab47		b5 02		lda $02,x	                lda 2,x
.ab49		95 06		sta $06,x	                sta 6,x
.ab4b		b5 03		lda $03,x	                lda 3,x
.ab4d		95 07		sta $07,x	                sta 7,x                 ; fall through to _cmd_f_done
.ab4f						_cmd_f_done:
.ab4f		20 3a 84	jsr $843a	                jsr xt_cr
.ab52		4c c8 a9	jmp $a9c8	                jmp ed_next_command
.ab55						ed_cmd_i:
.ab55		fa		plx		                plx
.ab56		e8		inx		                inx
.ab57		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.ab58		24 39		bit $39		                bit ed_flags
.ab5a		30 08		bmi $ab64	                bmi _cmd_i_have_para
.ab5c		a5 37		lda $37		                lda ed_cur
.ab5e		95 00		sta $00,x	                sta 0,x
.ab60		a5 38		lda $38		                lda ed_cur+1
.ab62		95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.ab64						_cmd_i_have_para:
.ab64		b5 00		lda $00,x	                lda 0,x
.ab66		15 01		ora $01,x	                ora 1,x
.ab68		f0 09		beq $ab73	                beq _cmd_i_done
.ab6a		20 dd 8c	jsr $8cdd	                jsr xt_one_minus        ; 1-  ( addr-t u-t para1-1 )
.ab6d		20 13 9e	jsr $9e13	                jsr xt_zero             ; 0   ( addr-t u-t para1-1 0 )
.ab70		20 ac 8b	jsr $8bac	                jsr xt_max              ; MAX ( addr-t u-t para1-1 | 0 )
.ab73						_cmd_i_done:
.ab73		4c de a9	jmp $a9de	                jmp ed_entry_cmd_i
.ab76						ed_cmd_n:
.ab76		fa		plx		                plx
.ab77		a9 01		lda #$01	                lda #%00000001
.ab79		04 39		tsb $39		                tsb ed_flags
.ab7b		80 05		bra $ab82	                bra ed_cmd_p_entry_for_cmd_n
.ab7d						ed_cmd_p:
.ab7d		fa		plx		                plx
.ab7e						ed_cmd_p_from_external:
.ab7e		a9 01		lda #$01	                lda #%00000001
.ab80		14 39		trb $39		                trb ed_flags
.ab82						ed_cmd_p_entry_for_cmd_n:
.ab82		20 c6 ac	jsr $acc6	                jsr ed_have_text
.ab85		20 1b ad	jsr $ad1b	                jsr ed_no_line_zero
.ab88		20 3a 84	jsr $843a	                jsr xt_cr
.ab8b		b5 00		lda $00,x	                lda 0,x
.ab8d		15 01		ora $01,x	                ora 1,x
.ab8f		d0 10		bne $aba1	                bne _cmd_p_loop
.ab91		b5 02		lda $02,x	                lda 2,x
.ab93		85 37		sta $37		                sta ed_cur
.ab95		b5 03		lda $03,x	                lda 3,x
.ab97		85 38		sta $38		                sta ed_cur+1
.ab99		20 05 8d	jsr $8d05	                jsr xt_over             ; OVER ( addr-t u-t para1 para2 para1 )
.ab9c		20 ca ab	jsr $abca	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.ab9f		80 26		bra $abc7	                bra _cmd_p_all_done
.aba1						_cmd_p_loop:
.aba1		20 c7 93	jsr $93c7	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.aba4		20 06 89	jsr $8906	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.aba7		b5 00		lda $00,x	                lda 0,x
.aba9		15 01		ora $01,x	                ora 1,x
.abab		d0 10		bne $abbd	                bne _cmd_p_done
.abad		e8		inx		                inx
.abae		e8		inx		                inx                     ; Get rid of the flag from >
.abaf		20 05 8d	jsr $8d05	                jsr xt_over             ; ( addr-t u-t para1 para2 para1 )
.abb2		20 ca ab	jsr $abca	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.abb5		f6 02		inc $02,x	                inc 2,x
.abb7		d0 02		bne $abbb	                bne +
.abb9		f6 03		inc $03,x	                inc 3,x
.abbb						+
.abbb		80 e4		bra $aba1	                bra _cmd_p_loop
.abbd						_cmd_p_done:
.abbd		e8		inx		                inx
.abbe		e8		inx		                inx                     ; fall through to _cmp_p_all_done
.abbf		b5 00		lda $00,x	                lda 0,x
.abc1		85 37		sta $37		                sta ed_cur
.abc3		b5 01		lda $01,x	                lda 1,x
.abc5		85 38		sta $38		                sta ed_cur+1
.abc7						_cmd_p_all_done:
.abc7		4c c8 a9	jmp $a9c8	                jmp ed_next_command
.abca						_cmd_p_common:
.abca		a5 39		lda $39		                lda ed_flags
.abcc		4a		lsr a		                lsr                     ; bit 0 now in carry
.abcd		90 0b		bcc $abda	                bcc _cmd_p_common_no_num
.abcf		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u-t para1 para1 )
.abd2		20 fc 94	jsr $94fc	                jsr xt_u_dot            ; U. ( addr-t u-t para1 )
.abd5		a9 09		lda #$09	                lda #$09                 ; ASCII for Tab
.abd7		20 c5 86	jsr $86c5	                jsr emit_a
.abda						_cmd_p_common_no_num:
.abda		20 29 ad	jsr $ad29	                jsr ed_num_to_addr        ; ( addr-t u-t addr )
.abdd		20 69 ad	jsr $ad69	                jsr ed_print_addr
.abe0		60		rts		                rts
.abe1						ed_cmd_q:
.abe1		fa		plx		                plx
.abe2		24 39		bit $39		                bit ed_flags            ; bit 6 is change flag
.abe4		50 03		bvc $abe9	                bvc +
.abe6		4c a3 ac	jmp $aca3	                jmp ed_error_2drop
.abe9						+
.abe9		4c cf a9	jmp $a9cf	                jmp ed_all_done            ; can't fall thru because of PLX
.abec						ed_cmd_qq:
.abec		fa		plx		                plx
.abed		4c cf a9	jmp $a9cf	                jmp ed_all_done
.abf0						ed_cmd_w:
.abf0		fa		plx		                plx
.abf1		20 c6 ac	jsr $acc6	                jsr ed_have_text
.abf4		24 39		bit $39		                bit ed_flags
.abf6		30 13		bmi $ac0b	                bmi _cmd_w_have_para
.abf8		b5 06		lda $06,x	                lda 6,x
.abfa		15 07		ora $07,x	                ora 7,x
.abfc		d0 03		bne $ac01	                bne +
.abfe		4c a3 ac	jmp $aca3	                jmp ed_error_2drop
.ac01						+
.ac01		b5 06		lda $06,x	                lda 6,x
.ac03		95 02		sta $02,x	                sta 2,x
.ac05		b5 07		lda $07,x	                lda 7,x
.ac07		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t addr-t ? )
.ac09		80 08		bra $ac13	                bra _cmd_w_para_ready
.ac0b						_cmd_w_have_para:
.ac0b		b5 02		lda $02,x	                lda 2,x
.ac0d		95 06		sta $06,x	                sta 6,x
.ac0f		b5 03		lda $03,x	                lda 3,x
.ac11		95 07		sta $07,x	                sta 7,x                 ; drop through to _cmd_w_para_ready
.ac13						_cmd_w_para_ready:
.ac13		a9 35		lda #$35	                lda #<ed_head
.ac15		95 00		sta $00,x	                sta 0,x
.ac17		a9 00		lda #$00	                lda #>ed_head
.ac19		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t addr-t addr-h )
.ac1b		20 05 8d	jsr $8d05	                jsr xt_over             ; OVER ( addr-t u-t addr-t addr-h addr-t )
.ac1e		20 88 93	jsr $9388	                jsr xt_to_r             ; >R ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.ac21						_cmd_w_loop:
.ac21		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.ac24		b5 00		lda $00,x	                lda 0,x
.ac26		15 01		ora $01,x	                ora 1,x
.ac28		f0 55		beq $ac7f	                beq _cmd_w_eol
.ac2a		20 c7 93	jsr $93c7	                jsr xt_two_dup          ; 2DUP ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.ac2d		20 b1 94	jsr $94b1	                jsr xt_two_to_r         ; 2>R  ( addr-t addr-1 ) (R: ... )
.ac30		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+ ( addr-t addr1+1 ) (R: ... )
.ac33		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+ ( addr-t addr1+2 ) (R: ... )
.ac36		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t addr1+2 addr1+2 ) ( R: ... )
.ac39		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( addr-t addr1+2 addr-s ) ( R: ... )
.ac3c		20 4a 92	jsr $924a	                jsr xt_swap             ; SWAP ( addr-t addr-s addr1+2 ) ( R: ... )
.ac3f		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+1 ) (R: ... )
.ac42		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+2 ) (R: ... )
.ac45		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( addr-t addr-s u-s ) ( R: ... )
.ac48		20 97 9c	jsr $9c97	                jsr xt_not_rote         ; -ROT ( u-s addr-t addr-s ) ( R: ... )
.ac4b		20 4a 92	jsr $924a	                jsr xt_swap             ; SWAP ( u-s addr-s addr-t ) ( R: ... )
.ac4e		20 8b 8f	jsr $8f8b	                jsr xt_rot              ; ROT (addr-s addr-t u-s ) ( R: ... )
.ac51		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP (addr-s addr-t u-s u-s ) ( R: ... )
.ac54		20 88 93	jsr $9388	                jsr xt_to_r             ; >R (addr-s addr-t u-s ) ( R: ... u-s )
.ac57		20 00 8c	jsr $8c00	                jsr xt_move             ; MOVE ( )( R: addr-t addr-1 addr-t )
.ac5a		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R> ( u-s )  ( R: addr-t addr-h addr-t )
.ac5d		20 37 94	jsr $9437	                jsr xt_two_r_from       ; 2R> ( u-s addr-t addr-h ) ( R: addr-t )
.ac60		20 97 9c	jsr $9c97	                jsr xt_not_rote         ; -ROT ( addr-h u-s addr-t ) ( R: addr-t )
.ac63		20 53 8e	jsr $8e53	                jsr xt_plus             ; + ( addr-h addr-t1 ) ( R: addr-t )
.ac66		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.ac69		ca		dex		                dex
.ac6a		ca		dex		                dex                     ; ( addr-h addr-t1 addr-t1 ? ) ( R: addr-t )
.ac6b		a9 0a		lda #$0a	                lda #AscLF              ; ASCII for LF
.ac6d		95 00		sta $00,x	                sta 0,x
.ac6f		74 01		stz $01,x	                stz 1,x                 ; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.ac71		20 4a 92	jsr $924a	                jsr xt_swap             ; SWAP ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.ac74		20 34 92	jsr $9234	                jsr xt_store            ; ! ( addr-h addr-t1 ) ( R: addr-t )
.ac77		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+ ( addr-h addr-t1+1 ) ( R: addr-t )
.ac7a		20 4a 92	jsr $924a	                jsr xt_swap             ; SWAP ( addr-t1+1 addr-h ) ( R: addr-t )
.ac7d		80 a2		bra $ac21	                bra _cmd_w_loop
.ac7f						_cmd_w_eol:
.ac7f		20 4a 92	jsr $924a	                jsr xt_swap             ; SWAP ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.ac82		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R> ( addr-t u-t addr-n addr-tn addr-t )
.ac85		20 e4 8b	jsr $8be4	                jsr xt_minus            ; - ( addr-t u-t addr-n u )
.ac88		b5 00		lda $00,x	                lda 0,x
.ac8a		95 04		sta $04,x	                sta 4,x
.ac8c		b5 01		lda $01,x	                lda 1,x
.ac8e		95 05		sta $05,x	                sta 5,x                 ; ( addr-t u addr-n u )
.ac90		20 3a 84	jsr $843a	                jsr xt_cr
.ac93		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u addr-n u u )
.ac96		20 fc 94	jsr $94fc	                jsr xt_u_dot            ; U. ( addr-t u addr-n u )
.ac99		20 3a 84	jsr $843a	                jsr xt_cr
.ac9c		a9 40		lda #$40	                lda #%01000000
.ac9e		14 39		trb $39		                trb ed_flags
.aca0		4c c8 a9	jmp $a9c8	                jmp ed_next_command
.aca3						ed_error_2drop:
.aca3		e8		inx		                inx
.aca4		e8		inx		                inx                     ; drop through to _error_1drop
.aca5						ed_error_1drop:
.aca5		e8		inx		                inx
.aca6		e8		inx		                inx                     ; drop through to _error
.aca7						ed_error:
.aca7		20 3a 84	jsr $843a	                jsr xt_cr
.acaa		a9 3f		lda #$3f	                lda #'?'
.acac		20 c5 86	jsr $86c5	                jsr emit_a
.acaf		20 3a 84	jsr $843a	                jsr xt_cr
.acb2		4c d6 a7	jmp $a7d6	                jmp ed_input_loop
.acb5						ed_get_input:
.acb5		20 3c 8f	jsr $8f3c	                jsr xt_refill           ;  ( addr-t u-t f )
.acb8		b5 00		lda $00,x	                lda 0,x
.acba		15 01		ora $01,x	                ora 1,x
.acbc		d0 05		bne $acc3	                bne +
.acbe		7a		ply		                ply
.acbf		7a		ply		                ply
.acc0		4c a5 ac	jmp $aca5	                jmp ed_error_1drop
.acc3						+
.acc3		e8		inx		                inx
.acc4		e8		inx		                inx
.acc5		60		rts		                rts
.acc6						ed_have_text:
.acc6		a5 35		lda $35		                lda ed_head
.acc8		05 36		ora $36		                ora ed_head+1
.acca		d0 04		bne $acd0	                bne +
.accc		7a		ply		                ply
.accd		7a		ply		                ply
.acce		80 d7		bra $aca7	                bra ed_error
.acd0						+
.acd0		60		rts		                rts
.acd1						ed_is_valid_line:
.acd1		38		sec		                sec                             ; default is legal line number
.acd2		b5 00		lda $00,x	                lda 0,x
.acd4		15 01		ora $01,x	                ora 1,x
.acd6		f0 19		beq $acf1	                beq _is_valid_line_nope_zero    ; ( n )
.acd8		20 a0 86	jsr $86a0	                jsr xt_dup                      ; DUP ( n n )
.acdb		20 f3 ac	jsr $acf3	                jsr ed_last_line                  ; ( n n last )
.acde		20 4a 92	jsr $924a	                jsr xt_swap                     ; SWAP ( n last n )
.ace1		20 dd 89	jsr $89dd	                jsr xt_less_than                ; < ( n f )
.ace4		b5 00		lda $00,x	                lda 0,x                         ; 0 flag is good
.ace6		15 01		ora $01,x	                ora 1,x
.ace8		d0 05		bne $acef	                bne _is_valid_line_too_small
.acea		e8		inx		                inx
.aceb		e8		inx		                inx                     ; DROP flag ( n )
.acec		38		sec		                sec                     ; Who knows what's happened to C by now
.aced		80 03		bra $acf2	                bra _is_valid_line_done ; only one exit from this routine
.acef						_is_valid_line_too_small:
.acef		e8		inx		                inx
.acf0		e8		inx		                inx                     ; drop through to _is_valid_line_zero
.acf1						_is_valid_line_nope_zero:
.acf1		18		clc		                clc                     ; drop through to _is_valid_line_done
.acf2						_is_valid_line_done:
.acf2		60		rts		                rts
.acf3						ed_last_line:
.acf3		64 25		stz $25		                stz tmp1
.acf5		64 26		stz $26		                stz tmp1+1
.acf7		ca		dex		                dex
.acf8		ca		dex		                dex                     ; ( ? )
.acf9		a9 35		lda #$35	                lda #<ed_head
.acfb		95 00		sta $00,x	                sta 0,x
.acfd		a9 00		lda #$00	                lda #>ed_head
.acff		95 01		sta $01,x	                sta 1,x                 ; ( addr )
.ad01						_last_line_loop:
.ad01		20 1a 88	jsr $881a	                jsr xt_fetch            ; ( addr | 0 )
.ad04		b5 00		lda $00,x	                lda 0,x
.ad06		15 01		ora $01,x	                ora 1,x
.ad08		f0 08		beq $ad12	                beq _last_line_done
.ad0a		e6 25		inc $25		                inc tmp1
.ad0c		d0 02		bne $ad10	                bne +
.ad0e		e6 26		inc $26		                inc tmp1+1
.ad10						+
.ad10		80 ef		bra $ad01	                bra _last_line_loop
.ad12						_last_line_done:
.ad12		a5 25		lda $25		                lda tmp1
.ad14		95 00		sta $00,x	                sta 0,x
.ad16		a5 26		lda $26		                lda tmp1+1
.ad18		95 01		sta $01,x	                sta 1,x                 ; ( u )
.ad1a		60		rts		                rts
.ad1b						ed_no_line_zero:
.ad1b		b5 02		lda $02,x	                lda 2,x
.ad1d		15 03		ora $03,x	                ora 3,x
.ad1f		d0 07		bne $ad28	                bne _no_line_zero_done
.ad21		24 39		bit $39		                bit ed_flags
.ad23		10 03		bpl $ad28	                bpl _no_line_zero_done
.ad25		4c a3 ac	jmp $aca3	                jmp ed_error_2drop
.ad28						_no_line_zero_done:
.ad28		60		rts		                rts
.ad29						ed_num_to_addr:
.ad29		ca		dex		                dex
.ad2a		ca		dex		                dex                     ; ( u ? )
.ad2b		a9 35		lda #$35	                lda #<ed_head
.ad2d		95 00		sta $00,x	                sta 0,x
.ad2f		a9 00		lda #$00	                lda #>ed_head
.ad31		95 01		sta $01,x	                sta 1,x                 ; ( u addr-h )
.ad33		b5 02		lda $02,x	                lda 2,x
.ad35		15 03		ora $03,x	                ora 3,x
.ad37		d0 05		bne $ad3e	                bne _num_to_addr_loop
.ad39		20 30 8c	jsr $8c30	                jsr xt_nip              ; ( addr-h )
.ad3c		80 21		bra $ad5f	                bra _num_to_addr_done
.ad3e						_num_to_addr_loop:
.ad3e		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( u addr1 )
.ad41		b5 00		lda $00,x	                lda 0,x
.ad43		15 01		ora $01,x	                ora 1,x
.ad45		d0 05		bne $ad4c	                bne +
.ad47		20 30 8c	jsr $8c30	                jsr xt_nip              ; NIP ( addr1 )
.ad4a		80 13		bra $ad5f	                bra _num_to_addr_done
.ad4c						+
.ad4c		20 4a 92	jsr $924a	                jsr xt_swap             ; SWAP ( addr1 u )
.ad4f		20 dd 8c	jsr $8cdd	                jsr xt_one_minus        ; 1- ( addr1 u-1 )
.ad52		b5 00		lda $00,x	                lda 0,x
.ad54		15 01		ora $01,x	                ora 1,x
.ad56		f0 05		beq $ad5d	                beq _num_to_addr_finished
.ad58		20 4a 92	jsr $924a	                jsr xt_swap             ; SWAP ( u-1 addr1 )
.ad5b		80 e1		bra $ad3e	                bra _num_to_addr_loop
.ad5d						_num_to_addr_finished:
.ad5d		e8		inx		                inx
.ad5e		e8		inx		                inx                     ; ( addr )
.ad5f						_num_to_addr_done:
.ad5f		60		rts		                rts
.ad60						ed_para1_to_cur:
.ad60		b5 02		lda $02,x	                lda 2,x
.ad62		85 37		sta $37		                sta ed_cur
.ad64		b5 03		lda $03,x	                lda 3,x
.ad66		85 38		sta $38		                sta ed_cur+1
.ad68		60		rts		                rts
.ad69						ed_print_addr:
.ad69		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.ad6c		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; ( addr+2 )
.ad6f		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( addr+2 addr+2 )
.ad72		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.ad75		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; ( addr+2 addr+4 )
.ad78		20 1a 88	jsr $881a	                jsr xt_fetch            ; ( addr+2 u-s )
.ad7b		20 4a 92	jsr $924a	                jsr xt_swap             ; ( u-s addr+2 )
.ad7e		20 1a 88	jsr $881a	                jsr xt_fetch            ; ( u-s addr-s )
.ad81		20 4a 92	jsr $924a	                jsr xt_swap             ; ( addr-s u-s )
.ad84		20 d1 94	jsr $94d1	                jsr xt_type
.ad87		20 3a 84	jsr $843a	                jsr xt_cr
.ad8a		60		rts		                rts
>ad8b		61 66 69 64 70 6e 3d 77		ed_cmd_list:    .text "afidpn=wqQ", 0
>ad93		71 51 00
.ad96						ed_cmd_table:
>ad96		db a9 22 ab 55 ab 7e aa		                .word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>ad9e		7d ab 76 ab
>ada2		e6 aa f0 ab e1 ab ec ab		                .word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.adaa						ed6502_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/block.asm

.adaa						xt_blk:
.adaa		a9 04		lda #$04	                lda #blk_offset
.adac		4c 68 d6	jmp $d668	                jmp push_upvar_tos
.adaf						z_blk:
.adaf						xt_blkbuffer:
.adaf		ca		dex		                dex
.adb0		ca		dex		                dex
.adb1		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.adb3		b1 08		lda ($08),y	                lda (up),y
.adb5		95 00		sta $00,x	                sta 0,x
.adb7		c8		iny		                iny             ; Move along to the next byte
.adb8		b1 08		lda ($08),y	                lda (up),y
.adba		95 01		sta $01,x	                sta 1,x
.adbc		60		rts		z_blkbuffer:    rts
.adbd						xt_block:
.adbd		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.adbf		b1 08		lda ($08),y	                lda (up),y
.adc1		d5 00		cmp $00,x	                cmp 0,x
.adc3		d0 0f		bne $add4	                bne _not_in_buffer
.adc5		c8		iny		                iny
.adc6		b1 08		lda ($08),y	                lda (up),y
.adc8		d5 01		cmp $01,x	                cmp 1,x
.adca		d0 08		bne $add4	                bne _not_in_buffer
.adcc		a0 30		ldy #$30	                ldy #buffstatus_offset
.adce		b1 08		lda ($08),y	                lda (up),y
.add0		29 01		and #$01	                and #1          ; Check the in-use flag (bit 0)
.add2		d0 30		bne $ae04	                bne _done       ; It's already in the buffer and in use.
.add4						_not_in_buffer:
.add4		a0 30		ldy #$30	                ldy #buffstatus_offset
.add6		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.add8		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.adda		d0 0c		bne $ade8	                bne _buffer_available ; Unused or not dirty = available
.addc		20 af ad	jsr $adaf	                jsr xt_blkbuffer
.addf		20 b9 af	jsr $afb9	                jsr xt_buffblocknum
.ade2		20 1a 88	jsr $881a	                jsr xt_fetch
.ade5		20 a6 af	jsr $afa6	                jsr xt_block_write
.ade8						_buffer_available:
.ade8		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.adea		b5 00		lda $00,x	                lda 0,x
.adec		91 08		sta ($08),y	                sta (up),y
.adee		c8		iny		                iny
.adef		b5 01		lda $01,x	                lda 1,x
.adf1		91 08		sta ($08),y	                sta (up),y
.adf3		20 af ad	jsr $adaf	                jsr xt_blkbuffer
.adf6		20 4a 92	jsr $924a	                jsr xt_swap
.adf9		20 8e af	jsr $af8e	                jsr xt_block_read
.adfc		a9 01		lda #$01	                lda #1
.adfe		a0 30		ldy #$30	                ldy #buffstatus_offset
.ae00		91 08		sta ($08),y	                sta (up),y
.ae02		ca		dex		                dex
.ae03		ca		dex		                dex
.ae04						_done:
.ae04		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.ae06		b1 08		lda ($08),y	                lda (up),y
.ae08		95 00		sta $00,x	                sta 0,x
.ae0a		c8		iny		                iny
.ae0b		b1 08		lda ($08),y	                lda (up),y
.ae0d		95 01		sta $01,x	                sta 1,x
.ae0f		60		rts		z_block:        rts
.ae10						xt_block_c65_init:
=0						io_blk_status = 0
=0						io_blk_action = 0
=0						io_blk_number = 0
=0						io_blk_buffer = 0
.ae10		a9 ff		lda #$ff	                lda #$ff
.ae12		8d 11 f0	sta $f011	                sta io_blk_status
.ae15		a9 00		lda #$00	                lda #$0
.ae17		8d 10 f0	sta $f010	                sta io_blk_action
.ae1a		ad 11 f0	lda $f011	                lda io_blk_status      ; $0 if OK, $ff otherwise
.ae1d		49 ff		eor #$ff	                eor #$ff            ; invert to forth true/false
.ae1f		ca		dex		                dex
.ae20		ca		dex		                dex
.ae21		95 00		sta $00,x	                sta 0,x             ; true ($ff) if OK, false (0) otherwise
.ae23		95 01		sta $01,x	                sta 1,x
.ae25		ca		dex		                dex
.ae26		ca		dex		                dex
.ae27		a9 4a		lda #$4a	                lda #<c65_blk_read
.ae29		95 00		sta $00,x	                sta 0,x
.ae2b		a9 ae		lda #$ae	                lda #>c65_blk_read
.ae2d		95 01		sta $01,x	                sta 1,x
.ae2f		20 9c af	jsr $af9c	                jsr xt_block_read_vector
.ae32		20 34 92	jsr $9234	                jsr xt_store
.ae35		ca		dex		                dex
.ae36		ca		dex		                dex
.ae37		a9 46		lda #$46	                lda #<c65_blk_write
.ae39		95 00		sta $00,x	                sta 0,x
.ae3b		a9 ae		lda #$ae	                lda #>c65_blk_write
.ae3d		95 01		sta $01,x	                sta 1,x
.ae3f		20 b4 af	jsr $afb4	                jsr xt_block_write_vector
.ae42		20 34 92	jsr $9234	                jsr xt_store
.ae45						z_block_c65_init:
.ae45		60		rts		                rts
.ae46		a0 02		ldy #$02	c65_blk_write:  ldy #2
.ae48		80 02		bra $ae4c	                bra c65_blk_rw
.ae4a		a0 01		ldy #$01	c65_blk_read:   ldy #1
.ae4c		b5 00		lda $00,x	c65_blk_rw:     lda 0,x                 ; ( addr blk# )
.ae4e		8d 12 f0	sta $f012	                sta io_blk_number
.ae51		b5 01		lda $01,x	                lda 1,x
.ae53		8d 13 f0	sta $f013	                sta io_blk_number+1
.ae56		b5 02		lda $02,x	                lda 2,x
.ae58		8d 14 f0	sta $f014	                sta io_blk_buffer
.ae5b		b5 03		lda $03,x	                lda 3,x
.ae5d		8d 15 f0	sta $f015	                sta io_blk_buffer+1
.ae60		8c 10 f0	sty $f010	                sty io_blk_action       ; trigger the r/w
.ae63		e8		inx		                inx                     ; clean up stack
.ae64		e8		inx		                inx
.ae65		e8		inx		                inx
.ae66		e8		inx		                inx
.ae67		60		rts		                rts
.ae68						xt_block_ramdrive_init:
.ae68		20 ac d7	jsr $d7ac	                jsr underflow_1
.ae6b		20 98 a1	jsr $a198	                jsr sliteral_runtime
>ae6e		76 ae 18 01			                .word ramdrive_code, ramdrive_code_end-ramdrive_code
.ae72		20 b2 88	jsr $88b2	                jsr xt_evaluate
.ae75						z_block_ramdrive_init:
.ae75		60		rts		                rts
.ae76						ramdrive_code:
>ae76		62 61 73 65 20 40 20 73		        .text "base @ swap decimal"
>ae7e		77 61 70 20 64 65 63 69 6d 61 6c
>ae89		20 31 30 32 34 20 2a		        .text " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
>ae90		20 64 75 70			        .text " dup"    ; ( Save a copy for formatting it at the end )
>ae94		20 62 75 66 66 65 72 3a		        .text " buffer: ramdrive" ; ( Create ramdrive )
>ae9c		20 72 61 6d 64 72 69 76 65
>aea5		20 3a 20 62 6c 6f 63 6b		        .text " : block-read-ramdrive"  ; ( addr u -- )
>aead		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65
>aebb		20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + swap 1024 move ;"
>aec3		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>aed3		73 77 61 70 20 31 30 32 34 20 6d 6f 76 65 20 3b
>aee3		20 3a 20 62 6c 6f 63 6b		        .text " : block-write-ramdrive" ; ( addr u -- )
>aeeb		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65
>aefa		20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + 1024 move ;"
>af02		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>af12		31 30 32 34 20 6d 6f 76 65 20 3b
>af1d		20 27 20 62 6c 6f 63 6b		        .text " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
>af25		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65 20 62
>af35		6c 6f 63 6b 2d 72 65 61 64 2d 76 65 63 74 6f 72
>af45		20 21
>af47		20 27 20 62 6c 6f 63 6b		        .text " ' block-write-ramdrive block-write-vector !"
>af4f		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65 20
>af5f		62 6c 6f 63 6b 2d 77 72 69 74 65 2d 76 65 63 74
>af6f		6f 72 20 21
>af73		20 72 61 6d 64 72 69 76		        .text " ramdrive swap blank base !"
>af7b		65 20 73 77 61 70 20 62 6c 61 6e 6b 20 62 61 73
>af8b		65 20 21
.af8e						ramdrive_code_end:
.af8e						xt_block_read:
.af8e		a0 32		ldy #$32	                ldy #blockread_offset
.af90		b1 08		lda ($08),y	                lda (up),y
.af92		85 25		sta $25		                sta tmp1
.af94		c8		iny		                iny
.af95		b1 08		lda ($08),y	                lda (up),y
.af97		85 26		sta $26		                sta tmp1+1
.af99		6c 25 00	jmp ($0025)	                jmp (tmp1)
.af9c						z_block_read:
.af9c						xt_block_read_vector:
.af9c		a9 32		lda #$32	                lda #blockread_offset
.af9e		4c 68 d6	jmp $d668	                jmp push_upvar_tos
.afa1						z_block_read_vector:
.afa1						xt_block_word_error:
.afa1		a9 0c		lda #$0c	                lda #err_blockwords
.afa3		4c c2 d7	jmp $d7c2	                jmp error       ; no RTS needed
.afa6						xt_block_write:
.afa6		a0 34		ldy #$34	                ldy #blockwrite_offset
.afa8		b1 08		lda ($08),y	                lda (up),y
.afaa		85 25		sta $25		                sta tmp1
.afac		c8		iny		                iny
.afad		b1 08		lda ($08),y	                lda (up),y
.afaf		85 26		sta $26		                sta tmp1+1
.afb1		6c 25 00	jmp ($0025)	                jmp (tmp1)
.afb4						z_block_write:
.afb4						xt_block_write_vector:
.afb4		a9 34		lda #$34	                lda #blockwrite_offset
.afb6		4c 68 d6	jmp $d668	                jmp push_upvar_tos
.afb9						z_block_write_vector:
.afb9						xt_buffblocknum:
.afb9		a9 2e		lda #$2e	                lda #buffblocknum_offset
.afbb		4c 68 d6	jmp $d668	                jmp push_upvar_tos
.afbe						z_buffblocknum:
.afbe						xt_buffer:
.afbe		a0 30		ldy #$30	                ldy #buffstatus_offset
.afc0		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.afc2		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.afc4		d0 0c		bne $afd2	                bne _buffer_available ; Unused or not dirty = available
.afc6		20 af ad	jsr $adaf	                jsr xt_blkbuffer
.afc9		20 b9 af	jsr $afb9	                jsr xt_buffblocknum
.afcc		20 1a 88	jsr $881a	                jsr xt_fetch
.afcf		20 a6 af	jsr $afa6	                jsr xt_block_write
.afd2						_buffer_available:
.afd2		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.afd4		b5 00		lda $00,x	                lda 0,x
.afd6		91 08		sta ($08),y	                sta (up),y
.afd8		c8		iny		                iny
.afd9		b5 01		lda $01,x	                lda 1,x
.afdb		91 08		sta ($08),y	                sta (up),y
.afdd		a9 01		lda #$01	                lda #1
.afdf		a0 30		ldy #$30	                ldy #buffstatus_offset
.afe1		91 08		sta ($08),y	                sta (up),y
.afe3		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.afe5		b1 08		lda ($08),y	                lda (up),y
.afe7		95 00		sta $00,x	                sta 0,x
.afe9		c8		iny		                iny
.afea		b1 08		lda ($08),y	                lda (up),y
.afec		95 01		sta $01,x	                sta 1,x
.afee		60		rts		z_buffer:       rts
.afef						xt_buffstatus:
.afef		a9 30		lda #$30	                lda #buffstatus_offset
.aff1		4c 68 d6	jmp $d668	                jmp push_upvar_tos
.aff4						z_buffstatus:
.aff4						xt_empty_buffers:
.aff4		a0 30		ldy #$30	                ldy #buffstatus_offset
.aff6		a9 00		lda #$00	                lda #0
.aff8		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.affa						z_empty_buffers:
.affa		60		rts		                rts
.affb						xt_flush:
.affb		20 56 b0	jsr $b056	                jsr xt_save_buffers
.affe		a0 30		ldy #$30	                ldy #buffstatus_offset
.b000		a9 00		lda #$00	                lda #0
.b002		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.b004						z_flush:
.b004		60		rts		                rts
.b005						xt_list:
.b005		20 ac d7	jsr $d7ac	                jsr underflow_1
.b008		20 71 b0	jsr $b071	                jsr xt_scr
.b00b		20 34 92	jsr $9234	                jsr xt_store
.b00e		20 10 b1	jsr $b110	                jsr xt_editor_l
.b011		60		rts		z_list:         rts
.b012						xt_load:
.b012		20 ac d7	jsr $d7ac	                jsr underflow_1
.b015		a0 05		ldy #$05	                ldy #blk_offset+1
.b017		b1 08		lda ($08),y	                lda (up),y
.b019		48		pha		                pha
.b01a		88		dey		                dey
.b01b		b1 08		lda ($08),y	                lda (up),y
.b01d		48		pha		                pha
.b01e		b5 00		lda $00,x	                lda 0,x
.b020		91 08		sta ($08),y	                sta (up),y
.b022		c8		iny		                iny
.b023		b5 01		lda $01,x	                lda 1,x
.b025		91 08		sta ($08),y	                sta (up),y
.b027		20 bd ad	jsr $adbd	                jsr xt_block
.b02a		ca		dex		                dex
.b02b		ca		dex		                dex
.b02c		a9 04		lda #$04	                lda #4
.b02e		95 01		sta $01,x	                sta 1,x
.b030		74 00		stz $00,x	                stz 0,x
.b032		20 ac 88	jsr $88ac	                jsr load_evaluate
.b035		a0 04		ldy #$04	                ldy #blk_offset
.b037		68		pla		                pla
.b038		91 08		sta ($08),y	                sta (up),y
.b03a		c8		iny		                iny
.b03b		68		pla		                pla
.b03c		91 08		sta ($08),y	                sta (up),y
.b03e		88		dey		                dey
.b03f		11 08		ora ($08),y	                ora (up),y
.b041		f0 12		beq $b055	                beq _done
.b043		ca		dex		                dex
.b044		ca		dex		                dex
.b045		a0 04		ldy #$04	                ldy #blk_offset
.b047		b1 08		lda ($08),y	                lda (up),y
.b049		95 00		sta $00,x	                sta 0,x
.b04b		c8		iny		                iny
.b04c		b1 08		lda ($08),y	                lda (up),y
.b04e		95 01		sta $01,x	                sta 1,x
.b050		20 bd ad	jsr $adbd	                jsr xt_block
.b053		e8		inx		                inx
.b054		e8		inx		                inx
.b055						_done:
.b055		60		rts		z_load:         rts
.b056						xt_save_buffers:
.b056		a0 30		ldy #$30	                ldy #buffstatus_offset
.b058		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.b05a		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.b05c		d0 12		bne $b070	                bne _done       ; Either not used or not dirty = done!
.b05e		20 af ad	jsr $adaf	                jsr xt_blkbuffer
.b061		20 b9 af	jsr $afb9	                jsr xt_buffblocknum
.b064		20 1a 88	jsr $881a	                jsr xt_fetch
.b067		20 a6 af	jsr $afa6	                jsr xt_block_write
.b06a		a9 01		lda #$01	                lda #1
.b06c		a0 30		ldy #$30	                ldy #buffstatus_offset
.b06e		91 08		sta ($08),y	                sta (up),y
.b070						_done:
.b070		60		rts		z_save_buffers: rts
.b071						xt_scr:
.b071		a9 06		lda #$06	                lda #scr_offset
.b073		4c 68 d6	jmp $d668	                jmp push_upvar_tos
.b076						z_scr:
.b076						xt_thru:
.b076		20 b1 d7	jsr $d7b1	                jsr underflow_2
.b079		b5 01		lda $01,x	                lda 1,x
.b07b		48		pha		                pha
.b07c		b5 00		lda $00,x	                lda 0,x
.b07e		48		pha		                pha
.b07f		e8		inx		                inx
.b080		e8		inx		                inx
.b081						_thru_loop:
.b081		b5 01		lda $01,x	                lda 1,x
.b083		48		pha		                pha
.b084		b5 00		lda $00,x	                lda 0,x
.b086		48		pha		                pha
.b087		20 12 b0	jsr $b012	                jsr xt_load
.b08a		68		pla		                pla
.b08b		85 25		sta $25		                sta tmp1
.b08d		68		pla		                pla
.b08e		85 26		sta $26		                sta tmp1+1
.b090		68		pla		                pla
.b091		85 27		sta $27		                sta tmp2
.b093		68		pla		                pla
.b094		85 28		sta $28		                sta tmp2+1
.b096		c5 26		cmp $26		                cmp tmp1+1
.b098		d0 08		bne $b0a2	                bne _next_screen
.b09a		a5 27		lda $27		                lda tmp2        ; Compare the LSB
.b09c		c5 25		cmp $25		                cmp tmp1
.b09e		d0 02		bne $b0a2	                bne _next_screen
.b0a0		80 18		bra $b0ba	                bra _done       ; We just did the last screen.
.b0a2						_next_screen:
.b0a2		a5 28		lda $28		                lda tmp2+1
.b0a4		48		pha		                pha
.b0a5		a5 27		lda $27		                lda tmp2
.b0a7		48		pha		                pha
.b0a8		e6 25		inc $25		                inc tmp1
.b0aa		d0 02		bne $b0ae	                bne +
.b0ac		e6 26		inc $26		                inc tmp1+1
.b0ae						+
.b0ae		ca		dex		                dex
.b0af		ca		dex		                dex
.b0b0		a5 25		lda $25		                lda tmp1
.b0b2		95 00		sta $00,x	                sta 0,x
.b0b4		a5 26		lda $26		                lda tmp1+1
.b0b6		95 01		sta $01,x	                sta 1,x
.b0b8		80 c7		bra $b081	                bra _thru_loop
.b0ba						_done:
.b0ba		60		rts		z_thru:         rts
.b0bb						xt_update:
.b0bb		a0 30		ldy #$30	                ldy #buffstatus_offset
.b0bd		b1 08		lda ($08),y	                lda (up),y
.b0bf		09 02		ora #$02	                ora #2          ; Turn on dirty flag (bit 2)
.b0c1		91 08		sta ($08),y	                sta (up),y
.b0c3		60		rts		z_update:       rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/editor.asm

.b0c4						xt_editor_screen_helper:
.b0c4		20 a0 86	jsr $86a0	                jsr xt_dup
.b0c7		20 71 b0	jsr $b071	                jsr xt_scr
.b0ca		20 34 92	jsr $9234	                jsr xt_store
.b0cd		4c be af	jmp $afbe	                jmp xt_buffer
.b0d0						xt_editor_enter_screen:
.b0d0		20 c4 b0	jsr $b0c4	                jsr xt_editor_screen_helper
.b0d3		20 9a 86	jsr $869a	                jsr xt_drop
.b0d6		64 35		stz $35		                stz ed_head
.b0d8						_prompt_loop:
.b0d8		ca		dex		                dex
.b0d9		ca		dex		                dex
.b0da		a5 35		lda $35		                lda ed_head
.b0dc		95 00		sta $00,x	                sta 0,x
.b0de		74 01		stz $01,x	                stz 1,x
.b0e0		20 a3 b1	jsr $b1a3	                jsr xt_editor_o
.b0e3		e6 35		inc $35		                inc ed_head
.b0e5		a9 10		lda #$10	                lda #16
.b0e7		c5 35		cmp $35		                cmp ed_head
.b0e9		d0 ed		bne $b0d8	                bne _prompt_loop
.b0eb						z_editor_enter_screen:
.b0eb		60		rts		                rts
.b0ec						xt_editor_erase_screen:
.b0ec		20 c4 b0	jsr $b0c4	                jsr xt_editor_screen_helper
.b0ef		ca		dex		                dex
.b0f0		ca		dex		                dex
.b0f1		74 00		stz $00,x	                stz 0,x
.b0f3		a9 04		lda #$04	                lda #4          ; 4 in MSB makes 1024 ($400).
.b0f5		95 01		sta $01,x	                sta 1,x
.b0f7		20 b2 87	jsr $87b2	                jsr xt_blank
.b0fa		20 bb b0	jsr $b0bb	                jsr xt_update
.b0fd						z_editor_erase_screen:
.b0fd		60		rts		                rts
.b0fe						xt_editor_el:
.b0fe		20 8a b1	jsr $b18a	                jsr xt_editor_line
.b101		ca		dex		                dex
.b102		ca		dex		                dex
.b103		a9 40		lda #$40	                lda #64
.b105		95 00		sta $00,x	                sta 0,x
.b107		74 01		stz $01,x	                stz 1,x
.b109		20 b2 87	jsr $87b2	                jsr xt_blank
.b10c		20 bb b0	jsr $b0bb	                jsr xt_update
.b10f		60		rts		z_editor_el:    rts
.b110						xt_editor_l:
.b110		ca		dex		                dex             ; Put SCR on the stack.
.b111		ca		dex		                dex
.b112		a0 06		ldy #$06	                ldy #scr_offset
.b114		b1 08		lda ($08),y	                lda (up),y
.b116		95 00		sta $00,x	                sta 0,x
.b118		c8		iny		                iny
.b119		b1 08		lda ($08),y	                lda (up),y
.b11b		95 01		sta $01,x	                sta 1,x
.b11d		20 bd ad	jsr $adbd	                jsr xt_block    ; Get the current screen.
.b120		20 3a 84	jsr $843a	                jsr xt_cr
.b123		80 08		bra $b12d	                bra _after_screen_msg
.b125						_screen_msg:
>b125		53 63 72 65 65 6e 20 23		                .text "Screen #"
.b12d						_after_screen_msg:
.b12d		20 98 a1	jsr $a198	                jsr sliteral_runtime
>b130		25 b1 08 00			                .word _screen_msg, _after_screen_msg-_screen_msg
.b134		20 d1 94	jsr $94d1	                jsr xt_type
.b137		20 71 b0	jsr $b071	                jsr xt_scr
.b13a		20 1a 88	jsr $881a	                jsr xt_fetch
.b13d		ca		dex		                dex
.b13e		ca		dex		                dex
.b13f		a9 04		lda #$04	                lda #4          ; four spaces
.b141		95 00		sta $00,x	                sta 0,x
.b143		74 01		stz $01,x	                stz 1,x
.b145		20 08 95	jsr $9508	                jsr xt_u_dot_r
.b148		64 29		stz $29		                stz tmp3
.b14a						_line_loop:
.b14a		20 3a 84	jsr $843a	                jsr xt_cr
.b14d		ca		dex		                dex
.b14e		ca		dex		                dex
.b14f		ca		dex		                dex
.b150		ca		dex		                dex
.b151		74 03		stz $03,x	                stz 3,x
.b153		a5 29		lda $29		                lda tmp3
.b155		95 02		sta $02,x	                sta 2,x
.b157		74 01		stz $01,x	                stz 1,x
.b159		a9 02		lda #$02	                lda #2
.b15b		95 00		sta $00,x	                sta 0,x
.b15d		20 08 95	jsr $9508	                jsr xt_u_dot_r
.b160		20 c5 91	jsr $91c5	                jsr xt_space
.b163		20 a0 86	jsr $86a0	                jsr xt_dup
.b166		ca		dex		                dex
.b167		ca		dex		                dex
.b168		a9 40		lda #$40	                lda #64
.b16a		95 00		sta $00,x	                sta 0,x
.b16c		74 01		stz $01,x	                stz 1,x
.b16e		20 d1 94	jsr $94d1	                jsr xt_type
.b171		18		clc		                clc
.b172		a9 40		lda #$40	                lda #64
.b174		75 00		adc $00,x	                adc 0,x
.b176		95 00		sta $00,x	                sta 0,x
.b178		90 02		bcc $b17c	                bcc +
.b17a		f6 01		inc $01,x	                inc 1,x
.b17c						+
.b17c		e6 29		inc $29		                inc tmp3
.b17e		a5 29		lda $29		                lda tmp3
.b180		c9 10		cmp #$10	                cmp #16
.b182		d0 c6		bne $b14a	                bne _line_loop
.b184		20 3a 84	jsr $843a	                jsr xt_cr
.b187		e8		inx		                inx
.b188		e8		inx		                inx
.b189		60		rts		z_editor_l:            rts
.b18a						xt_editor_line:
.b18a		20 ac d7	jsr $d7ac	                jsr underflow_1
.b18d		a0 06		ldy #$06	                ldy #6          ; *64 is same as left shift 6 times.
.b18f						_shift_tos_left:
.b18f		16 00		asl $00,x	                asl 0,x         ; Shift TOS to the left
.b191		36 01		rol $01,x	                rol 1,x         ; ROL brings MSb from lower byte.
.b193		88		dey		                dey
.b194		d0 f9		bne $b18f	                bne _shift_tos_left
.b196		20 71 b0	jsr $b071	                jsr xt_scr
.b199		20 1a 88	jsr $881a	                jsr xt_fetch
.b19c		20 bd ad	jsr $adbd	                jsr xt_block
.b19f		20 53 8e	jsr $8e53	                jsr xt_plus
.b1a2		60		rts		z_editor_line:  rts
.b1a3						xt_editor_o:
.b1a3		20 3a 84	jsr $843a	                jsr xt_cr
.b1a6		20 a0 86	jsr $86a0	                jsr xt_dup
.b1a9		20 de 9d	jsr $9dde	                jsr xt_two
.b1ac		20 08 95	jsr $9508	                jsr xt_u_dot_r
.b1af		20 c5 91	jsr $91c5	                jsr xt_space
.b1b2		a9 2a		lda #$2a	                lda #'*'
.b1b4		20 c5 86	jsr $86c5	                jsr emit_a
.b1b7		20 c5 91	jsr $91c5	                jsr xt_space
.b1ba		20 8a b1	jsr $b18a	                jsr xt_editor_line
.b1bd		20 a0 86	jsr $86a0	                jsr xt_dup      ; Save a copy of the line address for later.
.b1c0		ca		dex		                dex
.b1c1		ca		dex		                dex
.b1c2		a9 40		lda #$40	                lda #64         ; chars/line
.b1c4		95 00		sta $00,x	                sta 0,x
.b1c6		74 01		stz $01,x	                stz 1,x
.b1c8		20 e4 80	jsr $80e4	                jsr xt_accept
.b1cb		20 a0 86	jsr $86a0	                jsr xt_dup
.b1ce		20 97 9c	jsr $9c97	                jsr xt_not_rote ; -rot
.b1d1		20 53 8e	jsr $8e53	                jsr xt_plus
.b1d4		ca		dex		                dex
.b1d5		ca		dex		                dex
.b1d6		a9 40		lda #$40	                lda #64         ; chars/line
.b1d8		95 00		sta $00,x	                sta 0,x
.b1da		74 01		stz $01,x	                stz 1,x
.b1dc		20 8b 8f	jsr $8f8b	                jsr xt_rot
.b1df		20 e4 8b	jsr $8be4	                jsr xt_minus
.b1e2		20 b2 87	jsr $87b2	                jsr xt_blank
.b1e5		20 bb b0	jsr $b0bb	                jsr xt_update
.b1e8		60		rts		z_editor_o:     rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/wordlist.asm

.b1e9						xt_also:
.b1e9		20 14 b2	jsr $b214	                jsr xt_get_order
.b1ec		20 05 8d	jsr $8d05	                jsr xt_over
.b1ef		20 4a 92	jsr $924a	                jsr xt_swap
.b1f2		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.b1f5		20 1d b3	jsr $b31d	                jsr xt_set_order
.b1f8		60		rts		z_also:         rts
.b1f9						xt_definitions:
.b1f9		a0 23		ldy #$23	                ldy #search_order_offset    ; Transfer byte variable
.b1fb		b1 08		lda ($08),y	                lda (up),y                  ; SEARCH_ORDER[0] to
.b1fd		a0 08		ldy #$08	                ldy #current_offset         ; byte variable CURRENT.
.b1ff		91 08		sta ($08),y	                sta (up),y
.b201		60		rts		z_definitions:  rts
.b202						xt_forth:
.b202		a0 23		ldy #$23	                ldy #search_order_offset
.b204		a9 00		lda #$00	                lda #0          ; The WID for Forth is 0.
.b206		91 08		sta ($08),y	                sta (up),y
.b208						z_forth:
.b208		60		rts		                rts
.b209						xt_get_current:
.b209		ca		dex		                dex
.b20a		ca		dex		                dex
.b20b		a0 08		ldy #$08	                ldy #current_offset
.b20d		b1 08		lda ($08),y	                lda (up),y
.b20f		95 00		sta $00,x	                sta 0,x         ; CURRENT is a byte variable
.b211		74 01		stz $01,x	                stz 1,x         ; so the MSB is zero.
.b213		60		rts		z_get_current:  rts
.b214						xt_get_order:
.b214		a0 22		ldy #$22	                ldy #num_order_offset
.b216		b1 08		lda ($08),y	                lda (up),y
.b218		85 25		sta $25		                sta tmp1
.b21a		f0 16		beq $b232	                beq _done       ; If zero, there are no wordlists.
.b21c						_loop:
.b21c		c6 25		dec $25		                dec tmp1        ; Count down by bytes.
.b21e		a9 23		lda #$23	                lda #search_order_offset
.b220		18		clc		                clc
.b221		65 25		adc $25		                adc tmp1
.b223		a8		tay		                tay
.b224		ca		dex		                dex
.b225		ca		dex		                dex
.b226		b1 08		lda ($08),y	                lda (up),y
.b228		95 00		sta $00,x	                sta 0,x         ; Search order array is bytes, so
.b22a		74 01		stz $01,x	                stz 1,x         ; put a zero in the high byte.
.b22c		a9 00		lda #$00	                lda #0
.b22e		c5 25		cmp $25		                cmp tmp1
.b230		d0 ea		bne $b21c	                bne _loop
.b232						_done:
.b232		ca		dex		                dex
.b233		ca		dex		                dex
.b234		a0 22		ldy #$22	                ldy #num_order_offset
.b236		b1 08		lda ($08),y	                lda (up),y
.b238		95 00		sta $00,x	                sta 0,x
.b23a		74 01		stz $01,x	                stz 1,x         ; We only support 8 wordlists.
.b23c		60		rts		z_get_order:    rts
.b23d						xt_only:
.b23d		20 9c 93	jsr $939c	                jsr xt_true
.b240		20 1d b3	jsr $b31d	                jsr xt_set_order
.b243		60		rts		z_only:         rts
.b244						xt_order:
.b244		20 3a 84	jsr $843a	                jsr xt_cr
.b247		20 14 b2	jsr $b214	                jsr xt_get_order        ; ( wid_n ... wid_1 n )
.b24a		b5 00		lda $00,x	                lda 0,x                 ; assumes no more than 255 wordlists
.b24c		f0 1e		beq $b26c	                beq _drop_done
.b24e		a8		tay		                tay
.b24f						_loop:
.b24f		e8		inx		                inx
.b250		e8		inx		                inx                     ; DROP, now ( wid_n ... wid_1 )
.b251		b5 00		lda $00,x	                lda 0,x
.b253		5a		phy		                phy
.b254		20 6f b2	jsr $b26f	                jsr order_print_wid_string   ; internal helper function
.b257		7a		ply		                ply
.b258		88		dey		                dey
.b259		d0 f4		bne $b24f	                bne _loop
.b25b		20 c5 91	jsr $91c5	                jsr xt_space
.b25e		20 c5 91	jsr $91c5	                jsr xt_space
.b261		20 09 b2	jsr $b209	                jsr xt_get_current      ; ( wid )
.b264		b5 00		lda $00,x	                lda 0,x
.b266		20 6f b2	jsr $b26f	                jsr order_print_wid_string
.b269		20 3a 84	jsr $843a	                jsr xt_cr
.b26c						_drop_done:
.b26c		e8		inx		                inx
.b26d		e8		inx		                inx
.b26e						z_order:
.b26e		60		rts		                rts
.b26f						order_print_wid_string:
.b26f		c9 04		cmp #$04	                cmp #4
.b271		90 09		bcc $b27c	                bcc _output_string      ; less than 4, print a real string
.b273		ca		dex		                dex
.b274		ca		dex		                dex
.b275		95 00		sta $00,x	                sta 0,x
.b277		74 01		stz $01,x	                stz 1,x
.b279		4c fc 94	jmp $94fc	                jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
.b27c						_output_string:
.b27c		a8		tay		                tay
.b27d		b9 83 b2	lda $b283,y	                lda _wid_data,y
.b280		4c e8 d7	jmp $d7e8	                jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
.b283						_wid_data:
>b283		04				        .byte str_wid_forth            ; WID 0: "Forth"
>b284		05				        .byte str_wid_editor           ; WID 1: "Editor"
>b285		06				        .byte str_wid_assembler        ; WID 2: "Assembler"
>b286		07				        .byte str_wid_root             ; WID 3: "Root"
.b287						xt_previous:
.b287		20 14 b2	jsr $b214	                jsr xt_get_order
.b28a		20 30 8c	jsr $8c30	                jsr xt_nip
.b28d		20 dd 8c	jsr $8cdd	                jsr xt_one_minus
.b290		20 1d b3	jsr $b31d	                jsr xt_set_order
.b293		60		rts		z_previous:     rts
.b294						xt_root_wordlist:
.b294		ca		dex		                dex             ; The WID for the Root wordlist is 3.
.b295		ca		dex		                dex
.b296		a9 03		lda #$03	                lda #3
.b298		95 00		sta $00,x	                sta 0,x
.b29a		74 01		stz $01,x	                stz 1,x
.b29c						z_root_wordlist:
.b29c		60		rts		                rts
.b29d						xt_search_wordlist:
.b29d		20 b6 d7	jsr $d7b6	                jsr underflow_3
.b2a0		a5 08		lda $08		                lda up
.b2a2		18		clc		                clc
.b2a3		69 0a		adc #$0a	                adc #wordlists_offset
.b2a5		85 27		sta $27		                sta tmp2
.b2a7		a5 09		lda $09		                lda up+1
.b2a9		69 00		adc #$00	                adc #0          ; Adding carry
.b2ab		85 28		sta $28		                sta tmp2+1
.b2ad		b5 00		lda $00,x	                lda 0,x
.b2af		0a		asl a		                asl             ; Convert wid to offset in cells (x2)
.b2b0		65 27		adc $27		                adc tmp2
.b2b2		85 27		sta $27		                sta tmp2
.b2b4		90 02		bcc $b2b8	                bcc +
.b2b6		e6 28		inc $28		                inc tmp2+1      ; Propagate carry if needed.
.b2b8						+
.b2b8		e8		inx		                inx
.b2b9		e8		inx		                inx
.b2ba		b5 00		lda $00,x	                lda 0,x
.b2bc		15 01		ora $01,x	                ora 1,x
.b2be		f0 4e		beq $b30e	                beq _done
.b2c0		a5 27		lda $27		                lda tmp2
.b2c2		05 28		ora $28		                ora tmp2+1
.b2c4		f0 48		beq $b30e	                beq _done
.b2c6		b2 27		lda ($27)	                lda (tmp2)              ; nt of first word in Dictionary
.b2c8		85 25		sta $25		                sta tmp1
.b2ca		e6 27		inc $27		                inc tmp2                ; Move to the upper byte
.b2cc		d0 02		bne $b2d0	                bne +
.b2ce		e6 28		inc $28		                inc tmp2+1
.b2d0						+
.b2d0		b2 27		lda ($27)	                lda (tmp2)
.b2d2		85 26		sta $26		                sta tmp1+1
.b2d4		20 8e d6	jsr $d68e	                jsr find_header_name
.b2d7		f0 31		beq $b30a	                beq _fail_done
.b2d9		e8		inx		                inx
.b2da		e8		inx		                inx
.b2db		a5 25		lda $25		                lda tmp1
.b2dd		95 00		sta $00,x	                sta 0,x
.b2df		a5 26		lda $26		                lda tmp1+1
.b2e1		95 01		sta $01,x	                sta 1,x
.b2e3		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt nt )
.b2e6		20 50 9c	jsr $9c50	                jsr xt_name_to_int      ; ( nt xt )
.b2e9		20 4a 92	jsr $924a	                jsr xt_swap             ; ( xt nt )
.b2ec		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.b2ee		f6 00		inc $00,x	                inc 0,x
.b2f0		d0 02		bne $b2f4	                bne +
.b2f2		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.b2f4						+
.b2f4		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.b2f6		29 04		and #$04	                and #IM
.b2f8		d0 08		bne $b302	                bne _immediate          ; bit set, we're immediate
.b2fa		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.b2fc		95 00		sta $00,x	                sta 0,x
.b2fe		95 01		sta $01,x	                sta 1,x
.b300		80 0e		bra $b310	                bra _done_nodrop
.b302						_immediate:
.b302		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.b304		95 00		sta $00,x	                sta 0,x
.b306		74 01		stz $01,x	                stz 1,x
.b308		80 06		bra $b310	                bra _done_nodrop
.b30a						_fail_done:
.b30a		74 02		stz $02,x	                stz 2,x         ; failure flag
.b30c		74 03		stz $03,x	                stz 3,x
.b30e						_done:
.b30e		e8		inx		                inx
.b30f		e8		inx		                inx
.b310						_done_nodrop:
.b310						z_search_wordlist:
.b310		60		rts		                rts
.b311						xt_set_current:
.b311		20 ac d7	jsr $d7ac	                jsr underflow_1
.b314		a0 08		ldy #$08	                ldy #current_offset
.b316		b5 00		lda $00,x	                lda 0,x         ; CURRENT is byte variable
.b318		91 08		sta ($08),y	                sta (up),y      ; so only the LSB is used.
.b31a		e8		inx		                inx
.b31b		e8		inx		                inx
.b31c		60		rts		z_set_current:  rts
.b31d						xt_set_order:
.b31d		a9 ff		lda #$ff	                lda #$FF
.b31f		d5 01		cmp $01,x	                cmp 1,x
.b321		d0 12		bne $b335	                bne _start
.b323		d5 00		cmp $00,x	                cmp 0,x
.b325		d0 0e		bne $b335	                bne _start
.b327		ca		dex		                dex             ; Make room for the count.
.b328		ca		dex		                dex
.b329		74 03		stz $03,x	                stz 3,x         ; ROOT-WORDLIST is 3
.b32b		a9 03		lda #$03	                lda #3
.b32d		95 02		sta $02,x	                sta 2,x
.b32f		74 01		stz $01,x	                stz 1,x         ; Count is 1.
.b331		a9 01		lda #$01	                lda #1
.b333		95 00		sta $00,x	                sta 0,x
.b335						_start:
.b335		a0 22		ldy #$22	                ldy #num_order_offset
.b337		b5 00		lda $00,x	                lda 0,x
.b339		91 08		sta ($08),y	                sta (up),y      ; #ORDER is a byte variable.
.b33b		85 25		sta $25		                sta tmp1        ; Save a copy for zero check and looping.
.b33d		e8		inx		                inx             ; Drop the count off the data stack.
.b33e		e8		inx		                inx
.b33f		a5 25		lda $25		                lda tmp1
.b341		f0 0d		beq $b350	                beq _done       ; If zero, there are no wordlists.
.b343		a0 23		ldy #$23	                ldy #search_order_offset
.b345						_loop:
.b345		b5 00		lda $00,x	                lda 0,x         ; The search order is a byte array
.b347		91 08		sta ($08),y	                sta (up),y      ; so only save the LSB
.b349		c8		iny		                iny
.b34a		e8		inx		                inx
.b34b		e8		inx		                inx
.b34c		c6 25		dec $25		                dec tmp1
.b34e		d0 f5		bne $b345	                bne _loop
.b350						_done:
.b350		60		rts		z_set_order:    rts
.b351						xt_to_order:
.b351		20 88 93	jsr $9388	                jsr xt_to_r
.b354		20 14 b2	jsr $b214	                jsr xt_get_order
.b357		20 ee 8e	jsr $8eee	                jsr xt_r_from
.b35a		20 4a 92	jsr $924a	                jsr xt_swap
.b35d		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.b360		20 1d b3	jsr $b31d	                jsr xt_set_order
.b363		60		rts		z_to_order:     rts
.b364						xt_wordlist:
.b364		a0 09		ldy #$09	                ldy #num_wordlists_offset
.b366		b1 08		lda ($08),y	                lda (up),y      ; This is a byte variable, so only
.b368		c9 0c		cmp #$0c	                cmp #max_wordlists
.b36a		d0 05		bne $b371	                bne _ok
.b36c		a9 0b		lda #$0b	                lda #err_wordlist
.b36e		4c c2 d7	jmp $d7c2	                jmp error
.b371						_ok:
.b371		1a		inc a		                ina             ; Increment the wordlist#
.b372		91 08		sta ($08),y	                sta (up),y      ; Save it into byte variable #wordlists
.b374		ca		dex		                dex             ; and put it on the stack.
.b375		ca		dex		                dex
.b376		95 00		sta $00,x	                sta 0,x
.b378		74 01		stz $01,x	                stz 1,x         ; 12 is the max, so upper byte is always zero.
.b37a		60		rts		z_wordlist:     rts

;******  Return to file: platform/../words/all.asm


;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../definitions.asm

=120						dsp0      = zpage_end-7    ; initial Data Stack Pointer
.b37b						cold_zp_table:
>b37b	0000	00 08				cp:         .word cp0+256+1024      ; Compiler Pointer
>b37d	0002	5e bb				dp:         .word dictionary_start  ; Dictionary Pointer
>b37f	0004	00 00				ip:         .word 0                 ; Instruction Pointer (current xt)
>b381	0006	00 00				workword:   .word 0                 ; nt (not xt!) of word being compiled, except in
>b383	0008	00 03				up:         .word cp0               ; Forth user vars at start of available RAM
>b385	000a	00 00				insrc:      .word 0                 ; input source for SOURCE-ID (0 for keyboard)
>b387	000c	00 02				cib:        .word buffer0           ; address of current input buffer
>b389	000e	00 00				ciblen:     .word 0                 ; length of current input buffer
>b38b	0010	00 00				toin:       .word 0                 ; pointer to CIB (>IN in Forth)
>b38d	0012	2d f0				output:     .word kernel_putc       ; vector for EMIT
>b38f	0014	27 f0				input:      .word kernel_getc       ; vector for KEY
>b391	0016	00 00				havekey:    .word 0                 ; vector for KEY?  (unused see https://github.com/SamCoVT/TaliForth2/issues/62)
>b393	0018	0a 00				base:       .word 10                ; number radix, default decimal
>b395	001a	00 00				state:      .word 0                 ; STATE: -1 compile, 0 interpret
>b397	001c	00 00				status:     .word 0                 ; internal status used by : :NONAME ; ACCEPT
>b399	001e					tmpdsp:     .byte ?         ; temporary DSP (X) storage (single byte)
>b39a	001f					loopctrl:   .byte ?         ; Offset and flags for DO/LOOP/+LOOP control.
>b39b	0020					loopidx0    .byte ?         ; cached LSB of current loop index for LOOP (not +LOOP)
=$100						lcbstack = $100
=256						loopindex = lcbstack+0      ; loop control block index for adjusted loopindex
=258						loopfufa  = lcbstack+2      ; loop control block offset for limit fudge factor
>b39c	0021					loopleave:  .word ?         ; tmp for LEAVE chaining ;TODO could it use existing tmp?
>b39e	0023					tmptos:     .word ?         ; temporary TOS storage
>b3a0	0025					tmp1:       .word ?         ; temporary storage
>b3a2	0027					tmp2:       .word ?         ; temporary storage
>b3a4	0029					tmp3:       .word ?         ; temporary storage (especially for print)
>b3a6	002b					tohold:     .word ?         ; pointer for formatted output
>b3a8	002d					scratch:    .word ?,?,?,?   ; 8 byte scratchpad (see UM/MOD)
>b3b0	0035					tmped:      .word ?,?,?     ; temporary for editors
.b399						cold_zp_table_end:
.b399						cold_user_table:
>b399	0000	14 00				nc_limit_offset:        .word 20        ; byte limit for Native Compile size
>b39b	0002	00 00				uf_strip_offset:        .word 0         ; flag to strip underflow detection (0 off)
>b39d	0004	00 00				blk_offset:             .word 0         ; BLK
>b39f	0006	00 00				scr_offset:             .word 0         ; SCR
=12						max_wordlists = 12    ; Maximum number of wordlists supported (4 built-in, 8 user wordlists)
.b3a1	0008					marker_start_offset:
>b3a1	0008	00				current_offset:         .byte 0         ; CURRENT = FORTH-WORDLIST (compilation wordlist)
>b3a2	0009	04				num_wordlists_offset:   .byte 4         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
.b3a3	000a					wordlists_offset:
>b3a3	000a	5e bb				    .word dictionary_start              ; FORTH-WORDLIST
>b3a5	000c	bd c9				    .word editor_dictionary_start       ; EDITOR-WORDLIST
>b3a7	000e	0d ca				    .word assembler_dictionary_start    ; ASSEMBLER-WORDLIST
>b3a9	0010	7c c9				    .word root_dictionary_start         ; ROOT-WORDLIST
>b3ab	0012	00 00 00 00 00 00 00 00		    .word 0,0,0,0,0,0,0,0               ; Space for 8 User wordlists
>b3b3	001a	00 00 00 00 00 00 00 00
>b3bb	0022	01				num_order_offset:       .byte 1         ; #ORDER (Number of wordlists in search order)
.b3bc	0023					search_order_offset:
>b3bc	0023	00 00 00 00 00 00 00 00		    .byte 0,0,0,0,0,0,0,0,0             ; SEARCH-ORDER (9 bytes to keep offsets even)
>b3c4	002b	00
.b3c5	002c					marker_end_offset:
>b3c5	002c	00 04				blkbuffer_offset:       .word cp0+256   ; Address of buffer (right after USER vars)
>b3c7	002e	00 00				buffblocknum_offset:    .word 0         ; Block number current in buffer
>b3c9	0030	00 00				buffstatus_offset:      .word 0         ; Buffer status (bit 0 = used, bit 1 = dirty) (not in use)
>b3cb	0032	a1 af				blockread_offset:       .word xt_block_word_error   ; Vector to block reading routine
>b3cd	0034	a1 af				blockwrite_offset:      .word xt_block_word_error   ; Vector to block writing routine
.b3cf						cold_user_table_end:
=$03						AscCC   = $03  ; break (CTRL-c)
=$07						AscBELL = $07  ; bell sound
=$08						AscBS   = $08  ; backspace
=$0a						AscLF   = $0A  ; line feed
=$0d						AscCR   = $0D  ; carriage return
=$1b						AscESC  = $1B  ; escape
=$20						AscSP   = $20  ; space
=$7f						AscDEL  = $7F  ; delete (CTRL-h)
=$10						AscCP   = $10  ; CTRL-p (used to recall previous input history)
=$0e						AscCN   = $0E  ; CTRL-n (used to recall next input history)
=$20						OpJSR   = $20
=$4c						OpJMP   = $4C
=$d0						OpBNE   = $D0
=$f0						OpBEQ   = $F0
=$60						OpRTS   = $60
=$80						OpBRA   = $80
=1						CO = 1  ; Compile Only
=2						AN = 2  ; Always Native Compile
=4						IM = 4  ; Immediate Word
=8						NN = 8  ; Never Native Compile
=16						UF = 16 ; Includes Underflow Check (RESERVED)
=32						HC = 32 ; Word has Code Field Area (CFA)
=79						MAX_LINE_LENGTH  = 79      ; assumes 80 character lines

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../opcodes.asm

.b3cf						oc_index_table:
>b3cf		cf b5 d3 b5 7a ba 7a ba		        .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc07
>b3d7		db b5 e1 b5 e7 b5 ed b5
>b3df		f4 b5 f8 b5 fe b5 7a ba		        .word oc08, oc09, oc0A, oc__, oc0C, oc0D, oc0E, oc0F
>b3e7		04 b6 08 b6 0c b6 10 b6
>b3ef		15 b6 19 b6 21 b6 7a ba		        .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
>b3f7		28 b6 2e b6 35 b6 3c b6
>b3ff		43 b6 47 b6 4d b6 7a ba		        .word oc18, oc19, oc1A, oc__, oc1C, oc1D, oc1E, oc1F
>b407		53 b6 57 b6 5d b6 63 b6
>b40f		68 b6 6c b6 7a ba 7a ba		        .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
>b417		74 b6 7a b6 80 b6 86 b6
>b41f		8d b6 91 b6 97 b6 7a ba		        .word oc28, oc29, oc2A, oc__, oc2C, oc2D, oc2E, oc2F
>b427		9d b6 a1 b6 a6 b6 aa b6
>b42f		af b6 b3 b6 bb b6 7a ba		        .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
>b437		c2 b6 ca b6 d1 b6 d8 b6
>b43f		df b6 e3 b6 e9 b6 7a ba		        .word oc38, oc39, oc3A, oc__, oc3C, oc3D, oc3E, oc3F
>b447		ef b6 f5 b6 fb b6 01 b7
>b44f		06 b7 0a b7 7a ba 7a ba		        .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
>b457		7a ba 12 b7 18 b7 1e b7
>b45f		25 b7 29 b7 2f b7 7a ba		        .word oc48, oc49, oc4A, oc__, oc4C, oc4D, oc4E, oc4F
>b467		35 b7 39 b7 3d b7 41 b7
>b46f		46 b7 4a b7 52 b7 7a ba		        .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
>b477		7a ba 59 b7 60 b7 67 b7
>b47f		6e b7 72 b7 78 b7 7a ba		        .word oc58, oc59, oc5A, oc__, oc__, oc5D, oc5E, oc5F
>b487		7a ba 7c b7 82 b7 88 b7
>b48f		8d b7 91 b7 7a ba 7a ba		        .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
>b497		99 b7 9f b7 a5 b7 ab b7
>b49f		b2 b7 b6 b7 bc b7 7a ba		        .word oc68, oc69, oc6A, oc__, oc6C, oc6D, oc6E, oc6F
>b4a7		c2 b7 c8 b7 cc b7 d0 b7
>b4af		d5 b7 d9 b7 e1 b7 7a ba		        .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
>b4b7		e8 b7 ef b7 f6 b7 fd b7
>b4bf		04 b8 08 b8 0e b8 7a ba		        .word oc78, oc79, oc7A, oc__, oc7C, oc7D, oc7E, oc7F
>b4c7		12 b8 19 b8 1f b8 25 b8
>b4cf		2a b8 2e b8 7a ba 7a ba		        .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc87
>b4d7		36 b8 3c b8 42 b8 48 b8
>b4df		4f b8 53 b8 59 b8 7a ba		        .word oc88, oc89, oc8A, oc__, oc8C, oc8D, oc8E, oc8F
>b4e7		5d b8 61 b8 65 b8 69 b8
>b4ef		6e b8 72 b8 7a b8 7a ba		        .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
>b4f7		81 b8 88 b8 8f b8 96 b8
>b4ff		9d b8 a1 b8 a7 b8 7a ba		        .word oc98, oc99, oc9A, oc__, oc9C, oc9D, oc9E, oc9F
>b507		ab b8 af b8 b5 b8 bb b8
>b50f		c0 b8 c6 b8 ce b8 7a ba		        .word ocA0, ocA1, ocA2, oc__, ocA4, ocA5, ocA6, ocA7
>b517		d4 b8 da b8 e0 b8 e6 b8
>b51f		ed b8 f1 b8 f7 b8 7a ba		        .word ocA8, ocA9, ocAA, oc__, ocAC, ocAD, ocAE, ocAF
>b527		fb b8 ff b8 03 b9 07 b9
>b52f		0c b9 10 b9 18 b9 7a ba		        .word ocB0, ocB1, ocB2, oc__, ocB4, ocB5, ocB6, ocB7
>b537		1f b9 26 b9 2d b9 34 b9
>b53f		3b b9 3f b9 45 b9 7a ba		        .word ocB8, ocB9, ocBA, oc__, ocBC, ocBD, ocBE, ocBF
>b547		49 b9 4f b9 55 b9 5b b9
>b54f		60 b9 66 b9 7a ba 7a ba		        .word ocC0, ocC1, oc__, oc__, ocC4, ocC5, ocC6, ocC7
>b557		6e b9 74 b9 7a b9 80 b9
>b55f		87 b9 8b b9 91 b9 7a ba		        .word ocC8, ocC9, ocCA, oc__, ocCC, ocCD, ocCE, ocCF
>b567		95 b9 99 b9 9d b9 a1 b9
>b56f		a6 b9 aa b9 b2 b9 7a ba		        .word ocD0, ocD1, ocD2, oc__, oc__, ocD5, ocD6, ocD7
>b577		7a ba b9 b9 c0 b9 c7 b9
>b57f		ce b9 d2 b9 d8 b9 7a ba		        .word ocD8, ocD9, ocDA, oc__, oc__, ocDD, ocDE, ocDF
>b587		7a ba dc b9 e2 b9 e8 b9
>b58f		ed b9 f3 b9 7a ba 7a ba		        .word ocE0, ocE1, oc__, oc__, ocE4, ocE5, ocE6, ocE7
>b597		fb b9 01 ba 07 ba 0d ba
>b59f		14 ba 18 ba 1e ba 7a ba		        .word ocE8, ocE9, ocEA, oc__, ocEC, ocED, ocEE, ocEF
>b5a7		22 ba 26 ba 2a ba 2e ba
>b5af		33 ba 37 ba 3f ba 7a ba		        .word ocF0, ocF1, ocF2, oc__, oc__, ocF5, ocF6, ocF7
>b5b7		7a ba 46 ba 4d ba 54 ba
>b5bf		5b ba 5f ba 65 ba 7a ba		        .word ocF8, ocF9, ocFA, oc__, oc__, ocFD, ocFE, ocFF
>b5c7		7a ba 69 ba 6f ba 75 ba
>b5cf		83 62 72 6b				oc00:	.text 2*64+3, "brk"              ; enforce the signature byte
>b5d3		87 6f 72 61 2e 7a 78 69			oc01:	.text 2*64+7, "ora.zxi"
>b5db		85 74 73 62 2e 7a		    oc04:   .text 2*64+5, "tsb.z"
>b5e1		85 6f 72 61 2e 7a			oc05:	.text 2*64+5, "ora.z"
>b5e7		85 61 73 6c 2e 7a			oc06:	.text 2*64+5, "asl.z"
>b5ed		86 72 6d 62 30 2e 7a			oc07:	.text 2*64+6, "rmb0.z"
>b5f4		43 70 68 70				oc08:	.text 1*64+3, "php"
>b5f8		85 6f 72 61 2e 23			oc09:	.text 2*64+5, "ora.#"
>b5fe		45 61 73 6c 2e 61			oc0A:	.text 1*64+5, "asl.a"
>b604		c3 74 73 62				oc0C:	.text 3*64+3, "tsb"
>b608		c3 6f 72 61				oc0D:	.text 3*64+3, "ora"
>b60c		c3 61 73 6c				oc0E:	.text 3*64+3, "asl"
>b610		c4 62 62 72 30				oc0F:	.text 3*64+4, "bbr0"
>b615		83 62 70 6c				oc10:	.text 2*64+3, "bpl"
>b619		87 6f 72 61 2e 7a 69 79			oc11:	.text 2*64+7, "ora.ziy"
>b621		86 6f 72 61 2e 7a 69			oc12:	.text 2*64+6, "ora.zi"
>b628		85 74 72 62 2e 7a			oc14:	.text 2*64+5, "trb.z"
>b62e		86 6f 72 61 2e 7a 78			oc15:	.text 2*64+6, "ora.zx"
>b635		86 61 73 6c 2e 7a 78			oc16:	.text 2*64+6, "asl.zx"
>b63c		86 72 6d 62 31 2e 7a			oc17:	.text 2*64+6, "rmb1.z"
>b643		43 63 6c 63				oc18:	.text 1*64+3, "clc"
>b647		c5 6f 72 61 2e 79			oc19:	.text 3*64+5, "ora.y"
>b64d		45 69 6e 63 2e 61			oc1A:	.text 1*64+5, "inc.a"
>b653		c3 74 72 62				oc1C:	.text 3*64+3, "trb"
>b657		c5 6f 72 61 2e 78			oc1D:	.text 3*64+5, "ora.x"
>b65d		c5 61 73 6c 2e 78			oc1E:	.text 3*64+5, "asl.x"
>b663		c4 62 62 72 31				oc1F:	.text 3*64+4, "bbr1"
>b668		c3 6a 73 72				oc20:	.text 3*64+3, "jsr"
>b66c		87 61 6e 64 2e 7a 78 69			oc21:	.text 2*64+7, "and.zxi"
>b674		85 62 69 74 2e 7a			oc24:	.text 2*64+5, "bit.z"
>b67a		85 61 6e 64 2e 7a			oc25:	.text 2*64+5, "and.z"
>b680		85 72 6f 6c 2e 7a			oc26:	.text 2*64+5, "rol.z"
>b686		86 72 6d 62 32 2e 7a			oc27:	.text 2*64+6, "rmb2.z"
>b68d		43 70 6c 70				oc28:	.text 1*64+3, "plp"
>b691		85 61 6e 64 2e 23			oc29:	.text 2*64+5, "and.#"
>b697		45 72 6f 6c 2e 61			oc2A:	.text 1*64+5, "rol.a"
>b69d		c3 62 69 74				oc2C:	.text 3*64+3, "bit"
>b6a1		c4 61 6e 64 2e				oc2D:	.text 3*64+4, "and."
>b6a6		c3 72 6f 6c				oc2E:	.text 3*64+3, "rol"
>b6aa		c4 62 62 72 32				oc2F:	.text 3*64+4, "bbr2"
>b6af		83 62 6d 69				oc30:	.text 2*64+3, "bmi"
>b6b3		87 61 6e 64 2e 7a 69 79			oc31:	.text 2*64+7, "and.ziy"
>b6bb		86 61 6e 64 2e 7a 69			oc32:	.text 2*64+6, "and.zi"
>b6c2		87 62 69 74 2e 7a 78 69			oc34:	.text 2*64+7, "bit.zxi"
>b6ca		86 61 6e 64 2e 7a 78			oc35:	.text 2*64+6, "and.zx"
>b6d1		86 72 6f 6c 2e 7a 78			oc36:	.text 2*64+6, "rol.zx"
>b6d8		86 72 6d 62 33 2e 7a			oc37:	.text 2*64+6, "rmb3.z"
>b6df		43 73 65 63				oc38:	.text 1*64+3, "sec"
>b6e3		c5 61 6e 64 2e 79			oc39:	.text 3*64+5, "and.y"
>b6e9		45 64 65 63 2e 61			oc3A:	.text 1*64+5, "dec.a"
>b6ef		c5 62 69 74 2e 78			oc3C:	.text 3*64+5, "bit.x"
>b6f5		c5 61 6e 64 2e 78			oc3D:	.text 3*64+5, "and.x"
>b6fb		c5 72 6f 6c 2e 78			oc3E:	.text 3*64+5, "rol.x"
>b701		c4 62 62 72 33				oc3F:	.text 3*64+4, "bbr3"
>b706		43 72 74 69				oc40:	.text 1*64+3, "rti"
>b70a		87 65 6f 72 2e 7a 78 69			oc41:	.text 2*64+7, "eor.zxi"
>b712		85 65 6f 72 2e 7a			oc45:	.text 2*64+5, "eor.z"
>b718		85 6c 73 72 2e 7a			oc46:	.text 2*64+5, "lsr.z"
>b71e		86 72 62 6d 34 2e 7a			oc47:	.text 2*64+6, "rbm4.z"
>b725		43 70 68 61				oc48:	.text 1*64+3, "pha"
>b729		85 65 6f 72 2e 23			oc49:	.text 2*64+5, "eor.#"
>b72f		45 6c 73 72 2e 61			oc4A:	.text 1*64+5, "lsr.a"
>b735		c3 6a 6d 70				oc4C:	.text 3*64+3, "jmp"
>b739		c3 65 6f 72				oc4D:	.text 3*64+3, "eor"
>b73d		c3 6c 73 72				oc4E:	.text 3*64+3, "lsr"
>b741		c4 62 62 72 34				oc4F:	.text 3*64+4, "bbr4"
>b746		83 62 76 63				oc50:	.text 2*64+3, "bvc"
>b74a		87 65 6f 72 2e 7a 69 79			oc51:	.text 2*64+7, "eor.ziy"
>b752		86 65 6f 72 2e 7a 69			oc52:	.text 2*64+6, "eor.zi"
>b759		86 65 6f 72 2e 7a 78			oc55:	.text 2*64+6, "eor.zx"
>b760		86 6c 73 72 2e 7a 78			oc56:	.text 2*64+6, "lsr.zx"
>b767		86 72 62 6d 35 2e 7a			oc57:	.text 2*64+6, "rbm5.z"
>b76e		43 63 6c 69				oc58:	.text 1*64+3, "cli"
>b772		c5 65 6f 72 2e 79			oc59:	.text 3*64+5, "eor.y"
>b778		43 70 68 79				oc5A:	.text 1*64+3, "phy"
>b77c		c5 65 6f 72 2e 78			oc5D:	.text 3*64+5, "eor.x"
>b782		c5 6c 73 72 2e 78			oc5E:	.text 3*64+5, "lsr.x"
>b788		c4 62 62 72 35				oc5F:	.text 3*64+4, "bbr5"
>b78d		43 72 74 73				oc60:	.text 1*64+3, "rts"
>b791		87 61 64 63 2e 7a 78 69			oc61:	.text 2*64+7, "adc.zxi"
>b799		85 73 74 7a 2e 7a			oc64:	.text 2*64+5, "stz.z"
>b79f		85 61 64 63 2e 7a			oc65:	.text 2*64+5, "adc.z"
>b7a5		85 72 6f 72 2e 7a			oc66:	.text 2*64+5, "ror.z"
>b7ab		86 72 6d 62 36 2e 7a			oc67:	.text 2*64+6, "rmb6.z"
>b7b2		43 70 6c 61				oc68:	.text 1*64+3, "pla"
>b7b6		85 61 64 63 2e 23			oc69:	.text 2*64+5, "adc.#"
>b7bc		45 72 6f 72 2e 61			oc6A:	.text 1*64+5, "ror.a"
>b7c2		c5 6a 6d 70 2e 69			oc6C:	.text 3*64+5, "jmp.i"
>b7c8		c3 61 64 63				oc6D:	.text 3*64+3, "adc"
>b7cc		c3 72 6f 72				oc6E:	.text 3*64+3, "ror"
>b7d0		c4 62 62 72 36				oc6F:	.text 3*64+4, "bbr6"
>b7d5		83 62 76 73				oc70:	.text 2*64+3, "bvs"
>b7d9		87 61 64 63 2e 7a 69 79			oc71:	.text 2*64+7, "adc.ziy"
>b7e1		86 61 64 63 2e 7a 69			oc72:	.text 2*64+6, "adc.zi"
>b7e8		86 73 74 7a 2e 7a 78			oc74:	.text 2*64+6, "stz.zx"
>b7ef		86 61 64 63 2e 7a 78			oc75:	.text 2*64+6, "adc.zx"
>b7f6		86 72 6f 72 2e 7a 78			oc76:	.text 2*64+6, "ror.zx"
>b7fd		86 72 6d 62 37 2e 7a			oc77:	.text 2*64+6, "rmb7.z"
>b804		43 73 65 69				oc78:	.text 1*64+3, "sei"
>b808		c5 61 64 63 2e 79			oc79:	.text 3*64+5, "adc.y"
>b80e		43 70 6c 79				oc7A:	.text 1*64+3, "ply"
>b812		c6 6a 6d 70 2e 78 69			oc7C:	.text 3*64+6, "jmp.xi"
>b819		c5 61 64 63 2e 78			oc7D:	.text 3*64+5, "adc.x"
>b81f		c5 72 6f 72 2e 78			oc7E:	.text 3*64+5, "ror.x"
>b825		c4 62 62 72 37				oc7F:	.text 3*64+4, "bbr7"
>b82a		83 62 72 61				oc80:	.text 2*64+3, "bra"
>b82e		87 73 74 61 2e 7a 78 69			oc81:	.text 2*64+7, "sta.zxi"
>b836		85 73 74 79 2e 7a			oc84:	.text 2*64+5, "sty.z"
>b83c		85 73 74 61 2e 7a			oc85:	.text 2*64+5, "sta.z"
>b842		85 73 74 78 2e 7a			oc86:	.text 2*64+5, "stx.z"
>b848		86 73 6d 62 30 2e 7a			oc87:	.text 2*64+6, "smb0.z"
>b84f		43 64 65 79				oc88:	.text 1*64+3, "dey"
>b853		85 62 69 74 2e 23			oc89:	.text 2*64+5, "bit.#"
>b859		43 74 78 61				oc8A:	.text 1*64+3, "txa"
>b85d		c3 73 74 79				oc8C:	.text 3*64+3, "sty"
>b861		c3 73 74 61				oc8D:	.text 3*64+3, "sta"
>b865		c3 73 74 78				oc8E:	.text 3*64+3, "stx"
>b869		c4 62 62 73 30				oc8F:	.text 3*64+4, "bbs0"
>b86e		83 62 63 63				oc90:	.text 2*64+3, "bcc"
>b872		87 73 74 61 2e 7a 69 79			oc91:	.text 2*64+7, "sta.ziy"
>b87a		86 73 74 61 2e 7a 69			oc92:	.text 2*64+6, "sta.zi"
>b881		86 73 74 79 2e 7a 78			oc94:	.text 2*64+6, "sty.zx"
>b888		86 73 74 61 2e 7a 78			oc95:	.text 2*64+6, "sta.zx"
>b88f		86 73 74 78 2e 7a 79			oc96:	.text 2*64+6, "stx.zy"
>b896		86 73 6d 62 31 2e 7a			oc97:	.text 2*64+6, "smb1.z"
>b89d		43 74 79 61				oc98:	.text 1*64+3, "tya"
>b8a1		c5 73 74 61 2e 79			oc99:	.text 3*64+5, "sta.y"
>b8a7		43 74 78 73				oc9A:	.text 1*64+3, "txs"
>b8ab		c3 73 74 7a				oc9C:	.text 3*64+3, "stz"
>b8af		c5 73 74 61 2e 78			oc9D:	.text 3*64+5, "sta.x"
>b8b5		c5 73 74 7a 2e 78			oc9E:	.text 3*64+5, "stz.x"
>b8bb		c4 62 62 73 31				oc9F:	.text 3*64+4, "bbs1"
>b8c0		85 6c 64 79 2e 23			ocA0:	.text 2*64+5, "ldy.#"
>b8c6		87 6c 64 61 2e 7a 78 69			ocA1:	.text 2*64+7, "lda.zxi"
>b8ce		85 6c 64 78 2e 23			ocA2:	.text 2*64+5, "ldx.#"
>b8d4		85 6c 64 79 2e 7a			ocA4:	.text 2*64+5, "ldy.z"
>b8da		85 6c 64 61 2e 7a			ocA5:	.text 2*64+5, "lda.z"
>b8e0		85 6c 64 78 2e 7a			ocA6:	.text 2*64+5, "ldx.z"
>b8e6		86 73 6d 62 32 2e 7a			ocA7:	.text 2*64+6, "smb2.z"
>b8ed		43 74 61 79				ocA8:	.text 1*64+3, "tay"
>b8f1		85 6c 64 61 2e 23			ocA9:	.text 2*64+5, "lda.#"
>b8f7		43 74 61 78				ocAA:	.text 1*64+3, "tax"
>b8fb		c3 6c 64 79				ocAC:	.text 3*64+3, "ldy"
>b8ff		c3 6c 64 61				ocAD:	.text 3*64+3, "lda"
>b903		c3 6c 64 78				ocAE:	.text 3*64+3, "ldx"
>b907		c4 62 62 73 32				ocAF:	.text 3*64+4, "bbs2"
>b90c		83 62 63 73				ocB0:	.text 2*64+3, "bcs"
>b910		87 6c 64 61 2e 7a 69 79			ocB1:	.text 2*64+7, "lda.ziy"
>b918		86 6c 64 61 2e 7a 69			ocB2:	.text 2*64+6, "lda.zi"
>b91f		86 6c 64 79 2e 7a 78			ocB4:	.text 2*64+6, "ldy.zx"
>b926		86 6c 64 61 2e 7a 78			ocB5:	.text 2*64+6, "lda.zx"
>b92d		86 6c 64 78 2e 7a 79			ocB6:	.text 2*64+6, "ldx.zy"
>b934		86 73 6d 62 33 2e 7a			ocB7:	.text 2*64+6, "smb3.z"
>b93b		43 63 6c 76				ocB8:	.text 1*64+3, "clv"
>b93f		c5 6c 64 61 2e 79			ocB9:	.text 3*64+5, "lda.y"
>b945		43 74 73 78				ocBA:	.text 1*64+3, "tsx"
>b949		c5 6c 64 79 2e 78			ocBC:	.text 3*64+5, "ldy.x"
>b94f		c5 6c 64 61 2e 78			ocBD:	.text 3*64+5, "lda.x"
>b955		c5 6c 64 78 2e 79			ocBE:	.text 3*64+5, "ldx.y"
>b95b		c4 62 62 73 34				ocBF:	.text 3*64+4, "bbs4"
>b960		85 63 70 79 2e 23			ocC0:	.text 2*64+5, "cpy.#"
>b966		87 63 6d 70 2e 7a 78 69			ocC1:	.text 2*64+7, "cmp.zxi"
>b96e		85 63 70 79 2e 7a			ocC4:	.text 2*64+5, "cpy.z"
>b974		85 63 6d 70 2e 7a			ocC5:	.text 2*64+5, "cmp.z"
>b97a		85 64 65 63 2e 7a			ocC6:	.text 2*64+5, "dec.z"
>b980		86 73 6d 62 34 2e 7a			ocC7:	.text 2*64+6, "smb4.z"
>b987		43 69 6e 79				ocC8:	.text 1*64+3, "iny"
>b98b		85 63 6d 70 2e 23			ocC9:	.text 2*64+5, "cmp.#"
>b991		43 64 65 78				ocCA:	.text 1*64+3, "dex"
>b995		c3 63 70 79				ocCC:	.text 3*64+3, "cpy"
>b999		c3 63 6d 70				ocCD:	.text 3*64+3, "cmp"
>b99d		c3 64 65 63				ocCE:	.text 3*64+3, "dec"
>b9a1		c4 62 62 73 34				ocCF:	.text 3*64+4, "bbs4"
>b9a6		83 62 6e 65				ocD0:	.text 2*64+3, "bne"
>b9aa		87 63 6d 70 2e 7a 69 79			ocD1:	.text 2*64+7, "cmp.ziy"
>b9b2		86 63 6d 70 2e 7a 69			ocD2:	.text 2*64+6, "cmp.zi"
>b9b9		86 63 6d 70 2e 7a 78			ocD5:	.text 2*64+6, "cmp.zx"
>b9c0		86 64 65 63 2e 7a 78			ocD6:	.text 2*64+6, "dec.zx"
>b9c7		86 73 6d 62 35 2e 7a			ocD7:	.text 2*64+6, "smb5.z"
>b9ce		43 63 6c 64				ocD8:	.text 1*64+3, "cld"
>b9d2		c5 63 6d 70 2e 79			ocD9:	.text 3*64+5, "cmp.y"
>b9d8		43 70 68 78				ocDA:	.text 1*64+3, "phx"
>b9dc		c5 63 6d 70 2e 78			ocDD:	.text 3*64+5, "cmp.x"
>b9e2		c5 64 65 63 2e 78			ocDE:	.text 3*64+5, "dec.x"
>b9e8		c4 62 62 73 35				ocDF:	.text 3*64+4, "bbs5"
>b9ed		85 63 70 78 2e 23			ocE0:	.text 2*64+5, "cpx.#"
>b9f3		87 73 62 63 2e 7a 78 69			ocE1:	.text 2*64+7, "sbc.zxi"
>b9fb		85 63 70 78 2e 7a			ocE4:	.text 2*64+5, "cpx.z"
>ba01		85 73 62 63 2e 7a			ocE5:	.text 2*64+5, "sbc.z"
>ba07		85 69 6e 63 2e 7a			ocE6:	.text 2*64+5, "inc.z"
>ba0d		86 73 6d 62 36 2e 7a			ocE7:	.text 2*64+6, "smb6.z"
>ba14		43 69 6e 78				ocE8:	.text 1*64+3, "inx"
>ba18		85 73 62 63 2e 23			ocE9:	.text 2*64+5, "sbc.#"
>ba1e		43 6e 6f 70				ocEA:	.text 1*64+3, "nop"
>ba22		c3 63 70 78				ocEC:	.text 3*64+3, "cpx"
>ba26		c3 73 62 63				ocED:	.text 3*64+3, "sbc"
>ba2a		c3 69 6e 63				ocEE:	.text 3*64+3, "inc"
>ba2e		c4 62 62 73 36				ocEF:	.text 3*64+4, "bbs6"
>ba33		83 62 65 71				ocF0:	.text 2*64+3, "beq"
>ba37		87 73 62 63 2e 7a 69 79			ocF1:	.text 2*64+7, "sbc.ziy"
>ba3f		86 73 62 63 2e 7a 69			ocF2:	.text 2*64+6, "sbc.zi"
>ba46		86 73 62 63 2e 7a 78			ocF5:	.text 2*64+6, "sbc.zx"
>ba4d		86 69 6e 63 2e 7a 78			ocF6:	.text 2*64+6, "inc.zx"
>ba54		86 73 6d 62 37 2e 7a			ocF7:	.text 2*64+6, "smb7.z"
>ba5b		43 73 65 64				ocF8:	.text 1*64+3, "sed"
>ba5f		c5 73 62 63 2e 79			ocF9:	.text 3*64+5, "sbc.y"
>ba65		43 70 6c 78				ocFA:	.text 1*64+3, "plx"
>ba69		c5 73 62 63 2e 78			ocFD:	.text 3*64+5, "sbc.x"
>ba6f		c5 69 6e 63 2e 78			ocFE:	.text 3*64+5, "inc.x"
>ba75		c4 62 62 73 37				ocFF:	.text 3*64+4, "bbs7"
>ba7a		01 3f					oc__:	.text 1, "?"

;******  Return to file: platform/../taliforth.asm

.ba7c						forth_words_start:
>ba7c		20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>ba84		61 6c 69 20 46 6f 72 74 68 20 32 20 66 6f 72 20
>ba94		74 68 65 20 36 35 63 30 32 29 20 63 72 20 2e 28
>baa4		20 56 65 72 73 69 6f 6e 20 31 2e 31 20 30 36 2e
>bab4		20 41 70 72 20 32 30 32 34 20 29 20 63 72 20 2e
>bac4		28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31 34
>bad4		2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53 74
>bae4		65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f 6c
>baf4		77 65 6c 6c 2c 20 50 61 74 72 69 63 6b 20 53 75
>bb04		72 72 79 29 20 63 72 20 2e 28 20 54 61 6c 69 20
>bb14		46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20 77 69
>bb24		74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20 4e 4f
>bb34		20 57 41 52 52 41 4e 54 59 29 20 63 72 20 2e 28
>bb44		20 54 79 70 65 20 27 62 79 65 27 20 74 6f 20 65
>bb54		78 69 74 29 20 63 72 20
.bb5c						forth_words_end:
.bb5c						user_words_start:
>bb5c		20 20				.binary "user_words.asc"
.bb5e						user_words_end:

;******  Processing file: platform/../headers.asm

.bb5e						dictionary_start:
.bb5e						nt_drop:
>bb5e		04 10				        .byte 4, UF
>bb60		6a bb 9a 86 9f 86		        .word nt_dup, xt_drop, z_drop
>bb66		64 72 6f 70			        .text "drop"
.bb6a						nt_dup:
>bb6a		03 10				        .byte 3, UF
>bb6c		75 bb a0 86 ad 86		        .word nt_swap, xt_dup, z_dup
>bb72		64 75 70			        .text "dup"
.bb75						nt_swap:
>bb75		04 10				        .byte 4, UF
>bb77		81 bb 4a 92 5d 92		        .word nt_store, xt_swap, z_swap
>bb7d		73 77 61 70			        .text "swap"
.bb81						nt_store:
>bb81		01 10				        .byte 1, UF
>bb83		8a bb 34 92 49 92		        .word nt_fetch, xt_store, z_store
>bb89		21				        .text "!"
.bb8a						nt_fetch:
>bb8a		01 10				        .byte 1, UF
>bb8c		93 bb 1a 88 2c 88		        .word nt_over, xt_fetch, z_fetch
>bb92		40				        .text "@"
.bb93						nt_over:
>bb93		04 10				        .byte 4, UF
>bb95		9f bb 05 8d 12 8d		        .word nt_to_r, xt_over, z_over
>bb9b		6f 76 65 72			        .text "over"
.bb9f						nt_to_r:
>bb9f		02 11				        .byte 2, CO+UF ; native is special case
>bba1		a9 bb 88 93 9b 93		        .word nt_r_from, xt_to_r, z_to_r
>bba7		3e 72				        .text ">r"
.bba9						nt_r_from:
>bba9		02 01				        .byte 2, CO    ; native is special case
>bbab		b3 bb ee 8e fe 8e		        .word nt_r_fetch, xt_r_from, z_r_from
>bbb1		72 3e				        .text "r>"
.bbb3						nt_r_fetch:
>bbb3		02 01				        .byte 2, CO    ; native is special case
>bbb5		bd bb d9 8e ed 8e		        .word nt_nip, xt_r_fetch, z_r_fetch
>bbbb		72 40				        .text "r@"
.bbbd						nt_nip:
>bbbd		03 10				        .byte 3, UF
>bbbf		c8 bb 30 8c 3d 8c		        .word nt_rot, xt_nip, z_nip
>bbc5		6e 69 70			        .text "nip"
.bbc8						nt_rot:
>bbc8		03 10				        .byte 3, UF
>bbca		d3 bb 8b 8f a6 8f		        .word nt_not_rote, xt_rot, z_rot
>bbd0		72 6f 74			        .text "rot"
.bbd3						nt_not_rote:
>bbd3		04 10				        .byte 4, UF
>bbd5		df bb 97 9c b2 9c		        .word nt_tuck, xt_not_rote, z_not_rote
>bbdb		2d 72 6f 74			        .text "-rot"
.bbdf						nt_tuck:
>bbdf		04 10				        .byte 4, UF
>bbe1		eb bb a5 93 be 93		        .word nt_comma, xt_tuck, z_tuck
>bbe7		74 75 63 6b			        .text "tuck"
.bbeb						nt_comma:
>bbeb		01 10				        .byte 1, UF
>bbed		f4 bb cd 83 db 83		        .word nt_c_fetch, xt_comma, z_comma
>bbf3		2c				        .text ","
.bbf4						nt_c_fetch:
>bbf4		02 10				        .byte 2, UF
>bbf6		fe bb 2d 83 36 83		        .word nt_c_store, xt_c_fetch, z_c_fetch
>bbfc		63 40				        .text "c@"
.bbfe						nt_c_store:
>bbfe		02 10				        .byte 2, UF
>bc00		08 bc 37 83 42 83		        .word nt_plus_store, xt_c_store, z_c_store
>bc06		63 21				        .text "c!"
.bc08						nt_plus_store:
>bc08		02 10				        .byte 2, UF
>bc0a		12 bc 66 8e 85 8e		        .word nt_zero, xt_plus_store, z_plus_store
>bc10		2b 21				        .text "+!"
.bc12						nt_zero:
>bc12		01 00				        .byte 1, 0
>bc14		1b bc 13 9e 19 9e		        .word nt_one, xt_zero, z_zero
>bc1a		30				        .text "0"
.bc1b						nt_one:
>bc1b		01 00				        .byte 1, 0
>bc1d		24 bc ad 9d b5 9d		        .word nt_two, xt_one, z_one
>bc23		31				        .text "1"
.bc24						nt_two:
>bc24		01 00				        .byte 1, 0
>bc26		2d bc de 9d e6 9d		        .word nt_execute, xt_two, z_two
>bc2c		32				        .text "2"
.bc2d						nt_execute:
>bc2d		07 10				        .byte 7, UF
>bc2f		3c bc 05 88 0b 88		        .word nt_emit, xt_execute, z_execute
>bc35		65 78 65 63 75 74 65		        .text "execute"
.bc3c						nt_emit:
>bc3c		04 18				        .byte 4, NN+UF
>bc3e		48 bc be 86 c8 86		        .word nt_type, xt_emit, z_emit
>bc44		65 6d 69 74			        .text "emit"
.bc48						nt_type:
>bc48		04 10				        .byte 4, UF
>bc4a		54 bc d1 94 fb 94		        .word nt_dot, xt_type, z_type
>bc50		74 79 70 65			        .text "type"
.bc54						nt_dot:
>bc54		01 10				        .byte 1, UF
>bc56		5d bc 30 86 51 86		        .word nt_u_dot, xt_dot, z_dot
>bc5c		2e				        .text "."
.bc5d						nt_u_dot:
>bc5d		02 10				        .byte 2, UF
>bc5f		67 bc fc 94 07 95		        .word nt_u_dot_r, xt_u_dot, z_u_dot
>bc65		75 2e				        .text "u."
.bc67						nt_u_dot_r:
>bc67		03 10				        .byte 3, UF
>bc69		72 bc 08 95 29 95		        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
>bc6f		75 2e 72			        .text "u.r"
.bc72						nt_dot_r:
>bc72		02 10				        .byte 2, UF
>bc74		7c bc 6c 86 99 86		        .word nt_d_dot, xt_dot_r, z_dot_r
>bc7a		2e 72				        .text ".r"
.bc7c						nt_d_dot:
>bc7c		02 10				        .byte 2, UF
>bc7e		86 bc 9c 9e ba 9e		        .word nt_d_dot_r, xt_d_dot, z_d_dot
>bc84		64 2e				        .text "d."
.bc86						nt_d_dot_r:
>bc86		03 10				        .byte 3, UF
>bc88		91 bc bb 9e e5 9e		        .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
>bc8e		64 2e 72			        .text "d.r"
.bc91						nt_ud_dot:
>bc91		03 10				        .byte 3, UF
>bc93		9c bc 32 9f 44 9f		        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
>bc99		75 64 2e			        .text "ud."
.bc9c						nt_ud_dot_r:
>bc9c		04 10				        .byte 4, UF
>bc9e		a8 bc 45 9f 63 9f		        .word nt_question, xt_ud_dot_r, z_ud_dot_r
>bca4		75 64 2e 72			        .text "ud.r"
.bca8						nt_question:
>bca8		01 00				        .byte 1, 0
>bcaa		b1 bc 3e 99 44 99		        .word nt_false, xt_question, z_question
>bcb0		3f				        .text "?"
.bcb1						nt_false:
>bcb1		05 00				        .byte 5, 0
>bcb3		be bc 13 9e 19 9e		        .word nt_true, xt_false, z_false
>bcb9		66 61 6c 73 65			        .text "false"
.bcbe						nt_true:
>bcbe		04 00				        .byte 4, 0
>bcc0		ca bc 9c 93 a4 93		        .word nt_space, xt_true, z_true
>bcc6		74 72 75 65			        .text "true"
.bcca						nt_space:
>bcca		05 00				        .byte 5, 0
>bccc		d7 bc c5 91 ca 91		        .word nt_two_dup, xt_space, z_space
>bcd2		73 70 61 63 65			        .text "space"
.bcd7						nt_two_dup:
>bcd7		04 10				        .byte 4, UF
>bcd9		e3 bc c7 93 de 93		        .word nt_question_dup, xt_two_dup, z_two_dup
>bcdf		32 64 75 70			        .text "2dup"
.bce3						nt_question_dup:
>bce3		04 10				        .byte 4, UF
>bce5		ef bc c5 8e d8 8e		        .word nt_plus, xt_question_dup, z_question_dup
>bceb		3f 64 75 70			        .text "?dup"
.bcef						nt_plus:
>bcef		01 10				        .byte 1, UF
>bcf1		f8 bc 53 8e 65 8e		        .word nt_minus, xt_plus, z_plus
>bcf7		2b				        .text "+"
.bcf8						nt_minus:
>bcf8		01 10				        .byte 1, UF
>bcfa		01 bd e4 8b f6 8b		        .word nt_one_minus, xt_minus, z_minus
>bd00		2d				        .text "-"
.bd01						nt_one_minus:
>bd01		02 10				        .byte 2, UF
>bd03		0b bd dd 8c e8 8c		        .word nt_one_plus, xt_one_minus, z_one_minus
>bd09		31 2d				        .text "1-"
.bd0b						nt_one_plus:
>bd0b		02 10				        .byte 2, UF
>bd0d		15 bd e9 8c f2 8c		        .word nt_two_star, xt_one_plus, z_one_plus
>bd13		31 2b				        .text "1+"
.bd15						nt_two_star:
>bd15		02 10				        .byte 2, UF
>bd17		1f bd 5f 94 66 94		        .word nt_two_slash, xt_two_star, z_two_star
>bd1d		32 2a				        .text "2*"
.bd1f						nt_two_slash:
>bd1f		02 10				        .byte 2, UF
>bd21		29 bd 54 94 5e 94		        .word nt_abs, xt_two_slash, z_two_slash
>bd27		32 2f				        .text "2/"
.bd29						nt_abs:
>bd29		03 10				        .byte 3, UF
>bd2b		34 bd cf 80 e3 80		        .word nt_dabs, xt_abs, z_abs
>bd31		61 62 73			        .text "abs"
.bd34						nt_dabs:
>bd34		04 10				        .byte 4, UF
>bd36		40 bd 62 9e 80 9e		        .word nt_and, xt_dabs, z_dabs
>bd3c		64 61 62 73			        .text "dabs"
.bd40						nt_and:
>bd40		03 10				        .byte 3, UF
>bd42		4b bd 90 82 a1 82		        .word nt_or, xt_and, z_and
>bd48		61 6e 64			        .text "and"
.bd4b						nt_or:
>bd4b		02 10				        .byte 2, UF
>bd4d		55 bd f3 8c 04 8d		        .word nt_xor, xt_or, z_or
>bd53		6f 72				        .text "or"
.bd55						nt_xor:
>bd55		03 10				        .byte 3, UF
>bd57		60 bd 7c 96 8d 96		        .word nt_rshift, xt_xor, z_xor
>bd5d		78 6f 72			        .text "xor"
.bd60						nt_rshift:
>bd60		06 10				        .byte 6, UF
>bd62		6e bd a7 8f ba 8f		        .word nt_lshift, xt_rshift, z_rshift
>bd68		72 73 68 69 66 74		        .text "rshift"
.bd6e						nt_lshift:
>bd6e		06 10				        .byte 6, UF
>bd70		7c bd 0d 8b 20 8b		        .word nt_pick, xt_lshift, z_lshift
>bd76		6c 73 68 69 66 74		        .text "lshift"
.bd7c						nt_pick:
>bd7c		04 00				        .byte 4, 0    ; underflow check is complicated, leave off here
>bd7e		88 bd 42 8e 52 8e		        .word nt_char, xt_pick, z_pick
>bd84		70 69 63 6b			        .text "pick"
.bd88						nt_char:
>bd88		04 00				        .byte 4, 0
>bd8a		94 bd 53 83 69 83		        .word nt_bracket_char, xt_char, z_char
>bd90		63 68 61 72			        .text "char"
.bd94						nt_bracket_char:
>bd94		06 05				        .byte 6, CO+IM
>bd96		a2 bd 0d 83 13 83		        .word nt_char_plus, xt_bracket_char, z_bracket_char
>bd9c		5b 63 68 61 72 5d		        .text "[char]"
.bda2						nt_char_plus:
>bda2		05 00				        .byte 5, 0
>bda4		af bd e9 8c f2 8c		        .word nt_chars, xt_char_plus, z_char_plus ; same as 1+
>bdaa		63 68 61 72 2b			        .text "char+"
.bdaf						nt_chars:
>bdaf		05 10				        .byte 5, UF     ; deleted during compile
>bdb1		bc bd 6a 83 6d 83		        .word nt_cells, xt_chars, z_chars
>bdb7		63 68 61 72 73			        .text "chars"
.bdbc						nt_cells:
>bdbc		05 00				        .byte 5, 0
>bdbe		c9 bd 5f 94 66 94		        .word nt_cell_plus, xt_cells, z_cells  ; same as 2*
>bdc4		63 65 6c 6c 73			        .text "cells"
.bdc9						nt_cell_plus:
>bdc9		05 10				        .byte 5, UF
>bdcb		d6 bd 43 83 52 83		        .word nt_here, xt_cell_plus, z_cell_plus
>bdd1		63 65 6c 6c 2b			        .text "cell+"
.bdd6						nt_here:
>bdd6		04 00				        .byte 4, 0
>bdd8		e2 bd 1b 89 25 89		        .word nt_equal, xt_here, z_here
>bdde		68 65 72 65			        .text "here"
.bde2						nt_equal:
>bde2		01 10				        .byte 1, UF
>bde4		eb bd 96 87 b1 87		        .word nt_not_equals, xt_equal, z_equal
>bdea		3d				        .text "="
.bdeb						nt_not_equals:
>bdeb		02 10				        .byte 2, UF
>bded		f5 bd 3e 8c 5b 8c		        .word nt_less_than, xt_not_equals, z_not_equals
>bdf3		3c 3e				        .text "<>"
.bdf5						nt_less_than:
>bdf5		01 10				        .byte 1, UF
>bdf7		fe bd dd 89 f1 89		        .word nt_u_less_than, xt_less_than, z_less_than
>bdfd		3c				        .text "<"
.bdfe						nt_u_less_than:
>bdfe		02 10				        .byte 2, UF
>be00		08 be 40 95 55 95		        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
>be06		75 3c				        .text "u<"
.be08						nt_u_greater_than:
>be08		02 10				        .byte 2, UF
>be0a		12 be 2a 95 3f 95		        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
>be10		75 3e				        .text "u>"
.be12						nt_greater_than:
>be12		01 10				        .byte 1, UF
>be14		1b be 06 89 1a 89		        .word nt_zero_equal, xt_greater_than, z_greater_than
>be1a		3e				        .text ">"
.be1b						nt_zero_equal:
>be1b		02 10				        .byte 2, UF
>be1d		25 be 8e 96 9f 96		        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
>be23		30 3d				        .text "0="
.be25						nt_zero_unequal:
>be25		03 10				        .byte 3, UF
>be27		30 be c4 96 d3 96		        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
>be2d		30 3c 3e			        .text "0<>"
.be30						nt_zero_greater:
>be30		02 10				        .byte 2, UF
>be32		3a be a0 96 b3 96		        .word nt_zero_less, xt_zero_greater, z_zero_greater
>be38		30 3e				        .text "0>"
.be3a						nt_zero_less:
>be3a		02 10				        .byte 2, UF
>be3c		44 be b4 96 c3 96		        .word nt_min, xt_zero_less, z_zero_less
>be42		30 3c				        .text "0<"
.be44						nt_min:
>be44		03 10				        .byte 3, UF
>be46		4f be c8 8b e3 8b		        .word nt_max, xt_min, z_min
>be4c		6d 69 6e			        .text "min"
.be4f						nt_max:
>be4f		03 10				        .byte 3, UF
>be51		5a be ac 8b c7 8b		        .word nt_two_drop, xt_max, z_max
>be57		6d 61 78			        .text "max"
.be5a						nt_two_drop:
>be5a		05 10				        .byte 5, UF
>be5c		67 be bf 93 c6 93		        .word nt_two_swap, xt_two_drop, z_two_drop
>be62		32 64 72 6f 70			        .text "2drop"
.be67						nt_two_swap:
>be67		05 10				        .byte 5, UF
>be69		74 be 8d 94 b0 94		        .word nt_two_over, xt_two_swap, z_two_swap
>be6f		32 73 77 61 70			        .text "2swap"
.be74						nt_two_over:
>be74		05 10				        .byte 5, UF
>be76		81 be 01 94 18 94		        .word nt_two_store, xt_two_over, z_two_over
>be7c		32 6f 76 65 72			        .text "2over"
.be81						nt_two_store:
>be81		02 10				        .byte 2, UF
>be83		8b be 67 94 8c 94		        .word nt_two_fetch, xt_two_store, z_two_store
>be89		32 21				        .text "2!"
.be8b						nt_two_fetch:
>be8b		02 10				        .byte 2, UF
>be8d		95 be df 93 00 94		        .word nt_two_variable, xt_two_fetch, z_two_fetch
>be93		32 40				        .text "2@"
.be95						nt_two_variable:
>be95		09 00				        .byte 9, 0
>be97		a6 be 23 9f 31 9f		        .word nt_two_constant, xt_two_variable, z_two_variable
>be9d		32 76 61 72 69 61 62 6c		        .text "2variable"
>bea5		65
.bea6						nt_two_constant:
>bea6		09 10				        .byte 9, UF
>bea8		b7 be e6 9e 0a 9f		        .word nt_two_literal, xt_two_constant, z_two_constant
>beae		32 63 6f 6e 73 74 61 6e		        .text "2constant"
>beb6		74
.beb7						nt_two_literal:
>beb7		08 14				        .byte 8, UF+IM
>beb9		c7 be 0b 9f 22 9f		        .word nt_two_r_fetch, xt_two_literal, z_two_literal
>bebf		32 6c 69 74 65 72 61 6c		        .text "2literal"
.bec7						nt_two_r_fetch:
>bec7		03 09				        .byte 3, CO+NN          ; native is special case, leave NN for now
>bec9		d2 be 19 94 36 94		        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
>becf		32 72 40			        .text "2r@"
.bed2						nt_two_r_from:
>bed2		03 01				        .byte 3, CO             ; native is special case
>bed4		dd be 37 94 53 94		        .word nt_two_to_r, xt_two_r_from, z_two_r_from
>beda		32 72 3e			        .text "2r>"
.bedd						nt_two_to_r:
>bedd		03 11				        .byte 3, CO+UF          ; native is special case
>bedf		e8 be b1 94 d0 94		        .word nt_invert, xt_two_to_r, z_two_to_r
>bee5		32 3e 72			        .text "2>r"
.bee8						nt_invert:
>bee8		06 10				        .byte 6, UF
>beea		f6 be 64 89 73 89		        .word nt_negate, xt_invert, z_invert
>bef0		69 6e 76 65 72 74		        .text "invert"
.bef6						nt_negate:
>bef6		06 10				        .byte 6, UF
>bef8		04 bf 1f 8c 2f 8c		        .word nt_dnegate, xt_negate, z_negate
>befe		6e 65 67 61 74 65		        .text "negate"
.bf04						nt_dnegate:
>bf04		07 10				        .byte 7, UF
>bf06		13 bf 81 9e 9b 9e		        .word nt_c_comma, xt_dnegate, z_dnegate
>bf0c		64 6e 65 67 61 74 65		        .text "dnegate"
.bf13						nt_c_comma:
>bf13		02 10				        .byte 2, UF
>bf15		1d bf 22 83 2c 83		        .word nt_bounds, xt_c_comma, z_c_comma
>bf1b		63 2c				        .text "c,"
.bf1d						nt_bounds:
>bf1d		06 10				        .byte 6, UF
>bf1f		2b bf 50 9a 68 9a		        .word nt_spaces, xt_bounds, z_bounds
>bf25		62 6f 75 6e 64 73		        .text "bounds"
.bf2b						nt_spaces:
>bf2b		06 10				        .byte 6, UF
>bf2d		39 bf cb 91 06 92		        .word nt_bl, xt_spaces, z_spaces
>bf33		73 70 61 63 65 73		        .text "spaces"
.bf39						nt_bl:
>bf39		02 00				        .byte 2, 0
>bf3b		43 bf 04 83 0c 83		        .word nt_minus_trailing, xt_bl, z_bl
>bf41		62 6c				        .text "bl"
.bf43						nt_minus_trailing:
>bf43		09 10				        .byte 9, UF
>bf45		54 bf 58 a0 94 a0		        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
>bf4b		2d 74 72 61 69 6c 69 6e		        .text "-trailing"
>bf53		67
.bf54						nt_minus_leading:
>bf54		08 10				        .byte 8, UF
>bf56		64 bf 3f a0 57 a0		        .word nt_slash_string, xt_minus_leading, z_minus_leading
>bf5c		2d 6c 65 61 64 69 6e 67		        .text "-leading"
.bf64						nt_slash_string:
>bf64		07 10				        .byte 7, UF
>bf66		73 bf 34 a1 53 a1		        .word nt_refill, xt_slash_string, z_slash_string
>bf6c		2f 73 74 72 69 6e 67		        .text "/string"
.bf73						nt_refill:
>bf73		06 00				        .byte 6, 0
>bf75		81 bf 3c 8f 7d 8f		        .word nt_accept, xt_refill, z_refill
>bf7b		72 65 66 69 6c 6c		        .text "refill"
.bf81						nt_accept:
>bf81		06 18				        .byte 6, UF+NN
>bf83		8f bf e4 80 dc 81		        .word nt_input_to_r, xt_accept, z_accept
>bf89		61 63 63 65 70 74		        .text "accept"
.bf8f						nt_input_to_r:
>bf8f		07 08				        .byte 7, NN
>bf91		9e bf b4 9b c9 9b		        .word nt_r_to_input, xt_input_to_r, z_input_to_r
>bf97		69 6e 70 75 74 3e 72		        .text "input>r"
.bf9e						nt_r_to_input:
>bf9e		07 08				        .byte 7, NN
>bfa0		ad bf c1 9d d8 9d		        .word nt_unused, xt_r_to_input, z_r_to_input
>bfa6		72 3e 69 6e 70 75 74		        .text "r>input"
.bfad						nt_unused:
>bfad		06 00				        .byte 6, 0
>bfaf		bb bf f2 95 01 96		        .word nt_depth, xt_unused, z_unused
>bfb5		75 6e 75 73 65 64		        .text "unused"
.bfbb						nt_depth:
>bfbb		05 00				        .byte 5, 0
>bfbd		c8 bf 52 85 60 85		        .word nt_key, xt_depth, z_depth
>bfc3		64 65 70 74 68			        .text "depth"
.bfc8						nt_key:
>bfc8		03 00				        .byte 3, 0
>bfca		d3 bf a7 89 b0 89		        .word nt_allot, xt_key, z_key
>bfd0		6b 65 79			        .text "key"
.bfd3						nt_allot:
>bfd3		05 10				        .byte 5, UF
>bfd5		e0 bf 27 82 8f 82		        .word nt_create, xt_allot, z_allot
>bfdb		61 6c 6c 6f 74			        .text "allot"
.bfe0						nt_create:
>bfe0		06 00				        .byte 6, 0
>bfe2		ee bf 40 84 09 85		        .word nt_does, xt_create, z_create
>bfe8		63 72 65 61 74 65		        .text "create"
.bfee						nt_does:
>bfee		05 05				        .byte 5, CO+IM
>bff0		fb bf ef 85 fd 85		        .word nt_variable, xt_does, z_does
>bff6		64 6f 65 73 3e			        .text "does>"
.bffb						nt_variable:
>bffb		08 00				        .byte 8, 0
>bffd		0b c0 02 96 1a 96		        .word nt_constant, xt_variable, z_variable
>c003		76 61 72 69 61 62 6c 65		        .text "variable"
.c00b						nt_constant:
>c00b		08 10				        .byte 8, UF
>c00d		1b c0 e8 83 25 84		        .word nt_value, xt_constant, z_constant
>c013		63 6f 6e 73 74 61 6e 74		        .text "constant"
.c01b						nt_value:
>c01b		05 10				        .byte 5, UF
>c01d		28 c0 e8 83 25 84		        .word nt_to, xt_value, z_value          ; same code as CONSTANT
>c023		76 61 6c 75 65			        .text "value"
.c028						nt_to:
>c028		02 0c				        .byte 2, NN+IM
>c02a		32 c0 7e 92 b9 92		        .word nt_s_to_d, xt_to, z_to
>c030		74 6f				        .text "to"
.c032						nt_s_to_d:
>c032		03 10				        .byte 3, UF
>c034		3d c0 d9 90 ea 90		        .word nt_d_to_s, xt_s_to_d, z_s_to_d
>c03a		73 3e 64			        .text "s>d"
.c03d						nt_d_to_s:
>c03d		03 10				        .byte 3, UF
>c03f		48 c0 5c 9e 61 9e		        .word nt_d_minus, xt_d_to_s, z_d_to_s
>c045		64 3e 73			        .text "d>s"
.c048						nt_d_minus:
>c048		02 10				        .byte 2, UF
>c04a		52 c0 1a 9e 3a 9e		        .word nt_d_plus, xt_d_minus, z_d_minus
>c050		64 2d				        .text "d-"
.c052						nt_d_plus:
>c052		02 10				        .byte 2, UF
>c054		5c c0 3b 9e 5b 9e		        .word nt_erase, xt_d_plus, z_d_plus
>c05a		64 2b				        .text "d+"
.c05c						nt_erase:
>c05c		05 00				        .byte 5, 0      ; underflow checked by FILL
>c05e		69 c0 bc 87 04 88		        .word nt_blank, xt_erase, z_erase
>c064		65 72 61 73 65			        .text "erase"
.c069						nt_blank:
>c069		05 00				        .byte 5, 0     ; underflow checked by FILL
>c06b		76 c0 b2 87 04 88		        .word nt_fill, xt_blank, z_blank
>c071		62 6c 61 6e 6b			        .text "blank"
.c076						nt_fill:
>c076		04 10				        .byte 4, UF
>c078		82 c0 c2 87 04 88		        .word nt_find_name, xt_fill, z_fill
>c07e		66 69 6c 6c			        .text "fill"
.c082						nt_find_name:
>c082		09 10				        .byte 9, UF
>c084		93 c0 12 9b 55 9b		        .word nt_tick, xt_find_name, z_find_name
>c08a		66 69 6e 64 2d 6e 61 6d		        .text "find-name"
>c092		65
.c093						nt_tick:
>c093		01 00				        .byte 1, 0
>c095		9c c0 5e 92 7d 92		        .word nt_bracket_tick, xt_tick, z_tick
>c09b		27				        .text "'"
.c09c						nt_bracket_tick:
>c09c		03 05				        .byte 3, CO+IM
>c09e		a7 c0 14 83 1a 83		        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
>c0a4		5b 27 5d			        .text "[']"
.c0a7						nt_name_to_int:
>c0a7		08 10				        .byte 8, UF
>c0a9		b7 c0 50 9c 6c 9c		        .word nt_int_to_name, xt_name_to_int, z_name_to_int
>c0af		6e 61 6d 65 3e 69 6e 74		        .text "name>int"
.c0b7						nt_int_to_name:
>c0b7		08 10				        .byte 8, UF
>c0b9		c7 c0 ca 9b 3a 9c		        .word nt_name_to_string, xt_int_to_name, z_int_to_name
>c0bf		69 6e 74 3e 6e 61 6d 65		        .text "int>name"
.c0c7						nt_name_to_string:
>c0c7		0b 10				        .byte 11, UF
>c0c9		da c0 6d 9c 83 9c		        .word nt_to_body, xt_name_to_string, z_name_to_string
>c0cf		6e 61 6d 65 3e 73 74 72		        .text "name>string"
>c0d7		69 6e 67
.c0da						nt_to_body:
>c0da		05 10				        .byte 5, UF
>c0dc		e7 c0 ba 92 dc 92		        .word nt_defer, xt_to_body, z_to_body
>c0e2		3e 62 6f 64 79			        .text ">body"
.c0e7						nt_defer:
>c0e7		05 00				        .byte 5, 0
>c0e9		f4 c0 11 85 43 85		        .word nt_latestxt, xt_defer, z_defer
>c0ef		64 65 66 65 72			        .text "defer"
.c0f4						nt_latestxt:
>c0f4		08 00				        .byte 8, 0
>c0f6		04 c1 49 9c 4f 9c		        .word nt_latestnt, xt_latestxt, z_latestxt
>c0fc		6c 61 74 65 73 74 78 74		        .text "latestxt"
.c104						nt_latestnt:
>c104		08 00				        .byte 8, 0
>c106		14 c1 3b 9c 48 9c		        .word nt_parse_name, xt_latestnt, z_latestnt
>c10c		6c 61 74 65 73 74 6e 74		        .text "latestnt"
.c114						nt_parse_name:
>c114		0a 08				        .byte 10, NN
>c116		26 c1 51 8d 41 8e		        .word nt_parse, xt_parse_name, z_parse_name
>c11c		70 61 72 73 65 2d 6e 61		        .text "parse-name"
>c124		6d 65
.c126						nt_parse:
>c126		05 10				        .byte 5, UF
>c128		33 c1 ac 8d 41 8e		        .word nt_execute_parsing, xt_parse, z_parse
>c12e		70 61 72 73 65			        .text "parse"
.c133						nt_execute_parsing:
>c133		0f 10				        .byte 15, UF
>c135		4a c1 eb 9a 11 9b		        .word nt_source, xt_execute_parsing, z_execute_parsing
>c13b		65 78 65 63 75 74 65 2d		        .text "execute-parsing"
>c143		70 61 72 73 69 6e 67
.c14a						nt_source:
>c14a		06 00				        .byte 6, 0
>c14c		58 c1 a5 91 b9 91		        .word nt_source_id, xt_source, z_source
>c152		73 6f 75 72 63 65		        .text "source"
.c158						nt_source_id:
>c158		09 00				        .byte 9, 0
>c15a		69 c1 ba 91 c4 91		        .word nt_colon, xt_source_id, z_source_id
>c160		73 6f 75 72 63 65 2d 69		        .text "source-id"
>c168		64
.c169						nt_colon:
>c169		01 00				        .byte 1, 0
>c16b		72 c1 6e 83 b0 83		        .word nt_semicolon, xt_colon, z_colon
>c171		3a				        .text ":"
.c172						nt_semicolon:
>c172		01 05				        .byte 1, CO+IM
>c174		7b c1 eb 90 49 91		        .word nt_colon_noname, xt_semicolon, z_semicolon
>c17a		3b				        .text ";"
.c17b						nt_colon_noname:
>c17b		07 00				        .byte 7, 0
>c17d		8a c1 b1 83 cc 83		        .word nt_compile_comma, xt_colon_noname, z_colon_noname
>c183		3a 6e 6f 6e 61 6d 65		        .text ":noname"
.c18a						nt_compile_comma:
>c18a		08 18				        .byte 8, UF+NN
>c18c		9a c1 d4 96 9c 97		        .word nt_left_bracket, xt_compile_comma, z_compile_comma
>c192		63 6f 6d 70 69 6c 65 2c		        .text "compile,"
.c19a						nt_left_bracket:
>c19a		01 05				        .byte 1, IM+CO
>c19c		a3 c1 ca 89 ce 89		        .word nt_right_bracket, xt_left_bracket, z_left_bracket
>c1a2		5b				        .text "["
.c1a3						nt_right_bracket:
>c1a3		01 04				        .byte 1, IM
>c1a5		ac c1 84 8f 8a 8f		        .word nt_literal, xt_right_bracket, z_right_bracket
>c1ab		5d				        .text "]"
.c1ac						nt_literal:
>c1ac		07 15				        .byte 7, IM+CO+UF
>c1ae		bb c1 f2 89 2f 8a		        .word nt_sliteral, xt_literal, z_literal
>c1b4		6c 69 74 65 72 61 6c		        .text "literal"
.c1bb						nt_sliteral:
>c1bb		08 15				        .byte 8, CO+IM+UF
>c1bd		cb c1 54 a1 97 a1		        .word nt_dot_quote, xt_sliteral, z_sliteral
>c1c3		73 6c 69 74 65 72 61 6c		        .text "sliteral"
.c1cb						nt_dot_quote:
>c1cb		02 05				        .byte 2, CO+IM
>c1cd		d5 c1 61 86 6b 86		        .word nt_s_quote, xt_dot_quote, z_dot_quote
>c1d3		2e 22				        .text ".", $22
.c1d5						nt_s_quote:
>c1d5		02 0c				        .byte 2, IM+NN
>c1d7		df c1 d4 8f d8 90		        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
>c1dd		73 22				        .text "s", $22
.c1df						nt_s_backslash_quote:
>c1df		03 04				        .byte 3, IM
>c1e1		ea c1 bb 8f c4 8f		        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
>c1e7		73 5c 22			        .text "s", $5C, $22
.c1ea						nt_postpone:
>c1ea		08 05				        .byte 8, IM+CO
>c1ec		fa c1 86 8e c4 8e		        .word nt_immediate, xt_postpone, z_postpone
>c1f2		70 6f 73 74 70 6f 6e 65		        .text "postpone"
.c1fa						nt_immediate:
>c1fa		09 00				        .byte 9, 0
>c1fc		0b c2 58 89 63 89		        .word nt_compile_only, xt_immediate, z_immediate
>c202		69 6d 6d 65 64 69 61 74		        .text "immediate"
>c20a		65
.c20b						nt_compile_only:
>c20b		0c 00				        .byte 12, 0
>c20d		1f c2 dc 83 e7 83		        .word nt_never_native, xt_compile_only, z_compile_only
>c213		63 6f 6d 70 69 6c 65 2d		        .text "compile-only"
>c21b		6f 6e 6c 79
.c21f						nt_never_native:
>c21f		0c 00				        .byte 12, 0
>c221		33 c2 89 9c 96 9c		        .word nt_always_native, xt_never_native, z_never_native
>c227		6e 65 76 65 72 2d 6e 61		        .text "never-native"
>c22f		74 69 76 65
.c233						nt_always_native:
>c233		0d 00				        .byte 13, 0
>c235		48 c2 3c 9a 49 9a		        .word nt_allow_native, xt_always_native, z_always_native
>c23b		61 6c 77 61 79 73 2d 6e		        .text "always-native"
>c243		61 74 69 76 65
.c248						nt_allow_native:
>c248		0c 00				        .byte 12, 0
>c24a		5c c2 30 9a 3b 9a		        .word nt_nc_limit, xt_allow_native, z_allow_native
>c250		61 6c 6c 6f 77 2d 6e 61		        .text "allow-native"
>c258		74 69 76 65
.c25c						nt_nc_limit:
>c25c		08 08				        .byte 8, NN
>c25e		6c c2 84 9c 89 9c		        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
>c264		6e 63 2d 6c 69 6d 69 74		        .text "nc-limit"
.c26c						nt_strip_underflow:
>c26c		0f 08				        .byte 15, NN
>c26e		83 c2 d9 9d de 9d		        .word nt_abort, xt_strip_underflow, z_strip_underflow
>c274		73 74 72 69 70 2d 75 6e		        .text "strip-underflow"
>c27c		64 65 72 66 6c 6f 77
.c283						nt_abort:
>c283		05 00				        .byte 5, 0
>c285		90 c2 5e 80 af 80		        .word nt_abort_quote, xt_abort, z_abort
>c28b		61 62 6f 72 74			        .text "abort"
.c290						nt_abort_quote:
>c290		06 0d				        .byte 6, CO+IM+NN
>c292		9e c2 af 80 b9 80		        .word nt_do, xt_abort_quote, z_abort_quote
>c298		61 62 6f 72 74 22		        .text "abort", $22
.c29e						nt_do:
>c29e		02 0d				        .byte 2, CO+IM+NN
>c2a0		a8 c2 8b 85 a4 85		        .word nt_question_do, xt_do, z_do
>c2a6		64 6f				        .text "do"
.c2a8						nt_question_do:
>c2a8		03 0d				        .byte 3, CO+IM+NN
>c2aa		b3 c2 61 85 a4 85		        .word nt_i, xt_question_do, z_question_do
>c2b0		3f 64 6f			        .text "?do"
.c2b3						nt_i:
>c2b3		01 01				        .byte 1, CO
>c2b5		bc c2 3f 89 53 89		        .word nt_j, xt_i, z_i
>c2bb		69				        .text "i"
.c2bc						nt_j:
>c2bc		01 01				        .byte 1, CO
>c2be		c5 c2 8d 89 a6 89		        .word nt_loop, xt_j, z_j
>c2c4		6a				        .text "j"
.c2c5						nt_loop:
>c2c5		04 05				        .byte 4, CO+IM
>c2c7		d1 c2 59 8a d1 8a		        .word nt_plus_loop, xt_loop, z_loop
>c2cd		6c 6f 6f 70			        .text "loop"
.c2d1						nt_plus_loop:
>c2d1		05 05				        .byte 5, CO+IM
>c2d3		de c2 6d 8a d1 8a		        .word nt_exit, xt_plus_loop, z_plus_loop
>c2d9		2b 6c 6f 6f 70			        .text "+loop"
.c2de						nt_exit:
>c2de		04 03				        .byte 4, AN+CO
>c2e0		ea c2 19 88 1a 88		        .word nt_unloop, xt_exit, z_exit
>c2e6		65 78 69 74			        .text "exit"
.c2ea						nt_unloop:
>c2ea		06 01				        .byte 6, CO
>c2ec		f8 c2 de 95 ed 95		        .word nt_leave, xt_unloop, z_unloop
>c2f2		75 6e 6c 6f 6f 70		        .text "unloop"
.c2f8						nt_leave:
>c2f8		05 05				        .byte 5, CO+IM
>c2fa		05 c3 b4 89 c9 89		        .word nt_recurse, xt_leave, z_leave
>c300		6c 65 61 76 65			        .text "leave"
.c305						nt_recurse:
>c305		07 0d				        .byte 7, CO+IM+NN
>c307		14 c3 ff 8e 3b 8f		        .word nt_quit, xt_recurse, z_recurse
>c30d		72 65 63 75 72 73 65		        .text "recurse"
.c314						nt_quit:
>c314		04 00				        .byte 4, 0
>c316		20 c3 60 80 af 80		        .word nt_begin, xt_quit, z_quit
>c31c		71 75 69 74			        .text "quit"
.c320						nt_begin:
>c320		05 05				        .byte 5, CO+IM
>c322		2d c3 1b 89 25 89		        .word nt_again, xt_begin, z_begin
>c328		62 65 67 69 6e			        .text "begin"
.c32d						nt_again:
>c32d		05 15				        .byte 5, CO+IM+UF
>c32f		3a c3 1f 82 25 82		        .word nt_state, xt_again, z_again
>c335		61 67 61 69 6e			        .text "again"
.c33a						nt_state:
>c33a		05 00				        .byte 5, 0
>c33c		47 c3 29 92 33 92		        .word nt_evaluate, xt_state, z_state
>c342		73 74 61 74 65			        .text "state"
.c347						nt_evaluate:
>c347		08 10				        .byte 8, UF
>c349		57 c3 b2 88 05 89		        .word nt_base, xt_evaluate, z_evaluate
>c34f		65 76 61 6c 75 61 74 65		        .text "evaluate"
.c357						nt_base:
>c357		04 00				        .byte 4, 0
>c359		63 c3 fb 82 03 83		        .word nt_digit_question, xt_base, z_base
>c35f		62 61 73 65			        .text "base"
.c363						nt_digit_question:
>c363		06 10				        .byte 6, UF
>c365		71 c3 b6 9a ea 9a		        .word nt_number, xt_digit_question, z_digit_question
>c36b		64 69 67 69 74 3f		        .text "digit?"
.c371						nt_number:
>c371		06 10				        .byte 6, UF
>c373		7f c3 b3 9c ac 9d		        .word nt_to_number, xt_number, z_number
>c379		6e 75 6d 62 65 72		        .text "number"
.c37f						nt_to_number:
>c37f		07 10				        .byte 7, UF
>c381		8e c3 e8 92 87 93		        .word nt_hex, xt_to_number, z_to_number
>c387		3e 6e 75 6d 62 65 72		        .text ">number"
.c38e						nt_hex:
>c38e		03 00				        .byte 3, 0
>c390		99 c3 26 89 2c 89		        .word nt_decimal, xt_hex, z_hex
>c396		68 65 78			        .text "hex"
.c399						nt_decimal:
>c399		07 00				        .byte 7, 0
>c39b		a8 c3 0a 85 10 85		        .word nt_count, xt_decimal, z_decimal
>c3a1		64 65 63 69 6d 61 6c		        .text "decimal"
.c3a8						nt_count:
>c3a8		05 10				        .byte 5, UF
>c3aa		b5 c3 26 84 39 84		        .word nt_m_star, xt_count, z_count
>c3b0		63 6f 75 6e 74			        .text "count"
.c3b5						nt_m_star:
>c3b5		02 10				        .byte 2, UF
>c3b7		bf c3 21 8b 3b 8b		        .word nt_um_star, xt_m_star, z_m_star
>c3bd		6d 2a				        .text "m*"
.c3bf						nt_um_star:
>c3bf		03 10				        .byte 3, UF
>c3c1		ca c3 98 95 dd 95		        .word nt_star, xt_um_star, z_um_star
>c3c7		75 6d 2a			        .text "um*"
.c3ca						nt_star:
>c3ca		01 10				        .byte 1, UF
>c3cc		d3 c3 07 92 0f 92		        .word nt_um_slash_mod, xt_star, z_star
>c3d2		2a				        .text "*"
.c3d3						nt_um_slash_mod:
>c3d3		06 10				        .byte 6, UF
>c3d5		e1 c3 56 95 97 95		        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
>c3db		75 6d 2f 6d 6f 64		        .text "um/mod"
.c3e1						nt_sm_slash_rem:
>c3e1		06 10				        .byte 6, UF
>c3e3		ef c3 7c 91 a4 91		        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
>c3e9		73 6d 2f 72 65 6d		        .text "sm/rem"
.c3ef						nt_fm_slash_mod:
>c3ef		06 10				        .byte 6, UF
>c3f1		fd c3 75 88 ab 88		        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
>c3f7		66 6d 2f 6d 6f 64		        .text "fm/mod"
.c3fd						nt_slash:
>c3fd		01 10				        .byte 1, UF
>c3ff		06 c4 5f 91 7b 91		        .word nt_slash_mod, xt_slash, z_slash
>c405		2f				        .text "/"
.c406						nt_slash_mod:
>c406		04 10				        .byte 4, UF
>c408		12 c4 64 91 7b 91		        .word nt_mod, xt_slash_mod, z_slash_mod
>c40e		2f 6d 6f 64			        .text "/mod"
.c412						nt_mod:
>c412		03 10				        .byte 3, UF
>c414		1d c4 f7 8b ff 8b		        .word nt_star_slash_mod, xt_mod, z_mod
>c41a		6d 6f 64			        .text "mod"
.c41d						nt_star_slash_mod:
>c41d		05 10				        .byte 5, UF
>c41f		2a c4 19 92 28 92		        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
>c425		2a 2f 6d 6f 64			        .text "*/mod"
.c42a						nt_star_slash:
>c42a		02 10				        .byte 2, UF
>c42c		34 c4 10 92 18 92		        .word nt_backslash, xt_star_slash, z_star_slash
>c432		2a 2f				        .text "*/"
.c434						nt_backslash:
>c434		01 04				        .byte 1, IM
>c436		3d c4 d0 82 fa 82		        .word nt_move, xt_backslash, z_backslash
>c43c		5c				        .byte '\'
.c43d						nt_move:
>c43d		04 18				        .byte 4, NN+UF
>c43f		49 c4 00 8c 1e 8c		        .word nt_cmove_up, xt_move, z_move
>c445		6d 6f 76 65			        .text "move"
.c449						nt_cmove_up:
>c449		06 10				        .byte 6, UF
>c44b		57 c4 9f 9f d9 9f		        .word nt_cmove, xt_cmove_up, z_cmove_up
>c451		63 6d 6f 76 65 3e		        .text "cmove>"
.c457						nt_cmove:
>c457		05 10				        .byte 5, UF
>c459		64 c4 64 9f 9e 9f		        .word nt_pad, xt_cmove, z_cmove
>c45f		63 6d 6f 76 65			        .text "cmove"
.c464						nt_pad:
>c464		03 00				        .byte 3, 0
>c466		6f c4 13 8d 22 8d		        .word nt_cleave, xt_pad, z_pad
>c46c		70 61 64			        .text "pad"
.c46f						nt_cleave:
>c46f		06 10				        .byte 6, UF
>c471		7d c4 69 9a b5 9a		        .word nt_hexstore, xt_cleave, z_cleave
>c477		63 6c 65 61 76 65		        .text "cleave"
.c47d						nt_hexstore:
>c47d		08 10				        .byte 8, UF
>c47f		8d c4 56 9b a8 9b		        .word nt_within, xt_hexstore, z_hexstore
>c485		68 65 78 73 74 6f 72 65		        .text "hexstore"
.c48d						nt_within:
>c48d		06 10				        .byte 6, UF
>c48f		9b c4 22 96 37 96		        .word nt_to_in, xt_within, z_within
>c495		77 69 74 68 69 6e		        .text "within"
.c49b						nt_to_in:
>c49b		03 00				        .byte 3, 0
>c49d		a6 c4 dd 92 e7 92		        .word nt_less_number_sign, xt_to_in, z_to_in
>c4a3		3e 69 6e			        .text ">in"
.c4a6						nt_less_number_sign:
>c4a6		02 00				        .byte 2, 0
>c4a8		b0 c4 cf 89 dc 89		        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
>c4ae		3c 23				        .text "<#"
.c4b0						nt_number_sign:
>c4b0		01 10				        .byte 1, UF
>c4b2		b9 c4 5c 8c 90 8c		        .word nt_number_sign_s, xt_number_sign, z_number_sign
>c4b8		23				        .text "#"
.c4b9						nt_number_sign_s:
>c4b9		02 10				        .byte 2, UF
>c4bb		c3 c4 b3 8c c3 8c		        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
>c4c1		23 73				        .text "#s"
.c4c3						nt_number_sign_greater:
>c4c3		02 10				        .byte 2, UF
>c4c5		cd c4 91 8c b2 8c		        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
>c4cb		23 3e				        .text "#>"
.c4cd						nt_hold:
>c4cd		04 10				        .byte 4, UF
>c4cf		d9 c4 2d 89 3e 89		        .word nt_sign, xt_hold, z_hold
>c4d5		68 6f 6c 64			        .text "hold"
.c4d9						nt_sign:
>c4d9		04 10				        .byte 4, UF
>c4db		e5 c4 4a 91 5e 91		        .word nt_output, xt_sign, z_sign
>c4e1		73 69 67 6e			        .text "sign"
.c4e5						nt_output:
>c4e5		06 00				        .byte 6, 0
>c4e7		f3 c4 b6 9d c0 9d		        .word nt_input, xt_output, z_output
>c4ed		6f 75 74 70 75 74		        .text "output"
.c4f3						nt_input:
>c4f3		05 00				        .byte 5, 0
>c4f5		00 c5 a9 9b b3 9b		        .word nt_cr, xt_input, z_input
>c4fb		69 6e 70 75 74			        .text "input"
.c500						nt_cr:
>c500		02 00				        .byte 2, 0
>c502		0a c5 3a 84 3f 84		        .word nt_page, xt_cr, z_cr
>c508		63 72				        .text "cr"
.c50a						nt_page:
>c50a		04 00				        .byte 4, 0
>c50c		16 c5 23 8d 40 8d		        .word nt_at_xy, xt_page, z_page
>c512		70 61 67 65			        .text "page"
.c516						nt_at_xy:
>c516		05 10				        .byte 5, UF
>c518		23 c5 a2 82 cf 82		        .word nt_marker, xt_at_xy, z_at_xy
>c51e		61 74 2d 78 79			        .text "at-xy"
.c523						nt_marker:
>c523		06 04				        .byte 6, IM
>c525		31 c5 3c 8b 76 8b		        .word nt_words, xt_marker, z_marker
>c52b		6d 61 72 6b 65 72		        .text "marker"
.c531						nt_words:
>c531		05 00				        .byte 5, 0
>c533		3e c5 d3 99 2f 9a		        .word nt_wordsize, xt_words, z_words
>c539		77 6f 72 64 73			        .text "words"
.c53e						nt_wordsize:
>c53e		08 10				        .byte 8, UF
>c540		4e c5 f2 9d 12 9e		        .word nt_aligned, xt_wordsize, z_wordsize
>c546		77 6f 72 64 73 69 7a 65		        .text "wordsize"
.c54e						nt_aligned:
>c54e		07 00				        .byte 7, 0
>c550		5d c5 26 82 26 82		        .word nt_align, xt_aligned, z_aligned   ; same code as ALIGN
>c556		61 6c 69 67 6e 65 64		        .text "aligned"
.c55d						nt_align:
>c55d		05 00				        .byte 5, 0
>c55f		6a c5 26 82 26 82		        .word nt_bell, xt_align, z_align
>c565		61 6c 69 67 6e			        .text "align"
.c56a						nt_bell:
>c56a		04 00				        .byte 4, 0
>c56c		76 c5 4a 9a 4f 9a		        .word nt_dump, xt_bell, z_bell
>c572		62 65 6c 6c			        .text "bell"
.c576						nt_dump:
>c576		04 10				        .byte 4, UF
>c578		82 c5 c3 98 29 99		        .word nt_dot_s, xt_dump, z_dump
>c57e		64 75 6d 70			        .text "dump"
.c582						nt_dot_s:
>c582		02 00				        .byte 2, 0
>c584		8c c5 7f 98 c2 98		        .word +, xt_dot_s, z_dot_s
>c58a		2e 73				        .text ".s"
.c58c						+
.c58c						nt_disasm:
>c58c		06 10				        .byte 6, UF
>c58e		9a c5 c0 a1 c6 a1		        .word +, xt_disasm, z_disasm
>c594		64 69 73 61 73 6d		        .text "disasm"
.c59a						+
.c59a						nt_compare:
>c59a		07 10				        .byte 7, UF
>c59c		a9 c5 da 9f 3e a0		        .word nt_search, xt_compare, z_compare
>c5a2		63 6f 6d 70 61 72 65		        .text "compare"
.c5a9						nt_search:
>c5a9		06 18				        .byte 6, UF+NN
>c5ab		b7 c5 95 a0 33 a1		        .word +, xt_search, z_search
>c5b1		73 65 61 72 63 68		        .text "search"
.c5b7						+
.c5b7						nt_environment_q:
>c5b7		0c 10				        .byte 12, UF
>c5b9		cb c5 dd 86 59 87		        .word +, xt_environment_q, z_environment_q
>c5bf		65 6e 76 69 72 6f 6e 6d		        .text "environment?"
>c5c7		65 6e 74 3f
.c5cb						+
.c5cb						nt_find:
>c5cb		04 10				        .byte 4, UF
>c5cd		d7 c5 2d 88 74 88		        .word nt_word, xt_find, z_find
>c5d3		66 69 6e 64			        .text "find"
.c5d7						nt_word:
>c5d7		04 10				        .byte 4, UF
>c5d9		e3 c5 38 96 7b 96		        .word nt_paren, xt_word, z_word
>c5df		77 6f 72 64			        .text "word"
.c5e3						nt_paren:
>c5e3		01 04				        .byte 1, IM
>c5e5		ec c5 41 8d 50 8d		        .word nt_dot_paren, xt_paren, z_paren
>c5eb		28				        .text "("
.c5ec						nt_dot_paren:
>c5ec		02 04				        .byte 2, IM
>c5ee		f6 c5 52 86 60 86		        .word nt_if, xt_dot_paren, z_dot_paren
>c5f4		2e 28				        .text ".("
.c5f6						nt_if:
>c5f6		02 0d				        .byte 2, IM+CO+NN
>c5f8		00 c6 54 89 57 89		        .word nt_then, xt_if, z_if
>c5fe		69 66				        .text "if"
.c600						nt_then:
>c600		04 0d				        .byte 4, IM+CO+NN
>c602		0c c6 b4 86 bd 86		        .word nt_else, xt_then, z_then
>c608		74 68 65 6e			        .text "then"
.c60c						nt_else:
>c60c		04 0d				        .byte 4, IM+CO+NN
>c60e		18 c6 ae 86 bd 86		        .word nt_repeat, xt_else, z_else
>c614		65 6c 73 65			        .text "else"
.c618						nt_repeat:
>c618		06 0d				        .byte 6, IM+CO+NN
>c61a		26 c6 7e 8f 84 8f		        .word nt_until, xt_repeat, z_repeat
>c620		72 65 70 65 61 74		        .text "repeat"
.c626						nt_until:
>c626		05 0d				        .byte 5, IM+CO+NN
>c628		33 c6 ee 95 f1 95		        .word nt_while, xt_until, z_until
>c62e		75 6e 74 69 6c			        .text "until"
.c633						nt_while:
>c633		05 0d				        .byte 5, IM+CO+NN
>c635		40 c6 1b 96 21 96		        .word nt_case, xt_while, z_while
>c63b		77 68 69 6c 65			        .text "while"
.c640						nt_case:
>c640		04 0d				        .byte 4, IM+CO+NN
>c642		4c c6 13 9e 19 9e		        .word nt_of, xt_case, z_case    ; shares code with ZERO
>c648		63 61 73 65			        .text "case"
.c64c						nt_of:
>c64c		02 0d				        .byte 2, IM+CO+NN
>c64e		56 c6 c4 8c dc 8c		        .word nt_endof, xt_of, z_of
>c654		6f 66				        .text "of"
.c656						nt_endof:
>c656		05 0d				        .byte 5, IM+CO+NN
>c658		63 c6 ae 86 bd 86		        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
>c65e		65 6e 64 6f 66			        .text "endof"
.c663						nt_endcase:
>c663		07 0d				        .byte 7, IM+CO+NN
>c665		72 c6 c8 86 dc 86		        .word nt_defer_fetch, xt_endcase, z_endcase
>c66b		65 6e 64 63 61 73 65		        .text "endcase"
.c672						nt_defer_fetch:
>c672		06 00				        .byte 6, 0
>c674		80 c6 44 85 4a 85		        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
>c67a		64 65 66 65 72 40		        .text "defer@"
.c680						nt_defer_store:
>c680		06 00				        .byte 6, 0
>c682		8e c6 4b 85 51 85		        .word nt_is, xt_defer_store, z_defer_store
>c688		64 65 66 65 72 21		        .text "defer!"
.c68e						nt_is:
>c68e		02 04				        .byte 2, IM
>c690		98 c6 74 89 8c 89		        .word nt_action_of, xt_is, z_is
>c696		69 73				        .text "is"
.c698						nt_action_of:
>c698		09 04				        .byte 9, IM
>c69a		a9 c6 06 82 1e 82		        .word nt_useraddr, xt_action_of, z_action_of
>c6a0		61 63 74 69 6f 6e 2d 6f		        .text "action-of"
>c6a8		66
.c6a9						nt_useraddr:
>c6a9		08 00				        .byte 8, 0
>c6ab		b9 c6 e7 9d f1 9d		        .word nt_buffer_colon, xt_useraddr, z_useraddr
>c6b1		75 73 65 72 61 64 64 72		        .text "useraddr"
.c6b9						nt_buffer_colon:
>c6b9		07 00				        .byte 7, 0
>c6bb		c8 c6 1b 83 21 83		        .word +, xt_buffer_colon, z_buffer_colon
>c6c1		62 75 66 66 65 72 3a		        .text "buffer:"
.c6c8						+
.c6c8						nt_buffstatus:
>c6c8		0a 00				        .byte 10, 0
>c6ca		da c6 ef af f4 af		        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
>c6d0		62 75 66 66 73 74 61 74		        .text "buffstatus"
>c6d8		75 73
.c6da						nt_buffblocknum:
>c6da		0c 00				        .byte 12, 0
>c6dc		ee c6 b9 af be af		        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
>c6e2		62 75 66 66 62 6c 6f 63		        .text "buffblocknum"
>c6ea		6b 6e 75 6d
.c6ee						nt_blkbuffer:
>c6ee		09 00				        .byte 9, 0
>c6f0		ff c6 af ad bc ad		        .word nt_scr, xt_blkbuffer, z_blkbuffer
>c6f6		62 6c 6b 62 75 66 66 65		        .text "blkbuffer"
>c6fe		72
.c6ff						nt_scr:
>c6ff		03 08				        .byte 3, NN
>c701		0a c7 71 b0 76 b0		        .word nt_blk, xt_scr, z_scr
>c707		73 63 72			        .text "scr"
.c70a						nt_blk:
>c70a		03 08				        .byte 3, NN
>c70c		15 c7 aa ad af ad		        .word nt_block_write, xt_blk, z_blk
>c712		62 6c 6b			        .text "blk"
.c715						nt_block_write:
>c715		0b 08				        .byte 11, NN ; Deferred words need the HC (Code Field) flag.
>c717		28 c7 a6 af b4 af		        .word nt_block_write_vector, xt_block_write, z_block_write
>c71d		62 6c 6f 63 6b 2d 77 72		        .text "block-write"
>c725		69 74 65
.c728						nt_block_write_vector:
>c728		12 08				        .byte 18, NN ; Deferred words need the HC (Code Field) flag.
>c72a		42 c7 b4 af b9 af		        .word nt_block_read, xt_block_write_vector, z_block_write_vector
>c730		62 6c 6f 63 6b 2d 77 72		        .text "block-write-vector"
>c738		69 74 65 2d 76 65 63 74 6f 72
.c742						nt_block_read:
>c742		0a 28				        .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
>c744		54 c7 8e af 9c af		        .word nt_block_read_vector, xt_block_read, z_block_read
>c74a		62 6c 6f 63 6b 2d 72 65		        .text "block-read"
>c752		61 64
.c754						nt_block_read_vector:
>c754		11 28				        .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
>c756		6d c7 9c af a1 af		        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
>c75c		62 6c 6f 63 6b 2d 72 65		        .text "block-read-vector"
>c764		61 64 2d 76 65 63 74 6f 72
.c76d						nt_save_buffers:
>c76d		0c 00				        .byte 12, 0
>c76f		81 c7 56 b0 70 b0		        .word nt_block, xt_save_buffers, z_save_buffers
>c775		73 61 76 65 2d 62 75 66		        .text "save-buffers"
>c77d		66 65 72 73
.c781						nt_block:
>c781		05 00				        .byte 5, 0
>c783		8e c7 bd ad 0f ae		        .word nt_update, xt_block, z_block
>c789		62 6c 6f 63 6b			        .text "block"
.c78e						nt_update:
>c78e		06 00				        .byte 6, 0
>c790		9c c7 bb b0 c3 b0		        .word nt_buffer, xt_update, z_update
>c796		75 70 64 61 74 65		        .text "update"
.c79c						nt_buffer:
>c79c		06 00				        .byte 6, 0
>c79e		aa c7 be af ee af		        .word nt_empty_buffers, xt_buffer, z_buffer
>c7a4		62 75 66 66 65 72		        .text "buffer"
.c7aa						nt_empty_buffers:
>c7aa		0d 00				        .byte 13, 0
>c7ac		bf c7 f4 af fa af		        .word nt_flush, xt_empty_buffers, z_empty_buffers
>c7b2		65 6d 70 74 79 2d 62 75		        .text "empty-buffers"
>c7ba		66 66 65 72 73
.c7bf						nt_flush:
>c7bf		05 00				        .byte 5, 0
>c7c1		cc c7 fb af 04 b0		        .word nt_load, xt_flush, z_flush
>c7c7		66 6c 75 73 68			        .text "flush"
.c7cc						nt_load:
>c7cc		04 10				        .byte 4, UF
>c7ce		d8 c7 12 b0 55 b0		        .word nt_thru, xt_load, z_load
>c7d4		6c 6f 61 64			        .text "load"
.c7d8						nt_thru:
>c7d8		04 10				        .byte 4, UF
>c7da		e4 c7 76 b0 ba b0		        .word +, xt_thru, z_thru
>c7e0		74 68 72 75			        .text "thru"
.c7e4						+
.c7e4						nt_list:
>c7e4		04 10				        .byte 4, UF
>c7e6		f0 c7 05 b0 11 b0		        .word nt_block_c65_init, xt_list, z_list
>c7ec		6c 69 73 74			        .text "list"
.c7f0						nt_block_c65_init:
>c7f0		0e 00				        .byte 14, 0
>c7f2		06 c8 10 ae 45 ae		        .word +, xt_block_c65_init, z_block_c65_init
>c7f8		62 6c 6f 63 6b 2d 63 36		        .text "block-c65-init"
>c800		35 2d 69 6e 69 74
.c806						+
.c806						nt_block_ramdrive_init:
>c806		13 10				        .byte 19, UF
>c808		21 c8 68 ae 75 ae		        .word +, xt_block_ramdrive_init, z_block_ramdrive_init
>c80e		62 6c 6f 63 6b 2d 72 61		        .text "block-ramdrive-init"
>c816		6d 64 72 69 76 65 2d 69 6e 69 74
.c821						+
.c821						nt_definitions:
>c821		0b 00				        .byte 11, 0
>c823		34 c8 f9 b1 01 b2		        .word nt_wordlist, xt_definitions, z_definitions
>c829		64 65 66 69 6e 69 74 69		        .text "definitions"
>c831		6f 6e 73
.c834						nt_wordlist:
>c834		08 00				        .byte 8, 0
>c836		44 c8 64 b3 7a b3		        .word nt_search_wordlist, xt_wordlist, z_wordlist
>c83c		77 6f 72 64 6c 69 73 74		        .text "wordlist"
.c844						nt_search_wordlist:
>c844		0f 10				        .byte 15, UF
>c846		5b c8 9d b2 10 b3		        .word nt_set_current, xt_search_wordlist, z_search_wordlist
>c84c		73 65 61 72 63 68 2d 77		        .text "search-wordlist"
>c854		6f 72 64 6c 69 73 74
.c85b						nt_set_current:
>c85b		0b 10				        .byte 11, UF
>c85d		6e c8 11 b3 1c b3		        .word nt_get_current, xt_set_current, z_set_current
>c863		73 65 74 2d 63 75 72 72		        .text "set-current"
>c86b		65 6e 74
.c86e						nt_get_current:
>c86e		0b 00				        .byte 11, 0
>c870		81 c8 09 b2 13 b2		        .word nt_set_order, xt_get_current, z_get_current
>c876		67 65 74 2d 63 75 72 72		        .text "get-current"
>c87e		65 6e 74
.c881						nt_set_order:
>c881		09 00				        .byte 9, 0
>c883		92 c8 1d b3 50 b3		        .word nt_get_order, xt_set_order, z_set_order
>c889		73 65 74 2d 6f 72 64 65		        .text "set-order"
>c891		72
.c892						nt_get_order:
>c892		09 00				        .byte 9, 0
>c894		a3 c8 14 b2 3c b2		        .word nt_root_wordlist, xt_get_order, z_get_order
>c89a		67 65 74 2d 6f 72 64 65		        .text "get-order"
>c8a2		72
.c8a3						nt_root_wordlist:
>c8a3		0d 00				        .byte 13, 0
>c8a5		b8 c8 94 b2 9c b2		        .word +, xt_root_wordlist, z_root_wordlist
>c8ab		72 6f 6f 74 2d 77 6f 72		        .text "root-wordlist"
>c8b3		64 6c 69 73 74
.c8b8						+
.c8b8						nt_assembler_wordlist:
>c8b8		12 00				        .byte 18, 0
>c8ba		d2 c8 de 9d e6 9d		        .word +, xt_assembler_wordlist, z_assembler_wordlist
>c8c0		61 73 73 65 6d 62 6c 65		        .text "assembler-wordlist"
>c8c8		72 2d 77 6f 72 64 6c 69 73 74
.c8d2						+
.c8d2						nt_editor_wordlist:
>c8d2		0f 00				        .byte 15, 0
>c8d4		e9 c8 ad 9d b5 9d		        .word +, xt_editor_wordlist, z_editor_wordlist
>c8da		65 64 69 74 6f 72 2d 77		        .text "editor-wordlist"
>c8e2		6f 72 64 6c 69 73 74
.c8e9						+
.c8e9						nt_forth_wordlist:
>c8e9		0e 00				        .byte 14, 0
>c8eb		ff c8 13 9e 19 9e		        .word nt_only, xt_forth_wordlist, z_forth_wordlist
>c8f1		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c8f9		72 64 6c 69 73 74
.c8ff						nt_only:
>c8ff		04 00				        .byte 4, 0
>c901		0b c9 3d b2 43 b2		        .word nt_also, xt_only, z_only
>c907		6f 6e 6c 79			        .text "only"
.c90b						nt_also:
>c90b		04 00				        .byte 4, 0
>c90d		17 c9 e9 b1 f8 b1		        .word nt_previous, xt_also, z_also
>c913		61 6c 73 6f			        .text "also"
.c917						nt_previous:
>c917		08 00				        .byte 8, 0
>c919		27 c9 87 b2 93 b2		        .word nt_to_order, xt_previous, z_previous
>c91f		70 72 65 76 69 6f 75 73		        .text "previous"
.c927						nt_to_order:
>c927		06 00				        .byte 6, 0
>c929		35 c9 51 b3 63 b3		        .word nt_order, xt_to_order, z_to_order
>c92f		3e 6f 72 64 65 72		        .text ">order"
.c935						nt_order:
>c935		05 00				        .byte 5, 0
>c937		42 c9 44 b2 6e b2		        .word nt_forth, xt_order, z_order
>c93d		6f 72 64 65 72			        .text "order"
.c942						nt_forth:
>c942		05 00				        .byte 5, 0
>c944		4f c9 02 b2 08 b2		        .word +, xt_forth, z_forth
>c94a		66 6f 72 74 68			        .text "forth"
.c94f						+
>c94f		03 08				nt_see: .byte 3, NN
>c951		5a c9 45 99 d2 99		        .word +, xt_see, z_see
>c957		73 65 65			        .text "see"
.c95a						+
.c95a						nt_ed:
>c95a		03 08				        .byte 3, NN
>c95c		65 c9 b7 a7 ba a7		        .word +, xt_ed, z_ed
>c962		65 64 3a			        .text "ed:"
.c965						+
.c965						nt_cold:
>c965		04 00				        .byte 4, 0
>c967		71 c9 00 80 af 80		        .word nt_bye, xt_cold, z_cold
>c96d		63 6f 6c 64			        .text "cold"
.c971						nt_bye:
>c971		03				        .byte 3         ; length of word strings
>c972		00				        .byte 0         ; status byte
>c973		00 00				        .word 0000      ; next word in Dictionary, 0000 signals end
>c975		7c 98				        .word xt_bye    ; start of code block (xt of this word)
>c977		7f 98				        .word z_bye     ; end of code (RTS)
>c979		62 79 65			        .text "bye"     ; word name, always lower case, not zero-terminated
.c97c						root_dictionary_start:
.c97c						nt_root_set_order:
>c97c		09 00				        .byte 9, 0
>c97e		8d c9 1d b3 50 b3		        .word nt_root_forth, xt_set_order, z_set_order
>c984		73 65 74 2d 6f 72 64 65		        .text "set-order"
>c98c		72
.c98d						nt_root_forth:
>c98d		05 00				        .byte 5, 0
>c98f		9a c9 02 b2 08 b2		        .word nt_root_forth_wordlist, xt_forth, z_forth
>c995		66 6f 72 74 68			        .text "forth"
.c99a						nt_root_forth_wordlist:
>c99a		0e 00				        .byte 14, 0
>c99c		b0 c9 13 9e 19 9e		        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
>c9a2		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c9aa		72 64 6c 69 73 74
.c9b0						nt_root_words:
>c9b0		05 00				        .byte 5, 0
>c9b2		00 00 d3 99 2f 9a		        .word 0000, xt_words, z_words
>c9b8		77 6f 72 64 73			        .text "words"
.c9bd						editor_dictionary_start:
.c9bd						nt_editor_o:
>c9bd		01 00				        .byte 1, 0
>c9bf		c6 c9 a3 b1 e8 b1		        .word nt_editor_line, xt_editor_o, z_editor_o
>c9c5		6f				        .text "o"
.c9c6						nt_editor_line:
>c9c6		04 10				        .byte 4, UF
>c9c8		d2 c9 8a b1 a2 b1		        .word nt_editor_l, xt_editor_line, z_editor_line
>c9ce		6c 69 6e 65			        .text "line"
.c9d2						nt_editor_l:
>c9d2		01 00				        .byte 1, 0
>c9d4		db c9 10 b1 89 b1		        .word nt_editor_el, xt_editor_l, z_editor_l
>c9da		6c				        .text "l"
.c9db						nt_editor_el:
>c9db		02 00				        .byte 2, 0
>c9dd		e5 c9 fe b0 0f b1		        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
>c9e3		65 6c				        .text "el"
.c9e5						nt_editor_erase_screen:
>c9e5		0c 00				        .byte 12, 0
>c9e7		f9 c9 ec b0 fd b0		        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
>c9ed		65 72 61 73 65 2d 73 63		        .text "erase-screen"
>c9f5		72 65 65 6e
.c9f9						nt_editor_enter_screen:
>c9f9		0c 00				        .byte 12, 0
>c9fb		00 00 d0 b0 eb b0		        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
>ca01		65 6e 74 65 72 2d 73 63		        .text "enter-screen"
>ca09		72 65 65 6e
.ca0d						assembler_dictionary_start:
.ca0d						nt_asm_adc_h:
>ca0d		05 0c						.byte 5, IM+NN
>ca0f		1a ca				                .word nt_asm_adc_x
>ca11		01 a4 06 a4					.word xt_asm_adc_h, z_asm_adc_h
>ca15		61 64 63 2e 23					.text "adc.#"
.ca1a						nt_asm_adc_x:
>ca1a		05 0c						.byte 5, IM+NN
>ca1c		27 ca				                .word nt_asm_adc_y
>ca1e		06 a4 0b a4					.word xt_asm_adc_x, z_asm_adc_x
>ca22		61 64 63 2e 78					.text "adc.x"
.ca27						nt_asm_adc_y:
>ca27		05 0c						.byte 5, IM+NN
>ca29		34 ca				                .word nt_asm_adc_z
>ca2b		0b a4 10 a4					.word xt_asm_adc_y, z_asm_adc_y
>ca2f		61 64 63 2e 79					.text "adc.y"
.ca34						nt_asm_adc_z:
>ca34		05 0c						.byte 5, IM+NN
>ca36		41 ca				                .word nt_asm_adc_zi
>ca38		10 a4 15 a4					.word xt_asm_adc_z, z_asm_adc_z
>ca3c		61 64 63 2e 7a					.text "adc.z"
.ca41						nt_asm_adc_zi:
>ca41		06 0c						.byte 6, IM+NN
>ca43		4f ca				                .word nt_asm_adc_ziy
>ca45		15 a4 1a a4					.word xt_asm_adc_zi, z_asm_adc_zi
>ca49		61 64 63 2e 7a 69				.text "adc.zi"
.ca4f						nt_asm_adc_ziy:
>ca4f		07 0c						.byte 7, IM+NN
>ca51		5e ca				                .word nt_asm_adc_zx
>ca53		1a a4 1f a4					.word xt_asm_adc_ziy, z_asm_adc_ziy
>ca57		61 64 63 2e 7a 69 79				.text "adc.ziy"
.ca5e						nt_asm_adc_zx:
>ca5e		06 0c						.byte 6, IM+NN
>ca60		6c ca				                .word nt_asm_adc_zxi
>ca62		1f a4 24 a4					.word xt_asm_adc_zx, z_asm_adc_zx
>ca66		61 64 63 2e 7a 78				.text "adc.zx"
.ca6c						nt_asm_adc_zxi:
>ca6c		07 0c						.byte 7, IM+NN
>ca6e		7b ca				                .word nt_asm_and
>ca70		24 a4 29 a4					.word xt_asm_adc_zxi, z_asm_adc_zxi
>ca74		61 64 63 2e 7a 78 69				.text "adc.zxi"
.ca7b						nt_asm_and:
>ca7b		04 0c						.byte 4, IM+NN
>ca7d		87 ca				                .word nt_asm_and_h
>ca7f		29 a4 2e a4					.word xt_asm_and, z_asm_and
>ca83		61 6e 64 2e					.text "and."
.ca87						nt_asm_and_h:
>ca87		05 0c						.byte 5, IM+NN
>ca89		94 ca				                .word nt_asm_and_x
>ca8b		2e a4 33 a4					.word xt_asm_and_h, z_asm_and_h
>ca8f		61 6e 64 2e 23					.text "and.#"
.ca94						nt_asm_and_x:
>ca94		05 0c						.byte 5, IM+NN
>ca96		a1 ca				                .word nt_asm_and_y
>ca98		33 a4 38 a4					.word xt_asm_and_x, z_asm_and_x
>ca9c		61 6e 64 2e 78					.text "and.x"
.caa1						nt_asm_and_y:
>caa1		05 0c						.byte 5, IM+NN
>caa3		ae ca				                .word nt_asm_and_z
>caa5		38 a4 3d a4					.word xt_asm_and_y, z_asm_and_y
>caa9		61 6e 64 2e 79					.text "and.y"
.caae						nt_asm_and_z:
>caae		05 0c						.byte 5, IM+NN
>cab0		bb ca				                .word nt_asm_and_zi
>cab2		3d a4 42 a4					.word xt_asm_and_z, z_asm_and_z
>cab6		61 6e 64 2e 7a					.text "and.z"
.cabb						nt_asm_and_zi:
>cabb		06 0c						.byte 6, IM+NN
>cabd		c9 ca				                .word nt_asm_and_ziy
>cabf		42 a4 47 a4					.word xt_asm_and_zi, z_asm_and_zi
>cac3		61 6e 64 2e 7a 69				.text "and.zi"
.cac9						nt_asm_and_ziy:
>cac9		07 0c						.byte 7, IM+NN
>cacb		d8 ca				                .word nt_asm_and_zx
>cacd		47 a4 4c a4					.word xt_asm_and_ziy, z_asm_and_ziy
>cad1		61 6e 64 2e 7a 69 79				.text "and.ziy"
.cad8						nt_asm_and_zx:
>cad8		06 0c						.byte 6, IM+NN
>cada		e6 ca				                .word nt_asm_and_zxi
>cadc		4c a4 51 a4					.word xt_asm_and_zx, z_asm_and_zx
>cae0		61 6e 64 2e 7a 78				.text "and.zx"
.cae6						nt_asm_and_zxi:
>cae6		07 0c						.byte 7, IM+NN
>cae8		f5 ca				                .word nt_asm_asl
>caea		51 a4 56 a4					.word xt_asm_and_zxi, z_asm_and_zxi
>caee		61 6e 64 2e 7a 78 69				.text "and.zxi"
.caf5						nt_asm_asl:
>caf5		03 0c						.byte 3, IM+NN
>caf7		00 cb				                .word nt_asm_asl_a
>caf9		56 a4 5b a4					.word xt_asm_asl, z_asm_asl
>cafd		61 73 6c					.text "asl"
.cb00						nt_asm_asl_a:
>cb00		05 0c						.byte 5, IM+NN
>cb02		0d cb				                .word nt_asm_asl_x
>cb04		5b a4 60 a4					.word xt_asm_asl_a, z_asm_asl_a
>cb08		61 73 6c 2e 61					.text "asl.a"
.cb0d						nt_asm_asl_x:
>cb0d		05 0c						.byte 5, IM+NN
>cb0f		1a cb				                .word nt_asm_asl_z
>cb11		60 a4 65 a4					.word xt_asm_asl_x, z_asm_asl_x
>cb15		61 73 6c 2e 78					.text "asl.x"
.cb1a						nt_asm_asl_z:
>cb1a		05 0c						.byte 5, IM+NN
>cb1c		27 cb				                .word nt_asm_asl_zx
>cb1e		65 a4 6a a4					.word xt_asm_asl_z, z_asm_asl_z
>cb22		61 73 6c 2e 7a					.text "asl.z"
.cb27						nt_asm_asl_zx:
>cb27		06 0c						.byte 6, IM+NN
>cb29		35 cb				                .word nt_asm_bcc
>cb2b		6a a4 6f a4					.word xt_asm_asl_zx, z_asm_asl_zx
>cb2f		61 73 6c 2e 7a 78				.text "asl.zx"
.cb35						nt_asm_bcc:
>cb35		03 0c						.byte 3, IM+NN
>cb37		40 cb				                .word nt_asm_bcs
>cb39		6f a4 74 a4					.word xt_asm_bcc, z_asm_bcc
>cb3d		62 63 63					.text "bcc"
.cb40						nt_asm_bcs:
>cb40		03 0c						.byte 3, IM+NN
>cb42		4b cb				                .word nt_asm_beq
>cb44		74 a4 7b a4					.word xt_asm_bcs, z_asm_bcs
>cb48		62 63 73					.text "bcs"
.cb4b						nt_asm_beq:
>cb4b		03 0c						.byte 3, IM+NN
>cb4d		56 cb				                .word nt_asm_bit
>cb4f		7b a4 80 a4					.word xt_asm_beq, z_asm_beq
>cb53		62 65 71					.text "beq"
.cb56						nt_asm_bit:
>cb56		03 0c						.byte 3, IM+NN
>cb58		61 cb				                .word nt_asm_bit_h
>cb5a		80 a4 85 a4					.word xt_asm_bit, z_asm_bit
>cb5e		62 69 74					.text "bit"
.cb61						nt_asm_bit_h:
>cb61		05 0c						.byte 5, IM+NN
>cb63		6e cb				                .word nt_asm_bit_x
>cb65		85 a4 8a a4					.word xt_asm_bit_h, z_asm_bit_h
>cb69		62 69 74 2e 23					.text "bit.#"
.cb6e						nt_asm_bit_x:
>cb6e		05 0c						.byte 5, IM+NN
>cb70		7b cb				                .word nt_asm_bit_z
>cb72		8a a4 8f a4					.word xt_asm_bit_x, z_asm_bit_x
>cb76		62 69 74 2e 78					.text "bit.x"
.cb7b						nt_asm_bit_z:
>cb7b		05 0c						.byte 5, IM+NN
>cb7d		88 cb				                .word nt_asm_bit_zx
>cb7f		8f a4 94 a4					.word xt_asm_bit_z, z_asm_bit_z
>cb83		62 69 74 2e 7a					.text "bit.z"
.cb88						nt_asm_bit_zx:
>cb88		06 0c						.byte 6, IM+NN
>cb8a		96 cb				                .word nt_asm_bmi
>cb8c		94 a4 99 a4					.word xt_asm_bit_zx, z_asm_bit_zx
>cb90		62 69 74 2e 7a 78				.text "bit.zx"
.cb96						nt_asm_bmi:
>cb96		03 0c						.byte 3, IM+NN
>cb98		a1 cb				                .word nt_asm_bne
>cb9a		99 a4 9e a4					.word xt_asm_bmi, z_asm_bmi
>cb9e		62 6d 69					.text "bmi"
.cba1						nt_asm_bne:
>cba1		03 0c						.byte 3, IM+NN
>cba3		ac cb				                .word nt_asm_bpl
>cba5		9e a4 a3 a4					.word xt_asm_bne, z_asm_bne
>cba9		62 6e 65					.text "bne"
.cbac						nt_asm_bpl:
>cbac		03 0c						.byte 3, IM+NN
>cbae		b7 cb				                .word nt_asm_bra
>cbb0		a3 a4 a8 a4					.word xt_asm_bpl, z_asm_bpl
>cbb4		62 70 6c					.text "bpl"
.cbb7						nt_asm_bra:
>cbb7		03 0c						.byte 3, IM+NN
>cbb9		c2 cb				                .word nt_asm_brk
>cbbb		a8 a4 ad a4					.word xt_asm_bra, z_asm_bra
>cbbf		62 72 61					.text "bra"
.cbc2						nt_asm_brk:
>cbc2		03 0c						.byte 3, IM+NN
>cbc4		cd cb				                .word nt_asm_bvc
>cbc6		ad a4 b2 a4					.word xt_asm_brk, z_asm_brk
>cbca		62 72 6b					.text "brk"
.cbcd						nt_asm_bvc:
>cbcd		03 0c						.byte 3, IM+NN
>cbcf		d8 cb				                .word nt_asm_bvs
>cbd1		b2 a4 b7 a4					.word xt_asm_bvc, z_asm_bvc
>cbd5		62 76 63					.text "bvc"
.cbd8						nt_asm_bvs:
>cbd8		03 0c						.byte 3, IM+NN
>cbda		e3 cb				                .word nt_asm_clc
>cbdc		b7 a4 bc a4					.word xt_asm_bvs, z_asm_bvs
>cbe0		62 76 73					.text "bvs"
.cbe3						nt_asm_clc:
>cbe3		03 0c						.byte 3, IM+NN
>cbe5		ee cb				                .word nt_asm_cld
>cbe7		bc a4 c1 a4					.word xt_asm_clc, z_asm_clc
>cbeb		63 6c 63					.text "clc"
.cbee						nt_asm_cld:
>cbee		03 0c						.byte 3, IM+NN
>cbf0		f9 cb				                .word nt_asm_cli
>cbf2		c1 a4 c6 a4					.word xt_asm_cld, z_asm_cld
>cbf6		63 6c 64					.text "cld"
.cbf9						nt_asm_cli:
>cbf9		03 0c						.byte 3, IM+NN
>cbfb		04 cc				                .word nt_asm_clv
>cbfd		c6 a4 cb a4					.word xt_asm_cli, z_asm_cli
>cc01		63 6c 69					.text "cli"
.cc04						nt_asm_clv:
>cc04		03 0c						.byte 3, IM+NN
>cc06		0f cc				                .word nt_asm_cmp
>cc08		cb a4 d0 a4					.word xt_asm_clv, z_asm_clv
>cc0c		63 6c 76					.text "clv"
.cc0f						nt_asm_cmp:
>cc0f		03 0c						.byte 3, IM+NN
>cc11		1a cc				                .word nt_asm_cmp_h
>cc13		d0 a4 d5 a4					.word xt_asm_cmp, z_asm_cmp
>cc17		63 6d 70					.text "cmp"
.cc1a						nt_asm_cmp_h:
>cc1a		05 0c						.byte 5, IM+NN
>cc1c		27 cc				                .word nt_asm_cmp_x
>cc1e		d5 a4 da a4					.word xt_asm_cmp_h, z_asm_cmp_h
>cc22		63 6d 70 2e 23					.text "cmp.#"
.cc27						nt_asm_cmp_x:
>cc27		05 0c						.byte 5, IM+NN
>cc29		34 cc				                .word nt_asm_cmp_y
>cc2b		da a4 df a4					.word xt_asm_cmp_x, z_asm_cmp_x
>cc2f		63 6d 70 2e 78					.text "cmp.x"
.cc34						nt_asm_cmp_y:
>cc34		05 0c						.byte 5, IM+NN
>cc36		41 cc				                .word nt_asm_cmp_z
>cc38		df a4 e4 a4					.word xt_asm_cmp_y, z_asm_cmp_y
>cc3c		63 6d 70 2e 79					.text "cmp.y"
.cc41						nt_asm_cmp_z:
>cc41		05 0c						.byte 5, IM+NN
>cc43		4e cc				                .word nt_asm_cmp_zi
>cc45		e4 a4 e9 a4					.word xt_asm_cmp_z, z_asm_cmp_z
>cc49		63 6d 70 2e 7a					.text "cmp.z"
.cc4e						nt_asm_cmp_zi:
>cc4e		06 0c						.byte 6, IM+NN
>cc50		5c cc				                .word nt_asm_cmp_ziy
>cc52		e9 a4 ee a4					.word xt_asm_cmp_zi, z_asm_cmp_zi
>cc56		63 6d 70 2e 7a 69				.text "cmp.zi"
.cc5c						nt_asm_cmp_ziy:
>cc5c		07 0c						.byte 7, IM+NN
>cc5e		6b cc				                .word nt_asm_cmp_zx
>cc60		ee a4 f3 a4					.word xt_asm_cmp_ziy, z_asm_cmp_ziy
>cc64		63 6d 70 2e 7a 69 79				.text "cmp.ziy"
.cc6b						nt_asm_cmp_zx:
>cc6b		06 0c						.byte 6, IM+NN
>cc6d		79 cc				                .word nt_asm_cmp_zxi
>cc6f		f3 a4 f8 a4					.word xt_asm_cmp_zx, z_asm_cmp_zx
>cc73		63 6d 70 2e 7a 78				.text "cmp.zx"
.cc79						nt_asm_cmp_zxi:
>cc79		07 0c						.byte 7, IM+NN
>cc7b		88 cc				                .word nt_asm_cpx
>cc7d		f8 a4 fd a4					.word xt_asm_cmp_zxi, z_asm_cmp_zxi
>cc81		63 6d 70 2e 7a 78 69				.text "cmp.zxi"
.cc88						nt_asm_cpx:
>cc88		03 0c						.byte 3, IM+NN
>cc8a		93 cc				                .word nt_asm_cpx_h
>cc8c		fd a4 02 a5					.word xt_asm_cpx, z_asm_cpx
>cc90		63 70 78					.text "cpx"
.cc93						nt_asm_cpx_h:
>cc93		05 0c						.byte 5, IM+NN
>cc95		a0 cc				                .word nt_asm_cpx_z
>cc97		02 a5 07 a5					.word xt_asm_cpx_h, z_asm_cpx_h
>cc9b		63 70 78 2e 23					.text "cpx.#"
.cca0						nt_asm_cpx_z:
>cca0		05 0c						.byte 5, IM+NN
>cca2		ad cc				                .word nt_asm_cpy
>cca4		07 a5 0c a5					.word xt_asm_cpx_z, z_asm_cpx_z
>cca8		63 70 78 2e 7a					.text "cpx.z"
.ccad						nt_asm_cpy:
>ccad		03 0c						.byte 3, IM+NN
>ccaf		b8 cc				                .word nt_asm_cpy_h
>ccb1		0c a5 13 a5					.word xt_asm_cpy, z_asm_cpy
>ccb5		63 70 79					.text "cpy"
.ccb8						nt_asm_cpy_h:
>ccb8		05 0c						.byte 5, IM+NN
>ccba		c5 cc				                .word nt_asm_cpy_z
>ccbc		13 a5 18 a5					.word xt_asm_cpy_h, z_asm_cpy_h
>ccc0		63 70 79 2e 23					.text "cpy.#"
.ccc5						nt_asm_cpy_z:
>ccc5		05 0c						.byte 5, IM+NN
>ccc7		d2 cc				                .word nt_asm_dec
>ccc9		18 a5 1d a5					.word xt_asm_cpy_z, z_asm_cpy_z
>cccd		63 70 79 2e 7a					.text "cpy.z"
.ccd2						nt_asm_dec:
>ccd2		03 0c						.byte 3, IM+NN
>ccd4		dd cc				                .word nt_asm_dec_a
>ccd6		1d a5 22 a5					.word xt_asm_dec, z_asm_dec
>ccda		64 65 63					.text "dec"
.ccdd						nt_asm_dec_a:
>ccdd		05 0c						.byte 5, IM+NN
>ccdf		ea cc				                .word nt_asm_dec_x
>cce1		22 a5 27 a5					.word xt_asm_dec_a, z_asm_dec_a
>cce5		64 65 63 2e 61					.text "dec.a"
.ccea						nt_asm_dec_x:
>ccea		05 0c						.byte 5, IM+NN
>ccec		f7 cc				                .word nt_asm_dec_z
>ccee		27 a5 2c a5					.word xt_asm_dec_x, z_asm_dec_x
>ccf2		64 65 63 2e 78					.text "dec.x"
.ccf7						nt_asm_dec_z:
>ccf7		05 0c						.byte 5, IM+NN
>ccf9		04 cd				                .word nt_asm_dec_zx
>ccfb		2c a5 31 a5					.word xt_asm_dec_z, z_asm_dec_z
>ccff		64 65 63 2e 7a					.text "dec.z"
.cd04						nt_asm_dec_zx:
>cd04		06 0c						.byte 6, IM+NN
>cd06		12 cd				                .word nt_asm_dex
>cd08		31 a5 36 a5					.word xt_asm_dec_zx, z_asm_dec_zx
>cd0c		64 65 63 2e 7a 78				.text "dec.zx"
.cd12						nt_asm_dex:
>cd12		03 0c						.byte 3, IM+NN
>cd14		1d cd				                .word nt_asm_dey
>cd16		36 a5 3b a5					.word xt_asm_dex, z_asm_dex
>cd1a		64 65 78					.text "dex"
.cd1d						nt_asm_dey:
>cd1d		03 0c						.byte 3, IM+NN
>cd1f		28 cd				                .word nt_asm_eor
>cd21		3b a5 40 a5					.word xt_asm_dey, z_asm_dey
>cd25		64 65 79					.text "dey"
.cd28						nt_asm_eor:
>cd28		03 0c						.byte 3, IM+NN
>cd2a		33 cd				                .word nt_asm_eor_h
>cd2c		40 a5 45 a5					.word xt_asm_eor, z_asm_eor
>cd30		65 6f 72					.text "eor"
.cd33						nt_asm_eor_h:
>cd33		05 0c						.byte 5, IM+NN
>cd35		40 cd				                .word nt_asm_eor_x
>cd37		45 a5 4a a5					.word xt_asm_eor_h, z_asm_eor_h
>cd3b		65 6f 72 2e 23					.text "eor.#"
.cd40						nt_asm_eor_x:
>cd40		05 0c						.byte 5, IM+NN
>cd42		4d cd				                .word nt_asm_eor_y
>cd44		4a a5 4f a5					.word xt_asm_eor_x, z_asm_eor_x
>cd48		65 6f 72 2e 78					.text "eor.x"
.cd4d						nt_asm_eor_y:
>cd4d		05 0c						.byte 5, IM+NN
>cd4f		5a cd				                .word nt_asm_eor_z
>cd51		4f a5 54 a5					.word xt_asm_eor_y, z_asm_eor_y
>cd55		65 6f 72 2e 79					.text "eor.y"
.cd5a						nt_asm_eor_z:
>cd5a		05 0c						.byte 5, IM+NN
>cd5c		67 cd				                .word nt_asm_eor_zi
>cd5e		54 a5 59 a5					.word xt_asm_eor_z, z_asm_eor_z
>cd62		65 6f 72 2e 7a					.text "eor.z"
.cd67						nt_asm_eor_zi:
>cd67		06 0c						.byte 6, IM+NN
>cd69		75 cd				                .word nt_asm_eor_ziy
>cd6b		59 a5 5e a5					.word xt_asm_eor_zi, z_asm_eor_zi
>cd6f		65 6f 72 2e 7a 69				.text "eor.zi"
.cd75						nt_asm_eor_ziy:
>cd75		07 0c						.byte 7, IM+NN
>cd77		84 cd				                .word nt_asm_eor_zx
>cd79		5e a5 63 a5					.word xt_asm_eor_ziy, z_asm_eor_ziy
>cd7d		65 6f 72 2e 7a 69 79				.text "eor.ziy"
.cd84						nt_asm_eor_zx:
>cd84		06 0c						.byte 6, IM+NN
>cd86		92 cd				                .word nt_asm_eor_zxi
>cd88		63 a5 68 a5					.word xt_asm_eor_zx, z_asm_eor_zx
>cd8c		65 6f 72 2e 7a 78				.text "eor.zx"
.cd92						nt_asm_eor_zxi:
>cd92		07 0c						.byte 7, IM+NN
>cd94		a1 cd				                .word nt_asm_inc
>cd96		68 a5 6d a5					.word xt_asm_eor_zxi, z_asm_eor_zxi
>cd9a		65 6f 72 2e 7a 78 69				.text "eor.zxi"
.cda1						nt_asm_inc:
>cda1		03 0c						.byte 3, IM+NN
>cda3		ac cd				                .word nt_asm_inc_a
>cda5		6d a5 72 a5					.word xt_asm_inc, z_asm_inc
>cda9		69 6e 63					.text "inc"
.cdac						nt_asm_inc_a:
>cdac		05 0c						.byte 5, IM+NN
>cdae		b9 cd				                .word nt_asm_inc_x
>cdb0		72 a5 77 a5					.word xt_asm_inc_a, z_asm_inc_a
>cdb4		69 6e 63 2e 61					.text "inc.a"
.cdb9						nt_asm_inc_x:
>cdb9		05 0c						.byte 5, IM+NN
>cdbb		c6 cd				                .word nt_asm_inc_z
>cdbd		77 a5 7c a5					.word xt_asm_inc_x, z_asm_inc_x
>cdc1		69 6e 63 2e 78					.text "inc.x"
.cdc6						nt_asm_inc_z:
>cdc6		05 0c						.byte 5, IM+NN
>cdc8		d3 cd				                .word nt_asm_inc_zx
>cdca		7c a5 81 a5					.word xt_asm_inc_z, z_asm_inc_z
>cdce		69 6e 63 2e 7a					.text "inc.z"
.cdd3						nt_asm_inc_zx:
>cdd3		06 0c						.byte 6, IM+NN
>cdd5		e1 cd				                .word nt_asm_inx
>cdd7		81 a5 86 a5					.word xt_asm_inc_zx, z_asm_inc_zx
>cddb		69 6e 63 2e 7a 78				.text "inc.zx"
.cde1						nt_asm_inx:
>cde1		03 0c						.byte 3, IM+NN
>cde3		ec cd				                .word nt_asm_iny
>cde5		86 a5 8b a5					.word xt_asm_inx, z_asm_inx
>cde9		69 6e 78					.text "inx"
.cdec						nt_asm_iny:
>cdec		03 0c						.byte 3, IM+NN
>cdee		f7 cd				                .word nt_asm_jmp
>cdf0		8b a5 90 a5					.word xt_asm_iny, z_asm_iny
>cdf4		69 6e 79					.text "iny"
.cdf7						nt_asm_jmp:
>cdf7		03 0c						.byte 3, IM+NN
>cdf9		02 ce				                .word nt_asm_jmp_i
>cdfb		90 a5 95 a5					.word xt_asm_jmp, z_asm_jmp
>cdff		6a 6d 70					.text "jmp"
.ce02						nt_asm_jmp_i:
>ce02		05 0c						.byte 5, IM+NN
>ce04		0f ce				                .word nt_asm_jmp_xi
>ce06		95 a5 9a a5					.word xt_asm_jmp_i, z_asm_jmp_i
>ce0a		6a 6d 70 2e 69					.text "jmp.i"
.ce0f						nt_asm_jmp_xi:
>ce0f		06 0c						.byte 6, IM+NN
>ce11		1d ce				                .word nt_asm_jsr
>ce13		9a a5 9f a5					.word xt_asm_jmp_xi, z_asm_jmp_xi
>ce17		6a 6d 70 2e 78 69				.text "jmp.xi"
.ce1d						nt_asm_jsr:
>ce1d		03 0c						.byte 3, IM+NN
>ce1f		28 ce				                .word nt_asm_lda
>ce21		9f a5 a4 a5					.word xt_asm_jsr, z_asm_jsr
>ce25		6a 73 72					.text "jsr"
.ce28						nt_asm_lda:
>ce28		03 0c						.byte 3, IM+NN
>ce2a		33 ce				                .word nt_asm_lda_h
>ce2c		a4 a5 a9 a5					.word xt_asm_lda, z_asm_lda
>ce30		6c 64 61					.text "lda"
.ce33						nt_asm_lda_h:
>ce33		05 0c						.byte 5, IM+NN
>ce35		40 ce				                .word nt_asm_lda_x
>ce37		a9 a5 ae a5					.word xt_asm_lda_h, z_asm_lda_h
>ce3b		6c 64 61 2e 23					.text "lda.#"
.ce40						nt_asm_lda_x:
>ce40		05 0c						.byte 5, IM+NN
>ce42		4d ce				                .word nt_asm_lda_y
>ce44		ae a5 b3 a5					.word xt_asm_lda_x, z_asm_lda_x
>ce48		6c 64 61 2e 78					.text "lda.x"
.ce4d						nt_asm_lda_y:
>ce4d		05 0c						.byte 5, IM+NN
>ce4f		5a ce				                .word nt_asm_lda_z
>ce51		b3 a5 b8 a5					.word xt_asm_lda_y, z_asm_lda_y
>ce55		6c 64 61 2e 79					.text "lda.y"
.ce5a						nt_asm_lda_z:
>ce5a		05 0c						.byte 5, IM+NN
>ce5c		67 ce				                .word nt_asm_lda_zi
>ce5e		b8 a5 bd a5					.word xt_asm_lda_z, z_asm_lda_z
>ce62		6c 64 61 2e 7a					.text "lda.z"
.ce67						nt_asm_lda_zi:
>ce67		06 0c						.byte 6, IM+NN
>ce69		75 ce				                .word nt_asm_lda_ziy
>ce6b		bd a5 c2 a5					.word xt_asm_lda_zi, z_asm_lda_zi
>ce6f		6c 64 61 2e 7a 69				.text "lda.zi"
.ce75						nt_asm_lda_ziy:
>ce75		07 0c						.byte 7, IM+NN
>ce77		84 ce				                .word nt_asm_lda_zx
>ce79		c2 a5 c7 a5					.word xt_asm_lda_ziy, z_asm_lda_ziy
>ce7d		6c 64 61 2e 7a 69 79				.text "lda.ziy"
.ce84						nt_asm_lda_zx:
>ce84		06 0c						.byte 6, IM+NN
>ce86		92 ce				                .word nt_asm_lda_zxi
>ce88		c7 a5 cc a5					.word xt_asm_lda_zx, z_asm_lda_zx
>ce8c		6c 64 61 2e 7a 78				.text "lda.zx"
.ce92						nt_asm_lda_zxi:
>ce92		07 0c						.byte 7, IM+NN
>ce94		a1 ce				                .word nt_asm_ldx
>ce96		cc a5 d1 a5					.word xt_asm_lda_zxi, z_asm_lda_zxi
>ce9a		6c 64 61 2e 7a 78 69				.text "lda.zxi"
.cea1						nt_asm_ldx:
>cea1		03 0c						.byte 3, IM+NN
>cea3		ac ce				                .word nt_asm_ldx_h
>cea5		d1 a5 d6 a5					.word xt_asm_ldx, z_asm_ldx
>cea9		6c 64 78					.text "ldx"
.ceac						nt_asm_ldx_h:
>ceac		05 0c						.byte 5, IM+NN
>ceae		b9 ce				                .word nt_asm_ldx_y
>ceb0		d6 a5 db a5					.word xt_asm_ldx_h, z_asm_ldx_h
>ceb4		6c 64 78 2e 23					.text "ldx.#"
.ceb9						nt_asm_ldx_y:
>ceb9		05 0c						.byte 5, IM+NN
>cebb		c6 ce				                .word nt_asm_ldx_z
>cebd		db a5 e0 a5					.word xt_asm_ldx_y, z_asm_ldx_y
>cec1		6c 64 78 2e 79					.text "ldx.y"
.cec6						nt_asm_ldx_z:
>cec6		05 0c						.byte 5, IM+NN
>cec8		d3 ce				                .word nt_asm_ldx_zy
>ceca		e0 a5 e5 a5					.word xt_asm_ldx_z, z_asm_ldx_z
>cece		6c 64 78 2e 7a					.text "ldx.z"
.ced3						nt_asm_ldx_zy:
>ced3		06 0c						.byte 6, IM+NN
>ced5		e1 ce				                .word nt_asm_ldy
>ced7		e5 a5 ea a5					.word xt_asm_ldx_zy, z_asm_ldx_zy
>cedb		6c 64 78 2e 7a 79				.text "ldx.zy"
.cee1						nt_asm_ldy:
>cee1		03 0c						.byte 3, IM+NN
>cee3		ec ce				                .word nt_asm_ldy_h
>cee5		ea a5 ef a5					.word xt_asm_ldy, z_asm_ldy
>cee9		6c 64 79					.text "ldy"
.ceec						nt_asm_ldy_h:
>ceec		05 0c						.byte 5, IM+NN
>ceee		f9 ce				                .word nt_asm_ldy_x
>cef0		ef a5 f4 a5					.word xt_asm_ldy_h, z_asm_ldy_h
>cef4		6c 64 79 2e 23					.text "ldy.#"
.cef9						nt_asm_ldy_x:
>cef9		05 0c						.byte 5, IM+NN
>cefb		06 cf				                .word nt_asm_ldy_z
>cefd		f4 a5 f9 a5					.word xt_asm_ldy_x, z_asm_ldy_x
>cf01		6c 64 79 2e 78					.text "ldy.x"
.cf06						nt_asm_ldy_z:
>cf06		05 0c						.byte 5, IM+NN
>cf08		13 cf				                .word nt_asm_ldy_zx
>cf0a		f9 a5 fe a5					.word xt_asm_ldy_z, z_asm_ldy_z
>cf0e		6c 64 79 2e 7a					.text "ldy.z"
.cf13						nt_asm_ldy_zx:
>cf13		06 0c						.byte 6, IM+NN
>cf15		21 cf				                .word nt_asm_lsr
>cf17		fe a5 03 a6					.word xt_asm_ldy_zx, z_asm_ldy_zx
>cf1b		6c 64 79 2e 7a 78				.text "ldy.zx"
.cf21						nt_asm_lsr:
>cf21		03 0c						.byte 3, IM+NN
>cf23		2c cf				                .word nt_asm_lsr_a
>cf25		03 a6 08 a6					.word xt_asm_lsr, z_asm_lsr
>cf29		6c 73 72					.text "lsr"
.cf2c						nt_asm_lsr_a:
>cf2c		05 0c						.byte 5, IM+NN
>cf2e		39 cf				                .word nt_asm_lsr_x
>cf30		08 a6 0d a6					.word xt_asm_lsr_a, z_asm_lsr_a
>cf34		6c 73 72 2e 61					.text "lsr.a"
.cf39						nt_asm_lsr_x:
>cf39		05 0c						.byte 5, IM+NN
>cf3b		46 cf				                .word nt_asm_lsr_z
>cf3d		0d a6 12 a6					.word xt_asm_lsr_x, z_asm_lsr_x
>cf41		6c 73 72 2e 78					.text "lsr.x"
.cf46						nt_asm_lsr_z:
>cf46		05 0c						.byte 5, IM+NN
>cf48		53 cf				                .word nt_asm_lsr_zx
>cf4a		12 a6 17 a6					.word xt_asm_lsr_z, z_asm_lsr_z
>cf4e		6c 73 72 2e 7a					.text "lsr.z"
.cf53						nt_asm_lsr_zx:
>cf53		06 0c						.byte 6, IM+NN
>cf55		61 cf				                .word nt_asm_nop
>cf57		17 a6 1c a6					.word xt_asm_lsr_zx, z_asm_lsr_zx
>cf5b		6c 73 72 2e 7a 78				.text "lsr.zx"
.cf61						nt_asm_nop:
>cf61		03 0c						.byte 3, IM+NN
>cf63		6c cf				                .word nt_asm_ora
>cf65		1c a6 21 a6					.word xt_asm_nop, z_asm_nop
>cf69		6e 6f 70					.text "nop"
.cf6c						nt_asm_ora:
>cf6c		03 0c						.byte 3, IM+NN
>cf6e		77 cf				                .word nt_asm_ora_h
>cf70		21 a6 26 a6					.word xt_asm_ora, z_asm_ora
>cf74		6f 72 61					.text "ora"
.cf77						nt_asm_ora_h:
>cf77		05 0c						.byte 5, IM+NN
>cf79		84 cf				                .word nt_asm_ora_x
>cf7b		26 a6 2b a6					.word xt_asm_ora_h, z_asm_ora_h
>cf7f		6f 72 61 2e 23					.text "ora.#"
.cf84						nt_asm_ora_x:
>cf84		05 0c						.byte 5, IM+NN
>cf86		91 cf				                .word nt_asm_ora_y
>cf88		2b a6 30 a6					.word xt_asm_ora_x, z_asm_ora_x
>cf8c		6f 72 61 2e 78					.text "ora.x"
.cf91						nt_asm_ora_y:
>cf91		05 0c						.byte 5, IM+NN
>cf93		9e cf				                .word nt_asm_ora_z
>cf95		30 a6 35 a6					.word xt_asm_ora_y, z_asm_ora_y
>cf99		6f 72 61 2e 79					.text "ora.y"
.cf9e						nt_asm_ora_z:
>cf9e		05 0c						.byte 5, IM+NN
>cfa0		ab cf				                .word nt_asm_ora_zi
>cfa2		35 a6 3a a6					.word xt_asm_ora_z, z_asm_ora_z
>cfa6		6f 72 61 2e 7a					.text "ora.z"
.cfab						nt_asm_ora_zi:
>cfab		06 0c						.byte 6, IM+NN
>cfad		b9 cf				                .word nt_asm_ora_ziy
>cfaf		3a a6 41 a6					.word xt_asm_ora_zi, z_asm_ora_zi
>cfb3		6f 72 61 2e 7a 69				.text "ora.zi"
.cfb9						nt_asm_ora_ziy:
>cfb9		07 0c						.byte 7, IM+NN
>cfbb		c8 cf				                .word nt_asm_ora_zx
>cfbd		41 a6 46 a6					.word xt_asm_ora_ziy, z_asm_ora_ziy
>cfc1		6f 72 61 2e 7a 69 79				.text "ora.ziy"
.cfc8						nt_asm_ora_zx:
>cfc8		06 0c						.byte 6, IM+NN
>cfca		d6 cf				                .word nt_asm_ora_zxi
>cfcc		46 a6 4b a6					.word xt_asm_ora_zx, z_asm_ora_zx
>cfd0		6f 72 61 2e 7a 78				.text "ora.zx"
.cfd6						nt_asm_ora_zxi:
>cfd6		07 0c						.byte 7, IM+NN
>cfd8		e5 cf				                .word nt_asm_pha
>cfda		4b a6 50 a6					.word xt_asm_ora_zxi, z_asm_ora_zxi
>cfde		6f 72 61 2e 7a 78 69				.text "ora.zxi"
.cfe5						nt_asm_pha:
>cfe5		03 0c						.byte 3, IM+NN
>cfe7		f0 cf				                .word nt_asm_php
>cfe9		50 a6 55 a6					.word xt_asm_pha, z_asm_pha
>cfed		70 68 61					.text "pha"
.cff0						nt_asm_php:
>cff0		03 0c						.byte 3, IM+NN
>cff2		fb cf				                .word nt_asm_phx
>cff4		55 a6 5a a6					.word xt_asm_php, z_asm_php
>cff8		70 68 70					.text "php"
.cffb						nt_asm_phx:
>cffb		03 0c						.byte 3, IM+NN
>cffd		06 d0				                .word nt_asm_phy
>cfff		5a a6 5f a6					.word xt_asm_phx, z_asm_phx
>d003		70 68 78					.text "phx"
.d006						nt_asm_phy:
>d006		03 0c						.byte 3, IM+NN
>d008		11 d0				                .word nt_asm_pla
>d00a		5f a6 64 a6					.word xt_asm_phy, z_asm_phy
>d00e		70 68 79					.text "phy"
.d011						nt_asm_pla:
>d011		03 0c						.byte 3, IM+NN
>d013		1c d0				                .word nt_asm_plp
>d015		64 a6 69 a6					.word xt_asm_pla, z_asm_pla
>d019		70 6c 61					.text "pla"
.d01c						nt_asm_plp:
>d01c		03 0c						.byte 3, IM+NN
>d01e		27 d0				                .word nt_asm_plx
>d020		69 a6 6e a6					.word xt_asm_plp, z_asm_plp
>d024		70 6c 70					.text "plp"
.d027						nt_asm_plx:
>d027		03 0c						.byte 3, IM+NN
>d029		32 d0				                .word nt_asm_ply
>d02b		6e a6 73 a6					.word xt_asm_plx, z_asm_plx
>d02f		70 6c 78					.text "plx"
.d032						nt_asm_ply:
>d032		03 0c						.byte 3, IM+NN
>d034		3d d0				                .word nt_asm_rol
>d036		73 a6 78 a6					.word xt_asm_ply, z_asm_ply
>d03a		70 6c 79					.text "ply"
.d03d						nt_asm_rol:
>d03d		03 0c						.byte 3, IM+NN
>d03f		48 d0				                .word nt_asm_rol_a
>d041		78 a6 7d a6					.word xt_asm_rol, z_asm_rol
>d045		72 6f 6c					.text "rol"
.d048						nt_asm_rol_a:
>d048		05 0c						.byte 5, IM+NN
>d04a		55 d0				                .word nt_asm_rol_x
>d04c		7d a6 82 a6					.word xt_asm_rol_a, z_asm_rol_a
>d050		72 6f 6c 2e 61					.text "rol.a"
.d055						nt_asm_rol_x:
>d055		05 0c						.byte 5, IM+NN
>d057		62 d0				                .word nt_asm_rol_z
>d059		82 a6 87 a6					.word xt_asm_rol_x, z_asm_rol_x
>d05d		72 6f 6c 2e 78					.text "rol.x"
.d062						nt_asm_rol_z:
>d062		05 0c						.byte 5, IM+NN
>d064		6f d0				                .word nt_asm_rol_zx
>d066		87 a6 8c a6					.word xt_asm_rol_z, z_asm_rol_z
>d06a		72 6f 6c 2e 7a					.text "rol.z"
.d06f						nt_asm_rol_zx:
>d06f		06 0c						.byte 6, IM+NN
>d071		7d d0				                .word nt_asm_ror
>d073		8c a6 91 a6					.word xt_asm_rol_zx, z_asm_rol_zx
>d077		72 6f 6c 2e 7a 78				.text "rol.zx"
.d07d						nt_asm_ror:
>d07d		03 0c						.byte 3, IM+NN
>d07f		88 d0				                .word nt_asm_ror_a
>d081		91 a6 96 a6					.word xt_asm_ror, z_asm_ror
>d085		72 6f 72					.text "ror"
.d088						nt_asm_ror_a:
>d088		05 0c						.byte 5, IM+NN
>d08a		95 d0				                .word nt_asm_ror_x
>d08c		96 a6 9b a6					.word xt_asm_ror_a, z_asm_ror_a
>d090		72 6f 72 2e 61					.text "ror.a"
.d095						nt_asm_ror_x:
>d095		05 0c						.byte 5, IM+NN
>d097		a2 d0				                .word nt_asm_ror_z
>d099		9b a6 a0 a6					.word xt_asm_ror_x, z_asm_ror_x
>d09d		72 6f 72 2e 78					.text "ror.x"
.d0a2						nt_asm_ror_z:
>d0a2		05 0c						.byte 5, IM+NN
>d0a4		af d0				                .word nt_asm_ror_zx
>d0a6		a0 a6 a5 a6					.word xt_asm_ror_z, z_asm_ror_z
>d0aa		72 6f 72 2e 7a					.text "ror.z"
.d0af						nt_asm_ror_zx:
>d0af		06 0c						.byte 6, IM+NN
>d0b1		bd d0				                .word nt_asm_rti
>d0b3		a5 a6 aa a6					.word xt_asm_ror_zx, z_asm_ror_zx
>d0b7		72 6f 72 2e 7a 78				.text "ror.zx"
.d0bd						nt_asm_rti:
>d0bd		03 0c						.byte 3, IM+NN
>d0bf		c8 d0				                .word nt_asm_rts
>d0c1		aa a6 af a6					.word xt_asm_rti, z_asm_rti
>d0c5		72 74 69					.text "rti"
.d0c8						nt_asm_rts:
>d0c8		03 0c						.byte 3, IM+NN
>d0ca		d3 d0				                .word nt_asm_sbc
>d0cc		af a6 b4 a6					.word xt_asm_rts, z_asm_rts
>d0d0		72 74 73					.text "rts"
.d0d3						nt_asm_sbc:
>d0d3		03 0c						.byte 3, IM+NN
>d0d5		de d0				                .word nt_asm_sbc_h
>d0d7		b4 a6 b9 a6					.word xt_asm_sbc, z_asm_sbc
>d0db		73 62 63					.text "sbc"
.d0de						nt_asm_sbc_h:
>d0de		05 0c						.byte 5, IM+NN
>d0e0		eb d0				                .word nt_asm_sbc_x
>d0e2		b9 a6 be a6					.word xt_asm_sbc_h, z_asm_sbc_h
>d0e6		73 62 63 2e 23					.text "sbc.#"
.d0eb						nt_asm_sbc_x:
>d0eb		05 0c						.byte 5, IM+NN
>d0ed		f8 d0				                .word nt_asm_sbc_y
>d0ef		be a6 c3 a6					.word xt_asm_sbc_x, z_asm_sbc_x
>d0f3		73 62 63 2e 78					.text "sbc.x"
.d0f8						nt_asm_sbc_y:
>d0f8		05 0c						.byte 5, IM+NN
>d0fa		05 d1				                .word nt_asm_sbc_z
>d0fc		c3 a6 c8 a6					.word xt_asm_sbc_y, z_asm_sbc_y
>d100		73 62 63 2e 79					.text "sbc.y"
.d105						nt_asm_sbc_z:
>d105		05 0c						.byte 5, IM+NN
>d107		12 d1				                .word nt_asm_sbc_zi
>d109		c8 a6 cd a6					.word xt_asm_sbc_z, z_asm_sbc_z
>d10d		73 62 63 2e 7a					.text "sbc.z"
.d112						nt_asm_sbc_zi:
>d112		06 0c						.byte 6, IM+NN
>d114		20 d1				                .word nt_asm_sbc_ziy
>d116		cd a6 d2 a6					.word xt_asm_sbc_zi, z_asm_sbc_zi
>d11a		73 62 63 2e 7a 69				.text "sbc.zi"
.d120						nt_asm_sbc_ziy:
>d120		07 0c						.byte 7, IM+NN
>d122		2f d1				                .word nt_asm_sbc_zx
>d124		d2 a6 d7 a6					.word xt_asm_sbc_ziy, z_asm_sbc_ziy
>d128		73 62 63 2e 7a 69 79				.text "sbc.ziy"
.d12f						nt_asm_sbc_zx:
>d12f		06 0c						.byte 6, IM+NN
>d131		3d d1				                .word nt_asm_sbc_zxi
>d133		d7 a6 dc a6					.word xt_asm_sbc_zx, z_asm_sbc_zx
>d137		73 62 63 2e 7a 78				.text "sbc.zx"
.d13d						nt_asm_sbc_zxi:
>d13d		07 0c						.byte 7, IM+NN
>d13f		4c d1				                .word nt_asm_sec
>d141		dc a6 e0 a6					.word xt_asm_sbc_zxi, z_asm_sbc_zxi
>d145		73 62 63 2e 7a 78 69				.text "sbc.zxi"
.d14c						nt_asm_sec:
>d14c		03 0c						.byte 3, IM+NN
>d14e		57 d1				                .word nt_asm_sed
>d150		e0 a6 e4 a6					.word xt_asm_sec, z_asm_sec
>d154		73 65 63					.text "sec"
.d157						nt_asm_sed:
>d157		03 0c						.byte 3, IM+NN
>d159		62 d1				                .word nt_asm_sei
>d15b		e4 a6 e8 a6					.word xt_asm_sed, z_asm_sed
>d15f		73 65 64					.text "sed"
.d162						nt_asm_sei:
>d162		03 0c						.byte 3, IM+NN
>d164		6d d1				                .word nt_asm_sta
>d166		e8 a6 ec a6					.word xt_asm_sei, z_asm_sei
>d16a		73 65 69					.text "sei"
.d16d						nt_asm_sta:
>d16d		03 0c						.byte 3, IM+NN
>d16f		78 d1				                .word nt_asm_sta_x
>d171		ec a6 f0 a6					.word xt_asm_sta, z_asm_sta
>d175		73 74 61					.text "sta"
.d178						nt_asm_sta_x:
>d178		05 0c						.byte 5, IM+NN
>d17a		85 d1				                .word nt_asm_sta_y
>d17c		f0 a6 f4 a6					.word xt_asm_sta_x, z_asm_sta_x
>d180		73 74 61 2e 78					.text "sta.x"
.d185						nt_asm_sta_y:
>d185		05 0c						.byte 5, IM+NN
>d187		92 d1				                .word nt_asm_sta_z
>d189		f4 a6 f8 a6					.word xt_asm_sta_y, z_asm_sta_y
>d18d		73 74 61 2e 79					.text "sta.y"
.d192						nt_asm_sta_z:
>d192		05 0c						.byte 5, IM+NN
>d194		9f d1				                .word nt_asm_sta_zi
>d196		f8 a6 fc a6					.word xt_asm_sta_z, z_asm_sta_z
>d19a		73 74 61 2e 7a					.text "sta.z"
.d19f						nt_asm_sta_zi:
>d19f		06 0c						.byte 6, IM+NN
>d1a1		ad d1				                .word nt_asm_sta_ziy
>d1a3		fc a6 00 a7					.word xt_asm_sta_zi, z_asm_sta_zi
>d1a7		73 74 61 2e 7a 69				.text "sta.zi"
.d1ad						nt_asm_sta_ziy:
>d1ad		07 0c						.byte 7, IM+NN
>d1af		bc d1				                .word nt_asm_sta_zx
>d1b1		00 a7 04 a7					.word xt_asm_sta_ziy, z_asm_sta_ziy
>d1b5		73 74 61 2e 7a 69 79				.text "sta.ziy"
.d1bc						nt_asm_sta_zx:
>d1bc		06 0c						.byte 6, IM+NN
>d1be		ca d1				                .word nt_asm_sta_zxi
>d1c0		04 a7 08 a7					.word xt_asm_sta_zx, z_asm_sta_zx
>d1c4		73 74 61 2e 7a 78				.text "sta.zx"
.d1ca						nt_asm_sta_zxi:
>d1ca		07 0c						.byte 7, IM+NN
>d1cc		d9 d1				                .word nt_asm_stx
>d1ce		08 a7 0c a7					.word xt_asm_sta_zxi, z_asm_sta_zxi
>d1d2		73 74 61 2e 7a 78 69				.text "sta.zxi"
.d1d9						nt_asm_stx:
>d1d9		03 0c						.byte 3, IM+NN
>d1db		e4 d1				                .word nt_asm_stx_z
>d1dd		0c a7 10 a7					.word xt_asm_stx, z_asm_stx
>d1e1		73 74 78					.text "stx"
.d1e4						nt_asm_stx_z:
>d1e4		05 0c						.byte 5, IM+NN
>d1e6		f1 d1				                .word nt_asm_stx_zy
>d1e8		10 a7 14 a7					.word xt_asm_stx_z, z_asm_stx_z
>d1ec		73 74 78 2e 7a					.text "stx.z"
.d1f1						nt_asm_stx_zy:
>d1f1		06 0c						.byte 6, IM+NN
>d1f3		ff d1				                .word nt_asm_sty
>d1f5		14 a7 18 a7					.word xt_asm_stx_zy, z_asm_stx_zy
>d1f9		73 74 78 2e 7a 79				.text "stx.zy"
.d1ff						nt_asm_sty:
>d1ff		03 0c						.byte 3, IM+NN
>d201		0a d2				                .word nt_asm_sty_z
>d203		18 a7 1c a7					.word xt_asm_sty, z_asm_sty
>d207		73 74 79					.text "sty"
.d20a						nt_asm_sty_z:
>d20a		05 0c						.byte 5, IM+NN
>d20c		17 d2				                .word nt_asm_sty_zx
>d20e		1c a7 20 a7					.word xt_asm_sty_z, z_asm_sty_z
>d212		73 74 79 2e 7a					.text "sty.z"
.d217						nt_asm_sty_zx:
>d217		06 0c						.byte 6, IM+NN
>d219		25 d2				                .word nt_asm_stz
>d21b		20 a7 24 a7					.word xt_asm_sty_zx, z_asm_sty_zx
>d21f		73 74 79 2e 7a 78				.text "sty.zx"
.d225						nt_asm_stz:
>d225		03 0c						.byte 3, IM+NN
>d227		30 d2				                .word nt_asm_stz_x
>d229		24 a7 28 a7					.word xt_asm_stz, z_asm_stz
>d22d		73 74 7a					.text "stz"
.d230						nt_asm_stz_x:
>d230		05 0c						.byte 5, IM+NN
>d232		3d d2				                .word nt_asm_stz_z
>d234		28 a7 2c a7					.word xt_asm_stz_x, z_asm_stz_x
>d238		73 74 7a 2e 78					.text "stz.x"
.d23d						nt_asm_stz_z:
>d23d		05 0c						.byte 5, IM+NN
>d23f		4a d2				                .word nt_asm_stz_zx
>d241		2c a7 30 a7					.word xt_asm_stz_z, z_asm_stz_z
>d245		73 74 7a 2e 7a					.text "stz.z"
.d24a						nt_asm_stz_zx:
>d24a		06 0c						.byte 6, IM+NN
>d24c		58 d2				                .word nt_asm_tax
>d24e		30 a7 34 a7					.word xt_asm_stz_zx, z_asm_stz_zx
>d252		73 74 7a 2e 7a 78				.text "stz.zx"
.d258						nt_asm_tax:
>d258		03 0c						.byte 3, IM+NN
>d25a		63 d2				                .word nt_asm_tay
>d25c		34 a7 38 a7					.word xt_asm_tax, z_asm_tax
>d260		74 61 78					.text "tax"
.d263						nt_asm_tay:
>d263		03 0c						.byte 3, IM+NN
>d265		6e d2				                .word nt_asm_trb
>d267		38 a7 3c a7					.word xt_asm_tay, z_asm_tay
>d26b		74 61 79					.text "tay"
.d26e						nt_asm_trb:
>d26e		03 0c						.byte 3, IM+NN
>d270		79 d2				                .word nt_asm_trb_z
>d272		3c a7 40 a7					.word xt_asm_trb, z_asm_trb
>d276		74 72 62					.text "trb"
.d279						nt_asm_trb_z:
>d279		05 0c						.byte 5, IM+NN
>d27b		86 d2				                .word nt_asm_tsb
>d27d		40 a7 44 a7					.word xt_asm_trb_z, z_asm_trb_z
>d281		74 72 62 2e 7a					.text "trb.z"
.d286						nt_asm_tsb:
>d286		03 0c						.byte 3, IM+NN
>d288		91 d2				                .word nt_asm_tsb_z
>d28a		44 a7 48 a7					.word xt_asm_tsb, z_asm_tsb
>d28e		74 73 62					.text "tsb"
.d291						nt_asm_tsb_z:
>d291		05 0c						.byte 5, IM+NN
>d293		9e d2				                .word nt_asm_tsx
>d295		48 a7 4c a7					.word xt_asm_tsb_z, z_asm_tsb_z
>d299		74 73 62 2e 7a					.text "tsb.z"
.d29e						nt_asm_tsx:
>d29e		03 0c						.byte 3, IM+NN
>d2a0		a9 d2				                .word nt_asm_txa
>d2a2		4c a7 50 a7					.word xt_asm_tsx, z_asm_tsx
>d2a6		74 73 78					.text "tsx"
.d2a9						nt_asm_txa:
>d2a9		03 0c						.byte 3, IM+NN
>d2ab		b4 d2				                .word nt_asm_txs
>d2ad		50 a7 54 a7					.word xt_asm_txa, z_asm_txa
>d2b1		74 78 61					.text "txa"
.d2b4						nt_asm_txs:
>d2b4		03 0c						.byte 3, IM+NN
>d2b6		bf d2				                .word nt_asm_tya
>d2b8		54 a7 58 a7					.word xt_asm_txs, z_asm_txs
>d2bc		74 78 73					.text "txs"
.d2bf						nt_asm_tya:
>d2bf		03 0c						.byte 3, IM+NN
>d2c1		ca d2				                .word nt_asm_arrow
>d2c3		58 a7 5c a7					.word xt_asm_tya, z_asm_tya
>d2c7		74 79 61					.text "tya"
.d2ca						nt_asm_arrow:
>d2ca		03 04				                .byte 3, IM
>d2cc		d5 d2				                .word nt_asm_back_jump
>d2ce		1b 89 25 89			                .word xt_asm_arrow, z_asm_arrow
>d2d2		2d 2d 3e			                .text "-->"
.d2d5						nt_asm_back_jump:
>d2d5		02 04				                .byte 2, IM
>d2d7		df d2				                .word nt_asm_back_branch
>d2d9		ad a7 ad a7			                .word xt_asm_back_jump, z_asm_back_jump
>d2dd		3c 6a				                .text "<j"
.d2df						nt_asm_back_branch:
>d2df		02 04				                .byte 2, IM
>d2e1		e9 d2				                .word nt_asm_push_a
>d2e3		ae a7 b6 a7			                .word xt_asm_back_branch, z_asm_back_branch
>d2e7		3c 62				                .text "<b"
.d2e9						nt_asm_push_a:
>d2e9		06 0c				                .byte 6, IM+NN
>d2eb		00 00				                .word 0000
>d2ed		96 a7 a5 a7			                .word xt_asm_push_a, z_asm_push_a
>d2f1		70 75 73 68 2d 61		                .text "push-a"

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../strings.asm

=0						ix := 0
=0						str_ok             = ix         ; unused?
=1						ix += 1
=1						str_compile        = ix         ; unused?
=2						ix += 1
=2						str_redefined      = ix
=3						ix += 1
=3						str_abc_upper      = ix         ; unused?
=4						ix += 1
=4						str_wid_forth      = ix
=5						ix += 1
=5						str_wid_editor     = ix
=6						ix += 1
=6						str_wid_assembler  = ix
=7						ix += 1
=7						str_wid_root       = ix
=8						ix += 1
=8						str_see_flags      = ix
=9						ix += 1
=9						str_see_nt         = ix
=10						ix += 1
=10						str_see_xt         = ix
=11						ix += 1
=11						str_see_size       = ix
=12						ix += 1
=12						str_disasm_sdc     = ix
=13						ix += 1
=13						str_disasm_lit     = ix
=14						ix += 1
=14						str_disasm_0bra    = ix
=15						ix += 1
=15						str_disasm_loop    = ix
=16						ix += 1
=16						str_disasm_do      = ix
=17						ix += 1
.d2f7						string_table:
>d2f7		19 d3 1d d3 27 d3 32 d3		        .word s_ok, s_compiled, s_redefined, s_abc_upper              ; 0-3
>d2ff		69 d3 61 d3 56 d3 70 d3		        .word s_wid_forth, s_wid_editor, s_wid_asm, s_wid_root        ; 4-7
>d307		76 d3 92 d3 97 d3 9c d3		        .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 8-11
>d30f		ad d3 c0 d3 c9 d3 d2 d3		        .word s_disasm_sdc, s_disasm_lit, s_disasm_0bra, s_disasm_loop, s_disasm_do ; 12-16
>d317		d8 d3
>d319		20 6f 6b 00			s_ok:         .text " ok", 0         ; note space at beginning
>d31d		20 63 6f 6d 70 69 6c 65		s_compiled:   .text " compiled", 0   ; note space at beginning
>d325		64 00
>d327		72 65 64 65 66 69 6e 65		s_redefined:  .text "redefined ", 0  ; note space at end
>d32f		64 20 00
>d332		30 31 32 33 34 35 36 37		s_abc_upper:  .text "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
>d33a		38 39 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e
>d34a		4f 50 51 52 53 54 55 56 57 58 59 5a
>d356		41 73 73 65 6d 62 6c 65		s_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>d35e		72 20 00
>d361		45 64 69 74 6f 72 20 00		s_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>d369		46 6f 72 74 68 20 00		s_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>d370		52 6f 6f 74 20 00		s_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>d376		66 6c 61 67 73 20 28 43		s_see_flags:  .text "flags (CO AN IM NN UF HC): ", 0
>d37e		4f 20 41 4e 20 49 4d 20 4e 4e 20 55 46 20 48 43
>d38e		29 3a 20 00
>d392		6e 74 3a 20 00			s_see_nt:     .text "nt: ", 0
>d397		78 74 3a 20 00			s_see_xt:     .text "xt: ", 0
>d39c		73 69 7a 65 20 28 64 65		s_see_size:   .text "size (decimal): ", 0
>d3a4		63 69 6d 61 6c 29 3a 20 00
>d3ad		20 53 54 41 43 4b 20 44		s_disasm_sdc: .text " STACK DEPTH CHECK", 0
>d3b5		45 50 54 48 20 43 48 45 43 4b 00
>d3c0		4c 49 54 45 52 41 4c 20		s_disasm_lit: .text "LITERAL ", 0
>d3c8		00
>d3c9		30 42 52 41 4e 43 48 20		s_disasm_0bra: .text "0BRANCH ",0
>d3d1		00
>d3d2		4c 4f 4f 50 20 00		s_disasm_loop: .text "LOOP ",0
>d3d8		44 4f 20 00			s_disasm_do: .text "DO ",0
=0						err_allot        = 0
=1						err_badsource    = 1
=2						err_compileonly  = 2
=3						err_defer        = 3
=4						err_divzero      = 4
=5						err_noname       = 5
=6						err_refill       = 6
=7						err_state        = 7
=8						err_syntax       = 8
=9						err_underflow    = 9
=10						err_negallot     = 10
=11						err_wordlist     = 11
=12						err_blockwords   = 12
=13						err_returnstack  = 13
.d3dc						error_table:
>d3dc		f8 d3 19 d4 39 d4 5a d4		        .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
>d3e4		77 d4 88 d4 98 d4 c6 d4		        .word es_divzero, es_noname, es_refill, es_state        ;  4-7
>d3ec		de d4 ff d4 14 d5 30 d5		        .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
>d3f4		47 d5 86 d5			        .word es_blockwords, es_returnstack                     ; 12-13
>d3f8		41 4c 4c 4f 54 20 75 73		es_allot:       .text "ALLOT using all available memory", 0
>d400		69 6e 67 20 61 6c 6c 20 61 76 61 69 6c 61 62 6c
>d410		65 20 6d 65 6d 6f 72 79 00
>d419		49 6c 6c 65 67 61 6c 20		es_badsource:   .text "Illegal SOURCE-ID during REFILL", 0
>d421		53 4f 55 52 43 45 2d 49 44 20 64 75 72 69 6e 67
>d431		20 52 45 46 49 4c 4c 00
>d439		49 6e 74 65 72 70 72 65		es_compileonly: .text "Interpreting a compile-only word", 0
>d441		74 69 6e 67 20 61 20 63 6f 6d 70 69 6c 65 2d 6f
>d451		6e 6c 79 20 77 6f 72 64 00
>d45a		44 45 46 45 52 65 64 20		es_defer:       .text "DEFERed word not defined yet", 0
>d462		77 6f 72 64 20 6e 6f 74 20 64 65 66 69 6e 65 64
>d472		20 79 65 74 00
>d477		44 69 76 69 73 69 6f 6e		es_divzero:     .text "Division by zero", 0
>d47f		20 62 79 20 7a 65 72 6f 00
>d488		50 61 72 73 69 6e 67 20		es_noname:      .text "Parsing failure", 0
>d490		66 61 69 6c 75 72 65 00
>d498		51 55 49 54 20 63 6f 75		es_refill:      .text "QUIT could not get input (REFILL returned -1)", 0
>d4a0		6c 64 20 6e 6f 74 20 67 65 74 20 69 6e 70 75 74
>d4b0		20 28 52 45 46 49 4c 4c 20 72 65 74 75 72 6e 65
>d4c0		64 20 2d 31 29 00
>d4c6		41 6c 72 65 61 64 79 20		es_state:       .text "Already in compile mode", 0
>d4ce		69 6e 20 63 6f 6d 70 69 6c 65 20 6d 6f 64 65 00
>d4de		55 6e 64 65 66 69 6e 65		es_syntax:      .text "Undefined word or invalid number", 0
>d4e6		64 20 77 6f 72 64 20 6f 72 20 69 6e 76 61 6c 69
>d4f6		64 20 6e 75 6d 62 65 72 00
>d4ff		44 61 74 61 20 73 74 61		es_underflow:   .text "Data stack underflow", 0
>d507		63 6b 20 75 6e 64 65 72 66 6c 6f 77 00
>d514		4d 61 78 20 6d 65 6d 6f		es_negallot:    .text "Max memory freed with ALLOT", 0
>d51c		72 79 20 66 72 65 65 64 20 77 69 74 68 20 41 4c
>d52c		4c 4f 54 00
>d530		4e 6f 20 77 6f 72 64 6c		es_wordlist:    .text "No wordlists available", 0
>d538		69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>d547		50 6c 65 61 73 65 20 61		es_blockwords:  .text "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>d54f		73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42 4c
>d55f		4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52 20
>d56f		61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45 2d
>d57f		56 45 43 54 4f 52 00
>d586		52 65 74 75 72 6e 20 73		es_returnstack: .text "Return stack:", 0
>d58e		74 61 63 6b 3a 00
>d594		0f 2f 43 4f 55 4e 54 45		envs_cs:        .text 15, "/COUNTED-STRING"
>d59c		44 2d 53 54 52 49 4e 47
>d5a4		05 2f 48 4f 4c 44		envs_hold:      .text 5, "/HOLD"
>d5aa		04 2f 50 41 44			envs_pad:       .text 4, "/PAD"
>d5af		11 41 44 44 52 45 53 53		envs_aub:       .text 17, "ADDRESS-UNIT-BITS"
>d5b7		2d 55 4e 49 54 2d 42 49 54 53
>d5c1		07 46 4c 4f 4f 52 45 44		envs_floored:   .text 7, "FLOORED"
>d5c9		08 4d 41 58 2d 43 48 41		envs_max_char:  .text 8, "MAX-CHAR"
>d5d1		52
>d5d2		05 4d 41 58 2d 4e		envs_max_n:     .text 5, "MAX-N"
>d5d8		05 4d 41 58 2d 55		envs_max_u:     .text 5, "MAX-U"
>d5de		12 52 45 54 55 52 4e 2d		envs_rsc:       .text 18, "RETURN-STACK-CELLS"
>d5e6		53 54 41 43 4b 2d 43 45 4c 4c 53
>d5f1		0b 53 54 41 43 4b 2d 43		envs_sc:        .text 11, "STACK-CELLS"
>d5f9		45 4c 4c 53
>d5fd		09 57 4f 52 44 4c 49 53		envs_wl:        .text 9, "WORDLISTS"
>d605		54 53
>d607		05 4d 41 58 2d 44		envs_max_d:     .text 5, "MAX-D"
>d60d		06 4d 41 58 2d 55 44		envs_max_ud:    .text 6, "MAX-UD"

;******  Return to file: platform/../taliforth.asm

.d614						doconst:
.d614		ca		dex		                dex             ; make room for constant
.d615		ca		dex		                dex
.d616		68		pla		                pla             ; LSB of return address
.d617		85 25		sta $25		                sta tmp1
.d619		68		pla		                pla             ; MSB of return address
.d61a		85 26		sta $26		                sta tmp1+1
.d61c		a0 01		ldy #$01	                ldy #1
.d61e		b1 25		lda ($25),y	                lda (tmp1),y
.d620		95 00		sta $00,x	                sta 0,x
.d622		c8		iny		                iny
.d623		b1 25		lda ($25),y	                lda (tmp1),y
.d625		95 01		sta $01,x	                sta 1,x
.d627		60		rts		                rts
.d628						dodefer:
.d628		68		pla		                pla             ; LSB
.d629		85 25		sta $25		                sta tmp1
.d62b		68		pla		                pla             ; MSB
.d62c		85 26		sta $26		                sta tmp1+1
.d62e		a0 01		ldy #$01	                ldy #1
.d630		b1 25		lda ($25),y	                lda (tmp1),y
.d632		85 27		sta $27		                sta tmp2
.d634		c8		iny		                iny
.d635		b1 25		lda ($25),y	                lda (tmp1),y
.d637		85 28		sta $28		                sta tmp2+1
.d639		6c 27 00	jmp ($0027)	                jmp (tmp2)      ; This is actually a jump to the new target
.d63c						defer_error:
.d63c		a9 03		lda #$03	                lda #err_defer
.d63e		4c c2 d7	jmp $d7c2	                jmp error
.d641						dodoes:
.d641		7a		ply		                ply             ; LSB
.d642		68		pla		                pla             ; MSB
.d643		c8		iny		                iny
.d644		d0 01		bne $d647	                bne +
.d646		1a		inc a		                ina
.d647						+
.d647		84 27		sty $27		                sty tmp2
.d649		85 28		sta $28		                sta tmp2+1
.d64b		ca		dex		                dex
.d64c		ca		dex		                dex
.d64d		7a		ply		                ply
.d64e		68		pla		                pla
.d64f		c8		iny		                iny
.d650		d0 01		bne $d653	                bne +
.d652		1a		inc a		                ina
.d653						+
.d653		94 00		sty $00,x	                sty 0,x         ; LSB
.d655		95 01		sta $01,x	                sta 1,x         ; MSB
.d657		6c 27 00	jmp ($0027)	                jmp (tmp2)
.d65a						dovar:
.d65a		7a		ply		                ply             ; LSB
.d65b		68		pla		                pla             ; MSB
.d65c		c8		iny		                iny
.d65d		d0 01		bne $d660	                bne +
.d65f		1a		inc a		                ina
.d660						+
.d660		ca		dex		                dex
.d661		ca		dex		                dex
.d662		95 01		sta $01,x	                sta 1,x
.d664		98		tya		                tya
.d665		95 00		sta $00,x	                sta 0,x
.d667		60		rts		                rts
.d668						push_upvar_tos:
.d668		ca		dex		                dex
.d669		ca		dex		                dex
.d66a		18		clc		                clc
.d66b		65 08		adc $08		                adc up
.d66d		95 00		sta $00,x	                sta 0,x
.d66f		a5 09		lda $09		                lda up+1
.d671		90 01		bcc $d674	                bcc +
.d673		1a		inc a		                ina
.d674						+
.d674		95 01		sta $01,x	                sta 1,x
.d676		60		rts		                rts
.d677						byte_to_ascii:
.d677		48		pha		                pha
.d678		4a		lsr a		                lsr             ; convert high nibble first
.d679		4a		lsr a		                lsr
.d67a		4a		lsr a		                lsr
.d67b		4a		lsr a		                lsr
.d67c		20 80 d6	jsr $d680	                jsr _nibble_to_ascii
.d67f		68		pla		                pla
.d680						_nibble_to_ascii:
.d680		29 0f		and #$0f	                and #$F
.d682		09 30		ora #$30	                ora #'0'
.d684		c9 3a		cmp #$3a	                cmp #'9'+1
.d686		90 02		bcc $d68a	                bcc +
.d688		69 06		adc #$06	                adc #6
.d68a		4c c5 86	jmp $86c5	+               jmp emit_a
.d68d		60		rts		                rts
.d68e						find_header_name:
.d68e		b5 02		lda $02,x	                lda 2,x                 ; Copy mystery string to tmp2
.d690		85 27		sta $27		                sta tmp2
.d692		b5 03		lda $03,x	                lda 3,x
.d694		85 28		sta $28		                sta tmp2+1
.d696						_loop:
.d696		b2 25		lda ($25)	                lda (tmp1)
.d698		d5 00		cmp $00,x	                cmp 0,x
.d69a		d0 3a		bne $d6d6	                bne _next_entry
.d69c		b2 27		lda ($27)	                lda (tmp2)      ; first character of mystery string
.d69e		a0 08		ldy #$08	                ldy #8
.d6a0		51 25		eor ($25),y	                eor (tmp1),y    ; flag any mismatched bits
.d6a2		29 df		and #$df	                and #%11011111  ; but ignore upper/lower case bit
.d6a4		d0 30		bne $d6d6	                bne _next_entry ; definitely not equal if any bits differ
.d6a6		a5 25		lda $25		                lda tmp1
.d6a8		48		pha		                pha             ; Save original address on the stack
.d6a9		18		clc		                clc
.d6aa		69 08		adc #$08	                adc #8
.d6ac		85 25		sta $25		                sta tmp1
.d6ae		a5 26		lda $26		                lda tmp1+1
.d6b0		48		pha		                pha
.d6b1		90 03		bcc $d6b6	                bcc +
.d6b3		1a		inc a		                ina
.d6b4		85 26		sta $26		                sta tmp1+1
.d6b6						+
.d6b6		b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.d6b8		88		dey		                dey
.d6b9						_next_char:
.d6b9		b1 27		lda ($27),y	                lda (tmp2),y    ; last char of mystery string
.d6bb		c9 5b		cmp #$5b	                cmp #'Z'+1
.d6bd		b0 06		bcs $d6c5	                bcs _check_char
.d6bf		c9 41		cmp #$41	                cmp #'A'
.d6c1		90 02		bcc $d6c5	                bcc _check_char
.d6c3		09 20		ora #$20	                ora #$20
.d6c5						_check_char:
.d6c5		d1 25		cmp ($25),y	                cmp (tmp1),y    ; last char of word we're testing against
.d6c7		d0 03		bne $d6cc	                bne _reset_tmp1
.d6c9		88		dey		                dey
.d6ca		10 ed		bpl $d6b9	                bpl _next_char
.d6cc						_reset_tmp1:
.d6cc		68		pla		                pla
.d6cd		85 26		sta $26		                sta tmp1+1
.d6cf		68		pla		                pla
.d6d0		85 25		sta $25		                sta tmp1
.d6d2		98		tya		                tya             ; leave A = $FF on success
.d6d3		c8		iny		                iny             ; if Y was $FF, we succeeded
.d6d4		f0 11		beq $d6e7	                beq _done
.d6d6						_next_entry:
.d6d6		a0 02		ldy #$02	                ldy #2
.d6d8		b1 25		lda ($25),y	                lda (tmp1),y
.d6da		48		pha		                pha
.d6db		c8		iny		                iny
.d6dc		b1 25		lda ($25),y	                lda (tmp1),y
.d6de		85 26		sta $26		                sta tmp1+1
.d6e0		68		pla		                pla
.d6e1		85 25		sta $25		                sta tmp1
.d6e3		05 26		ora $26		                ora tmp1+1
.d6e5		d0 af		bne $d696	                bne _loop
.d6e7		c9 00		cmp #$00	_done:          cmp #0      ; A is 0 on failure and $FF on success
.d6e9		60		rts		                rts         ; so cmp #0 sets Z on failure and clears on success
.d6ea						compare_16bit:
.d6ea		b5 00		lda $00,x	                lda 0,x                 ; LSB of TOS
.d6ec		d5 02		cmp $02,x	                cmp 2,x                 ; LSB of NOS
.d6ee		f0 08		beq $d6f8	                beq _equal
.d6f0		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d6f2		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d6f4		70 08		bvs $d6fe	                bvs _overflow
.d6f6		80 08		bra $d700	                bra _not_equal
.d6f8						_equal:
.d6f8		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d6fa		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d6fc		50 04		bvc $d702	                bvc _done
.d6fe						_overflow:
.d6fe		49 80		eor #$80	                eor #$80                ; complement negative flag
.d700						_not_equal:
.d700		09 01		ora #$01	                ora #1                  ; set Z=0 since we're not equal
.d702						_done:
.d702		60		rts		                rts
.d703						current_to_dp:
.d703		a0 08		ldy #$08	                ldy #current_offset
.d705		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d707		0a		asl a		                asl             ; turn it into an offset (in cells)
.d708		18		clc		                clc
.d709		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d70b		a8		tay		                tay
.d70c		b1 08		lda ($08),y	                lda (up),y              ; get the dp for that wordlist.
.d70e		85 02		sta $02		                sta dp
.d710		c8		iny		                iny
.d711		b1 08		lda ($08),y	                lda (up),y
.d713		85 03		sta $03		                sta dp+1
.d715		60		rts		                rts
.d716						dp_to_current:
.d716		a0 08		ldy #$08	                ldy #current_offset
.d718		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d71a		0a		asl a		                asl             ; turn it into an offset (in cells)
.d71b		18		clc		                clc
.d71c		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d71e		a8		tay		                tay
.d71f		a5 02		lda $02		                lda dp
.d721		91 08		sta ($08),y	                sta (up),y              ; get the dp for that wordlist.
.d723		c8		iny		                iny
.d724		a5 03		lda $03		                lda dp+1
.d726		91 08		sta ($08),y	                sta (up),y
.d728		60		rts		                rts
.d729						interpret:
.d729						_loop:
.d729		20 51 8d	jsr $8d51	                jsr xt_parse_name       ; ( "string" -- addr u )
.d72c		b5 00		lda $00,x	                lda 0,x
.d72e		15 01		ora $01,x	                ora 1,x
.d730		f0 5b		beq $d78d	                beq _line_done
.d732		20 c7 93	jsr $93c7	                jsr xt_two_dup          ; ( addr u -- addr u addr u )
.d735		20 12 9b	jsr $9b12	                jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
.d738		b5 00		lda $00,x	                lda 0,x
.d73a		15 01		ora $01,x	                ora 1,x
.d73c		d0 19		bne $d757	                bne _got_name_token
.d73e		e8		inx		                inx                     ; ( addr u 0 -- addr u )
.d73f		e8		inx		                inx
.d740		20 b3 9c	jsr $9cb3	                jsr xt_number           ; ( addr u -- u|d )
.d743		a5 1a		lda $1a		                lda state
.d745		f0 e2		beq $d729	                beq _loop
.d747		a9 20		lda #$20	                lda #%00100000
.d749		24 1c		bit $1c		                bit status
.d74b		d0 05		bne $d752	                bne _double_number
.d74d		20 f2 89	jsr $89f2	                jsr xt_literal
.d750		80 d7		bra $d729	                bra _loop
.d752						_double_number:
.d752		20 0b 9f	jsr $9f0b	                jsr xt_two_literal
.d755		80 d2		bra $d729	                bra _loop
.d757						_got_name_token:
.d757		b5 00		lda $00,x	                lda 0,x
.d759		95 04		sta $04,x	                sta 4,x
.d75b		b5 01		lda $01,x	                lda 1,x
.d75d		95 05		sta $05,x	                sta 5,x
.d75f		e8		inx		                inx
.d760		e8		inx		                inx
.d761		e8		inx		                inx
.d762		e8		inx		                inx                     ; ( nt )
.d763		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.d766		a1 00		lda ($00,x)	                lda (0,x)
.d768		48		pha		                pha
.d769		20 dd 8c	jsr $8cdd	                jsr xt_one_minus
.d76c		20 50 9c	jsr $9c50	                jsr xt_name_to_int      ; ( nt - xt )
.d76f		a5 1a		lda $1a		                lda state
.d771		d0 10		bne $d783	                bne _compile
.d773		68		pla		                pla
.d774		29 01		and #$01	                and #CO                 ; mask everything but Compile Only bit
.d776		f0 05		beq $d77d	                beq _interpret
.d778		a9 02		lda #$02	                lda #err_compileonly
.d77a		4c c2 d7	jmp $d7c2	                jmp error
.d77d						_interpret:
.d77d		20 05 88	jsr $8805	                jsr xt_execute
.d780		4c 29 d7	jmp $d729	                jmp _loop
.d783						_compile:
.d783		68		pla		                pla
.d784		29 04		and #$04	                and #IM                 ; Mask all but IM bit
.d786		d0 f5		bne $d77d	                bne _interpret          ; IMMEDIATE word, execute right now
.d788		20 d4 96	jsr $96d4	                jsr xt_compile_comma
.d78b		80 9c		bra $d729	                bra _loop
.d78d						_line_done:
.d78d		e8		inx		                inx
.d78e		e8		inx		                inx
.d78f		e8		inx		                inx
.d790		e8		inx		                inx
.d791		60		rts		                rts
.d792						is_printable:
.d792		c9 20		cmp #$20	                cmp #AscSP              ; $20
.d794		90 08		bcc $d79e	                bcc _done
.d796		c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.d798		b0 03		bcs $d79d	                bcs _failed
.d79a		38		sec		                sec
.d79b		80 01		bra $d79e	                bra _done
.d79d						_failed:
.d79d		18		clc		                clc
.d79e						_done:
.d79e		60		rts		                rts
.d79f						is_whitespace:
.d79f		c9 00		cmp #$00	                cmp #00         ; explicit comparison to leave Y untouched
.d7a1		90 08		bcc $d7ab	                bcc _done
.d7a3		c9 21		cmp #$21	                cmp #AscSP+1
.d7a5		b0 03		bcs $d7aa	                bcs _failed
.d7a7		38		sec		                sec
.d7a8		80 01		bra $d7ab	                bra _done
.d7aa						_failed:
.d7aa		18		clc		                clc
.d7ab						_done:
.d7ab		60		rts		                rts
.d7ac						underflow_1:
.d7ac		e0 77		cpx #$77	                cpx #dsp0-1
.d7ae		10 10		bpl $d7c0	                bpl underflow_error
.d7b0		60		rts		                rts
.d7b1						underflow_2:
.d7b1		e0 75		cpx #$75	                cpx #dsp0-3
.d7b3		10 0b		bpl $d7c0	                bpl underflow_error
.d7b5		60		rts		                rts
.d7b6						underflow_3:
.d7b6		e0 73		cpx #$73	                cpx #dsp0-5
.d7b8		10 06		bpl $d7c0	                bpl underflow_error
.d7ba		60		rts		                rts
.d7bb						underflow_4:
.d7bb		e0 71		cpx #$71	                cpx #dsp0-7
.d7bd		10 01		bpl $d7c0	                bpl underflow_error
.d7bf		60		rts		                rts
.d7c0						underflow_error:
.d7c0		a9 09		lda #$09	                lda #err_underflow      ; fall through to error
.d7c2						error:
.d7c2		48		pha		                pha                     ; save error
.d7c3		20 02 d8	jsr $d802	                jsr print_error
.d7c6		20 3a 84	jsr $843a	                jsr xt_cr
.d7c9		68		pla		                pla
.d7ca		c9 09		cmp #$09	                cmp #err_underflow      ; should we display return stack?
.d7cc		d0 17		bne $d7e5	                bne _no_underflow
.d7ce		a9 0d		lda #$0d	                lda #err_returnstack
.d7d0		20 02 d8	jsr $d802	                jsr print_error
.d7d3		ba		tsx		                tsx
.d7d4						-
.d7d4		e8		inx		                inx
.d7d5		f0 0b		beq $d7e2	                beq +
.d7d7		20 c5 91	jsr $91c5	                jsr xt_space
.d7da		bd 00 01	lda $0100,x	                lda $100,x
.d7dd		20 77 d6	jsr $d677	                jsr byte_to_ascii
.d7e0		80 f2		bra $d7d4	                bra -
.d7e2						+
.d7e2		20 3a 84	jsr $843a	                jsr xt_cr
.d7e5						_no_underflow:
.d7e5		4c 5e 80	jmp $805e	                jmp xt_abort            ; no jsr, as we clobber return stack
.d7e8						print_string_no_lf:
.d7e8		0a		asl a		                asl
.d7e9		a8		tay		                tay
.d7ea		b9 f7 d2	lda $d2f7,y	                lda string_table,y
.d7ed		85 29		sta $29		                sta tmp3                ; LSB
.d7ef		c8		iny		                iny
.d7f0		b9 f7 d2	lda $d2f7,y	                lda string_table,y
.d7f3		85 2a		sta $2a		                sta tmp3+1              ; MSB
.d7f5						print_common:
.d7f5		a0 00		ldy #$00	                ldy #0
.d7f7						_loop:
.d7f7		b1 29		lda ($29),y	                lda (tmp3),y
.d7f9		f0 06		beq $d801	                beq _done               ; strings are zero-terminated
.d7fb		20 c5 86	jsr $86c5	                jsr emit_a              ; allows vectoring via output
.d7fe		c8		iny		                iny
.d7ff		80 f6		bra $d7f7	                bra _loop
.d801						_done:
.d801		60		rts		                rts
.d802						print_error:
.d802		0a		asl a		                asl
.d803		a8		tay		                tay
.d804		b9 dc d3	lda $d3dc,y	                lda error_table,y
.d807		85 29		sta $29		                sta tmp3                ; LSB
.d809		c8		iny		                iny
.d80a		b9 dc d3	lda $d3dc,y	                lda error_table,y
.d80d		85 2a		sta $2a		                sta tmp3+1              ; MSB
.d80f		20 f5 d7	jsr $d7f5	                jsr print_common
.d812		60		rts		                rts
.d813						print_string:
.d813		20 e8 d7	jsr $d7e8	                jsr print_string_no_lf
.d816		4c 3a 84	jmp $843a	                jmp xt_cr               ; JSR/RTS because never compiled
.d819						print_u:
.d819		20 13 9e	jsr $9e13	                jsr xt_zero                     ; 0
.d81c		20 cf 89	jsr $89cf	                jsr xt_less_number_sign         ; <#
.d81f		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s            ; #S
.d822		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater      ; #>
.d825		4c d1 94	jmp $94d1	                jmp xt_type                     ; JSR/RTS because never compiled

;******  Return to file: platform/platform-py65mon.asm


;******  Processing file: platform/simulator.asm

=$f000						io_start = $f000
>f000						                .byte ?
>f001						io_putc:        .byte ?     ; $f001     write byte to stdout
>f002						                .word ?
>f004						io_getc:        .byte ?     ; $f004     read byte from stdin
>f005						io_peekc:       .byte ?     ; $f005     non-blocking input
>f006						io_clk_start:   .byte ?     ; $f006     *read* to start cycle counter
>f007						io_clk_stop:    .byte ?     ; $f007     *read* to stop the cycle counter
>f008						io_clk_cycles:  .word ?,?   ; $f008-b   32-bit cycle count in NUXI order
>f00c						                .word ?,?
>f010						io_blk_action:  .byte ?     ; $f010     Write to act (status=0 read=1 write=2)
>f011						io_blk_status:  .byte ?     ; $f011     Read action result (OK=0)
>f012						io_blk_number:  .word ?     ; $f012     Little endian block number 0-ffff
>f014						io_blk_buffer:  .word ?     ; $f014     Little endian memory address
.f016						io_end:
.f016						kernel_init:
.f016		78		sei		                sei             ; Disable interrupts
.f017		a2 00		ldx #$00	                ldx #0
.f019		bd 32 f0	lda $f032,x	-               lda s_kernel_id,x
.f01c		f0 06		beq $f024	                beq _done
.f01e		20 2d f0	jsr $f02d	                jsr kernel_putc
.f021		e8		inx		                inx
.f022		80 f5		bra $f019	                bra -
.f024						_done:
.f024		4c 00 80	jmp $8000	                jmp forth
.f027						kernel_getc:
.f027						_loop:
.f027		ad 04 f0	lda $f004	                lda io_getc
.f02a		f0 fb		beq $f027	                beq _loop
.f02c		60		rts		                rts
.f02d						kernel_putc:
.f02d		8d 01 f0	sta $f001	                sta io_putc
.f030		60		rts		                rts
.f031						kernel_bye:
.f031		00		brk #		                brk

;******  Return to file: platform/platform-py65mon.asm

.f032						s_kernel_id:
>f032		54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 default kernel for py65mon (04. Dec 2022)", AscLF, 0
>f03a		74 68 20 32 20 64 65 66 61 75 6c 74 20 6b 65 72
>f04a		6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f 6e 20
>f05a		28 30 34 2e 20 44 65 63 20 32 30 32 32 29 0a 00
>fffa		16 f0				v_nmi   .word kernel_init
>fffc		16 f0				v_reset .word kernel_init
>fffe		16 f0				v_irq   .word kernel_init

;******  End of listing
