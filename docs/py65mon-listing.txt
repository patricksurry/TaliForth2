
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output taliforth-py65mon.bin platform/platform-py65mon.asm
; Tue Jun  4 16:33:53 2024

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0000						ram_start = $0000          ; start of installed 32 KiB of RAM
=32767						ram_end   = $8000-1        ; end of installed RAM
=$0000						zpage     = ram_start      ; begin of Zero Page ($0000-$00ff)
=$7f						zpage_end = $7F            ; end of Zero Page used ($0000-$007f)
=$0100						stack0    = $0100          ; begin of Return Stack ($0100-$01ff)
=31744						hist_buff = ram_end-$03ff  ; begin of history buffers
=$0000						user0     = zpage            ; TaliForth2 system variables
=$ff						rsp0      = $ff              ; initial Return Stack Pointer (65c02 stack)
=$ff						bsize     = $ff              ; size of input/output buffers
=512						buffer0   = stack0+$100      ; input buffer ($0200-$027f)
=768						cp0       = buffer0+bsize+1  ; Dictionary starts after last buffer
=31744						cp_end    = hist_buff        ; Last RAM byte available for code
=$ff						padoffset = $ff              ; offset from CP to PAD (holds number strings)
=						TALI_OPTIONAL_WORDS := [ "ed", "editor", "ramdrive", "block", "environment?", "assembler", "disassembler", "wordlist" ]
=["lf"]						TALI_OPTION_CR_EOL := [ "lf" ]
=1						TALI_OPTION_HISTORY := 1
=0						TALI_OPTION_TERSE := 0

;******  Processing file: platform/../taliforth.asm

.8000						code0:
.8000						forth:

;******  Processing file: platform/../words/all.asm

.8000						xt_cold:
.8000		d8		cld		                cld
.8001		a9 2d		lda #$2d	                lda #<kernel_putc
.8003		85 12		sta $12		                sta output
.8005		a9 f0		lda #$f0	                lda #>kernel_putc
.8007		85 13		sta $13		                sta output+1
.8009		a2 1d		ldx #$1d	                ldx #cold_zp_table_end-cold_zp_table-1
.800b						_load_zp_loop:
.800b		bd 59 b3	lda $b359,x	                lda cold_zp_table,x
.800e		95 00		sta $00,x	                sta zpage,x
.8010		ca		dex		                dex
.8011		d0 f8		bne $800b	                bne _load_zp_loop
.8013		ad 59 b3	lda $b359	                lda cold_zp_table
.8016		85 00		sta $00		                sta zpage
.8018		a2 ff		ldx #$ff	                ldx #rsp0
.801a		9a		txs		                txs
.801b		a2 78		ldx #$78	                ldx #dsp0
.801d		a0 35		ldy #$35	                ldy #cold_user_table_end-cold_user_table-1
.801f						_load_user_vars_loop:
.801f		b9 77 b3	lda $b377,y	                lda cold_user_table,y
.8022		91 08		sta ($08),y	                sta (up),y
.8024		88		dey		                dey
.8025		d0 f8		bne $801f	                bne _load_user_vars_loop
.8027		ad 77 b3	lda $b377	                lda cold_user_table
.802a		92 08		sta ($08)	                sta (up)
.802c		20 3a 84	jsr $843a	                jsr xt_cr
.802f		ca		dex		                dex
.8030		ca		dex		                dex
.8031		ca		dex		                dex
.8032		ca		dex		                dex
.8033		a9 5a		lda #$5a	                lda #<forth_words_start
.8035		95 02		sta $02,x	                sta 2,x
.8037		a9 ba		lda #$ba	                lda #>forth_words_start
.8039		95 03		sta $03,x	                sta 3,x
.803b		a9 e2		lda #$e2	                lda #<(user_words_end-forth_words_start)
.803d		95 00		sta $00,x	                sta 0,x
.803f		a9 00		lda #$00	                lda #>(user_words_end-forth_words_start)
.8041		95 01		sta $01,x	                sta 1,x
.8043		20 b2 88	jsr $88b2	                jsr xt_evaluate
.8046		9c 00 7c	stz $7c00	                stz hist_buff
.8049		9c 80 7c	stz $7c80	                stz hist_buff+$80
.804c		9c 00 7d	stz $7d00	                stz hist_buff+$100
.804f		9c 80 7d	stz $7d80	                stz hist_buff+$180
.8052		9c 00 7e	stz $7e00	                stz hist_buff+$200
.8055		9c 80 7e	stz $7e80	                stz hist_buff+$280
.8058		9c 00 7f	stz $7f00	                stz hist_buff+$300
.805b		9c 80 7f	stz $7f80	                stz hist_buff+$380
.805e						xt_abort:
.805e		a2 78		ldx #$78	                ldx #dsp0
.8060						xt_quit:
.8060		8a		txa		                txa             ; Save the DSP that we just defined
.8061		a2 ff		ldx #$ff	                ldx #rsp0
.8063		9a		txs		                txs
.8064		aa		tax		                tax             ; Restore the DSP. Dude, seriously.
.8065		64 04		stz $04		                stz ip
.8067		64 05		stz $05		                stz ip+1
.8069		64 0a		stz $0a		                stz insrc
.806b		64 0b		stz $0b		                stz insrc+1
.806d		a9 00		lda #$00	                lda #0
.806f		a0 04		ldy #$04	                ldy #blk_offset
.8071		91 08		sta ($08),y	                sta (up),y
.8073		c8		iny		                iny
.8074		91 08		sta ($08),y	                sta (up),y
.8076		a9 fc		lda #$fc	                lda #(256-4)
.8078		85 1f		sta $1f		                sta loopctrl
.807a		64 1a		stz $1a		                stz state
.807c		64 1b		stz $1b		                stz state+1
.807e						_get_line:
.807e		a9 00		lda #$00	                lda #<buffer0   ; input buffer, this is paranoid
.8080		85 0c		sta $0c		                sta cib
.8082		a9 02		lda #$02	                lda #>buffer0
.8084		85 0d		sta $0d		                sta cib+1
.8086		64 0e		stz $0e		                stz ciblen
.8088		64 0f		stz $0f		                stz ciblen+1
.808a		20 3c 8f	jsr $8f3c	                jsr xt_refill           ; ( -- f )
.808d		b5 00		lda $00,x	                lda 0,x
.808f		d0 05		bne $8096	                bne _success
.8091		a9 06		lda #$06	                lda #err_refill
.8093		4c a0 d7	jmp $d7a0	                jmp error
.8096						_success:
.8096		e8		inx		                inx                     ; drop
.8097		e8		inx		                inx
.8098		20 07 d7	jsr $d707	                jsr interpret
.809b		e0 78		cpx #$78	                cpx #dsp0
.809d		f0 05		beq $80a4	                beq _stack_ok
.809f		90 03		bcc $80a4	                bcc _stack_ok           ; DSP must always be smaller than DSP0
.80a1		4c 9e d7	jmp $d79e	                jmp underflow_error
.80a4						_stack_ok:
.80a4		a5 1a		lda $1a		                lda state
.80a6		f0 02		beq $80aa	                beq _print
.80a8		a9 01		lda #$01	                lda #1                  ; number for "compile" string
.80aa						_print:
.80aa		20 f1 d7	jsr $d7f1	                jsr print_string
.80ad		80 cf		bra $807e	                bra _get_line
.80af						z_cold:
.80af						z_abort:
.80af						z_quit:

;******  Processing file: platform/../words/core.asm

.80af						xt_abort_quote:
.80af		20 d4 8f	jsr $8fd4	                jsr xt_s_quote          ; S"
.80b2		a0 80		ldy #$80	                ldy #>abort_quote_runtime
.80b4		a9 ba		lda #$ba	                lda #<abort_quote_runtime
.80b6		20 7a 97	jsr $977a	                jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
.80b9		60		rts		z_abort_quote:  rts
.80ba						abort_quote_runtime:
.80ba		b5 04		lda $04,x	                lda 4,x
.80bc		15 05		ora $05,x	                ora 5,x
.80be		f0 09		beq $80c9	                beq _done       ; if FALSE, we're done
.80c0		20 af 94	jsr $94af	                jsr xt_type
.80c3		20 3a 84	jsr $843a	                jsr xt_cr
.80c6		4c 5e 80	jmp $805e	                jmp xt_abort    ; not JSR, so never come back
.80c9						_done:
.80c9		8a		txa		                txa
.80ca		18		clc		                clc
.80cb		69 06		adc #$06	                adc #6
.80cd		aa		tax		                tax
.80ce		60		rts		                rts
.80cf						xt_abs:
.80cf		20 8a d7	jsr $d78a	                jsr underflow_1
.80d2		b5 01		lda $01,x	                lda 1,x
.80d4		10 0d		bpl $80e3	                bpl _done       ; positive number, easy money!
.80d6		38		sec		                sec
.80d7		a9 00		lda #$00	                lda #0
.80d9		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.80db		95 00		sta $00,x	                sta 0,x
.80dd		a9 00		lda #$00	                lda #0          ; MSB
.80df		f5 01		sbc $01,x	                sbc 1,x
.80e1		95 01		sta $01,x	                sta 1,x
.80e3						_done:
.80e3		60		rts		z_abs:          rts
.80e4						xt_accept:
.80e4		20 8f d7	jsr $d78f	                jsr underflow_2
.80e7		b5 00		lda $00,x	                lda 0,x
.80e9		15 01		ora $01,x	                ora 1,x
.80eb		d0 09		bne $80f6	                bne _not_zero
.80ed		e8		inx		                inx
.80ee		e8		inx		                inx
.80ef		74 00		stz $00,x	                stz 0,x
.80f1		74 01		stz $01,x	                stz 1,x
.80f3		4c c2 81	jmp $81c2	                jmp accept_done
.80f6						_not_zero:
.80f6		b5 00		lda $00,x	                lda 0,x         ; number of chars to get in tmp2 ...
.80f8		85 27		sta $27		                sta tmp2
.80fa		64 28		stz $28		                stz tmp2+1      ; ... but we only accept max 255 chars
.80fc		b5 02		lda $02,x	                lda 2,x         ; address of buffer is NOS, to tmp1
.80fe		85 25		sta $25		                sta tmp1
.8100		b5 03		lda $03,x	                lda 3,x
.8102		85 26		sta $26		                sta tmp1+1
.8104		e8		inx		                inx
.8105		e8		inx		                inx
.8106		a0 00		ldy #$00	                ldy #0
.8108		a5 1c		lda $1c		                lda status
.810a		29 f7		and #$f7	                and #$F7
.810c		1a		inc a		                ina
.810d		09 08		ora #$08	                ora #%00001000
.810f		85 1c		sta $1c		                sta status
.8111						accept_loop:
.8111		20 b1 89	jsr $89b1	                jsr key_a
.8114		c9 0a		cmp #$0a	                cmp #AscLF
.8116		f0 20		beq $8138	                beq _eol
.8118		c9 0d		cmp #$0d	                cmp #AscCR
.811a		f0 1c		beq $8138	                beq _eol
.811c		c9 08		cmp #$08	                cmp #AscBS
.811e		f0 22		beq $8142	                beq _backspace
.8120		c9 7f		cmp #$7f	                cmp #AscDEL     ; (CTRL-h)
.8122		f0 1e		beq $8142	                beq _backspace
.8124		c9 10		cmp #$10	                cmp #AscCP
.8126		f0 36		beq $815e	                beq _ctrl_p
.8128		c9 0e		cmp #$0e	                cmp #AscCN
.812a		f0 44		beq $8170	                beq _ctrl_n
.812c		91 25		sta ($25),y	                sta (tmp1),y
.812e		c8		iny		                iny
.812f		20 c5 86	jsr $86c5	                jsr emit_a
.8132		c4 27		cpy $27		                cpy tmp2        ; reached character limit?
.8134		d0 db		bne $8111	                bne accept_loop       ; fall through if buffer limit reached
.8136		80 03		bra $813b	                bra _buffer_full
.8138						_eol:
.8138		20 c5 91	jsr $91c5	                jsr xt_space    ; print final space
.813b						_buffer_full:
.813b		94 00		sty $00,x	                sty 0,x         ; Y contains number of chars accepted already
.813d		74 01		stz $01,x	                stz 1,x         ; we only accept 256 chars
.813f		4c c2 81	jmp $81c2	                jmp accept_done
.8142						_backspace:
.8142		c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8144		d0 06		bne $814c	                bne +
.8146		a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.8148		20 c5 86	jsr $86c5	                jsr emit_a
.814b		c8		iny		                iny
.814c						+
.814c		88		dey		                dey
.814d		a9 08		lda #$08	                lda #AscBS      ; move back one
.814f		20 c5 86	jsr $86c5	                jsr emit_a
.8152		a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.8154		20 c5 86	jsr $86c5	                jsr emit_a
.8157		a9 08		lda #$08	                lda #AscBS      ; move back over space
.8159		20 c5 86	jsr $86c5	                jsr emit_a
.815c		80 b3		bra $8111	                bra accept_loop
.815e						_ctrl_p:
.815e		a5 1c		lda $1c		                lda status
.8160		29 07		and #$07	                and #7
.8162		d0 08		bne $816c	                bne _ctrl_p_dec
.8164		a5 1c		lda $1c		                lda status
.8166		09 07		ora #$07	                ora #7
.8168		85 1c		sta $1c		                sta status
.816a		80 11		bra $817d	                bra _recall_history
.816c						_ctrl_p_dec:
.816c		c6 1c		dec $1c		                dec status
.816e		80 0d		bra $817d	                bra _recall_history
.8170						_ctrl_n:
.8170		a9 08		lda #$08	                lda #$8
.8172		24 1c		bit $1c		                bit status
.8174		d0 07		bne $817d	                bne _recall_history
.8176		a5 1c		lda $1c		                lda status
.8178		29 f7		and #$f7	                and #$F7
.817a		1a		inc a		               ina
.817b		85 1c		sta $1c		                sta status
.817d						_recall_history:
.817d		a9 08		lda #$08	                lda #%00001000
.817f		14 1c		trb $1c		                trb status
.8181		20 dd 81	jsr $81dd	                jsr accept_total_recall
.8184		a9 0d		lda #$0d	                lda #AscCR
.8186		20 c5 86	jsr $86c5	                jsr emit_a
.8189						input_clear:
.8189		c0 00		cpy #$00	                cpy #0
.818b		f0 08		beq $8195	                beq input_cleared
.818d		a9 20		lda #$20	                lda #AscSP
.818f		20 c5 86	jsr $86c5	                jsr emit_a
.8192		88		dey		                dey
.8193		80 f4		bra $8189	                bra input_clear
.8195						input_cleared:
.8195		a9 0d		lda #$0d	                lda #AscCR
.8197		20 c5 86	jsr $86c5	                jsr emit_a
.819a		b1 29		lda ($29),y	                lda (tmp3),y
.819c		85 1d		sta $1d		                sta status+1
.819e		e6 29		inc $29		                inc tmp3
.81a0		d0 02		bne $81a4	                bne +           ; Increment the upper byte on carry.
.81a2		e6 2a		inc $2a		                inc tmp3+1
.81a4						+
.81a4		a9 0d		lda #$0d	                lda #AscCR
.81a6		20 c5 86	jsr $86c5	                jsr emit_a
.81a9						_history_loop:
.81a9		c4 1d		cpy $1d		                cpy status+1
.81ab		d0 03		bne $81b0	                bne +
.81ad		4c 11 81	jmp $8111	                jmp accept_loop       ; Needs a long jump
.81b0						+
.81b0		c4 27		cpy $27		                cpy tmp2
.81b2		f0 0a		beq $81be	                beq _hist_filled_buffer
.81b4		b1 29		lda ($29),y	                lda (tmp3),y
.81b6		91 25		sta ($25),y	                sta (tmp1),y
.81b8		20 c5 86	jsr $86c5	                jsr emit_a
.81bb		c8		iny		                iny
.81bc		80 eb		bra $81a9	                bra _history_loop
.81be						_hist_filled_buffer:
.81be		88		dey		                dey
.81bf		4c 11 81	jmp $8111	                jmp accept_loop
.81c2						accept_done:
.81c2		20 dd 81	jsr $81dd	                jsr accept_total_recall
.81c5		85 1d		sta $1d		                sta status+1
.81c7		a0 00		ldy #$00	                ldy #0
.81c9		91 29		sta ($29),y	                sta (tmp3),y
.81cb		e6 29		inc $29		                inc tmp3
.81cd		d0 02		bne $81d1	                bne +           ; Increment the upper byte on carry.
.81cf		e6 2a		inc $2a		                inc tmp3+1
.81d1						+
.81d1						_save_history_loop:
.81d1		c4 1d		cpy $1d		                cpy status+1
.81d3		f0 07		beq $81dc	                beq _save_history_done
.81d5		b1 25		lda ($25),y	                lda (tmp1),y
.81d7		91 29		sta ($29),y	                sta (tmp3),y
.81d9		c8		iny		                iny
.81da		80 f5		bra $81d1	                bra _save_history_loop
.81dc						_save_history_done:
.81dc						z_accept:
.81dc		60		rts		                rts
.81dd						accept_total_recall:
.81dd		a9 00		lda #$00	                lda #<hist_buff
.81df		85 29		sta $29		                sta tmp3
.81e1		a9 7c		lda #$7c	                lda #>hist_buff
.81e3		85 2a		sta $2a		                sta tmp3+1
.81e5		a5 1c		lda $1c		                lda status
.81e7		6a		ror a		                ror
.81e8		29 03		and #$03	                and #3
.81ea		18		clc		                clc
.81eb		65 2a		adc $2a		                adc tmp3+1
.81ed		85 2a		sta $2a		                sta tmp3+1
.81ef		a5 1c		lda $1c		                lda status
.81f1		6a		ror a		                ror             ; Rotate through carry into msb.
.81f2		6a		ror a		                ror
.81f3		29 80		and #$80	                and #$80
.81f5		18		clc		                clc
.81f6		65 29		adc $29		                adc tmp3
.81f8		85 29		sta $29		                sta tmp3
.81fa		90 02		bcc $81fe	                bcc +           ; Increment the upper byte on carry.
.81fc		e6 2a		inc $2a		                inc tmp3+1
.81fe						+
.81fe		98		tya		                tya
.81ff		c9 80		cmp #$80	                cmp #$80
.8201		90 02		bcc $8205	                bcc +
.8203		a9 7f		lda #$7f	                lda #$7F
.8205						+
.8205		60		rts		                rts
.8206						xt_action_of:
.8206		a5 1a		lda $1a		                lda state
.8208		05 1b		ora $1b		                ora state+1
.820a		f0 0c		beq $8218	                beq _interpreting
.820c		20 14 83	jsr $8314	                jsr xt_bracket_tick
.820f		a0 85		ldy #$85	                ldy #>xt_defer_fetch
.8211		a9 44		lda #$44	                lda #<xt_defer_fetch
.8213		20 7a 97	jsr $977a	                jsr cmpl_subroutine
.8216		80 06		bra $821e	                bra _done
.8218						_interpreting:
.8218		20 3c 92	jsr $923c	                jsr xt_tick
.821b		20 44 85	jsr $8544	                jsr xt_defer_fetch
.821e						_done:
.821e		60		rts		z_action_of:           rts
.821f						xt_again:
.821f		20 8a d7	jsr $d78a	                jsr underflow_1
.8222		20 93 97	jsr $9793	                jsr cmpl_jump_tos
.8225		60		rts		z_again:        rts
.8226						xt_align:
.8226						xt_aligned:
.8226						z_align:
.8226						z_aligned:
.8226		60		rts		                rts             ; stripped out during native compile
.8227						xt_allot:
.8227		20 8a d7	jsr $d78a	                jsr underflow_1
.822a		b5 01		lda $01,x	                lda 1,x
.822c		30 22		bmi $8250	                bmi _release
.822e		18		clc		                clc
.822f		a5 00		lda $00		                lda cp
.8231		75 00		adc $00,x	                adc 0,x
.8233		85 00		sta $00		                sta cp
.8235		a5 01		lda $01		                lda cp+1
.8237		75 01		adc $01,x	                adc 1,x
.8239		85 01		sta $01		                sta cp+1
.823b		a0 00		ldy #$00	                ldy #<cp_end
.823d		c4 00		cpy $00		                cpy cp
.823f		a9 7c		lda #$7c	                lda #>cp_end
.8241		e5 01		sbc $01		                sbc cp+1
.8243		b0 48		bcs $828d	                bcs _done               ; we're fine.
.8245		84 00		sty $00		                sty cp                  ; still #<cp_end
.8247		a9 7c		lda #$7c	                lda #>cp_end
.8249		85 01		sta $01		                sta cp+1
.824b		a9 00		lda #$00	                lda #err_allot
.824d		4c a0 d7	jmp $d7a0	                jmp error
.8250						_release:
.8250		ca		dex		                dex
.8251		ca		dex		                dex
.8252		a5 00		lda $00		                lda cp
.8254		95 00		sta $00,x	                sta 0,x
.8256		a5 01		lda $01		                lda cp+1
.8258		95 01		sta $01,x	                sta 1,x
.825a		20 53 8e	jsr $8e53	                jsr xt_plus                     ; new CP is now TOS
.825d		ca		dex		                dex
.825e		ca		dex		                dex                             ; new CP now NOS
.825f		a9 00		lda #$00	                lda #<cp0
.8261		95 00		sta $00,x	                sta 0,x
.8263		a9 03		lda #$03	                lda #>cp0
.8265		95 01		sta $01,x	                sta 1,x                         ; CP0 is TOS
.8267		20 c8 d6	jsr $d6c8	                jsr compare_16bit               ; still ( CP CP0 )
.826a		f0 17		beq $8283	                beq _nega_done
.826c		30 15		bmi $8283	                bmi _nega_done
.826e		a9 00		lda #$00	                lda #<cp0
.8270		85 00		sta $00		                sta cp
.8272		a9 03		lda #$03	                lda #>cp0
.8274		85 01		sta $01		                sta cp+1
.8276		a9 3c		lda #$3c	                lda #<dictionary_start
.8278		85 02		sta $02		                sta dp
.827a		a9 bb		lda #$bb	                lda #>dictionary_start
.827c		85 03		sta $03		                sta dp+1
.827e		a9 0a		lda #$0a	                lda #err_negallot
.8280		4c a0 d7	jmp $d7a0	                jmp error
.8283						_nega_done:
.8283		b5 02		lda $02,x	                lda 2,x
.8285		85 00		sta $00		                sta cp
.8287		b5 03		lda $03,x	                lda 3,x
.8289		85 01		sta $01		                sta cp+1
.828b		e8		inx		                inx
.828c		e8		inx		                inx                     ; drop through to _done
.828d						_done:
.828d		e8		inx		                inx
.828e		e8		inx		                inx
.828f						z_allot:
.828f		60		rts		                rts
.8290						xt_and:
.8290		20 8f d7	jsr $d78f	                jsr underflow_2
.8293		b5 00		lda $00,x	                lda 0,x
.8295		35 02		and $02,x	                and 2,x
.8297		95 02		sta $02,x	                sta 2,x
.8299		b5 01		lda $01,x	                lda 1,x
.829b		35 03		and $03,x	                and 3,x
.829d		95 03		sta $03,x	                sta 3,x
.829f		e8		inx		                inx
.82a0		e8		inx		                inx
.82a1		60		rts		z_and:          rts
.82a2						xt_at_xy:
.82a2		20 8f d7	jsr $d78f	                jsr underflow_2
.82a5		a5 18		lda $18		                lda base
.82a7		48		pha		                pha
.82a8		a9 0a		lda #$0a	                lda #10
.82aa		85 18		sta $18		                sta base
.82ac		a9 1b		lda #$1b	                lda #AscESC
.82ae		20 c5 86	jsr $86c5	                jsr emit_a
.82b1		a9 5b		lda #$5b	                lda #'['
.82b3		20 c5 86	jsr $86c5	                jsr emit_a
.82b6		20 e9 8c	jsr $8ce9	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82b9		20 f7 d7	jsr $d7f7	                jsr print_u
.82bc		a9 3b		lda #$3b	                lda #';'
.82be		20 c5 86	jsr $86c5	                jsr emit_a
.82c1		20 e9 8c	jsr $8ce9	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82c4		20 f7 d7	jsr $d7f7	                jsr print_u
.82c7		a9 48		lda #$48	                lda #'H'
.82c9		20 c5 86	jsr $86c5	                jsr emit_a
.82cc		68		pla		                pla
.82cd		85 18		sta $18		                sta base
.82cf		60		rts		z_at_xy:        rts
.82d0						xt_backslash:
.82d0		a0 04		ldy #$04	                ldy #blk_offset
.82d2		b1 08		lda ($08),y	                lda (up),y
.82d4		c8		iny		                iny
.82d5		11 08		ora ($08),y	                ora (up),y
.82d7		f0 19		beq $82f2	                beq backslash_not_block
.82d9		a5 10		lda $10		                lda toin
.82db		29 3f		and #$3f	                and #$3F
.82dd		f0 1b		beq $82fa	                beq z_backslash
.82df		c9 01		cmp #$01	                cmp #$1
.82e1		f0 17		beq $82fa	                beq z_backslash
.82e3		a5 10		lda $10		                lda toin
.82e5		29 c0		and #$c0	                and #$C0        ; Clear lower bits to move to beginning of line.
.82e7		18		clc		                clc             ; Add $40 (64 decimal) to move to next line.
.82e8		69 40		adc #$40	                adc #$40
.82ea		85 10		sta $10		                sta toin
.82ec		90 0c		bcc $82fa	                bcc z_backslash
.82ee		e6 11		inc $11		                inc toin+1
.82f0		80 08		bra $82fa	                bra z_backslash
.82f2						backslash_not_block:
.82f2		a5 0e		lda $0e		                lda ciblen
.82f4		85 10		sta $10		                sta toin
.82f6		a5 0f		lda $0f		                lda ciblen+1
.82f8		85 11		sta $11		                sta toin+1
.82fa		60		rts		z_backslash:    rts
.82fb						xt_base:
.82fb		ca		dex		                dex
.82fc		ca		dex		                dex
.82fd		a9 18		lda #$18	                lda #<base
.82ff		95 00		sta $00,x	                sta 0,x         ; LSB
.8301		74 01		stz $01,x	                stz 1,x         ; MSB is always 0
.8303		60		rts		z_base:         rts
.8304						xt_bl:
.8304		ca		dex		                dex
.8305		ca		dex		                dex
.8306		a9 20		lda #$20	                lda #AscSP
.8308		95 00		sta $00,x	                sta 0,x
.830a		74 01		stz $01,x	                stz 1,x
.830c		60		rts		z_bl:           rts
.830d						xt_bracket_char:
.830d		20 53 83	jsr $8353	                jsr xt_char
.8310		20 f2 89	jsr $89f2	                jsr xt_literal
.8313		60		rts		z_bracket_char: rts
.8314						xt_bracket_tick:
.8314		20 3c 92	jsr $923c	                jsr xt_tick
.8317		20 f2 89	jsr $89f2	                jsr xt_literal
.831a		60		rts		z_bracket_tick: rts
.831b						xt_buffer_colon:
.831b		20 40 84	jsr $8440	                jsr xt_create
.831e		20 27 82	jsr $8227	                jsr xt_allot
.8321		60		rts		z_buffer_colon: rts
.8322						xt_c_comma:
.8322		20 8a d7	jsr $d78a	                jsr underflow_1
.8325		b5 00		lda $00,x	                lda 0,x
.8327		20 8a 97	jsr $978a	                jsr cmpl_a
.832a		e8		inx		                inx
.832b		e8		inx		                inx
.832c		60		rts		z_c_comma:      rts
.832d						xt_c_fetch:
.832d		20 8a d7	jsr $d78a	                jsr underflow_1
.8330		a1 00		lda ($00,x)	                lda (0,x)
.8332		95 00		sta $00,x	                sta 0,x
.8334		74 01		stz $01,x	                stz 1,x         ; Ignore LSB
.8336		60		rts		z_c_fetch:      rts
.8337						xt_c_store:
.8337		20 8f d7	jsr $d78f	                jsr underflow_2
.833a		b5 02		lda $02,x	                lda 2,x
.833c		81 00		sta ($00,x)	                sta (0,x)
.833e		e8		inx		                inx
.833f		e8		inx		                inx
.8340		e8		inx		                inx
.8341		e8		inx		                inx
.8342		60		rts		z_c_store:      rts
.8343						xt_cell_plus:
.8343		20 8a d7	jsr $d78a	                jsr underflow_1
.8346		f6 00		inc $00,x	                inc 0,x
.8348		d0 02		bne $834c	                bne +
.834a		f6 01		inc $01,x	                inc 1,x
.834c						+
.834c		f6 00		inc $00,x	                inc 0,x
.834e		d0 02		bne $8352	                bne _done
.8350		f6 01		inc $01,x	                inc 1,x
.8352						_done:
.8352		60		rts		z_cell_plus:    rts
.8353						xt_char:
.8353		20 51 8d	jsr $8d51	                jsr xt_parse_name
.8356		b5 00		lda $00,x	                lda 0,x
.8358		15 01		ora $01,x	                ora 1,x
.835a		d0 05		bne $8361	                bne _not_empty
.835c		a9 05		lda #$05	                lda #err_noname
.835e		4c a0 d7	jmp $d7a0	                jmp error
.8361						_not_empty:
.8361		e8		inx		                inx             ; drop number of characters, leave addr
.8362		e8		inx		                inx
.8363		a1 00		lda ($00,x)	                lda (0,x)       ; get character (equivalent to C@)
.8365		95 00		sta $00,x	                sta 0,x
.8367		74 01		stz $01,x	                stz 1,x         ; MSB is always zero
.8369		60		rts		z_char:         rts
.836a						xt_chars:
.836a		20 8a d7	jsr $d78a	                jsr underflow_1
.836d		60		rts		z_chars:        rts
.836e						xt_colon:
.836e		a5 1a		lda $1a		                lda state
.8370		05 1b		ora $1b		                ora state+1
.8372		f0 05		beq $8379	                beq +
.8374		a9 07		lda #$07	                lda #err_state
.8376		4c a0 d7	jmp $d7a0	                jmp error
.8379						+
.8379		c6 1a		dec $1a		                dec state
.837b		c6 1b		dec $1b		                dec state+1
.837d		a9 40		lda #$40	                lda #%01000000
.837f		04 1c		tsb $1c		                tsb status
.8381		20 e1 d6	jsr $d6e1	                jsr current_to_dp
.8384		a5 03		lda $03		                lda dp+1            ; CREATE uses a lot of variables
.8386		48		pha		                pha
.8387		a5 02		lda $02		                lda dp
.8389		48		pha		                pha
.838a		a9 80		lda #$80	                lda #%10000000
.838c		04 1c		tsb $1c		                tsb status
.838e		20 40 84	jsr $8440	                jsr xt_create
.8391		20 e1 d6	jsr $d6e1	                jsr current_to_dp   ; This might be able to be omitted
.8394		a5 02		lda $02		                lda dp
.8396		85 06		sta $06		                sta workword
.8398		a5 03		lda $03		                lda dp+1
.839a		85 07		sta $07		                sta workword+1
.839c		68		pla		                pla
.839d		85 02		sta $02		                sta dp
.839f		68		pla		                pla
.83a0		85 03		sta $03		                sta dp+1
.83a2		20 f4 d6	jsr $d6f4	                jsr dp_to_current
.83a5		a5 00		lda $00		                lda cp
.83a7		38		sec		                sec
.83a8		e9 03		sbc #$03	                sbc #3
.83aa		85 00		sta $00		                sta cp
.83ac		b0 02		bcs $83b0	                bcs _done
.83ae		c6 01		dec $01		                dec cp+1
.83b0						_done:
.83b0		60		rts		z_colon:        rts
.83b1						xt_colon_noname:
.83b1		a5 1a		lda $1a		                lda state
.83b3		05 1b		ora $1b		                ora state+1
.83b5		f0 05		beq $83bc	                beq +
.83b7		a9 07		lda #$07	                lda #err_state
.83b9		4c a0 d7	jmp $d7a0	                jmp error
.83bc						+
.83bc		c6 1a		dec $1a		                dec state
.83be		c6 1b		dec $1b		                dec state+1
.83c0		a9 40		lda #$40	                lda #%01000000
.83c2		14 1c		trb $1c		                trb status
.83c4		a5 00		lda $00		                lda cp
.83c6		85 06		sta $06		                sta workword
.83c8		a5 01		lda $01		                lda cp+1
.83ca		85 07		sta $07		                sta workword+1
.83cc		60		rts		z_colon_noname:        rts
.83cd						xt_comma:
.83cd		20 8a d7	jsr $d78a	                jsr underflow_1
.83d0		a0 02		ldy #$02	                ldy #2
.83d2		b5 00		lda $00,x	_twice:         lda 0,x
.83d4		20 8a 97	jsr $978a	                jsr cmpl_a
.83d7		e8		inx		                inx
.83d8		88		dey		                dey
.83d9		d0 f7		bne $83d2	                bne _twice
.83db		60		rts		z_comma:        rts
.83dc						xt_compile_only:
.83dc		20 e1 d6	jsr $d6e1	                jsr current_to_dp
.83df		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.83e1		b1 02		lda ($02),y	                lda (dp),y
.83e3		09 01		ora #$01	                ora #CO        ; make sure bit 7 is set
.83e5		91 02		sta ($02),y	                sta (dp),y
.83e7		60		rts		z_compile_only: rts
.83e8						xt_value:
.83e8						xt_constant:
.83e8		20 8a d7	jsr $d78a	                jsr underflow_1
.83eb		20 40 84	jsr $8440	                jsr xt_create
.83ee		38		sec		                sec
.83ef		a5 00		lda $00		                lda cp
.83f1		e9 02		sbc #$02	                sbc #2
.83f3		85 25		sta $25		                sta tmp1
.83f5		a5 01		lda $01		                lda cp+1
.83f7		e9 00		sbc #$00	                sbc #0
.83f9		85 26		sta $26		                sta tmp1+1
.83fb		a9 f2		lda #$f2	                lda #<doconst           ; LSB of DOCONST
.83fd		92 25		sta ($25)	                sta (tmp1)
.83ff		a0 01		ldy #$01	                ldy #1
.8401		a9 d5		lda #$d5	                lda #>doconst           ; MSB of DOCONST
.8403		91 25		sta ($25),y	                sta (tmp1),y
.8405		20 cd 83	jsr $83cd	                jsr xt_comma            ; drop through to adjust_z
.8408						adjust_z:
.8408		20 19 9c	jsr $9c19	                jsr xt_latestnt         ; gives us ( -- nt )
.840b		b5 00		lda $00,x	                lda 0,x
.840d		85 25		sta $25		                sta tmp1
.840f		b5 01		lda $01,x	                lda 1,x
.8411		85 26		sta $26		                sta tmp1+1
.8413		a0 06		ldy #$06	                ldy #6
.8415		b1 25		lda ($25),y	                lda (tmp1),y
.8417		18		clc		                clc
.8418		69 02		adc #$02	                adc #2
.841a		91 25		sta ($25),y	                sta (tmp1),y
.841c		c8		iny		                iny
.841d		b1 25		lda ($25),y	                lda (tmp1),y
.841f		69 00		adc #$00	                adc #0                  ; only need carry
.8421		91 25		sta ($25),y	                sta (tmp1),y
.8423		e8		inx		                inx
.8424		e8		inx		                inx
.8425						z_value:
.8425		60		rts		z_constant:     rts
.8426						xt_count:
.8426		20 8a d7	jsr $d78a	                jsr underflow_1
.8429		a1 00		lda ($00,x)	                lda (0,x)       ; Get number of characters (255 max)
.842b		a8		tay		                tay
.842c		f6 00		inc $00,x	                inc 0,x         ; LSB
.842e		d0 02		bne $8432	                bne +
.8430		f6 01		inc $01,x	                inc 1,x         ; MSB
.8432		98		tya		+               tya
.8433		ca		dex		                dex
.8434		ca		dex		                dex
.8435		95 00		sta $00,x	                sta 0,x         ; LSB
.8437		74 01		stz $01,x	                stz 1,x         ; MSB, always zero
.8439		60		rts		z_count:        rts
.843a						xt_cr:
.843a		a9 0a		lda #$0a	                lda #AscLF
.843c		20 c5 86	jsr $86c5	                jsr emit_a
.843f		60		rts		z_cr:           rts
.8440						xt_create:
.8440		20 51 8d	jsr $8d51	                jsr xt_parse_name       ; ( addr u )
.8443		b5 00		lda $00,x	                lda 0,x
.8445		15 01		ora $01,x	                ora 1,x
.8447		d0 05		bne $844e	                bne _got_name
.8449		a9 05		lda #$05	                lda #err_noname
.844b		4c a0 d7	jmp $d7a0	                jmp error
.844e						_got_name:
.844e		74 01		stz $01,x	                stz 1,x
.8450		20 a5 93	jsr $93a5	                jsr xt_two_dup          ; ( addr u addr u )
.8453		20 f0 9a	jsr $9af0	                jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
.8456		b5 00		lda $00,x	                lda 0,x
.8458		15 01		ora $01,x	                ora 1,x
.845a		f0 1e		beq $847a	                beq _new_name           ; We haven't seen this one before.
.845c		e8		inx		                inx                     ; Drop flag (nt) from find-name.
.845d		e8		inx		                inx
.845e		24 1c		bit $1c		                bit status
.8460		10 08		bpl $846a	                bpl _redefined_name     ; Bit 7 is zero, so print the message.
.8462		a9 80		lda #$80	                lda #$80                ; Set bit 7 to indicate dup
.8464		05 1c		ora $1c		                ora status
.8466		85 1c		sta $1c		                sta status
.8468		80 18		bra $8482	                bra _process_name
.846a						_redefined_name:
.846a		a9 02		lda #$02	                lda #str_redefined
.846c		20 c6 d7	jsr $d7c6	                jsr print_string_no_lf
.846f		20 a5 93	jsr $93a5	                jsr xt_two_dup           ; ( addr u addr u )
.8472		20 af 94	jsr $94af	                jsr xt_type
.8475		20 c5 91	jsr $91c5	                jsr xt_space
.8478		80 08		bra $8482	                bra _process_name
.847a						_new_name:
.847a		e8		inx		                inx                     ; Drop flag (0) from find-name.
.847b		e8		inx		                inx
.847c		a9 7f		lda #$7f	                lda #$7F                ; Clear bit 0 of status to indicate new word.
.847e		25 1c		and $1c		                and status
.8480		85 1c		sta $1c		                sta status
.8482						_process_name:
.8482		b5 00		lda $00,x	                lda 0,x
.8484		85 27		sta $27		                sta tmp2                ; store length of string in tmp2
.8486		a5 00		lda $00		                lda cp
.8488		85 25		sta $25		                sta tmp1
.848a		a5 01		lda $01		                lda cp+1
.848c		85 26		sta $26		                sta tmp1+1
.848e		b5 00		lda $00,x	                lda 0,x
.8490		18		clc		                clc
.8491		69 08		adc #$08	                adc #8
.8493		85 29		sta $29		                sta tmp3                ; total header length
.8495		95 00		sta $00,x	                sta 0,x
.8497		74 01		stz $01,x	                stz 1,x         ; max header size is 255 chars
.8499		20 27 82	jsr $8227	                jsr xt_allot    ; ( addr )
.849c		20 e1 d6	jsr $d6e1	                jsr current_to_dp
.849f		a0 00		ldy #$00	                ldy #0
.84a1		a5 27		lda $27		                lda tmp2
.84a3		91 25		sta ($25),y	                sta (tmp1),y
.84a5		a9 08		lda #$08	                lda #NN
.84a7		09 20		ora #$20	                ora #HC
.84a9		c8		iny		                iny
.84aa		91 25		sta ($25),y	                sta (tmp1),y
.84ac		c8		iny		                iny
.84ad		a5 02		lda $02		                lda dp
.84af		91 25		sta ($25),y	                sta (tmp1),y
.84b1		c8		iny		                iny
.84b2		a5 03		lda $03		                lda dp+1
.84b4		91 25		sta ($25),y	                sta (tmp1),y
.84b6		c8		iny		                iny
.84b7		a5 26		lda $26		                lda tmp1+1
.84b9		85 03		sta $03		                sta dp+1
.84bb		a5 25		lda $25		                lda tmp1
.84bd		85 02		sta $02		                sta dp
.84bf		18		clc		                clc
.84c0		65 29		adc $29		                adc tmp3        ; add total header length
.84c2		91 25		sta ($25),y	                sta (tmp1),y
.84c4		48		pha		                pha             ; we need this in the next step
.84c5		c8		iny		                iny
.84c6		a5 26		lda $26		                lda tmp1+1
.84c8		69 00		adc #$00	                adc #0          ; only need the carry
.84ca		91 25		sta ($25),y	                sta (tmp1),y
.84cc		c8		iny		                iny
.84cd		68		pla		                pla             ; LSB of "z_" address
.84ce		18		clc		                clc
.84cf		69 03		adc #$03	                adc #3
.84d1		91 25		sta ($25),y	                sta (tmp1),y
.84d3		88		dey		                dey             ; get the MSB of xt back
.84d4		b1 25		lda ($25),y	                lda (tmp1),y
.84d6		69 00		adc #$00	                adc #0          ; only need the carry
.84d8		c8		iny		                iny
.84d9		c8		iny		                iny
.84da		91 25		sta ($25),y	                sta (tmp1),y
.84dc		c8		iny		                iny
.84dd		b5 00		lda $00,x	                lda 0,x
.84df		38		sec		                sec
.84e0		e9 08		sbc #$08	                sbc #8
.84e2		85 23		sta $23		                sta tmptos
.84e4		b5 01		lda $01,x	                lda 1,x
.84e6		e9 00		sbc #$00	                sbc #0          ; only need carry
.84e8		85 24		sta $24		                sta tmptos+1
.84ea						_name_loop:
.84ea		b1 23		lda ($23),y	                lda (tmptos),y
.84ec		c9 5b		cmp #$5b	                cmp #'Z'+1
.84ee		b0 06		bcs $84f6	                bcs _store_name
.84f0		c9 41		cmp #$41	                cmp #'A'
.84f2		90 02		bcc $84f6	                bcc _store_name
.84f4		09 20		ora #$20	                ora #$20
.84f6						_store_name:
.84f6		91 25		sta ($25),y	                sta (tmp1),y
.84f8		c8		iny		                iny
.84f9		c6 27		dec $27		                dec tmp2
.84fb		d0 ed		bne $84ea	                bne _name_loop
.84fd		a0 d6		ldy #$d6	                ldy #>dovar
.84ff		a9 38		lda #$38	                lda #<dovar
.8501		20 7a 97	jsr $977a	                jsr cmpl_subroutine
.8504		20 f4 d6	jsr $d6f4	                jsr dp_to_current
.8507		e8		inx		                inx
.8508		e8		inx		                inx
.8509		60		rts		z_create:       rts
.850a						xt_decimal:
.850a		a9 0a		lda #$0a	                lda #10
.850c		85 18		sta $18		                sta base
.850e		64 19		stz $19		                stz base+1              ; paranoid
.8510		60		rts		z_decimal:      rts
.8511						xt_defer:
.8511		20 40 84	jsr $8440	                jsr xt_create
.8514		a5 00		lda $00		                lda cp          ; LSB
.8516		38		sec		                sec
.8517		e9 02		sbc #$02	                sbc #2
.8519		85 25		sta $25		                sta tmp1
.851b		a5 01		lda $01		                lda cp+1        ; MSB
.851d		e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.851f		85 26		sta $26		                sta tmp1+1
.8521		a0 00		ldy #$00	                ldy #0
.8523		a9 06		lda #$06	                lda #<dodefer   ; LSB
.8525		91 25		sta ($25),y	                sta (tmp1),y
.8527		c8		iny		                iny
.8528		a9 d6		lda #$d6	                lda #>dodefer   ; MSB
.852a		91 25		sta ($25),y	                sta (tmp1),y
.852c		a9 1a		lda #$1a	                lda #<defer_error
.852e		92 00		sta ($00)	                sta (cp)
.8530		e6 00		inc $00		                inc cp
.8532		d0 02		bne $8536	                bne +
.8534		e6 01		inc $01		                inc cp+1
.8536						+
.8536		a9 d6		lda #$d6	                lda #>defer_error
.8538		92 00		sta ($00)	                sta (cp)
.853a		e6 00		inc $00		                inc cp
.853c		d0 02		bne $8540	                bne +
.853e		e6 01		inc $01		                inc cp+1
.8540						+
.8540		20 08 84	jsr $8408	                jsr adjust_z    ; adjust header to correct length
.8543		60		rts		z_defer:        rts
.8544						xt_defer_fetch:
.8544		20 98 92	jsr $9298	                jsr xt_to_body
.8547		20 1a 88	jsr $881a	                jsr xt_fetch
.854a		60		rts		z_defer_fetch:  rts
.854b						xt_defer_store:
.854b		20 98 92	jsr $9298	                jsr xt_to_body
.854e		20 12 92	jsr $9212	                jsr xt_store
.8551		60		rts		z_defer_store:  rts
.8552						xt_depth:
.8552		a9 78		lda #$78	                lda #dsp0
.8554		86 1e		stx $1e		                stx tmpdsp
.8556		38		sec		                sec
.8557		e5 1e		sbc $1e		                sbc tmpdsp
.8559		4a		lsr a		                lsr
.855a		ca		dex		                dex
.855b		ca		dex		                dex
.855c		95 00		sta $00,x	                sta 0,x
.855e		74 01		stz $01,x	                stz 1,x
.8560		60		rts		z_depth:        rts
.8561						xt_question_do:
.8561		ca		dex		                dex
.8562		ca		dex		                dex
.8563		a9 a4		lda #$a4	                lda #<question_do_runtime
.8565		95 00		sta $00,x	                sta 0,x
.8567		a9 85		lda #$85	                lda #>question_do_runtime
.8569		95 01		sta $01,x	                sta 1,x
.856b		20 a0 86	jsr $86a0	                jsr xt_dup              ; xt and xt' are the same
.856e		ca		dex		                dex
.856f		ca		dex		                dex
.8570		a9 10		lda #$10	                lda #question_do_runtime_size
.8572		95 00		sta $00,x	                sta 0,x
.8574		74 01		stz $01,x	                stz 1,x
.8576		20 05 97	jsr $9705	                jsr cmpl_by_limit
.8579		90 0b		bcc $8586	                bcc _native
.857b		20 1b 89	jsr $891b	                jsr xt_here
.857e		20 f1 9d	jsr $9df1	                jsr xt_zero
.8581		20 cd 83	jsr $83cd	                jsr xt_comma
.8584		80 08		bra $858e	                bra do_common
.8586						_native:
.8586		20 9b 97	jsr $979b	                jsr cmpl_jump_later
.8589		80 03		bra $858e	                bra do_common
.858b						xt_do:
.858b		20 f1 9d	jsr $9df1	                jsr xt_zero             ; push 0 TOS
.858e						do_common:
.858e		ca		dex		                dex
.858f		ca		dex		                dex
.8590		a5 21		lda $21		                lda loopleave
.8592		95 00		sta $00,x	                sta 0,x
.8594		a5 22		lda $22		                lda loopleave+1
.8596		95 01		sta $01,x	                sta 1,x
.8598		64 22		stz $22		                stz loopleave+1
.859a		a0 85		ldy #$85	                ldy #>do_runtime
.859c		a9 bc		lda #$bc	                lda #<do_runtime
.859e		20 7a 97	jsr $977a	                jsr cmpl_subroutine
.85a1		4c 1b 89	jmp $891b	                jmp xt_here
.85a4						z_question_do:
.85a4						z_do:
.85a4						question_do_runtime:
.85a4		b5 00		lda $00,x	                lda 0,x
.85a6		d5 02		cmp $02,x	                cmp 2,x
.85a8		d0 0d		bne $85b7	                bne _begin
.85aa		b5 01		lda $01,x	                lda 1,x
.85ac		d5 03		cmp $03,x	                cmp 3,x
.85ae		d0 07		bne $85b7	                bne _begin
.85b0		e8		inx		                inx                     ; drop loop limits and skip
.85b1		e8		inx		                inx
.85b2		e8		inx		                inx
.85b3		e8		inx		                inx
=16						question_do_runtime_size = * - question_do_runtime
.85b4		a9 00		lda #$00	                lda #0
>85b6		2c				                .byte $2c               ; BIT llhh to hide the lda #1
.85b7		a9 01		lda #$01	_begin:         lda #1
.85b9		4c 34 98	jmp $9834	                jmp zbranch_runtime
.85bc						do_runtime:
.85bc		a4 1f		ldy $1f		                ldy loopctrl
.85be		30 05		bmi $85c5	                bmi +                   ; is this the first LCB?
.85c0		a5 20		lda $20		                lda loopidx0            ; no, write cached LSB
.85c2		99 00 01	sta $0100,y	                sta loopindex,y         ; back to loopindex in the LCB
.85c5						+
.85c5		c8		iny		                iny                     ; Reserve 4 bytes for next LCB
.85c6		c8		iny		                iny
.85c7		c8		iny		                iny
.85c8		c8		iny		                iny
.85c9		84 1f		sty $1f		                sty loopctrl            ; Udpate LCB stack pointer
.85cb		38		sec		                sec
.85cc		a9 00		lda #$00	                lda #0
.85ce		f5 02		sbc $02,x	                sbc 2,x             ; LSB of limit
.85d0		99 02 01	sta $0102,y	                sta loopfufa,y      ; write to loop control block
.85d3		a9 80		lda #$80	                lda #$80
.85d5		f5 03		sbc $03,x	                sbc 3,x             ; MSB of limit
.85d7		99 03 01	sta $0103,y	                sta loopfufa+1,y
.85da		18		clc		                clc
.85db		b5 00		lda $00,x	                lda 0,x             ; LSB of original index
.85dd		79 02 01	adc $0102,y	                adc loopfufa,y
.85e0		85 20		sta $20		                sta loopidx0        ; write LSB to cache not LCB
.85e2		b5 01		lda $01,x	                lda 1,x             ; MSB of orginal index
.85e4		79 03 01	adc $0103,y	                adc loopfufa+1,y
.85e7		99 01 01	sta $0101,y	                sta loopindex+1,y
.85ea		e8		inx		                inx                 ; clean up the stack
.85eb		e8		inx		                inx
.85ec		e8		inx		                inx
.85ed		e8		inx		                inx
.85ee		60		rts		                rts
.85ef						xt_does:
.85ef		a0 85		ldy #$85	                ldy #>does_runtime
.85f1		a9 fe		lda #$fe	                lda #<does_runtime
.85f3		20 7a 97	jsr $977a	                jsr cmpl_subroutine
.85f6		a0 d6		ldy #$d6	                ldy #>dodoes
.85f8		a9 1f		lda #$1f	                lda #<dodoes
.85fa		20 7a 97	jsr $977a	                jsr cmpl_subroutine
.85fd		60		rts		z_does:         rts
.85fe						does_runtime:
.85fe		7a		ply		                ply             ; LSB
.85ff		68		pla		                pla             ; MSB
.8600		c8		iny		                iny
.8601		d0 01		bne $8604	                bne +
.8603		1a		inc a		                ina
.8604						+
.8604		84 25		sty $25		                sty tmp1
.8606		85 26		sta $26		                sta tmp1+1
.8608		20 e1 d6	jsr $d6e1	                jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.860b		a5 02		lda $02		                lda dp
.860d		18		clc		                clc
.860e		69 04		adc #$04	                adc #4
.8610		85 27		sta $27		                sta tmp2
.8612		a5 03		lda $03		                lda dp+1
.8614		69 00		adc #$00	                adc #0          ; we only care about the carry
.8616		85 28		sta $28		                sta tmp2+1
.8618		b2 27		lda ($27)	                lda (tmp2)
.861a		18		clc		                clc
.861b		69 01		adc #$01	                adc #1
.861d		85 29		sta $29		                sta tmp3
.861f		a0 01		ldy #$01	                ldy #1
.8621		b1 27		lda ($27),y	                lda (tmp2),y
.8623		69 00		adc #$00	                adc #0          ; we only care about the carry
.8625		85 2a		sta $2a		                sta tmp3+1
.8627		a5 25		lda $25		                lda tmp1        ; LSB
.8629		92 29		sta ($29)	                sta (tmp3)
.862b		a5 26		lda $26		                lda tmp1+1
.862d		91 29		sta ($29),y	                sta (tmp3),y    ; Y is still 1
.862f		60		rts		                rts
.8630						xt_dot:
.8630		20 8a d7	jsr $d78a	                jsr underflow_1
.8633		20 a0 86	jsr $86a0	                jsr xt_dup                      ; ( n n )
.8636		20 cf 80	jsr $80cf	                jsr xt_abs                      ; ( n u )
.8639		20 f1 9d	jsr $9df1	                jsr xt_zero                     ; ( n u 0 )
.863c		20 cf 89	jsr $89cf	                jsr xt_less_number_sign         ; ( n u 0 )
.863f		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s            ; ( n ud )
.8642		20 8b 8f	jsr $8f8b	                jsr xt_rot                      ; ( ud n )
.8645		20 4a 91	jsr $914a	                jsr xt_sign                     ; ( ud )
.8648		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater      ; ( addr u )
.864b		20 af 94	jsr $94af	                jsr xt_type
.864e		20 c5 91	jsr $91c5	                jsr xt_space
.8651		60		rts		z_dot:          rts
.8652						xt_dot_paren:
.8652		ca		dex		                dex
.8653		ca		dex		                dex
.8654		a9 29		lda #$29	                lda #41     ; Right parenthesis
.8656		95 00		sta $00,x	                sta 0,x
.8658		74 01		stz $01,x	                stz 1,x
.865a		20 ac 8d	jsr $8dac	                jsr xt_parse
.865d		20 af 94	jsr $94af	                jsr xt_type
.8660		60		rts		z_dot_paren:    rts
.8661						xt_dot_quote:
.8661		20 d4 8f	jsr $8fd4	                jsr xt_s_quote
.8664		a0 94		ldy #$94	                ldy #>xt_type
.8666		a9 af		lda #$af	                lda #<xt_type
.8668		20 7a 97	jsr $977a	                jsr cmpl_subroutine
.866b		60		rts		z_dot_quote:    rts
.866c						xt_dot_r:
.866c		20 8f d7	jsr $d78f	                jsr underflow_2
.866f		20 66 93	jsr $9366	                jsr xt_to_r
.8672		20 a0 86	jsr $86a0	                jsr xt_dup
.8675		20 cf 80	jsr $80cf	                jsr xt_abs
.8678		20 f1 9d	jsr $9df1	                jsr xt_zero
.867b		20 cf 89	jsr $89cf	                jsr xt_less_number_sign
.867e		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s
.8681		20 8b 8f	jsr $8f8b	                jsr xt_rot
.8684		20 4a 91	jsr $914a	                jsr xt_sign
.8687		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater
.868a		20 ee 8e	jsr $8eee	                jsr xt_r_from
.868d		20 05 8d	jsr $8d05	                jsr xt_over
.8690		20 e4 8b	jsr $8be4	                jsr xt_minus
.8693		20 cb 91	jsr $91cb	                jsr xt_spaces
.8696		20 af 94	jsr $94af	                jsr xt_type
.8699		60		rts		z_dot_r:        rts
.869a						xt_drop:
.869a		20 8a d7	jsr $d78a	                jsr underflow_1
.869d		e8		inx		                inx
.869e		e8		inx		                inx
.869f		60		rts		z_drop:         rts
.86a0						xt_dup:
.86a0		20 8a d7	jsr $d78a	                jsr underflow_1
.86a3		ca		dex		                dex
.86a4		ca		dex		                dex
.86a5		b5 02		lda $02,x	                lda 2,x         ; LSB
.86a7		95 00		sta $00,x	                sta 0,x
.86a9		b5 03		lda $03,x	                lda 3,x         ; MSB
.86ab		95 01		sta $01,x	                sta 1,x
.86ad		60		rts		z_dup:          rts
.86ae						xt_else:
.86ae						xt_endof:
.86ae		20 9b 97	jsr $979b	                jsr cmpl_jump_later
.86b1		20 28 92	jsr $9228	                jsr xt_swap         ; ( target orig )
.86b4						xt_then:
.86b4		20 1b 89	jsr $891b	                jsr xt_here
.86b7		20 28 92	jsr $9228	                jsr xt_swap
.86ba		20 12 92	jsr $9212	                jsr xt_store
.86bd						z_else:
.86bd						z_endof:
.86bd		60		rts		z_then:         rts
.86be						xt_emit:
.86be		20 8a d7	jsr $d78a	                jsr underflow_1
.86c1		b5 00		lda $00,x	                lda 0,x
.86c3		e8		inx		                inx
.86c4		e8		inx		                inx
.86c5						emit_a:
.86c5		6c 12 00	jmp ($0012)	                jmp (output)            ; JSR/RTS
.86c8						z_emit:
.86c8						xt_endcase:
.86c8		a0 86		ldy #$86	                ldy #>xt_drop
.86ca		a9 9a		lda #$9a	                lda #<xt_drop
.86cc		20 7a 97	jsr $977a	                jsr cmpl_subroutine
.86cf						_endcase_loop:
.86cf		b5 00		lda $00,x	                lda 0,x
.86d1		15 01		ora $01,x	                ora 1,x
.86d3		f0 05		beq $86da	                beq _done
.86d5		20 b4 86	jsr $86b4	                jsr xt_then
.86d8		80 f5		bra $86cf	                bra _endcase_loop
.86da						_done:
.86da		e8		inx		                inx
.86db		e8		inx		                inx
.86dc		60		rts		z_endcase:      rts
.86dd						xt_environment_q:
.86dd		20 8a d7	jsr $d78a	                jsr underflow_1
.86e0		a0 00		ldy #$00	                ldy #00                 ; counter for table
.86e2		5a		phy		                phy
.86e3						_table_loop:
.86e3		20 a5 93	jsr $93a5	                jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
.86e6		ca		dex		                dex
.86e7		ca		dex		                dex                     ; ( addr u addr u ? )
.86e8		b9 5a 87	lda $875a,y	                lda env_table_single,y
.86eb		95 00		sta $00,x	                sta 0,x
.86ed		c8		iny		                iny
.86ee		b9 5a 87	lda $875a,y	                lda env_table_single,y
.86f1		95 01		sta $01,x	                sta 1,x                 ; ( addr u addr u addr-t )
.86f3		c8		iny		                iny
.86f4		15 00		ora $00,x	                ora 0,x
.86f6		f0 4d		beq $8745	                beq _table_done
.86f8		5a		phy		                phy                     ; save Y, which is used by COUNT
.86f9		20 26 84	jsr $8426	                jsr xt_count            ; ( addr u addr u addr-s u-s )
.86fc		20 b8 9f	jsr $9fb8	                jsr xt_compare          ; ( addr u f )
.86ff		7a		ply		                ply
.8700		b5 00		lda $00,x	                lda 0,x
.8702		15 01		ora $01,x	                ora 1,x
.8704		f0 04		beq $870a	                beq _got_result
.8706		e8		inx		                inx                     ; DROP, now ( addr u )
.8707		e8		inx		                inx
.8708		80 d9		bra $86e3	                bra _table_loop
.870a						_got_result:
.870a		e8		inx		                inx                     ; drop flag, now ( addr u )
.870b		e8		inx		                inx
.870c		88		dey		                dey                     ; go back to index we had
.870d		88		dey		                dey
.870e		68		pla		                pla
.870f		d0 0d		bne $871e	                bne _double_result
.8711		b9 78 87	lda $8778,y	                lda env_results_single,y
.8714		95 02		sta $02,x	                sta 2,x
.8716		c8		iny		                iny
.8717		b9 78 87	lda $8778,y	                lda env_results_single,y
.871a		95 03		sta $03,x	                sta 3,x                 ; ( res u )
.871c		80 1f		bra $873d	                bra _set_flag
.871e						_double_result:
.871e		ca		dex		                dex                     ; ( addr u ? )
.871f		ca		dex		                dex
.8720		98		tya		                tya
.8721		38		sec		                sec
.8722		e9 18		sbc #$18	                sbc #24
.8724		0a		asl a		                asl
.8725		a8		tay		                tay
.8726		b9 8e 87	lda $878e,y	                lda env_results_double,y
.8729		95 02		sta $02,x	                sta 2,x
.872b		c8		iny		                iny
.872c		b9 8e 87	lda $878e,y	                lda env_results_double,y
.872f		95 03		sta $03,x	                sta 3,x                 ; ( res u ? )
.8731		c8		iny		                iny
.8732		b9 8e 87	lda $878e,y	                lda env_results_double,y
.8735		95 04		sta $04,x	                sta 4,x
.8737		c8		iny		                iny
.8738		b9 8e 87	lda $878e,y	                lda env_results_double,y
.873b		95 05		sta $05,x	                sta 5,x                 ; ( res res ? )
.873d						_set_flag:
.873d		a9 ff		lda #$ff	                lda #$FF
.873f		95 00		sta $00,x	                sta 0,x
.8741		95 01		sta $01,x	                sta 1,x                 ; ( res f )
.8743		80 14		bra $8759	                bra _done
.8745						_table_done:
.8745		68		pla		                pla
.8746		d0 09		bne $8751	                bne _no_match
.8748		1a		inc a		                ina
.8749		48		pha		                pha
.874a		8a		txa		                txa
.874b		18		clc		                clc
.874c		69 06		adc #$06	                adc #6                  ; skip six bytes
.874e		aa		tax		                tax                     ; ( addr u )
.874f		80 92		bra $86e3	                bra _table_loop
.8751						_no_match:
.8751		8a		txa		                txa
.8752		18		clc		                clc
.8753		69 0a		adc #$0a	                adc #10
.8755		aa		tax		                tax                     ; ( addr ) - not ( 0 ) !
.8756		20 f1 9d	jsr $9df1	                jsr xt_false
.8759						_done:
.8759						z_environment_q:
.8759		60		rts		                rts
.875a						env_table_single:
>875a		72 d5 82 d5 88 d5 8d d5		        .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
>8762		9f d5
>8764		a7 d5 b0 d5 b6 d5 bc d5		        .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
>876c		cf d5 db d5 00 00		        .word envs_sc, envs_wl, 0000
.8772						env_table_double:
>8772		e5 d5 eb d5 00 00		        .word envs_max_d, envs_max_ud, 0000
.8778						env_results_single:
>8778		ff 00				        .word $00FF     ; /COUNTED-STRING
>877a		ff 00				        .word $00FF     ; /HOLD
>877c		54 00				        .word $0054     ; /PAD (this is 84 decimal)
>877e		08 00				        .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
>8780		00 00				        .word 0000      ; FLOORED ("FALSE", we have symmetric)
>8782		ff 00				        .word $00FF     ; MAX-CHAR
>8784		ff 7f				        .word $7FFF     ; MAX-N
>8786		ff ff				        .word $FFFF     ; MAX-U
>8788		80 00				        .word $0080     ; RETURN-STACK-CELLS
>878a		20 00				        .word $0020     ; STACK-CELLS (from definitions.asm)
>878c		09 00				        .word $0009     ; WORDLISTS
.878e						env_results_double:
>878e		ff 7f ff ff			        .word $7FFF, $FFFF      ; MAX-D
>8792		ff ff ff ff			        .word $FFFF, $FFFF      ; MAX-UD
.8796						xt_equal:
.8796		20 8f d7	jsr $d78f	                jsr underflow_2
.8799		b5 00		lda $00,x	                lda 0,x                 ; LSB
.879b		d5 02		cmp $02,x	                cmp 2,x
.879d		d0 0a		bne $87a9	                bne _false
.879f		b5 01		lda $01,x	                lda 1,x                 ; MSB
.87a1		d5 03		cmp $03,x	                cmp 3,x
.87a3		d0 04		bne $87a9	                bne _false
.87a5		a9 ff		lda #$ff	                lda #$FF
.87a7		80 02		bra $87ab	                bra _done
.87a9		a9 00		lda #$00	_false:         lda #0                  ; drop thru to done
.87ab		95 02		sta $02,x	_done:          sta 2,x
.87ad		95 03		sta $03,x	                sta 3,x
.87af		e8		inx		                inx
.87b0		e8		inx		                inx
.87b1		60		rts		z_equal:        rts
.87b2						xt_blank:
.87b2		ca		dex		                dex
.87b3		ca		dex		                dex
.87b4		a9 20		lda #$20	                lda #AscSP
.87b6		95 00		sta $00,x	                sta 0,x
.87b8		74 01		stz $01,x	                stz 1,x
.87ba		80 06		bra $87c2	                bra xt_fill     ; skip over code for ERASE
.87bc						xt_erase:
.87bc		ca		dex		                dex
.87bd		ca		dex		                dex
.87be		74 00		stz $00,x	                stz 0,x
.87c0		74 01		stz $01,x	                stz 1,x
.87c2						xt_fill:
.87c2		20 94 d7	jsr $d794	                jsr underflow_3
.87c5		b5 04		lda $04,x	                lda 4,x         ; LSB
.87c7		85 25		sta $25		                sta tmp1
.87c9		b5 05		lda $05,x	                lda 5,x
.87cb		85 26		sta $26		                sta tmp1+1
.87cd		b5 02		lda $02,x	                lda 2,x
.87cf		85 27		sta $27		                sta tmp2
.87d1		b5 03		lda $03,x	                lda 3,x
.87d3		85 28		sta $28		                sta tmp2+1
.87d5		b5 00		lda $00,x	                lda 0,x
.87d7		a8		tay		                tay
.87d8						_loop:
.87d8		a9 7f		lda #$7f	                lda #>ram_end           ; MSB
.87da		c5 26		cmp $26		                cmp tmp1+1
.87dc		90 21		bcc $87ff	                bcc _done               ; RAM_END < TMP1, so leave
.87de		d0 06		bne $87e6	                bne _check_counter      ; RAM_END is not smaller and not equal
.87e0		a9 ff		lda #$ff	                lda #<ram_end           ; LSB, because MSBs were equal
.87e2		c5 25		cmp $25		                cmp tmp1
.87e4		90 19		bcc $87ff	                bcc _done               ; RAM_END < TMP1, so leave
.87e6						_check_counter:
.87e6		a5 27		lda $27		                lda tmp2
.87e8		05 28		ora $28		                ora tmp2+1
.87ea		f0 13		beq $87ff	                beq _done
.87ec		98		tya		                tya
.87ed		92 25		sta ($25)	                sta (tmp1)
.87ef		a5 27		lda $27		                lda tmp2
.87f1		d0 02		bne $87f5	                bne +
.87f3		c6 28		dec $28		                dec tmp2+1
.87f5		c6 27		dec $27		+               dec tmp2
.87f7		e6 25		inc $25		                inc tmp1
.87f9		d0 dd		bne $87d8	                bne _loop
.87fb		e6 26		inc $26		                inc tmp1+1
.87fd		80 d9		bra $87d8	                bra _loop
.87ff						_done:
.87ff		8a		txa		                txa
.8800		18		clc		                clc
.8801		69 06		adc #$06	                adc #6
.8803		aa		tax		                tax
.8804						z_blank:
.8804						z_erase:
.8804		60		rts		z_fill:         rts
.8805						xt_execute:
.8805		20 8a d7	jsr $d78a	                jsr underflow_1
.8808		20 0c 88	jsr $880c	                jsr doexecute   ; do not combine to JMP (native coding)
.880b		60		rts		z_execute:      rts
.880c						doexecute:
.880c		b5 00		lda $00,x	                lda 0,x
.880e		85 04		sta $04		                sta ip
.8810		b5 01		lda $01,x	                lda 1,x
.8812		85 05		sta $05		                sta ip+1
.8814		e8		inx		                inx
.8815		e8		inx		                inx
.8816		6c 04 00	jmp ($0004)	                jmp (ip)
.8819						xt_exit:
.8819		60		rts		                rts             ; keep before z_exit
.881a						z_exit:
.881a						xt_fetch:
.881a		20 8a d7	jsr $d78a	                jsr underflow_1
.881d		a1 00		lda ($00,x)	                lda (0,x)               ; LSB
.881f		a8		tay		                tay
.8820		f6 00		inc $00,x	                inc 0,x
.8822		d0 02		bne $8826	                bne +
.8824		f6 01		inc $01,x	                inc 1,x
.8826						+
.8826		a1 00		lda ($00,x)	                lda (0,x)               ; MSB
.8828		95 01		sta $01,x	                sta 1,x
.882a		94 00		sty $00,x	                sty 0,x
.882c		60		rts		z_fetch:        rts
.882d						xt_find:
.882d		20 8a d7	jsr $d78a	                jsr underflow_1
.8830		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8832		48		pha		                pha
.8833		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8835		48		pha		                pha
.8836		20 26 84	jsr $8426	                jsr xt_count            ; ( caddr -- addr u )
.8839		20 f0 9a	jsr $9af0	                jsr xt_find_name        ; ( addr u -- nt | 0 )
.883c		b5 00		lda $00,x	                lda 0,x
.883e		15 01		ora $01,x	                ora 1,x
.8840		d0 0b		bne $884d	                bne _found_word
.8842		20 f1 9d	jsr $9df1	                jsr xt_false            ; ( 0 0 )
.8845		68		pla		                pla                     ; LSB of address
.8846		95 02		sta $02,x	                sta 2,x
.8848		68		pla		                pla
.8849		95 03		sta $03,x	                sta 3,x                 ; MSB of address
.884b		80 27		bra $8874	                bra _done               ; ( addr 0 )
.884d						_found_word:
.884d		68		pla		                pla
.884e		68		pla		                pla
.884f		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt nt )
.8852		20 2e 9c	jsr $9c2e	                jsr xt_name_to_int      ; ( nt xt )
.8855		20 28 92	jsr $9228	                jsr xt_swap             ; ( xt nt )
.8858		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.885a		f6 00		inc $00,x	                inc 0,x
.885c		d0 02		bne $8860	                bne +
.885e		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.8860						+
.8860		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.8862		29 04		and #$04	                and #IM
.8864		d0 08		bne $886e	                bne _immediate          ; bit set, we're immediate
.8866		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.8868		95 00		sta $00,x	                sta 0,x
.886a		95 01		sta $01,x	                sta 1,x
.886c		80 06		bra $8874	                bra _done
.886e						_immediate:
.886e		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.8870		95 00		sta $00,x	                sta 0,x
.8872		74 01		stz $01,x	                stz 1,x
.8874						_done:
.8874		60		rts		z_find:         rts
.8875						xt_fm_slash_mod:
.8875		20 94 d7	jsr $d794	                jsr underflow_3
.8878		64 27		stz $27		                stz tmp2        ; default: n is positive
.887a		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.887c		10 0e		bpl $888c	                bpl _check_d
.887e		e6 27		inc $27		                inc tmp2        ; set flag to negative for n1
.8880		20 1f 8c	jsr $8c1f	                jsr xt_negate   ; NEGATE
.8883		20 66 93	jsr $9366	                jsr xt_to_r     ; >R
.8886		20 5f 9e	jsr $9e5f	                jsr xt_dnegate  ; DNEGATE
.8889		20 ee 8e	jsr $8eee	                jsr xt_r_from   ; R>
.888c						_check_d:
.888c		b5 03		lda $03,x	                lda 3,x         ; MSB of high word of d
.888e		10 0d		bpl $889d	                bpl _multiply
.8890		18		clc		                clc
.8891		b5 00		lda $00,x	                lda 0,x         ; LSB of n1
.8893		75 02		adc $02,x	                adc 2,x         ; LSB of dh
.8895		95 02		sta $02,x	                sta 2,x
.8897		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8899		75 03		adc $03,x	                adc 3,x         ; MSB of dh
.889b		95 03		sta $03,x	                sta 3,x
.889d						_multiply:
.889d		20 34 95	jsr $9534	                jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
.88a0		a5 27		lda $27		                lda tmp2
.88a2		f0 07		beq $88ab	                beq _done
.88a4		e8		inx		                inx             ; pretend that we SWAP
.88a5		e8		inx		                inx
.88a6		20 1f 8c	jsr $8c1f	                jsr xt_negate
.88a9		ca		dex		                dex
.88aa		ca		dex		                dex
.88ab						_done:
.88ab		60		rts		z_fm_slash_mod: rts
.88ac						load_evaluate:
.88ac		a9 ff		lda #$ff	                lda #$FF
.88ae		85 25		sta $25		                sta tmp1
.88b0		80 11		bra $88c3	                bra load_evaluate_start
.88b2						xt_evaluate:
.88b2		20 8f d7	jsr $d78f	                jsr underflow_2
.88b5		64 25		stz $25		                stz tmp1
.88b7		b5 00		lda $00,x	                lda 0,x
.88b9		15 01		ora $01,x	                ora 1,x
.88bb		d0 06		bne $88c3	                bne evaluate_got_work
.88bd		e8		inx		                inx
.88be		e8		inx		                inx
.88bf		e8		inx		                inx
.88c0		e8		inx		                inx
.88c1		80 42		bra $8905	                bra evaluate_done
.88c3						load_evaluate_start:
.88c3						evaluate_got_work:
.88c3		a0 05		ldy #$05	                ldy #blk_offset+1
.88c5		b1 08		lda ($08),y	                lda (up),y
.88c7		48		pha		                pha
.88c8		88		dey		                dey
.88c9		b1 08		lda ($08),y	                lda (up),y
.88cb		48		pha		                pha
.88cc		a5 25		lda $25		                lda tmp1
.88ce		d0 05		bne $88d5	                bne _nozero
.88d0		91 08		sta ($08),y	                sta (up),y
.88d2		c8		iny		                iny
.88d3		91 08		sta ($08),y	                sta (up),y
.88d5						_nozero:
.88d5		20 92 9b	jsr $9b92	                jsr xt_input_to_r
.88d8		a9 ff		lda #$ff	                lda #$FF
.88da		85 0a		sta $0a		                sta insrc
.88dc		85 0b		sta $0b		                sta insrc+1
.88de		64 10		stz $10		                stz toin
.88e0		64 11		stz $11		                stz toin+1
.88e2		b5 00		lda $00,x	                lda 0,x
.88e4		85 0e		sta $0e		                sta ciblen
.88e6		b5 01		lda $01,x	                lda 1,x
.88e8		85 0f		sta $0f		                sta ciblen+1
.88ea		b5 02		lda $02,x	                lda 2,x
.88ec		85 0c		sta $0c		                sta cib
.88ee		b5 03		lda $03,x	                lda 3,x
.88f0		85 0d		sta $0d		                sta cib+1
.88f2		e8		inx		                inx             ; A clean stack is a clean mind
.88f3		e8		inx		                inx
.88f4		e8		inx		                inx
.88f5		e8		inx		                inx
.88f6		20 07 d7	jsr $d707	                jsr interpret   ; ( -- )
.88f9		20 9f 9d	jsr $9d9f	                jsr xt_r_to_input
.88fc		a0 04		ldy #$04	                ldy #blk_offset
.88fe		68		pla		                pla
.88ff		91 08		sta ($08),y	                sta (up),y
.8901		c8		iny		                iny
.8902		68		pla		                pla
.8903		91 08		sta ($08),y	                sta (up),y
.8905						evaluate_done:
.8905		60		rts		z_evaluate:     rts
.8906						xt_greater_than:
.8906		20 8f d7	jsr $d78f	                jsr underflow_2
.8909		a0 00		ldy #$00	                ldy #0          ; default false
.890b		20 c8 d6	jsr $d6c8	                jsr compare_16bit
.890e		f0 03		beq $8913	                beq _false
.8910		10 01		bpl $8913	                bpl _false
.8912		88		dey		                dey
.8913						_false:
.8913		98		tya		                tya
.8914		e8		inx		                inx
.8915		e8		inx		                inx
.8916		95 00		sta $00,x	                sta 0,x
.8918		95 01		sta $01,x	                sta 1,x
.891a		60		rts		z_greater_than: rts
.891b						xt_here:
.891b						xt_begin:
.891b						xt_asm_arrow:
.891b		ca		dex		                dex
.891c		ca		dex		                dex
.891d		a5 00		lda $00		                lda cp
.891f		95 00		sta $00,x	                sta 0,x
.8921		a5 01		lda $01		                lda cp+1
.8923		95 01		sta $01,x	                sta 1,x
.8925						z_here:
.8925						z_begin:
.8925						z_asm_arrow:
.8925		60		rts		                rts
.8926						xt_hex:
.8926		a9 10		lda #$10	                lda #16
.8928		85 18		sta $18		                sta base
.892a		64 19		stz $19		                stz base+1              ; paranoid
.892c		60		rts		z_hex:          rts
.892d						xt_hold:
.892d		20 8a d7	jsr $d78a	                jsr underflow_1
.8930		a5 2b		lda $2b		                lda tohold
.8932		d0 02		bne $8936	                bne +
.8934		c6 2c		dec $2c		                dec tohold+1
.8936						+
.8936		c6 2b		dec $2b		                dec tohold
.8938		b5 00		lda $00,x	                lda 0,x
.893a		92 2b		sta ($2b)	                sta (tohold)
.893c		e8		inx		                inx
.893d		e8		inx		                inx
.893e		60		rts		z_hold:         rts
.893f						xt_i:
.893f		ca		dex		                dex
.8940		ca		dex		                dex
.8941		a4 1f		ldy $1f		                ldy loopctrl
.8943		38		sec		                sec
.8944		a5 20		lda $20		                lda loopidx0        ; cached LSB of loopindex
.8946		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.8949		95 00		sta $00,x	                sta 0,x
.894b		b9 01 01	lda $0101,y	                lda loopindex+1,y
.894e		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.8951		95 01		sta $01,x	                sta 1,x
.8953		60		rts		z_i:            rts
.8954						xt_if:
.8954		20 b7 97	jsr $97b7	                jsr cmpl_0branch_later
.8957		60		rts		z_if:           rts
.8958						xt_immediate:
.8958		20 e1 d6	jsr $d6e1	                jsr current_to_dp
.895b		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.895d		b1 02		lda ($02),y	                lda (dp),y
.895f		09 04		ora #$04	                ora #IM        ; make sure bit 7 is set
.8961		91 02		sta ($02),y	                sta (dp),y
.8963		60		rts		z_immediate:    rts
.8964						xt_invert:
.8964		20 8a d7	jsr $d78a	                jsr underflow_1
.8967		a9 ff		lda #$ff	                lda #$FF
.8969		55 00		eor $00,x	                eor 0,x         ; LSB
.896b		95 00		sta $00,x	                sta 0,x
.896d		a9 ff		lda #$ff	                lda #$FF
.896f		55 01		eor $01,x	                eor 1,x         ; MSB
.8971		95 01		sta $01,x	                sta 1,x
.8973		60		rts		z_invert:       rts
.8974						xt_is:
.8974		a5 1a		lda $1a		                lda state
.8976		05 1b		ora $1b		                ora state+1
.8978		f0 0c		beq $8986	                beq _interpreting
.897a		20 14 83	jsr $8314	                jsr xt_bracket_tick
.897d		a0 85		ldy #$85	                ldy #>xt_defer_store
.897f		a9 4b		lda #$4b	                lda #<xt_defer_store
.8981		20 7a 97	jsr $977a	                jsr cmpl_subroutine
.8984		80 06		bra $898c	                bra _done
.8986						_interpreting:
.8986		20 3c 92	jsr $923c	                jsr xt_tick
.8989		20 4b 85	jsr $854b	                jsr xt_defer_store
.898c						_done:
.898c		60		rts		z_is:           rts
.898d						xt_j:
.898d		ca		dex		                dex                 ; make space on the stack
.898e		ca		dex		                dex
.898f		a5 1f		lda $1f		                lda loopctrl
.8991		38		sec		                sec
.8992		e9 04		sbc #$04	                sbc #4
.8994		a8		tay		                tay
.8995		38		sec		                sec
.8996		b9 00 01	lda $0100,y	                lda loopindex,y
.8999		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.899c		95 00		sta $00,x	                sta 0,x
.899e		b9 01 01	lda $0101,y	                lda loopindex+1,y
.89a1		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.89a4		95 01		sta $01,x	                sta 1,x
.89a6		60		rts		z_j:            rts
.89a7						xt_key:
.89a7		20 b1 89	jsr $89b1	                jsr key_a               ; returns char in A
.89aa		ca		dex		                dex
.89ab		ca		dex		                dex
.89ac		95 00		sta $00,x	                sta 0,x
.89ae		74 01		stz $01,x	                stz 1,x
.89b0		60		rts		z_key:          rts
.89b1						key_a:
.89b1		6c 14 00	jmp ($0014)	                jmp (input)             ; JSR/RTS
.89b4						xt_leave:
.89b4		a5 21		lda $21		                lda loopleave
.89b6		a4 22		ldy $22		                ldy loopleave+1
.89b8		20 7f 97	jsr $977f	                jsr cmpl_jump   ; emit the JMP chaining prior leave address
.89bb		38		sec		                sec
.89bc		a5 00		lda $00		                lda cp
.89be		e9 02		sbc #$02	                sbc #2
.89c0		85 21		sta $21		                sta loopleave
.89c2		a5 01		lda $01		                lda cp+1
.89c4		b0 01		bcs $89c7	                bcs +
.89c6		3a		dec a		                dea
.89c7		85 22		sta $22		+               sta loopleave+1
.89c9						z_leave:
.89c9		60		rts		                rts
.89ca						xt_left_bracket:
.89ca		64 1a		stz $1a		                stz state
.89cc		64 1b		stz $1b		                stz state+1
.89ce		60		rts		z_left_bracket: rts
.89cf						xt_less_number_sign:
.89cf		20 13 8d	jsr $8d13	                jsr xt_pad      ; ( addr )
.89d2		b5 00		lda $00,x	                lda 0,x
.89d4		85 2b		sta $2b		                sta tohold
.89d6		b5 01		lda $01,x	                lda 1,x
.89d8		85 2c		sta $2c		                sta tohold+1
.89da		e8		inx		                inx
.89db		e8		inx		                inx
.89dc						z_less_number_sign:
.89dc		60		rts		                rts
.89dd						xt_less_than:
.89dd		20 8f d7	jsr $d78f	                jsr underflow_2
.89e0		a0 00		ldy #$00	                ldy #0          ; default false
.89e2		20 c8 d6	jsr $d6c8	                jsr compare_16bit
.89e5		f0 03		beq $89ea	                beq _false
.89e7		30 01		bmi $89ea	                bmi _false
.89e9		88		dey		                dey
.89ea						_false:
.89ea		98		tya		                tya
.89eb		e8		inx		                inx
.89ec		e8		inx		                inx
.89ed		95 00		sta $00,x	                sta 0,x
.89ef		95 01		sta $01,x	                sta 1,x
.89f1		60		rts		z_less_than:    rts
.89f2						xt_literal:
.89f2		20 8a d7	jsr $d78a	                jsr underflow_1
.89f5		a9 0a		lda #$0a	                lda #template_push_tos_size
.89f7		20 a5 97	jsr $97a5	                jsr check_nc_limit
.89fa		90 0c		bcc $8a08	                bcc _inline
.89fc		a0 8a		ldy #$8a	                ldy #>literal_runtime
.89fe		a9 3a		lda #$3a	                lda #<literal_runtime
.8a00		20 7a 97	jsr $977a	                jsr cmpl_subroutine
.8a03		20 cd 83	jsr $83cd	                jsr xt_comma
.8a06		80 27		bra $8a2f	                bra z_literal
.8a08						_inline:
.8a08		a0 94		ldy #$94	                ldy #$94        ; STY opcode
.8a0a		b5 01		lda $01,x	                lda 1,x         ; MSB
.8a0c		d0 02		bne $8a10	                bne +
.8a0e		a0 74		ldy #$74	                ldy #$74        ; STZ opcode
.8a10		5a		phy		+               phy
.8a11		b5 00		lda $00,x	                lda 0,x         ; LSB
.8a13		48		pha		                pha
.8a14		a0 02		ldy #$02	                ldy #2
.8a16		b5 01		lda $01,x	                lda 1,x         ; MSB
.8a18		f0 03		beq $8a1d	                beq _copy
.8a1a		a0 00		ldy #$00	                ldy #0
.8a1c		48		pha		                pha
.8a1d		b9 30 8a	lda $8a30,y	_copy:          lda template_push_tos,y
.8a20		c9 ff		cmp #$ff	                cmp #$ff        ; is it a placeholder?
.8a22		d0 01		bne $8a25	                bne +
.8a24		68		pla		                pla
.8a25		20 8a 97	jsr $978a	+               jsr cmpl_a
.8a28		c8		iny		                iny
.8a29		c0 0a		cpy #$0a	                cpy #template_push_tos_size
.8a2b		d0 f0		bne $8a1d	                bne _copy
.8a2d		e8		inx		                inx             ; drop the literal
.8a2e		e8		inx		                inx
.8a2f		60		rts		z_literal:      rts
.8a30						template_push_tos:
.8a30		a0 ff		ldy #$ff	                ldy #$ff        ; we'll omit this if MSB is zero
.8a32		a9 ff		lda #$ff	                lda #$ff
.8a34		ca		dex		                dex
.8a35		ca		dex		                dex
.8a36		95 00		sta $00,x	                sta 0,x
>8a38		ff 01				                .byte $ff, 1    ; this will become either sty 1,x or stz 1,x
=10						template_push_tos_size = * - template_push_tos
.8a3a						literal_runtime:
.8a3a		ca		dex		                dex
.8a3b		ca		dex		                dex
.8a3c		68		pla		                pla             ; LSB
.8a3d		85 25		sta $25		                sta tmp1
.8a3f		68		pla		                pla             ; MSB
.8a40		85 26		sta $26		                sta tmp1+1
.8a42		a0 01		ldy #$01	                ldy #1
.8a44		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB
.8a46		95 00		sta $00,x	                sta 0,x
.8a48		c8		iny		                iny
.8a49		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB
.8a4b		95 01		sta $01,x	                sta 1,x
.8a4d		98		tya		                tya
.8a4e		18		clc		                clc
.8a4f		65 25		adc $25		                adc tmp1
.8a51		a8		tay		                tay
.8a52		a5 26		lda $26		                lda tmp1+1
.8a54		69 00		adc #$00	                adc #0
.8a56		48		pha		                pha
.8a57		5a		phy		                phy
.8a58		60		rts		                rts
.8a59						xt_loop:
.8a59		ca		dex		                dex
.8a5a		ca		dex		                dex
.8a5b		ca		dex		                dex
.8a5c		ca		dex		                dex
.8a5d		a9 d2		lda #$d2	                lda #<loop_runtime
.8a5f		95 02		sta $02,x	                sta 2,x
.8a61		a9 8a		lda #$8a	                lda #>loop_runtime
.8a63		95 03		sta $03,x	                sta 3,x
.8a65		a9 11		lda #$11	                lda #loop_runtime_size
.8a67		95 00		sta $00,x	                sta 0,x
.8a69		74 01		stz $01,x	                stz 1,x
.8a6b		80 12		bra $8a7f	                bra xt_loop_common
.8a6d						xt_plus_loop:
.8a6d		ca		dex		                dex
.8a6e		ca		dex		                dex
.8a6f		ca		dex		                dex
.8a70		ca		dex		                dex
.8a71		a9 eb		lda #$eb	                lda #<plus_loop_runtime
.8a73		95 02		sta $02,x	                sta 2,x
.8a75		a9 8a		lda #$8a	                lda #>plus_loop_runtime
.8a77		95 03		sta $03,x	                sta 3,x
.8a79		a9 1a		lda #$1a	                lda #plus_loop_runtime_size
.8a7b		95 00		sta $00,x	                sta 0,x
.8a7d		74 01		stz $01,x	                stz 1,x
.8a7f						xt_loop_common:
.8a7f		20 05 8d	jsr $8d05	                jsr xt_over
.8a82		20 28 92	jsr $9228	                jsr xt_swap             ; xt and xt' are the same
.8a85		20 05 97	jsr $9705	                jsr cmpl_by_limit
.8a88		90 05		bcc $8a8f	                bcc _native
.8a8a		20 cd 83	jsr $83cd	                jsr xt_comma
.8a8d		80 03		bra $8a92	                bra +
.8a8f						_native:
.8a8f		20 93 97	jsr $9793	                jsr cmpl_jump_tos
.8a92						+
.8a92		a5 22		lda $22		                lda loopleave+1         ; MSB=0 means we're done
.8a94		f0 19		beq $8aaf	                beq _noleave
.8a96						_next:
.8a96		a0 01		ldy #$01	                ldy #1
.8a98		b1 21		lda ($21),y	                lda (loopleave),y
.8a9a		48		pha		                pha
.8a9b		a5 01		lda $01		                lda cp+1
.8a9d		91 21		sta ($21),y	                sta (loopleave),y
.8a9f		88		dey		                dey
.8aa0		b1 21		lda ($21),y	                lda (loopleave),y
.8aa2		48		pha		                pha
.8aa3		a5 00		lda $00		                lda cp
.8aa5		91 21		sta ($21),y	                sta (loopleave),y
.8aa7		68		pla		                pla
.8aa8		85 21		sta $21		                sta loopleave
.8aaa		68		pla		                pla
.8aab		85 22		sta $22		                sta loopleave+1
.8aad		d0 e7		bne $8a96	                bne _next
.8aaf						_noleave:
.8aaf		b5 00		lda $00,x	                lda 0,x
.8ab1		85 21		sta $21		                sta loopleave
.8ab3		b5 01		lda $01,x	                lda 1,x
.8ab5		85 22		sta $22		                sta loopleave+1
.8ab7		a9 bc		lda #$bc	                lda #<xt_unloop
.8ab9		95 00		sta $00,x	                sta 0,x
.8abb		a9 95		lda #$95	                lda #>xt_unloop
.8abd		95 01		sta $01,x	                sta 1,x
.8abf		20 b2 96	jsr $96b2	                jsr xt_compile_comma
.8ac2		b5 01		lda $01,x	                lda 1,x                 ; MSB=0 means DO so nothing to do
.8ac4		f0 09		beq $8acf	                beq +
.8ac6		20 1b 89	jsr $891b	                jsr xt_here
.8ac9		20 28 92	jsr $9228	                jsr xt_swap
.8acc		4c 12 92	jmp $9212	                jmp xt_store            ; write here as ?DO jmp target and return
.8acf		e8		inx		+               inx                     ; drop the ignored word for DO
.8ad0		e8		inx		                inx
.8ad1						z_loop:
.8ad1		60		rts		z_plus_loop:    rts
.8ad2						loop_runtime:
.8ad2		e6 20		inc $20		                inc loopidx0            ; increment the LSB of loopindex
.8ad4		d0 0d		bne $8ae3	                bne _repeat             ; avoid expensive test most of the time
.8ad6		a4 1f		ldy $1f		                ldy loopctrl
.8ad8		b9 01 01	lda $0101,y	                lda loopindex+1,y
.8adb		1a		inc a		                ina
.8adc		c9 80		cmp #$80	                cmp #$80
.8ade		f0 06		beq $8ae6	                beq _done
.8ae0		99 01 01	sta $0101,y	                sta loopindex+1,y
=17						loop_runtime_size = * - loop_runtime
.8ae3						_repeat:
.8ae3		a9 00		lda #$00	                lda #0
>8ae5		2c				                .byte $2c               ; BIT llhh to hide the lda #1
.8ae6		a9 01		lda #$01	_done:          lda #1
.8ae8		4c 34 98	jmp $9834	                jmp zbranch_runtime
.8aeb						plus_loop_runtime:
.8aeb		18		clc		                clc
.8aec		b5 00		lda $00,x	                lda 0,x                 ; LSB of step
.8aee		65 20		adc $20		                adc loopidx0
.8af0		85 20		sta $20		                sta loopidx0
.8af2		e8		inx		                inx                     ; dump step from TOS before MSB test
.8af3		e8		inx		                inx                     ; since we might skip it
.8af4		b5 ff		lda $ff,x	                lda $FF,x               ; MSB of step since 1,x == -1,x+2
.8af6		d0 02		bne $8afa	                bne _chkv               ; if it's non-zero we have to check
.8af8		90 0b		bcc $8b05	                bcc _repeat             ; but if 0 and no carry, we're good
.8afa		b8		clv		_chkv:          clv
.8afb		a4 1f		ldy $1f		                ldy loopctrl            ; get LCB offset
.8afd		79 01 01	adc $0101,y	                adc loopindex+1,y       ; MSB of index
.8b00		99 01 01	sta $0101,y	                sta loopindex+1,y       ; put MSB of index back on stack
.8b03		70 03		bvs $8b08	                bvs _done               ; skip over JMP instruction
=26						plus_loop_runtime_size = * - plus_loop_runtime
.8b05						_repeat:
.8b05		a9 00		lda #$00	                lda #0
>8b07		2c				                .byte $2c               ; BIT llhh to hide the lda #1
.8b08		a9 01		lda #$01	_done:          lda #1
.8b0a		4c 34 98	jmp $9834	                jmp zbranch_runtime
.8b0d						xt_lshift:
.8b0d		20 8f d7	jsr $d78f	                jsr underflow_2
.8b10		b5 00		lda $00,x	                lda 0,x
.8b12		29 0f		and #$0f	                and #%00001111
.8b14		f0 08		beq $8b1e	                beq _done
.8b16		a8		tay		                tay
.8b17						_loop:
.8b17		16 02		asl $02,x	                asl 2,x
.8b19		36 03		rol $03,x	                rol 3,x
.8b1b		88		dey		                dey
.8b1c		d0 f9		bne $8b17	                bne _loop
.8b1e						_done:
.8b1e		e8		inx		                inx
.8b1f		e8		inx		                inx
.8b20		60		rts		z_lshift:       rts
.8b21						xt_m_star:
.8b21		20 8f d7	jsr $d78f	                jsr underflow_2
.8b24		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8b26		55 03		eor $03,x	                eor 3,x         ; MSB of n2
.8b28		48		pha		                pha
.8b29		20 cf 80	jsr $80cf	                jsr xt_abs
.8b2c		20 28 92	jsr $9228	                jsr xt_swap
.8b2f		20 cf 80	jsr $80cf	                jsr xt_abs
.8b32		20 76 95	jsr $9576	                jsr xt_um_star          ; ( d )
.8b35		68		pla		                pla
.8b36		10 03		bpl $8b3b	                bpl _done
.8b38		20 5f 9e	jsr $9e5f	                jsr xt_dnegate
.8b3b						_done:
.8b3b		60		rts		z_m_star:       rts
.8b3c						xt_marker:
.8b3c		20 e1 d6	jsr $d6e1	                jsr current_to_dp
.8b3f		a5 02		lda $02		                lda dp
.8b41		48		pha		                pha
.8b42		a5 03		lda $03		                lda dp+1
.8b44		48		pha		                pha
.8b45		a5 00		lda $00		                lda cp
.8b47		48		pha		                pha
.8b48		a5 01		lda $01		                lda cp+1
.8b4a		48		pha		                pha
.8b4b		20 40 84	jsr $8440	                jsr xt_create
.8b4e		a5 00		lda $00		                lda cp          ; LSB
.8b50		38		sec		                sec
.8b51		e9 02		sbc #$02	                sbc #2
.8b53		85 00		sta $00		                sta cp
.8b55		b0 02		bcs $8b59	                bcs +
.8b57		c6 01		dec $01		                dec cp+1        ; we only care about the borrow
.8b59						+
.8b59		a0 8b		ldy #$8b	                ldy #>marker_runtime
.8b5b		a9 77		lda #$77	                lda #<marker_runtime
.8b5d		20 86 97	jsr $9786	                jsr cmpl_word
.8b60		7a		ply		                ply                     ; MSB
.8b61		68		pla		                pla                     ; LSB
.8b62		20 86 97	jsr $9786	                jsr cmpl_word
.8b65		7a		ply		                ply                     ; MSB
.8b66		68		pla		                pla                     ; LSB
.8b67		20 86 97	jsr $9786	                jsr cmpl_word
.8b6a		a0 08		ldy #$08	                ldy #marker_start_offset
.8b6c						-
.8b6c		b1 08		lda ($08),y	                lda (up),y
.8b6e		20 8a 97	jsr $978a	                jsr cmpl_a
.8b71		c8		iny		                iny
.8b72		c0 2c		cpy #$2c	                cpy #marker_end_offset
.8b74		d0 f6		bne $8b6c	                bne -
.8b76		60		rts		z_marker:       rts
.8b77						marker_runtime:
.8b77		68		pla		                pla
.8b78		85 25		sta $25		                sta tmp1        ; LSB of address
.8b7a		68		pla		                pla
.8b7b		85 26		sta $26		                sta tmp1+1      ; MSB of address
.8b7d		a0 01		ldy #$01	                ldy #1          ; start at 1 due to RTS mechanics
.8b7f		b1 25		lda ($25),y	                lda (tmp1),y
.8b81		85 00		sta $00		                sta cp
.8b83		c8		iny		                iny
.8b84		b1 25		lda ($25),y	                lda (tmp1),y
.8b86		85 01		sta $01		                sta cp+1
.8b88		c8		iny		                iny
.8b89		b1 25		lda ($25),y	                lda (tmp1),y
.8b8b		85 02		sta $02		                sta dp
.8b8d		c8		iny		                iny
.8b8e		b1 25		lda ($25),y	                lda (tmp1),y
.8b90		85 03		sta $03		                sta dp+1
.8b92		38		sec		                sec
.8b93		a5 25		lda $25		                lda tmp1
.8b95		e9 03		sbc #$03	                sbc #marker_start_offset - 5
.8b97		85 25		sta $25		                sta tmp1
.8b99		b0 02		bcs $8b9d	                bcs +
.8b9b		c6 26		dec $26		                dec tmp1+1
.8b9d						+
.8b9d		a0 08		ldy #$08	                ldy #marker_start_offset
.8b9f						-
.8b9f		b1 25		lda ($25),y	                lda (tmp1),y
.8ba1		91 08		sta ($08),y	                sta (up),y
.8ba3		c8		iny		                iny
.8ba4		c0 2c		cpy #$2c	                cpy #marker_end_offset
.8ba6		d0 f7		bne $8b9f	                bne -
.8ba8		20 f4 d6	jsr $d6f4	                jsr dp_to_current       ; Move the CURRENT DP back.
.8bab		60		rts		                rts
.8bac						xt_max:
.8bac		20 8f d7	jsr $d78f	                jsr underflow_2
.8baf		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.8bb1		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets the carry
.8bb3		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.8bb5		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.8bb7		50 02		bvc $8bbb	                bvc _no_overflow
.8bb9		49 80		eor #$80	                eor #$80        ; complement negative flag
.8bbb						_no_overflow:
.8bbb		30 08		bmi $8bc5	                bmi _keep_nos
.8bbd		b5 00		lda $00,x	                lda 0,x
.8bbf		95 02		sta $02,x	                sta 2,x
.8bc1		b5 01		lda $01,x	                lda 1,x
.8bc3		95 03		sta $03,x	                sta 3,x
.8bc5						_keep_nos:
.8bc5		e8		inx		                inx
.8bc6		e8		inx		                inx
.8bc7		60		rts		z_max:          rts
.8bc8						xt_min:
.8bc8		20 8f d7	jsr $d78f	                jsr underflow_2
.8bcb		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.8bcd		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets carry
.8bcf		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.8bd1		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.8bd3		50 02		bvc $8bd7	                bvc _no_overflow
.8bd5		49 80		eor #$80	                eor #$80
.8bd7						_no_overflow:
.8bd7		10 08		bpl $8be1	                bpl _keep_nos
.8bd9		b5 00		lda $00,x	                lda 0,x
.8bdb		95 02		sta $02,x	                sta 2,x
.8bdd		b5 01		lda $01,x	                lda 1,x
.8bdf		95 03		sta $03,x	                sta 3,x
.8be1						_keep_nos:
.8be1		e8		inx		                inx
.8be2		e8		inx		                inx
.8be3		60		rts		z_min:          rts
.8be4						xt_minus:
.8be4		20 8f d7	jsr $d78f	                jsr underflow_2
.8be7		38		sec		                sec
.8be8		b5 02		lda $02,x	                lda 2,x         ; LSB
.8bea		f5 00		sbc $00,x	                sbc 0,x
.8bec		95 02		sta $02,x	                sta 2,x
.8bee		b5 03		lda $03,x	                lda 3,x         ; MSB
.8bf0		f5 01		sbc $01,x	                sbc 1,x
.8bf2		95 03		sta $03,x	                sta 3,x
.8bf4		e8		inx		                inx
.8bf5		e8		inx		                inx
.8bf6		60		rts		z_minus:        rts
.8bf7						xt_mod:
.8bf7		20 8f d7	jsr $d78f	                jsr underflow_2
.8bfa		20 64 91	jsr $9164	                jsr xt_slash_mod
.8bfd		e8		inx		                inx             ; DROP
.8bfe		e8		inx		                inx
.8bff						z_mod:
.8bff		60		rts		                rts
.8c00						xt_move:
.8c00		b5 03		lda $03,x	                lda 3,x                 ; MSB of addr2
.8c02		d5 05		cmp $05,x	                cmp 5,x                 ; MSB of addr1
.8c04		f0 05		beq $8c0b	                beq _lsb                ; wasn't helpful, move to LSB
.8c06		b0 0e		bcs $8c16	                bcs _to_move_up         ; we want CMOVE>
.8c08		4c 42 9f	jmp $9f42	                jmp xt_cmove            ; JSR/RTS
.8c0b						_lsb:
.8c0b		b5 02		lda $02,x	                lda 2,x                 ; LSB of addr2
.8c0d		d5 04		cmp $04,x	                cmp 4,x                 ; LSB of addr1
.8c0f		f0 08		beq $8c19	                beq _equal              ; LSB is equal as well
.8c11		b0 03		bcs $8c16	                bcs _to_move_up         ; we want CMOVE>
.8c13		4c 42 9f	jmp $9f42	                jmp xt_cmove            ; JSR/RTS
.8c16						_to_move_up:
.8c16		4c 7d 9f	jmp $9f7d	                jmp xt_cmove_up         ; JSR/RTS
.8c19						_equal:
.8c19		8a		txa		                txa
.8c1a		18		clc		                clc
.8c1b		69 06		adc #$06	                adc #6
.8c1d		aa		tax		                tax
.8c1e		60		rts		z_move:         rts
.8c1f						xt_negate:
.8c1f		20 8a d7	jsr $d78a	                jsr underflow_1
.8c22		a9 00		lda #$00	        	lda #0
.8c24		38		sec		                sec
.8c25		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.8c27		95 00		sta $00,x	                sta 0,x
.8c29		a9 00		lda #$00	                lda #0
.8c2b		f5 01		sbc $01,x	                sbc 1,x         ; MSB
.8c2d		95 01		sta $01,x	                sta 1,x
.8c2f		60		rts		z_negate:       rts
.8c30						xt_nip:
.8c30		20 8f d7	jsr $d78f	                jsr underflow_2
.8c33		b5 00		lda $00,x	                lda 0,x         ; LSB
.8c35		95 02		sta $02,x	                sta 2,x
.8c37		b5 01		lda $01,x	                lda 1,x         ; MSB
.8c39		95 03		sta $03,x	                sta 3,x
.8c3b		e8		inx		                inx
.8c3c		e8		inx		                inx
.8c3d		60		rts		z_nip:          rts
.8c3e						xt_not_equals:
.8c3e		20 8f d7	jsr $d78f	                jsr underflow_2
.8c41		a0 00		ldy #$00	                ldy #0                  ; default is true
.8c43		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8c45		d5 02		cmp $02,x	                cmp 2,x
.8c47		d0 0a		bne $8c53	                bne _not_equal
.8c49		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8c4b		d5 03		cmp $03,x	                cmp 3,x
.8c4d		d0 04		bne $8c53	                bne _not_equal
.8c4f		a9 ff		lda #$ff	                lda #$FF
.8c51		80 01		bra $8c54	                bra _done
.8c53						_not_equal:
.8c53		88		dey		                dey                     ; drop thru to done
.8c54						_done:
.8c54		98		tya		                tya
.8c55		e8		inx		                inx
.8c56		e8		inx		                inx
.8c57		95 00		sta $00,x	                sta 0,x
.8c59		95 01		sta $01,x	                sta 1,x
.8c5b		60		rts		z_not_equals:   rts
.8c5c						xt_number_sign:
.8c5c		20 8f d7	jsr $d78f	                jsr underflow_2         ; double number
.8c5f		20 fb 82	jsr $82fb	                jsr xt_base
.8c62		20 1a 88	jsr $881a	                jsr xt_fetch            ; ( ud1 base )
.8c65		20 66 93	jsr $9366	                jsr xt_to_r             ; >r
.8c68		20 f1 9d	jsr $9df1	                jsr xt_zero             ; 0
.8c6b		20 d9 8e	jsr $8ed9	                jsr xt_r_fetch          ; r@
.8c6e		20 34 95	jsr $9534	                jsr xt_um_slash_mod     ; um/mod
.8c71		20 8b 8f	jsr $8f8b	                jsr xt_rot              ; rot
.8c74		20 8b 8f	jsr $8f8b	                jsr xt_rot              ; rot
.8c77		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; r>
.8c7a		20 34 95	jsr $9534	                jsr xt_um_slash_mod     ; um/mod
.8c7d		20 8b 8f	jsr $8f8b	                jsr xt_rot              ; rot
.8c80		20 8b 8f	jsr $8f8b	                jsr xt_rot              ; ( ud rem )
.8c83		b5 00		lda $00,x	                lda 0,x
.8c85		a8		tay		                tay
.8c86		b9 10 d3	lda $d310,y	                lda s_abc_upper,y
.8c89		95 00		sta $00,x	                sta 0,x
.8c8b		74 01		stz $01,x	                stz 1,x                 ; paranoid; now ( ud char )
.8c8d		20 2d 89	jsr $892d	                jsr xt_hold
.8c90						z_number_sign:
.8c90		60		rts		                rts
.8c91						xt_number_sign_greater:
.8c91		20 8f d7	jsr $d78f	                jsr underflow_2         ; double number
.8c94		a5 2b		lda $2b		                lda tohold
.8c96		95 00		sta $00,x	                sta 0,x         ; LSB of tohold
.8c98		95 02		sta $02,x	                sta 2,x
.8c9a		a5 2c		lda $2c		                lda tohold+1
.8c9c		95 01		sta $01,x	                sta 1,x         ; MSB of addr
.8c9e		95 03		sta $03,x	                sta 3,x         ; ( addr addr )
.8ca0		20 13 8d	jsr $8d13	                jsr xt_pad      ; ( addr addr pad )
.8ca3		38		sec		                sec
.8ca4		b5 00		lda $00,x	                lda 0,x         ; LSB of pad address
.8ca6		f5 02		sbc $02,x	                sbc 2,x
.8ca8		95 02		sta $02,x	                sta 2,x
.8caa		b5 01		lda $01,x	                lda 1,x         ; MSB, which should always be zero
.8cac		f5 03		sbc $03,x	                sbc 3,x
.8cae		95 03		sta $03,x	                sta 3,x         ; ( addr u pad )
.8cb0		e8		inx		                inx
.8cb1		e8		inx		                inx
.8cb2						z_number_sign_greater:
.8cb2		60		rts		                rts
.8cb3						xt_number_sign_s:
.8cb3		20 8f d7	jsr $d78f	                jsr underflow_2
.8cb6						_loop:
.8cb6		20 5c 8c	jsr $8c5c	                jsr xt_number_sign
.8cb9		b5 00		lda $00,x	                lda 0,x
.8cbb		15 01		ora $01,x	                ora 1,x
.8cbd		15 02		ora $02,x	                ora 2,x
.8cbf		15 03		ora $03,x	                ora 3,x
.8cc1		d0 f3		bne $8cb6	                bne _loop
.8cc3						z_number_sign_s:
.8cc3		60		rts		                rts
.8cc4						xt_of:
.8cc4		a0 8d		ldy #$8d	                ldy #>xt_over
.8cc6		a9 05		lda #$05	                lda #<xt_over
.8cc8		20 7a 97	jsr $977a	                jsr cmpl_subroutine
.8ccb		a0 87		ldy #$87	                ldy #>xt_equal
.8ccd		a9 96		lda #$96	                lda #<xt_equal
.8ccf		20 7a 97	jsr $977a	                jsr cmpl_subroutine
.8cd2		20 54 89	jsr $8954	                jsr xt_if
.8cd5		a0 86		ldy #$86	                ldy #>xt_drop
.8cd7		a9 9a		lda #$9a	                lda #<xt_drop
.8cd9		20 7a 97	jsr $977a	                jsr cmpl_subroutine
.8cdc		60		rts		z_of:           rts
.8cdd						xt_one_minus:
.8cdd		20 8a d7	jsr $d78a	                jsr underflow_1
.8ce0		b5 00		lda $00,x	                lda 0,x
.8ce2		d0 02		bne $8ce6	                bne +
.8ce4		d6 01		dec $01,x	                dec 1,x
.8ce6						+
.8ce6		d6 00		dec $00,x	                dec 0,x
.8ce8		60		rts		z_one_minus:    rts
.8ce9						xt_char_plus:
.8ce9						xt_one_plus:
.8ce9		20 8a d7	jsr $d78a	                jsr underflow_1
.8cec		f6 00		inc $00,x	                inc 0,x
.8cee		d0 02		bne $8cf2	                bne _done
.8cf0		f6 01		inc $01,x	                inc 1,x
.8cf2						_done:
.8cf2						z_char_plus:
.8cf2		60		rts		z_one_plus:     rts
.8cf3						xt_or:
.8cf3		20 8f d7	jsr $d78f	                jsr underflow_2
.8cf6		b5 00		lda $00,x	                lda 0,x
.8cf8		15 02		ora $02,x	                ora 2,x
.8cfa		95 02		sta $02,x	                sta 2,x
.8cfc		b5 01		lda $01,x	                lda 1,x
.8cfe		15 03		ora $03,x	                ora 3,x
.8d00		95 03		sta $03,x	                sta 3,x
.8d02		e8		inx		                inx
.8d03		e8		inx		                inx
.8d04		60		rts		z_or:           rts
.8d05						xt_over:
.8d05		20 8f d7	jsr $d78f	                jsr underflow_2
.8d08		ca		dex		                dex
.8d09		ca		dex		                dex
.8d0a		b5 04		lda $04,x	                lda 4,x         ; LSB
.8d0c		95 00		sta $00,x	                sta 0,x
.8d0e		b5 05		lda $05,x	                lda 5,x         ; MSB
.8d10		95 01		sta $01,x	                sta 1,x
.8d12		60		rts		z_over:         rts
.8d13						xt_pad:
.8d13		ca		dex		                dex
.8d14		ca		dex		                dex
.8d15		a5 00		lda $00		                lda cp
.8d17		18		clc		                clc
.8d18		69 ff		adc #$ff	                adc #padoffset  ; assumes padoffset one byte in size
.8d1a		95 00		sta $00,x	                sta 0,x
.8d1c		a5 01		lda $01		                lda cp+1
.8d1e		69 00		adc #$00	                adc #0          ; only need carry
.8d20		95 01		sta $01,x	                sta 1,x
.8d22		60		rts		z_pad:          rts
.8d23						xt_page:
.8d23		a9 1b		lda #$1b	                lda #AscESC
.8d25		20 c5 86	jsr $86c5	                jsr emit_a
.8d28		a9 5b		lda #$5b	                lda #'['
.8d2a		20 c5 86	jsr $86c5	                jsr emit_a
.8d2d		a9 32		lda #$32	                lda #'2'
.8d2f		20 c5 86	jsr $86c5	                jsr emit_a
.8d32		a9 4a		lda #$4a	                lda #'J'
.8d34		20 c5 86	jsr $86c5	                jsr emit_a
.8d37		20 f1 9d	jsr $9df1	                jsr xt_zero
.8d3a		20 f1 9d	jsr $9df1	                jsr xt_zero
.8d3d		20 a2 82	jsr $82a2	                jsr xt_at_xy
.8d40		60		rts		z_page:         rts
.8d41						xt_paren:
.8d41		ca		dex		                dex
.8d42		ca		dex		                dex
.8d43		a9 29		lda #$29	                lda #41     ; Right parenthesis
.8d45		95 00		sta $00,x	                sta 0,x
.8d47		74 01		stz $01,x	                stz 1,x
.8d49		20 ac 8d	jsr $8dac	                jsr xt_parse
.8d4c		e8		inx		                inx
.8d4d		e8		inx		                inx
.8d4e		e8		inx		                inx
.8d4f		e8		inx		                inx
.8d50		60		rts		z_paren:        rts
.8d51						xt_parse_name:
.8d51		a5 0e		lda $0e		                lda ciblen              ; LSB of counter
.8d53		38		sec		                sec
.8d54		e5 10		sbc $10		                sbc toin
.8d56		85 25		sta $25		                sta tmp1
.8d58		a5 0f		lda $0f		                lda ciblen+1            ; MSB
.8d5a		e5 11		sbc $11		                sbc toin+1
.8d5c		85 26		sta $26		                sta tmp1+1
.8d5e		a5 25		lda $25		                lda tmp1
.8d60		05 26		ora $26		                ora tmp1+1
.8d62		f0 28		beq $8d8c	                beq _empty_line
.8d64		a5 0c		lda $0c		                lda cib
.8d66		18		clc		                clc
.8d67		65 10		adc $10		                adc toin
.8d69		85 27		sta $27		                sta tmp2                ; LSB of first character
.8d6b		a5 0d		lda $0d		                lda cib+1
.8d6d		65 11		adc $11		                adc toin+1
.8d6f		85 28		sta $28		                sta tmp2+1              ; MSB
.8d71						_skip_loop:
.8d71		b2 27		lda ($27)	                lda (tmp2)              ; work copy of cib
.8d73		20 7d d7	jsr $d77d	                jsr is_whitespace
.8d76		90 1f		bcc $8d97	                bcc _char_found
.8d78		e6 27		inc $27		                inc tmp2
.8d7a		d0 02		bne $8d7e	                bne +
.8d7c		e6 28		inc $28		                inc tmp2+1
.8d7e						+
.8d7e		a5 25		lda $25		                lda tmp1
.8d80		d0 02		bne $8d84	                bne +
.8d82		c6 26		dec $26		                dec tmp1+1
.8d84		c6 25		dec $25		+               dec tmp1
.8d86		a5 25		lda $25		                lda tmp1
.8d88		05 26		ora $26		                ora tmp1+1
.8d8a		d0 e5		bne $8d71	                bne _skip_loop          ; fall through if empty line
.8d8c						_empty_line:
.8d8c		ca		dex		                dex
.8d8d		ca		dex		                dex
.8d8e		ca		dex		                dex
.8d8f		ca		dex		                dex
.8d90		74 00		stz $00,x	                stz 0,x                 ; TOS is zero
.8d92		74 01		stz $01,x	                stz 1,x
.8d94		4c 41 8e	jmp $8e41	                jmp z_parse_name        ; skip over PARSE
.8d97						_char_found:
.8d97		a5 27		lda $27		                lda tmp2
.8d99		38		sec		                sec
.8d9a		e5 0c		sbc $0c		                sbc cib
.8d9c		85 10		sta $10		                sta toin
.8d9e		a5 28		lda $28		                lda tmp2+1
.8da0		e5 0d		sbc $0d		                sbc cib+1
.8da2		85 11		sta $11		                sta toin+1
.8da4		ca		dex		                dex
.8da5		ca		dex		                dex
.8da6		a9 20		lda #$20	                lda #AscSP
.8da8		95 00		sta $00,x	                sta 0,x
.8daa		74 01		stz $01,x	                stz 1,x                 ; paranoid, now ( "name" c )
.8dac						xt_parse:
.8dac		20 8a d7	jsr $d78a	                jsr underflow_1
.8daf		a5 0e		lda $0e		                lda ciblen
.8db1		05 0f		ora $0f		                ora ciblen+1
.8db3		f0 0c		beq $8dc1	                beq _abort_parse
.8db5		a5 11		lda $11		                lda toin+1              ; MSB
.8db7		c5 0f		cmp $0f		                cmp ciblen+1
.8db9		90 0e		bcc $8dc9	                bcc _go_parse           ; unsigned comparison
.8dbb		a5 10		lda $10		                lda toin                ; LSB
.8dbd		c5 0e		cmp $0e		                cmp ciblen
.8dbf		90 08		bcc $8dc9	                bcc _go_parse
.8dc1						_abort_parse:
.8dc1		ca		dex		                dex
.8dc2		ca		dex		                dex
.8dc3		74 00		stz $00,x	                stz 0,x
.8dc5		74 01		stz $01,x	                stz 1,x
.8dc7		80 78		bra $8e41	                bra _done
.8dc9						_go_parse:
.8dc9		b5 00		lda $00,x	                lda 0,x
.8dcb		85 23		sta $23		                sta tmptos
.8dcd		ca		dex		                dex
.8dce		ca		dex		                dex
.8dcf		a5 0c		lda $0c		                lda cib
.8dd1		18		clc		                clc
.8dd2		65 10		adc $10		                adc toin        ; LSB
.8dd4		85 25		sta $25		                sta tmp1
.8dd6		85 27		sta $27		                sta tmp2
.8dd8		95 02		sta $02,x	                sta 2,x
.8dda		a5 0d		lda $0d		                lda cib+1
.8ddc		65 11		adc $11		                adc toin+1      ; MSB
.8dde		85 26		sta $26		                sta tmp1+1
.8de0		85 28		sta $28		                sta tmp2+1
.8de2		95 03		sta $03,x	                sta 3,x
.8de4		a5 0c		lda $0c		                lda cib
.8de6		18		clc		                clc
.8de7		65 0e		adc $0e		                adc ciblen
.8de9		85 29		sta $29		                sta tmp3
.8deb		a5 0d		lda $0d		                lda cib+1
.8ded		65 0f		adc $0f		                adc ciblen+1
.8def		85 2a		sta $2a		                sta tmp3+1
.8df1		64 24		stz $24		                stz tmptos+1
.8df3						_loop:
.8df3		a5 27		lda $27		                lda tmp2
.8df5		c5 29		cmp $29		                cmp tmp3
.8df7		d0 06		bne $8dff	                bne _not_empty
.8df9		a5 28		lda $28		                lda tmp2+1
.8dfb		c5 2a		cmp $2a		                cmp tmp3+1
.8dfd		f0 1d		beq $8e1c	                beq _eol
.8dff						_not_empty:
.8dff		b2 27		lda ($27)	                lda (tmp2)
.8e01		a4 23		ldy $23		                ldy tmptos
.8e03		c0 20		cpy #$20	                cpy #AscSP
.8e05		d0 07		bne $8e0e	                bne _not_whitespace
.8e07		20 7d d7	jsr $d77d	                jsr is_whitespace
.8e0a		90 02		bcc $8e0e	                bcc _not_whitespace
.8e0c		80 0c		bra $8e1a	                bra _found_delimiter
.8e0e						_not_whitespace:
.8e0e		c5 23		cmp $23		                cmp tmptos
.8e10		f0 08		beq $8e1a	                beq _found_delimiter
.8e12		e6 27		inc $27		                inc tmp2
.8e14		d0 dd		bne $8df3	                bne _loop
.8e16		e6 28		inc $28		                inc tmp2+1
.8e18		80 d9		bra $8df3	                bra _loop
.8e1a						_found_delimiter:
.8e1a		e6 24		inc $24		                inc tmptos+1
.8e1c						_eol:
.8e1c		a5 27		lda $27		                lda tmp2
.8e1e		38		sec		                sec
.8e1f		e5 25		sbc $25		                sbc tmp1
.8e21		95 00		sta $00,x	                sta 0,x
.8e23		a5 28		lda $28		                lda tmp2+1
.8e25		e5 26		sbc $26		                sbc tmp1+1
.8e27		95 01		sta $01,x	                sta 1,x
.8e29		a5 27		lda $27		                lda tmp2
.8e2b		38		sec		                sec
.8e2c		e5 0c		sbc $0c		                sbc cib
.8e2e		85 10		sta $10		                sta toin
.8e30		a5 28		lda $28		                lda tmp2+1
.8e32		e5 0d		sbc $0d		                sbc cib+1
.8e34		85 11		sta $11		                sta toin+1
.8e36		a5 10		lda $10		                lda toin
.8e38		18		clc		                clc
.8e39		65 24		adc $24		                adc tmptos+1
.8e3b		85 10		sta $10		                sta toin
.8e3d		90 02		bcc $8e41	                bcc +
.8e3f		e6 11		inc $11		                inc toin+1
.8e41						+
.8e41						_done:
.8e41						z_parse_name:
.8e41		60		rts		z_parse:        rts
.8e42						xt_pick:
.8e42		16 00		asl $00,x	                asl 0,x         ; we assume u < 128 (stack is small)
.8e44		8a		txa		                txa
.8e45		75 00		adc $00,x	                adc 0,x
.8e47		a8		tay		                tay
.8e48		b9 02 00	lda $0002,y	                lda 0002,y
.8e4b		95 00		sta $00,x	                sta 0,x
.8e4d		b9 03 00	lda $0003,y	                lda 0003,y
.8e50		95 01		sta $01,x	                sta 1,x
.8e52		60		rts		z_pick:         rts
.8e53						xt_plus:
.8e53		20 8f d7	jsr $d78f	                jsr underflow_2
.8e56		18		clc		                clc
.8e57		b5 00		lda $00,x	                lda 0,x         ; LSB
.8e59		75 02		adc $02,x	                adc 2,x
.8e5b		95 02		sta $02,x	                sta 2,x
.8e5d		b5 01		lda $01,x	                lda 1,x         ; MSB. No CLC, conserve carry bit
.8e5f		75 03		adc $03,x	                adc 3,x
.8e61		95 03		sta $03,x	                sta 3,x
.8e63		e8		inx		                inx
.8e64		e8		inx		                inx
.8e65		60		rts		z_plus:         rts
.8e66						xt_plus_store:
.8e66		20 8f d7	jsr $d78f	                jsr underflow_2
.8e69		b5 00		lda $00,x	                lda 0,x
.8e6b		85 25		sta $25		                sta tmp1
.8e6d		b5 01		lda $01,x	                lda 1,x
.8e6f		85 26		sta $26		                sta tmp1+1
.8e71		a0 00		ldy #$00	                ldy #0          ; LSB
.8e73		b1 25		lda ($25),y	                lda (tmp1),y
.8e75		18		clc		                clc
.8e76		75 02		adc $02,x	                adc 2,x
.8e78		91 25		sta ($25),y	                sta (tmp1),y
.8e7a		c8		iny		                iny             ; MSB
.8e7b		b1 25		lda ($25),y	                lda (tmp1),y
.8e7d		75 03		adc $03,x	                adc 3,x
.8e7f		91 25		sta ($25),y	                sta (tmp1),y
.8e81		e8		inx		                inx
.8e82		e8		inx		                inx
.8e83		e8		inx		                inx
.8e84		e8		inx		                inx
.8e85		60		rts		z_plus_store:   rts
.8e86						xt_postpone:
.8e86		20 51 8d	jsr $8d51	                jsr xt_parse_name               ; ( -- addr n )
.8e89		b5 00		lda $00,x	                lda 0,x
.8e8b		15 01		ora $01,x	                ora 1,x
.8e8d		d0 05		bne $8e94	                bne +
.8e8f		a9 05		lda #$05	                lda #err_noname
.8e91		4c a0 d7	jmp $d7a0	                jmp error
.8e94						+
.8e94		20 f0 9a	jsr $9af0	                jsr xt_find_name                ; ( -- nt | 0 )
.8e97		d0 05		bne $8e9e	                bne +
.8e99		a9 05		lda #$05	                lda #err_noname
.8e9b		4c a0 d7	jmp $d7a0	                jmp error
.8e9e						+
.8e9e		b5 00		lda $00,x	                lda 0,x
.8ea0		85 25		sta $25		                sta tmp1
.8ea2		b5 01		lda $01,x	                lda 1,x
.8ea4		85 26		sta $26		                sta tmp1+1
.8ea6		20 2e 9c	jsr $9c2e	                jsr xt_name_to_int              ; ( nt -- xt )
.8ea9		e6 25		inc $25		                inc tmp1
.8eab		d0 02		bne $8eaf	                bne +
.8ead		e6 26		inc $26		                inc tmp1+1
.8eaf						+
.8eaf		b2 25		lda ($25)	                lda (tmp1)
.8eb1		29 04		and #$04	                and #IM         ; mask all but Intermediate flag
.8eb3		f0 05		beq $8eba	                beq _not_immediate
.8eb5		20 b2 96	jsr $96b2	                jsr xt_compile_comma
.8eb8		80 0a		bra $8ec4	                bra _done
.8eba						_not_immediate:
.8eba		20 f2 89	jsr $89f2	                jsr xt_literal
.8ebd		a0 96		ldy #$96	                ldy #>xt_compile_comma
.8ebf		a9 b2		lda #$b2	                lda #<xt_compile_comma
.8ec1		20 7a 97	jsr $977a	                jsr cmpl_subroutine
.8ec4						_done:
.8ec4		60		rts		z_postpone:     rts
.8ec5						xt_question_dup:
.8ec5		20 8a d7	jsr $d78a	                jsr underflow_1
.8ec8		b5 00		lda $00,x	                lda 0,x
.8eca		15 01		ora $01,x	                ora 1,x
.8ecc		f0 0a		beq $8ed8	                beq _done
.8ece		ca		dex		                dex
.8ecf		ca		dex		                dex
.8ed0		b5 02		lda $02,x	                lda 2,x
.8ed2		95 00		sta $00,x	                sta 0,x
.8ed4		b5 03		lda $03,x	                lda 3,x
.8ed6		95 01		sta $01,x	                sta 1,x
.8ed8						_done:
.8ed8		60		rts		z_question_dup: rts
.8ed9						xt_r_fetch:
.8ed9		7a		ply		                ply             ; LSB
.8eda		84 25		sty $25		                sty tmp1
.8edc		7a		ply		                ply             ; MSB
.8edd		ca		dex		                dex
.8ede		ca		dex		                dex
.8edf		68		pla		                pla             ; LSB
.8ee0		95 00		sta $00,x	                sta 0,x
.8ee2		68		pla		                pla             ; MSB
.8ee3		95 01		sta $01,x	                sta 1,x
.8ee5		48		pha		                pha
.8ee6		b5 00		lda $00,x	                lda 0,x
.8ee8		48		pha		                pha
.8ee9		5a		phy		                phy             ; MSB
.8eea		a4 25		ldy $25		                ldy tmp1
.8eec		5a		phy		                phy             ; LSB
.8eed		60		rts		z_r_fetch:      rts
.8eee						xt_r_from:
.8eee		68		pla		                pla             ; LSB
.8eef		85 23		sta $23		                sta tmptos
.8ef1		7a		ply		                ply             ; MSB
.8ef2		ca		dex		                dex
.8ef3		ca		dex		                dex
.8ef4		68		pla		                pla             ; LSB
.8ef5		95 00		sta $00,x	                sta 0,x
.8ef7		68		pla		                pla             ; MSB
.8ef8		95 01		sta $01,x	                sta 1,x
.8efa		5a		phy		                phy             ; MSB
.8efb		a5 23		lda $23		                lda tmptos
.8efd		48		pha		                pha             ; LSB
.8efe		60		rts		z_r_from:       rts
.8eff						xt_recurse:
.8eff		a0 00		ldy #$00	                ldy #0
.8f01		a9 20		lda #$20	                lda #OpJSR
.8f03		91 00		sta ($00),y	                sta (cp),y
.8f05		c8		iny		                iny
.8f06		24 1c		bit $1c		                bit status
.8f08		70 0c		bvs $8f16	                bvs _nt_in_workword
.8f0a		a5 06		lda $06		                lda workword
.8f0c		91 00		sta ($00),y	                sta (cp),y
.8f0e		c8		iny		                iny
.8f0f		a5 07		lda $07		                lda workword+1
.8f11		91 00		sta ($00),y	                sta (cp),y
.8f13		c8		iny		                iny
.8f14		80 1b		bra $8f31	                bra _update_cp
.8f16						_nt_in_workword:
.8f16		a5 06		lda $06		                lda workword            ; LSB
.8f18		18		clc		                clc
.8f19		69 04		adc #$04	                adc #4
.8f1b		85 25		sta $25		                sta tmp1
.8f1d		a5 07		lda $07		                lda workword+1          ; MSB
.8f1f		69 00		adc #$00	                adc #0
.8f21		85 26		sta $26		                sta tmp1+1
.8f23		b2 25		lda ($25)	                lda (tmp1)
.8f25		91 00		sta ($00),y	                sta (cp),y
.8f27		5a		phy		                phy
.8f28		a0 01		ldy #$01	                ldy #1
.8f2a		b1 25		lda ($25),y	                lda (tmp1),y
.8f2c		7a		ply		                ply
.8f2d		c8		iny		                iny
.8f2e		91 00		sta ($00),y	                sta (cp),y
.8f30		c8		iny		                iny
.8f31						_update_cp:
.8f31		98		tya		                tya
.8f32		18		clc		                clc
.8f33		65 00		adc $00		                adc cp
.8f35		85 00		sta $00		                sta cp
.8f37		90 02		bcc $8f3b	                bcc _done
.8f39		e6 01		inc $01		                inc cp+1
.8f3b						_done:
.8f3b		60		rts		z_recurse:      rts
.8f3c						xt_refill:
.8f3c		a5 0a		lda $0a		                lda insrc               ; cheat: We only check LSB
.8f3e		d0 2d		bne $8f6d	                bne _src_not_kbd
.8f40		ca		dex		                dex
.8f41		ca		dex		                dex
.8f42		ca		dex		                dex
.8f43		ca		dex		                dex
.8f44		a5 0c		lda $0c		                lda cib                 ; address of CIB is NOS
.8f46		95 02		sta $02,x	                sta 2,x
.8f48		a5 0d		lda $0d		                lda cib+1
.8f4a		95 03		sta $03,x	                sta 3,x
.8f4c		64 0e		stz $0e		                stz ciblen              ; go in with empty buffer
.8f4e		64 0f		stz $0f		                stz ciblen+1
.8f50		a9 ff		lda #$ff	                lda #bsize              ; max number of chars is TOS
.8f52		95 00		sta $00,x	                sta 0,x
.8f54		74 01		stz $01,x	                stz 1,x                 ; cheat: We only accept max 255
.8f56		20 e4 80	jsr $80e4	                jsr xt_accept           ; ( addr n1 -- n2)
.8f59		b5 00		lda $00,x	                lda 0,x
.8f5b		85 0e		sta $0e		                sta ciblen
.8f5d		b5 01		lda $01,x	                lda 1,x
.8f5f		85 0f		sta $0f		                sta ciblen+1            ; though we only accept 255 chars
.8f61		64 10		stz $10		                stz toin
.8f63		64 11		stz $11		                stz toin+1
.8f65		a9 ff		lda #$ff	                lda #$FF                ; overwrite with TRUE flag
.8f67		95 00		sta $00,x	                sta 0,x
.8f69		95 01		sta $01,x	                sta 1,x
.8f6b		80 10		bra $8f7d	                bra _done
.8f6d						_src_not_kbd:
.8f6d		1a		inc a		                ina
.8f6e		d0 08		bne $8f78	                bne _src_not_string
.8f70		ca		dex		                dex
.8f71		ca		dex		                dex
.8f72		74 00		stz $00,x	                stz 0,x
.8f74		74 01		stz $01,x	                stz 1,x
.8f76		80 05		bra $8f7d	                bra z_refill
.8f78						_src_not_string:
.8f78		a9 01		lda #$01	                lda #err_badsource
.8f7a		4c a0 d7	jmp $d7a0	                jmp error
.8f7d						_done:
.8f7d		60		rts		z_refill:       rts
.8f7e						xt_repeat:
.8f7e		20 1f 82	jsr $821f	                jsr xt_again
.8f81		4c b4 86	jmp $86b4	                jmp xt_then
.8f84						z_repeat:
.8f84						xt_right_bracket:
.8f84		a9 ff		lda #$ff	                lda #$FF
.8f86		85 1a		sta $1a		                sta state
.8f88		85 1b		sta $1b		                sta state+1
.8f8a						z_right_bracket:
.8f8a		60		rts		                rts
.8f8b						xt_rot:
.8f8b		20 94 d7	jsr $d794	                jsr underflow_3
.8f8e		b4 05		ldy $05,x	                ldy 5,x         ; MSB first
.8f90		b5 03		lda $03,x	                lda 3,x
.8f92		95 05		sta $05,x	                sta 5,x
.8f94		b5 01		lda $01,x	                lda 1,x
.8f96		95 03		sta $03,x	                sta 3,x
.8f98		94 01		sty $01,x	                sty 1,x
.8f9a		b4 04		ldy $04,x	                ldy 4,x         ; LSB next
.8f9c		b5 02		lda $02,x	                lda 2,x
.8f9e		95 04		sta $04,x	                sta 4,x
.8fa0		b5 00		lda $00,x	                lda 0,x
.8fa2		95 02		sta $02,x	                sta 2,x
.8fa4		94 00		sty $00,x	                sty 0,x
.8fa6		60		rts		z_rot:          rts
.8fa7						xt_rshift:
.8fa7		20 8f d7	jsr $d78f	                jsr underflow_2
.8faa		b5 00		lda $00,x	                lda 0,x
.8fac		29 0f		and #$0f	                and #%00001111
.8fae		f0 08		beq $8fb8	                beq _done               ; if 0 shifts, quit
.8fb0		a8		tay		                tay
.8fb1						_loop:
.8fb1		56 03		lsr $03,x	                lsr 3,x
.8fb3		76 02		ror $02,x	                ror 2,x
.8fb5		88		dey		                dey
.8fb6		d0 f9		bne $8fb1	                bne _loop
.8fb8						_done:
.8fb8		e8		inx		                inx
.8fb9		e8		inx		                inx
.8fba		60		rts		z_rshift:       rts
.8fbb						xt_s_backslash_quote:
.8fbb		a9 ff		lda #$ff	                lda #$FF
.8fbd		85 27		sta $27		                sta tmp2
.8fbf		64 28		stz $28		                stz tmp2+1
.8fc1		20 d8 8f	jsr $8fd8	                jsr s_quote_start
.8fc4						z_s_backslash_quote:
.8fc4		60		rts		                rts
.8fc5						convert_hex_value:
.8fc5		c9 41		cmp #$41	        cmp #'A'
.8fc7		90 07		bcc $8fd0	        bcc _digit
.8fc9		29 df		and #$df	        and #$DF                ; Make it uppercase.
.8fcb		38		sec		        sec
.8fcc		e9 37		sbc #$37	        sbc #'7'                ; gives value 10 for 'A'
.8fce		80 03		bra $8fd3	        bra _done
.8fd0						_digit:
.8fd0		38		sec		        sec
.8fd1		e9 30		sbc #$30	        sbc #'0'
.8fd3						_done:
.8fd3		60		rts		        rts
.8fd4						xt_s_quote:
.8fd4		64 27		stz $27		                stz tmp2
.8fd6		64 28		stz $28		                stz tmp2+1
.8fd8						s_quote_start:
.8fd8		20 9b 97	jsr $979b	                jsr cmpl_jump_later
.8fdb		20 1b 89	jsr $891b	                jsr xt_here             ; the start of the string
.8fde						_savechars_loop:
.8fde		a5 11		lda $11		                lda toin+1              ; MSB
.8fe0		c5 0f		cmp $0f		                cmp ciblen+1
.8fe2		90 2a		bcc $900e	                bcc _input_fine         ; unsigned comparison
.8fe4		a5 10		lda $10		                lda toin                ; LSB
.8fe6		c5 0e		cmp $0e		                cmp ciblen
.8fe8		90 24		bcc $900e	                bcc _input_fine
.8fea		a5 27		lda $27		                lda tmp2
.8fec		48		pha		                pha
.8fed		a5 28		lda $28		                lda tmp2+1
.8fef		48		pha		                pha
.8ff0		a5 29		lda $29		                lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
.8ff2		48		pha		                pha
.8ff3		20 3c 8f	jsr $8f3c	                jsr xt_refill           ; ( -- f )
.8ff6		68		pla		                pla
.8ff7		85 29		sta $29		                sta tmp3
.8ff9		68		pla		                pla
.8ffa		85 28		sta $28		                sta tmp2+1
.8ffc		68		pla		                pla
.8ffd		85 27		sta $27		                sta tmp2
.8fff		b5 00		lda $00,x	                lda 0,x
.9001		15 01		ora $01,x	                ora 1,x
.9003		d0 05		bne $900a	                bne _refill_ok
.9005		a9 06		lda #$06	                lda #err_refill
.9007		4c a0 d7	jmp $d7a0	                jmp error
.900a						_refill_ok:
.900a		e8		inx		                inx
.900b		e8		inx		                inx
.900c		80 d0		bra $8fde	                bra _savechars_loop
.900e						_input_fine:
.900e		a5 0c		lda $0c		                lda cib
.9010		18		clc		                clc
.9011		65 10		adc $10		                adc toin        ; LSB
.9013		85 25		sta $25		                sta tmp1
.9015		a5 0d		lda $0d		                lda cib+1
.9017		65 11		adc $11		                adc toin+1      ; MSB
.9019		85 26		sta $26		                sta tmp1+1
.901b		b2 25		lda ($25)	                lda (tmp1)
.901d		24 27		bit $27		                bit tmp2
.901f		30 03		bmi $9024	                bmi _handle_escapes    ; Only checking bit 7
.9021		4c a7 90	jmp $90a7	                jmp _regular_char
.9024						_handle_escapes:
.9024		24 28		bit $28		                bit tmp2+1
.9026		30 03		bmi $902b	                bmi _escaped
.9028		4c 9d 90	jmp $909d	                jmp _not_escaped
.902b						_escaped:
.902b		70 3c		bvs $9069	                bvs _check_esc_chars
.902d		a9 01		lda #$01	                lda #1
.902f		24 28		bit $28		                bit tmp2+1
.9031		d0 10		bne $9043	                bne _esc_x_second_digit
.9033		e6 28		inc $28		                inc tmp2+1  ; Adjust flag for second digit next time.
.9035		b2 25		lda ($25)	                lda (tmp1)  ; Get the char again.
.9037		20 c5 8f	jsr $8fc5	                jsr convert_hex_value
.903a		0a		asl a		                asl
.903b		0a		asl a		                asl
.903c		0a		asl a		                asl
.903d		0a		asl a		                asl
.903e		85 29		sta $29		                sta tmp3    ; Save it for later.
.9040		4c ae 90	jmp $90ae	                jmp _next_character
.9043						_esc_x_second_digit:
.9043		64 28		stz $28		                stz tmp2+1
.9045		b2 25		lda ($25)	                lda (tmp1)
.9047		20 c5 8f	jsr $8fc5	                jsr convert_hex_value
.904a		05 29		ora $29		                ora tmp3
.904c		4c ab 90	jmp $90ab	                jmp _save_character
.904f						_esc_tr_table:
>904f		07				    .byte   7               ; a -> BEL (ASCII value 7)
>9050		08				    .byte   8               ; b -> Backspace (ASCII value 8)
>9051		00 00				    .byte   0,0             ; c, d no escape
>9053		1b				    .byte   27              ; e -> ESC (ASCII value 27)
>9054		0c				    .byte   12              ; f -> FF (ASCII value 12)
>9055		00 00 00 00 00			    .byte   0,0,0,0,0       ; g,h,i,j,k
>905a		0a				    .byte   10              ; l -> LF (ASCII value 10)
>905b		8d				    .byte   13+128          ; m -> CR/LF pair (ASCII values 13, 10)
>905c		0a				    .byte   10              ; n behaves like l --> lf
>905d		00 00				    .byte   0,0             ; o,p
>905f		22				    .byte   34              ; q -> Double quote (ASCII value 34)
>9060		0d				    .byte   13              ; r ->  CR (ASCII value 13)
>9061		00				    .byte   0               ; s
>9062		09				    .byte   9               ; t -> Horizontal TAB (ASCII value 9)
>9063		00				    .byte   0               ; u
>9064		0b				    .byte   11              ; v -> Vertical TAB (ASCII value 11)
>9065		00 00 00			    .byte   0,0,0           ; w,x,y   (x is a special case later)
>9068		80				    .byte   0+128           ; z -> NULL (ASCII value 0)
.9069						_check_esc_chars:
.9069		64 28		stz $28		                stz tmp2+1
.906b		c9 61		cmp #$61	                cmp #'a'
.906d		30 1a		bmi $9089	                bmi _check_esc_quote
.906f		c9 7b		cmp #$7b	                cmp #'z'+1
.9071		10 16		bpl $9089	                bpl _check_esc_quote
.9073		a8		tay		                tay
.9074		b9 ee 8f	lda $8fee,y	                lda _esc_tr_table - 'a',y   ; fake base address to index with a-z directly
.9077		d0 03		bne $907c	                bne _esc_replace
.9079		98		tya		                tya                     ; revert if no translation
.907a		80 0d		bra $9089	                bra _check_esc_quote
.907c		10 2d		bpl $90ab	_esc_replace:   bpl _save_character     ; simple replacement
.907e		29 7f		and #$7f	                and #$7F                ; clear hi bit
.9080		f0 29		beq $90ab	                beq _save_character     ; NUL we can just output
.9082		20 8a 97	jsr $978a	                jsr cmpl_a              ; else output first char (CR)
.9085		a9 0a		lda #$0a	                lda #10                 ; followed by LF
.9087		80 22		bra $90ab	                bra _save_character
.9089						_check_esc_quote:
.9089		c9 22		cmp #$22	                cmp #'"'
.908b		f0 1e		beq $90ab	                beq _save_character
.908d		c9 78		cmp #$78	                cmp #'x'
.908f		d0 06		bne $9097	                bne _check_esc_backslash
.9091		a9 be		lda #$be	                lda #%10111110        ; Clear bits 6 and 0
.9093		85 28		sta $28		                sta tmp2+1
.9095		80 17		bra $90ae	                bra _next_character
.9097						_check_esc_backslash:
.9097		c9 5c		cmp #$5c	                cmp #'\'
.9099		d0 0c		bne $90a7	                bne _regular_char
.909b		80 0e		bra $90ab	                bra _save_character
.909d						_not_escaped:
.909d		c9 5c		cmp #$5c	                cmp #'\'
.909f		d0 06		bne $90a7	                bne _regular_char
.90a1		a9 ff		lda #$ff	                lda #$FF
.90a3		85 28		sta $28		                sta tmp2+1
.90a5		80 07		bra $90ae	                bra _next_character
.90a7						_regular_char:
.90a7		c9 22		cmp #$22	                cmp #'"'
.90a9		f0 0c		beq $90b7	                beq _found_string_end
.90ab						_save_character:
.90ab		20 8a 97	jsr $978a	                jsr cmpl_a
.90ae						_next_character:
.90ae		e6 10		inc $10		                inc toin
.90b0		d0 02		bne $90b4	                bne _savechars_loop_longjump
.90b2		e6 11		inc $11		                inc toin+1
.90b4						_savechars_loop_longjump:
.90b4		4c de 8f	jmp $8fde	                jmp _savechars_loop
.90b7						_found_string_end:
.90b7		e6 10		inc $10		                inc toin
.90b9		d0 02		bne $90bd	                bne +
.90bb		e6 11		inc $11		                inc toin+1
.90bd						+
.90bd		20 1b 89	jsr $891b	                jsr xt_here
.90c0		20 8b 8f	jsr $8f8b	                jsr xt_rot
.90c3		20 12 92	jsr $9212	                jsr xt_store    ; Update the jmp target
.90c6		20 1b 89	jsr $891b	                jsr xt_here
.90c9		20 05 8d	jsr $8d05	                jsr xt_over
.90cc		20 e4 8b	jsr $8be4	                jsr xt_minus    ; HERE - addr gives string length
.90cf		a5 1a		lda $1a		                lda state
.90d1		05 1b		ora $1b		                ora state+1             ; paranoid
.90d3		f0 03		beq $90d8	                beq _done
.90d5		20 5c a1	jsr $a15c	                jsr cmpl_sliteral         ; ( addr u -- )
.90d8						_done:
.90d8		60		rts		z_s_quote:      rts
.90d9						xt_s_to_d:
.90d9		20 8a d7	jsr $d78a	                jsr underflow_1
.90dc		ca		dex		                dex
.90dd		ca		dex		                dex
.90de		74 00		stz $00,x	                stz 0,x
.90e0		74 01		stz $01,x	                stz 1,x
.90e2		b5 03		lda $03,x	                lda 3,x
.90e4		10 04		bpl $90ea	                bpl _done
.90e6		d6 00		dec $00,x	                dec 0,x
.90e8		d6 01		dec $01,x	                dec 1,x
.90ea						_done:
.90ea		60		rts		z_s_to_d:       rts
.90eb						xt_semicolon:
.90eb		24 1c		bit $1c		                bit status
.90ed		70 11		bvs $9100	                bvs _colonword
.90ef		a9 60		lda #$60	                lda #OpRTS
.90f1		20 8a 97	jsr $978a	                jsr cmpl_a
.90f4		ca		dex		                dex
.90f5		ca		dex		                dex
.90f6		a5 06		lda $06		                lda workword
.90f8		95 00		sta $00,x	                sta 0,x
.90fa		a5 07		lda $07		                lda workword+1
.90fc		95 01		sta $01,x	                sta 1,x
.90fe		80 45		bra $9145	                bra _semicolon_done
.9100						_colonword:
.9100		a0 06		ldy #$06	                ldy #6
.9102		a5 00		lda $00		                lda cp
.9104		91 06		sta ($06),y	                sta (workword),y
.9106		c8		iny		                iny
.9107		a5 01		lda $01		                lda cp+1
.9109		91 06		sta ($06),y	                sta (workword),y
.910b		a9 60		lda #$60	                lda #OpRTS
.910d		20 8a 97	jsr $978a	                jsr cmpl_a
.9110		24 1c		bit $1c		                bit status
.9112		10 26		bpl $913a	                bpl _new_word   ; Bit 7 is clear = new word
.9114		ca		dex		                dex
.9115		ca		dex		                dex
.9116		ca		dex		                dex
.9117		ca		dex		                dex
.9118		b2 06		lda ($06)	                lda (workword)
.911a		95 00		sta $00,x	                sta 0,x
.911c		74 01		stz $01,x	                stz 1,x
.911e		a5 06		lda $06		                lda workword
.9120		18		clc		                clc
.9121		69 08		adc #$08	                adc #8
.9123		95 02		sta $02,x	                sta 2,x
.9125		a5 07		lda $07		                lda workword+1
.9127		69 00		adc #$00	                adc #0                  ; only want carry
.9129		95 03		sta $03,x	                sta 3,x
.912b		a9 02		lda #$02	                lda #str_redefined       ; address of string "redefined"
.912d		20 c6 d7	jsr $d7c6	                jsr print_string_no_lf
.9130		20 af 94	jsr $94af	                jsr xt_type
.9133		20 c5 91	jsr $91c5	                jsr xt_space
.9136		a9 80		lda #$80	                lda #%10000000
.9138		14 1c		trb $1c		                trb status
.913a						_new_word:
.913a		a5 06		lda $06		                lda workword
.913c		85 02		sta $02		                sta dp
.913e		a5 07		lda $07		                lda workword+1
.9140		85 03		sta $03		                sta dp+1
.9142		20 f4 d6	jsr $d6f4	                jsr dp_to_current       ; Save the updated DP to the
.9145						_semicolon_done:
.9145		64 1a		stz $1a		                stz state
.9147		64 1b		stz $1b		                stz state+1
.9149		60		rts		z_semicolon:    rts
.914a						xt_sign:
.914a		20 8a d7	jsr $d78a	                jsr underflow_1
.914d		b5 01		lda $01,x	                lda 1,x         ; check MSB of TOS
.914f		30 04		bmi $9155	                bmi _minus
.9151		e8		inx		                inx
.9152		e8		inx		                inx
.9153		80 09		bra $915e	                bra _done
.9155						_minus:
.9155		a9 2d		lda #$2d	                lda #'-'
.9157		95 00		sta $00,x	                sta 0,x         ; overwrite TOS
.9159		74 01		stz $01,x	                stz 1,x         ; paranoid
.915b		20 2d 89	jsr $892d	                jsr xt_hold
.915e						_done:
.915e		60		rts		z_sign:         rts
.915f						xt_slash:
.915f		a9 00		lda #$00	                lda #0
.9161		48		pha		                pha
.9162		80 03		bra $9167	                bra slashmod_common
.9164						xt_slash_mod:
.9164		a9 ff		lda #$ff	                lda #$FF
.9166		48		pha		                pha             ; falls through to _common
.9167						slashmod_common:
.9167		20 66 93	jsr $9366	                jsr xt_to_r             ; >R
.916a		20 d9 90	jsr $90d9	                jsr xt_s_to_d           ; S>D
.916d		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R>
.9170		20 7c 91	jsr $917c	                jsr xt_sm_slash_rem     ; SM/REM
.9173		68		pla		                pla
.9174		d0 05		bne $917b	                bne _done
.9176		20 28 92	jsr $9228	                jsr xt_swap
.9179		e8		inx		                inx             ; DROP
.917a		e8		inx		                inx
.917b						_done:
.917b						z_slash_mod:
.917b		60		rts		z_slash:        rts
.917c						xt_sm_slash_rem:
.917c		20 94 d7	jsr $d794	                jsr underflow_3 ; contains double number
.917f		b5 03		lda $03,x	                lda 3,x
.9181		48		pha		                pha
.9182		b5 01		lda $01,x	                lda 1,x
.9184		55 03		eor $03,x	                eor 3,x
.9186		48		pha		                pha
.9187		20 cf 80	jsr $80cf	                jsr xt_abs
.918a		e8		inx		                inx             ; pretend we pushed n1 to R
.918b		e8		inx		                inx
.918c		20 40 9e	jsr $9e40	                jsr xt_dabs
.918f		ca		dex		                dex
.9190		ca		dex		                dex
.9191		20 34 95	jsr $9534	                jsr xt_um_slash_mod     ; UM/MOD
.9194		68		pla		                pla
.9195		10 03		bpl $919a	                bpl +
.9197		20 1f 8c	jsr $8c1f	                jsr xt_negate
.919a						+
.919a		68		pla		                pla
.919b		10 07		bpl $91a4	                bpl _done
.919d		e8		inx		                inx             ; pretend we pushed quotient to R
.919e		e8		inx		                inx
.919f		20 1f 8c	jsr $8c1f	                jsr xt_negate
.91a2		ca		dex		                dex
.91a3		ca		dex		                dex
.91a4						_done:
.91a4		60		rts		z_sm_slash_rem: rts
.91a5						xt_source:
.91a5		ca		dex		                dex
.91a6		ca		dex		                dex
.91a7		a5 0c		lda $0c		                lda cib
.91a9		95 00		sta $00,x	                sta 0,x
.91ab		a5 0d		lda $0d		                lda cib+1
.91ad		95 01		sta $01,x	                sta 1,x
.91af		ca		dex		                dex
.91b0		ca		dex		                dex
.91b1		a5 0e		lda $0e		                lda ciblen
.91b3		95 00		sta $00,x	                sta 0,x
.91b5		a5 0f		lda $0f		                lda ciblen+1
.91b7		95 01		sta $01,x	                sta 1,x
.91b9		60		rts		z_source:       rts
.91ba						xt_source_id:
.91ba		ca		dex		                dex
.91bb		ca		dex		                dex
.91bc		a5 0a		lda $0a		                lda insrc
.91be		95 00		sta $00,x	                sta 0,x
.91c0		a5 0b		lda $0b		                lda insrc+1
.91c2		95 01		sta $01,x	                sta 1,x
.91c4		60		rts		z_source_id:    rts
.91c5						xt_space:
.91c5		a9 20		lda #$20	                lda #AscSP
.91c7		20 c5 86	jsr $86c5	                jsr emit_a
.91ca		60		rts		z_space:        rts
.91cb						xt_spaces:
.91cb		20 8a d7	jsr $d78a	                jsr underflow_1
.91ce		b5 01		lda $01,x	                lda 1,x         ; ANS says this word takes a signed value
.91d0		30 10		bmi $91e2	                bmi _done       ; but prints no spaces for negative values.
.91d2		b4 00		ldy $00,x	                ldy 0,x
.91d4		f0 08		beq $91de	                beq _msb
.91d6						_loop:
.91d6		a9 20		lda #$20	                lda #AscSP
.91d8		20 c5 86	jsr $86c5	                jsr emit_a      ; user routine preserves X and Y
.91db		88		dey		                dey
.91dc		d0 f8		bne $91d6	                bne _loop       ; Y is zero on exit so looping again emits 256 more spaces
.91de						_msb:
.91de		d6 01		dec $01,x	                dec 1,x         ; when decrementing MSB goes negative, it was zero so we're done
.91e0		10 f4		bpl $91d6	                bpl _loop       ; otherwise emit another 256 spaces
.91e2		e8		inx		_done:          inx
.91e3		e8		inx		                inx
.91e4		60		rts		z_spaces:       rts
.91e5						xt_star:
.91e5		20 8f d7	jsr $d78f	                jsr underflow_2
.91e8		20 76 95	jsr $9576	                jsr xt_um_star
.91eb		e8		inx		                inx
.91ec		e8		inx		                inx
.91ed		60		rts		z_star:         rts
.91ee						xt_star_slash:
.91ee		20 f7 91	jsr $91f7	                jsr xt_star_slash_mod
.91f1		20 28 92	jsr $9228	                jsr xt_swap
.91f4		e8		inx		                inx
.91f5		e8		inx		                inx
.91f6						z_star_slash:
.91f6		60		rts		                rts
.91f7						xt_star_slash_mod:
.91f7		20 94 d7	jsr $d794	                jsr underflow_3
.91fa		20 66 93	jsr $9366	                jsr xt_to_r
.91fd		20 21 8b	jsr $8b21	                jsr xt_m_star
.9200		20 ee 8e	jsr $8eee	                jsr xt_r_from
.9203		20 7c 91	jsr $917c	                jsr xt_sm_slash_rem
.9206						z_star_slash_mod:
.9206		60		rts		                rts
.9207						xt_state:
.9207		ca		dex		                dex
.9208		ca		dex		                dex
.9209		a9 1a		lda #$1a	                lda #<state
.920b		95 00		sta $00,x	                sta 0,x
.920d		a9 00		lda #$00	                lda #>state
.920f		95 01		sta $01,x	                sta 1,x
.9211		60		rts		z_state:        rts
.9212						xt_store:
.9212		20 8f d7	jsr $d78f	                jsr underflow_2
.9215		b5 02		lda $02,x	                lda 2,x         ; LSB
.9217		81 00		sta ($00,x)	                sta (0,x)
.9219		f6 00		inc $00,x	                inc 0,x
.921b		d0 02		bne $921f	                bne +
.921d		f6 01		inc $01,x	                inc 1,x
.921f						+
.921f		b5 03		lda $03,x	                lda 3,x         ; MSB
.9221		81 00		sta ($00,x)	                sta (0,x)
.9223		e8		inx		                inx             ; 2DROP
.9224		e8		inx		                inx
.9225		e8		inx		                inx
.9226		e8		inx		                inx
.9227		60		rts		z_store:        rts
.9228						xt_swap:
.9228		20 8f d7	jsr $d78f	                jsr underflow_2
.922b		b5 00		lda $00,x	                lda 0,x         ; LSB
.922d		b4 02		ldy $02,x	                ldy 2,x
.922f		95 02		sta $02,x	                sta 2,x
.9231		94 00		sty $00,x	                sty 0,x
.9233		b5 01		lda $01,x	                lda 1,x         ; MSB
.9235		b4 03		ldy $03,x	                ldy 3,x
.9237		95 03		sta $03,x	                sta 3,x
.9239		94 01		sty $01,x	                sty 1,x
.923b		60		rts		z_swap:         rts
.923c						xt_tick:
.923c		20 51 8d	jsr $8d51	                jsr xt_parse_name       ; ( -- addr u )
.923f		b5 00		lda $00,x	                lda 0,x
.9241		15 01		ora $01,x	                ora 1,x
.9243		d0 05		bne $924a	                bne +
.9245		a9 05		lda #$05	                lda #err_noname
.9247		4c a0 d7	jmp $d7a0	                jmp error
.924a						+
.924a		20 f0 9a	jsr $9af0	                jsr xt_find_name        ; ( addr u -- nt )
.924d		b5 00		lda $00,x	                lda 0,x
.924f		15 01		ora $01,x	                ora 1,x
.9251		d0 05		bne $9258	                bne +
.9253		a9 08		lda #$08	                lda #err_syntax
.9255		4c a0 d7	jmp $d7a0	                jmp error
.9258						+
.9258		20 2e 9c	jsr $9c2e	                jsr xt_name_to_int      ; ( nt -- xt )
.925b		60		rts		z_tick:         rts
.925c						xt_to:
.925c		20 3c 92	jsr $923c	                jsr xt_tick             ; ( [n] xt )
.925f		b5 00		lda $00,x	                lda 0,x                 ; LSB
.9261		18		clc		                clc
.9262		69 03		adc #$03	                adc #3
.9264		85 25		sta $25		                sta tmp1
.9266		b5 01		lda $01,x	                lda 1,x                 ; MSB
.9268		69 00		adc #$00	                adc #0                  ; we just want the carry
.926a		85 26		sta $26		                sta tmp1+1
.926c		a5 1a		lda $1a		                lda state
.926e		05 1b		ora $1b		                ora state+1
.9270		f0 14		beq $9286	                beq _interpret
.9272		a5 25		lda $25		                lda tmp1            ; replace TOS with tmp1
.9274		95 00		sta $00,x	                sta 0,x
.9276		a5 26		lda $26		                lda tmp1+1
.9278		95 01		sta $01,x	                sta 1,x
.927a		20 f2 89	jsr $89f2	                jsr xt_literal      ; generate the runtime for LITERAL tmp1
.927d		a0 92		ldy #$92	                ldy #>xt_store      ; write the runtime for !
.927f		a9 12		lda #$12	                lda #<xt_store
.9281		20 7a 97	jsr $977a	                jsr cmpl_subroutine
.9284		80 11		bra $9297	                bra _done
.9286						_interpret:
.9286		20 8f d7	jsr $d78f	                jsr underflow_2
.9289		e8		inx		                inx
.928a		e8		inx		                inx                     ; leaving just ( n )
.928b		b5 00		lda $00,x	                lda 0,x
.928d		92 25		sta ($25)	                sta (tmp1)              ; LSB
.928f		a0 01		ldy #$01	                ldy #1
.9291		b5 01		lda $01,x	                lda 1,x                 ; MSB
.9293		91 25		sta ($25),y	                sta (tmp1),y            ; fall through to common
.9295		e8		inx		                inx                     ; DROP
.9296		e8		inx		                inx
.9297						_done:
.9297		60		rts		z_to:           rts
.9298						xt_to_body:
.9298		20 8a d7	jsr $d78a	                jsr underflow_1
.929b		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( xt xt )
.929e		20 a8 9b	jsr $9ba8	                jsr xt_int_to_name      ; ( xt nt )
.92a1		f6 00		inc $00,x	                inc 0,x
.92a3		d0 02		bne $92a7	                bne +
.92a5		f6 01		inc $01,x	                inc 1,x
.92a7						+
.92a7		a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.92a9		29 20		and #$20	                and #HC
.92ab		f0 0b		beq $92b8	                beq _no_cfa
.92ad		18		clc		                clc
.92ae		b5 02		lda $02,x	                lda 2,x         ; LSB
.92b0		69 03		adc #$03	                adc #3
.92b2		95 02		sta $02,x	                sta 2,x
.92b4		90 02		bcc $92b8	                bcc _no_cfa
.92b6		f6 03		inc $03,x	                inc 3,x         ; MSB
.92b8						_no_cfa:
.92b8		e8		inx		                inx             ; get rid of the nt
.92b9		e8		inx		                inx
.92ba		60		rts		z_to_body:      rts
.92bb						xt_to_in:
.92bb		ca		dex		                dex
.92bc		ca		dex		                dex
.92bd		a9 10		lda #$10	                lda #<toin
.92bf		95 00		sta $00,x	                sta 0,x
.92c1		a9 00		lda #$00	                lda #>toin      ; paranoid, should be zero
.92c3		95 01		sta $01,x	                sta 1,x
.92c5		60		rts		z_to_in:        rts
.92c6						xt_to_number:
.92c6		20 99 d7	jsr $d799	                jsr underflow_4
.92c9		b5 06		lda $06,x	                lda 6,x         ; ud-lo LSB
.92cb		85 2d		sta $2d		                sta scratch
.92cd		b5 07		lda $07,x	                lda 7,x         ; ud-lo MSB
.92cf		85 2e		sta $2e		                sta scratch+1
.92d1		b5 04		lda $04,x	                lda 4,x         ; ud-hi LSB
.92d3		85 2f		sta $2f		                sta scratch+2
.92d5		b5 05		lda $05,x	                lda 5,x         ; ud-hi MSB
.92d7		85 30		sta $30		                sta scratch+3
.92d9		ca		dex		                dex
.92da		ca		dex		                dex
.92db						_loop:
.92db		a1 04		lda ($04,x)	                lda (4,x)
.92dd		95 00		sta $00,x	                sta 0,x                 ; ( ud-lo ud-hi addr u char )
.92df		74 01		stz $01,x	                stz 1,x                 ; paranoid
.92e1		20 94 9a	jsr $9a94	                jsr xt_digit_question   ; ( char -- n -1 | char 0 )
.92e4		b5 00		lda $00,x	                lda 0,x
.92e6		d0 04		bne $92ec	                bne _digit_ok
.92e8		e8		inx		                inx
.92e9		e8		inx		                inx
.92ea		80 67		bra $9353	                bra _done       ; ( ud-lo ud-hi addr u char )
.92ec						_digit_ok:
.92ec		b5 02		lda $02,x	                lda 2,x
.92ee		85 31		sta $31		                sta scratch+4
.92f0		b5 03		lda $03,x	                lda 3,x
.92f2		85 32		sta $32		                sta scratch+5
.92f4		a5 2f		lda $2f		                lda scratch+2
.92f6		95 02		sta $02,x	                sta 2,x         ; NOS
.92f8		a5 30		lda $30		                lda scratch+3
.92fa		95 03		sta $03,x	                sta 3,x
.92fc		a5 18		lda $18		                lda base
.92fe		95 00		sta $00,x	                sta 0,x         ; TOS
.9300		74 01		stz $01,x	                stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
.9302		20 76 95	jsr $9576	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
.9305		b5 02		lda $02,x	                lda 2,x         ; ud-hi-lo
.9307		85 33		sta $33		                sta scratch+6
.9309		b5 03		lda $03,x	                lda 3,x
.930b		85 34		sta $34		                sta scratch+7
.930d		a5 2d		lda $2d		                lda scratch
.930f		95 02		sta $02,x	                sta 2,x
.9311		a5 2e		lda $2e		                lda scratch+1
.9313		95 03		sta $03,x	                sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
.9315		a5 18		lda $18		                lda base
.9317		95 00		sta $00,x	                sta 0,x
.9319		74 01		stz $01,x	                stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
.931b		20 76 95	jsr $9576	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
.931e		b5 00		lda $00,x	                lda 0,x
.9320		85 2f		sta $2f		                sta scratch+2
.9322		b5 01		lda $01,x	                lda 1,x
.9324		85 30		sta $30		                sta scratch+3
.9326		b5 02		lda $02,x	                lda 2,x
.9328		85 2d		sta $2d		                sta scratch
.932a		b5 03		lda $03,x	                lda 3,x
.932c		85 2e		sta $2e		                sta scratch+1
.932e		18		clc		                clc
.932f		a5 2d		lda $2d		                lda scratch     ; ud-lo LSB
.9331		65 31		adc $31		                adc scratch+4   ; n LSB
.9333		85 2d		sta $2d		                sta scratch     ; this is the new ud-lo
.9335		a5 2e		lda $2e		                lda scratch+1   ; ud-lo MSB
.9337		65 32		adc $32		                adc scratch+5   ; n MSB
.9339		85 2e		sta $2e		                sta scratch+1
.933b		a5 2f		lda $2f		                lda scratch+2   ; LSB
.933d		65 33		adc $33		                adc scratch+6
.933f		85 2f		sta $2f		                sta scratch+2   ; this is the new ud-hi
.9341		a5 30		lda $30		                lda scratch+3   ; MSB
.9343		65 34		adc $34		                adc scratch+7
.9345		85 30		sta $30		                sta scratch+3
.9347		e8		inx		                inx
.9348		e8		inx		                inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
.9349		f6 04		inc $04,x	                inc 4,x
.934b		d0 02		bne $934f	                bne +
.934d		f6 05		inc $05,x	                inc 5,x
.934f						+
.934f		d6 02		dec $02,x	                dec 2,x
.9351		d0 88		bne $92db	                bne _loop
.9353						_done:
.9353		e8		inx		                inx
.9354		e8		inx		                inx             ; ( ud-lo ud-hi addr u )
.9355		a5 2d		lda $2d		                lda scratch     ; new ud-lo
.9357		95 06		sta $06,x	                sta 6,x
.9359		a5 2e		lda $2e		                lda scratch+1
.935b		95 07		sta $07,x	                sta 7,x
.935d		a5 2f		lda $2f		                lda scratch+2
.935f		95 04		sta $04,x	                sta 4,x
.9361		a5 30		lda $30		                lda scratch+3
.9363		95 05		sta $05,x	                sta 5,x
.9365		60		rts		z_to_number:    rts
.9366						xt_to_r:
.9366		68		pla		                pla             ; LSB
.9367		85 23		sta $23		                sta tmptos
.9369		7a		ply		                ply             ; MSB
.936a		20 8a d7	jsr $d78a	                jsr underflow_1
.936d		b5 01		lda $01,x	                lda 1,x         ; MSB
.936f		48		pha		                pha
.9370		b5 00		lda $00,x	                lda 0,x         ; LSB
.9372		48		pha		                pha
.9373		e8		inx		                inx
.9374		e8		inx		                inx
.9375		5a		phy		                phy             ; MSB
.9376		a5 23		lda $23		                lda tmptos
.9378		48		pha		                pha             ; LSB
.9379		60		rts		z_to_r:         rts
.937a						xt_true:
.937a		ca		dex		                dex
.937b		ca		dex		                dex
.937c		a9 ff		lda #$ff	                lda #$FF
.937e		95 00		sta $00,x	                sta 0,x
.9380		95 01		sta $01,x	                sta 1,x
.9382		60		rts		z_true:         rts
.9383						xt_tuck:
.9383		20 8f d7	jsr $d78f	                jsr underflow_2
.9386		ca		dex		                dex
.9387		ca		dex		                dex
.9388		b4 04		ldy $04,x	                ldy 4,x         ; LSB
.938a		b5 02		lda $02,x	                lda 2,x
.938c		95 04		sta $04,x	                sta 4,x
.938e		94 02		sty $02,x	                sty 2,x
.9390		95 00		sta $00,x	                sta 0,x
.9392		b4 05		ldy $05,x	                ldy 5,x         ; MSB
.9394		b5 03		lda $03,x	                lda 3,x
.9396		95 05		sta $05,x	                sta 5,x
.9398		94 03		sty $03,x	                sty 3,x         ; bba
.939a		95 01		sta $01,x	                sta 1,x         ; baa
.939c		60		rts		z_tuck:         rts
.939d						xt_two_drop:
.939d		20 8f d7	jsr $d78f	                jsr underflow_2
.93a0		e8		inx		                inx
.93a1		e8		inx		                inx
.93a2		e8		inx		                inx
.93a3		e8		inx		                inx
.93a4		60		rts		z_two_drop:     rts
.93a5						xt_two_dup:
.93a5		20 8f d7	jsr $d78f	                jsr underflow_2
.93a8		ca		dex		                dex
.93a9		ca		dex		                dex
.93aa		ca		dex		                dex
.93ab		ca		dex		                dex
.93ac		b5 04		lda $04,x	                lda 4,x         ; TOS
.93ae		95 00		sta $00,x	                sta 0,x
.93b0		b5 05		lda $05,x	                lda 5,x
.93b2		95 01		sta $01,x	                sta 1,x
.93b4		b5 06		lda $06,x	                lda 6,x         ; NOS
.93b6		95 02		sta $02,x	                sta 2,x
.93b8		b5 07		lda $07,x	                lda 7,x
.93ba		95 03		sta $03,x	                sta 3,x
.93bc		60		rts		z_two_dup:      rts
.93bd						xt_two_fetch:
.93bd		20 8a d7	jsr $d78a	                jsr underflow_1
.93c0		b5 00		lda $00,x	                lda 0,x
.93c2		85 25		sta $25		                sta tmp1
.93c4		b4 01		ldy $01,x	                ldy 1,x
.93c6		84 26		sty $26		                sty tmp1+1
.93c8		ca		dex		                dex             ; reuse one stack element
.93c9		ca		dex		                dex
.93ca		b2 25		lda ($25)	                lda (tmp1)      ; copy LSB
.93cc		95 00		sta $00,x	                sta 0,x
.93ce		a0 01		ldy #$01	                ldy #1          ; copy next
.93d0		b1 25		lda ($25),y	                lda (tmp1),y
.93d2		95 01		sta $01,x	                sta 1,x
.93d4		c8		iny		                iny             ; copy next
.93d5		b1 25		lda ($25),y	                lda (tmp1),y
.93d7		95 02		sta $02,x	                sta 2,x
.93d9		c8		iny		                iny             ; copy next
.93da		b1 25		lda ($25),y	                lda (tmp1),y
.93dc		95 03		sta $03,x	                sta 3,x
.93de		60		rts		z_two_fetch:    rts
.93df						xt_two_over:
.93df		20 99 d7	jsr $d799	                jsr underflow_4
.93e2		ca		dex		                dex
.93e3		ca		dex		                dex
.93e4		ca		dex		                dex
.93e5		ca		dex		                dex
.93e6		b5 08		lda $08,x	                lda 8,x
.93e8		95 00		sta $00,x	                sta 0,x
.93ea		b5 09		lda $09,x	                lda 9,x
.93ec		95 01		sta $01,x	                sta 1,x
.93ee		b5 0a		lda $0a,x	                lda 10,x
.93f0		95 02		sta $02,x	                sta 2,x
.93f2		b5 0b		lda $0b,x	                lda 11,x
.93f4		95 03		sta $03,x	                sta 3,x
.93f6		60		rts		z_two_over:     rts
.93f7						xt_two_r_fetch:
.93f7		ca		dex		                dex
.93f8		ca		dex		                dex
.93f9		ca		dex		                dex
.93fa		ca		dex		                dex
.93fb		8a		txa		                txa
.93fc		ba		tsx		                tsx
.93fd		da		phx		                phx             ; 65c02 has no TXY, so do it the hard way
.93fe		7a		ply		                ply
.93ff		aa		tax		                tax
.9400		b9 03 01	lda $0103,y	                lda $0103,y     ; LSB of top entry
.9403		95 00		sta $00,x	                sta 0,x
.9405		b9 04 01	lda $0104,y	                lda $0104,y     ; MSB of top entry
.9408		95 01		sta $01,x	                sta 1,x
.940a		b9 05 01	lda $0105,y	                lda $0105,y     ; LSB of bottom entry
.940d		95 02		sta $02,x	                sta 2,x
.940f		b9 06 01	lda $0106,y	                lda $0106,y     ; MSB of top entry
.9412		95 03		sta $03,x	                sta 3,x
.9414		60		rts		z_two_r_fetch:  rts
.9415						xt_two_r_from:
.9415		68		pla		                pla                     ; LSB
.9416		85 25		sta $25		                sta tmp1
.9418		68		pla		                pla                     ; MSB
.9419		85 26		sta $26		                sta tmp1+1
.941b		ca		dex		                dex
.941c		ca		dex		                dex
.941d		ca		dex		                dex
.941e		ca		dex		                dex
.941f		68		pla		                pla                     ; LSB
.9420		95 00		sta $00,x	                sta 0,x
.9422		68		pla		                pla                     ; MSB
.9423		95 01		sta $01,x	                sta 1,x
.9425		68		pla		                pla                     ; LSB
.9426		95 02		sta $02,x	                sta 2,x
.9428		68		pla		                pla                     ; MSB
.9429		95 03		sta $03,x	                sta 3,x
.942b		a5 26		lda $26		                lda tmp1+1              ; MSB
.942d		48		pha		                pha
.942e		a5 25		lda $25		                lda tmp1                ; LSB
.9430		48		pha		                pha
.9431		60		rts		z_two_r_from:   rts
.9432						xt_two_slash:
.9432		20 8a d7	jsr $d78a	                jsr underflow_1
.9435		b5 01		lda $01,x	                lda 1,x
.9437		0a		asl a		                asl                     ; save the sign
.9438		76 01		ror $01,x	                ror 1,x
.943a		76 00		ror $00,x	                ror 0,x
.943c		60		rts		z_two_slash:    rts
.943d						xt_two_star:
.943d						xt_cells:
.943d		20 8a d7	jsr $d78a	                jsr underflow_1
.9440		16 00		asl $00,x	                asl 0,x
.9442		36 01		rol $01,x	                rol 1,x
.9444						z_cells:
.9444		60		rts		z_two_star:     rts
.9445						xt_two_store:
.9445		20 94 d7	jsr $d794	                jsr underflow_3
.9448		b5 00		lda $00,x	                lda 0,x
.944a		85 25		sta $25		                sta tmp1
.944c		b4 01		ldy $01,x	                ldy 1,x
.944e		84 26		sty $26		                sty tmp1+1
.9450		e8		inx		                inx
.9451		e8		inx		                inx
.9452		b5 00		lda $00,x	                lda 0,x         ; copy MSB
.9454		92 25		sta ($25)	                sta (tmp1)
.9456		b5 01		lda $01,x	                lda 1,x         ; copy next
.9458		a0 01		ldy #$01	                ldy #1
.945a		91 25		sta ($25),y	                sta (tmp1),y
.945c		b5 02		lda $02,x	                lda 2,x         ; copy next
.945e		c8		iny		                iny
.945f		91 25		sta ($25),y	                sta (tmp1),y
.9461		b5 03		lda $03,x	                lda 3,x         ; copy MSB
.9463		c8		iny		                iny
.9464		91 25		sta ($25),y	                sta (tmp1),y
.9466		e8		inx		                inx             ; 2DROP
.9467		e8		inx		                inx
.9468		e8		inx		                inx
.9469		e8		inx		                inx
.946a		60		rts		z_two_store:    rts
.946b						xt_two_swap:
.946b		20 99 d7	jsr $d799	                jsr underflow_4
.946e		b5 00		lda $00,x	                lda 0,x
.9470		b4 04		ldy $04,x	                ldy 4,x
.9472		95 04		sta $04,x	                sta 4,x
.9474		94 00		sty $00,x	                sty 0,x
.9476		b5 01		lda $01,x	                lda 1,x
.9478		b4 05		ldy $05,x	                ldy 5,x
.947a		95 05		sta $05,x	                sta 5,x
.947c		94 01		sty $01,x	                sty 1,x
.947e		b5 02		lda $02,x	                lda 2,x
.9480		b4 06		ldy $06,x	                ldy 6,x
.9482		95 06		sta $06,x	                sta 6,x
.9484		94 02		sty $02,x	                sty 2,x
.9486		b5 03		lda $03,x	                lda 3,x
.9488		b4 07		ldy $07,x	                ldy 7,x
.948a		95 07		sta $07,x	                sta 7,x
.948c		94 03		sty $03,x	                sty 3,x
.948e		60		rts		z_two_swap:     rts
.948f						xt_two_to_r:
.948f		68		pla		                pla             ; LSB
.9490		85 25		sta $25		                sta tmp1
.9492		68		pla		                pla             ; MSB
.9493		85 26		sta $26		                sta tmp1+1
.9495		20 8f d7	jsr $d78f	                jsr underflow_2
.9498		b5 03		lda $03,x	                lda 3,x         ; MSB
.949a		48		pha		                pha
.949b		b5 02		lda $02,x	                lda 2,x         ; LSB
.949d		48		pha		                pha
.949e		b5 01		lda $01,x	                lda 1,x         ; MSB
.94a0		48		pha		                pha
.94a1		b5 00		lda $00,x	                lda 0,x         ; LSB
.94a3		48		pha		                pha
.94a4		e8		inx		                inx
.94a5		e8		inx		                inx
.94a6		e8		inx		                inx
.94a7		e8		inx		                inx
.94a8		a5 26		lda $26		                lda tmp1+1      ; MSB
.94aa		48		pha		                pha
.94ab		a5 25		lda $25		                lda tmp1        ; LSB
.94ad		48		pha		                pha
.94ae		60		rts		z_two_to_r:     rts
.94af						xt_type:
.94af		20 8f d7	jsr $d78f	                jsr underflow_2
.94b2		b5 02		lda $02,x	                lda 2,x
.94b4		85 25		sta $25		                sta tmp1
.94b6		b5 03		lda $03,x	                lda 3,x
.94b8		85 26		sta $26		                sta tmp1+1
.94ba						_loop:
.94ba		b5 00		lda $00,x	                lda 0,x
.94bc		15 01		ora $01,x	                ora 1,x
.94be		f0 15		beq $94d5	                beq _done
.94c0		b2 25		lda ($25)	                lda (tmp1)
.94c2		20 c5 86	jsr $86c5	                jsr emit_a      ; avoids stack foolery
.94c5		e6 25		inc $25		                inc tmp1
.94c7		d0 02		bne $94cb	                bne +
.94c9		e6 26		inc $26		                inc tmp1+1
.94cb						+
.94cb		b5 00		lda $00,x	                lda 0,x
.94cd		d0 02		bne $94d1	                bne +
.94cf		d6 01		dec $01,x	                dec 1,x
.94d1						+
.94d1		d6 00		dec $00,x	                dec 0,x
.94d3		80 e5		bra $94ba	                bra _loop
.94d5						_done:
.94d5		e8		inx		                inx
.94d6		e8		inx		                inx
.94d7		e8		inx		                inx
.94d8		e8		inx		                inx
.94d9		60		rts		z_type:         rts
.94da						xt_u_dot:
.94da		20 8a d7	jsr $d78a	                jsr underflow_1
.94dd		20 f7 d7	jsr $d7f7	                jsr print_u
.94e0		a9 20		lda #$20	                lda #AscSP
.94e2		20 c5 86	jsr $86c5	                jsr emit_a
.94e5		60		rts		z_u_dot:        rts
.94e6						xt_u_dot_r:
.94e6		20 8f d7	jsr $d78f	                jsr underflow_2
.94e9		20 66 93	jsr $9366	                jsr xt_to_r
.94ec		20 f1 9d	jsr $9df1	                jsr xt_zero
.94ef		20 cf 89	jsr $89cf	                jsr xt_less_number_sign
.94f2		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s
.94f5		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater
.94f8		20 ee 8e	jsr $8eee	                jsr xt_r_from
.94fb		20 05 8d	jsr $8d05	                jsr xt_over
.94fe		20 e4 8b	jsr $8be4	                jsr xt_minus
.9501		20 cb 91	jsr $91cb	                jsr xt_spaces
.9504		20 af 94	jsr $94af	                jsr xt_type
.9507		60		rts		z_u_dot_r:      rts
.9508						xt_u_greater_than:
.9508		20 8f d7	jsr $d78f	                jsr underflow_2
.950b		b5 00		lda $00,x	                lda 0,x
.950d		d5 02		cmp $02,x	                cmp 2,x
.950f		b5 01		lda $01,x	                lda 1,x
.9511		f5 03		sbc $03,x	                sbc 3,x
.9513		e8		inx		                inx
.9514		e8		inx		                inx
.9515		a9 00		lda #$00	                lda #0
.9517		69 ff		adc #$ff	                adc #$FF
.9519		95 00		sta $00,x	                sta 0,x         ; store flag
.951b		95 01		sta $01,x	                sta 1,x
.951d		60		rts		z_u_greater_than:    rts
.951e						xt_u_less_than:
.951e		20 8f d7	jsr $d78f	                jsr underflow_2
.9521		b5 02		lda $02,x	                lda 2,x
.9523		d5 00		cmp $00,x	                cmp 0,x
.9525		b5 03		lda $03,x	                lda 3,x
.9527		f5 01		sbc $01,x	                sbc 1,x
.9529		e8		inx		                inx
.952a		e8		inx		                inx
.952b		a9 00		lda #$00	                lda #0
.952d		69 ff		adc #$ff	                adc #$FF
.952f		95 00		sta $00,x	                sta 0,x         ; store flag
.9531		95 01		sta $01,x	                sta 1,x
.9533		60		rts		z_u_less_than:    rts
.9534						xt_um_slash_mod:
.9534		20 94 d7	jsr $d794	                jsr underflow_3
.9537		b5 00		lda $00,x	                lda 0,x
.9539		15 01		ora $01,x	                ora 1,x
.953b		d0 05		bne $9542	                bne _not_zero
.953d		a9 04		lda #$04	                lda #err_divzero
.953f		4c a0 d7	jmp $d7a0	                jmp error
.9542						_not_zero:
.9542		a9 11		lda #$11	                lda #17
.9544		85 23		sta $23		                sta tmptos
.9546						_loop:
.9546		36 04		rol $04,x	                rol 4,x
.9548		36 05		rol $05,x	                rol 5,x
.954a		c6 23		dec $23		                dec tmptos
.954c		f0 22		beq $9570	                beq _done
.954e		36 02		rol $02,x	                rol 2,x
.9550		36 03		rol $03,x	                rol 3,x
.9552		64 25		stz $25		                stz tmp1        ; store the bit we got from hi cell (MSB)
.9554		26 25		rol $25		                rol tmp1
.9556		38		sec		                sec
.9557		b5 02		lda $02,x	                lda 2,x
.9559		f5 00		sbc $00,x	                sbc 0,x
.955b		85 26		sta $26		                sta tmp1+1
.955d		b5 03		lda $03,x	                lda 3,x
.955f		f5 01		sbc $01,x	                sbc 1,x
.9561		a8		tay		                tay
.9562		a5 25		lda $25		                lda tmp1
.9564		e9 00		sbc #$00	                sbc #0
.9566		90 de		bcc $9546	                bcc _loop
.9568		a5 26		lda $26		                lda tmp1+1
.956a		95 02		sta $02,x	                sta 2,x
.956c		94 03		sty $03,x	                sty 3,x         ; used as temp storage
.956e		80 d6		bra $9546	                bra _loop
.9570						_done:
.9570		e8		inx		                inx
.9571		e8		inx		                inx
.9572		20 28 92	jsr $9228	                jsr xt_swap
.9575		60		rts		z_um_slash_mod: rts
.9576						xt_um_star:
.9576		20 8f d7	jsr $d78f	                jsr underflow_2
.9579		18		clc		                clc
.957a		b5 00		lda $00,x	                lda 0,x         ; copy TOS to tmp2
.957c		e9 00		sbc #$00	                sbc #0
.957e		85 27		sta $27		                sta tmp2
.9580		b5 01		lda $01,x	                lda 1,x
.9582		e9 00		sbc #$00	                sbc #0
.9584		90 31		bcc $95b7	                bcc _zero       ; is TOS zero?
.9586		85 28		sta $28		                sta tmp2+1
.9588		a9 00		lda #$00	                lda #0
.958a		85 25		sta $25		                sta tmp1
.958c		86 29		stx $29		                stx tmp3        ; tested for exit from outer loop
.958e		ca		dex		                dex
.958f		ca		dex		                dex
.9590						_outer_loop:
.9590		a0 08		ldy #$08	                ldy #8          ; counter inner loop
.9592		56 04		lsr $04,x	                lsr 4,x         ; think "2,x" then later "3,x"
.9594						_inner_loop:
.9594		90 0c		bcc $95a2	                bcc _no_add
.9596		85 26		sta $26		                sta tmp1+1      ; save time, don't CLC
.9598		a5 25		lda $25		                lda tmp1
.959a		65 27		adc $27		                adc tmp2
.959c		85 25		sta $25		                sta tmp1
.959e		a5 26		lda $26		                lda tmp1+1
.95a0		65 28		adc $28		                adc tmp2+1
.95a2						_no_add:
.95a2		6a		ror a		                ror
.95a3		66 25		ror $25		                ror tmp1
.95a5		76 04		ror $04,x	                ror 4,x         ; think "2,x" then later "3,x"
.95a7		88		dey		                dey
.95a8		d0 ea		bne $9594	                bne _inner_loop ; go back for one more shift?
.95aa		e8		inx		                inx
.95ab		e4 29		cpx $29		                cpx tmp3
.95ad		d0 e1		bne $9590	                bne _outer_loop ; go back for eight more shifts?
.95af		95 01		sta $01,x	                sta 1,x
.95b1		a5 25		lda $25		                lda tmp1
.95b3		95 00		sta $00,x	                sta 0,x
.95b5		80 04		bra $95bb	                bra _done
.95b7						_zero:
.95b7		74 02		stz $02,x	                stz 2,x
.95b9		74 03		stz $03,x	                stz 3,x
.95bb						_done:
.95bb		60		rts		z_um_star:      rts
.95bc						xt_unloop:
.95bc		a4 1f		ldy $1f		                ldy loopctrl
.95be		88		dey		                dey
.95bf		88		dey		                dey
.95c0		88		dey		                dey
.95c1		88		dey		                dey
.95c2		84 1f		sty $1f		                sty loopctrl
.95c4		30 05		bmi $95cb	                bmi z_unloop            ; no active loops?
.95c6		b9 00 01	lda $0100,y	                lda loopindex,y         ; else re-cache the LSB of loopindex
.95c9		85 20		sta $20		                sta loopidx0
.95cb		60		rts		z_unloop:       rts
.95cc						xt_until:
.95cc		20 cc 97	jsr $97cc	                jsr cmpl_0branch_tos
.95cf		60		rts		z_until:        rts
.95d0						xt_unused:
.95d0		ca		dex		                dex
.95d1		ca		dex		                dex
.95d2		a9 00		lda #$00	                lda #<cp_end
.95d4		38		sec		                sec
.95d5		e5 00		sbc $00		                sbc cp
.95d7		95 00		sta $00,x	                sta 0,x
.95d9		a9 7c		lda #$7c	                lda #>cp_end
.95db		e5 01		sbc $01		                sbc cp+1
.95dd		95 01		sta $01,x	                sta 1,x
.95df		60		rts		z_unused:       rts
.95e0						xt_variable:
.95e0		20 40 84	jsr $8440	                jsr xt_create
.95e3		a9 00		lda #$00	                lda #0
.95e5		92 00		sta ($00)	                sta (cp)
.95e7		e6 00		inc $00		                inc cp
.95e9		d0 02		bne $95ed	                bne +
.95eb		e6 01		inc $01		                inc cp+1
.95ed						+
.95ed		92 00		sta ($00)	                sta (cp)
.95ef		e6 00		inc $00		                inc cp
.95f1		d0 02		bne $95f5	                bne +
.95f3		e6 01		inc $01		                inc cp+1
.95f5						+
.95f5		20 08 84	jsr $8408	                jsr adjust_z
.95f8		60		rts		z_variable:     rts
.95f9						xt_while:
.95f9		20 b7 97	jsr $97b7	                jsr cmpl_0branch_later          ; branch to location we'll determine later
.95fc		20 28 92	jsr $9228	                jsr xt_swap
.95ff		60		rts		z_while:        rts
.9600						xt_within:
.9600		20 94 d7	jsr $d794	                jsr underflow_3
.9603		20 05 8d	jsr $8d05	                jsr xt_over
.9606		20 e4 8b	jsr $8be4	                jsr xt_minus
.9609		20 66 93	jsr $9366	                jsr xt_to_r
.960c		20 e4 8b	jsr $8be4	                jsr xt_minus
.960f		20 ee 8e	jsr $8eee	                jsr xt_r_from
.9612		20 1e 95	jsr $951e	                jsr xt_u_less_than
.9615		60		rts		z_within:       rts
.9616						xt_word:
.9616		20 8a d7	jsr $d78a	                jsr underflow_1
.9619		a4 10		ldy $10		                ldy toin                ; >IN
.961b						_loop:
.961b		c4 0e		cpy $0e		                cpy ciblen              ; quit if end of input
.961d		f0 09		beq $9628	                beq _found_char
.961f		b1 0c		lda ($0c),y	                lda (cib),y
.9621		d5 00		cmp $00,x	                cmp 0,x                 ; ASCII of delimiter
.9623		d0 03		bne $9628	                bne _found_char
.9625		c8		iny		                iny
.9626		80 f3		bra $961b	                bra _loop
.9628						_found_char:
.9628		84 10		sty $10		                sty toin
.962a		20 ac 8d	jsr $8dac	                jsr xt_parse            ; Returns ( addr u )
.962d		b5 00		lda $00,x	                lda 0,x
.962f		92 00		sta ($00)	                sta (cp)                ; Save length of string
.9631		48		pha		                pha                     ; Keep copy of length for later
.9632		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( addr u u )
.9635		a5 00		lda $00		                lda cp
.9637		18		clc		                clc
.9638		69 01		adc #$01	                adc #1
.963a		95 02		sta $02,x	                sta 2,x                 ; LSB of CP
.963c		a5 01		lda $01		                lda cp+1
.963e		69 00		adc #$00	                adc #0
.9640		95 03		sta $03,x	                sta 3,x                 ; ( addr cp+1 u )
.9642		20 00 8c	jsr $8c00	                jsr xt_move
.9645		ca		dex		                dex
.9646		ca		dex		                dex
.9647		a5 00		lda $00		                lda cp
.9649		95 00		sta $00,x	                sta 0,x
.964b		a5 01		lda $01		                lda cp+1
.964d		95 01		sta $01,x	                sta 1,x
.964f		68		pla		                pla                     ; length of string
.9650		18		clc		                clc
.9651		65 00		adc $00		                adc cp
.9653		85 00		sta $00		                sta cp
.9655		90 02		bcc $9659	                bcc z_word
.9657		e6 01		inc $01		                inc cp+1
.9659		60		rts		z_word:         rts
.965a						xt_xor:
.965a		20 8f d7	jsr $d78f	                jsr underflow_2
.965d		b5 00		lda $00,x	                lda 0,x
.965f		55 02		eor $02,x	                eor 2,x
.9661		95 02		sta $02,x	                sta 2,x
.9663		b5 01		lda $01,x	                lda 1,x
.9665		55 03		eor $03,x	                eor 3,x
.9667		95 03		sta $03,x	                sta 3,x
.9669		e8		inx		                inx
.966a		e8		inx		                inx
.966b		60		rts		z_xor:          rts
.966c						xt_zero_equal:
.966c		20 8a d7	jsr $d78a	                jsr underflow_1
.966f		b5 00		lda $00,x	                lda 0,x
.9671		15 01		ora $01,x	                ora 1,x
.9673		f0 02		beq $9677	                beq _zero       ; if 0, A is inverse of the TRUE (-1) we want
.9675		a9 ff		lda #$ff	                lda #$FF        ; else set A inverse of the FALSE (0) we want
.9677						_zero:
.9677		49 ff		eor #$ff	                eor #$FF        ; now just invert:
.9679		95 00		sta $00,x	                sta 0,x
.967b		95 01		sta $01,x	                sta 1,x
.967d		60		rts		z_zero_equal:   rts
.967e						xt_zero_greater:
.967e		20 8a d7	jsr $d78a	                jsr underflow_1
.9681		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS is negative)
.9683		b5 01		lda $01,x	                lda 1,x         ; MSB
.9685		30 05		bmi $968c	                bmi _done       ; TOS is negative, keep FLASE
.9687		15 00		ora $00,x	                ora 0,x
.9689		f0 01		beq $968c	                beq _done       ; TOS is zero, keep FALSE
.968b		88		dey		                dey             ; TOS is postive, make true
.968c						_done:
.968c		98		tya		                tya
.968d		95 00		sta $00,x	                sta 0,x
.968f		95 01		sta $01,x	                sta 1,x
.9691		60		rts		z_zero_greater: rts
.9692						xt_zero_less:
.9692		20 8a d7	jsr $d78a	                jsr underflow_1
.9695		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS positive)
.9697		b5 01		lda $01,x	                lda 1,x         ; MSB
.9699		10 01		bpl $969c	                bpl _done       ; TOS is positive, so keep FALSE
.969b		88		dey		                dey             ; TOS is negative, make TRUE
.969c						_done:
.969c		98		tya		                tya
.969d		95 00		sta $00,x	                sta 0,x
.969f		95 01		sta $01,x	                sta 1,x
.96a1		60		rts		z_zero_less:    rts
.96a2						xt_zero_unequal:
.96a2		20 8a d7	jsr $d78a	                jsr underflow_1
.96a5		b5 00		lda $00,x	                lda 0,x
.96a7		15 01		ora $01,x	                ora 1,x
.96a9		f0 02		beq $96ad	                beq _zero
.96ab		a9 ff		lda #$ff	                lda #$FF
.96ad						_zero:
.96ad		95 00		sta $00,x	                sta 0,x
.96af		95 01		sta $01,x	                sta 1,x
.96b1		60		rts		z_zero_unequal: rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/compile.asm

.96b2						xt_compile_comma:
.96b2		20 8a d7	jsr $d78a	                jsr underflow_1
.96b5		20 a0 86	jsr $86a0	                jsr xt_dup              ; keep an unadjusted copy of xt
.96b8		20 a0 86	jsr $86a0	                jsr xt_dup              ; plus one to convert to nt
.96bb		20 a8 9b	jsr $9ba8	                jsr xt_int_to_name
.96be		b5 00		lda $00,x	                lda 0,x
.96c0		15 01		ora $01,x	                ora 1,x
.96c2		f0 52		beq $9716	                beq cmpl_as_call        ; No nt so unknown size; must compile as a JSR
.96c4		20 a0 86	jsr $86a0	                jsr xt_dup
.96c7		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; status is at nt+1
.96ca		a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.96cc		e8		inx		                inx                     ; drop pointer
.96cd		e8		inx		                inx
.96ce		85 29		sta $29		                sta tmp3                ; keep copy of status byte
.96d0		29 08		and #$08	                and #NN
.96d2		d0 42		bne $9716	                bne cmpl_as_call        ; never native
.96d4		20 d0 9d	jsr $9dd0	                jsr xt_wordsize
.96d7		20 37 97	jsr $9737	                jsr check_strip_table
.96da		a5 29		lda $29		                lda tmp3
.96dc		29 10		and #$10	                and #UF
.96de		f0 1f		beq $96ff	                beq _check_limit
.96e0		a0 02		ldy #$02	                ldy #uf_strip_offset
.96e2		b1 08		lda ($08),y	                lda (up),y
.96e4		c8		iny		                iny
.96e5		11 08		ora ($08),y	                ora (up),y
.96e7		f0 16		beq $96ff	                beq _check_limit
.96e9		18		clc		                clc
.96ea		b5 02		lda $02,x	                lda 2,x
.96ec		69 03		adc #$03	                adc #3
.96ee		95 02		sta $02,x	                sta 2,x
.96f0		90 02		bcc $96f4	                bcc +
.96f2		f6 03		inc $03,x	                inc 3,x                  ; we just care about the carry
.96f4						+
.96f4		38		sec		                sec
.96f5		b5 00		lda $00,x	                lda 0,x
.96f7		e9 03		sbc #$03	                sbc #3
.96f9		95 00		sta $00,x	                sta 0,x
.96fb		b0 02		bcs $96ff	                bcs +
.96fd		d6 01		dec $01,x	                dec 1,x                  ; we just care about the borrow
.96ff						+
.96ff						_check_limit:
.96ff		a5 29		lda $29		                lda tmp3
.9701		29 02		and #$02	                and #AN                 ; check Always Native (AN) bit
.9703		d0 1e		bne $9723	                bne cmpl_inline         ; always natively compile
.9705						cmpl_by_limit:
.9705		a0 01		ldy #$01	                ldy #nc_limit_offset+1
.9707		b5 01		lda $01,x	                lda 1,x                 ; MSB of word size
.9709		d1 08		cmp ($08),y	                cmp (up),y              ; user-defined limit MSB
.970b		90 16		bcc $9723	                bcc cmpl_inline         ; borrow (C=0) means size < limit
.970d		d0 07		bne $9716	                bne cmpl_as_call        ; else non-zero means size > limit
.970f		88		dey		                dey
.9710		b1 08		lda ($08),y	                lda (up),y              ; user-defined limit LSB
.9712		d5 00		cmp $00,x	                cmp 0,x
.9714		b0 0d		bcs $9723	                bcs cmpl_inline         ; not bigger, so good to go
.9716						cmpl_as_call:
.9716		20 9d 93	jsr $939d	                jsr xt_two_drop         ; either way 2drop leaves original xt
.9719		a9 20		lda #$20	                lda #OpJSR
.971b		20 8a 97	jsr $978a	                jsr cmpl_a
.971e		20 cd 83	jsr $83cd	                jsr xt_comma
.9721		38		sec		                sec
.9722		60		rts		                rts
.9723						cmpl_inline:
.9723		20 1b 89	jsr $891b	                jsr xt_here
.9726		20 28 92	jsr $9228	                jsr xt_swap
.9729		20 a0 86	jsr $86a0	                jsr xt_dup
.972c		20 27 82	jsr $8227	                jsr xt_allot            ; allocate space for the word
.972f		20 00 8c	jsr $8c00	                jsr xt_move
.9732		20 9a 86	jsr $869a	                jsr xt_drop             ; drop original xt
.9735		18		clc		                clc
.9736		60		rts		                rts
.9737						check_strip_table:
.9737		a0 00		ldy #$00	                ldy #0
.9739						_strip_loop:
.9739		b9 6b 97	lda $976b,y	                lda _strip_table,y       ; LSB of first word
.973c		d5 02		cmp $02,x	                cmp 2,x                 ; LSB of xt
.973e		d0 07		bne $9747	                bne _next_entry
.9740		b9 6c 97	lda $976c,y	                lda _strip_table+1,y
.9743		d5 03		cmp $03,x	                cmp 3,x
.9745		f0 07		beq $974e	                beq _found_entry
.9747						_next_entry:
.9747		c8		iny		                iny
.9748		c8		iny		                iny
.9749		c0 0a		cpy #$0a	                cpy #_strip_table_size
.974b		d0 ec		bne $9739	                bne _strip_loop
.974d		60		rts		                rts
.974e						_found_entry:
.974e		98		tya		                tya
.974f		4a		lsr a		                lsr
.9750		a8		tay		                tay
.9751		b9 75 97	lda $9775,y	                lda _strip_size,y
.9754		48		pha		                pha                     ; save a copy
.9755		18		clc		                clc
.9756		75 02		adc $02,x	                adc 2,x
.9758		95 02		sta $02,x	                sta 2,x
.975a		90 02		bcc $975e	                bcc +
.975c		f6 03		inc $03,x	                inc 3,x                 ; we just care about the carry
.975e						+
.975e		68		pla		                pla
.975f		0a		asl a		                asl a                   ; Double to cut off both top and bottom.
.9760		f5 00		sbc $00,x	                sbc 0,x
.9762		49 ff		eor #$ff	                eor #$ff
.9764		95 00		sta $00,x	                sta 0,x
.9766		90 02		bcc $976a	                bcc +                   ; note inverted carry check
.9768		d6 01		dec $01,x	                dec 1,x                 ; we just care about the borrow
.976a						+
.976a		60		rts		                rts
.976b						_strip_table:
>976b		ee 8e d9 8e 66 93		                .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
>9771		8f 94 15 94			                .word xt_two_to_r, xt_two_r_from        ; 2>R, 2R>
=10						_strip_table_size = * - _strip_table
.9775						_strip_size:
>9775		04 04 04			                .byte 4, 4, 4                           ; R>, R@, >R
>9778		06 06				                .byte 6, 6                              ; 2>R, 2R>
.977a						z_compile_comma:
.977a						cmpl_subroutine:
.977a		48		pha		                pha             ; save LSB of address
.977b		a9 20		lda #$20	                lda #OpJSR      ; load opcode for JSR
.977d		80 03		bra $9782	                bra +
.977f						cmpl_jump:
.977f		48		pha		                pha             ; save LSB of address
.9780		a9 4c		lda #$4c	                lda #OpJMP      ; load opcode for JMP, fall thru
.9782						+
.9782		20 8a 97	jsr $978a	                jsr cmpl_a      ; compile opcode
.9785		68		pla		                pla             ; retrieve address LSB; fall thru to cmpl_word
.9786						cmpl_word:
.9786		20 8a 97	jsr $978a	                jsr cmpl_a      ; compile LSB of address
.9789		98		tya		                tya             ; fall thru for MSB
.978a						cmpl_a:
.978a		92 00		sta ($00)	                sta (cp)
.978c		e6 00		inc $00		                inc cp
.978e		d0 02		bne $9792	                bne _done
.9790		e6 01		inc $01		                inc cp+1
.9792						_done:
.9792		60		rts		                rts
.9793						cmpl_jump_tos:
.9793		a9 4c		lda #$4c	                lda #OpJMP
.9795		20 8a 97	jsr $978a	                jsr cmpl_a
.9798		4c cd 83	jmp $83cd	                jmp xt_comma
.979b						cmpl_jump_later:
.979b		a9 4c		lda #$4c	                lda #OpJMP
.979d		20 8a 97	jsr $978a	                jsr cmpl_a
.97a0		20 1b 89	jsr $891b	                jsr xt_here
.97a3		80 e1		bra $9786	                bra cmpl_word
.97a5						check_nc_limit:
.97a5		48		pha		                pha
.97a6		38		sec		                sec
.97a7		a0 01		ldy #$01	                ldy #nc_limit_offset+1
.97a9		b1 08		lda ($08),y	                lda (up),y              ; if MSB non zero we're good, leave with C=0
.97ab		f0 01		beq $97ae	                beq +
.97ad		18		clc		                clc
.97ae						+
.97ae		68		pla		                pla
.97af		90 05		bcc $97b6	                bcc _done
.97b1		3a		dec a		                dea                     ; simplify test to A-1 < nc-limit
.97b2		88		dey		                dey
.97b3		d1 08		cmp ($08),y	                cmp (up),y              ; A-1 < LSB leaves C=0, else C=1
.97b5		1a		inc a		                ina                     ; restore A, preserves carry
.97b6						_done:
.97b6		60		rts		                rts
.97b7						cmpl_0branch_later:
.97b7		20 f1 9d	jsr $9df1	                jsr xt_zero             ; dummy placeholder, which forces long jmp in native version
.97ba		20 cc 97	jsr $97cc	                jsr cmpl_0branch_tos    ; generate native or subroutine branch code
.97bd		20 1b 89	jsr $891b	                jsr xt_here             ; either way the target address is two bytes before here
.97c0		38		sec		                sec
.97c1		b5 00		lda $00,x	                lda 0,x
.97c3		e9 02		sbc #$02	                sbc #2
.97c5		95 00		sta $00,x	                sta 0,x
.97c7		b0 02		bcs $97cb	                bcs +
.97c9		d6 01		dec $01,x	                dec 1,x
.97cb						+
.97cb		60		rts		                rts
.97cc						cmpl_0branch_tos:
.97cc		a9 0b		lda #$0b	                lda #ztest_runtime_size+5       ; typical size of inline form
.97ce		20 a5 97	jsr $97a5	                jsr check_nc_limit              ; returns C=0 if we should native compile
.97d1		90 0a		bcc $97dd	                bcc _inline
.97d3		a0 98		ldy #$98	                ldy #>zero_branch_runtime
.97d5		a9 2e		lda #$2e	                lda #<zero_branch_runtime
.97d7		20 7a 97	jsr $977a	                jsr cmpl_subroutine             ; call the 0branch runtime
.97da		4c cd 83	jmp $83cd	                jmp xt_comma                    ; add the payload and return
.97dd						_inline:
.97dd		a0 00		ldy #$00	                ldy #0
.97df						-
.97df		b9 2e 98	lda $982e,y	                lda ztest_runtime,y
.97e2		20 8a 97	jsr $978a	                jsr cmpl_a
.97e5		c8		iny		                iny
.97e6		c0 06		cpy #$06	                cpy #ztest_runtime_size
.97e8		d0 f5		bne $97df	                bne -
.97ea		b5 00		lda $00,x	                lda 0,x
.97ec		15 01		ora $01,x	                ora 1,x
.97ee		f0 31		beq $9821	                beq _long               ; always use the long form if target is 0
.97f0		20 a0 86	jsr $86a0	                jsr xt_dup
.97f3		20 1b 89	jsr $891b	                jsr xt_here
.97f6		18		clc		                clc
.97f7		a9 02		lda #$02	                lda #2
.97f9		75 00		adc $00,x	                adc 0,x
.97fb		95 00		sta $00,x	                sta 0,x
.97fd		90 02		bcc $9801	                bcc +
.97ff		f6 01		inc $01,x	                inc 1,x
.9801						+
.9801		20 e4 8b	jsr $8be4	                jsr xt_minus
.9804		e8		inx		                inx             ; pre-drop offset and use wraparound indexing to preserve flags
.9805		e8		inx		                inx
.9806		b5 ff		lda $ff,x	                lda $ff,x
.9808		a8		tay		                tay             ; Y=MSB of offset
.9809		b5 fe		lda $fe,x	                lda $fe,x       ; A=LSB, setting N flag to bit 7
.980b		30 04		bmi $9811	                bmi _minus
.980d		c0 00		cpy #$00	                cpy #0          ; if LSB is positive we need MSB = 0
.980f		80 02		bra $9813	                bra +
.9811		c0 ff		cpy #$ff	_minus:         cpy #$ff        ; if LSB is negative we need MSB = ff
.9813		d0 0c		bne $9821	+               bne _long
.9815		a9 f0		lda #$f0	                lda #OpBEQ
.9817		20 8a 97	jsr $978a	                jsr cmpl_a
.981a		b5 fe		lda $fe,x	                lda $fe,x
.981c		e8		inx		                inx             ; drop the original address we used to calc offset
.981d		e8		inx		                inx
.981e		4c 8a 97	jmp $978a	                jmp cmpl_a
.9821						_long:
.9821		a9 d0		lda #$d0	                lda #OpBNE
.9823		20 8a 97	jsr $978a	                jsr cmpl_a
.9826		a9 03		lda #$03	                lda #3
.9828		20 8a 97	jsr $978a	                jsr cmpl_a
.982b		4c 93 97	jmp $9793	                jmp cmpl_jump_tos
.982e						zero_branch_runtime:
.982e						ztest_runtime:
.982e		e8		inx		                inx
.982f		e8		inx		                inx
.9830		b5 fe		lda $fe,x	                lda $FE,x           ; wraparound so inx doesn't wreck Z status
.9832		15 ff		ora $ff,x	                ora $FF,x
=6						ztest_runtime_size = * - ztest_runtime
.9834						zbranch_runtime:
.9834		7a		ply		                ply
.9835		84 25		sty $25		                sty tmp1
.9837		7a		ply		                ply
.9838		84 26		sty $26		                sty tmp1+1
.983a		a8		tay		                tay             ; test if A = 0 which tells us whether to branch
.983b		f0 0d		beq $984a	                beq _branch
.983d		18		clc		                clc
.983e		a5 25		lda $25		                lda tmp1        ; LSB
.9840		69 03		adc #$03	                adc #3          ; skip two bytes plus the extra for jsr/rts behavior
.9842		85 25		sta $25		                sta tmp1
.9844		90 11		bcc $9857	                bcc _jmp
.9846		e6 26		inc $26		                inc tmp1+1
.9848		80 0d		bra $9857	                bra _jmp
.984a						_branch:
.984a		a0 01		ldy #$01	                ldy #1
.984c		b1 25		lda ($25),y	                lda (tmp1),y
.984e		48		pha		                pha                     ; stash the LSB until we've read the MSB too
.984f		c8		iny		                iny
.9850		b1 25		lda ($25),y	                lda (tmp1),y
.9852		85 26		sta $26		                sta tmp1+1              ; update tmp1 with our branch target
.9854		68		pla		                pla
.9855		85 25		sta $25		                sta tmp1
.9857						_jmp:
.9857		6c 25 00	jmp ($0025)	                jmp (tmp1)

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/tools.asm

.985a						xt_bye:
.985a		4c 31 f0	jmp $f031	                jmp kernel_bye
.985d						z_bye:
.985d						xt_dot_s:
.985d		20 52 85	jsr $8552	                jsr xt_depth    ; ( -- u )
.9860		a9 3c		lda #$3c	                lda #'<'
.9862		20 c5 86	jsr $86c5	                jsr emit_a
.9865		b5 00		lda $00,x	                lda 0,x
.9867		48		pha		                pha
.9868		ca		dex		                dex             ; DUP
.9869		ca		dex		                dex
.986a		95 00		sta $00,x	                sta 0,x
.986c		74 01		stz $01,x	                stz 1,x
.986e		20 f7 d7	jsr $d7f7	                jsr print_u
.9871		a9 3e		lda #$3e	                lda #'>'
.9873		20 c5 86	jsr $86c5	                jsr emit_a
.9876		a9 20		lda #$20	                lda #AscSP      ; ASCII for SPACE
.9878		20 c5 86	jsr $86c5	                jsr emit_a
.987b		e8		inx		                inx
.987c		e8		inx		                inx
.987d		e0 78		cpx #$78	                cpx #dsp0
.987f		f0 1e		beq $989f	                beq _done
.9881		7a		ply		                ply
.9882		a9 77		lda #$77	                lda #dsp0-1     ; go up one to avoid garbage
.9884		85 29		sta $29		                sta tmp3
.9886		64 2a		stz $2a		                stz tmp3+1      ; must be zero page on the 65c02
.9888						_loop:
.9888		ca		dex		                dex
.9889		ca		dex		                dex
.988a		b2 29		lda ($29)	                lda (tmp3)
.988c		95 01		sta $01,x	                sta 1,x
.988e		c6 29		dec $29		                dec tmp3
.9890		b2 29		lda ($29)	                lda (tmp3)
.9892		95 00		sta $00,x	                sta 0,x
.9894		c6 29		dec $29		                dec tmp3
.9896		5a		phy		                phy
.9897		20 30 86	jsr $8630	                jsr xt_dot
.989a		7a		ply		                ply
.989b		88		dey		                dey
.989c		d0 ea		bne $9888	                bne _loop
.989e		48		pha		                pha             ; dummy to balance stack
.989f						_done:
.989f		68		pla		                pla
.98a0		60		rts		z_dot_s:        rts
.98a1						xt_dump:
.98a1		20 8f d7	jsr $d78f	                jsr underflow_2
.98a4						_row:
.98a4		a0 10		ldy #$10	                ldy #16
.98a6		64 27		stz $27		                stz tmp2
.98a8		20 3a 84	jsr $843a	                jsr xt_cr
.98ab		b5 03		lda $03,x	                lda 3,x
.98ad		20 55 d6	jsr $d655	                jsr byte_to_ascii
.98b0		b5 02		lda $02,x	                lda 2,x
.98b2		20 55 d6	jsr $d655	                jsr byte_to_ascii
.98b5		20 c5 91	jsr $91c5	                jsr xt_space
.98b8		20 c5 91	jsr $91c5	                jsr xt_space
.98bb						_loop:
.98bb		b5 00		lda $00,x	                lda 0,x
.98bd		15 01		ora $01,x	                ora 1,x
.98bf		f0 39		beq $98fa	                beq _all_printed
.98c1		a1 02		lda ($02,x)	                lda (2,x)
.98c3		48		pha		                pha                     ; byte_to_ascii destroys A
.98c4		20 55 d6	jsr $d655	                jsr byte_to_ascii
.98c7		20 c5 91	jsr $91c5	                jsr xt_space
.98ca		68		pla		                pla
.98cb		20 70 d7	jsr $d770	                jsr is_printable
.98ce		b0 02		bcs $98d2	                bcs _printable
.98d0		a9 2e		lda #$2e	                lda #'.'                 ; Print dot if not printable
.98d2						_printable:
.98d2		5a		phy		                phy                     ; save counter
.98d3		a4 27		ldy $27		                ldy tmp2
.98d5		91 00		sta ($00),y	                sta (cp),y
.98d7		e6 27		inc $27		                inc tmp2
.98d9		7a		ply		                ply
.98da		c0 09		cpy #$09	                cpy #9
.98dc		d0 03		bne $98e1	                bne _next_char
.98de		20 c5 91	jsr $91c5	                jsr xt_space
.98e1						_next_char:
.98e1		f6 02		inc $02,x	                inc 2,x
.98e3		d0 02		bne $98e7	                bne _counter
.98e5		f6 03		inc $03,x	                inc 3,x
.98e7						_counter:
.98e7		b5 00		lda $00,x	                lda 0,x
.98e9		d0 02		bne $98ed	                bne +
.98eb		d6 01		dec $01,x	                dec 1,x
.98ed						+
.98ed		d6 00		dec $00,x	                dec 0,x
.98ef		88		dey		                dey
.98f0		d0 c9		bne $98bb	                bne _loop               ; next byte
.98f2		20 c5 91	jsr $91c5	                jsr xt_space
.98f5		20 08 99	jsr $9908	                jsr dump_print_ascii
.98f8		80 aa		bra $98a4	                bra _row                ; new row
.98fa						_all_printed:
.98fa		a5 27		lda $27		                lda tmp2
.98fc		f0 06		beq $9904	                beq _done
.98fe		20 c5 91	jsr $91c5	                jsr xt_space
.9901		20 08 99	jsr $9908	                jsr dump_print_ascii
.9904						_done:
.9904		20 9d 93	jsr $939d	                jsr xt_two_drop         ; one byte less than 4x INX
.9907		60		rts		z_dump:         rts
.9908						dump_print_ascii:
.9908		a0 00		ldy #$00	                ldy #0
.990a						_ascii_loop:
.990a		b1 00		lda ($00),y	                lda (cp),y
.990c		20 c5 86	jsr $86c5	                jsr emit_a
.990f		c8		iny		                iny
.9910		c0 08		cpy #$08	                cpy #8
.9912		d0 03		bne $9917	                bne +
.9914		20 c5 91	jsr $91c5	                jsr xt_space
.9917						+
.9917		c6 27		dec $27		                dec tmp2
.9919		d0 ef		bne $990a	                bne _ascii_loop
.991b		60		rts		                rts
.991c						xt_question:
.991c		20 1a 88	jsr $881a	                jsr xt_fetch
.991f		20 30 86	jsr $8630	                jsr xt_dot
.9922		60		rts		z_question:     rts
.9923						xt_see:
.9923		20 51 8d	jsr $8d51	                jsr xt_parse_name       ; ( addr u )
.9926		20 f0 9a	jsr $9af0	                jsr xt_find_name        ; ( nt | 0 )
.9929		b5 00		lda $00,x	                lda 0,x
.992b		15 01		ora $01,x	                ora 1,x
.992d		d0 05		bne $9934	                bne +
.992f		a9 05		lda #$05	                lda #err_noname
.9931		4c a0 d7	jmp $d7a0	                jmp error
.9934						+
.9934		20 3a 84	jsr $843a	                jsr xt_cr
.9937		a5 18		lda $18		                lda base
.9939		48		pha		                pha
.993a		20 26 89	jsr $8926	                jsr xt_hex
.993d		a9 09		lda #$09	                lda #str_see_nt
.993f		20 c6 d7	jsr $d7c6	                jsr print_string_no_lf
.9942		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt nt )
.9945		20 da 94	jsr $94da	                jsr xt_u_dot
.9948		20 c5 91	jsr $91c5	                jsr xt_space            ; ( nt )
.994b		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt nt )
.994e		20 2e 9c	jsr $9c2e	                jsr xt_name_to_int      ; ( nt xt )
.9951		a9 0a		lda #$0a	                lda #str_see_xt
.9953		20 c6 d7	jsr $d7c6	                jsr print_string_no_lf
.9956		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt xt xt )
.9959		20 da 94	jsr $94da	                jsr xt_u_dot
.995c		20 3a 84	jsr $843a	                jsr xt_cr               ; ( nt xt )
.995f		a9 08		lda #$08	                lda #str_see_flags
.9961		20 c6 d7	jsr $d7c6	                jsr print_string_no_lf
.9964		20 05 8d	jsr $8d05	                jsr xt_over             ; ( nt xt nt )
.9967		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; ( nt xt nt+1 )
.996a		20 1a 88	jsr $881a	                jsr xt_fetch            ; ( nt xt flags )
.996d		b5 00		lda $00,x	                lda 0,x
.996f		a0 06		ldy #$06	                ldy #6                  ; Not all bits are used
.9971						_flag_loop:
.9971		48		pha		                pha
.9972		29 01		and #$01	                and #%00000001
.9974		18		clc		                clc
.9975		69 30		adc #$30	                adc #'0'
.9977		20 c5 86	jsr $86c5	                jsr emit_a
.997a		20 c5 91	jsr $91c5	                jsr xt_space
.997d		68		pla		                pla
.997e		6a		ror a		                ror                     ; Next flag
.997f		88		dey		                dey
.9980		d0 ef		bne $9971	                bne _flag_loop
.9982		20 3a 84	jsr $843a	                jsr xt_cr
.9985		e8		inx		                inx
.9986		e8		inx		                inx                     ; ( nt xt )
.9987		a9 0b		lda #$0b	                lda #str_see_size
.9989		20 c6 d7	jsr $d7c6	                jsr print_string_no_lf
.998c		20 28 92	jsr $9228	                jsr xt_swap             ; ( xt nt )
.998f		20 d0 9d	jsr $9dd0	                jsr xt_wordsize         ; ( xt u )
.9992		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
.9995		20 0a 85	jsr $850a	                jsr xt_decimal
.9998		20 da 94	jsr $94da	                jsr xt_u_dot            ; ( xt u )
.999b		20 26 89	jsr $8926	                jsr xt_hex
.999e		20 3a 84	jsr $843a	                jsr xt_cr
.99a1		20 a5 93	jsr $93a5	                jsr xt_two_dup          ; ( xt u xt u )
.99a4		20 a1 98	jsr $98a1	                jsr xt_dump
.99a7		20 3a 84	jsr $843a	                jsr xt_cr
.99aa		20 9e a1	jsr $a19e	                jsr xt_disasm
.99ad		68		pla		                pla
.99ae		85 18		sta $18		                sta base
.99b0		60		rts		z_see:          rts
.99b1						xt_words:
.99b1		20 3a 84	jsr $843a	                jsr xt_cr
.99b4		a9 00		lda #$00	                lda #0
.99b6		48		pha		                pha
.99b7		ca		dex		                dex                     ; Make room on the stack for
.99b8		ca		dex		                dex                     ; a dictionary pointer.
.99b9		64 29		stz $29		                stz tmp3                ; Start at the beginning of
.99bb						_wordlist_loop:
.99bb		a0 22		ldy #$22	                ldy #num_order_offset   ; Check against byte variable #ORDER.
.99bd		a5 29		lda $29		                lda tmp3
.99bf		d1 08		cmp ($08),y	                cmp (up),y              ; See if we are done.
.99c1		d0 02		bne $99c5	                bne _have_wordlist
.99c3		80 45		bra $9a0a	                bra _words_done
.99c5						_have_wordlist:
.99c5		18		clc		                clc                     ; Index into byte array SEARCH-ORDER.
.99c6		69 23		adc #$23	                adc #search_order_offset
.99c8		a8		tay		                tay
.99c9		b1 08		lda ($08),y	                lda (up),y              ; Get the index into array WORDLISTS
.99cb		0a		asl a		                asl                     ; Turn offset into cells offset.
.99cc		18		clc		                clc
.99cd		69 0a		adc #$0a	                adc #wordlists_offset
.99cf		a8		tay		                tay
.99d0		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.99d2		95 00		sta $00,x	                sta 0,x                 ; on the stack. ( nt )
.99d4		c8		iny		                iny
.99d5		b1 08		lda ($08),y	                lda (up),y
.99d7		95 01		sta $01,x	                sta 1,x
.99d9						_loop:
.99d9		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt nt )
.99dc		20 4b 9c	jsr $9c4b	                jsr xt_name_to_string   ; ( nt addr u )
.99df		68		pla		                pla
.99e0		18		clc		                clc
.99e1		75 00		adc $00,x	                adc 0,x
.99e3		1a		inc a		                ina                     ; don't forget the space between words
.99e4		c9 4f		cmp #$4f	                cmp #MAX_LINE_LENGTH    ; usually 79
.99e6		90 06		bcc $99ee	                bcc +
.99e8		20 3a 84	jsr $843a	                jsr xt_cr
.99eb		b5 00		lda $00,x	                lda 0,x                 ; After going to next line, start
.99ed		1a		inc a		                ina                     ; with length of this word.
.99ee						+
.99ee		48		pha		                pha
.99ef		20 af 94	jsr $94af	                jsr xt_type             ; ( nt )
.99f2		a9 20		lda #$20	                lda #AscSP
.99f4		20 c5 86	jsr $86c5	                jsr emit_a
.99f7		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+
.99fa		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+
.99fd		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( nt+1 )
.9a00		b5 00		lda $00,x	                lda 0,x
.9a02		15 01		ora $01,x	                ora 1,x
.9a04		d0 d3		bne $99d9	                bne _loop
.9a06		e6 29		inc $29		                inc tmp3
.9a08		80 b1		bra $99bb	                bra _wordlist_loop
.9a0a						_words_done:
.9a0a		68		pla		                pla                     ; dump counter
.9a0b		e8		inx		                inx
.9a0c		e8		inx		                inx
.9a0d		60		rts		z_words:        rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/tali.asm

.9a0e						xt_allow_native:
.9a0e		20 e1 d6	jsr $d6e1	                jsr current_to_dp
.9a11		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9a13		b1 02		lda ($02),y	                lda (dp),y
.9a15		29 f5		and #$f5	                and #$FF-NN-AN  ; AN and NN flag is clear.
.9a17		91 02		sta ($02),y	                sta (dp),y
.9a19						z_allow_native:
.9a19		60		rts		                rts
.9a1a						xt_always_native:
.9a1a		20 e1 d6	jsr $d6e1	                jsr current_to_dp
.9a1d		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9a1f		b1 02		lda ($02),y	                lda (dp),y
.9a21		09 02		ora #$02	                ora #AN         ; Make sure AN flag is set
.9a23		29 f7		and #$f7	                and #$FF-NN     ; and NN flag is clear.
.9a25		91 02		sta ($02),y	                sta (dp),y
.9a27						z_always_native:
.9a27		60		rts		                rts
.9a28						xt_bell:
.9a28		a9 07		lda #$07	                lda #7          ; ASCII value for BELl
.9a2a		20 c5 86	jsr $86c5	                jsr emit_a
.9a2d		60		rts		z_bell:         rts
.9a2e						xt_bounds:
.9a2e		20 8f d7	jsr $d78f	                jsr underflow_2
.9a31		18		clc		                clc
.9a32		b5 00		lda $00,x	                lda 0,x                 ; LSB u
.9a34		b4 02		ldy $02,x	                ldy 2,x                 ; LSB addr
.9a36		75 02		adc $02,x	                adc 2,x
.9a38		95 02		sta $02,x	                sta 2,x                 ; LSB addr+u
.9a3a		94 00		sty $00,x	                sty 0,x
.9a3c		b5 01		lda $01,x	                lda 1,x                 ; MSB u
.9a3e		b4 03		ldy $03,x	                ldy 3,x                 ; MSB addr
.9a40		75 03		adc $03,x	                adc 3,x
.9a42		95 03		sta $03,x	                sta 3,x                 ; MSB addr+u
.9a44		94 01		sty $01,x	                sty 1,x
.9a46		60		rts		z_bounds:       rts
.9a47						xt_cleave:
.9a47		20 8f d7	jsr $d78f	                jsr underflow_2
.9a4a		20 1d a0	jsr $a01d	                jsr xt_minus_leading    ; -LEADING ( addr u )
.9a4d		20 92 9b	jsr $9b92	                jsr xt_input_to_r       ; save old imput state
.9a50		b5 00		lda $00,x	                lda 0,x         ; u is new ciblen
.9a52		85 0e		sta $0e		                sta ciblen
.9a54		b5 01		lda $01,x	                lda 1,x
.9a56		85 0f		sta $0f		                sta ciblen+1
.9a58		b5 02		lda $02,x	                lda 2,x         ; addr is new cib
.9a5a		85 0c		sta $0c		                sta cib
.9a5c		b5 03		lda $03,x	                lda 3,x
.9a5e		85 0d		sta $0d		                sta cib+1
.9a60		64 10		stz $10		                stz toin        ; >IN pointer is zero
.9a62		64 11		stz $11		                stz toin+1
.9a64		20 51 8d	jsr $8d51	                jsr xt_parse_name       ; ( addr u addr-s u-s )
.9a67		b5 00		lda $00,x	                lda 0,x
.9a69		15 01		ora $01,x	                ora 1,x
.9a6b		f0 23		beq $9a90	                beq _done
.9a6d		b5 04		lda $04,x	                lda 4,x         ; LSB of original u
.9a6f		38		sec		                sec
.9a70		f5 00		sbc $00,x	                sbc 0,x
.9a72		95 04		sta $04,x	                sta 4,x
.9a74		b5 05		lda $05,x	                lda 5,x         ; MSB of original u
.9a76		f5 01		sbc $01,x	                sbc 1,x
.9a78		95 05		sta $05,x	                sta 5,x
.9a7a		b5 06		lda $06,x	                lda 6,x         ; LSB of original addr
.9a7c		18		clc		                clc
.9a7d		75 00		adc $00,x	                adc 0,x
.9a7f		95 06		sta $06,x	                sta 6,x
.9a81		b5 07		lda $07,x	                lda 7,x         ; MSB of original addr
.9a83		75 01		adc $01,x	                adc 1,x
.9a85		95 07		sta $07,x	                sta 7,x
.9a87		20 6b 94	jsr $946b	                jsr xt_two_swap         ; ( addr-s u-s addr u )
.9a8a		20 1d a0	jsr $a01d	                jsr xt_minus_leading
.9a8d		20 6b 94	jsr $946b	                jsr xt_two_swap         ; ( addr u addr-s u-s )
.9a90						_done:
.9a90		20 9f 9d	jsr $9d9f	                jsr xt_r_to_input
.9a93		60		rts		z_cleave:       rts
.9a94						xt_digit_question:
.9a94		20 8a d7	jsr $d78a	                jsr underflow_1
.9a97		ca		dex		                dex
.9a98		ca		dex		                dex
.9a99		74 00		stz $00,x	                stz 0,x                 ; default flag is failure
.9a9b		74 01		stz $01,x	                stz 1,x
.9a9d		74 03		stz $03,x	                stz 3,x                 ; paranoid
.9a9f		b5 02		lda $02,x	                lda 2,x
.9aa1		c9 30		cmp #$30	                cmp #'0'
.9aa3		90 23		bcc $9ac8	                bcc _done               ; failure flag already set
.9aa5		c9 3a		cmp #$3a	                cmp #'9'+1               ; this is actually ":"
.9aa7		90 12		bcc $9abb	                bcc _checkbase
.9aa9		c9 41		cmp #$41	                cmp #'A'
.9aab		90 1b		bcc $9ac8	                bcc _done               ; failure flag is already set
.9aad		c9 61		cmp #$61	                cmp #'a'
.9aaf		90 07		bcc $9ab8	                bcc _case_done          ; not lower case, too low
.9ab1		c9 7b		cmp #$7b	                cmp #'z'+1
.9ab3		b0 03		bcs $9ab8	                bcs _case_done          ; not lower case, too high
.9ab5		18		clc		                clc                     ; just right
.9ab6		69 e0		adc #$e0	                adc #$E0                ; offset to upper case (wraps)
.9ab8						_case_done:
.9ab8		38		sec		                sec
.9ab9		e9 07		sbc #$07	                sbc #7                  ; fall through to _checkbase
.9abb						_checkbase:
.9abb		38		sec		                sec
.9abc		e9 30		sbc #$30	                sbc #'0'                 ; this is also the conversion step
.9abe		c5 18		cmp $18		                cmp base
.9ac0		b0 06		bcs $9ac8	                bcs _done               ; already have false flag
.9ac2		95 02		sta $02,x	                sta 2,x                 ; put number in NOS
.9ac4		d6 00		dec $00,x	                dec 0,x                 ; set success flag
.9ac6		d6 01		dec $01,x	                dec 1,x
.9ac8						_done:
.9ac8						z_digit_question:
.9ac8		60		rts		                rts
.9ac9						xt_execute_parsing:
.9ac9		20 94 d7	jsr $d794	                jsr underflow_3
.9acc		20 92 9b	jsr $9b92	                jsr xt_input_to_r       ; save normal input for later
.9acf		20 75 9c	jsr $9c75	                jsr xt_not_rote         ; -ROT ( xt addr u )
.9ad2		b5 00		lda $00,x	                lda 0,x                 ; TOS is new ciblen
.9ad4		85 0e		sta $0e		                sta ciblen
.9ad6		b5 01		lda $01,x	                lda 1,x
.9ad8		85 0f		sta $0f		                sta ciblen+1
.9ada		b5 02		lda $02,x	                lda 2,x                 ; NOS is new cib
.9adc		85 0c		sta $0c		                sta cib
.9ade		b5 03		lda $03,x	                lda 3,x
.9ae0		85 0d		sta $0d		                sta cib+1
.9ae2		64 10		stz $10		                stz toin                ; Set >IN to zero
.9ae4		64 11		stz $11		                stz toin+1
.9ae6		20 9d 93	jsr $939d	                jsr xt_two_drop         ; 2DROP ( xt )
.9ae9		20 05 88	jsr $8805	                jsr xt_execute
.9aec		20 9f 9d	jsr $9d9f	                jsr xt_r_to_input
.9aef						z_execute_parsing:
.9aef		60		rts		                rts
.9af0						xt_find_name:
.9af0		20 8f d7	jsr $d78f	                jsr underflow_2
.9af3		b5 00		lda $00,x	                lda 0,x
.9af5		15 01		ora $01,x	                ora 1,x
.9af7		d0 03		bne $9afc	                bne _nonempty
.9af9		4c 2d 9b	jmp $9b2d	                jmp _fail_done
.9afc						_nonempty:
.9afc		64 29		stz $29		                stz tmp3                ; Start at the beginning
.9afe						_wordlist_loop:
.9afe		a0 22		ldy #$22	                ldy #num_order_offset   ; Compare to byte variable #ORDER
.9b00		a5 29		lda $29		                lda tmp3
.9b02		d1 08		cmp ($08),y	                cmp (up),y              ; Check to see if we are done
.9b04		f0 27		beq $9b2d	                beq _fail_done
.9b06		18		clc		                clc             ; SEARCH-ORDER is array of bytes.
.9b07		69 23		adc #$23	                adc #search_order_offset
.9b09		a8		tay		                tay
.9b0a		b1 08		lda ($08),y	                lda (up),y      ; Get the id byte, which is the offset
.9b0c		0a		asl a		                asl                     ; Turn offset into cells offset.
.9b0d		18		clc		                clc
.9b0e		69 0a		adc #$0a	                adc #wordlists_offset
.9b10		a8		tay		                tay
.9b11		b1 08		lda ($08),y	                lda (up),y
.9b13		85 25		sta $25		                sta tmp1
.9b15		c8		iny		                iny
.9b16		b1 08		lda ($08),y	                lda (up),y
.9b18		85 26		sta $26		                sta tmp1+1
.9b1a		20 6c d6	jsr $d66c	                jsr find_header_name
.9b1d		d0 04		bne $9b23	                bne _success
.9b1f		e6 29		inc $29		                inc tmp3
.9b21		80 db		bra $9afe	                bra _wordlist_loop
.9b23						_success:
.9b23		a5 25		lda $25		                lda tmp1
.9b25		95 02		sta $02,x	                sta 2,x
.9b27		a5 26		lda $26		                lda tmp1+1
.9b29		95 03		sta $03,x	                sta 3,x
.9b2b		80 04		bra $9b31	                bra _done
.9b2d						_fail_done:
.9b2d		74 02		stz $02,x	                stz 2,x         ; failure flag
.9b2f		74 03		stz $03,x	                stz 3,x
.9b31						_done:
.9b31		e8		inx		                inx
.9b32		e8		inx		                inx
.9b33		60		rts		z_find_name:    rts
.9b34						xt_hexstore:
.9b34		20 94 d7	jsr $d794	                jsr underflow_3
.9b37		20 a0 86	jsr $86a0	                jsr xt_dup              ; Save copy of original address
.9b3a		20 8f 94	jsr $948f	                jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
.9b3d						_loop:
.9b3d		b5 00		lda $00,x	                lda 0,x
.9b3f		15 01		ora $01,x	                ora 1,x
.9b41		f0 36		beq $9b79	                beq _done
.9b43		20 47 9a	jsr $9a47	                jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.9b46		20 8f 94	jsr $948f	                jsr xt_two_to_r
.9b49		20 f1 9d	jsr $9df1	                jsr xt_zero
.9b4c		20 f1 9d	jsr $9df1	                jsr xt_zero
.9b4f		20 15 94	jsr $9415	                jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.9b52		20 c6 92	jsr $92c6	                jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.9b55		b5 00		lda $00,x	                lda 0,x
.9b57		15 01		ora $01,x	                ora 1,x
.9b59		d0 17		bne $9b72	                bne _have_chars_left
.9b5b		20 9d 93	jsr $939d	                jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
.9b5e		20 3a 9e	jsr $9e3a	                jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
.9b61		20 d9 8e	jsr $8ed9	                jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.9b64		20 37 83	jsr $8337	                jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
.9b67		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R>
.9b6a		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+
.9b6d		20 66 93	jsr $9366	                jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.9b70		80 cb		bra $9b3d	                bra _loop
.9b72						_have_chars_left:
.9b72		8a		txa		                txa
.9b73		18		clc		                clc
.9b74		69 08		adc #$08	                adc #8
.9b76		aa		tax		                tax
.9b77		80 c4		bra $9b3d	                bra _loop
.9b79						_done:
.9b79		e8		inx		                inx
.9b7a		e8		inx		                inx
.9b7b		e8		inx		                inx
.9b7c		e8		inx		                inx                     ; 2DROP
.9b7d		20 15 94	jsr $9415	                jsr xt_two_r_from       ; ( addr2+n addr2 )
.9b80		20 28 92	jsr $9228	                jsr xt_swap
.9b83		20 e4 8b	jsr $8be4	                jsr xt_minus            ; ( n )
.9b86		60		rts		z_hexstore:     rts
.9b87						xt_input:
.9b87		ca		dex		                dex
.9b88		ca		dex		                dex
.9b89		a9 14		lda #$14	                lda #<input
.9b8b		95 00		sta $00,x	                sta 0,x
.9b8d		a9 00		lda #$00	                lda #>input
.9b8f		95 01		sta $01,x	                sta 1,x
.9b91		60		rts		z_input:        rts
.9b92						xt_input_to_r:
.9b92		68		pla		                pla
.9b93		85 25		sta $25		                sta tmp1
.9b95		68		pla		                pla
.9b96		85 26		sta $26		                sta tmp1+1
.9b98		a0 07		ldy #$07	                ldy #7
.9b9a						_loop:
.9b9a		b9 0a 00	lda $000a,y	                lda insrc,y     ; insrc+7 is toin+1
.9b9d		48		pha		                pha
.9b9e		88		dey		                dey
.9b9f		10 f9		bpl $9b9a	                bpl _loop
.9ba1		a5 26		lda $26		                lda tmp1+1
.9ba3		48		pha		                pha
.9ba4		a5 25		lda $25		                lda tmp1
.9ba6		48		pha		                pha
.9ba7		60		rts		z_input_to_r: 	rts
.9ba8						xt_int_to_name:
.9ba8		20 8a d7	jsr $d78a	                jsr underflow_1
.9bab		ca		dex		                dex
.9bac		ca		dex		                dex
.9bad		74 00		stz $00,x	                stz 0,x
.9baf		74 01		stz $01,x	                stz 1,x
.9bb1						_wordlist_loop:
.9bb1		b5 00		lda $00,x	                lda 0,x                 ; Get the current wordlist.
.9bb3		0a		asl a		                asl                     ; Turn offset into cells offset.
.9bb4		18		clc		                clc
.9bb5		69 0a		adc #$0a	                adc #wordlists_offset
.9bb7		a8		tay		                tay
.9bb8		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.9bba		85 27		sta $27		                sta tmp2                ; into tmp2
.9bbc		c8		iny		                iny
.9bbd		b1 08		lda ($08),y	                lda (up),y
.9bbf		85 28		sta $28		                sta tmp2+1
.9bc1		a5 27		lda $27		                lda tmp2
.9bc3		05 28		ora $28		                ora tmp2+1
.9bc5		f0 36		beq $9bfd	                beq _next_wordlist
.9bc7		b5 02		lda $02,x	                lda 2,x         ; Target xt is now behind wordlist id.
.9bc9		85 29		sta $29		                sta tmp3        ; Save target xt in tmp3
.9bcb		b5 03		lda $03,x	                lda 3,x
.9bcd		85 2a		sta $2a		                sta tmp3+1
.9bcf						_loop:
.9bcf		a0 04		ldy #$04	                ldy #4          ; xt is four bytes down
.9bd1		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB of xt of current nt
.9bd3		c5 29		cmp $29		                cmp tmp3
.9bd5		d0 07		bne $9bde	                bne _no_match
.9bd7		c8		iny		                iny
.9bd8		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB of xt of current nt
.9bda		c5 2a		cmp $2a		                cmp tmp3+1
.9bdc		f0 30		beq $9c0e	                beq _match
.9bde						_no_match:
.9bde		18		clc		                clc
.9bdf		a5 27		lda $27		                lda tmp2
.9be1		69 02		adc #$02	                adc #2
.9be3		85 27		sta $27		                sta tmp2
.9be5		90 02		bcc $9be9	                bcc +
.9be7		e6 28		inc $28		                inc tmp2+1
.9be9						+
.9be9		a0 00		ldy #$00	                ldy #0
.9beb		b1 27		lda ($27),y	                lda (tmp2),y
.9bed		48		pha		                pha
.9bee		c8		iny		                iny
.9bef		11 27		ora ($27),y	                ora (tmp2),y
.9bf1		f0 09		beq $9bfc	                beq _zero
.9bf3		b1 27		lda ($27),y	                lda (tmp2),y
.9bf5		85 28		sta $28		                sta tmp2+1
.9bf7		68		pla		                pla
.9bf8		85 27		sta $27		                sta tmp2
.9bfa		80 d3		bra $9bcf	                bra _loop
.9bfc						_zero:
.9bfc		68		pla		                pla             ; Leftover from above loop
.9bfd						_next_wordlist:
.9bfd		b5 00		lda $00,x	                lda 0,x
.9bff		1a		inc a		                ina
.9c00		95 00		sta $00,x	                sta 0,x
.9c02		c9 0c		cmp #$0c	                cmp #max_wordlists
.9c04		d0 ab		bne $9bb1	                bne _wordlist_loop
.9c06		e8		inx		                inx
.9c07		e8		inx		                inx
.9c08		74 00		stz $00,x	                stz 0,x
.9c0a		74 01		stz $01,x	                stz 1,x
.9c0c		80 0a		bra $9c18	                bra z_int_to_name
.9c0e						_match:
.9c0e		e8		inx		                inx
.9c0f		e8		inx		                inx
.9c10		a5 27		lda $27		                lda tmp2
.9c12		95 00		sta $00,x	                sta 0,x
.9c14		a5 28		lda $28		                lda tmp2+1
.9c16		95 01		sta $01,x	                sta 1,x
.9c18		60		rts		z_int_to_name:  rts
.9c19						xt_latestnt:
.9c19		ca		dex		                dex
.9c1a		ca		dex		                dex
.9c1b		20 e1 d6	jsr $d6e1	                jsr current_to_dp
.9c1e		a5 02		lda $02		                lda dp
.9c20		95 00		sta $00,x	                sta 0,x
.9c22		a5 03		lda $03		                lda dp+1
.9c24		95 01		sta $01,x	                sta 1,x
.9c26		60		rts		z_latestnt:     rts
.9c27						xt_latestxt:
.9c27		20 19 9c	jsr $9c19	                jsr xt_latestnt         ; ( nt )
.9c2a		20 2e 9c	jsr $9c2e	                jsr xt_name_to_int      ; ( xt )
.9c2d		60		rts		z_latestxt:     rts
.9c2e						xt_name_to_int:
.9c2e		20 8a d7	jsr $d78a	                jsr underflow_1
.9c31		b5 00		lda $00,x	                lda 0,x
.9c33		18		clc		                clc
.9c34		69 04		adc #$04	                adc #4
.9c36		85 29		sta $29		                sta tmp3
.9c38		b5 01		lda $01,x	                lda 1,x
.9c3a		90 01		bcc $9c3d	                bcc _done
.9c3c		1a		inc a		                ina
.9c3d						_done:
.9c3d		85 2a		sta $2a		                sta tmp3+1
.9c3f		a0 00		ldy #$00	                ldy #0
.9c41		b1 29		lda ($29),y	                lda (tmp3),y
.9c43		95 00		sta $00,x	                sta 0,x
.9c45		c8		iny		                iny
.9c46		b1 29		lda ($29),y	                lda (tmp3),y
.9c48		95 01		sta $01,x	                sta 1,x
.9c4a		60		rts		z_name_to_int:  rts
.9c4b						xt_name_to_string:
.9c4b		20 8a d7	jsr $d78a	                jsr underflow_1
.9c4e		ca		dex		                dex
.9c4f		ca		dex		                dex
.9c50		a1 02		lda ($02,x)	                lda (2,x)
.9c52		95 00		sta $00,x	                sta 0,x
.9c54		74 01		stz $01,x	                stz 1,x
.9c56		b5 02		lda $02,x	                lda 2,x         ; LSB
.9c58		18		clc		                clc
.9c59		69 08		adc #$08	                adc #8
.9c5b		95 02		sta $02,x	                sta 2,x
.9c5d		90 02		bcc $9c61	                bcc z_name_to_string
.9c5f		f6 03		inc $03,x	                inc 3,x         ; MSB
.9c61						z_name_to_string:
.9c61		60		rts		                rts
.9c62						xt_nc_limit:
.9c62		a9 00		lda #$00	                lda #nc_limit_offset
.9c64		4c 46 d6	jmp $d646	                jmp push_upvar_tos
.9c67						z_nc_limit:
.9c67						xt_never_native:
.9c67		20 e1 d6	jsr $d6e1	                jsr current_to_dp
.9c6a		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9c6c		b1 02		lda ($02),y	                lda (dp),y
.9c6e		09 08		ora #$08	                ora #NN         ; Make sure NN flag is set
.9c70		29 fd		and #$fd	                and #$FF-AN     ; and AN flag is clear.
.9c72		91 02		sta ($02),y	                sta (dp),y
.9c74						z_never_native:
.9c74		60		rts		                rts
.9c75						xt_not_rote:
.9c75		20 94 d7	jsr $d794	                jsr underflow_3
.9c78		b4 01		ldy $01,x	                ldy 1,x         ; MSB first
.9c7a		b5 03		lda $03,x	                lda 3,x
.9c7c		95 01		sta $01,x	                sta 1,x
.9c7e		b5 05		lda $05,x	                lda 5,x
.9c80		95 03		sta $03,x	                sta 3,x
.9c82		94 05		sty $05,x	                sty 5,x
.9c84		b4 00		ldy $00,x	                ldy 0,x         ; LSB second
.9c86		b5 02		lda $02,x	                lda 2,x
.9c88		95 00		sta $00,x	                sta 0,x
.9c8a		b5 04		lda $04,x	                lda 4,x
.9c8c		95 02		sta $02,x	                sta 2,x
.9c8e		94 04		sty $04,x	                sty 4,x
.9c90		60		rts		z_not_rote:     rts
.9c91						xt_number:
.9c91		20 8f d7	jsr $d78f	                jsr underflow_2
.9c94		64 1e		stz $1e		                stz tmpdsp      ; %n000 000d
.9c96		a5 18		lda $18		                lda base
.9c98		48		pha		                pha
.9c99		20 a5 93	jsr $93a5	                jsr xt_two_dup
.9c9c		a1 02		lda ($02,x)	                lda (2,x)
.9c9e		c9 23		cmp #$23	                cmp #'#'                ; decimal?
.9ca0		d0 04		bne $9ca6	                bne _check_hex
.9ca2		a9 0a		lda #$0a	                lda #10
.9ca4		80 42		bra $9ce8	                bra _base_changed
.9ca6						_check_hex:
.9ca6		c9 24		cmp #$24	                cmp #'$'
.9ca8		d0 04		bne $9cae	                bne _check_binary
.9caa		a9 10		lda #$10	                lda #16
.9cac		80 3a		bra $9ce8	                bra _base_changed
.9cae						_check_binary:
.9cae		c9 25		cmp #$25	                cmp #'%'
.9cb0		d0 04		bne $9cb6	                bne _check_char
.9cb2		a9 02		lda #$02	                lda #2
.9cb4		80 32		bra $9ce8	                bra _base_changed
.9cb6						_check_char:
.9cb6		c9 27		cmp #$27	                cmp #"'"
.9cb8		d0 3a		bne $9cf4	                bne _check_minus
.9cba		b5 00		lda $00,x	                lda 0,x         ; Get the length
.9cbc		c9 03		cmp #$03	                cmp #3
.9cbe		d0 26		bne $9ce6	                bne _not_a_char
.9cc0		b5 01		lda $01,x	                lda 1,x
.9cc2		d0 22		bne $9ce6	                bne _not_a_char ; No compare needed to check for non-zero.
.9cc4		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9cc6		18		clc		                clc
.9cc7		69 02		adc #$02	                adc #2          ; length of string
.9cc9		85 23		sta $23		                sta tmptos
.9ccb		b5 03		lda $03,x	                lda 3,x
.9ccd		69 00		adc #$00	                adc #0          ; only need carry
.9ccf		85 24		sta $24		                sta tmptos+1
.9cd1		b2 23		lda ($23)	                lda (tmptos)
.9cd3		c9 27		cmp #$27	                cmp #"'"
.9cd5		d0 0f		bne $9ce6	                bne _not_a_char
.9cd7		f6 02		inc $02,x	                inc 2,x
.9cd9		d0 02		bne $9cdd	                bne +
.9cdb		f6 03		inc $03,x	                inc 3,x
.9cdd						+
.9cdd		a1 02		lda ($02,x)	                lda (2,x)
.9cdf		95 02		sta $02,x	                sta 2,x
.9ce1		74 03		stz $03,x	                stz 3,x
.9ce3		4c 66 9d	jmp $9d66	                jmp _drop_original_string ; Single flag will drop the TOS for us.
.9ce6						_not_a_char:
.9ce6		80 5c		bra $9d44	                bra _number_error
.9ce8						_base_changed:
.9ce8		85 18		sta $18		                sta base        ; Switch to the new base
.9cea		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9cec		d0 02		bne $9cf0	                bne +
.9cee		f6 03		inc $03,x	                inc 3,x
.9cf0						+
.9cf0		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9cf2		a1 02		lda ($02,x)	                lda (2,x)       ; Load the first char again
.9cf4						_check_minus:
.9cf4		c9 2d		cmp #$2d	                cmp #'-'
.9cf6		d0 0c		bne $9d04	                bne _check_dot
.9cf8		a9 80		lda #$80	                lda #$80
.9cfa		85 1e		sta $1e		                sta tmpdsp      ; set the sign bit
.9cfc		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9cfe		d0 02		bne $9d02	                bne +
.9d00		f6 03		inc $03,x	                inc 3,x
.9d02						+
.9d02		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9d04						_check_dot:
.9d04		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9d06		18		clc		                clc
.9d07		75 00		adc $00,x	                adc 0,x         ; length of string
.9d09		85 23		sta $23		                sta tmptos
.9d0b		b5 03		lda $03,x	                lda 3,x
.9d0d		69 00		adc #$00	                adc #0          ; only need carry
.9d0f		85 24		sta $24		                sta tmptos+1
.9d11		a5 23		lda $23		                lda tmptos
.9d13		d0 02		bne $9d17	                bne +
.9d15		c6 24		dec $24		                dec tmptos+1
.9d17						+
.9d17		c6 23		dec $23		                dec tmptos
.9d19		b2 23		lda ($23)	                lda (tmptos)
.9d1b		c9 2e		cmp #$2e	                cmp #'.'
.9d1d		d0 04		bne $9d23	                bne _main
.9d1f		e6 1e		inc $1e		                inc tmpdsp
.9d21		d6 00		dec $00,x	                dec 0,x
.9d23						_main:
.9d23		ca		dex		                dex
.9d24		ca		dex		                dex
.9d25		ca		dex		                dex
.9d26		ca		dex		                dex
.9d27		b5 04		lda $04,x	                lda 4,x         ; LSB of length
.9d29		95 00		sta $00,x	                sta 0,x
.9d2b		74 01		stz $01,x	                stz 1,x         ; MSB, max length 255 chars
.9d2d		b5 06		lda $06,x	                lda 6,x         ; LSB of address
.9d2f		95 02		sta $02,x	                sta 2,x
.9d31		b5 07		lda $07,x	                lda 7,x         ; MSB of address
.9d33		95 03		sta $03,x	                sta 3,x
.9d35		74 04		stz $04,x	                stz 4,x         ; clear space for ud
.9d37		74 05		stz $05,x	                stz 5,x
.9d39		74 06		stz $06,x	                stz 6,x
.9d3b		74 07		stz $07,x	                stz 7,x
.9d3d		20 c6 92	jsr $92c6	                jsr xt_to_number        ; (ud addr u -- ud addr u )
.9d40		b5 00		lda $00,x	                lda 0,x
.9d42		f0 1e		beq $9d62	                beq _all_converted
.9d44						_number_error:
.9d44		20 9d 93	jsr $939d	                jsr xt_two_drop ; >NUMBER modified addr u
.9d47		20 9d 93	jsr $939d	                jsr xt_two_drop ; ud   (partially converted number)
.9d4a		a9 3e		lda #$3e	                lda #'>'
.9d4c		20 c5 86	jsr $86c5	                jsr emit_a
.9d4f		20 af 94	jsr $94af	                jsr xt_type
.9d52		a9 3c		lda #$3c	                lda #'<'
.9d54		20 c5 86	jsr $86c5	                jsr emit_a
.9d57		20 c5 91	jsr $91c5	                jsr xt_space
.9d5a		68		pla		                pla
.9d5b		85 18		sta $18		                sta base
.9d5d		a9 08		lda #$08	                lda #err_syntax
.9d5f		4c a0 d7	jmp $d7a0	                jmp error
.9d62						_all_converted:
.9d62		e8		inx		                inx ; Drop the current addr u
.9d63		e8		inx		                inx
.9d64		e8		inx		                inx
.9d65		e8		inx		                inx
.9d66						_drop_original_string:
.9d66		20 6b 94	jsr $946b	                jsr xt_two_swap  ; Drop the original addr u
.9d69		20 9d 93	jsr $939d	                jsr xt_two_drop  ; (was saved for unknown word error message)
.9d6c		a5 1e		lda $1e		                lda tmpdsp      ; flag for double/minus
.9d6e		a0 20		ldy #$20	                ldy #%00100000  ; status bit 5 for double(1) or single(0)
.9d70		0a		asl a		                asl             ; %n000 000d => %0000 00d0, C=n, Z=d
.9d71		f0 0a		beq $9d7d	                beq _single
.9d73		98		tya		                tya
.9d74		04 1c		tsb $1c		                tsb status
.9d76		90 0f		bcc $9d87	                bcc _done       ; no minus, all done
.9d78		20 5f 9e	jsr $9e5f	                jsr xt_dnegate
.9d7b		80 0a		bra $9d87	                bra _done
.9d7d						_single:
.9d7d		e8		inx		                inx
.9d7e		e8		inx		                inx
.9d7f		98		tya		                tya
.9d80		14 1c		trb $1c		                trb status
.9d82		90 03		bcc $9d87	                bcc _done       ; no minus, all done
.9d84		20 1f 8c	jsr $8c1f	                jsr xt_negate
.9d87						_done:
.9d87		68		pla		                pla
.9d88		85 18		sta $18		                sta base
.9d8a		60		rts		z_number:       rts
.9d8b						xt_editor_wordlist:
.9d8b						xt_one:
.9d8b		ca		dex		                dex
.9d8c		ca		dex		                dex
.9d8d		a9 01		lda #$01	                lda #1
.9d8f		95 00		sta $00,x	                sta 0,x
.9d91		74 01		stz $01,x	                stz 1,x
.9d93						z_editor_wordlist:
.9d93						z_one:
.9d93		60		rts		                rts
.9d94						xt_output:
.9d94		ca		dex		                dex
.9d95		ca		dex		                dex
.9d96		a9 12		lda #$12	                lda #<output
.9d98		95 00		sta $00,x	                sta 0,x
.9d9a		a9 00		lda #$00	                lda #>output
.9d9c		95 01		sta $01,x	                sta 1,x
.9d9e		60		rts		z_output:       rts
.9d9f						xt_r_to_input:
.9d9f		68		pla		                pla
.9da0		85 25		sta $25		                sta tmp1
.9da2		68		pla		                pla
.9da3		85 26		sta $26		                sta tmp1+1
.9da5		a0 00		ldy #$00	                ldy #0
.9da7						_loop:
.9da7		68		pla		                pla
.9da8		99 0a 00	sta $000a,y	                sta insrc,y
.9dab		c8		iny		                iny
.9dac		c0 08		cpy #$08	                cpy #8
.9dae		d0 f7		bne $9da7	                bne _loop
.9db0		a5 26		lda $26		                lda tmp1+1
.9db2		48		pha		                pha
.9db3		a5 25		lda $25		                lda tmp1
.9db5		48		pha		                pha
.9db6		60		rts		z_r_to_input: 	rts
.9db7						xt_strip_underflow:
.9db7		a9 02		lda #$02	                lda #uf_strip_offset
.9db9		4c 46 d6	jmp $d646	                jmp push_upvar_tos
.9dbc						z_strip_underflow:
.9dbc						xt_assembler_wordlist:
.9dbc						xt_two:
.9dbc		ca		dex		                dex
.9dbd		ca		dex		                dex
.9dbe		a9 02		lda #$02	                lda #2
.9dc0		95 00		sta $00,x	                sta 0,x
.9dc2		74 01		stz $01,x	                stz 1,x
.9dc4						z_assembler_wordlist:
.9dc4		60		rts		z_two:          rts
.9dc5						xt_useraddr:
.9dc5		ca		dex		                dex
.9dc6		ca		dex		                dex
.9dc7		a9 08		lda #$08	                lda #<up
.9dc9		95 00		sta $00,x	                sta 0,x
.9dcb		a9 00		lda #$00	                lda #>up
.9dcd		95 01		sta $01,x	                sta 1,x
.9dcf		60		rts		z_useraddr:     rts
.9dd0						xt_wordsize:
.9dd0		20 8a d7	jsr $d78a	                jsr underflow_1
.9dd3		b5 00		lda $00,x	                lda 0,x
.9dd5		85 25		sta $25		                sta tmp1
.9dd7		b5 01		lda $01,x	                lda 1,x
.9dd9		85 26		sta $26		                sta tmp1+1
.9ddb		a0 06		ldy #$06	                ldy #6
.9ddd		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB of z
.9ddf		88		dey		                dey
.9de0		88		dey		                dey
.9de1		38		sec		                sec
.9de2		f1 25		sbc ($25),y	                sbc (tmp1),y    ; LSB of xt
.9de4		95 00		sta $00,x	                sta 0,x
.9de6		a0 07		ldy #$07	                ldy #7
.9de8		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB of z
.9dea		88		dey		                dey
.9deb		88		dey		                dey
.9dec		f1 25		sbc ($25),y	                sbc (tmp1),y    ; MSB of xt
.9dee		95 01		sta $01,x	                sta 1,x
.9df0		60		rts		z_wordsize:     rts
.9df1						xt_case:
.9df1						xt_false:
.9df1						xt_forth_wordlist:
.9df1						xt_zero:
.9df1		ca		dex		                dex             ; push
.9df2		ca		dex		                dex
.9df3		74 00		stz $00,x	                stz 0,x
.9df5		74 01		stz $01,x	                stz 1,x
.9df7						z_case:
.9df7						z_false:
.9df7						z_forth_wordlist:
.9df7						z_zero:
.9df7		60		rts		                rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/double.asm

.9df8						xt_d_minus:
.9df8		20 99 d7	jsr $d799	                jsr underflow_4 ; two double numbers
.9dfb		38		sec		                sec
.9dfc		b5 06		lda $06,x	                lda 6,x         ; LSB of lower word
.9dfe		f5 02		sbc $02,x	                sbc 2,x
.9e00		95 06		sta $06,x	                sta 6,x
.9e02		b5 07		lda $07,x	                lda 7,x         ; MSB of lower word
.9e04		f5 03		sbc $03,x	                sbc 3,x
.9e06		95 07		sta $07,x	                sta 7,x
.9e08		b5 04		lda $04,x	                lda 4,x         ; LSB of upper word
.9e0a		f5 00		sbc $00,x	                sbc 0,x
.9e0c		95 04		sta $04,x	                sta 4,x
.9e0e		b5 05		lda $05,x	                lda 5,x         ; MSB of upper word
.9e10		f5 01		sbc $01,x	                sbc 1,x
.9e12		95 05		sta $05,x	                sta 5,x
.9e14		e8		inx		                inx
.9e15		e8		inx		                inx
.9e16		e8		inx		                inx
.9e17		e8		inx		                inx
.9e18		60		rts		z_d_minus:      rts
.9e19						xt_d_plus:
.9e19		20 99 d7	jsr $d799	                jsr underflow_4 ; two double numbers
.9e1c		18		clc		                clc
.9e1d		b5 02		lda $02,x	                lda 2,x         ; LSB of lower word
.9e1f		75 06		adc $06,x	                adc 6,x
.9e21		95 06		sta $06,x	                sta 6,x
.9e23		b5 03		lda $03,x	                lda 3,x         ; MSB of lower word
.9e25		75 07		adc $07,x	                adc 7,x
.9e27		95 07		sta $07,x	                sta 7,x
.9e29		b5 00		lda $00,x	                lda 0,x         ; LSB of upper word
.9e2b		75 04		adc $04,x	                adc 4,x
.9e2d		95 04		sta $04,x	                sta 4,x
.9e2f		b5 01		lda $01,x	                lda 1,x         ; MSB of upper word
.9e31		75 05		adc $05,x	                adc 5,x
.9e33		95 05		sta $05,x	                sta 5,x
.9e35		e8		inx		                inx
.9e36		e8		inx		                inx
.9e37		e8		inx		                inx
.9e38		e8		inx		                inx
.9e39		60		rts		z_d_plus:       rts
.9e3a						xt_d_to_s:
.9e3a		20 8f d7	jsr $d78f	                jsr underflow_2
.9e3d		e8		inx		                inx
.9e3e		e8		inx		                inx
.9e3f		60		rts		z_d_to_s:       rts
.9e40						xt_dabs:
.9e40		20 8f d7	jsr $d78f	                jsr underflow_2 ; double number
.9e43		b5 01		lda $01,x	                lda 1,x         ; MSB of high cell
.9e45		10 17		bpl $9e5e	                bpl _done       ; positive, we get off light
.9e47		a0 00		ldy #$00	                ldy #0
.9e49		38		sec		                sec
.9e4a		98		tya		                tya
.9e4b		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.9e4d		95 02		sta $02,x	                sta 2,x
.9e4f		98		tya		                tya
.9e50		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.9e52		95 03		sta $03,x	                sta 3,x
.9e54		98		tya		                tya
.9e55		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.9e57		95 00		sta $00,x	                sta 0,x
.9e59		98		tya		                tya
.9e5a		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.9e5c		95 01		sta $01,x	                sta 1,x
.9e5e						_done:
.9e5e		60		rts		z_dabs:         rts
.9e5f						xt_dnegate:
.9e5f		20 8f d7	jsr $d78f	                jsr underflow_2 ; double number
.9e62		a0 00		ldy #$00	     		ldy #0
.9e64		38		sec		                sec
.9e65		98		tya		                tya
.9e66		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.9e68		95 02		sta $02,x	                sta 2,x
.9e6a		98		tya		                tya
.9e6b		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.9e6d		95 03		sta $03,x	                sta 3,x
.9e6f		98		tya		                tya
.9e70		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.9e72		95 00		sta $00,x	                sta 0,x
.9e74		98		tya		                tya
.9e75		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.9e77		95 01		sta $01,x	                sta 1,x
.9e79		60		rts		z_dnegate:      rts
.9e7a						xt_d_dot:
.9e7a		20 8f d7	jsr $d78f	                jsr underflow_2
.9e7d		20 83 93	jsr $9383	                jsr xt_tuck
.9e80		20 40 9e	jsr $9e40	                jsr xt_dabs
.9e83		20 cf 89	jsr $89cf	                jsr xt_less_number_sign
.9e86		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s
.9e89		20 8b 8f	jsr $8f8b	                jsr xt_rot
.9e8c		20 4a 91	jsr $914a	                jsr xt_sign
.9e8f		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater
.9e92		20 af 94	jsr $94af	                jsr xt_type
.9e95		20 c5 91	jsr $91c5	                jsr xt_space
.9e98		60		rts		z_d_dot:        rts
.9e99						xt_d_dot_r:
.9e99		20 94 d7	jsr $d794	                jsr underflow_3
.9e9c		20 66 93	jsr $9366	                jsr xt_to_r
.9e9f		20 83 93	jsr $9383	                jsr xt_tuck
.9ea2		20 40 9e	jsr $9e40	                jsr xt_dabs
.9ea5		20 cf 89	jsr $89cf	                jsr xt_less_number_sign
.9ea8		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s
.9eab		20 8b 8f	jsr $8f8b	                jsr xt_rot
.9eae		20 4a 91	jsr $914a	                jsr xt_sign
.9eb1		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater
.9eb4		20 ee 8e	jsr $8eee	                jsr xt_r_from
.9eb7		20 05 8d	jsr $8d05	                jsr xt_over
.9eba		20 e4 8b	jsr $8be4	                jsr xt_minus
.9ebd		20 cb 91	jsr $91cb	                jsr xt_spaces
.9ec0		20 af 94	jsr $94af	                jsr xt_type
.9ec3		60		rts		z_d_dot_r:      rts
.9ec4						xt_two_constant:
.9ec4		20 8f d7	jsr $d78f	                jsr underflow_2
.9ec7		20 40 84	jsr $8440	                jsr xt_create
.9eca		20 28 92	jsr $9228	                jsr xt_swap
.9ecd		20 cd 83	jsr $83cd	                jsr xt_comma
.9ed0		20 cd 83	jsr $83cd	                jsr xt_comma
.9ed3		20 fe 85	jsr $85fe	                jsr does_runtime    ; does> turns into these two routines.
.9ed6		20 1f d6	jsr $d61f	                jsr dodoes
.9ed9		20 a0 86	jsr $86a0	                jsr xt_dup
.9edc		20 1a 88	jsr $881a	                jsr xt_fetch
.9edf		20 28 92	jsr $9228	                jsr xt_swap
.9ee2		20 43 83	jsr $8343	                jsr xt_cell_plus
.9ee5		20 1a 88	jsr $881a	                jsr xt_fetch
.9ee8		60		rts		z_two_constant: rts
.9ee9						xt_two_literal:
.9ee9		20 8f d7	jsr $d78f	                jsr underflow_2 ; double number
.9eec		a9 0a		lda #$0a	                lda #template_push_tos_size
.9eee		0a		asl a		                asl
.9eef		20 a5 97	jsr $97a5	                jsr check_nc_limit
.9ef2		b0 09		bcs $9efd	                bcs _no_inline
.9ef4		20 28 92	jsr $9228	                jsr xt_swap
.9ef7		20 f2 89	jsr $89f2	                jsr xt_literal
.9efa		4c f2 89	jmp $89f2	                jmp xt_literal
.9efd						_no_inline:
.9efd		20 5c a1	jsr $a15c	                jsr cmpl_two_literal
.9f00		60		rts		z_two_literal:  rts
.9f01						xt_two_variable:
.9f01		20 40 84	jsr $8440	                jsr xt_create
.9f04		ca		dex		                dex
.9f05		ca		dex		                dex
.9f06		a9 04		lda #$04	                lda #4
.9f08		95 00		sta $00,x	                sta 0,x
.9f0a		74 01		stz $01,x	                stz 1,x
.9f0c		20 27 82	jsr $8227	                jsr xt_allot
.9f0f		60		rts		z_two_variable: rts
.9f10						xt_ud_dot:
.9f10		20 8f d7	jsr $d78f	                jsr underflow_2 ; double number
.9f13		20 cf 89	jsr $89cf	                jsr xt_less_number_sign
.9f16		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s
.9f19		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater
.9f1c		20 af 94	jsr $94af	                jsr xt_type
.9f1f		20 c5 91	jsr $91c5	                jsr xt_space
.9f22		60		rts		z_ud_dot:        rts
.9f23						xt_ud_dot_r:
.9f23		20 94 d7	jsr $d794	                jsr underflow_3
.9f26		20 66 93	jsr $9366	                jsr xt_to_r
.9f29		20 cf 89	jsr $89cf	                jsr xt_less_number_sign
.9f2c		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s
.9f2f		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater
.9f32		20 ee 8e	jsr $8eee	                jsr xt_r_from
.9f35		20 05 8d	jsr $8d05	                jsr xt_over
.9f38		20 e4 8b	jsr $8be4	                jsr xt_minus
.9f3b		20 cb 91	jsr $91cb	                jsr xt_spaces
.9f3e		20 af 94	jsr $94af	                jsr xt_type
.9f41		60		rts		z_ud_dot_r:      rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/string.asm

.9f42						xt_cmove:
.9f42		20 94 d7	jsr $d794	                jsr underflow_3
.9f45		b5 02		lda $02,x	                lda 2,x
.9f47		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.9f49		b5 03		lda $03,x	                lda 3,x
.9f4b		85 28		sta $28		                sta tmp2+1
.9f4d		b5 04		lda $04,x	                lda 4,x
.9f4f		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.9f51		b5 05		lda $05,x	                lda 5,x
.9f53		85 26		sta $26		                sta tmp1+1
.9f55		a0 00		ldy #$00	                ldy #0
.9f57		b5 01		lda $01,x	                lda 1,x         ; number of whole pages to move
.9f59		f0 0f		beq $9f6a	                beq _dopartial
.9f5b						_page:
.9f5b		b1 25		lda ($25),y	                lda (tmp1),y
.9f5d		91 27		sta ($27),y	                sta (tmp2),y
.9f5f		c8		iny		                iny
.9f60		d0 f9		bne $9f5b	                bne _page
.9f62		e6 26		inc $26		                inc tmp1+1
.9f64		e6 28		inc $28		                inc tmp2+1
.9f66		d6 01		dec $01,x	                dec 1,x
.9f68		d0 f1		bne $9f5b	                bne _page
.9f6a						_dopartial:
.9f6a		b5 00		lda $00,x	                lda 0,x         ; length of last page
.9f6c		f0 09		beq $9f77	                beq _done
.9f6e						_partial:
.9f6e		b1 25		lda ($25),y	                lda (tmp1),y
.9f70		91 27		sta ($27),y	                sta (tmp2),y
.9f72		c8		iny		                iny
.9f73		d6 00		dec $00,x	                dec 0,x
.9f75		d0 f7		bne $9f6e	                bne _partial
.9f77						_done:
.9f77		8a		txa		                txa
.9f78		18		clc		                clc
.9f79		69 06		adc #$06	                adc #6
.9f7b		aa		tax		                tax
.9f7c		60		rts		z_cmove:        rts
.9f7d						xt_cmove_up:
.9f7d		20 94 d7	jsr $d794	                jsr underflow_3
.9f80		b5 02		lda $02,x	                lda 2,x
.9f82		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.9f84		b5 03		lda $03,x	                lda 3,x
.9f86		18		clc		                clc
.9f87		75 01		adc $01,x	                adc 1,x
.9f89		85 28		sta $28		                sta tmp2+1      ; point to last page of destination
.9f8b		b5 04		lda $04,x	                lda 4,x
.9f8d		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.9f8f		b5 05		lda $05,x	                lda 5,x
.9f91		18		clc		                clc
.9f92		75 01		adc $01,x	                adc 1,x
.9f94		85 26		sta $26		                sta tmp1+1      ; point to last page of source
.9f96		f6 01		inc $01,x	                inc 1,x         ; allows us to use bne with dec 1,x below
.9f98		b4 00		ldy $00,x	                ldy 0,x         ; length of last page
.9f9a		f0 0e		beq $9faa	                beq _nopartial
.9f9c						_outerloop:
.9f9c		88		dey		                dey
.9f9d		f0 07		beq $9fa6	                beq _finishpage
.9f9f						_innerloop:
.9f9f		b1 25		lda ($25),y	                lda (tmp1),y
.9fa1		91 27		sta ($27),y	                sta (tmp2),y
.9fa3		88		dey		                dey
.9fa4		d0 f9		bne $9f9f	                bne _innerloop
.9fa6						_finishpage:
.9fa6		b2 25		lda ($25)	                lda (tmp1)      ; handle y = 0 separately
.9fa8		92 27		sta ($27)	                sta (tmp2)
.9faa						_nopartial:
.9faa		c6 26		dec $26		                dec tmp1+1      ; back up to previous pages
.9fac		c6 28		dec $28		                dec tmp2+1
.9fae		d6 01		dec $01,x	                dec 1,x
.9fb0		d0 ea		bne $9f9c	                bne _outerloop
.9fb2		8a		txa		                txa
.9fb3		18		clc		                clc
.9fb4		69 06		adc #$06	                adc #6
.9fb6		aa		tax		                tax
.9fb7		60		rts		z_cmove_up:     rts
.9fb8						xt_compare:
.9fb8		20 99 d7	jsr $d799	                jsr underflow_4
.9fbb		b5 02		lda $02,x	                lda 2,x
.9fbd		85 27		sta $27		                sta tmp2
.9fbf		b5 03		lda $03,x	                lda 3,x
.9fc1		85 28		sta $28		                sta tmp2+1
.9fc3		b5 06		lda $06,x	                lda 6,x
.9fc5		85 25		sta $25		                sta tmp1
.9fc7		b5 07		lda $07,x	                lda 7,x
.9fc9		85 26		sta $26		                sta tmp1+1
.9fcb						_compare_loop:
.9fcb		b5 04		lda $04,x	                lda 4,x
.9fcd		15 05		ora $05,x	                ora 5,x
.9fcf		f0 2c		beq $9ffd	                beq _str1_done
.9fd1		b5 00		lda $00,x	                lda 0,x
.9fd3		15 01		ora $01,x	                ora 1,x
.9fd5		f0 3a		beq $a011	                beq _greater    ; Str2 empty first
.9fd7		b2 25		lda ($25)	                lda (tmp1)
.9fd9		d2 27		cmp ($27)	                cmp (tmp2)
.9fdb		90 26		bcc $a003	                bcc _less
.9fdd		d0 32		bne $a011	                bne _greater
.9fdf		e6 25		inc $25		                inc tmp1
.9fe1		d0 02		bne $9fe5	                bne +
.9fe3		e6 26		inc $26		                inc tmp1+1
.9fe5						+
.9fe5		e6 27		inc $27		                inc tmp2
.9fe7		d0 02		bne $9feb	                bne +
.9fe9		e6 28		inc $28		                inc tmp2+1
.9feb						+
.9feb		b5 04		lda $04,x	                lda 4,x
.9fed		d0 02		bne $9ff1	                bne +
.9fef		d6 05		dec $05,x	                dec 5,x
.9ff1						+
.9ff1		d6 04		dec $04,x	                dec 4,x
.9ff3		b5 00		lda $00,x	                lda 0,x
.9ff5		d0 02		bne $9ff9	                bne +
.9ff7		d6 01		dec $01,x	                dec 1,x
.9ff9						+
.9ff9		d6 00		dec $00,x	                dec 0,x
.9ffb		80 ce		bra $9fcb	                bra _compare_loop
.9ffd						_str1_done:
.9ffd		b5 00		lda $00,x	                lda 0,x
.9fff		15 01		ora $01,x	                ora 1,x
.a001		f0 08		beq $a00b	                beq _equal      ; Both out of letters
.a003						_less:
.a003		a9 ff		lda #$ff	                lda #$FF
.a005		95 06		sta $06,x	                sta 6,x
.a007		95 07		sta $07,x	                sta 7,x
.a009		80 0c		bra $a017	                bra _done
.a00b						_equal:
.a00b		74 06		stz $06,x	                stz 6,x
.a00d		74 07		stz $07,x	                stz 7,x
.a00f		80 06		bra $a017	                bra _done
.a011						_greater:
.a011		a9 01		lda #$01	                lda #1
.a013		95 06		sta $06,x	                sta 6,x
.a015		74 07		stz $07,x	                stz 7,x
.a017						_done:
.a017		8a		txa		                txa
.a018		18		clc		                clc
.a019		69 06		adc #$06	                adc #6
.a01b		aa		tax		                tax
.a01c		60		rts		z_compare:      rts
.a01d						xt_minus_leading:
.a01d		20 8f d7	jsr $d78f	                jsr underflow_2
.a020						_loop:
.a020		b5 00		lda $00,x	                lda 0,x
.a022		15 01		ora $01,x	                ora 1,x
.a024		f0 0f		beq $a035	                beq _done
.a026		a1 02		lda ($02,x)	                lda (2,x)               ; get first character
.a028		20 7d d7	jsr $d77d	                jsr is_whitespace
.a02b		90 08		bcc $a035	                bcc _done
.a02d		20 8b 9d	jsr $9d8b	                jsr xt_one              ; ( addr u 1 )
.a030		20 12 a1	jsr $a112	                jsr xt_slash_string     ; ( addr+ u-1 )
.a033		80 eb		bra $a020	                bra _loop
.a035						_done:
.a035						z_minus_leading:
.a035		60		rts		                rts
.a036						xt_minus_trailing:
.a036		20 8f d7	jsr $d78f	                jsr underflow_2
.a039		b5 00		lda $00,x	                lda 0,x         ; LSB of n
.a03b		15 01		ora $01,x	                ora 1,x         ; MSB of n
.a03d		f0 33		beq $a072	                beq _done
.a03f		18		clc		                clc
.a040		b5 02		lda $02,x	                lda 2,x         ; LSB of addr
.a042		75 00		adc $00,x	                adc 0,x
.a044		85 25		sta $25		                sta tmp1
.a046		b5 03		lda $03,x	                lda 3,x         ; MSB of addr
.a048		75 01		adc $01,x	                adc 1,x
.a04a		85 26		sta $26		                sta tmp1+1
.a04c		a5 25		lda $25		                lda tmp1
.a04e		d0 02		bne $a052	                bne +
.a050		c6 26		dec $26		                dec tmp1+1
.a052						+
.a052		c6 25		dec $25		                dec tmp1
.a054						_loop:
.a054		b2 25		lda ($25)	                lda (tmp1)
.a056		c9 20		cmp #$20	                cmp #AscSP
.a058		d0 18		bne $a072	                bne _done
.a05a		a5 25		lda $25		                lda tmp1
.a05c		d0 02		bne $a060	                bne +
.a05e		c6 26		dec $26		                dec tmp1+1
.a060						+
.a060		c6 25		dec $25		                dec tmp1
.a062		b5 00		lda $00,x	                lda 0,x
.a064		d0 02		bne $a068	                bne +
.a066		d6 01		dec $01,x	                dec 1,x
.a068						+
.a068		d6 00		dec $00,x	                dec 0,x
.a06a		b5 00		lda $00,x	                lda 0,x
.a06c		15 01		ora $01,x	                ora 1,x
.a06e		f0 02		beq $a072	                beq _done       ; Count has reached zero - we're done!
.a070		80 e2		bra $a054	                bra _loop
.a072						_done:
.a072						z_minus_trailing:
.a072		60		rts		                rts
.a073						xt_search:
.a073		20 99 d7	jsr $d799	                jsr underflow_4
.a076		b5 00		lda $00,x	                lda 0,x
.a078		15 01		ora $01,x	                ora 1,x
.a07a		d0 0b		bne $a087	                bne _start_search
.a07c		e8		inx		                inx             ; Remove u2
.a07d		e8		inx		                inx
.a07e		a9 ff		lda #$ff	                lda #$FF        ; Turn addr2 into a true flag
.a080		95 00		sta $00,x	                sta 0,x
.a082		95 01		sta $01,x	                sta 1,x
.a084		4c 11 a1	jmp $a111	                jmp z_search
.a087						_start_search:
.a087		20 f1 9d	jsr $9df1	                jsr xt_zero
.a08a						_search_loop:
.a08a		18		clc		                clc
.a08b		b5 00		lda $00,x	                lda 0,x
.a08d		75 02		adc $02,x	                adc 2,x
.a08f		85 25		sta $25		                sta tmp1
.a091		b5 01		lda $01,x	                lda 1,x
.a093		75 03		adc $03,x	                adc 3,x
.a095		d5 07		cmp $07,x	                cmp 7,x
.a097		90 12		bcc $a0ab	                bcc _init_comparison ; Obviously less
.a099		d0 06		bne $a0a1	                bne _not_found
.a09b		b5 06		lda $06,x	                lda 6,x
.a09d		c5 25		cmp $25		                cmp tmp1
.a09f		b0 0a		bcs $a0ab	                bcs _init_comparison
.a0a1						_not_found:
.a0a1		e8		inx		                inx             ; Remove offset
.a0a2		e8		inx		                inx
.a0a3		e8		inx		                inx             ; Remove u2
.a0a4		e8		inx		                inx
.a0a5		74 00		stz $00,x	                stz 0,x         ; Turn addr2 into a false flag
.a0a7		74 01		stz $01,x	                stz 1,x
.a0a9		80 66		bra $a111	                bra z_search
.a0ab						_init_comparison:
.a0ab		18		clc		                clc
.a0ac		b5 08		lda $08,x	                lda 8,x
.a0ae		75 00		adc $00,x	                adc 0,x
.a0b0		85 25		sta $25		                sta tmp1
.a0b2		b5 09		lda $09,x	                lda 9,x
.a0b4		75 01		adc $01,x	                adc 1,x
.a0b6		85 26		sta $26		                sta tmp1+1
.a0b8		b5 04		lda $04,x	                lda 4,x
.a0ba		85 27		sta $27		                sta tmp2
.a0bc		b5 05		lda $05,x	                lda 5,x
.a0be		85 28		sta $28		                sta tmp2+1
.a0c0		b5 02		lda $02,x	                lda 2,x
.a0c2		85 29		sta $29		                sta tmp3
.a0c4		b5 03		lda $03,x	                lda 3,x
.a0c6		85 2a		sta $2a		                sta tmp3+1
.a0c8						_comparison_loop:
.a0c8		b2 25		lda ($25)	                lda (tmp1)
.a0ca		d2 27		cmp ($27)	                cmp (tmp2)
.a0cc		f0 05		beq $a0d3	                beq _letters_match
.a0ce		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.a0d1		80 b7		bra $a08a	                bra _search_loop
.a0d3						_letters_match:
.a0d3		e6 25		inc $25		                inc tmp1
.a0d5		d0 02		bne $a0d9	                bne +
.a0d7		e6 26		inc $26		                inc tmp1+1
.a0d9						+
.a0d9		e6 27		inc $27		                inc tmp2
.a0db		d0 02		bne $a0df	                bne +
.a0dd		e6 28		inc $28		                inc tmp2+1
.a0df						+
.a0df		a5 29		lda $29		                lda tmp3
.a0e1		d0 02		bne $a0e5	                bne +
.a0e3		c6 2a		dec $2a		                dec tmp3+1
.a0e5						+
.a0e5		c6 29		dec $29		                dec tmp3
.a0e7		a5 29		lda $29		                lda tmp3
.a0e9		05 2a		ora $2a		                ora tmp3+1
.a0eb		d0 db		bne $a0c8	                bne _comparison_loop ; Check the next letter
.a0ed		18		clc		                clc
.a0ee		b5 00		lda $00,x	                lda 0,x
.a0f0		75 08		adc $08,x	                adc 8,x
.a0f2		95 08		sta $08,x	                sta 8,x
.a0f4		b5 01		lda $01,x	                lda 1,x
.a0f6		75 09		adc $09,x	                adc 9,x
.a0f8		95 09		sta $09,x	                sta 9,x
.a0fa		38		sec		                sec
.a0fb		b5 06		lda $06,x	                lda 6,x
.a0fd		f5 00		sbc $00,x	                sbc 0,x
.a0ff		95 06		sta $06,x	                sta 6,x
.a101		b5 07		lda $07,x	                lda 7,x
.a103		f5 01		sbc $01,x	                sbc 1,x
.a105		95 07		sta $07,x	                sta 7,x
.a107		e8		inx		                inx             ; drop offset
.a108		e8		inx		                inx
.a109		e8		inx		                inx             ; drop u2
.a10a		e8		inx		                inx
.a10b		a9 ff		lda #$ff	                lda #$FF
.a10d		95 00		sta $00,x	                sta 0,x         ; Turn addr2 into a true flag.
.a10f		95 01		sta $01,x	                sta 1,x
.a111		60		rts		z_search:       rts
.a112						xt_slash_string:
.a112		20 94 d7	jsr $d794	                jsr underflow_3
.a115		18		clc		                clc             ; 3OS+TOS
.a116		b5 00		lda $00,x	                lda 0,x
.a118		75 04		adc $04,x	                adc 4,x
.a11a		95 04		sta $04,x	                sta 4,x
.a11c		b5 01		lda $01,x	                lda 1,x
.a11e		75 05		adc $05,x	                adc 5,x
.a120		95 05		sta $05,x	                sta 5,x
.a122		38		sec		                sec             ; NOS-TOS
.a123		b5 02		lda $02,x	                lda 2,x
.a125		f5 00		sbc $00,x	                sbc 0,x
.a127		95 02		sta $02,x	                sta 2,x
.a129		b5 03		lda $03,x	                lda 3,x
.a12b		f5 01		sbc $01,x	                sbc 1,x
.a12d		95 03		sta $03,x	                sta 3,x
.a12f		e8		inx		                inx
.a130		e8		inx		                inx
.a131		60		rts		z_slash_string: rts
.a132						xt_sliteral:
.a132		20 8f d7	jsr $d78f	                jsr underflow_2
.a135		20 9b 97	jsr $979b	                jsr cmpl_jump_later
.a138		20 66 93	jsr $9366	                jsr xt_to_r
.a13b		20 1b 89	jsr $891b	                jsr xt_here
.a13e		20 28 92	jsr $9228	                jsr xt_swap
.a141		20 a0 86	jsr $86a0	                jsr xt_dup
.a144		20 27 82	jsr $8227	                jsr xt_allot            ; reserve u bytes for string
.a147		20 1b 89	jsr $891b	                jsr xt_here
.a14a		20 ee 8e	jsr $8eee	                jsr xt_r_from
.a14d		20 12 92	jsr $9212	                jsr xt_store            ; point jmp past string
.a150		20 a5 93	jsr $93a5	                jsr xt_two_dup
.a153		20 8f 94	jsr $948f	                jsr xt_two_to_r
.a156		20 00 8c	jsr $8c00	                jsr xt_move             ; copy u bytes from addr -> addr'
.a159		20 15 94	jsr $9415	                jsr xt_two_r_from
.a15c						cmpl_sliteral:
.a15c						cmpl_two_literal:
.a15c		a0 a1		ldy #$a1	                ldy #>sliteral_runtime
.a15e		a9 76		lda #$76	                lda #<sliteral_runtime
.a160		20 7a 97	jsr $977a	                jsr cmpl_subroutine
.a163		b4 03		ldy $03,x	                ldy 3,x                ; address MSB
.a165		b5 02		lda $02,x	                lda 2,x                ; address LSB
.a167		20 86 97	jsr $9786	                jsr cmpl_word
.a16a		b4 01		ldy $01,x	                ldy 1,x                ; length MSB
.a16c		b5 00		lda $00,x	                lda 0,x                ; length LSB
.a16e		20 86 97	jsr $9786	                jsr cmpl_word
.a171		e8		inx		                inx
.a172		e8		inx		                inx
.a173		e8		inx		                inx
.a174		e8		inx		                inx
.a175		60		rts		z_sliteral:     rts
.a176						sliteral_runtime:
.a176		ca		dex		                dex
.a177		ca		dex		                dex
.a178		ca		dex		                dex
.a179		ca		dex		                dex
.a17a		68		pla		                pla
.a17b		85 25		sta $25		                sta tmp1        ; LSB of address
.a17d		7a		ply		                ply
.a17e		84 26		sty $26		                sty tmp1+1      ; MSB of address
.a180		18		clc		                clc
.a181		69 04		adc #$04	                adc #4
.a183		90 01		bcc $a186	                bcc +
.a185		c8		iny		                iny
.a186						+
.a186		5a		phy		                phy
.a187		48		pha		                pha
.a188		a0 01		ldy #$01	                ldy #1          ; adjust for JSR/RTS mechanics on 65c02
.a18a		b1 25		lda ($25),y	                lda (tmp1),y
.a18c		95 02		sta $02,x	                sta 2,x         ; LSB of address
.a18e		c8		iny		                iny
.a18f		b1 25		lda ($25),y	                lda (tmp1),y
.a191		95 03		sta $03,x	                sta 3,x         ; MSB of address
.a193		c8		iny		                iny
.a194		b1 25		lda ($25),y	                lda (tmp1),y
.a196		95 00		sta $00,x	                sta 0,x         ; LSB of length
.a198		c8		iny		                iny
.a199		b1 25		lda ($25),y	                lda (tmp1),y
.a19b		95 01		sta $01,x	                sta 1,x         ; MSB of length
.a19d		60		rts		                rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/disasm.asm

.a19e						xt_disasm:
.a19e		20 8f d7	jsr $d78f	                jsr underflow_2
.a1a1		20 a5 a1	jsr $a1a5	                jsr disassembler
.a1a4		60		rts		z_disasm:       rts
.a1a5						disassembler:
.a1a5		64 32		stz $32		                stz scratch+5   ; flag indicating whether we're arriving at sliteral (vs 2literal)
.a1a7		20 3a 84	jsr $843a	                jsr xt_cr       ; ( addr u )
.a1aa						_byte_loop:
.a1aa		20 05 8d	jsr $8d05	                jsr xt_over     ; ( addr u addr )
.a1ad		20 da 94	jsr $94da	                jsr xt_u_dot    ; ( addr u )
.a1b0		20 c5 91	jsr $91c5	                jsr xt_space
.a1b3		a9 ad		lda #$ad	                lda #<oc_index_table
.a1b5		85 27		sta $27		                sta tmp2
.a1b7		a9 b3		lda #$b3	                lda #>oc_index_table
.a1b9		85 28		sta $28		                sta tmp2+1
.a1bb		a1 02		lda ($02,x)	                lda (2,x)       ; get opcode that addr points to
.a1bd		85 2d		sta $2d		                sta scratch     ; Save opcode
.a1bf		0a		asl a		                asl             ; multiply by two for offset
.a1c0		90 02		bcc $a1c4	                bcc +
.a1c2		e6 28		inc $28		                inc tmp2+1      ; we're on second page
.a1c4						+
.a1c4		a8		tay		                tay             ; use Y as the index
.a1c5		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB
.a1c7		85 29		sta $29		                sta tmp3
.a1c9		48		pha		                pha
.a1ca		c8		iny		                iny
.a1cb		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB
.a1cd		85 2a		sta $2a		                sta tmp3+1
.a1cf		48		pha		                pha
.a1d0		b2 29		lda ($29)	                lda (tmp3)
.a1d2		a8		tay		                tay                     ; save copy of lengths byte
.a1d3		10 3c		bpl $a211	                bpl _no_operand         ; bit 7 clear, single-byte instruction
.a1d5		20 f1 9d	jsr $9df1	                jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
.a1d8		f6 04		inc $04,x	                inc 4,x
.a1da		d0 02		bne $a1de	                bne +
.a1dc		f6 05		inc $05,x	                inc 5,x                 ; ( addr+1 u 0 )
.a1de						+
.a1de		b5 02		lda $02,x	                lda 2,x
.a1e0		d0 02		bne $a1e4	                bne +
.a1e2		d6 03		dec $03,x	                dec 3,x
.a1e4						+
.a1e4		d6 02		dec $02,x	                dec 2,x                 ; ( addr+1 u-1 0 )
.a1e6		a1 04		lda ($04,x)	                lda (4,x)
.a1e8		95 00		sta $00,x	                sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
.a1ea		85 2e		sta $2e		                sta scratch+1           ; Save a copy in the scratch buffer
.a1ec		98		tya		                tya                     ; retrieve copy of lengths byte
.a1ed		2a		rol a		                rol                     ; shift bit 6 to bit 7
.a1ee		10 14		bpl $a204	                bpl _print_operand
.a1f0		f6 04		inc $04,x	                inc 4,x
.a1f2		d0 02		bne $a1f6	                bne +
.a1f4		f6 05		inc $05,x	                inc 5,x                 ; ( addr+2 u-1 LSB )
.a1f6						+
.a1f6		b5 02		lda $02,x	                lda 2,x
.a1f8		d0 02		bne $a1fc	                bne +
.a1fa		d6 03		dec $03,x	                dec 3,x
.a1fc						+
.a1fc		d6 02		dec $02,x	                dec 2,x                 ; ( addr+2 u-2 LSB )
.a1fe		a1 04		lda ($04,x)	                lda (4,x)
.a200		95 01		sta $01,x	                sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
.a202		85 2f		sta $2f		                sta scratch+2           ; Save a copy in the scratch buffer
.a204						_print_operand:
.a204		ca		dex		                dex
.a205		ca		dex		                dex
.a206		a9 05		lda #$05	                lda #5
.a208		95 00		sta $00,x	                sta 0,x
.a20a		74 01		stz $01,x	                stz 1,x                 ; ( addr+n u-n opr 5 )
.a20c		20 e6 94	jsr $94e6	                jsr xt_u_dot_r          ; U.R ( addr+n u-n )
.a20f		80 0b		bra $a21c	                bra _print_mnemonic
.a211						_no_operand:
.a211		ca		dex		                dex
.a212		ca		dex		                dex
.a213		a9 05		lda #$05	                lda #5
.a215		95 00		sta $00,x	                sta 0,x
.a217		74 01		stz $01,x	                stz 1,x                 ; ( addr u 5 )
.a219		20 cb 91	jsr $91cb	                jsr xt_spaces           ; ( addr u )
.a21c						_print_mnemonic:
.a21c		20 c5 91	jsr $91c5	                jsr xt_space
.a21f		ca		dex		                dex
.a220		ca		dex		                dex                     ; ( addr u ? )
.a221		68		pla		                pla                     ; MSB
.a222		95 01		sta $01,x	                sta 1,x                 ; ( addr u MSB )
.a224		68		pla		                pla                     ; LSB
.a225		95 00		sta $00,x	                sta 0,x                 ; ( addr u addr-o )
.a227		20 26 84	jsr $8426	                jsr xt_count            ; ( addr u addr-o u-o )
.a22a		74 01		stz $01,x	                stz 1,x                 ; paranoid
.a22c		b5 00		lda $00,x	                lda 0,x
.a22e		29 07		and #$07	                and #%00000111          ; ( addr u addr-o u-o )
.a230		95 00		sta $00,x	                sta 0,x
.a232		20 af 94	jsr $94af	                jsr xt_type             ; ( addr u )
.a235		a5 2d		lda $2d		                lda scratch
.a237		c9 20		cmp #$20	                cmp #OpJSR
.a239		d0 15		bne $a250	                bne _not_jsr
.a23b		ca		dex		                dex
.a23c		ca		dex		                dex
.a23d		a9 05		lda #$05	                lda #5
.a23f		95 00		sta $00,x	                sta 0,x
.a241		74 01		stz $01,x	                stz 1,x
.a243		20 cb 91	jsr $91cb	                jsr xt_spaces
.a246		20 21 a3	jsr $a321	                jsr disasm_special
.a249		b0 70		bcs $a2bb	                bcs _printing_done
.a24b		20 01 a3	jsr $a301	                jsr disasm_jsr
.a24e		b0 6b		bcs $a2bb	                bcs _printing_done
.a250						_not_jsr:
.a250		c9 4c		cmp #$4c	                cmp #OpJMP
.a252		d0 2d		bne $a281	                bne _not_jmp
.a254		a5 2e		lda $2e		                lda scratch+1   ; Copy the pointer.
.a256		85 30		sta $30		                sta scratch+3
.a258		a5 2f		lda $2f		                lda scratch+2
.a25a		85 31		sta $31		                sta scratch+4
.a25c		b2 30		lda ($30)	                lda (scratch+3)
.a25e		c9 20		cmp #$20	                cmp #OpJSR          ; check for JSR
.a260		d0 59		bne $a2bb	                bne _printing_done
.a262		e6 30		inc $30		                inc scratch+3
.a264		d0 02		bne $a268	                bne +
.a266		e6 31		inc $31		                inc scratch+4
.a268						+
.a268		b2 30		lda ($30)	                lda (scratch+3)
.a26a		c9 76		cmp #$76	                cmp #<sliteral_runtime
.a26c		d0 4d		bne $a2bb	                bne _printing_done
.a26e		e6 30		inc $30		                inc scratch+3
.a270		d0 02		bne $a274	                bne +
.a272		e6 31		inc $31		                inc scratch+4
.a274						+
.a274		b2 30		lda ($30)	                lda (scratch+3)
.a276		c9 a1		cmp #$a1	                cmp #>sliteral_runtime
.a278		d0 41		bne $a2bb	                bne _printing_done
.a27a		c6 32		dec $32		                dec scratch+5                   ; flag for next go round
.a27c		20 d7 a2	jsr $a2d7	                jsr disasm_sliteral_jump
.a27f		80 3a		bra $a2bb	                bra _printing_done
.a281						_not_jmp:
.a281		c9 80		cmp #$80	                cmp #OpBRA            ; is it bra?
.a283		f0 06		beq $a28b	                beq _is_rel
.a285		29 1f		and #$1f	                and #$1F
.a287		49 10		eor #$10	                eor #$10            ; do bottom five bits match xxx10000 ?
.a289		d0 30		bne $a2bb	                bne _printing_done
.a28b						_is_rel:
.a28b		a0 76		ldy #$76	                ldy #'v'            ; we'll indicate branch forward or back with v or ^
.a28d		ca		dex		                dex
.a28e		ca		dex		                dex
.a28f		74 01		stz $01,x	                stz 1,x
.a291		a5 2e		lda $2e		                lda scratch+1
.a293		95 00		sta $00,x	                sta 0,x
.a295		10 04		bpl $a29b	                bpl +
.a297		d6 01		dec $01,x	                dec 1,x             ; for negative offsets extend the sign bit so add works out
.a299		a0 5e		ldy #$5e	                ldy #'^'            ; it's a backward branch
.a29b		38		sec		+               sec                 ; start counting from address after opcode
.a29c		75 04		adc $04,x	                adc 4,x
.a29e		95 00		sta $00,x	                sta 0,x
.a2a0		b5 01		lda $01,x	                lda 1,x
.a2a2		75 05		adc $05,x	                adc 5,x
.a2a4		95 01		sta $01,x	                sta 1,x
.a2a6		5a		phy		                phy                 ; save the direction indicator
.a2a7		ca		dex		                dex
.a2a8		ca		dex		                dex
.a2a9		a9 09		lda #$09	                lda #9
.a2ab		95 00		sta $00,x	                sta 0,x
.a2ad		74 01		stz $01,x	                stz 1,x
.a2af		20 e6 94	jsr $94e6	                jsr xt_u_dot_r      ; print the destination with 5 leading spaces
.a2b2		a9 20		lda #$20	                lda #AscSP          ; print space and branch direction indicator
.a2b4		20 c5 86	jsr $86c5	                jsr emit_a
.a2b7		68		pla		                pla
.a2b8		20 c5 86	jsr $86c5	                jsr emit_a
.a2bb						_printing_done:
.a2bb		20 3a 84	jsr $843a	                jsr xt_cr
.a2be		f6 02		inc $02,x	                inc 2,x
.a2c0		d0 02		bne $a2c4	                bne +
.a2c2		f6 03		inc $03,x	                inc 3,x                 ; ( addr+1 u )
.a2c4						+
.a2c4		20 dd 8c	jsr $8cdd	                jsr xt_one_minus        ; ( addr+1 u-1 )
.a2c7		b5 00		lda $00,x	                lda 0,x                 ; All done?
.a2c9		15 01		ora $01,x	                ora 1,x
.a2cb		f0 07		beq $a2d4	                beq _done
.a2cd		b5 01		lda $01,x	                lda 1,x                 ; Catch mid-instruction ranges
.a2cf		30 03		bmi $a2d4	                bmi _done
.a2d1		4c aa a1	jmp $a1aa	                jmp _byte_loop          ; out of range for BRA
.a2d4						_done:
.a2d4		4c 9d 93	jmp $939d	                jmp xt_two_drop         ; JSR/RTS
.a2d7						disasm_sliteral_jump:
.a2d7		20 28 92	jsr $9228	                jsr xt_swap
.a2da		ca		dex		                dex
.a2db		ca		dex		                dex
.a2dc		a5 2e		lda $2e		                lda scratch+1
.a2de		95 00		sta $00,x	                sta 0,x
.a2e0		a5 2f		lda $2f		                lda scratch+2
.a2e2		95 01		sta $01,x	                sta 1,x
.a2e4		20 28 92	jsr $9228	                jsr xt_swap
.a2e7		20 e4 8b	jsr $8be4	                jsr xt_minus
.a2ea		20 dd 8c	jsr $8cdd	                jsr xt_one_minus
.a2ed		20 e4 8b	jsr $8be4	                jsr xt_minus
.a2f0		ca		dex		                dex
.a2f1		ca		dex		                dex
.a2f2		a5 2e		lda $2e		                lda scratch+1
.a2f4		95 00		sta $00,x	                sta 0,x
.a2f6		a5 2f		lda $2f		                lda scratch+2
.a2f8		95 01		sta $01,x	                sta 1,x
.a2fa		20 dd 8c	jsr $8cdd	                jsr xt_one_minus
.a2fd		20 28 92	jsr $9228	                jsr xt_swap ; ( new_addr new_n )
.a300		60		rts		                rts
.a301						disasm_jsr:
.a301		ca		dex		                dex
.a302		ca		dex		                dex
.a303		a5 2e		lda $2e		                lda scratch+1
.a305		95 00		sta $00,x	                sta 0,x
.a307		a5 2f		lda $2f		                lda scratch+2
.a309		95 01		sta $01,x	                sta 1,x
.a30b		20 a8 9b	jsr $9ba8	                jsr xt_int_to_name
.a30e		b5 00		lda $00,x	                lda 0,x
.a310		15 01		ora $01,x	                ora 1,x
.a312		f0 08		beq $a31c	                beq _no_nt
.a314		20 4b 9c	jsr $9c4b	                jsr xt_name_to_string
.a317		20 af 94	jsr $94af	                jsr xt_type
.a31a		38		sec		                sec
.a31b		60		rts		                rts
.a31c						_no_nt:
.a31c		20 9d 93	jsr $939d	                jsr xt_two_drop
.a31f		18		clc		                clc
.a320		60		rts		                rts
.a321						disasm_special:
.a321		a0 2c		ldy #$2c	                ldy #(_end_handlers - _special_handlers - 4)
.a323		b9 af a3	lda $a3af,y	_check:         lda _special_handlers,y
.a326		c5 2e		cmp $2e		                cmp scratch+1
.a328		d0 07		bne $a331	                bne _next
.a32a		b9 b0 a3	lda $a3b0,y	                lda _special_handlers+1,y
.a32d		c5 2f		cmp $2f		                cmp scratch+2
.a32f		f0 08		beq $a339	                beq _found_handler
.a331		88		dey		_next:          dey
.a332		88		dey		                dey
.a333		88		dey		                dey
.a334		88		dey		                dey
.a335		10 ec		bpl $a323	                bpl _check
.a337		18		clc		                clc
.a338		60		rts		                rts
.a339						_found_handler:
.a339		a5 32		lda $32		                lda scratch+5               ; are we expecting sliteral?
.a33b		f0 04		beq $a341	                beq +
.a33d		64 32		stz $32		                stz scratch+5               ; yes, skip 2literal and match again
.a33f		80 f0		bra $a331	                bra _next
.a341						+
.a341		b9 b2 a3	lda $a3b2,y	                lda _special_handlers+3,y   ; payload + prefix
.a344		48		pha		                pha                         ; stash a copy for payload later
.a345		4a		lsr a		                lsr
.a346		4a		lsr a		                lsr
.a347		f0 06		beq $a34f	                beq _no_prefix
.a349		18		clc		                clc
.a34a		69 20		adc #$20	                adc #32
.a34c		20 c5 86	jsr $86c5	                jsr emit_a
.a34f						_no_prefix:
.a34f		b9 b1 a3	lda $a3b1,y	                lda _special_handlers+2,y   ; string index
.a352		20 c6 d7	jsr $d7c6	                jsr print_string_no_lf
.a355		68		pla		                pla
.a356		29 03		and #$03	                and #3                      ; payload is 0, 1 or 2 words
.a358		f0 0f		beq $a369	                beq _done
.a35a		c9 03		cmp #$03	                cmp #3                      ; but 3 means a double-word
.a35c		d0 03		bne $a361	                bne _show_payload
.a35e		4c 83 a3	jmp $a383	                jmp _print_2literal
.a361						_show_payload:
.a361		48		pha		                pha
.a362		20 6b a3	jsr $a36b	                jsr _print_literal
.a365		68		pla		                pla
.a366		3a		dec a		                dea
.a367		d0 f8		bne $a361	                bne _show_payload
.a369		38		sec		_done:          sec
.a36a		60		rts		                rts
.a36b						_print_literal:
.a36b		20 28 92	jsr $9228	                jsr xt_swap ; switch to (u addr)
.a36e		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.a371		20 a0 86	jsr $86a0	                jsr xt_dup
.a374		20 1c 99	jsr $991c	                jsr xt_question ; Print the value at the address
.a377		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.a37a		20 28 92	jsr $9228	                jsr xt_swap ; (addr+2 u)
.a37d		20 dd 8c	jsr $8cdd	                jsr xt_one_minus
.a380		4c dd 8c	jmp $8cdd	                jmp xt_one_minus ; (addr+2 u-2)
.a383						_print_2literal:
.a383		20 28 92	jsr $9228	                jsr xt_swap
.a386		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.a389		20 a0 86	jsr $86a0	                jsr xt_dup
.a38c		20 bd 93	jsr $93bd	                jsr xt_two_fetch
.a38f		20 28 92	jsr $9228	                jsr xt_swap             ; 2! / 2@ put MSW first; but 2literal writes LSW first
.a392		20 7a 9e	jsr $9e7a	                jsr xt_d_dot
.a395		18		clc		                clc
.a396		b5 00		lda $00,x	                lda 0,x
.a398		69 03		adc #$03	                adc #3
.a39a		95 00		sta $00,x	                sta 0,x
.a39c		90 02		bcc $a3a0	                bcc +
.a39e		f6 01		inc $01,x	                inc 1,x
.a3a0						+
.a3a0		20 28 92	jsr $9228	                jsr xt_swap ; ( addr+4 u )
.a3a3		38		sec		                sec
.a3a4		b5 00		lda $00,x	                lda 0,x
.a3a6		e9 04		sbc #$04	                sbc #4
.a3a8		95 00		sta $00,x	                sta 0,x
.a3aa		b0 02		bcs $a3ae	                bcs +
.a3ac		d6 01		dec $01,x	                dec 1,x
.a3ae						+
.a3ae		60		rts		                rts
.a3af						_special_handlers:
>a3af		8a d7				    .word underflow_1
>a3b1		0c 44				        .byte str_disasm_sdc, 0 + ('1'-32)*4
>a3b3		8f d7				    .word underflow_2
>a3b5		0c 48				        .byte str_disasm_sdc, 0 + ('2'-32)*4
>a3b7		94 d7				    .word underflow_3
>a3b9		0c 4c				        .byte str_disasm_sdc, 0 + ('3'-32)*4
>a3bb		99 d7				    .word underflow_4
>a3bd		0c 50				        .byte str_disasm_sdc, 0 + ('4'-32)*4
>a3bf		3a 8a				    .word literal_runtime
>a3c1		0d 01				        .byte str_disasm_lit, 1
>a3c3		76 a1				    .word sliteral_runtime
>a3c5		0d ce				        .byte str_disasm_lit, 2 + ('S'-32)*4
>a3c7		76 a1				    .word sliteral_runtime                      ; 2literal and sliteral use the same runtime
>a3c9		0d 4b				        .byte str_disasm_lit, 3 + ('2'-32)*4    ; list is searched in reverse, put 2literal first
>a3cb		2e 98				    .word zero_branch_runtime
>a3cd		0e 01				        .byte str_disasm_0bra, 1
>a3cf		d2 8a				    .word loop_runtime
>a3d1		0f 01				        .byte str_disasm_loop, 1
>a3d3		eb 8a				    .word plus_loop_runtime
>a3d5		0f 2d				        .byte str_disasm_loop, 1 + ('+'-32)*4
>a3d7		bc 85				    .word do_runtime
>a3d9		10 00				        .byte str_disasm_do, 0
>a3db		a4 85				    .word question_do_runtime
>a3dd		10 7d				        .byte str_disasm_do, 1 + ('?'-32)*4
.a3df						_end_handlers:
.a3df						disassembler_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/assembler.asm

.a3df						assembler:
.a3df						xt_asm_adc_h:
.a3df		a9 69		lda #$69	                lda #$69
.a3e1		4c 3a a7	jmp $a73a	                jmp asm_common
.a3e4						z_asm_adc_h:
.a3e4						xt_asm_adc_x:
.a3e4		a9 7d		lda #$7d	                lda #$7D
.a3e6		4c 3a a7	jmp $a73a	                jmp asm_common
.a3e9						z_asm_adc_x:
.a3e9						xt_asm_adc_y:
.a3e9		a9 79		lda #$79	                lda #$79
.a3eb		4c 3a a7	jmp $a73a	                jmp asm_common
.a3ee						z_asm_adc_y:
.a3ee						xt_asm_adc_z:
.a3ee		a9 65		lda #$65	                lda #$65
.a3f0		4c 3a a7	jmp $a73a	                jmp asm_common
.a3f3						z_asm_adc_z:
.a3f3						xt_asm_adc_zi:
.a3f3		a9 72		lda #$72	                lda #$72
.a3f5		4c 3a a7	jmp $a73a	                jmp asm_common
.a3f8						z_asm_adc_zi:
.a3f8						xt_asm_adc_ziy:
.a3f8		a9 71		lda #$71	                lda #$71
.a3fa		4c 3a a7	jmp $a73a	                jmp asm_common
.a3fd						z_asm_adc_ziy:
.a3fd						xt_asm_adc_zx:
.a3fd		a9 75		lda #$75	                lda #$75
.a3ff		4c 3a a7	jmp $a73a	                jmp asm_common
.a402						z_asm_adc_zx:
.a402						xt_asm_adc_zxi:
.a402		a9 61		lda #$61	                lda #$61
.a404		4c 3a a7	jmp $a73a	                jmp asm_common
.a407						z_asm_adc_zxi:
.a407						xt_asm_and:
.a407		a9 2d		lda #$2d	                lda #$2D
.a409		4c 3a a7	jmp $a73a	                jmp asm_common
.a40c						z_asm_and:
.a40c						xt_asm_and_h:
.a40c		a9 29		lda #$29	                lda #$29
.a40e		4c 3a a7	jmp $a73a	                jmp asm_common
.a411						z_asm_and_h:
.a411						xt_asm_and_x:
.a411		a9 3d		lda #$3d	                lda #$3D
.a413		4c 3a a7	jmp $a73a	                jmp asm_common
.a416						z_asm_and_x:
.a416						xt_asm_and_y:
.a416		a9 39		lda #$39	                lda #$39
.a418		4c 3a a7	jmp $a73a	                jmp asm_common
.a41b						z_asm_and_y:
.a41b						xt_asm_and_z:
.a41b		a9 25		lda #$25	                lda #$25
.a41d		4c 3a a7	jmp $a73a	                jmp asm_common
.a420						z_asm_and_z:
.a420						xt_asm_and_zi:
.a420		a9 32		lda #$32	                lda #$32
.a422		4c 3a a7	jmp $a73a	                jmp asm_common
.a425						z_asm_and_zi:
.a425						xt_asm_and_ziy:
.a425		a9 31		lda #$31	                lda #$31
.a427		4c 3a a7	jmp $a73a	                jmp asm_common
.a42a						z_asm_and_ziy:
.a42a						xt_asm_and_zx:
.a42a		a9 35		lda #$35	                lda #$35
.a42c		4c 3a a7	jmp $a73a	                jmp asm_common
.a42f						z_asm_and_zx:
.a42f						xt_asm_and_zxi:
.a42f		a9 21		lda #$21	                lda #$21
.a431		4c 3a a7	jmp $a73a	                jmp asm_common
.a434						z_asm_and_zxi:
.a434						xt_asm_asl:
.a434		a9 0e		lda #$0e	                lda #$0E
.a436		4c 3a a7	jmp $a73a	                jmp asm_common
.a439						z_asm_asl:
.a439						xt_asm_asl_a:
.a439		a9 0a		lda #$0a	                lda #$0A
.a43b		4c 3a a7	jmp $a73a	                jmp asm_common
.a43e						z_asm_asl_a:
.a43e						xt_asm_asl_x:
.a43e		a9 1e		lda #$1e	                lda #$1E
.a440		4c 3a a7	jmp $a73a	                jmp asm_common
.a443						z_asm_asl_x:
.a443						xt_asm_asl_z:
.a443		a9 06		lda #$06	                lda #$06
.a445		4c 3a a7	jmp $a73a	                jmp asm_common
.a448						z_asm_asl_z:
.a448						xt_asm_asl_zx:
.a448		a9 16		lda #$16	                lda #$16
.a44a		4c 3a a7	jmp $a73a	                jmp asm_common
.a44d						z_asm_asl_zx:
.a44d						xt_asm_bcc:
.a44d		a9 90		lda #$90	                lda #$90
.a44f		4c 3a a7	jmp $a73a	                jmp asm_common
.a452						z_asm_bcc:
.a452						xt_asm_bcs:
.a452		a9 b0		lda #$b0	                lda #$B0
.a454		a0 02		ldy #$02	                ldy #2
.a456		4c 3a a7	jmp $a73a	                jmp asm_common
.a459						z_asm_bcs:
.a459						xt_asm_beq:
.a459		a9 f0		lda #$f0	                lda #$F0
.a45b		4c 3a a7	jmp $a73a	                jmp asm_common
.a45e						z_asm_beq:
.a45e						xt_asm_bit:
.a45e		a9 2c		lda #$2c	                lda #$2C
.a460		4c 3a a7	jmp $a73a	                jmp asm_common
.a463						z_asm_bit:
.a463						xt_asm_bit_h:
.a463		a9 89		lda #$89	                lda #$89
.a465		4c 3a a7	jmp $a73a	                jmp asm_common
.a468						z_asm_bit_h:
.a468						xt_asm_bit_x:
.a468		a9 3c		lda #$3c	                lda #$3C
.a46a		4c 3a a7	jmp $a73a	                jmp asm_common
.a46d						z_asm_bit_x:
.a46d						xt_asm_bit_z:
.a46d		a9 24		lda #$24	                lda #$24
.a46f		4c 3a a7	jmp $a73a	                jmp asm_common
.a472						z_asm_bit_z:
.a472						xt_asm_bit_zx:
.a472		a9 34		lda #$34	                lda #$34
.a474		4c 3a a7	jmp $a73a	                jmp asm_common
.a477						z_asm_bit_zx:
.a477						xt_asm_bmi:
.a477		a9 30		lda #$30	                lda #$30
.a479		4c 3a a7	jmp $a73a	                jmp asm_common
.a47c						z_asm_bmi:
.a47c						xt_asm_bne:
.a47c		a9 d0		lda #$d0	                lda #$D0
.a47e		4c 3a a7	jmp $a73a	                jmp asm_common
.a481						z_asm_bne:
.a481						xt_asm_bpl:
.a481		a9 10		lda #$10	                lda #$10
.a483		4c 3a a7	jmp $a73a	                jmp asm_common
.a486						z_asm_bpl:
.a486						xt_asm_bra:
.a486		a9 80		lda #$80	                lda #$80
.a488		4c 3a a7	jmp $a73a	                jmp asm_common
.a48b						z_asm_bra:
.a48b						xt_asm_brk:
.a48b		a9 00		lda #$00	                lda #$00
.a48d		4c 3a a7	jmp $a73a	                jmp asm_common
.a490						z_asm_brk:
.a490						xt_asm_bvc:
.a490		a9 50		lda #$50	                lda #$50
.a492		4c 3a a7	jmp $a73a	                jmp asm_common
.a495						z_asm_bvc:
.a495						xt_asm_bvs:
.a495		a9 70		lda #$70	                lda #$70
.a497		4c 3a a7	jmp $a73a	                jmp asm_common
.a49a						z_asm_bvs:
.a49a						xt_asm_clc:
.a49a		a9 18		lda #$18	                lda #$18
.a49c		4c 3a a7	jmp $a73a	                jmp asm_common
.a49f						z_asm_clc:
.a49f						xt_asm_cld:
.a49f		a9 d8		lda #$d8	                lda #$D8
.a4a1		4c 3a a7	jmp $a73a	                jmp asm_common
.a4a4						z_asm_cld:
.a4a4						xt_asm_cli:
.a4a4		a9 58		lda #$58	                lda #$58
.a4a6		4c 3a a7	jmp $a73a	                jmp asm_common
.a4a9						z_asm_cli:
.a4a9						xt_asm_clv:
.a4a9		a9 b8		lda #$b8	                lda #$B8
.a4ab		4c 3a a7	jmp $a73a	                jmp asm_common
.a4ae						z_asm_clv:
.a4ae						xt_asm_cmp:
.a4ae		a9 cd		lda #$cd	                lda #$CD
.a4b0		4c 3a a7	jmp $a73a	                jmp asm_common
.a4b3						z_asm_cmp:
.a4b3						xt_asm_cmp_h:
.a4b3		a9 c9		lda #$c9	                lda #$C9
.a4b5		4c 3a a7	jmp $a73a	                jmp asm_common
.a4b8						z_asm_cmp_h:
.a4b8						xt_asm_cmp_x:
.a4b8		a9 dd		lda #$dd	                lda #$DD
.a4ba		4c 3a a7	jmp $a73a	                jmp asm_common
.a4bd						z_asm_cmp_x:
.a4bd						xt_asm_cmp_y:
.a4bd		a9 d9		lda #$d9	                lda #$D9
.a4bf		4c 3a a7	jmp $a73a	                jmp asm_common
.a4c2						z_asm_cmp_y:
.a4c2						xt_asm_cmp_z:
.a4c2		a9 c5		lda #$c5	                lda #$C5
.a4c4		4c 3a a7	jmp $a73a	                jmp asm_common
.a4c7						z_asm_cmp_z:
.a4c7						xt_asm_cmp_zi:
.a4c7		a9 d2		lda #$d2	                lda #$D2
.a4c9		4c 3a a7	jmp $a73a	                jmp asm_common
.a4cc						z_asm_cmp_zi:
.a4cc						xt_asm_cmp_ziy:
.a4cc		a9 d1		lda #$d1	                lda #$D1
.a4ce		4c 3a a7	jmp $a73a	                jmp asm_common
.a4d1						z_asm_cmp_ziy:
.a4d1						xt_asm_cmp_zx:
.a4d1		a9 d5		lda #$d5	                lda #$D5
.a4d3		4c 3a a7	jmp $a73a	                jmp asm_common
.a4d6						z_asm_cmp_zx:
.a4d6						xt_asm_cmp_zxi:
.a4d6		a9 c1		lda #$c1	                lda #$C1
.a4d8		4c 3a a7	jmp $a73a	                jmp asm_common
.a4db						z_asm_cmp_zxi:
.a4db						xt_asm_cpx:
.a4db		a9 ec		lda #$ec	                lda #$EC
.a4dd		4c 3a a7	jmp $a73a	                jmp asm_common
.a4e0						z_asm_cpx:
.a4e0						xt_asm_cpx_h:
.a4e0		a9 e0		lda #$e0	                lda #$E0
.a4e2		4c 3a a7	jmp $a73a	                jmp asm_common
.a4e5						z_asm_cpx_h:
.a4e5						xt_asm_cpx_z:
.a4e5		a9 e4		lda #$e4	                lda #$E4
.a4e7		4c 3a a7	jmp $a73a	                jmp asm_common
.a4ea						z_asm_cpx_z:
.a4ea						xt_asm_cpy:
.a4ea		a9 cc		lda #$cc	                lda #$CC
.a4ec		a0 03		ldy #$03	                ldy #3
.a4ee		4c 3a a7	jmp $a73a	                jmp asm_common
.a4f1						z_asm_cpy:
.a4f1						xt_asm_cpy_h:
.a4f1		a9 c0		lda #$c0	                lda #$C0
.a4f3		4c 3a a7	jmp $a73a	                jmp asm_common
.a4f6						z_asm_cpy_h:
.a4f6						xt_asm_cpy_z:
.a4f6		a9 c4		lda #$c4	                lda #$C4
.a4f8		4c 3a a7	jmp $a73a	                jmp asm_common
.a4fb						z_asm_cpy_z:
.a4fb						xt_asm_dec:
.a4fb		a9 ce		lda #$ce	                lda #$CE
.a4fd		4c 3a a7	jmp $a73a	                jmp asm_common
.a500						z_asm_dec:
.a500						xt_asm_dec_a:
.a500		a9 3a		lda #$3a	                lda #$3A
.a502		4c 3a a7	jmp $a73a	                jmp asm_common
.a505						z_asm_dec_a:
.a505						xt_asm_dec_x:
.a505		a9 de		lda #$de	                lda #$DE
.a507		4c 3a a7	jmp $a73a	                jmp asm_common
.a50a						z_asm_dec_x:
.a50a						xt_asm_dec_z:
.a50a		a9 c6		lda #$c6	                lda #$C6
.a50c		4c 3a a7	jmp $a73a	                jmp asm_common
.a50f						z_asm_dec_z:
.a50f						xt_asm_dec_zx:
.a50f		a9 d6		lda #$d6	                lda #$D6
.a511		4c 3a a7	jmp $a73a	                jmp asm_common
.a514						z_asm_dec_zx:
.a514						xt_asm_dex:
.a514		a9 ca		lda #$ca	                lda #$CA
.a516		4c 3a a7	jmp $a73a	                jmp asm_common
.a519						z_asm_dex:
.a519						xt_asm_dey:
.a519		a9 88		lda #$88	                lda #$88
.a51b		4c 3a a7	jmp $a73a	                jmp asm_common
.a51e						z_asm_dey:
.a51e						xt_asm_eor:
.a51e		a9 4d		lda #$4d	                lda #$4D
.a520		4c 3a a7	jmp $a73a	                jmp asm_common
.a523						z_asm_eor:
.a523						xt_asm_eor_h:
.a523		a9 49		lda #$49	                lda #$49
.a525		4c 3a a7	jmp $a73a	                jmp asm_common
.a528						z_asm_eor_h:
.a528						xt_asm_eor_x:
.a528		a9 5d		lda #$5d	                lda #$5D
.a52a		4c 3a a7	jmp $a73a	                jmp asm_common
.a52d						z_asm_eor_x:
.a52d						xt_asm_eor_y:
.a52d		a9 59		lda #$59	                lda #$59
.a52f		4c 3a a7	jmp $a73a	                jmp asm_common
.a532						z_asm_eor_y:
.a532						xt_asm_eor_z:
.a532		a9 45		lda #$45	                lda #$45
.a534		4c 3a a7	jmp $a73a	                jmp asm_common
.a537						z_asm_eor_z:
.a537						xt_asm_eor_zi:
.a537		a9 52		lda #$52	                lda #$52
.a539		4c 3a a7	jmp $a73a	                jmp asm_common
.a53c						z_asm_eor_zi:
.a53c						xt_asm_eor_ziy:
.a53c		a9 51		lda #$51	                lda #$51
.a53e		4c 3a a7	jmp $a73a	                jmp asm_common
.a541						z_asm_eor_ziy:
.a541						xt_asm_eor_zx:
.a541		a9 55		lda #$55	                lda #$55
.a543		4c 3a a7	jmp $a73a	                jmp asm_common
.a546						z_asm_eor_zx:
.a546						xt_asm_eor_zxi:
.a546		a9 41		lda #$41	                lda #$41
.a548		4c 3a a7	jmp $a73a	                jmp asm_common
.a54b						z_asm_eor_zxi:
.a54b						xt_asm_inc:
.a54b		a9 ee		lda #$ee	                lda #$EE
.a54d		4c 3a a7	jmp $a73a	                jmp asm_common
.a550						z_asm_inc:
.a550						xt_asm_inc_a:
.a550		a9 1a		lda #$1a	                lda #$1A
.a552		4c 3a a7	jmp $a73a	                jmp asm_common
.a555						z_asm_inc_a:
.a555						xt_asm_inc_x:
.a555		a9 fe		lda #$fe	                lda #$FE
.a557		4c 3a a7	jmp $a73a	                jmp asm_common
.a55a						z_asm_inc_x:
.a55a						xt_asm_inc_z:
.a55a		a9 e6		lda #$e6	                lda #$E6
.a55c		4c 3a a7	jmp $a73a	                jmp asm_common
.a55f						z_asm_inc_z:
.a55f						xt_asm_inc_zx:
.a55f		a9 f6		lda #$f6	                lda #$F6
.a561		4c 3a a7	jmp $a73a	                jmp asm_common
.a564						z_asm_inc_zx:
.a564						xt_asm_inx:
.a564		a9 e8		lda #$e8	                lda #$E8
.a566		4c 3a a7	jmp $a73a	                jmp asm_common
.a569						z_asm_inx:
.a569						xt_asm_iny:
.a569		a9 c8		lda #$c8	                lda #$C8
.a56b		4c 3a a7	jmp $a73a	                jmp asm_common
.a56e						z_asm_iny:
.a56e						xt_asm_jmp:
.a56e		a9 4c		lda #$4c	                lda #$4C
.a570		4c 3a a7	jmp $a73a	                jmp asm_common
.a573						z_asm_jmp:
.a573						xt_asm_jmp_i:
.a573		a9 6c		lda #$6c	                lda #$6C
.a575		4c 3a a7	jmp $a73a	                jmp asm_common
.a578						z_asm_jmp_i:
.a578						xt_asm_jmp_xi:
.a578		a9 7c		lda #$7c	                lda #$7C
.a57a		4c 3a a7	jmp $a73a	                jmp asm_common
.a57d						z_asm_jmp_xi:
.a57d						xt_asm_jsr:
.a57d		a9 20		lda #$20	                lda #$20
.a57f		4c 3a a7	jmp $a73a	                jmp asm_common
.a582						z_asm_jsr:
.a582						xt_asm_lda:
.a582		a9 ad		lda #$ad	                lda #$AD
.a584		4c 3a a7	jmp $a73a	                jmp asm_common
.a587						z_asm_lda:
.a587						xt_asm_lda_h:
.a587		a9 a9		lda #$a9	                lda #$A9
.a589		4c 3a a7	jmp $a73a	                jmp asm_common
.a58c						z_asm_lda_h:
.a58c						xt_asm_lda_x:
.a58c		a9 bd		lda #$bd	                lda #$BD
.a58e		4c 3a a7	jmp $a73a	                jmp asm_common
.a591						z_asm_lda_x:
.a591						xt_asm_lda_y:
.a591		a9 b9		lda #$b9	                lda #$B9
.a593		4c 3a a7	jmp $a73a	                jmp asm_common
.a596						z_asm_lda_y:
.a596						xt_asm_lda_z:
.a596		a9 a5		lda #$a5	                lda #$A5
.a598		4c 3a a7	jmp $a73a	                jmp asm_common
.a59b						z_asm_lda_z:
.a59b						xt_asm_lda_zi:
.a59b		a9 b2		lda #$b2	                lda #$B2
.a59d		4c 3a a7	jmp $a73a	                jmp asm_common
.a5a0						z_asm_lda_zi:
.a5a0						xt_asm_lda_ziy:
.a5a0		a9 b1		lda #$b1	                lda #$B1
.a5a2		4c 3a a7	jmp $a73a	                jmp asm_common
.a5a5						z_asm_lda_ziy:
.a5a5						xt_asm_lda_zx:
.a5a5		a9 b5		lda #$b5	                lda #$B5
.a5a7		4c 3a a7	jmp $a73a	                jmp asm_common
.a5aa						z_asm_lda_zx:
.a5aa						xt_asm_lda_zxi:
.a5aa		a9 a1		lda #$a1	                lda #$A1
.a5ac		4c 3a a7	jmp $a73a	                jmp asm_common
.a5af						z_asm_lda_zxi:
.a5af						xt_asm_ldx:
.a5af		a9 ae		lda #$ae	                lda #$AE
.a5b1		4c 3a a7	jmp $a73a	                jmp asm_common
.a5b4						z_asm_ldx:
.a5b4						xt_asm_ldx_h:
.a5b4		a9 a2		lda #$a2	                lda #$A2
.a5b6		4c 3a a7	jmp $a73a	                jmp asm_common
.a5b9						z_asm_ldx_h:
.a5b9						xt_asm_ldx_y:
.a5b9		a9 be		lda #$be	                lda #$BE
.a5bb		4c 3a a7	jmp $a73a	                jmp asm_common
.a5be						z_asm_ldx_y:
.a5be						xt_asm_ldx_z:
.a5be		a9 a6		lda #$a6	                lda #$A6
.a5c0		4c 3a a7	jmp $a73a	                jmp asm_common
.a5c3						z_asm_ldx_z:
.a5c3						xt_asm_ldx_zy:
.a5c3		a9 b6		lda #$b6	                lda #$B6
.a5c5		4c 3a a7	jmp $a73a	                jmp asm_common
.a5c8						z_asm_ldx_zy:
.a5c8						xt_asm_ldy:
.a5c8		a9 ac		lda #$ac	                lda #$AC
.a5ca		4c 3a a7	jmp $a73a	                jmp asm_common
.a5cd						z_asm_ldy:
.a5cd						xt_asm_ldy_h:
.a5cd		a9 a0		lda #$a0	                lda #$A0
.a5cf		4c 3a a7	jmp $a73a	                jmp asm_common
.a5d2						z_asm_ldy_h:
.a5d2						xt_asm_ldy_x:
.a5d2		a9 bc		lda #$bc	                lda #$BC
.a5d4		4c 3a a7	jmp $a73a	                jmp asm_common
.a5d7						z_asm_ldy_x:
.a5d7						xt_asm_ldy_z:
.a5d7		a9 a4		lda #$a4	                lda #$A4
.a5d9		4c 3a a7	jmp $a73a	                jmp asm_common
.a5dc						z_asm_ldy_z:
.a5dc						xt_asm_ldy_zx:
.a5dc		a9 b4		lda #$b4	                lda #$B4
.a5de		4c 3a a7	jmp $a73a	                jmp asm_common
.a5e1						z_asm_ldy_zx:
.a5e1						xt_asm_lsr:
.a5e1		a9 4e		lda #$4e	                lda #$4E
.a5e3		4c 3a a7	jmp $a73a	                jmp asm_common
.a5e6						z_asm_lsr:
.a5e6						xt_asm_lsr_a:
.a5e6		a9 4a		lda #$4a	                lda #$4A
.a5e8		4c 3a a7	jmp $a73a	                jmp asm_common
.a5eb						z_asm_lsr_a:
.a5eb						xt_asm_lsr_x:
.a5eb		a9 5e		lda #$5e	                lda #$5E
.a5ed		4c 3a a7	jmp $a73a	                jmp asm_common
.a5f0						z_asm_lsr_x:
.a5f0						xt_asm_lsr_z:
.a5f0		a9 46		lda #$46	                lda #$46
.a5f2		4c 3a a7	jmp $a73a	                jmp asm_common
.a5f5						z_asm_lsr_z:
.a5f5						xt_asm_lsr_zx:
.a5f5		a9 56		lda #$56	                lda #$56
.a5f7		4c 3a a7	jmp $a73a	                jmp asm_common
.a5fa						z_asm_lsr_zx:
.a5fa						xt_asm_nop:
.a5fa		a9 ea		lda #$ea	                lda #$EA
.a5fc		4c 3a a7	jmp $a73a	                jmp asm_common
.a5ff						z_asm_nop:
.a5ff						xt_asm_ora:
.a5ff		a9 0d		lda #$0d	                lda #$0D
.a601		4c 3a a7	jmp $a73a	                jmp asm_common
.a604						z_asm_ora:
.a604						xt_asm_ora_h:
.a604		a9 09		lda #$09	                lda #$09
.a606		4c 3a a7	jmp $a73a	                jmp asm_common
.a609						z_asm_ora_h:
.a609						xt_asm_ora_x:
.a609		a9 1d		lda #$1d	                lda #$1D
.a60b		4c 3a a7	jmp $a73a	                jmp asm_common
.a60e						z_asm_ora_x:
.a60e						xt_asm_ora_y:
.a60e		a9 19		lda #$19	                lda #$19
.a610		4c 3a a7	jmp $a73a	                jmp asm_common
.a613						z_asm_ora_y:
.a613						xt_asm_ora_z:
.a613		a9 05		lda #$05	                lda #$05
.a615		4c 3a a7	jmp $a73a	                jmp asm_common
.a618						z_asm_ora_z:
.a618						xt_asm_ora_zi:
.a618		a9 12		lda #$12	                lda #$12
.a61a		a0 02		ldy #$02	                ldy #2
.a61c		4c 3a a7	jmp $a73a	                jmp asm_common
.a61f						z_asm_ora_zi:
.a61f						xt_asm_ora_ziy:
.a61f		a9 11		lda #$11	                lda #$11
.a621		4c 3a a7	jmp $a73a	                jmp asm_common
.a624						z_asm_ora_ziy:
.a624						xt_asm_ora_zx:
.a624		a9 15		lda #$15	                lda #$15
.a626		4c 3a a7	jmp $a73a	                jmp asm_common
.a629						z_asm_ora_zx:
.a629						xt_asm_ora_zxi:
.a629		a9 01		lda #$01	                lda #$01
.a62b		4c 3a a7	jmp $a73a	                jmp asm_common
.a62e						z_asm_ora_zxi:
.a62e						xt_asm_pha:
.a62e		a9 48		lda #$48	                lda #$48
.a630		4c 3a a7	jmp $a73a	                jmp asm_common
.a633						z_asm_pha:
.a633						xt_asm_php:
.a633		a9 08		lda #$08	                lda #$08
.a635		4c 3a a7	jmp $a73a	                jmp asm_common
.a638						z_asm_php:
.a638						xt_asm_phx:
.a638		a9 da		lda #$da	                lda #$DA
.a63a		4c 3a a7	jmp $a73a	                jmp asm_common
.a63d						z_asm_phx:
.a63d						xt_asm_phy:
.a63d		a9 5a		lda #$5a	                lda #$5A
.a63f		4c 3a a7	jmp $a73a	                jmp asm_common
.a642						z_asm_phy:
.a642						xt_asm_pla:
.a642		a9 68		lda #$68	                lda #$68
.a644		4c 3a a7	jmp $a73a	                jmp asm_common
.a647						z_asm_pla:
.a647						xt_asm_plp:
.a647		a9 28		lda #$28	                lda #$28
.a649		4c 3a a7	jmp $a73a	                jmp asm_common
.a64c						z_asm_plp:
.a64c						xt_asm_plx:
.a64c		a9 fa		lda #$fa	                lda #$FA
.a64e		4c 3a a7	jmp $a73a	                jmp asm_common
.a651						z_asm_plx:
.a651						xt_asm_ply:
.a651		a9 7a		lda #$7a	                lda #$7A
.a653		4c 3a a7	jmp $a73a	                jmp asm_common
.a656						z_asm_ply:
.a656						xt_asm_rol:
.a656		a9 2e		lda #$2e	                lda #$2E
.a658		4c 3a a7	jmp $a73a	                jmp asm_common
.a65b						z_asm_rol:
.a65b						xt_asm_rol_a:
.a65b		a9 2a		lda #$2a	                lda #$2A
.a65d		4c 3a a7	jmp $a73a	                jmp asm_common
.a660						z_asm_rol_a:
.a660						xt_asm_rol_x:
.a660		a9 3e		lda #$3e	                lda #$3E
.a662		4c 3a a7	jmp $a73a	                jmp asm_common
.a665						z_asm_rol_x:
.a665						xt_asm_rol_z:
.a665		a9 26		lda #$26	                lda #$26
.a667		4c 3a a7	jmp $a73a	                jmp asm_common
.a66a						z_asm_rol_z:
.a66a						xt_asm_rol_zx:
.a66a		a9 36		lda #$36	                lda #$36
.a66c		4c 3a a7	jmp $a73a	                jmp asm_common
.a66f						z_asm_rol_zx:
.a66f						xt_asm_ror:
.a66f		a9 6e		lda #$6e	                lda #$6E
.a671		4c 3a a7	jmp $a73a	                jmp asm_common
.a674						z_asm_ror:
.a674						xt_asm_ror_a:
.a674		a9 6a		lda #$6a	                lda #$6A
.a676		4c 3a a7	jmp $a73a	                jmp asm_common
.a679						z_asm_ror_a:
.a679						xt_asm_ror_x:
.a679		a9 7e		lda #$7e	                lda #$7E
.a67b		4c 3a a7	jmp $a73a	                jmp asm_common
.a67e						z_asm_ror_x:
.a67e						xt_asm_ror_z:
.a67e		a9 66		lda #$66	                lda #$66
.a680		4c 3a a7	jmp $a73a	                jmp asm_common
.a683						z_asm_ror_z:
.a683						xt_asm_ror_zx:
.a683		a9 76		lda #$76	                lda #$76
.a685		4c 3a a7	jmp $a73a	                jmp asm_common
.a688						z_asm_ror_zx:
.a688						xt_asm_rti:
.a688		a9 40		lda #$40	                lda #$40
.a68a		4c 3a a7	jmp $a73a	                jmp asm_common
.a68d						z_asm_rti:
.a68d						xt_asm_rts:
.a68d		a9 60		lda #$60	                lda #$60
.a68f		4c 3a a7	jmp $a73a	                jmp asm_common
.a692						z_asm_rts:
.a692						xt_asm_sbc:
.a692		a9 ed		lda #$ed	                lda #$ED
.a694		4c 3a a7	jmp $a73a	                jmp asm_common
.a697						z_asm_sbc:
.a697						xt_asm_sbc_h:
.a697		a9 e9		lda #$e9	                lda #$E9
.a699		4c 3a a7	jmp $a73a	                jmp asm_common
.a69c						z_asm_sbc_h:
.a69c						xt_asm_sbc_x:
.a69c		a9 fd		lda #$fd	                lda #$FD
.a69e		4c 3a a7	jmp $a73a	                jmp asm_common
.a6a1						z_asm_sbc_x:
.a6a1						xt_asm_sbc_y:
.a6a1		a9 f9		lda #$f9	                lda #$F9
.a6a3		4c 3a a7	jmp $a73a	                jmp asm_common
.a6a6						z_asm_sbc_y:
.a6a6						xt_asm_sbc_z:
.a6a6		a9 e5		lda #$e5	                lda #$E5
.a6a8		4c 3a a7	jmp $a73a	                jmp asm_common
.a6ab						z_asm_sbc_z:
.a6ab						xt_asm_sbc_zi:
.a6ab		a9 f2		lda #$f2	                lda #$F2
.a6ad		4c 3a a7	jmp $a73a	                jmp asm_common
.a6b0						z_asm_sbc_zi:
.a6b0						xt_asm_sbc_ziy:
.a6b0		a9 f1		lda #$f1	                lda #$F1
.a6b2		4c 3a a7	jmp $a73a	                jmp asm_common
.a6b5						z_asm_sbc_ziy:
.a6b5						xt_asm_sbc_zx:
.a6b5		a9 f5		lda #$f5	                lda #$F5
.a6b7		4c 3a a7	jmp $a73a	                jmp asm_common
.a6ba						z_asm_sbc_zx:
.a6ba						xt_asm_sbc_zxi:
.a6ba		a9 e1		lda #$e1	                lda #$E1
.a6bc		80 7c		bra $a73a	                bra asm_common  ; <-- limit for BRA instead of JMP
.a6be						z_asm_sbc_zxi:
.a6be						xt_asm_sec:
.a6be		a9 38		lda #$38	                lda #$38
.a6c0		80 78		bra $a73a	                bra asm_common
.a6c2						z_asm_sec:
.a6c2						xt_asm_sed:
.a6c2		a9 f8		lda #$f8	                lda #$F8
.a6c4		80 74		bra $a73a	                bra asm_common
.a6c6						z_asm_sed:
.a6c6						xt_asm_sei:
.a6c6		a9 78		lda #$78	                lda #$78
.a6c8		80 70		bra $a73a	                bra asm_common
.a6ca						z_asm_sei:
.a6ca						xt_asm_sta:
.a6ca		a9 8d		lda #$8d	                lda #$8D
.a6cc		80 6c		bra $a73a	                bra asm_common
.a6ce						z_asm_sta:
.a6ce						xt_asm_sta_x:
.a6ce		a9 9d		lda #$9d	                lda #$9D
.a6d0		80 68		bra $a73a	                bra asm_common
.a6d2						z_asm_sta_x:
.a6d2						xt_asm_sta_y:
.a6d2		a9 99		lda #$99	                lda #$99
.a6d4		80 64		bra $a73a	                bra asm_common
.a6d6						z_asm_sta_y:
.a6d6						xt_asm_sta_z:
.a6d6		a9 85		lda #$85	                lda #$85
.a6d8		80 60		bra $a73a	                bra asm_common
.a6da						z_asm_sta_z:
.a6da						xt_asm_sta_zi:
.a6da		a9 92		lda #$92	                lda #$92
.a6dc		80 5c		bra $a73a	                bra asm_common
.a6de						z_asm_sta_zi:
.a6de						xt_asm_sta_ziy:
.a6de		a9 91		lda #$91	                lda #$91
.a6e0		80 58		bra $a73a	                bra asm_common
.a6e2						z_asm_sta_ziy:
.a6e2						xt_asm_sta_zx:
.a6e2		a9 95		lda #$95	                lda #$95
.a6e4		80 54		bra $a73a	                bra asm_common
.a6e6						z_asm_sta_zx:
.a6e6						xt_asm_sta_zxi:
.a6e6		a9 81		lda #$81	                lda #$81
.a6e8		80 50		bra $a73a	                bra asm_common
.a6ea						z_asm_sta_zxi:
.a6ea						xt_asm_stx:
.a6ea		a9 8e		lda #$8e	                lda #$8E
.a6ec		80 4c		bra $a73a	                bra asm_common
.a6ee						z_asm_stx:
.a6ee						xt_asm_stx_z:
.a6ee		a9 86		lda #$86	                lda #$86
.a6f0		80 48		bra $a73a	                bra asm_common
.a6f2						z_asm_stx_z:
.a6f2						xt_asm_stx_zy:
.a6f2		a9 96		lda #$96	                lda #$96
.a6f4		80 44		bra $a73a	                bra asm_common
.a6f6						z_asm_stx_zy:
.a6f6						xt_asm_sty:
.a6f6		a9 8c		lda #$8c	                lda #$8C
.a6f8		80 40		bra $a73a	                bra asm_common
.a6fa						z_asm_sty:
.a6fa						xt_asm_sty_z:
.a6fa		a9 84		lda #$84	                lda #$84
.a6fc		80 3c		bra $a73a	                bra asm_common
.a6fe						z_asm_sty_z:
.a6fe						xt_asm_sty_zx:
.a6fe		a9 94		lda #$94	                lda #$94
.a700		80 38		bra $a73a	                bra asm_common
.a702						z_asm_sty_zx:
.a702						xt_asm_stz:
.a702		a9 9c		lda #$9c	                lda #$9C
.a704		80 34		bra $a73a	                bra asm_common
.a706						z_asm_stz:
.a706						xt_asm_stz_x:
.a706		a9 9e		lda #$9e	                lda #$9E
.a708		80 30		bra $a73a	                bra asm_common
.a70a						z_asm_stz_x:
.a70a						xt_asm_stz_z:
.a70a		a9 64		lda #$64	                lda #$64
.a70c		80 2c		bra $a73a	                bra asm_common
.a70e						z_asm_stz_z:
.a70e						xt_asm_stz_zx:
.a70e		a9 74		lda #$74	                lda #$74
.a710		80 28		bra $a73a	                bra asm_common
.a712						z_asm_stz_zx:
.a712						xt_asm_tax:
.a712		a9 aa		lda #$aa	                lda #$AA
.a714		80 24		bra $a73a	                bra asm_common
.a716						z_asm_tax:
.a716						xt_asm_tay:
.a716		a9 a8		lda #$a8	                lda #$A8
.a718		80 20		bra $a73a	                bra asm_common
.a71a						z_asm_tay:
.a71a						xt_asm_trb:
.a71a		a9 1c		lda #$1c	                lda #$1C
.a71c		80 1c		bra $a73a	                bra asm_common
.a71e						z_asm_trb:
.a71e						xt_asm_trb_z:
.a71e		a9 14		lda #$14	                lda #$14
.a720		80 18		bra $a73a	                bra asm_common
.a722						z_asm_trb_z:
.a722						xt_asm_tsb:
.a722		a9 0c		lda #$0c	                lda #$0C
.a724		80 14		bra $a73a	                bra asm_common
.a726						z_asm_tsb:
.a726						xt_asm_tsb_z:
.a726		a9 04		lda #$04	                lda #$04
.a728		80 10		bra $a73a	                bra asm_common
.a72a						z_asm_tsb_z:
.a72a						xt_asm_tsx:
.a72a		a9 ba		lda #$ba	                lda #$BA
.a72c		80 0c		bra $a73a	                bra asm_common
.a72e						z_asm_tsx:
.a72e						xt_asm_txa:
.a72e		a9 8a		lda #$8a	                lda #$8A
.a730		80 08		bra $a73a	                bra asm_common
.a732						z_asm_txa:
.a732						xt_asm_txs:
.a732		a9 9a		lda #$9a	                lda #$9A
.a734		80 04		bra $a73a	                bra asm_common
.a736						z_asm_txs:
.a736						xt_asm_tya:
.a736		a9 98		lda #$98	                lda #$98
.a738		80 00		bra $a73a	                bra asm_common
.a73a						z_asm_tya:
.a73a						asm_common:
.a73a		a8		tay		                tay
.a73b		20 8a 97	jsr $978a	                jsr cmpl_a
.a73e		a9 ad		lda #$ad	                lda #<oc_index_table
.a740		85 27		sta $27		                sta tmp2
.a742		a9 b3		lda #$b3	                lda #>oc_index_table
.a744		85 28		sta $28		                sta tmp2+1
.a746		98		tya		                tya             ; retrieve opcode
.a747		0a		asl a		                asl             ; times two for offset
.a748		90 02		bcc $a74c	                bcc +
.a74a		e6 28		inc $28		                inc tmp2+1
.a74c						+
.a74c		a8		tay		                tay             ; use Y as the index
.a74d		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB
.a74f		85 29		sta $29		                sta tmp3
.a751		c8		iny		                iny
.a752		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB
.a754		85 2a		sta $2a		                sta tmp3+1
.a756		b2 29		lda ($29)	                lda (tmp3)      ; get "lengths byte"
.a758		2a		rol a		                rol
.a759		2a		rol a		                rol
.a75a		2a		rol a		                rol             ; Three times because we go through Carry
.a75b		29 03		and #$03	                and #%00000011
.a75d		a8		tay		                tay
.a75e		88		dey		                dey
.a75f		f0 12		beq $a773	                beq _done
.a761		20 8a d7	jsr $d78a	                jsr underflow_1
.a764		b5 00		lda $00,x	                lda 0,x
.a766		20 8a 97	jsr $978a	                jsr cmpl_a      ; does not use Y
.a769		88		dey		                dey
.a76a		f0 05		beq $a771	                beq _done_drop
.a76c		b5 01		lda $01,x	                lda 1,x
.a76e		20 8a 97	jsr $978a	                jsr cmpl_a      ; Fall through to _done_drop
.a771						_done_drop:
.a771		e8		inx		                inx
.a772		e8		inx		                inx             ; Fall through to _done
.a773						_done:
.a773		60		rts		                rts             ; Returns to original caller
.a774						xt_asm_push_a:
.a774		a0 00		ldy #$00	                ldy #0
.a776						_loop:
.a776		b9 84 a7	lda $a784,y	                lda asm_push_a_data,y
.a779		c9 ff		cmp #$ff	                cmp #$FF
.a77b		f0 06		beq $a783	                beq _done
.a77d		20 8a 97	jsr $978a	                jsr cmpl_a      ; does not change Y
.a780		c8		iny		                iny
.a781		80 f3		bra $a776	                bra _loop
.a783						_done:
.a783						z_asm_push_a:
.a783		60		rts		                rts
.a784						asm_push_a_data:
>a784		ca ca 95 00 74 01		        .byte $CA, $CA, $95, 00, $74, $01
>a78a		ff				        .byte $FF               ; terminator
.a78b						xt_asm_back_jump:
.a78b						z_asm_back_jump:
.a78b		60		rts		                rts
.a78c						xt_asm_back_branch:
.a78c		20 1b 89	jsr $891b	                jsr xt_here             ; ( addr-l addr-h )
.a78f		20 e4 8b	jsr $8be4	                jsr xt_minus            ; ( offset )
.a792		3a		dec a		                dea
.a793		3a		dec a		                dea
.a794						z_asm_back_branch:
.a794		60		rts		                rts
.a795						assembler_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/ed.asm

.a795						xt_ed:
.a795		20 99 a7	jsr $a799	                jsr ed6502      ; kept in separate file
.a798		60		rts		z_ed:           rts
=$0035						ed_head  = tmped    ; pointer to first list element (addr) (2 bytes)
=$0037						ed_cur   = tmped+2  ; current line number (1 is first line) (2 bytes)
=$0039						ed_flags = tmped+4  ; Flags used by ed, where
=$003a						ed_base  = tmped+5  ; used to hold BASE and put it back at the end.
.a799						ed6502:
.a799		a5 18		lda $18		                lda base
.a79b		85 3a		sta $3a		                sta ed_base
.a79d		a9 0a		lda #$0a	                lda #10
.a79f		85 18		sta $18		                sta base
.a7a1		64 35		stz $35		                stz ed_head
.a7a3		64 36		stz $36		                stz ed_head+1
.a7a5		64 37		stz $37		                stz ed_cur
.a7a7		64 38		stz $38		                stz ed_cur+1
.a7a9		64 39		stz $39		                stz ed_flags
.a7ab		20 f1 9d	jsr $9df1	                jsr xt_zero
.a7ae		20 f1 9d	jsr $9df1	                jsr xt_zero             ; ( addr-t u-t )
.a7b1		20 3a 84	jsr $843a	                jsr xt_cr
.a7b4						ed_input_loop:
.a7b4		a9 81		lda #$81	                lda #%10000001
.a7b6		14 39		trb $39		                trb ed_flags
.a7b8		20 93 ac	jsr $ac93	                jsr ed_get_input
.a7bb		a5 0e		lda $0e		                lda ciblen
.a7bd		d0 1f		bne $a7de	                bne _command_mode
.a7bf		ca		dex		                dex
.a7c0		ca		dex		                dex                     ; ( addr-t u-t ? )
.a7c1		a5 37		lda $37		                lda ed_cur
.a7c3		95 00		sta $00,x	                sta 0,x
.a7c5		a5 38		lda $38		                lda ed_cur+1
.a7c7		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t u )
.a7c9		a9 80		lda #$80	                lda #%10000000
.a7cb		04 39		tsb $39		                tsb ed_flags
.a7cd		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; ( addr-t u-t u+1 )
.a7d0		20 af ac	jsr $acaf	                jsr ed_is_valid_line
.a7d3		b0 03		bcs $a7d8	                bcs +
.a7d5		4c 83 ac	jmp $ac83	                jmp ed_error_1drop
.a7d8						+
.a7d8		20 f1 9d	jsr $9df1	                jsr xt_zero             ; ( addr-t u-t u+1 0 )
.a7db		4c a9 a8	jmp $a8a9	                jmp _line_number_only_from_external
.a7de						_command_mode:
.a7de		20 f1 9d	jsr $9df1	                jsr xt_zero             ; parameter 1 is NOS ( addr-t u-t 0 )
.a7e1		20 f1 9d	jsr $9df1	                jsr xt_zero             ; parameter 2 is TOS ( addr-t u-t 0 0 )
.a7e4		b2 0c		lda ($0c)	                lda (cib)
.a7e6		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII '.'
.a7e8		d0 3a		bne $a824	                bne _prefix_dollar
.a7ea		20 a4 ac	jsr $aca4	                jsr ed_have_text
.a7ed		a5 37		lda $37		                lda ed_cur
.a7ef		95 02		sta $02,x	                sta 2,x
.a7f1		a5 38		lda $38		                lda ed_cur+1
.a7f3		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.a7f5		a9 80		lda #$80	                lda #%10000000
.a7f7		04 39		tsb $39		                tsb ed_flags
.a7f9		a5 0e		lda $0e		                lda ciblen
.a7fb		3a		dec a		                dea                     ; sets Z if A was 1
.a7fc		d0 03		bne $a801	                bne +
.a7fe		4c a9 a8	jmp $a8a9	                jmp _line_number_only_from_external
.a801						+
.a801		ca		dex		                dex
.a802		ca		dex		                dex
.a803		ca		dex		                dex
.a804		ca		dex		                dex
.a805		a5 0c		lda $0c		                lda cib
.a807		95 02		sta $02,x	                sta 2,x
.a809		a5 0d		lda $0d		                lda cib+1
.a80b		95 03		sta $03,x	                sta 3,x
.a80d		a5 0e		lda $0e		                lda ciblen
.a80f		95 00		sta $00,x	                sta 0,x
.a811		a5 0f		lda $0f		                lda ciblen+1
.a813		95 01		sta $01,x	                sta 1,x
.a815		20 dd 8c	jsr $8cdd	                jsr xt_one_minus        ; ( addr-t u-t para1 0 addr u-1 )
.a818		20 28 92	jsr $9228	                jsr xt_swap             ; ( addr-t u-t para1 0 u-1 addr )
.a81b		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; ( addr-t u-t para1 0 u-1 addr+1 )
.a81e		20 28 92	jsr $9228	                jsr xt_swap             ; ( addr-t u-t para1 0 addr+1 u-1 )
.a821		4c 01 a9	jmp $a901	                jmp _check_for_para2
.a824						_prefix_dollar:
.a824		b2 0c		lda ($0c)	                lda (cib)
.a826		c9 24		cmp #$24	                cmp #'$'
.a828		d0 1c		bne $a846	                bne _prefix_percent
.a82a		20 a4 ac	jsr $aca4	                jsr ed_have_text
.a82d		e8		inx		                inx
.a82e		e8		inx		                inx                     ; ( addr-t u-t 0 )
.a82f		20 d1 ac	jsr $acd1	                jsr ed_last_line          ; ( addr-t u-t 0 para1 )
.a832		20 28 92	jsr $9228	                jsr xt_swap             ; SWAP ( addr-t u-t para1 0 )
.a835		a9 80		lda #$80	                lda #%10000000
.a837		04 39		tsb $39		                tsb ed_flags
.a839		a5 0e		lda $0e		                lda ciblen
.a83b		3a		dec a		                dea                     ; sets Z if A was 1
.a83c		d0 03		bne $a841	                bne +
.a83e		4c a9 a8	jmp $a8a9	                jmp _line_number_only_from_external
.a841						+
.a841		a0 01		ldy #$01	                ldy #01
.a843		4c 7d a9	jmp $a97d	                jmp _check_command
.a846						_prefix_percent:
.a846		b2 0c		lda ($0c)	                lda (cib)
.a848		c9 25		cmp #$25	                cmp #'%'                ; ASCII '%'
.a84a		f0 04		beq $a850	                beq _whole_text
.a84c		c9 2c		cmp #$2c	                cmp #','                ; ASCII ','
.a84e		d0 17		bne $a867	                bne _prefix_semicolon
.a850						_whole_text:
.a850		20 a4 ac	jsr $aca4	                jsr ed_have_text
.a853		a9 01		lda #$01	                lda #01
.a855		95 02		sta $02,x	                sta 2,x                 ; LSB of NOS is para 1
.a857		74 03		stz $03,x	                stz 3,x                 ; ( addr-t u-t para1 0 )
.a859						_semicolon_entry:
.a859		e8		inx		                inx
.a85a		e8		inx		                inx                     ; DROP ( addr-t u-t para1 )
.a85b		20 d1 ac	jsr $acd1	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.a85e		a9 80		lda #$80	                lda #%10000000
.a860		04 39		tsb $39		                tsb ed_flags
.a862		a0 01		ldy #$01	                ldy #01
.a864		4c 7d a9	jmp $a97d	                jmp _check_command
.a867						_prefix_semicolon:
.a867		b2 0c		lda ($0c)	                lda (cib)
.a869		c9 3b		cmp #$3b	                cmp #';'                ; ASCII ';'
.a86b		d0 0d		bne $a87a	                bne _prefix_number
.a86d		20 a4 ac	jsr $aca4	                jsr ed_have_text
.a870		a5 37		lda $37		                lda ed_cur
.a872		95 02		sta $02,x	                sta 2,x
.a874		a5 38		lda $38		                lda ed_cur+1
.a876		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.a878		80 df		bra $a859	                bra _semicolon_entry
.a87a						_prefix_number:
.a87a		20 f1 9d	jsr $9df1	                jsr xt_zero
.a87d		20 f1 9d	jsr $9df1	                jsr xt_zero             ; ( addr-t u-t 0 0 0 0 )
.a880		ca		dex		                dex
.a881		ca		dex		                dex
.a882		ca		dex		                dex
.a883		ca		dex		                dex                     ; ( addr-t u-t 0 0 0 0 ? ? )
.a884		a5 0c		lda $0c		                lda cib
.a886		95 02		sta $02,x	                sta 2,x
.a888		a5 0d		lda $0d		                lda cib+1
.a88a		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t 0 0 0 0 cib ? )
.a88c		a5 0e		lda $0e		                lda ciblen
.a88e		95 00		sta $00,x	                sta 0,x
.a890		a5 0f		lda $0f		                lda ciblen+1
.a892		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 0 0 cib ciblen )
.a894		20 c6 92	jsr $92c6	                jsr xt_to_number        ; ( addr-t u-t 0 0 ud addr2 u2 )
.a897		b5 00		lda $00,x	                lda 0,x
.a899		15 01		ora $01,x	                ora 1,x
.a89b		d0 24		bne $a8c1	                bne _have_unconverted_chars
.a89d		e8		inx		                inx
.a89e		e8		inx		                inx
.a89f		e8		inx		                inx
.a8a0		e8		inx		                inx                     ; 2DROP ( addr-t u-t 0 0 ud )
.a8a1		20 3a 9e	jsr $9e3a	                jsr xt_d_to_s           ; D>S ( addr-t u-t 0 0 u )
.a8a4		20 75 9c	jsr $9c75	                jsr xt_not_rote         ; -ROT ( addr-t u-t u 0 0 )
.a8a7		e8		inx		                inx
.a8a8		e8		inx		                inx                     ; ( addr-t u-t u 0 ) drop through
.a8a9						_line_number_only_from_external:
.a8a9		20 28 92	jsr $9228	                jsr xt_swap             ; ( addr-t u-t 0 u )
.a8ac		20 af ac	jsr $acaf	                jsr ed_is_valid_line
.a8af		b0 03		bcs $a8b4	                bcs +
.a8b1		4c 81 ac	jmp $ac81	                jmp ed_error_2drop
.a8b4						+
.a8b4		20 28 92	jsr $9228	                jsr xt_swap             ; ( addr-t u-t u 0 )
.a8b7		20 3e ad	jsr $ad3e	                jsr ed_para1_to_cur
.a8ba		a9 80		lda #$80	                lda #%10000000
.a8bc		04 39		tsb $39		                tsb ed_flags
.a8be		4c 5c ab	jmp $ab5c	                jmp ed_cmd_p_from_external
.a8c1						_have_unconverted_chars:
.a8c1		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( addr-t u-t 0 0 ud addr2 u2 u2 )
.a8c4		ca		dex		                dex
.a8c5		ca		dex		                dex                     ; ( addr-t u-t 0 0 ud addr2 u2 u2 ? )
.a8c6		a5 0e		lda $0e		                lda ciblen
.a8c8		95 00		sta $00,x	                sta 0,x
.a8ca		a5 0f		lda $0f		                lda ciblen+1
.a8cc		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 ud addr2 u2 u2 ciblen )
.a8ce		20 96 87	jsr $8796	                jsr xt_equal            ; ( addr-t u-t 0 0 ud addr2 u2 f )
.a8d1		b5 00		lda $00,x	                lda 0,x
.a8d3		15 01		ora $01,x	                ora 1,x
.a8d5		f0 0e		beq $a8e5	                beq _no_command_yet
.a8d7		8a		txa		                txa
.a8d8		18		clc		                clc
.a8d9		69 0a		adc #$0a	                adc #10
.a8db		aa		tax		                tax                     ; ( addr-t u-t 0 0 )
.a8dc		a9 80		lda #$80	                lda #%10000000
.a8de		14 39		trb $39		                trb ed_flags
.a8e0		a0 00		ldy #$00	                ldy #00
.a8e2		4c 7d a9	jmp $a97d	                jmp _check_command
.a8e5						_no_command_yet:
.a8e5		e8		inx		                inx
.a8e6		e8		inx		                inx                     ; ( ... 0 0 ud addr2 u2 )
.a8e7		20 66 93	jsr $9366	                jsr xt_to_r             ; >R ( ... 0 0 ud addr2 ) (R: u2)
.a8ea		20 75 9c	jsr $9c75	                jsr xt_not_rote         ; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.a8ed		20 3a 9e	jsr $9e3a	                jsr xt_d_to_s           ; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.a8f0		b5 00		lda $00,x	                lda 0,x                 ; LSB
.a8f2		95 06		sta $06,x	                sta 6,x
.a8f4		b5 01		lda $01,x	                lda 1,x                 ; MSB
.a8f6		95 07		sta $07,x	                sta 7,x                 ; ( ... para1 0 addr2 para1 ) (R: u2)
.a8f8		e8		inx		                inx
.a8f9		e8		inx		                inx                     ; ( addr-t u-t para1 0 addr2 ) (R: u2)
.a8fa		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.a8fd		a9 80		lda #$80	                lda #%10000000
.a8ff		04 39		tsb $39		                tsb ed_flags
.a901						_check_for_para2:
.a901		a1 02		lda ($02,x)	                lda (2,x)
.a903		c9 2c		cmp #$2c	                cmp #','                ; ASCII code for ',' (comma)
.a905		f0 0d		beq $a914	                beq _got_comma
.a907		38		sec		                sec
.a908		a5 0e		lda $0e		                lda ciblen
.a90a		f5 00		sbc $00,x	                sbc 0,x
.a90c		a8		tay		                tay
.a90d		e8		inx		                inx
.a90e		e8		inx		                inx
.a90f		e8		inx		                inx
.a910		e8		inx		                inx                     ; 2DROP ( addr-t u-t para1 0 )
.a911		4c 7d a9	jmp $a97d	                jmp _check_command
.a914						_got_comma:
.a914		f6 02		inc $02,x	                inc 2,x
.a916		d0 02		bne $a91a	                bne +
.a918		f6 03		inc $03,x	                inc 3,x                 ; ( addr-t u-t para1 0 addr2+1 u2 )
.a91a						+
.a91a		b5 01		lda $01,x	                lda 1,x
.a91c		f0 02		beq $a920	                beq +
.a91e		d6 01		dec $01,x	                dec 1,x
.a920						+
.a920		d6 00		dec $00,x	                dec 0,x                 ; ( addr-t u-t para1 0 addr2+1 u2-1 )
.a922		a1 02		lda ($02,x)	                lda (2,x)
.a924		c9 24		cmp #$24	                cmp #$24                ; ASCII for '$'
.a926		d0 14		bne $a93c	                bne _para2_not_dollar
.a928		38		sec		                sec
.a929		a5 0e		lda $0e		                lda ciblen
.a92b		f5 02		sbc $02,x	                sbc 2,x
.a92d		a8		tay		                tay
.a92e		c8		iny		                iny
.a92f		5a		phy		                phy
.a930		8a		txa		                txa
.a931		18		clc		                clc
.a932		69 06		adc #$06	                adc #06
.a934		aa		tax		                tax                     ; ( addr-t u-t para1 )
.a935		20 d1 ac	jsr $acd1	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.a938		7a		ply		                ply
.a939		4c 7d a9	jmp $a97d	                jmp _check_command
.a93c						_para2_not_dollar:
.a93c		20 66 93	jsr $9366	                jsr xt_to_r             ; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.a93f		20 f1 9d	jsr $9df1	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.a942		20 f1 9d	jsr $9df1	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.a945		20 8b 8f	jsr $8f8b	                jsr xt_rot              ; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.a948		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R> ( ... para1 0 0 0 addr2+1 u2-1)
.a94b		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.a94e		20 66 93	jsr $9366	                jsr xt_to_r             ; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.a951		20 c6 92	jsr $92c6	                jsr xt_to_number        ; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.a954		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.a957		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.a95a		20 96 87	jsr $8796	                jsr xt_equal            ; = ( ... para1 0 ud addr3 u3 f )
.a95d		b5 00		lda $00,x	                lda 0,x
.a95f		15 01		ora $01,x	                ora 1,x
.a961		f0 08		beq $a96b	                beq _second_number
.a963		8a		txa		                txa
.a964		18		clc		                clc
.a965		69 0c		adc #$0c	                adc #12
.a967		aa		tax		                tax                     ; back to ( addr-t u-t )
.a968		4c 85 ac	jmp $ac85	                jmp ed_error
.a96b						_second_number:
.a96b		e8		inx		                inx
.a96c		e8		inx		                inx                     ; ( addr-t u-t para1 0 ud addr3 u3 )
.a96d		38		sec		                sec
.a96e		a5 0e		lda $0e		                lda ciblen
.a970		f5 00		sbc $00,x	                sbc 0,x
.a972		48		pha		                pha
.a973		20 9d 93	jsr $939d	                jsr xt_two_drop         ; 2DROP ( addr-t u-t para1 0 ud )
.a976		20 3a 9e	jsr $9e3a	                jsr xt_d_to_s           ; D>S  ( addr-t u-t para1 0 para2 )
.a979		20 30 8c	jsr $8c30	                jsr xt_nip              ; NIP ( addr-t u-t para1 para2 )
.a97c		7a		ply		                ply
.a97d						_check_command:
.a97d		24 39		bit $39		                bit ed_flags
.a97f		30 08		bmi $a989	                bmi _check_command_have_arg
.a981		a5 37		lda $37		                lda ed_cur
.a983		95 02		sta $02,x	                sta 2,x
.a985		a5 38		lda $38		                lda ed_cur+1
.a987		95 03		sta $03,x	                sta 3,x
.a989						_check_command_have_arg:
.a989		b1 0c		lda ($0c),y	                lda (cib),y             ; get mystery char from input
.a98b		85 25		sta $25		                sta tmp1
.a98d		da		phx		                phx
.a98e		a2 00		ldx #$00	                ldx #00
.a990						_cmd_loop:
.a990		bd 69 ad	lda $ad69,x	                lda ed_cmd_list,x
.a993		f0 07		beq $a99c	                beq _illegal_command    ; zero marks end of list
.a995		c5 25		cmp $25		                cmp tmp1
.a997		f0 07		beq $a9a0	                beq _found_cmd
.a999		e8		inx		                inx
.a99a		80 f4		bra $a990	                bra _cmd_loop
.a99c						_illegal_command:
.a99c		fa		plx		                plx
.a99d		4c 81 ac	jmp $ac81	                jmp ed_error_2drop
.a9a0						_found_cmd:
.a9a0		8a		txa		                txa
.a9a1		0a		asl a		                asl
.a9a2		aa		tax		                tax                     ; X * 2 for table
.a9a3		7c 74 ad	jmp ($ad74,x)	                jmp (ed_cmd_table,x)
.a9a6						ed_next_command:
.a9a6		e8		inx		                inx
.a9a7		e8		inx		                inx
.a9a8		e8		inx		                inx
.a9a9		e8		inx		                inx                     ; ( addr-t u-t ) Fall through
.a9aa		4c b4 a7	jmp $a7b4	                jmp ed_input_loop
.a9ad						ed_all_done:
.a9ad		64 0e		stz $0e		                stz ciblen
.a9af		64 0f		stz $0f		                stz ciblen+1
.a9b1		20 9d 93	jsr $939d	                jsr xt_two_drop                 ; 2DROP ( addr-t u-t )
.a9b4		a5 3a		lda $3a		                lda ed_base
.a9b6		85 18		sta $18		                sta base
.a9b8		60		rts		                rts
.a9b9						ed_cmd_a:
.a9b9		fa		plx		                plx
.a9ba		e8		inx		                inx
.a9bb		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.a9bc						ed_entry_cmd_i:
.a9bc		20 07 ad	jsr $ad07	                jsr ed_num_to_addr        ;  ( addr-t u-t addr1 )
.a9bf		20 3a 84	jsr $843a	                jsr xt_cr
.a9c2						_next_string_loop:
.a9c2		20 93 ac	jsr $ac93	                jsr ed_get_input
.a9c5		b2 0c		lda ($0c)	                lda (cib)
.a9c7		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII for '.'
.a9c9		d0 16		bne $a9e1	                bne _add_line
.a9cb		a4 0e		ldy $0e		                ldy ciblen
.a9cd		c0 01		cpy #$01	                cpy #01
.a9cf		d0 10		bne $a9e1	                bne _add_line
.a9d1		a4 0f		ldy $0f		                ldy ciblen+1
.a9d3		d0 0c		bne $a9e1	                bne _add_line
.a9d5		e8		inx		                inx
.a9d6		e8		inx		                inx
.a9d7		a9 40		lda #$40	                lda #%01000000
.a9d9		04 39		tsb $39		                tsb ed_flags
.a9db		20 3a 84	jsr $843a	                jsr xt_cr
.a9de		4c b4 a7	jmp $a7b4	                jmp ed_input_loop
.a9e1						_add_line:
.a9e1		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u-t addr1 addr1 )
.a9e4		20 1b 89	jsr $891b	                jsr xt_here             ; HERE ( addr-t u-t addr1 addr1 here )
.a9e7		20 28 92	jsr $9228	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 here addr1 )
.a9ea		20 1a 88	jsr $881a	                jsr xt_fetch            ; @  ( addr-t u-t addr1 here addr2 )
.a9ed		20 cd 83	jsr $83cd	                jsr xt_comma            ; ,  ( addr-t u-t addr1 here )
.a9f0		20 83 93	jsr $9383	                jsr xt_tuck             ; TUCK ( addr-t u-t here addr1 here )
.a9f3		20 28 92	jsr $9228	                jsr xt_swap             ; SWAP ( addr-t u-t here here addr1 )
.a9f6		20 12 92	jsr $9212	                jsr xt_store            ; ! ( addr-t u-t here )
.a9f9		20 1b 89	jsr $891b	                jsr xt_here             ; HERE ( addr-t u-t here here2)
.a9fc		a5 00		lda $00		                lda cp
.a9fe		18		clc		                clc
.a9ff		69 04		adc #$04	                adc #04
.aa01		85 00		sta $00		                sta cp
.aa03		90 02		bcc $aa07	                bcc +
.aa05		e6 01		inc $01		                inc cp+1
.aa07						+
.aa07		e6 37		inc $37		                inc ed_cur
.aa09		d0 02		bne $aa0d	                bne +
.aa0b		e6 38		inc $38		                inc ed_cur+1
.aa0d						+
.aa0d		20 1b 89	jsr $891b	                jsr xt_here     ; HERE ( addr-t u-t here here2 here3 )
.aa10		20 a0 86	jsr $86a0	                jsr xt_dup      ; DUP ( addr-t u-t here here2 here3 here3 )
.aa13		ca		dex		                dex
.aa14		ca		dex		                dex             ; ( addr-t u-t here here2 here3 here3 ? )
.aa15		a5 0c		lda $0c		                lda cib
.aa17		95 00		sta $00,x	                sta 0,x
.aa19		a5 0d		lda $0d		                lda cib+1
.aa1b		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 here3 cib )
.aa1d		20 28 92	jsr $9228	                jsr xt_swap     ; SWAP ( addr-t u-t here here2 here3 cib here3 )
.aa20		ca		dex		                dex
.aa21		ca		dex		                dex             ; ( addr-t u-t here here2 here3 cib here3 ? )
.aa22		a5 0e		lda $0e		                lda ciblen
.aa24		95 00		sta $00,x	                sta 0,x
.aa26		a5 0f		lda $0f		                lda ciblen+1
.aa28		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 cib here3 ciblen )
.aa2a		20 00 8c	jsr $8c00	                jsr xt_move     ; ( addr-t u-t here here2 here3 )
.aa2d		18		clc		                clc
.aa2e		a5 00		lda $00		                lda cp
.aa30		65 0e		adc $0e		                adc ciblen
.aa32		85 00		sta $00		                sta cp
.aa34		90 06		bcc $aa3c	                bcc +
.aa36		a5 01		lda $01		                lda cp+1
.aa38		65 0f		adc $0f		                adc ciblen+1
.aa3a		85 01		sta $01		                sta cp+1
.aa3c						+
.aa3c		20 05 8d	jsr $8d05	                jsr xt_over             ; OVER ( addr-t u-t here here2 here3 here2 )
.aa3f		20 12 92	jsr $9212	                jsr xt_store            ; ! ( addr-t u-t here here2 )
.aa42		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+
.aa45		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+ ( addr-t u-t here here2+2 )
.aa48		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u-t here here2+2 here2+2 )
.aa4b		a5 0e		lda $0e		                lda ciblen
.aa4d		95 02		sta $02,x	                sta 2,x
.aa4f		a5 0f		lda $0f		                lda ciblen+1
.aa51		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t here ciblen here2+2 )
.aa53		20 12 92	jsr $9212	                jsr xt_store            ; ! ( addr-t u-t here )
.aa56		20 3a 84	jsr $843a	                jsr xt_cr
.aa59		4c c2 a9	jmp $a9c2	                jmp _next_string_loop
.aa5c						ed_cmd_d:
.aa5c		fa		plx		                plx
.aa5d		20 a4 ac	jsr $aca4	                jsr ed_have_text
.aa60		20 f9 ac	jsr $acf9	                jsr ed_no_line_zero
.aa63		b5 00		lda $00,x	                lda 0,x
.aa65		15 01		ora $01,x	                ora 1,x
.aa67		d0 08		bne $aa71	                bne +
.aa69		20 05 8d	jsr $8d05	                jsr xt_over             ; ( addr-t u-t para1 0 para1 )
.aa6c		20 ae aa	jsr $aaae	                jsr _cmd_d_common       ; ( addr-t u-t para1 0 )
.aa6f		80 33		bra $aaa4	                bra _cmd_d_done
.aa71						+
.aa71		20 af ac	jsr $acaf	                jsr ed_is_valid_line      ; result is in C flag
.aa74		b0 03		bcs $aa79	                bcs _cmd_d_loop
.aa76		4c 81 ac	jmp $ac81	                jmp ed_error_2drop
.aa79						_cmd_d_loop:
.aa79		20 a5 93	jsr $93a5	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.aa7c		20 06 89	jsr $8906	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.aa7f		b5 00		lda $00,x	                lda 0,x
.aa81		15 01		ora $01,x	                ora 1,x
.aa83		d0 0d		bne $aa92	                bne _cmd_d_done_with_flag
.aa85		e8		inx		                inx
.aa86		e8		inx		                inx                     ; Get rid of the flag from >
.aa87		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u-t para1 para2 para2 )
.aa8a		20 ae aa	jsr $aaae	                jsr _cmd_d_common       ; ( addr-t u-t para1 para2 )
.aa8d		20 dd 8c	jsr $8cdd	                jsr xt_one_minus        ; 1- ( addr-t u-t para1 para2-1 )
.aa90		80 e7		bra $aa79	                bra _cmd_d_loop
.aa92						_cmd_d_done_with_flag:
.aa92		e8		inx		                inx                     ; ( addr-t u-t para1 para2 )
.aa93		e8		inx		                inx
.aa94		b5 02		lda $02,x	                lda 2,x
.aa96		d0 02		bne $aa9a	                bne +
.aa98		d6 03		dec $03,x	                dec 3,x
.aa9a						+
.aa9a		d6 02		dec $02,x	                dec 2,x
.aa9c		b5 02		lda $02,x	                lda 2,x
.aa9e		85 37		sta $37		                sta ed_cur
.aaa0		b5 03		lda $03,x	                lda 3,x
.aaa2		85 38		sta $38		                sta ed_cur+1            ; drop through to _cmd_d_done
.aaa4						_cmd_d_done:
.aaa4		a9 40		lda #$40	                lda #%01000000
.aaa6		04 39		tsb $39		                tsb ed_flags
.aaa8		20 3a 84	jsr $843a	                jsr xt_cr
.aaab		4c a6 a9	jmp $a9a6	                jmp ed_next_command
.aaae						_cmd_d_common:
.aaae		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u-t u u )
.aab1		20 07 ad	jsr $ad07	                jsr ed_num_to_addr        ; ( addr-t u-t u addr )
.aab4		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( addr-t u-t u addr1 )
.aab7		20 28 92	jsr $9228	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 u )
.aaba		20 dd 8c	jsr $8cdd	                jsr xt_one_minus        ; 1- ( addr-t u-t addr1 u-1 )
.aabd		20 07 ad	jsr $ad07	                jsr ed_num_to_addr        ; ( addr-t u-t addr1 addr-1 )
.aac0		20 12 92	jsr $9212	                jsr xt_store            ; ! ( addr-t u-t )
.aac3		60		rts		                rts
.aac4						ed_cmd_equ:
.aac4		fa		plx		                plx
.aac5		a5 35		lda $35		                lda ed_head
.aac7		05 36		ora $36		                ora ed_head+1
.aac9		d0 08		bne $aad3	                bne _cmd_equ_have_text
.aacb		ca		dex		                dex
.aacc		ca		dex		                dex
.aacd		74 00		stz $00,x	                stz 0,x
.aacf		74 01		stz $01,x	                stz 1,x                 ; ( addr-t u-t para1 para2 0 )
.aad1		80 21		bra $aaf4	                bra _cmd_equ_done
.aad3						_cmd_equ_have_text:
.aad3		20 f9 ac	jsr $acf9	                jsr ed_no_line_zero
.aad6		24 39		bit $39		                bit ed_flags
.aad8		30 0c		bmi $aae6	                bmi _cmd_equ_have_para
.aada		ca		dex		                dex
.aadb		ca		dex		                dex                     ; ( addr-t u-t para1 para2 ? )
.aadc		a5 37		lda $37		                lda ed_cur
.aade		95 00		sta $00,x	                sta 0,x
.aae0		a5 38		lda $38		                lda ed_cur+1
.aae2		95 01		sta $01,x	                sta 1,x
.aae4		80 0e		bra $aaf4	                bra _cmd_equ_done       ; ( addr-t u-t para1 para2 cur )
.aae6						_cmd_equ_have_para:
.aae6		b5 00		lda $00,x	                lda 0,x
.aae8		15 01		ora $01,x	                ora 1,x
.aaea		d0 05		bne $aaf1	                bne _cmd_equ_two_paras
.aaec		20 05 8d	jsr $8d05	                jsr xt_over             ; ( addr-t u-t para1 para2 para1)
.aaef		80 03		bra $aaf4	                bra _cmd_equ_done
.aaf1						_cmd_equ_two_paras:
.aaf1		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( addr-t u-t para1 para2 para2) drop through
.aaf4						_cmd_equ_done:
.aaf4		20 3a 84	jsr $843a	                jsr xt_cr               ; number goes on new line
.aaf7		20 da 94	jsr $94da	                jsr xt_u_dot            ; ( addr-t u-t para1 para2 )
.aafa		20 3a 84	jsr $843a	                jsr xt_cr
.aafd		4c a6 a9	jmp $a9a6	                jmp ed_next_command
.ab00						ed_cmd_f:
.ab00		fa		plx		                plx
.ab01		24 39		bit $39		                bit ed_flags
.ab03		30 17		bmi $ab1c	                bmi _cmd_f_have_para
.ab05		20 3a 84	jsr $843a	                jsr xt_cr
.ab08		20 66 93	jsr $9366	                jsr xt_to_r             ; >R   ( addr-t u-t 0 ) ( R: 0 )
.ab0b		20 8b 8f	jsr $8f8b	                jsr xt_rot              ; ROT  ( u-t 0 addr-t ) ( R: 0 )
.ab0e		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP  ( u-t 0 addr-t addr-t ) ( R: 0 )
.ab11		20 da 94	jsr $94da	                jsr xt_u_dot            ; U.   ( u-t 0 addr-t ) ( R: 0 )
.ab14		20 75 9c	jsr $9c75	                jsr xt_not_rote         ; -ROT ( addr-t u-t 0 ) ( R: 0 )
.ab17		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R>   ( addr-t u-t 0 0 )
.ab1a		80 11		bra $ab2d	                bra _cmd_f_done
.ab1c						_cmd_f_have_para:
.ab1c		20 05 8d	jsr $8d05	                jsr xt_over
.ab1f		20 3a 84	jsr $843a	                jsr xt_cr
.ab22		20 da 94	jsr $94da	                jsr xt_u_dot
.ab25		b5 02		lda $02,x	                lda 2,x
.ab27		95 06		sta $06,x	                sta 6,x
.ab29		b5 03		lda $03,x	                lda 3,x
.ab2b		95 07		sta $07,x	                sta 7,x                 ; fall through to _cmd_f_done
.ab2d						_cmd_f_done:
.ab2d		20 3a 84	jsr $843a	                jsr xt_cr
.ab30		4c a6 a9	jmp $a9a6	                jmp ed_next_command
.ab33						ed_cmd_i:
.ab33		fa		plx		                plx
.ab34		e8		inx		                inx
.ab35		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.ab36		24 39		bit $39		                bit ed_flags
.ab38		30 08		bmi $ab42	                bmi _cmd_i_have_para
.ab3a		a5 37		lda $37		                lda ed_cur
.ab3c		95 00		sta $00,x	                sta 0,x
.ab3e		a5 38		lda $38		                lda ed_cur+1
.ab40		95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.ab42						_cmd_i_have_para:
.ab42		b5 00		lda $00,x	                lda 0,x
.ab44		15 01		ora $01,x	                ora 1,x
.ab46		f0 09		beq $ab51	                beq _cmd_i_done
.ab48		20 dd 8c	jsr $8cdd	                jsr xt_one_minus        ; 1-  ( addr-t u-t para1-1 )
.ab4b		20 f1 9d	jsr $9df1	                jsr xt_zero             ; 0   ( addr-t u-t para1-1 0 )
.ab4e		20 ac 8b	jsr $8bac	                jsr xt_max              ; MAX ( addr-t u-t para1-1 | 0 )
.ab51						_cmd_i_done:
.ab51		4c bc a9	jmp $a9bc	                jmp ed_entry_cmd_i
.ab54						ed_cmd_n:
.ab54		fa		plx		                plx
.ab55		a9 01		lda #$01	                lda #%00000001
.ab57		04 39		tsb $39		                tsb ed_flags
.ab59		80 05		bra $ab60	                bra ed_cmd_p_entry_for_cmd_n
.ab5b						ed_cmd_p:
.ab5b		fa		plx		                plx
.ab5c						ed_cmd_p_from_external:
.ab5c		a9 01		lda #$01	                lda #%00000001
.ab5e		14 39		trb $39		                trb ed_flags
.ab60						ed_cmd_p_entry_for_cmd_n:
.ab60		20 a4 ac	jsr $aca4	                jsr ed_have_text
.ab63		20 f9 ac	jsr $acf9	                jsr ed_no_line_zero
.ab66		20 3a 84	jsr $843a	                jsr xt_cr
.ab69		b5 00		lda $00,x	                lda 0,x
.ab6b		15 01		ora $01,x	                ora 1,x
.ab6d		d0 10		bne $ab7f	                bne _cmd_p_loop
.ab6f		b5 02		lda $02,x	                lda 2,x
.ab71		85 37		sta $37		                sta ed_cur
.ab73		b5 03		lda $03,x	                lda 3,x
.ab75		85 38		sta $38		                sta ed_cur+1
.ab77		20 05 8d	jsr $8d05	                jsr xt_over             ; OVER ( addr-t u-t para1 para2 para1 )
.ab7a		20 a8 ab	jsr $aba8	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.ab7d		80 26		bra $aba5	                bra _cmd_p_all_done
.ab7f						_cmd_p_loop:
.ab7f		20 a5 93	jsr $93a5	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.ab82		20 06 89	jsr $8906	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.ab85		b5 00		lda $00,x	                lda 0,x
.ab87		15 01		ora $01,x	                ora 1,x
.ab89		d0 10		bne $ab9b	                bne _cmd_p_done
.ab8b		e8		inx		                inx
.ab8c		e8		inx		                inx                     ; Get rid of the flag from >
.ab8d		20 05 8d	jsr $8d05	                jsr xt_over             ; ( addr-t u-t para1 para2 para1 )
.ab90		20 a8 ab	jsr $aba8	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.ab93		f6 02		inc $02,x	                inc 2,x
.ab95		d0 02		bne $ab99	                bne +
.ab97		f6 03		inc $03,x	                inc 3,x
.ab99						+
.ab99		80 e4		bra $ab7f	                bra _cmd_p_loop
.ab9b						_cmd_p_done:
.ab9b		e8		inx		                inx
.ab9c		e8		inx		                inx                     ; fall through to _cmp_p_all_done
.ab9d		b5 00		lda $00,x	                lda 0,x
.ab9f		85 37		sta $37		                sta ed_cur
.aba1		b5 01		lda $01,x	                lda 1,x
.aba3		85 38		sta $38		                sta ed_cur+1
.aba5						_cmd_p_all_done:
.aba5		4c a6 a9	jmp $a9a6	                jmp ed_next_command
.aba8						_cmd_p_common:
.aba8		a5 39		lda $39		                lda ed_flags
.abaa		4a		lsr a		                lsr                     ; bit 0 now in carry
.abab		90 0b		bcc $abb8	                bcc _cmd_p_common_no_num
.abad		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u-t para1 para1 )
.abb0		20 da 94	jsr $94da	                jsr xt_u_dot            ; U. ( addr-t u-t para1 )
.abb3		a9 09		lda #$09	                lda #$09                 ; ASCII for Tab
.abb5		20 c5 86	jsr $86c5	                jsr emit_a
.abb8						_cmd_p_common_no_num:
.abb8		20 07 ad	jsr $ad07	                jsr ed_num_to_addr        ; ( addr-t u-t addr )
.abbb		20 47 ad	jsr $ad47	                jsr ed_print_addr
.abbe		60		rts		                rts
.abbf						ed_cmd_q:
.abbf		fa		plx		                plx
.abc0		24 39		bit $39		                bit ed_flags            ; bit 6 is change flag
.abc2		50 03		bvc $abc7	                bvc +
.abc4		4c 81 ac	jmp $ac81	                jmp ed_error_2drop
.abc7						+
.abc7		4c ad a9	jmp $a9ad	                jmp ed_all_done            ; can't fall thru because of PLX
.abca						ed_cmd_qq:
.abca		fa		plx		                plx
.abcb		4c ad a9	jmp $a9ad	                jmp ed_all_done
.abce						ed_cmd_w:
.abce		fa		plx		                plx
.abcf		20 a4 ac	jsr $aca4	                jsr ed_have_text
.abd2		24 39		bit $39		                bit ed_flags
.abd4		30 13		bmi $abe9	                bmi _cmd_w_have_para
.abd6		b5 06		lda $06,x	                lda 6,x
.abd8		15 07		ora $07,x	                ora 7,x
.abda		d0 03		bne $abdf	                bne +
.abdc		4c 81 ac	jmp $ac81	                jmp ed_error_2drop
.abdf						+
.abdf		b5 06		lda $06,x	                lda 6,x
.abe1		95 02		sta $02,x	                sta 2,x
.abe3		b5 07		lda $07,x	                lda 7,x
.abe5		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t addr-t ? )
.abe7		80 08		bra $abf1	                bra _cmd_w_para_ready
.abe9						_cmd_w_have_para:
.abe9		b5 02		lda $02,x	                lda 2,x
.abeb		95 06		sta $06,x	                sta 6,x
.abed		b5 03		lda $03,x	                lda 3,x
.abef		95 07		sta $07,x	                sta 7,x                 ; drop through to _cmd_w_para_ready
.abf1						_cmd_w_para_ready:
.abf1		a9 35		lda #$35	                lda #<ed_head
.abf3		95 00		sta $00,x	                sta 0,x
.abf5		a9 00		lda #$00	                lda #>ed_head
.abf7		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t addr-t addr-h )
.abf9		20 05 8d	jsr $8d05	                jsr xt_over             ; OVER ( addr-t u-t addr-t addr-h addr-t )
.abfc		20 66 93	jsr $9366	                jsr xt_to_r             ; >R ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.abff						_cmd_w_loop:
.abff		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.ac02		b5 00		lda $00,x	                lda 0,x
.ac04		15 01		ora $01,x	                ora 1,x
.ac06		f0 55		beq $ac5d	                beq _cmd_w_eol
.ac08		20 a5 93	jsr $93a5	                jsr xt_two_dup          ; 2DUP ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.ac0b		20 8f 94	jsr $948f	                jsr xt_two_to_r         ; 2>R  ( addr-t addr-1 ) (R: ... )
.ac0e		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+ ( addr-t addr1+1 ) (R: ... )
.ac11		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+ ( addr-t addr1+2 ) (R: ... )
.ac14		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t addr1+2 addr1+2 ) ( R: ... )
.ac17		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( addr-t addr1+2 addr-s ) ( R: ... )
.ac1a		20 28 92	jsr $9228	                jsr xt_swap             ; SWAP ( addr-t addr-s addr1+2 ) ( R: ... )
.ac1d		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+1 ) (R: ... )
.ac20		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+2 ) (R: ... )
.ac23		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( addr-t addr-s u-s ) ( R: ... )
.ac26		20 75 9c	jsr $9c75	                jsr xt_not_rote         ; -ROT ( u-s addr-t addr-s ) ( R: ... )
.ac29		20 28 92	jsr $9228	                jsr xt_swap             ; SWAP ( u-s addr-s addr-t ) ( R: ... )
.ac2c		20 8b 8f	jsr $8f8b	                jsr xt_rot              ; ROT (addr-s addr-t u-s ) ( R: ... )
.ac2f		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP (addr-s addr-t u-s u-s ) ( R: ... )
.ac32		20 66 93	jsr $9366	                jsr xt_to_r             ; >R (addr-s addr-t u-s ) ( R: ... u-s )
.ac35		20 00 8c	jsr $8c00	                jsr xt_move             ; MOVE ( )( R: addr-t addr-1 addr-t )
.ac38		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R> ( u-s )  ( R: addr-t addr-h addr-t )
.ac3b		20 15 94	jsr $9415	                jsr xt_two_r_from       ; 2R> ( u-s addr-t addr-h ) ( R: addr-t )
.ac3e		20 75 9c	jsr $9c75	                jsr xt_not_rote         ; -ROT ( addr-h u-s addr-t ) ( R: addr-t )
.ac41		20 53 8e	jsr $8e53	                jsr xt_plus             ; + ( addr-h addr-t1 ) ( R: addr-t )
.ac44		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.ac47		ca		dex		                dex
.ac48		ca		dex		                dex                     ; ( addr-h addr-t1 addr-t1 ? ) ( R: addr-t )
.ac49		a9 0a		lda #$0a	                lda #AscLF              ; ASCII for LF
.ac4b		95 00		sta $00,x	                sta 0,x
.ac4d		74 01		stz $01,x	                stz 1,x                 ; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.ac4f		20 28 92	jsr $9228	                jsr xt_swap             ; SWAP ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.ac52		20 12 92	jsr $9212	                jsr xt_store            ; ! ( addr-h addr-t1 ) ( R: addr-t )
.ac55		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; 1+ ( addr-h addr-t1+1 ) ( R: addr-t )
.ac58		20 28 92	jsr $9228	                jsr xt_swap             ; SWAP ( addr-t1+1 addr-h ) ( R: addr-t )
.ac5b		80 a2		bra $abff	                bra _cmd_w_loop
.ac5d						_cmd_w_eol:
.ac5d		20 28 92	jsr $9228	                jsr xt_swap             ; SWAP ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.ac60		20 ee 8e	jsr $8eee	                jsr xt_r_from           ; R> ( addr-t u-t addr-n addr-tn addr-t )
.ac63		20 e4 8b	jsr $8be4	                jsr xt_minus            ; - ( addr-t u-t addr-n u )
.ac66		b5 00		lda $00,x	                lda 0,x
.ac68		95 04		sta $04,x	                sta 4,x
.ac6a		b5 01		lda $01,x	                lda 1,x
.ac6c		95 05		sta $05,x	                sta 5,x                 ; ( addr-t u addr-n u )
.ac6e		20 3a 84	jsr $843a	                jsr xt_cr
.ac71		20 a0 86	jsr $86a0	                jsr xt_dup              ; DUP ( addr-t u addr-n u u )
.ac74		20 da 94	jsr $94da	                jsr xt_u_dot            ; U. ( addr-t u addr-n u )
.ac77		20 3a 84	jsr $843a	                jsr xt_cr
.ac7a		a9 40		lda #$40	                lda #%01000000
.ac7c		14 39		trb $39		                trb ed_flags
.ac7e		4c a6 a9	jmp $a9a6	                jmp ed_next_command
.ac81						ed_error_2drop:
.ac81		e8		inx		                inx
.ac82		e8		inx		                inx                     ; drop through to _error_1drop
.ac83						ed_error_1drop:
.ac83		e8		inx		                inx
.ac84		e8		inx		                inx                     ; drop through to _error
.ac85						ed_error:
.ac85		20 3a 84	jsr $843a	                jsr xt_cr
.ac88		a9 3f		lda #$3f	                lda #'?'
.ac8a		20 c5 86	jsr $86c5	                jsr emit_a
.ac8d		20 3a 84	jsr $843a	                jsr xt_cr
.ac90		4c b4 a7	jmp $a7b4	                jmp ed_input_loop
.ac93						ed_get_input:
.ac93		20 3c 8f	jsr $8f3c	                jsr xt_refill           ;  ( addr-t u-t f )
.ac96		b5 00		lda $00,x	                lda 0,x
.ac98		15 01		ora $01,x	                ora 1,x
.ac9a		d0 05		bne $aca1	                bne +
.ac9c		7a		ply		                ply
.ac9d		7a		ply		                ply
.ac9e		4c 83 ac	jmp $ac83	                jmp ed_error_1drop
.aca1						+
.aca1		e8		inx		                inx
.aca2		e8		inx		                inx
.aca3		60		rts		                rts
.aca4						ed_have_text:
.aca4		a5 35		lda $35		                lda ed_head
.aca6		05 36		ora $36		                ora ed_head+1
.aca8		d0 04		bne $acae	                bne +
.acaa		7a		ply		                ply
.acab		7a		ply		                ply
.acac		80 d7		bra $ac85	                bra ed_error
.acae						+
.acae		60		rts		                rts
.acaf						ed_is_valid_line:
.acaf		38		sec		                sec                             ; default is legal line number
.acb0		b5 00		lda $00,x	                lda 0,x
.acb2		15 01		ora $01,x	                ora 1,x
.acb4		f0 19		beq $accf	                beq _is_valid_line_nope_zero    ; ( n )
.acb6		20 a0 86	jsr $86a0	                jsr xt_dup                      ; DUP ( n n )
.acb9		20 d1 ac	jsr $acd1	                jsr ed_last_line                  ; ( n n last )
.acbc		20 28 92	jsr $9228	                jsr xt_swap                     ; SWAP ( n last n )
.acbf		20 dd 89	jsr $89dd	                jsr xt_less_than                ; < ( n f )
.acc2		b5 00		lda $00,x	                lda 0,x                         ; 0 flag is good
.acc4		15 01		ora $01,x	                ora 1,x
.acc6		d0 05		bne $accd	                bne _is_valid_line_too_small
.acc8		e8		inx		                inx
.acc9		e8		inx		                inx                     ; DROP flag ( n )
.acca		38		sec		                sec                     ; Who knows what's happened to C by now
.accb		80 03		bra $acd0	                bra _is_valid_line_done ; only one exit from this routine
.accd						_is_valid_line_too_small:
.accd		e8		inx		                inx
.acce		e8		inx		                inx                     ; drop through to _is_valid_line_zero
.accf						_is_valid_line_nope_zero:
.accf		18		clc		                clc                     ; drop through to _is_valid_line_done
.acd0						_is_valid_line_done:
.acd0		60		rts		                rts
.acd1						ed_last_line:
.acd1		64 25		stz $25		                stz tmp1
.acd3		64 26		stz $26		                stz tmp1+1
.acd5		ca		dex		                dex
.acd6		ca		dex		                dex                     ; ( ? )
.acd7		a9 35		lda #$35	                lda #<ed_head
.acd9		95 00		sta $00,x	                sta 0,x
.acdb		a9 00		lda #$00	                lda #>ed_head
.acdd		95 01		sta $01,x	                sta 1,x                 ; ( addr )
.acdf						_last_line_loop:
.acdf		20 1a 88	jsr $881a	                jsr xt_fetch            ; ( addr | 0 )
.ace2		b5 00		lda $00,x	                lda 0,x
.ace4		15 01		ora $01,x	                ora 1,x
.ace6		f0 08		beq $acf0	                beq _last_line_done
.ace8		e6 25		inc $25		                inc tmp1
.acea		d0 02		bne $acee	                bne +
.acec		e6 26		inc $26		                inc tmp1+1
.acee						+
.acee		80 ef		bra $acdf	                bra _last_line_loop
.acf0						_last_line_done:
.acf0		a5 25		lda $25		                lda tmp1
.acf2		95 00		sta $00,x	                sta 0,x
.acf4		a5 26		lda $26		                lda tmp1+1
.acf6		95 01		sta $01,x	                sta 1,x                 ; ( u )
.acf8		60		rts		                rts
.acf9						ed_no_line_zero:
.acf9		b5 02		lda $02,x	                lda 2,x
.acfb		15 03		ora $03,x	                ora 3,x
.acfd		d0 07		bne $ad06	                bne _no_line_zero_done
.acff		24 39		bit $39		                bit ed_flags
.ad01		10 03		bpl $ad06	                bpl _no_line_zero_done
.ad03		4c 81 ac	jmp $ac81	                jmp ed_error_2drop
.ad06						_no_line_zero_done:
.ad06		60		rts		                rts
.ad07						ed_num_to_addr:
.ad07		ca		dex		                dex
.ad08		ca		dex		                dex                     ; ( u ? )
.ad09		a9 35		lda #$35	                lda #<ed_head
.ad0b		95 00		sta $00,x	                sta 0,x
.ad0d		a9 00		lda #$00	                lda #>ed_head
.ad0f		95 01		sta $01,x	                sta 1,x                 ; ( u addr-h )
.ad11		b5 02		lda $02,x	                lda 2,x
.ad13		15 03		ora $03,x	                ora 3,x
.ad15		d0 05		bne $ad1c	                bne _num_to_addr_loop
.ad17		20 30 8c	jsr $8c30	                jsr xt_nip              ; ( addr-h )
.ad1a		80 21		bra $ad3d	                bra _num_to_addr_done
.ad1c						_num_to_addr_loop:
.ad1c		20 1a 88	jsr $881a	                jsr xt_fetch            ; @ ( u addr1 )
.ad1f		b5 00		lda $00,x	                lda 0,x
.ad21		15 01		ora $01,x	                ora 1,x
.ad23		d0 05		bne $ad2a	                bne +
.ad25		20 30 8c	jsr $8c30	                jsr xt_nip              ; NIP ( addr1 )
.ad28		80 13		bra $ad3d	                bra _num_to_addr_done
.ad2a						+
.ad2a		20 28 92	jsr $9228	                jsr xt_swap             ; SWAP ( addr1 u )
.ad2d		20 dd 8c	jsr $8cdd	                jsr xt_one_minus        ; 1- ( addr1 u-1 )
.ad30		b5 00		lda $00,x	                lda 0,x
.ad32		15 01		ora $01,x	                ora 1,x
.ad34		f0 05		beq $ad3b	                beq _num_to_addr_finished
.ad36		20 28 92	jsr $9228	                jsr xt_swap             ; SWAP ( u-1 addr1 )
.ad39		80 e1		bra $ad1c	                bra _num_to_addr_loop
.ad3b						_num_to_addr_finished:
.ad3b		e8		inx		                inx
.ad3c		e8		inx		                inx                     ; ( addr )
.ad3d						_num_to_addr_done:
.ad3d		60		rts		                rts
.ad3e						ed_para1_to_cur:
.ad3e		b5 02		lda $02,x	                lda 2,x
.ad40		85 37		sta $37		                sta ed_cur
.ad42		b5 03		lda $03,x	                lda 3,x
.ad44		85 38		sta $38		                sta ed_cur+1
.ad46		60		rts		                rts
.ad47						ed_print_addr:
.ad47		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.ad4a		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; ( addr+2 )
.ad4d		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( addr+2 addr+2 )
.ad50		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.ad53		20 e9 8c	jsr $8ce9	                jsr xt_one_plus         ; ( addr+2 addr+4 )
.ad56		20 1a 88	jsr $881a	                jsr xt_fetch            ; ( addr+2 u-s )
.ad59		20 28 92	jsr $9228	                jsr xt_swap             ; ( u-s addr+2 )
.ad5c		20 1a 88	jsr $881a	                jsr xt_fetch            ; ( u-s addr-s )
.ad5f		20 28 92	jsr $9228	                jsr xt_swap             ; ( addr-s u-s )
.ad62		20 af 94	jsr $94af	                jsr xt_type
.ad65		20 3a 84	jsr $843a	                jsr xt_cr
.ad68		60		rts		                rts
>ad69		61 66 69 64 70 6e 3d 77		ed_cmd_list:    .text "afidpn=wqQ", 0
>ad71		71 51 00
.ad74						ed_cmd_table:
>ad74		b9 a9 00 ab 33 ab 5c aa		                .word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>ad7c		5b ab 54 ab
>ad80		c4 aa ce ab bf ab ca ab		                .word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.ad88						ed6502_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/block.asm

.ad88						xt_blk:
.ad88		a9 04		lda #$04	                lda #blk_offset
.ad8a		4c 46 d6	jmp $d646	                jmp push_upvar_tos
.ad8d						z_blk:
.ad8d						xt_blkbuffer:
.ad8d		ca		dex		                dex
.ad8e		ca		dex		                dex
.ad8f		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.ad91		b1 08		lda ($08),y	                lda (up),y
.ad93		95 00		sta $00,x	                sta 0,x
.ad95		c8		iny		                iny             ; Move along to the next byte
.ad96		b1 08		lda ($08),y	                lda (up),y
.ad98		95 01		sta $01,x	                sta 1,x
.ad9a		60		rts		z_blkbuffer:    rts
.ad9b						xt_block:
.ad9b		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.ad9d		b1 08		lda ($08),y	                lda (up),y
.ad9f		d5 00		cmp $00,x	                cmp 0,x
.ada1		d0 0f		bne $adb2	                bne _not_in_buffer
.ada3		c8		iny		                iny
.ada4		b1 08		lda ($08),y	                lda (up),y
.ada6		d5 01		cmp $01,x	                cmp 1,x
.ada8		d0 08		bne $adb2	                bne _not_in_buffer
.adaa		a0 30		ldy #$30	                ldy #buffstatus_offset
.adac		b1 08		lda ($08),y	                lda (up),y
.adae		29 01		and #$01	                and #1          ; Check the in-use flag (bit 0)
.adb0		d0 30		bne $ade2	                bne _done       ; It's already in the buffer and in use.
.adb2						_not_in_buffer:
.adb2		a0 30		ldy #$30	                ldy #buffstatus_offset
.adb4		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.adb6		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.adb8		d0 0c		bne $adc6	                bne _buffer_available ; Unused or not dirty = available
.adba		20 8d ad	jsr $ad8d	                jsr xt_blkbuffer
.adbd		20 97 af	jsr $af97	                jsr xt_buffblocknum
.adc0		20 1a 88	jsr $881a	                jsr xt_fetch
.adc3		20 84 af	jsr $af84	                jsr xt_block_write
.adc6						_buffer_available:
.adc6		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.adc8		b5 00		lda $00,x	                lda 0,x
.adca		91 08		sta ($08),y	                sta (up),y
.adcc		c8		iny		                iny
.adcd		b5 01		lda $01,x	                lda 1,x
.adcf		91 08		sta ($08),y	                sta (up),y
.add1		20 8d ad	jsr $ad8d	                jsr xt_blkbuffer
.add4		20 28 92	jsr $9228	                jsr xt_swap
.add7		20 6c af	jsr $af6c	                jsr xt_block_read
.adda		a9 01		lda #$01	                lda #1
.addc		a0 30		ldy #$30	                ldy #buffstatus_offset
.adde		91 08		sta ($08),y	                sta (up),y
.ade0		ca		dex		                dex
.ade1		ca		dex		                dex
.ade2						_done:
.ade2		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.ade4		b1 08		lda ($08),y	                lda (up),y
.ade6		95 00		sta $00,x	                sta 0,x
.ade8		c8		iny		                iny
.ade9		b1 08		lda ($08),y	                lda (up),y
.adeb		95 01		sta $01,x	                sta 1,x
.aded		60		rts		z_block:        rts
.adee						xt_block_c65_init:
=0						io_blk_status = 0
=0						io_blk_action = 0
=0						io_blk_number = 0
=0						io_blk_buffer = 0
.adee		a9 ff		lda #$ff	                lda #$ff
.adf0		8d 11 f0	sta $f011	                sta io_blk_status
.adf3		a9 00		lda #$00	                lda #$0
.adf5		8d 10 f0	sta $f010	                sta io_blk_action
.adf8		ad 11 f0	lda $f011	                lda io_blk_status      ; $0 if OK, $ff otherwise
.adfb		49 ff		eor #$ff	                eor #$ff            ; invert to forth true/false
.adfd		ca		dex		                dex
.adfe		ca		dex		                dex
.adff		95 00		sta $00,x	                sta 0,x             ; true ($ff) if OK, false (0) otherwise
.ae01		95 01		sta $01,x	                sta 1,x
.ae03		ca		dex		                dex
.ae04		ca		dex		                dex
.ae05		a9 28		lda #$28	                lda #<c65_blk_read
.ae07		95 00		sta $00,x	                sta 0,x
.ae09		a9 ae		lda #$ae	                lda #>c65_blk_read
.ae0b		95 01		sta $01,x	                sta 1,x
.ae0d		20 7a af	jsr $af7a	                jsr xt_block_read_vector
.ae10		20 12 92	jsr $9212	                jsr xt_store
.ae13		ca		dex		                dex
.ae14		ca		dex		                dex
.ae15		a9 24		lda #$24	                lda #<c65_blk_write
.ae17		95 00		sta $00,x	                sta 0,x
.ae19		a9 ae		lda #$ae	                lda #>c65_blk_write
.ae1b		95 01		sta $01,x	                sta 1,x
.ae1d		20 92 af	jsr $af92	                jsr xt_block_write_vector
.ae20		20 12 92	jsr $9212	                jsr xt_store
.ae23						z_block_c65_init:
.ae23		60		rts		                rts
.ae24		a0 02		ldy #$02	c65_blk_write:  ldy #2
.ae26		80 02		bra $ae2a	                bra c65_blk_rw
.ae28		a0 01		ldy #$01	c65_blk_read:   ldy #1
.ae2a		b5 00		lda $00,x	c65_blk_rw:     lda 0,x                 ; ( addr blk# )
.ae2c		8d 12 f0	sta $f012	                sta io_blk_number
.ae2f		b5 01		lda $01,x	                lda 1,x
.ae31		8d 13 f0	sta $f013	                sta io_blk_number+1
.ae34		b5 02		lda $02,x	                lda 2,x
.ae36		8d 14 f0	sta $f014	                sta io_blk_buffer
.ae39		b5 03		lda $03,x	                lda 3,x
.ae3b		8d 15 f0	sta $f015	                sta io_blk_buffer+1
.ae3e		8c 10 f0	sty $f010	                sty io_blk_action       ; trigger the r/w
.ae41		e8		inx		                inx                     ; clean up stack
.ae42		e8		inx		                inx
.ae43		e8		inx		                inx
.ae44		e8		inx		                inx
.ae45		60		rts		                rts
.ae46						xt_block_ramdrive_init:
.ae46		20 8a d7	jsr $d78a	                jsr underflow_1
.ae49		20 76 a1	jsr $a176	                jsr sliteral_runtime
>ae4c		54 ae 18 01			                .word ramdrive_code, ramdrive_code_end-ramdrive_code
.ae50		20 b2 88	jsr $88b2	                jsr xt_evaluate
.ae53						z_block_ramdrive_init:
.ae53		60		rts		                rts
.ae54						ramdrive_code:
>ae54		62 61 73 65 20 40 20 73		        .text "base @ swap decimal"
>ae5c		77 61 70 20 64 65 63 69 6d 61 6c
>ae67		20 31 30 32 34 20 2a		        .text " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
>ae6e		20 64 75 70			        .text " dup"    ; ( Save a copy for formatting it at the end )
>ae72		20 62 75 66 66 65 72 3a		        .text " buffer: ramdrive" ; ( Create ramdrive )
>ae7a		20 72 61 6d 64 72 69 76 65
>ae83		20 3a 20 62 6c 6f 63 6b		        .text " : block-read-ramdrive"  ; ( addr u -- )
>ae8b		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65
>ae99		20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + swap 1024 move ;"
>aea1		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>aeb1		73 77 61 70 20 31 30 32 34 20 6d 6f 76 65 20 3b
>aec1		20 3a 20 62 6c 6f 63 6b		        .text " : block-write-ramdrive" ; ( addr u -- )
>aec9		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65
>aed8		20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + 1024 move ;"
>aee0		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>aef0		31 30 32 34 20 6d 6f 76 65 20 3b
>aefb		20 27 20 62 6c 6f 63 6b		        .text " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
>af03		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65 20 62
>af13		6c 6f 63 6b 2d 72 65 61 64 2d 76 65 63 74 6f 72
>af23		20 21
>af25		20 27 20 62 6c 6f 63 6b		        .text " ' block-write-ramdrive block-write-vector !"
>af2d		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65 20
>af3d		62 6c 6f 63 6b 2d 77 72 69 74 65 2d 76 65 63 74
>af4d		6f 72 20 21
>af51		20 72 61 6d 64 72 69 76		        .text " ramdrive swap blank base !"
>af59		65 20 73 77 61 70 20 62 6c 61 6e 6b 20 62 61 73
>af69		65 20 21
.af6c						ramdrive_code_end:
.af6c						xt_block_read:
.af6c		a0 32		ldy #$32	                ldy #blockread_offset
.af6e		b1 08		lda ($08),y	                lda (up),y
.af70		85 25		sta $25		                sta tmp1
.af72		c8		iny		                iny
.af73		b1 08		lda ($08),y	                lda (up),y
.af75		85 26		sta $26		                sta tmp1+1
.af77		6c 25 00	jmp ($0025)	                jmp (tmp1)
.af7a						z_block_read:
.af7a						xt_block_read_vector:
.af7a		a9 32		lda #$32	                lda #blockread_offset
.af7c		4c 46 d6	jmp $d646	                jmp push_upvar_tos
.af7f						z_block_read_vector:
.af7f						xt_block_word_error:
.af7f		a9 0c		lda #$0c	                lda #err_blockwords
.af81		4c a0 d7	jmp $d7a0	                jmp error       ; no RTS needed
.af84						xt_block_write:
.af84		a0 34		ldy #$34	                ldy #blockwrite_offset
.af86		b1 08		lda ($08),y	                lda (up),y
.af88		85 25		sta $25		                sta tmp1
.af8a		c8		iny		                iny
.af8b		b1 08		lda ($08),y	                lda (up),y
.af8d		85 26		sta $26		                sta tmp1+1
.af8f		6c 25 00	jmp ($0025)	                jmp (tmp1)
.af92						z_block_write:
.af92						xt_block_write_vector:
.af92		a9 34		lda #$34	                lda #blockwrite_offset
.af94		4c 46 d6	jmp $d646	                jmp push_upvar_tos
.af97						z_block_write_vector:
.af97						xt_buffblocknum:
.af97		a9 2e		lda #$2e	                lda #buffblocknum_offset
.af99		4c 46 d6	jmp $d646	                jmp push_upvar_tos
.af9c						z_buffblocknum:
.af9c						xt_buffer:
.af9c		a0 30		ldy #$30	                ldy #buffstatus_offset
.af9e		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.afa0		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.afa2		d0 0c		bne $afb0	                bne _buffer_available ; Unused or not dirty = available
.afa4		20 8d ad	jsr $ad8d	                jsr xt_blkbuffer
.afa7		20 97 af	jsr $af97	                jsr xt_buffblocknum
.afaa		20 1a 88	jsr $881a	                jsr xt_fetch
.afad		20 84 af	jsr $af84	                jsr xt_block_write
.afb0						_buffer_available:
.afb0		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.afb2		b5 00		lda $00,x	                lda 0,x
.afb4		91 08		sta ($08),y	                sta (up),y
.afb6		c8		iny		                iny
.afb7		b5 01		lda $01,x	                lda 1,x
.afb9		91 08		sta ($08),y	                sta (up),y
.afbb		a9 01		lda #$01	                lda #1
.afbd		a0 30		ldy #$30	                ldy #buffstatus_offset
.afbf		91 08		sta ($08),y	                sta (up),y
.afc1		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.afc3		b1 08		lda ($08),y	                lda (up),y
.afc5		95 00		sta $00,x	                sta 0,x
.afc7		c8		iny		                iny
.afc8		b1 08		lda ($08),y	                lda (up),y
.afca		95 01		sta $01,x	                sta 1,x
.afcc		60		rts		z_buffer:       rts
.afcd						xt_buffstatus:
.afcd		a9 30		lda #$30	                lda #buffstatus_offset
.afcf		4c 46 d6	jmp $d646	                jmp push_upvar_tos
.afd2						z_buffstatus:
.afd2						xt_empty_buffers:
.afd2		a0 30		ldy #$30	                ldy #buffstatus_offset
.afd4		a9 00		lda #$00	                lda #0
.afd6		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.afd8						z_empty_buffers:
.afd8		60		rts		                rts
.afd9						xt_flush:
.afd9		20 34 b0	jsr $b034	                jsr xt_save_buffers
.afdc		a0 30		ldy #$30	                ldy #buffstatus_offset
.afde		a9 00		lda #$00	                lda #0
.afe0		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.afe2						z_flush:
.afe2		60		rts		                rts
.afe3						xt_list:
.afe3		20 8a d7	jsr $d78a	                jsr underflow_1
.afe6		20 4f b0	jsr $b04f	                jsr xt_scr
.afe9		20 12 92	jsr $9212	                jsr xt_store
.afec		20 ee b0	jsr $b0ee	                jsr xt_editor_l
.afef		60		rts		z_list:         rts
.aff0						xt_load:
.aff0		20 8a d7	jsr $d78a	                jsr underflow_1
.aff3		a0 05		ldy #$05	                ldy #blk_offset+1
.aff5		b1 08		lda ($08),y	                lda (up),y
.aff7		48		pha		                pha
.aff8		88		dey		                dey
.aff9		b1 08		lda ($08),y	                lda (up),y
.affb		48		pha		                pha
.affc		b5 00		lda $00,x	                lda 0,x
.affe		91 08		sta ($08),y	                sta (up),y
.b000		c8		iny		                iny
.b001		b5 01		lda $01,x	                lda 1,x
.b003		91 08		sta ($08),y	                sta (up),y
.b005		20 9b ad	jsr $ad9b	                jsr xt_block
.b008		ca		dex		                dex
.b009		ca		dex		                dex
.b00a		a9 04		lda #$04	                lda #4
.b00c		95 01		sta $01,x	                sta 1,x
.b00e		74 00		stz $00,x	                stz 0,x
.b010		20 ac 88	jsr $88ac	                jsr load_evaluate
.b013		a0 04		ldy #$04	                ldy #blk_offset
.b015		68		pla		                pla
.b016		91 08		sta ($08),y	                sta (up),y
.b018		c8		iny		                iny
.b019		68		pla		                pla
.b01a		91 08		sta ($08),y	                sta (up),y
.b01c		88		dey		                dey
.b01d		11 08		ora ($08),y	                ora (up),y
.b01f		f0 12		beq $b033	                beq _done
.b021		ca		dex		                dex
.b022		ca		dex		                dex
.b023		a0 04		ldy #$04	                ldy #blk_offset
.b025		b1 08		lda ($08),y	                lda (up),y
.b027		95 00		sta $00,x	                sta 0,x
.b029		c8		iny		                iny
.b02a		b1 08		lda ($08),y	                lda (up),y
.b02c		95 01		sta $01,x	                sta 1,x
.b02e		20 9b ad	jsr $ad9b	                jsr xt_block
.b031		e8		inx		                inx
.b032		e8		inx		                inx
.b033						_done:
.b033		60		rts		z_load:         rts
.b034						xt_save_buffers:
.b034		a0 30		ldy #$30	                ldy #buffstatus_offset
.b036		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.b038		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.b03a		d0 12		bne $b04e	                bne _done       ; Either not used or not dirty = done!
.b03c		20 8d ad	jsr $ad8d	                jsr xt_blkbuffer
.b03f		20 97 af	jsr $af97	                jsr xt_buffblocknum
.b042		20 1a 88	jsr $881a	                jsr xt_fetch
.b045		20 84 af	jsr $af84	                jsr xt_block_write
.b048		a9 01		lda #$01	                lda #1
.b04a		a0 30		ldy #$30	                ldy #buffstatus_offset
.b04c		91 08		sta ($08),y	                sta (up),y
.b04e						_done:
.b04e		60		rts		z_save_buffers: rts
.b04f						xt_scr:
.b04f		a9 06		lda #$06	                lda #scr_offset
.b051		4c 46 d6	jmp $d646	                jmp push_upvar_tos
.b054						z_scr:
.b054						xt_thru:
.b054		20 8f d7	jsr $d78f	                jsr underflow_2
.b057		b5 01		lda $01,x	                lda 1,x
.b059		48		pha		                pha
.b05a		b5 00		lda $00,x	                lda 0,x
.b05c		48		pha		                pha
.b05d		e8		inx		                inx
.b05e		e8		inx		                inx
.b05f						_thru_loop:
.b05f		b5 01		lda $01,x	                lda 1,x
.b061		48		pha		                pha
.b062		b5 00		lda $00,x	                lda 0,x
.b064		48		pha		                pha
.b065		20 f0 af	jsr $aff0	                jsr xt_load
.b068		68		pla		                pla
.b069		85 25		sta $25		                sta tmp1
.b06b		68		pla		                pla
.b06c		85 26		sta $26		                sta tmp1+1
.b06e		68		pla		                pla
.b06f		85 27		sta $27		                sta tmp2
.b071		68		pla		                pla
.b072		85 28		sta $28		                sta tmp2+1
.b074		c5 26		cmp $26		                cmp tmp1+1
.b076		d0 08		bne $b080	                bne _next_screen
.b078		a5 27		lda $27		                lda tmp2        ; Compare the LSB
.b07a		c5 25		cmp $25		                cmp tmp1
.b07c		d0 02		bne $b080	                bne _next_screen
.b07e		80 18		bra $b098	                bra _done       ; We just did the last screen.
.b080						_next_screen:
.b080		a5 28		lda $28		                lda tmp2+1
.b082		48		pha		                pha
.b083		a5 27		lda $27		                lda tmp2
.b085		48		pha		                pha
.b086		e6 25		inc $25		                inc tmp1
.b088		d0 02		bne $b08c	                bne +
.b08a		e6 26		inc $26		                inc tmp1+1
.b08c						+
.b08c		ca		dex		                dex
.b08d		ca		dex		                dex
.b08e		a5 25		lda $25		                lda tmp1
.b090		95 00		sta $00,x	                sta 0,x
.b092		a5 26		lda $26		                lda tmp1+1
.b094		95 01		sta $01,x	                sta 1,x
.b096		80 c7		bra $b05f	                bra _thru_loop
.b098						_done:
.b098		60		rts		z_thru:         rts
.b099						xt_update:
.b099		a0 30		ldy #$30	                ldy #buffstatus_offset
.b09b		b1 08		lda ($08),y	                lda (up),y
.b09d		09 02		ora #$02	                ora #2          ; Turn on dirty flag (bit 2)
.b09f		91 08		sta ($08),y	                sta (up),y
.b0a1		60		rts		z_update:       rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/editor.asm

.b0a2						xt_editor_screen_helper:
.b0a2		20 a0 86	jsr $86a0	                jsr xt_dup
.b0a5		20 4f b0	jsr $b04f	                jsr xt_scr
.b0a8		20 12 92	jsr $9212	                jsr xt_store
.b0ab		4c 9c af	jmp $af9c	                jmp xt_buffer
.b0ae						xt_editor_enter_screen:
.b0ae		20 a2 b0	jsr $b0a2	                jsr xt_editor_screen_helper
.b0b1		20 9a 86	jsr $869a	                jsr xt_drop
.b0b4		64 35		stz $35		                stz ed_head
.b0b6						_prompt_loop:
.b0b6		ca		dex		                dex
.b0b7		ca		dex		                dex
.b0b8		a5 35		lda $35		                lda ed_head
.b0ba		95 00		sta $00,x	                sta 0,x
.b0bc		74 01		stz $01,x	                stz 1,x
.b0be		20 81 b1	jsr $b181	                jsr xt_editor_o
.b0c1		e6 35		inc $35		                inc ed_head
.b0c3		a9 10		lda #$10	                lda #16
.b0c5		c5 35		cmp $35		                cmp ed_head
.b0c7		d0 ed		bne $b0b6	                bne _prompt_loop
.b0c9						z_editor_enter_screen:
.b0c9		60		rts		                rts
.b0ca						xt_editor_erase_screen:
.b0ca		20 a2 b0	jsr $b0a2	                jsr xt_editor_screen_helper
.b0cd		ca		dex		                dex
.b0ce		ca		dex		                dex
.b0cf		74 00		stz $00,x	                stz 0,x
.b0d1		a9 04		lda #$04	                lda #4          ; 4 in MSB makes 1024 ($400).
.b0d3		95 01		sta $01,x	                sta 1,x
.b0d5		20 b2 87	jsr $87b2	                jsr xt_blank
.b0d8		20 99 b0	jsr $b099	                jsr xt_update
.b0db						z_editor_erase_screen:
.b0db		60		rts		                rts
.b0dc						xt_editor_el:
.b0dc		20 68 b1	jsr $b168	                jsr xt_editor_line
.b0df		ca		dex		                dex
.b0e0		ca		dex		                dex
.b0e1		a9 40		lda #$40	                lda #64
.b0e3		95 00		sta $00,x	                sta 0,x
.b0e5		74 01		stz $01,x	                stz 1,x
.b0e7		20 b2 87	jsr $87b2	                jsr xt_blank
.b0ea		20 99 b0	jsr $b099	                jsr xt_update
.b0ed		60		rts		z_editor_el:    rts
.b0ee						xt_editor_l:
.b0ee		ca		dex		                dex             ; Put SCR on the stack.
.b0ef		ca		dex		                dex
.b0f0		a0 06		ldy #$06	                ldy #scr_offset
.b0f2		b1 08		lda ($08),y	                lda (up),y
.b0f4		95 00		sta $00,x	                sta 0,x
.b0f6		c8		iny		                iny
.b0f7		b1 08		lda ($08),y	                lda (up),y
.b0f9		95 01		sta $01,x	                sta 1,x
.b0fb		20 9b ad	jsr $ad9b	                jsr xt_block    ; Get the current screen.
.b0fe		20 3a 84	jsr $843a	                jsr xt_cr
.b101		80 08		bra $b10b	                bra _after_screen_msg
.b103						_screen_msg:
>b103		53 63 72 65 65 6e 20 23		                .text "Screen #"
.b10b						_after_screen_msg:
.b10b		20 76 a1	jsr $a176	                jsr sliteral_runtime
>b10e		03 b1 08 00			                .word _screen_msg, _after_screen_msg-_screen_msg
.b112		20 af 94	jsr $94af	                jsr xt_type
.b115		20 4f b0	jsr $b04f	                jsr xt_scr
.b118		20 1a 88	jsr $881a	                jsr xt_fetch
.b11b		ca		dex		                dex
.b11c		ca		dex		                dex
.b11d		a9 04		lda #$04	                lda #4          ; four spaces
.b11f		95 00		sta $00,x	                sta 0,x
.b121		74 01		stz $01,x	                stz 1,x
.b123		20 e6 94	jsr $94e6	                jsr xt_u_dot_r
.b126		64 29		stz $29		                stz tmp3
.b128						_line_loop:
.b128		20 3a 84	jsr $843a	                jsr xt_cr
.b12b		ca		dex		                dex
.b12c		ca		dex		                dex
.b12d		ca		dex		                dex
.b12e		ca		dex		                dex
.b12f		74 03		stz $03,x	                stz 3,x
.b131		a5 29		lda $29		                lda tmp3
.b133		95 02		sta $02,x	                sta 2,x
.b135		74 01		stz $01,x	                stz 1,x
.b137		a9 02		lda #$02	                lda #2
.b139		95 00		sta $00,x	                sta 0,x
.b13b		20 e6 94	jsr $94e6	                jsr xt_u_dot_r
.b13e		20 c5 91	jsr $91c5	                jsr xt_space
.b141		20 a0 86	jsr $86a0	                jsr xt_dup
.b144		ca		dex		                dex
.b145		ca		dex		                dex
.b146		a9 40		lda #$40	                lda #64
.b148		95 00		sta $00,x	                sta 0,x
.b14a		74 01		stz $01,x	                stz 1,x
.b14c		20 af 94	jsr $94af	                jsr xt_type
.b14f		18		clc		                clc
.b150		a9 40		lda #$40	                lda #64
.b152		75 00		adc $00,x	                adc 0,x
.b154		95 00		sta $00,x	                sta 0,x
.b156		90 02		bcc $b15a	                bcc +
.b158		f6 01		inc $01,x	                inc 1,x
.b15a						+
.b15a		e6 29		inc $29		                inc tmp3
.b15c		a5 29		lda $29		                lda tmp3
.b15e		c9 10		cmp #$10	                cmp #16
.b160		d0 c6		bne $b128	                bne _line_loop
.b162		20 3a 84	jsr $843a	                jsr xt_cr
.b165		e8		inx		                inx
.b166		e8		inx		                inx
.b167		60		rts		z_editor_l:            rts
.b168						xt_editor_line:
.b168		20 8a d7	jsr $d78a	                jsr underflow_1
.b16b		a0 06		ldy #$06	                ldy #6          ; *64 is same as left shift 6 times.
.b16d						_shift_tos_left:
.b16d		16 00		asl $00,x	                asl 0,x         ; Shift TOS to the left
.b16f		36 01		rol $01,x	                rol 1,x         ; ROL brings MSb from lower byte.
.b171		88		dey		                dey
.b172		d0 f9		bne $b16d	                bne _shift_tos_left
.b174		20 4f b0	jsr $b04f	                jsr xt_scr
.b177		20 1a 88	jsr $881a	                jsr xt_fetch
.b17a		20 9b ad	jsr $ad9b	                jsr xt_block
.b17d		20 53 8e	jsr $8e53	                jsr xt_plus
.b180		60		rts		z_editor_line:  rts
.b181						xt_editor_o:
.b181		20 3a 84	jsr $843a	                jsr xt_cr
.b184		20 a0 86	jsr $86a0	                jsr xt_dup
.b187		20 bc 9d	jsr $9dbc	                jsr xt_two
.b18a		20 e6 94	jsr $94e6	                jsr xt_u_dot_r
.b18d		20 c5 91	jsr $91c5	                jsr xt_space
.b190		a9 2a		lda #$2a	                lda #'*'
.b192		20 c5 86	jsr $86c5	                jsr emit_a
.b195		20 c5 91	jsr $91c5	                jsr xt_space
.b198		20 68 b1	jsr $b168	                jsr xt_editor_line
.b19b		20 a0 86	jsr $86a0	                jsr xt_dup      ; Save a copy of the line address for later.
.b19e		ca		dex		                dex
.b19f		ca		dex		                dex
.b1a0		a9 40		lda #$40	                lda #64         ; chars/line
.b1a2		95 00		sta $00,x	                sta 0,x
.b1a4		74 01		stz $01,x	                stz 1,x
.b1a6		20 e4 80	jsr $80e4	                jsr xt_accept
.b1a9		20 a0 86	jsr $86a0	                jsr xt_dup
.b1ac		20 75 9c	jsr $9c75	                jsr xt_not_rote ; -rot
.b1af		20 53 8e	jsr $8e53	                jsr xt_plus
.b1b2		ca		dex		                dex
.b1b3		ca		dex		                dex
.b1b4		a9 40		lda #$40	                lda #64         ; chars/line
.b1b6		95 00		sta $00,x	                sta 0,x
.b1b8		74 01		stz $01,x	                stz 1,x
.b1ba		20 8b 8f	jsr $8f8b	                jsr xt_rot
.b1bd		20 e4 8b	jsr $8be4	                jsr xt_minus
.b1c0		20 b2 87	jsr $87b2	                jsr xt_blank
.b1c3		20 99 b0	jsr $b099	                jsr xt_update
.b1c6		60		rts		z_editor_o:     rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/wordlist.asm

.b1c7						xt_also:
.b1c7		20 f2 b1	jsr $b1f2	                jsr xt_get_order
.b1ca		20 05 8d	jsr $8d05	                jsr xt_over
.b1cd		20 28 92	jsr $9228	                jsr xt_swap
.b1d0		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.b1d3		20 fb b2	jsr $b2fb	                jsr xt_set_order
.b1d6		60		rts		z_also:         rts
.b1d7						xt_definitions:
.b1d7		a0 23		ldy #$23	                ldy #search_order_offset    ; Transfer byte variable
.b1d9		b1 08		lda ($08),y	                lda (up),y                  ; SEARCH_ORDER[0] to
.b1db		a0 08		ldy #$08	                ldy #current_offset         ; byte variable CURRENT.
.b1dd		91 08		sta ($08),y	                sta (up),y
.b1df		60		rts		z_definitions:  rts
.b1e0						xt_forth:
.b1e0		a0 23		ldy #$23	                ldy #search_order_offset
.b1e2		a9 00		lda #$00	                lda #0          ; The WID for Forth is 0.
.b1e4		91 08		sta ($08),y	                sta (up),y
.b1e6						z_forth:
.b1e6		60		rts		                rts
.b1e7						xt_get_current:
.b1e7		ca		dex		                dex
.b1e8		ca		dex		                dex
.b1e9		a0 08		ldy #$08	                ldy #current_offset
.b1eb		b1 08		lda ($08),y	                lda (up),y
.b1ed		95 00		sta $00,x	                sta 0,x         ; CURRENT is a byte variable
.b1ef		74 01		stz $01,x	                stz 1,x         ; so the MSB is zero.
.b1f1		60		rts		z_get_current:  rts
.b1f2						xt_get_order:
.b1f2		a0 22		ldy #$22	                ldy #num_order_offset
.b1f4		b1 08		lda ($08),y	                lda (up),y
.b1f6		85 25		sta $25		                sta tmp1
.b1f8		f0 16		beq $b210	                beq _done       ; If zero, there are no wordlists.
.b1fa						_loop:
.b1fa		c6 25		dec $25		                dec tmp1        ; Count down by bytes.
.b1fc		a9 23		lda #$23	                lda #search_order_offset
.b1fe		18		clc		                clc
.b1ff		65 25		adc $25		                adc tmp1
.b201		a8		tay		                tay
.b202		ca		dex		                dex
.b203		ca		dex		                dex
.b204		b1 08		lda ($08),y	                lda (up),y
.b206		95 00		sta $00,x	                sta 0,x         ; Search order array is bytes, so
.b208		74 01		stz $01,x	                stz 1,x         ; put a zero in the high byte.
.b20a		a9 00		lda #$00	                lda #0
.b20c		c5 25		cmp $25		                cmp tmp1
.b20e		d0 ea		bne $b1fa	                bne _loop
.b210						_done:
.b210		ca		dex		                dex
.b211		ca		dex		                dex
.b212		a0 22		ldy #$22	                ldy #num_order_offset
.b214		b1 08		lda ($08),y	                lda (up),y
.b216		95 00		sta $00,x	                sta 0,x
.b218		74 01		stz $01,x	                stz 1,x         ; We only support 8 wordlists.
.b21a		60		rts		z_get_order:    rts
.b21b						xt_only:
.b21b		20 7a 93	jsr $937a	                jsr xt_true
.b21e		20 fb b2	jsr $b2fb	                jsr xt_set_order
.b221		60		rts		z_only:         rts
.b222						xt_order:
.b222		20 3a 84	jsr $843a	                jsr xt_cr
.b225		20 f2 b1	jsr $b1f2	                jsr xt_get_order        ; ( wid_n ... wid_1 n )
.b228		b5 00		lda $00,x	                lda 0,x                 ; assumes no more than 255 wordlists
.b22a		f0 1e		beq $b24a	                beq _drop_done
.b22c		a8		tay		                tay
.b22d						_loop:
.b22d		e8		inx		                inx
.b22e		e8		inx		                inx                     ; DROP, now ( wid_n ... wid_1 )
.b22f		b5 00		lda $00,x	                lda 0,x
.b231		5a		phy		                phy
.b232		20 4d b2	jsr $b24d	                jsr order_print_wid_string   ; internal helper function
.b235		7a		ply		                ply
.b236		88		dey		                dey
.b237		d0 f4		bne $b22d	                bne _loop
.b239		20 c5 91	jsr $91c5	                jsr xt_space
.b23c		20 c5 91	jsr $91c5	                jsr xt_space
.b23f		20 e7 b1	jsr $b1e7	                jsr xt_get_current      ; ( wid )
.b242		b5 00		lda $00,x	                lda 0,x
.b244		20 4d b2	jsr $b24d	                jsr order_print_wid_string
.b247		20 3a 84	jsr $843a	                jsr xt_cr
.b24a						_drop_done:
.b24a		e8		inx		                inx
.b24b		e8		inx		                inx
.b24c						z_order:
.b24c		60		rts		                rts
.b24d						order_print_wid_string:
.b24d		c9 04		cmp #$04	                cmp #4
.b24f		90 09		bcc $b25a	                bcc _output_string      ; less than 4, print a real string
.b251		ca		dex		                dex
.b252		ca		dex		                dex
.b253		95 00		sta $00,x	                sta 0,x
.b255		74 01		stz $01,x	                stz 1,x
.b257		4c da 94	jmp $94da	                jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
.b25a						_output_string:
.b25a		a8		tay		                tay
.b25b		b9 61 b2	lda $b261,y	                lda _wid_data,y
.b25e		4c c6 d7	jmp $d7c6	                jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
.b261						_wid_data:
>b261		04				        .byte str_wid_forth            ; WID 0: "Forth"
>b262		05				        .byte str_wid_editor           ; WID 1: "Editor"
>b263		06				        .byte str_wid_assembler        ; WID 2: "Assembler"
>b264		07				        .byte str_wid_root             ; WID 3: "Root"
.b265						xt_previous:
.b265		20 f2 b1	jsr $b1f2	                jsr xt_get_order
.b268		20 30 8c	jsr $8c30	                jsr xt_nip
.b26b		20 dd 8c	jsr $8cdd	                jsr xt_one_minus
.b26e		20 fb b2	jsr $b2fb	                jsr xt_set_order
.b271		60		rts		z_previous:     rts
.b272						xt_root_wordlist:
.b272		ca		dex		                dex             ; The WID for the Root wordlist is 3.
.b273		ca		dex		                dex
.b274		a9 03		lda #$03	                lda #3
.b276		95 00		sta $00,x	                sta 0,x
.b278		74 01		stz $01,x	                stz 1,x
.b27a						z_root_wordlist:
.b27a		60		rts		                rts
.b27b						xt_search_wordlist:
.b27b		20 94 d7	jsr $d794	                jsr underflow_3
.b27e		a5 08		lda $08		                lda up
.b280		18		clc		                clc
.b281		69 0a		adc #$0a	                adc #wordlists_offset
.b283		85 27		sta $27		                sta tmp2
.b285		a5 09		lda $09		                lda up+1
.b287		69 00		adc #$00	                adc #0          ; Adding carry
.b289		85 28		sta $28		                sta tmp2+1
.b28b		b5 00		lda $00,x	                lda 0,x
.b28d		0a		asl a		                asl             ; Convert wid to offset in cells (x2)
.b28e		65 27		adc $27		                adc tmp2
.b290		85 27		sta $27		                sta tmp2
.b292		90 02		bcc $b296	                bcc +
.b294		e6 28		inc $28		                inc tmp2+1      ; Propagate carry if needed.
.b296						+
.b296		e8		inx		                inx
.b297		e8		inx		                inx
.b298		b5 00		lda $00,x	                lda 0,x
.b29a		15 01		ora $01,x	                ora 1,x
.b29c		f0 4e		beq $b2ec	                beq _done
.b29e		a5 27		lda $27		                lda tmp2
.b2a0		05 28		ora $28		                ora tmp2+1
.b2a2		f0 48		beq $b2ec	                beq _done
.b2a4		b2 27		lda ($27)	                lda (tmp2)              ; nt of first word in Dictionary
.b2a6		85 25		sta $25		                sta tmp1
.b2a8		e6 27		inc $27		                inc tmp2                ; Move to the upper byte
.b2aa		d0 02		bne $b2ae	                bne +
.b2ac		e6 28		inc $28		                inc tmp2+1
.b2ae						+
.b2ae		b2 27		lda ($27)	                lda (tmp2)
.b2b0		85 26		sta $26		                sta tmp1+1
.b2b2		20 6c d6	jsr $d66c	                jsr find_header_name
.b2b5		f0 31		beq $b2e8	                beq _fail_done
.b2b7		e8		inx		                inx
.b2b8		e8		inx		                inx
.b2b9		a5 25		lda $25		                lda tmp1
.b2bb		95 00		sta $00,x	                sta 0,x
.b2bd		a5 26		lda $26		                lda tmp1+1
.b2bf		95 01		sta $01,x	                sta 1,x
.b2c1		20 a0 86	jsr $86a0	                jsr xt_dup              ; ( nt nt )
.b2c4		20 2e 9c	jsr $9c2e	                jsr xt_name_to_int      ; ( nt xt )
.b2c7		20 28 92	jsr $9228	                jsr xt_swap             ; ( xt nt )
.b2ca		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.b2cc		f6 00		inc $00,x	                inc 0,x
.b2ce		d0 02		bne $b2d2	                bne +
.b2d0		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.b2d2						+
.b2d2		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.b2d4		29 04		and #$04	                and #IM
.b2d6		d0 08		bne $b2e0	                bne _immediate          ; bit set, we're immediate
.b2d8		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.b2da		95 00		sta $00,x	                sta 0,x
.b2dc		95 01		sta $01,x	                sta 1,x
.b2de		80 0e		bra $b2ee	                bra _done_nodrop
.b2e0						_immediate:
.b2e0		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.b2e2		95 00		sta $00,x	                sta 0,x
.b2e4		74 01		stz $01,x	                stz 1,x
.b2e6		80 06		bra $b2ee	                bra _done_nodrop
.b2e8						_fail_done:
.b2e8		74 02		stz $02,x	                stz 2,x         ; failure flag
.b2ea		74 03		stz $03,x	                stz 3,x
.b2ec						_done:
.b2ec		e8		inx		                inx
.b2ed		e8		inx		                inx
.b2ee						_done_nodrop:
.b2ee						z_search_wordlist:
.b2ee		60		rts		                rts
.b2ef						xt_set_current:
.b2ef		20 8a d7	jsr $d78a	                jsr underflow_1
.b2f2		a0 08		ldy #$08	                ldy #current_offset
.b2f4		b5 00		lda $00,x	                lda 0,x         ; CURRENT is byte variable
.b2f6		91 08		sta ($08),y	                sta (up),y      ; so only the LSB is used.
.b2f8		e8		inx		                inx
.b2f9		e8		inx		                inx
.b2fa		60		rts		z_set_current:  rts
.b2fb						xt_set_order:
.b2fb		a9 ff		lda #$ff	                lda #$FF
.b2fd		d5 01		cmp $01,x	                cmp 1,x
.b2ff		d0 12		bne $b313	                bne _start
.b301		d5 00		cmp $00,x	                cmp 0,x
.b303		d0 0e		bne $b313	                bne _start
.b305		ca		dex		                dex             ; Make room for the count.
.b306		ca		dex		                dex
.b307		74 03		stz $03,x	                stz 3,x         ; ROOT-WORDLIST is 3
.b309		a9 03		lda #$03	                lda #3
.b30b		95 02		sta $02,x	                sta 2,x
.b30d		74 01		stz $01,x	                stz 1,x         ; Count is 1.
.b30f		a9 01		lda #$01	                lda #1
.b311		95 00		sta $00,x	                sta 0,x
.b313						_start:
.b313		a0 22		ldy #$22	                ldy #num_order_offset
.b315		b5 00		lda $00,x	                lda 0,x
.b317		91 08		sta ($08),y	                sta (up),y      ; #ORDER is a byte variable.
.b319		85 25		sta $25		                sta tmp1        ; Save a copy for zero check and looping.
.b31b		e8		inx		                inx             ; Drop the count off the data stack.
.b31c		e8		inx		                inx
.b31d		a5 25		lda $25		                lda tmp1
.b31f		f0 0d		beq $b32e	                beq _done       ; If zero, there are no wordlists.
.b321		a0 23		ldy #$23	                ldy #search_order_offset
.b323						_loop:
.b323		b5 00		lda $00,x	                lda 0,x         ; The search order is a byte array
.b325		91 08		sta ($08),y	                sta (up),y      ; so only save the LSB
.b327		c8		iny		                iny
.b328		e8		inx		                inx
.b329		e8		inx		                inx
.b32a		c6 25		dec $25		                dec tmp1
.b32c		d0 f5		bne $b323	                bne _loop
.b32e						_done:
.b32e		60		rts		z_set_order:    rts
.b32f						xt_to_order:
.b32f		20 66 93	jsr $9366	                jsr xt_to_r
.b332		20 f2 b1	jsr $b1f2	                jsr xt_get_order
.b335		20 ee 8e	jsr $8eee	                jsr xt_r_from
.b338		20 28 92	jsr $9228	                jsr xt_swap
.b33b		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.b33e		20 fb b2	jsr $b2fb	                jsr xt_set_order
.b341		60		rts		z_to_order:     rts
.b342						xt_wordlist:
.b342		a0 09		ldy #$09	                ldy #num_wordlists_offset
.b344		b1 08		lda ($08),y	                lda (up),y      ; This is a byte variable, so only
.b346		c9 0c		cmp #$0c	                cmp #max_wordlists
.b348		d0 05		bne $b34f	                bne _ok
.b34a		a9 0b		lda #$0b	                lda #err_wordlist
.b34c		4c a0 d7	jmp $d7a0	                jmp error
.b34f						_ok:
.b34f		1a		inc a		                ina             ; Increment the wordlist#
.b350		91 08		sta ($08),y	                sta (up),y      ; Save it into byte variable #wordlists
.b352		ca		dex		                dex             ; and put it on the stack.
.b353		ca		dex		                dex
.b354		95 00		sta $00,x	                sta 0,x
.b356		74 01		stz $01,x	                stz 1,x         ; 12 is the max, so upper byte is always zero.
.b358		60		rts		z_wordlist:     rts

;******  Return to file: platform/../words/all.asm


;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../definitions.asm

=120						dsp0      = zpage_end-7    ; initial Data Stack Pointer
.b359						cold_zp_table:
>b359	0000	00 08				cp:         .word cp0+256+1024      ; Compiler Pointer
>b35b	0002	3c bb				dp:         .word dictionary_start  ; Dictionary Pointer
>b35d	0004	00 00				ip:         .word 0                 ; Instruction Pointer (current xt)
>b35f	0006	00 00				workword:   .word 0                 ; nt (not xt!) of word being compiled, except in
>b361	0008	00 03				up:         .word cp0               ; Forth user vars at start of available RAM
>b363	000a	00 00				insrc:      .word 0                 ; input source for SOURCE-ID (0 for keyboard)
>b365	000c	00 02				cib:        .word buffer0           ; address of current input buffer
>b367	000e	00 00				ciblen:     .word 0                 ; length of current input buffer
>b369	0010	00 00				toin:       .word 0                 ; pointer to CIB (>IN in Forth)
>b36b	0012	2d f0				output:     .word kernel_putc       ; vector for EMIT
>b36d	0014	27 f0				input:      .word kernel_getc       ; vector for KEY
>b36f	0016	00 00				havekey:    .word 0                 ; vector for KEY?  (unused see https://github.com/SamCoVT/TaliForth2/issues/62)
>b371	0018	0a 00				base:       .word 10                ; number radix, default decimal
>b373	001a	00 00				state:      .word 0                 ; STATE: -1 compile, 0 interpret
>b375	001c	00 00				status:     .word 0                 ; internal status used by : :NONAME ; ACCEPT
>b377	001e					tmpdsp:     .byte ?         ; temporary DSP (X) storage (single byte)
>b378	001f					loopctrl:   .byte ?         ; Offset and flags for DO/LOOP/+LOOP control.
>b379	0020					loopidx0    .byte ?         ; cached LSB of current loop index for LOOP (not +LOOP)
=$100						lcbstack = $100
=256						loopindex = lcbstack+0      ; loop control block index for adjusted loopindex
=258						loopfufa  = lcbstack+2      ; loop control block offset for limit fudge factor
>b37a	0021					loopleave:  .word ?         ; tmp for LEAVE chaining ;TODO could it use existing tmp?
>b37c	0023					tmptos:     .word ?         ; temporary TOS storage
>b37e	0025					tmp1:       .word ?         ; temporary storage
>b380	0027					tmp2:       .word ?         ; temporary storage
>b382	0029					tmp3:       .word ?         ; temporary storage (especially for print)
>b384	002b					tohold:     .word ?         ; pointer for formatted output
>b386	002d					scratch:    .word ?,?,?,?   ; 8 byte scratchpad (see UM/MOD)
>b38e	0035					tmped:      .word ?,?,?     ; temporary for editors
.b377						cold_zp_table_end:
.b377						cold_user_table:
>b377	0000	14 00				nc_limit_offset:        .word 20        ; byte limit for Native Compile size
>b379	0002	00 00				uf_strip_offset:        .word 0         ; flag to strip underflow detection (0 off)
>b37b	0004	00 00				blk_offset:             .word 0         ; BLK
>b37d	0006	00 00				scr_offset:             .word 0         ; SCR
=12						max_wordlists = 12    ; Maximum number of wordlists supported (4 built-in, 8 user wordlists)
.b37f	0008					marker_start_offset:
>b37f	0008	00				current_offset:         .byte 0         ; CURRENT = FORTH-WORDLIST (compilation wordlist)
>b380	0009	04				num_wordlists_offset:   .byte 4         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
.b381	000a					wordlists_offset:
>b381	000a	3c bb				    .word dictionary_start              ; FORTH-WORDLIST
>b383	000c	9b c9				    .word editor_dictionary_start       ; EDITOR-WORDLIST
>b385	000e	eb c9				    .word assembler_dictionary_start    ; ASSEMBLER-WORDLIST
>b387	0010	5a c9				    .word root_dictionary_start         ; ROOT-WORDLIST
>b389	0012	00 00 00 00 00 00 00 00		    .word 0,0,0,0,0,0,0,0               ; Space for 8 User wordlists
>b391	001a	00 00 00 00 00 00 00 00
>b399	0022	01				num_order_offset:       .byte 1         ; #ORDER (Number of wordlists in search order)
.b39a	0023					search_order_offset:
>b39a	0023	00 00 00 00 00 00 00 00		    .byte 0,0,0,0,0,0,0,0,0             ; SEARCH-ORDER (9 bytes to keep offsets even)
>b3a2	002b	00
.b3a3	002c					marker_end_offset:
>b3a3	002c	00 04				blkbuffer_offset:       .word cp0+256   ; Address of buffer (right after USER vars)
>b3a5	002e	00 00				buffblocknum_offset:    .word 0         ; Block number current in buffer
>b3a7	0030	00 00				buffstatus_offset:      .word 0         ; Buffer status (bit 0 = used, bit 1 = dirty) (not in use)
>b3a9	0032	7f af				blockread_offset:       .word xt_block_word_error   ; Vector to block reading routine
>b3ab	0034	7f af				blockwrite_offset:      .word xt_block_word_error   ; Vector to block writing routine
.b3ad						cold_user_table_end:
=$03						AscCC   = $03  ; break (CTRL-c)
=$07						AscBELL = $07  ; bell sound
=$08						AscBS   = $08  ; backspace
=$0a						AscLF   = $0A  ; line feed
=$0d						AscCR   = $0D  ; carriage return
=$1b						AscESC  = $1B  ; escape
=$20						AscSP   = $20  ; space
=$7f						AscDEL  = $7F  ; delete (CTRL-h)
=$10						AscCP   = $10  ; CTRL-p (used to recall previous input history)
=$0e						AscCN   = $0E  ; CTRL-n (used to recall next input history)
=$20						OpJSR   = $20
=$4c						OpJMP   = $4C
=$d0						OpBNE   = $D0
=$f0						OpBEQ   = $F0
=$60						OpRTS   = $60
=$80						OpBRA   = $80
=1						CO = 1  ; Compile Only
=2						AN = 2  ; Always Native Compile
=4						IM = 4  ; Immediate Word
=8						NN = 8  ; Never Native Compile
=16						UF = 16 ; Includes Underflow Check (RESERVED)
=32						HC = 32 ; Word has Code Field Area (CFA)
=79						MAX_LINE_LENGTH  = 79      ; assumes 80 character lines

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../opcodes.asm

.b3ad						oc_index_table:
>b3ad		ad b5 b1 b5 58 ba 58 ba		        .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc07
>b3b5		b9 b5 bf b5 c5 b5 cb b5
>b3bd		d2 b5 d6 b5 dc b5 58 ba		        .word oc08, oc09, oc0A, oc__, oc0C, oc0D, oc0E, oc0F
>b3c5		e2 b5 e6 b5 ea b5 ee b5
>b3cd		f3 b5 f7 b5 ff b5 58 ba		        .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
>b3d5		06 b6 0c b6 13 b6 1a b6
>b3dd		21 b6 25 b6 2b b6 58 ba		        .word oc18, oc19, oc1A, oc__, oc1C, oc1D, oc1E, oc1F
>b3e5		31 b6 35 b6 3b b6 41 b6
>b3ed		46 b6 4a b6 58 ba 58 ba		        .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
>b3f5		52 b6 58 b6 5e b6 64 b6
>b3fd		6b b6 6f b6 75 b6 58 ba		        .word oc28, oc29, oc2A, oc__, oc2C, oc2D, oc2E, oc2F
>b405		7b b6 7f b6 84 b6 88 b6
>b40d		8d b6 91 b6 99 b6 58 ba		        .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
>b415		a0 b6 a8 b6 af b6 b6 b6
>b41d		bd b6 c1 b6 c7 b6 58 ba		        .word oc38, oc39, oc3A, oc__, oc3C, oc3D, oc3E, oc3F
>b425		cd b6 d3 b6 d9 b6 df b6
>b42d		e4 b6 e8 b6 58 ba 58 ba		        .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
>b435		58 ba f0 b6 f6 b6 fc b6
>b43d		03 b7 07 b7 0d b7 58 ba		        .word oc48, oc49, oc4A, oc__, oc4C, oc4D, oc4E, oc4F
>b445		13 b7 17 b7 1b b7 1f b7
>b44d		24 b7 28 b7 30 b7 58 ba		        .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
>b455		58 ba 37 b7 3e b7 45 b7
>b45d		4c b7 50 b7 56 b7 58 ba		        .word oc58, oc59, oc5A, oc__, oc__, oc5D, oc5E, oc5F
>b465		58 ba 5a b7 60 b7 66 b7
>b46d		6b b7 6f b7 58 ba 58 ba		        .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
>b475		77 b7 7d b7 83 b7 89 b7
>b47d		90 b7 94 b7 9a b7 58 ba		        .word oc68, oc69, oc6A, oc__, oc6C, oc6D, oc6E, oc6F
>b485		a0 b7 a6 b7 aa b7 ae b7
>b48d		b3 b7 b7 b7 bf b7 58 ba		        .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
>b495		c6 b7 cd b7 d4 b7 db b7
>b49d		e2 b7 e6 b7 ec b7 58 ba		        .word oc78, oc79, oc7A, oc__, oc7C, oc7D, oc7E, oc7F
>b4a5		f0 b7 f7 b7 fd b7 03 b8
>b4ad		08 b8 0c b8 58 ba 58 ba		        .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc87
>b4b5		14 b8 1a b8 20 b8 26 b8
>b4bd		2d b8 31 b8 37 b8 58 ba		        .word oc88, oc89, oc8A, oc__, oc8C, oc8D, oc8E, oc8F
>b4c5		3b b8 3f b8 43 b8 47 b8
>b4cd		4c b8 50 b8 58 b8 58 ba		        .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
>b4d5		5f b8 66 b8 6d b8 74 b8
>b4dd		7b b8 7f b8 85 b8 58 ba		        .word oc98, oc99, oc9A, oc__, oc9C, oc9D, oc9E, oc9F
>b4e5		89 b8 8d b8 93 b8 99 b8
>b4ed		9e b8 a4 b8 ac b8 58 ba		        .word ocA0, ocA1, ocA2, oc__, ocA4, ocA5, ocA6, ocA7
>b4f5		b2 b8 b8 b8 be b8 c4 b8
>b4fd		cb b8 cf b8 d5 b8 58 ba		        .word ocA8, ocA9, ocAA, oc__, ocAC, ocAD, ocAE, ocAF
>b505		d9 b8 dd b8 e1 b8 e5 b8
>b50d		ea b8 ee b8 f6 b8 58 ba		        .word ocB0, ocB1, ocB2, oc__, ocB4, ocB5, ocB6, ocB7
>b515		fd b8 04 b9 0b b9 12 b9
>b51d		19 b9 1d b9 23 b9 58 ba		        .word ocB8, ocB9, ocBA, oc__, ocBC, ocBD, ocBE, ocBF
>b525		27 b9 2d b9 33 b9 39 b9
>b52d		3e b9 44 b9 58 ba 58 ba		        .word ocC0, ocC1, oc__, oc__, ocC4, ocC5, ocC6, ocC7
>b535		4c b9 52 b9 58 b9 5e b9
>b53d		65 b9 69 b9 6f b9 58 ba		        .word ocC8, ocC9, ocCA, oc__, ocCC, ocCD, ocCE, ocCF
>b545		73 b9 77 b9 7b b9 7f b9
>b54d		84 b9 88 b9 90 b9 58 ba		        .word ocD0, ocD1, ocD2, oc__, oc__, ocD5, ocD6, ocD7
>b555		58 ba 97 b9 9e b9 a5 b9
>b55d		ac b9 b0 b9 b6 b9 58 ba		        .word ocD8, ocD9, ocDA, oc__, oc__, ocDD, ocDE, ocDF
>b565		58 ba ba b9 c0 b9 c6 b9
>b56d		cb b9 d1 b9 58 ba 58 ba		        .word ocE0, ocE1, oc__, oc__, ocE4, ocE5, ocE6, ocE7
>b575		d9 b9 df b9 e5 b9 eb b9
>b57d		f2 b9 f6 b9 fc b9 58 ba		        .word ocE8, ocE9, ocEA, oc__, ocEC, ocED, ocEE, ocEF
>b585		00 ba 04 ba 08 ba 0c ba
>b58d		11 ba 15 ba 1d ba 58 ba		        .word ocF0, ocF1, ocF2, oc__, oc__, ocF5, ocF6, ocF7
>b595		58 ba 24 ba 2b ba 32 ba
>b59d		39 ba 3d ba 43 ba 58 ba		        .word ocF8, ocF9, ocFA, oc__, oc__, ocFD, ocFE, ocFF
>b5a5		58 ba 47 ba 4d ba 53 ba
>b5ad		83 62 72 6b				oc00:	.text 2*64+3, "brk"              ; enforce the signature byte
>b5b1		87 6f 72 61 2e 7a 78 69			oc01:	.text 2*64+7, "ora.zxi"
>b5b9		85 74 73 62 2e 7a		    oc04:   .text 2*64+5, "tsb.z"
>b5bf		85 6f 72 61 2e 7a			oc05:	.text 2*64+5, "ora.z"
>b5c5		85 61 73 6c 2e 7a			oc06:	.text 2*64+5, "asl.z"
>b5cb		86 72 6d 62 30 2e 7a			oc07:	.text 2*64+6, "rmb0.z"
>b5d2		43 70 68 70				oc08:	.text 1*64+3, "php"
>b5d6		85 6f 72 61 2e 23			oc09:	.text 2*64+5, "ora.#"
>b5dc		45 61 73 6c 2e 61			oc0A:	.text 1*64+5, "asl.a"
>b5e2		c3 74 73 62				oc0C:	.text 3*64+3, "tsb"
>b5e6		c3 6f 72 61				oc0D:	.text 3*64+3, "ora"
>b5ea		c3 61 73 6c				oc0E:	.text 3*64+3, "asl"
>b5ee		c4 62 62 72 30				oc0F:	.text 3*64+4, "bbr0"
>b5f3		83 62 70 6c				oc10:	.text 2*64+3, "bpl"
>b5f7		87 6f 72 61 2e 7a 69 79			oc11:	.text 2*64+7, "ora.ziy"
>b5ff		86 6f 72 61 2e 7a 69			oc12:	.text 2*64+6, "ora.zi"
>b606		85 74 72 62 2e 7a			oc14:	.text 2*64+5, "trb.z"
>b60c		86 6f 72 61 2e 7a 78			oc15:	.text 2*64+6, "ora.zx"
>b613		86 61 73 6c 2e 7a 78			oc16:	.text 2*64+6, "asl.zx"
>b61a		86 72 6d 62 31 2e 7a			oc17:	.text 2*64+6, "rmb1.z"
>b621		43 63 6c 63				oc18:	.text 1*64+3, "clc"
>b625		c5 6f 72 61 2e 79			oc19:	.text 3*64+5, "ora.y"
>b62b		45 69 6e 63 2e 61			oc1A:	.text 1*64+5, "inc.a"
>b631		c3 74 72 62				oc1C:	.text 3*64+3, "trb"
>b635		c5 6f 72 61 2e 78			oc1D:	.text 3*64+5, "ora.x"
>b63b		c5 61 73 6c 2e 78			oc1E:	.text 3*64+5, "asl.x"
>b641		c4 62 62 72 31				oc1F:	.text 3*64+4, "bbr1"
>b646		c3 6a 73 72				oc20:	.text 3*64+3, "jsr"
>b64a		87 61 6e 64 2e 7a 78 69			oc21:	.text 2*64+7, "and.zxi"
>b652		85 62 69 74 2e 7a			oc24:	.text 2*64+5, "bit.z"
>b658		85 61 6e 64 2e 7a			oc25:	.text 2*64+5, "and.z"
>b65e		85 72 6f 6c 2e 7a			oc26:	.text 2*64+5, "rol.z"
>b664		86 72 6d 62 32 2e 7a			oc27:	.text 2*64+6, "rmb2.z"
>b66b		43 70 6c 70				oc28:	.text 1*64+3, "plp"
>b66f		85 61 6e 64 2e 23			oc29:	.text 2*64+5, "and.#"
>b675		45 72 6f 6c 2e 61			oc2A:	.text 1*64+5, "rol.a"
>b67b		c3 62 69 74				oc2C:	.text 3*64+3, "bit"
>b67f		c4 61 6e 64 2e				oc2D:	.text 3*64+4, "and."
>b684		c3 72 6f 6c				oc2E:	.text 3*64+3, "rol"
>b688		c4 62 62 72 32				oc2F:	.text 3*64+4, "bbr2"
>b68d		83 62 6d 69				oc30:	.text 2*64+3, "bmi"
>b691		87 61 6e 64 2e 7a 69 79			oc31:	.text 2*64+7, "and.ziy"
>b699		86 61 6e 64 2e 7a 69			oc32:	.text 2*64+6, "and.zi"
>b6a0		87 62 69 74 2e 7a 78 69			oc34:	.text 2*64+7, "bit.zxi"
>b6a8		86 61 6e 64 2e 7a 78			oc35:	.text 2*64+6, "and.zx"
>b6af		86 72 6f 6c 2e 7a 78			oc36:	.text 2*64+6, "rol.zx"
>b6b6		86 72 6d 62 33 2e 7a			oc37:	.text 2*64+6, "rmb3.z"
>b6bd		43 73 65 63				oc38:	.text 1*64+3, "sec"
>b6c1		c5 61 6e 64 2e 79			oc39:	.text 3*64+5, "and.y"
>b6c7		45 64 65 63 2e 61			oc3A:	.text 1*64+5, "dec.a"
>b6cd		c5 62 69 74 2e 78			oc3C:	.text 3*64+5, "bit.x"
>b6d3		c5 61 6e 64 2e 78			oc3D:	.text 3*64+5, "and.x"
>b6d9		c5 72 6f 6c 2e 78			oc3E:	.text 3*64+5, "rol.x"
>b6df		c4 62 62 72 33				oc3F:	.text 3*64+4, "bbr3"
>b6e4		43 72 74 69				oc40:	.text 1*64+3, "rti"
>b6e8		87 65 6f 72 2e 7a 78 69			oc41:	.text 2*64+7, "eor.zxi"
>b6f0		85 65 6f 72 2e 7a			oc45:	.text 2*64+5, "eor.z"
>b6f6		85 6c 73 72 2e 7a			oc46:	.text 2*64+5, "lsr.z"
>b6fc		86 72 62 6d 34 2e 7a			oc47:	.text 2*64+6, "rbm4.z"
>b703		43 70 68 61				oc48:	.text 1*64+3, "pha"
>b707		85 65 6f 72 2e 23			oc49:	.text 2*64+5, "eor.#"
>b70d		45 6c 73 72 2e 61			oc4A:	.text 1*64+5, "lsr.a"
>b713		c3 6a 6d 70				oc4C:	.text 3*64+3, "jmp"
>b717		c3 65 6f 72				oc4D:	.text 3*64+3, "eor"
>b71b		c3 6c 73 72				oc4E:	.text 3*64+3, "lsr"
>b71f		c4 62 62 72 34				oc4F:	.text 3*64+4, "bbr4"
>b724		83 62 76 63				oc50:	.text 2*64+3, "bvc"
>b728		87 65 6f 72 2e 7a 69 79			oc51:	.text 2*64+7, "eor.ziy"
>b730		86 65 6f 72 2e 7a 69			oc52:	.text 2*64+6, "eor.zi"
>b737		86 65 6f 72 2e 7a 78			oc55:	.text 2*64+6, "eor.zx"
>b73e		86 6c 73 72 2e 7a 78			oc56:	.text 2*64+6, "lsr.zx"
>b745		86 72 62 6d 35 2e 7a			oc57:	.text 2*64+6, "rbm5.z"
>b74c		43 63 6c 69				oc58:	.text 1*64+3, "cli"
>b750		c5 65 6f 72 2e 79			oc59:	.text 3*64+5, "eor.y"
>b756		43 70 68 79				oc5A:	.text 1*64+3, "phy"
>b75a		c5 65 6f 72 2e 78			oc5D:	.text 3*64+5, "eor.x"
>b760		c5 6c 73 72 2e 78			oc5E:	.text 3*64+5, "lsr.x"
>b766		c4 62 62 72 35				oc5F:	.text 3*64+4, "bbr5"
>b76b		43 72 74 73				oc60:	.text 1*64+3, "rts"
>b76f		87 61 64 63 2e 7a 78 69			oc61:	.text 2*64+7, "adc.zxi"
>b777		85 73 74 7a 2e 7a			oc64:	.text 2*64+5, "stz.z"
>b77d		85 61 64 63 2e 7a			oc65:	.text 2*64+5, "adc.z"
>b783		85 72 6f 72 2e 7a			oc66:	.text 2*64+5, "ror.z"
>b789		86 72 6d 62 36 2e 7a			oc67:	.text 2*64+6, "rmb6.z"
>b790		43 70 6c 61				oc68:	.text 1*64+3, "pla"
>b794		85 61 64 63 2e 23			oc69:	.text 2*64+5, "adc.#"
>b79a		45 72 6f 72 2e 61			oc6A:	.text 1*64+5, "ror.a"
>b7a0		c5 6a 6d 70 2e 69			oc6C:	.text 3*64+5, "jmp.i"
>b7a6		c3 61 64 63				oc6D:	.text 3*64+3, "adc"
>b7aa		c3 72 6f 72				oc6E:	.text 3*64+3, "ror"
>b7ae		c4 62 62 72 36				oc6F:	.text 3*64+4, "bbr6"
>b7b3		83 62 76 73				oc70:	.text 2*64+3, "bvs"
>b7b7		87 61 64 63 2e 7a 69 79			oc71:	.text 2*64+7, "adc.ziy"
>b7bf		86 61 64 63 2e 7a 69			oc72:	.text 2*64+6, "adc.zi"
>b7c6		86 73 74 7a 2e 7a 78			oc74:	.text 2*64+6, "stz.zx"
>b7cd		86 61 64 63 2e 7a 78			oc75:	.text 2*64+6, "adc.zx"
>b7d4		86 72 6f 72 2e 7a 78			oc76:	.text 2*64+6, "ror.zx"
>b7db		86 72 6d 62 37 2e 7a			oc77:	.text 2*64+6, "rmb7.z"
>b7e2		43 73 65 69				oc78:	.text 1*64+3, "sei"
>b7e6		c5 61 64 63 2e 79			oc79:	.text 3*64+5, "adc.y"
>b7ec		43 70 6c 79				oc7A:	.text 1*64+3, "ply"
>b7f0		c6 6a 6d 70 2e 78 69			oc7C:	.text 3*64+6, "jmp.xi"
>b7f7		c5 61 64 63 2e 78			oc7D:	.text 3*64+5, "adc.x"
>b7fd		c5 72 6f 72 2e 78			oc7E:	.text 3*64+5, "ror.x"
>b803		c4 62 62 72 37				oc7F:	.text 3*64+4, "bbr7"
>b808		83 62 72 61				oc80:	.text 2*64+3, "bra"
>b80c		87 73 74 61 2e 7a 78 69			oc81:	.text 2*64+7, "sta.zxi"
>b814		85 73 74 79 2e 7a			oc84:	.text 2*64+5, "sty.z"
>b81a		85 73 74 61 2e 7a			oc85:	.text 2*64+5, "sta.z"
>b820		85 73 74 78 2e 7a			oc86:	.text 2*64+5, "stx.z"
>b826		86 73 6d 62 30 2e 7a			oc87:	.text 2*64+6, "smb0.z"
>b82d		43 64 65 79				oc88:	.text 1*64+3, "dey"
>b831		85 62 69 74 2e 23			oc89:	.text 2*64+5, "bit.#"
>b837		43 74 78 61				oc8A:	.text 1*64+3, "txa"
>b83b		c3 73 74 79				oc8C:	.text 3*64+3, "sty"
>b83f		c3 73 74 61				oc8D:	.text 3*64+3, "sta"
>b843		c3 73 74 78				oc8E:	.text 3*64+3, "stx"
>b847		c4 62 62 73 30				oc8F:	.text 3*64+4, "bbs0"
>b84c		83 62 63 63				oc90:	.text 2*64+3, "bcc"
>b850		87 73 74 61 2e 7a 69 79			oc91:	.text 2*64+7, "sta.ziy"
>b858		86 73 74 61 2e 7a 69			oc92:	.text 2*64+6, "sta.zi"
>b85f		86 73 74 79 2e 7a 78			oc94:	.text 2*64+6, "sty.zx"
>b866		86 73 74 61 2e 7a 78			oc95:	.text 2*64+6, "sta.zx"
>b86d		86 73 74 78 2e 7a 79			oc96:	.text 2*64+6, "stx.zy"
>b874		86 73 6d 62 31 2e 7a			oc97:	.text 2*64+6, "smb1.z"
>b87b		43 74 79 61				oc98:	.text 1*64+3, "tya"
>b87f		c5 73 74 61 2e 79			oc99:	.text 3*64+5, "sta.y"
>b885		43 74 78 73				oc9A:	.text 1*64+3, "txs"
>b889		c3 73 74 7a				oc9C:	.text 3*64+3, "stz"
>b88d		c5 73 74 61 2e 78			oc9D:	.text 3*64+5, "sta.x"
>b893		c5 73 74 7a 2e 78			oc9E:	.text 3*64+5, "stz.x"
>b899		c4 62 62 73 31				oc9F:	.text 3*64+4, "bbs1"
>b89e		85 6c 64 79 2e 23			ocA0:	.text 2*64+5, "ldy.#"
>b8a4		87 6c 64 61 2e 7a 78 69			ocA1:	.text 2*64+7, "lda.zxi"
>b8ac		85 6c 64 78 2e 23			ocA2:	.text 2*64+5, "ldx.#"
>b8b2		85 6c 64 79 2e 7a			ocA4:	.text 2*64+5, "ldy.z"
>b8b8		85 6c 64 61 2e 7a			ocA5:	.text 2*64+5, "lda.z"
>b8be		85 6c 64 78 2e 7a			ocA6:	.text 2*64+5, "ldx.z"
>b8c4		86 73 6d 62 32 2e 7a			ocA7:	.text 2*64+6, "smb2.z"
>b8cb		43 74 61 79				ocA8:	.text 1*64+3, "tay"
>b8cf		85 6c 64 61 2e 23			ocA9:	.text 2*64+5, "lda.#"
>b8d5		43 74 61 78				ocAA:	.text 1*64+3, "tax"
>b8d9		c3 6c 64 79				ocAC:	.text 3*64+3, "ldy"
>b8dd		c3 6c 64 61				ocAD:	.text 3*64+3, "lda"
>b8e1		c3 6c 64 78				ocAE:	.text 3*64+3, "ldx"
>b8e5		c4 62 62 73 32				ocAF:	.text 3*64+4, "bbs2"
>b8ea		83 62 63 73				ocB0:	.text 2*64+3, "bcs"
>b8ee		87 6c 64 61 2e 7a 69 79			ocB1:	.text 2*64+7, "lda.ziy"
>b8f6		86 6c 64 61 2e 7a 69			ocB2:	.text 2*64+6, "lda.zi"
>b8fd		86 6c 64 79 2e 7a 78			ocB4:	.text 2*64+6, "ldy.zx"
>b904		86 6c 64 61 2e 7a 78			ocB5:	.text 2*64+6, "lda.zx"
>b90b		86 6c 64 78 2e 7a 79			ocB6:	.text 2*64+6, "ldx.zy"
>b912		86 73 6d 62 33 2e 7a			ocB7:	.text 2*64+6, "smb3.z"
>b919		43 63 6c 76				ocB8:	.text 1*64+3, "clv"
>b91d		c5 6c 64 61 2e 79			ocB9:	.text 3*64+5, "lda.y"
>b923		43 74 73 78				ocBA:	.text 1*64+3, "tsx"
>b927		c5 6c 64 79 2e 78			ocBC:	.text 3*64+5, "ldy.x"
>b92d		c5 6c 64 61 2e 78			ocBD:	.text 3*64+5, "lda.x"
>b933		c5 6c 64 78 2e 79			ocBE:	.text 3*64+5, "ldx.y"
>b939		c4 62 62 73 34				ocBF:	.text 3*64+4, "bbs4"
>b93e		85 63 70 79 2e 23			ocC0:	.text 2*64+5, "cpy.#"
>b944		87 63 6d 70 2e 7a 78 69			ocC1:	.text 2*64+7, "cmp.zxi"
>b94c		85 63 70 79 2e 7a			ocC4:	.text 2*64+5, "cpy.z"
>b952		85 63 6d 70 2e 7a			ocC5:	.text 2*64+5, "cmp.z"
>b958		85 64 65 63 2e 7a			ocC6:	.text 2*64+5, "dec.z"
>b95e		86 73 6d 62 34 2e 7a			ocC7:	.text 2*64+6, "smb4.z"
>b965		43 69 6e 79				ocC8:	.text 1*64+3, "iny"
>b969		85 63 6d 70 2e 23			ocC9:	.text 2*64+5, "cmp.#"
>b96f		43 64 65 78				ocCA:	.text 1*64+3, "dex"
>b973		c3 63 70 79				ocCC:	.text 3*64+3, "cpy"
>b977		c3 63 6d 70				ocCD:	.text 3*64+3, "cmp"
>b97b		c3 64 65 63				ocCE:	.text 3*64+3, "dec"
>b97f		c4 62 62 73 34				ocCF:	.text 3*64+4, "bbs4"
>b984		83 62 6e 65				ocD0:	.text 2*64+3, "bne"
>b988		87 63 6d 70 2e 7a 69 79			ocD1:	.text 2*64+7, "cmp.ziy"
>b990		86 63 6d 70 2e 7a 69			ocD2:	.text 2*64+6, "cmp.zi"
>b997		86 63 6d 70 2e 7a 78			ocD5:	.text 2*64+6, "cmp.zx"
>b99e		86 64 65 63 2e 7a 78			ocD6:	.text 2*64+6, "dec.zx"
>b9a5		86 73 6d 62 35 2e 7a			ocD7:	.text 2*64+6, "smb5.z"
>b9ac		43 63 6c 64				ocD8:	.text 1*64+3, "cld"
>b9b0		c5 63 6d 70 2e 79			ocD9:	.text 3*64+5, "cmp.y"
>b9b6		43 70 68 78				ocDA:	.text 1*64+3, "phx"
>b9ba		c5 63 6d 70 2e 78			ocDD:	.text 3*64+5, "cmp.x"
>b9c0		c5 64 65 63 2e 78			ocDE:	.text 3*64+5, "dec.x"
>b9c6		c4 62 62 73 35				ocDF:	.text 3*64+4, "bbs5"
>b9cb		85 63 70 78 2e 23			ocE0:	.text 2*64+5, "cpx.#"
>b9d1		87 73 62 63 2e 7a 78 69			ocE1:	.text 2*64+7, "sbc.zxi"
>b9d9		85 63 70 78 2e 7a			ocE4:	.text 2*64+5, "cpx.z"
>b9df		85 73 62 63 2e 7a			ocE5:	.text 2*64+5, "sbc.z"
>b9e5		85 69 6e 63 2e 7a			ocE6:	.text 2*64+5, "inc.z"
>b9eb		86 73 6d 62 36 2e 7a			ocE7:	.text 2*64+6, "smb6.z"
>b9f2		43 69 6e 78				ocE8:	.text 1*64+3, "inx"
>b9f6		85 73 62 63 2e 23			ocE9:	.text 2*64+5, "sbc.#"
>b9fc		43 6e 6f 70				ocEA:	.text 1*64+3, "nop"
>ba00		c3 63 70 78				ocEC:	.text 3*64+3, "cpx"
>ba04		c3 73 62 63				ocED:	.text 3*64+3, "sbc"
>ba08		c3 69 6e 63				ocEE:	.text 3*64+3, "inc"
>ba0c		c4 62 62 73 36				ocEF:	.text 3*64+4, "bbs6"
>ba11		83 62 65 71				ocF0:	.text 2*64+3, "beq"
>ba15		87 73 62 63 2e 7a 69 79			ocF1:	.text 2*64+7, "sbc.ziy"
>ba1d		86 73 62 63 2e 7a 69			ocF2:	.text 2*64+6, "sbc.zi"
>ba24		86 73 62 63 2e 7a 78			ocF5:	.text 2*64+6, "sbc.zx"
>ba2b		86 69 6e 63 2e 7a 78			ocF6:	.text 2*64+6, "inc.zx"
>ba32		86 73 6d 62 37 2e 7a			ocF7:	.text 2*64+6, "smb7.z"
>ba39		43 73 65 64				ocF8:	.text 1*64+3, "sed"
>ba3d		c5 73 62 63 2e 79			ocF9:	.text 3*64+5, "sbc.y"
>ba43		43 70 6c 78				ocFA:	.text 1*64+3, "plx"
>ba47		c5 73 62 63 2e 78			ocFD:	.text 3*64+5, "sbc.x"
>ba4d		c5 69 6e 63 2e 78			ocFE:	.text 3*64+5, "inc.x"
>ba53		c4 62 62 73 37				ocFF:	.text 3*64+4, "bbs7"
>ba58		01 3f					oc__:	.text 1, "?"

;******  Return to file: platform/../taliforth.asm

.ba5a						forth_words_start:
>ba5a		20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>ba62		61 6c 69 20 46 6f 72 74 68 20 32 20 66 6f 72 20
>ba72		74 68 65 20 36 35 63 30 32 29 20 63 72 20 2e 28
>ba82		20 56 65 72 73 69 6f 6e 20 31 2e 31 20 30 36 2e
>ba92		20 41 70 72 20 32 30 32 34 20 29 20 63 72 20 2e
>baa2		28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31 34
>bab2		2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53 74
>bac2		65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f 6c
>bad2		77 65 6c 6c 2c 20 50 61 74 72 69 63 6b 20 53 75
>bae2		72 72 79 29 20 63 72 20 2e 28 20 54 61 6c 69 20
>baf2		46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20 77 69
>bb02		74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20 4e 4f
>bb12		20 57 41 52 52 41 4e 54 59 29 20 63 72 20 2e 28
>bb22		20 54 79 70 65 20 27 62 79 65 27 20 74 6f 20 65
>bb32		78 69 74 29 20 63 72 20
.bb3a						forth_words_end:
.bb3a						user_words_start:
>bb3a		20 20				.binary "user_words.asc"
.bb3c						user_words_end:

;******  Processing file: platform/../headers.asm

.bb3c						dictionary_start:
.bb3c						nt_drop:
>bb3c		04 10				        .byte 4, UF
>bb3e		48 bb 9a 86 9f 86		        .word nt_dup, xt_drop, z_drop
>bb44		64 72 6f 70			        .text "drop"
.bb48						nt_dup:
>bb48		03 10				        .byte 3, UF
>bb4a		53 bb a0 86 ad 86		        .word nt_swap, xt_dup, z_dup
>bb50		64 75 70			        .text "dup"
.bb53						nt_swap:
>bb53		04 10				        .byte 4, UF
>bb55		5f bb 28 92 3b 92		        .word nt_store, xt_swap, z_swap
>bb5b		73 77 61 70			        .text "swap"
.bb5f						nt_store:
>bb5f		01 10				        .byte 1, UF
>bb61		68 bb 12 92 27 92		        .word nt_fetch, xt_store, z_store
>bb67		21				        .text "!"
.bb68						nt_fetch:
>bb68		01 10				        .byte 1, UF
>bb6a		71 bb 1a 88 2c 88		        .word nt_over, xt_fetch, z_fetch
>bb70		40				        .text "@"
.bb71						nt_over:
>bb71		04 10				        .byte 4, UF
>bb73		7d bb 05 8d 12 8d		        .word nt_to_r, xt_over, z_over
>bb79		6f 76 65 72			        .text "over"
.bb7d						nt_to_r:
>bb7d		02 11				        .byte 2, CO+UF ; native is special case
>bb7f		87 bb 66 93 79 93		        .word nt_r_from, xt_to_r, z_to_r
>bb85		3e 72				        .text ">r"
.bb87						nt_r_from:
>bb87		02 01				        .byte 2, CO    ; native is special case
>bb89		91 bb ee 8e fe 8e		        .word nt_r_fetch, xt_r_from, z_r_from
>bb8f		72 3e				        .text "r>"
.bb91						nt_r_fetch:
>bb91		02 01				        .byte 2, CO    ; native is special case
>bb93		9b bb d9 8e ed 8e		        .word nt_nip, xt_r_fetch, z_r_fetch
>bb99		72 40				        .text "r@"
.bb9b						nt_nip:
>bb9b		03 10				        .byte 3, UF
>bb9d		a6 bb 30 8c 3d 8c		        .word nt_rot, xt_nip, z_nip
>bba3		6e 69 70			        .text "nip"
.bba6						nt_rot:
>bba6		03 10				        .byte 3, UF
>bba8		b1 bb 8b 8f a6 8f		        .word nt_not_rote, xt_rot, z_rot
>bbae		72 6f 74			        .text "rot"
.bbb1						nt_not_rote:
>bbb1		04 10				        .byte 4, UF
>bbb3		bd bb 75 9c 90 9c		        .word nt_tuck, xt_not_rote, z_not_rote
>bbb9		2d 72 6f 74			        .text "-rot"
.bbbd						nt_tuck:
>bbbd		04 10				        .byte 4, UF
>bbbf		c9 bb 83 93 9c 93		        .word nt_comma, xt_tuck, z_tuck
>bbc5		74 75 63 6b			        .text "tuck"
.bbc9						nt_comma:
>bbc9		01 10				        .byte 1, UF
>bbcb		d2 bb cd 83 db 83		        .word nt_c_fetch, xt_comma, z_comma
>bbd1		2c				        .text ","
.bbd2						nt_c_fetch:
>bbd2		02 10				        .byte 2, UF
>bbd4		dc bb 2d 83 36 83		        .word nt_c_store, xt_c_fetch, z_c_fetch
>bbda		63 40				        .text "c@"
.bbdc						nt_c_store:
>bbdc		02 10				        .byte 2, UF
>bbde		e6 bb 37 83 42 83		        .word nt_plus_store, xt_c_store, z_c_store
>bbe4		63 21				        .text "c!"
.bbe6						nt_plus_store:
>bbe6		02 10				        .byte 2, UF
>bbe8		f0 bb 66 8e 85 8e		        .word nt_zero, xt_plus_store, z_plus_store
>bbee		2b 21				        .text "+!"
.bbf0						nt_zero:
>bbf0		01 00				        .byte 1, 0
>bbf2		f9 bb f1 9d f7 9d		        .word nt_one, xt_zero, z_zero
>bbf8		30				        .text "0"
.bbf9						nt_one:
>bbf9		01 00				        .byte 1, 0
>bbfb		02 bc 8b 9d 93 9d		        .word nt_two, xt_one, z_one
>bc01		31				        .text "1"
.bc02						nt_two:
>bc02		01 00				        .byte 1, 0
>bc04		0b bc bc 9d c4 9d		        .word nt_execute, xt_two, z_two
>bc0a		32				        .text "2"
.bc0b						nt_execute:
>bc0b		07 10				        .byte 7, UF
>bc0d		1a bc 05 88 0b 88		        .word nt_emit, xt_execute, z_execute
>bc13		65 78 65 63 75 74 65		        .text "execute"
.bc1a						nt_emit:
>bc1a		04 18				        .byte 4, NN+UF
>bc1c		26 bc be 86 c8 86		        .word nt_type, xt_emit, z_emit
>bc22		65 6d 69 74			        .text "emit"
.bc26						nt_type:
>bc26		04 10				        .byte 4, UF
>bc28		32 bc af 94 d9 94		        .word nt_dot, xt_type, z_type
>bc2e		74 79 70 65			        .text "type"
.bc32						nt_dot:
>bc32		01 10				        .byte 1, UF
>bc34		3b bc 30 86 51 86		        .word nt_u_dot, xt_dot, z_dot
>bc3a		2e				        .text "."
.bc3b						nt_u_dot:
>bc3b		02 10				        .byte 2, UF
>bc3d		45 bc da 94 e5 94		        .word nt_u_dot_r, xt_u_dot, z_u_dot
>bc43		75 2e				        .text "u."
.bc45						nt_u_dot_r:
>bc45		03 10				        .byte 3, UF
>bc47		50 bc e6 94 07 95		        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
>bc4d		75 2e 72			        .text "u.r"
.bc50						nt_dot_r:
>bc50		02 10				        .byte 2, UF
>bc52		5a bc 6c 86 99 86		        .word nt_d_dot, xt_dot_r, z_dot_r
>bc58		2e 72				        .text ".r"
.bc5a						nt_d_dot:
>bc5a		02 10				        .byte 2, UF
>bc5c		64 bc 7a 9e 98 9e		        .word nt_d_dot_r, xt_d_dot, z_d_dot
>bc62		64 2e				        .text "d."
.bc64						nt_d_dot_r:
>bc64		03 10				        .byte 3, UF
>bc66		6f bc 99 9e c3 9e		        .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
>bc6c		64 2e 72			        .text "d.r"
.bc6f						nt_ud_dot:
>bc6f		03 10				        .byte 3, UF
>bc71		7a bc 10 9f 22 9f		        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
>bc77		75 64 2e			        .text "ud."
.bc7a						nt_ud_dot_r:
>bc7a		04 10				        .byte 4, UF
>bc7c		86 bc 23 9f 41 9f		        .word nt_question, xt_ud_dot_r, z_ud_dot_r
>bc82		75 64 2e 72			        .text "ud.r"
.bc86						nt_question:
>bc86		01 00				        .byte 1, 0
>bc88		8f bc 1c 99 22 99		        .word nt_false, xt_question, z_question
>bc8e		3f				        .text "?"
.bc8f						nt_false:
>bc8f		05 00				        .byte 5, 0
>bc91		9c bc f1 9d f7 9d		        .word nt_true, xt_false, z_false
>bc97		66 61 6c 73 65			        .text "false"
.bc9c						nt_true:
>bc9c		04 00				        .byte 4, 0
>bc9e		a8 bc 7a 93 82 93		        .word nt_space, xt_true, z_true
>bca4		74 72 75 65			        .text "true"
.bca8						nt_space:
>bca8		05 00				        .byte 5, 0
>bcaa		b5 bc c5 91 ca 91		        .word nt_two_dup, xt_space, z_space
>bcb0		73 70 61 63 65			        .text "space"
.bcb5						nt_two_dup:
>bcb5		04 10				        .byte 4, UF
>bcb7		c1 bc a5 93 bc 93		        .word nt_question_dup, xt_two_dup, z_two_dup
>bcbd		32 64 75 70			        .text "2dup"
.bcc1						nt_question_dup:
>bcc1		04 10				        .byte 4, UF
>bcc3		cd bc c5 8e d8 8e		        .word nt_plus, xt_question_dup, z_question_dup
>bcc9		3f 64 75 70			        .text "?dup"
.bccd						nt_plus:
>bccd		01 10				        .byte 1, UF
>bccf		d6 bc 53 8e 65 8e		        .word nt_minus, xt_plus, z_plus
>bcd5		2b				        .text "+"
.bcd6						nt_minus:
>bcd6		01 10				        .byte 1, UF
>bcd8		df bc e4 8b f6 8b		        .word nt_one_minus, xt_minus, z_minus
>bcde		2d				        .text "-"
.bcdf						nt_one_minus:
>bcdf		02 10				        .byte 2, UF
>bce1		e9 bc dd 8c e8 8c		        .word nt_one_plus, xt_one_minus, z_one_minus
>bce7		31 2d				        .text "1-"
.bce9						nt_one_plus:
>bce9		02 10				        .byte 2, UF
>bceb		f3 bc e9 8c f2 8c		        .word nt_two_star, xt_one_plus, z_one_plus
>bcf1		31 2b				        .text "1+"
.bcf3						nt_two_star:
>bcf3		02 10				        .byte 2, UF
>bcf5		fd bc 3d 94 44 94		        .word nt_two_slash, xt_two_star, z_two_star
>bcfb		32 2a				        .text "2*"
.bcfd						nt_two_slash:
>bcfd		02 10				        .byte 2, UF
>bcff		07 bd 32 94 3c 94		        .word nt_abs, xt_two_slash, z_two_slash
>bd05		32 2f				        .text "2/"
.bd07						nt_abs:
>bd07		03 10				        .byte 3, UF
>bd09		12 bd cf 80 e3 80		        .word nt_dabs, xt_abs, z_abs
>bd0f		61 62 73			        .text "abs"
.bd12						nt_dabs:
>bd12		04 10				        .byte 4, UF
>bd14		1e bd 40 9e 5e 9e		        .word nt_and, xt_dabs, z_dabs
>bd1a		64 61 62 73			        .text "dabs"
.bd1e						nt_and:
>bd1e		03 10				        .byte 3, UF
>bd20		29 bd 90 82 a1 82		        .word nt_or, xt_and, z_and
>bd26		61 6e 64			        .text "and"
.bd29						nt_or:
>bd29		02 10				        .byte 2, UF
>bd2b		33 bd f3 8c 04 8d		        .word nt_xor, xt_or, z_or
>bd31		6f 72				        .text "or"
.bd33						nt_xor:
>bd33		03 10				        .byte 3, UF
>bd35		3e bd 5a 96 6b 96		        .word nt_rshift, xt_xor, z_xor
>bd3b		78 6f 72			        .text "xor"
.bd3e						nt_rshift:
>bd3e		06 10				        .byte 6, UF
>bd40		4c bd a7 8f ba 8f		        .word nt_lshift, xt_rshift, z_rshift
>bd46		72 73 68 69 66 74		        .text "rshift"
.bd4c						nt_lshift:
>bd4c		06 10				        .byte 6, UF
>bd4e		5a bd 0d 8b 20 8b		        .word nt_pick, xt_lshift, z_lshift
>bd54		6c 73 68 69 66 74		        .text "lshift"
.bd5a						nt_pick:
>bd5a		04 00				        .byte 4, 0    ; underflow check is complicated, leave off here
>bd5c		66 bd 42 8e 52 8e		        .word nt_char, xt_pick, z_pick
>bd62		70 69 63 6b			        .text "pick"
.bd66						nt_char:
>bd66		04 00				        .byte 4, 0
>bd68		72 bd 53 83 69 83		        .word nt_bracket_char, xt_char, z_char
>bd6e		63 68 61 72			        .text "char"
.bd72						nt_bracket_char:
>bd72		06 05				        .byte 6, CO+IM
>bd74		80 bd 0d 83 13 83		        .word nt_char_plus, xt_bracket_char, z_bracket_char
>bd7a		5b 63 68 61 72 5d		        .text "[char]"
.bd80						nt_char_plus:
>bd80		05 00				        .byte 5, 0
>bd82		8d bd e9 8c f2 8c		        .word nt_chars, xt_char_plus, z_char_plus ; same as 1+
>bd88		63 68 61 72 2b			        .text "char+"
.bd8d						nt_chars:
>bd8d		05 10				        .byte 5, UF     ; deleted during compile
>bd8f		9a bd 6a 83 6d 83		        .word nt_cells, xt_chars, z_chars
>bd95		63 68 61 72 73			        .text "chars"
.bd9a						nt_cells:
>bd9a		05 00				        .byte 5, 0
>bd9c		a7 bd 3d 94 44 94		        .word nt_cell_plus, xt_cells, z_cells  ; same as 2*
>bda2		63 65 6c 6c 73			        .text "cells"
.bda7						nt_cell_plus:
>bda7		05 10				        .byte 5, UF
>bda9		b4 bd 43 83 52 83		        .word nt_here, xt_cell_plus, z_cell_plus
>bdaf		63 65 6c 6c 2b			        .text "cell+"
.bdb4						nt_here:
>bdb4		04 00				        .byte 4, 0
>bdb6		c0 bd 1b 89 25 89		        .word nt_equal, xt_here, z_here
>bdbc		68 65 72 65			        .text "here"
.bdc0						nt_equal:
>bdc0		01 10				        .byte 1, UF
>bdc2		c9 bd 96 87 b1 87		        .word nt_not_equals, xt_equal, z_equal
>bdc8		3d				        .text "="
.bdc9						nt_not_equals:
>bdc9		02 10				        .byte 2, UF
>bdcb		d3 bd 3e 8c 5b 8c		        .word nt_less_than, xt_not_equals, z_not_equals
>bdd1		3c 3e				        .text "<>"
.bdd3						nt_less_than:
>bdd3		01 10				        .byte 1, UF
>bdd5		dc bd dd 89 f1 89		        .word nt_u_less_than, xt_less_than, z_less_than
>bddb		3c				        .text "<"
.bddc						nt_u_less_than:
>bddc		02 10				        .byte 2, UF
>bdde		e6 bd 1e 95 33 95		        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
>bde4		75 3c				        .text "u<"
.bde6						nt_u_greater_than:
>bde6		02 10				        .byte 2, UF
>bde8		f0 bd 08 95 1d 95		        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
>bdee		75 3e				        .text "u>"
.bdf0						nt_greater_than:
>bdf0		01 10				        .byte 1, UF
>bdf2		f9 bd 06 89 1a 89		        .word nt_zero_equal, xt_greater_than, z_greater_than
>bdf8		3e				        .text ">"
.bdf9						nt_zero_equal:
>bdf9		02 10				        .byte 2, UF
>bdfb		03 be 6c 96 7d 96		        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
>be01		30 3d				        .text "0="
.be03						nt_zero_unequal:
>be03		03 10				        .byte 3, UF
>be05		0e be a2 96 b1 96		        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
>be0b		30 3c 3e			        .text "0<>"
.be0e						nt_zero_greater:
>be0e		02 10				        .byte 2, UF
>be10		18 be 7e 96 91 96		        .word nt_zero_less, xt_zero_greater, z_zero_greater
>be16		30 3e				        .text "0>"
.be18						nt_zero_less:
>be18		02 10				        .byte 2, UF
>be1a		22 be 92 96 a1 96		        .word nt_min, xt_zero_less, z_zero_less
>be20		30 3c				        .text "0<"
.be22						nt_min:
>be22		03 10				        .byte 3, UF
>be24		2d be c8 8b e3 8b		        .word nt_max, xt_min, z_min
>be2a		6d 69 6e			        .text "min"
.be2d						nt_max:
>be2d		03 10				        .byte 3, UF
>be2f		38 be ac 8b c7 8b		        .word nt_two_drop, xt_max, z_max
>be35		6d 61 78			        .text "max"
.be38						nt_two_drop:
>be38		05 10				        .byte 5, UF
>be3a		45 be 9d 93 a4 93		        .word nt_two_swap, xt_two_drop, z_two_drop
>be40		32 64 72 6f 70			        .text "2drop"
.be45						nt_two_swap:
>be45		05 10				        .byte 5, UF
>be47		52 be 6b 94 8e 94		        .word nt_two_over, xt_two_swap, z_two_swap
>be4d		32 73 77 61 70			        .text "2swap"
.be52						nt_two_over:
>be52		05 10				        .byte 5, UF
>be54		5f be df 93 f6 93		        .word nt_two_store, xt_two_over, z_two_over
>be5a		32 6f 76 65 72			        .text "2over"
.be5f						nt_two_store:
>be5f		02 10				        .byte 2, UF
>be61		69 be 45 94 6a 94		        .word nt_two_fetch, xt_two_store, z_two_store
>be67		32 21				        .text "2!"
.be69						nt_two_fetch:
>be69		02 10				        .byte 2, UF
>be6b		73 be bd 93 de 93		        .word nt_two_variable, xt_two_fetch, z_two_fetch
>be71		32 40				        .text "2@"
.be73						nt_two_variable:
>be73		09 00				        .byte 9, 0
>be75		84 be 01 9f 0f 9f		        .word nt_two_constant, xt_two_variable, z_two_variable
>be7b		32 76 61 72 69 61 62 6c		        .text "2variable"
>be83		65
.be84						nt_two_constant:
>be84		09 10				        .byte 9, UF
>be86		95 be c4 9e e8 9e		        .word nt_two_literal, xt_two_constant, z_two_constant
>be8c		32 63 6f 6e 73 74 61 6e		        .text "2constant"
>be94		74
.be95						nt_two_literal:
>be95		08 14				        .byte 8, UF+IM
>be97		a5 be e9 9e 00 9f		        .word nt_two_r_fetch, xt_two_literal, z_two_literal
>be9d		32 6c 69 74 65 72 61 6c		        .text "2literal"
.bea5						nt_two_r_fetch:
>bea5		03 09				        .byte 3, CO+NN          ; native is special case, leave NN for now
>bea7		b0 be f7 93 14 94		        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
>bead		32 72 40			        .text "2r@"
.beb0						nt_two_r_from:
>beb0		03 01				        .byte 3, CO             ; native is special case
>beb2		bb be 15 94 31 94		        .word nt_two_to_r, xt_two_r_from, z_two_r_from
>beb8		32 72 3e			        .text "2r>"
.bebb						nt_two_to_r:
>bebb		03 11				        .byte 3, CO+UF          ; native is special case
>bebd		c6 be 8f 94 ae 94		        .word nt_invert, xt_two_to_r, z_two_to_r
>bec3		32 3e 72			        .text "2>r"
.bec6						nt_invert:
>bec6		06 10				        .byte 6, UF
>bec8		d4 be 64 89 73 89		        .word nt_negate, xt_invert, z_invert
>bece		69 6e 76 65 72 74		        .text "invert"
.bed4						nt_negate:
>bed4		06 10				        .byte 6, UF
>bed6		e2 be 1f 8c 2f 8c		        .word nt_dnegate, xt_negate, z_negate
>bedc		6e 65 67 61 74 65		        .text "negate"
.bee2						nt_dnegate:
>bee2		07 10				        .byte 7, UF
>bee4		f1 be 5f 9e 79 9e		        .word nt_c_comma, xt_dnegate, z_dnegate
>beea		64 6e 65 67 61 74 65		        .text "dnegate"
.bef1						nt_c_comma:
>bef1		02 10				        .byte 2, UF
>bef3		fb be 22 83 2c 83		        .word nt_bounds, xt_c_comma, z_c_comma
>bef9		63 2c				        .text "c,"
.befb						nt_bounds:
>befb		06 10				        .byte 6, UF
>befd		09 bf 2e 9a 46 9a		        .word nt_spaces, xt_bounds, z_bounds
>bf03		62 6f 75 6e 64 73		        .text "bounds"
.bf09						nt_spaces:
>bf09		06 10				        .byte 6, UF
>bf0b		17 bf cb 91 e4 91		        .word nt_bl, xt_spaces, z_spaces
>bf11		73 70 61 63 65 73		        .text "spaces"
.bf17						nt_bl:
>bf17		02 00				        .byte 2, 0
>bf19		21 bf 04 83 0c 83		        .word nt_minus_trailing, xt_bl, z_bl
>bf1f		62 6c				        .text "bl"
.bf21						nt_minus_trailing:
>bf21		09 10				        .byte 9, UF
>bf23		32 bf 36 a0 72 a0		        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
>bf29		2d 74 72 61 69 6c 69 6e		        .text "-trailing"
>bf31		67
.bf32						nt_minus_leading:
>bf32		08 10				        .byte 8, UF
>bf34		42 bf 1d a0 35 a0		        .word nt_slash_string, xt_minus_leading, z_minus_leading
>bf3a		2d 6c 65 61 64 69 6e 67		        .text "-leading"
.bf42						nt_slash_string:
>bf42		07 10				        .byte 7, UF
>bf44		51 bf 12 a1 31 a1		        .word nt_refill, xt_slash_string, z_slash_string
>bf4a		2f 73 74 72 69 6e 67		        .text "/string"
.bf51						nt_refill:
>bf51		06 00				        .byte 6, 0
>bf53		5f bf 3c 8f 7d 8f		        .word nt_accept, xt_refill, z_refill
>bf59		72 65 66 69 6c 6c		        .text "refill"
.bf5f						nt_accept:
>bf5f		06 18				        .byte 6, UF+NN
>bf61		6d bf e4 80 dc 81		        .word nt_input_to_r, xt_accept, z_accept
>bf67		61 63 63 65 70 74		        .text "accept"
.bf6d						nt_input_to_r:
>bf6d		07 08				        .byte 7, NN
>bf6f		7c bf 92 9b a7 9b		        .word nt_r_to_input, xt_input_to_r, z_input_to_r
>bf75		69 6e 70 75 74 3e 72		        .text "input>r"
.bf7c						nt_r_to_input:
>bf7c		07 08				        .byte 7, NN
>bf7e		8b bf 9f 9d b6 9d		        .word nt_unused, xt_r_to_input, z_r_to_input
>bf84		72 3e 69 6e 70 75 74		        .text "r>input"
.bf8b						nt_unused:
>bf8b		06 00				        .byte 6, 0
>bf8d		99 bf d0 95 df 95		        .word nt_depth, xt_unused, z_unused
>bf93		75 6e 75 73 65 64		        .text "unused"
.bf99						nt_depth:
>bf99		05 00				        .byte 5, 0
>bf9b		a6 bf 52 85 60 85		        .word nt_key, xt_depth, z_depth
>bfa1		64 65 70 74 68			        .text "depth"
.bfa6						nt_key:
>bfa6		03 00				        .byte 3, 0
>bfa8		b1 bf a7 89 b0 89		        .word nt_allot, xt_key, z_key
>bfae		6b 65 79			        .text "key"
.bfb1						nt_allot:
>bfb1		05 10				        .byte 5, UF
>bfb3		be bf 27 82 8f 82		        .word nt_create, xt_allot, z_allot
>bfb9		61 6c 6c 6f 74			        .text "allot"
.bfbe						nt_create:
>bfbe		06 00				        .byte 6, 0
>bfc0		cc bf 40 84 09 85		        .word nt_does, xt_create, z_create
>bfc6		63 72 65 61 74 65		        .text "create"
.bfcc						nt_does:
>bfcc		05 05				        .byte 5, CO+IM
>bfce		d9 bf ef 85 fd 85		        .word nt_variable, xt_does, z_does
>bfd4		64 6f 65 73 3e			        .text "does>"
.bfd9						nt_variable:
>bfd9		08 00				        .byte 8, 0
>bfdb		e9 bf e0 95 f8 95		        .word nt_constant, xt_variable, z_variable
>bfe1		76 61 72 69 61 62 6c 65		        .text "variable"
.bfe9						nt_constant:
>bfe9		08 10				        .byte 8, UF
>bfeb		f9 bf e8 83 25 84		        .word nt_value, xt_constant, z_constant
>bff1		63 6f 6e 73 74 61 6e 74		        .text "constant"
.bff9						nt_value:
>bff9		05 10				        .byte 5, UF
>bffb		06 c0 e8 83 25 84		        .word nt_to, xt_value, z_value          ; same code as CONSTANT
>c001		76 61 6c 75 65			        .text "value"
.c006						nt_to:
>c006		02 0c				        .byte 2, NN+IM
>c008		10 c0 5c 92 97 92		        .word nt_s_to_d, xt_to, z_to
>c00e		74 6f				        .text "to"
.c010						nt_s_to_d:
>c010		03 10				        .byte 3, UF
>c012		1b c0 d9 90 ea 90		        .word nt_d_to_s, xt_s_to_d, z_s_to_d
>c018		73 3e 64			        .text "s>d"
.c01b						nt_d_to_s:
>c01b		03 10				        .byte 3, UF
>c01d		26 c0 3a 9e 3f 9e		        .word nt_d_minus, xt_d_to_s, z_d_to_s
>c023		64 3e 73			        .text "d>s"
.c026						nt_d_minus:
>c026		02 10				        .byte 2, UF
>c028		30 c0 f8 9d 18 9e		        .word nt_d_plus, xt_d_minus, z_d_minus
>c02e		64 2d				        .text "d-"
.c030						nt_d_plus:
>c030		02 10				        .byte 2, UF
>c032		3a c0 19 9e 39 9e		        .word nt_erase, xt_d_plus, z_d_plus
>c038		64 2b				        .text "d+"
.c03a						nt_erase:
>c03a		05 00				        .byte 5, 0      ; underflow checked by FILL
>c03c		47 c0 bc 87 04 88		        .word nt_blank, xt_erase, z_erase
>c042		65 72 61 73 65			        .text "erase"
.c047						nt_blank:
>c047		05 00				        .byte 5, 0     ; underflow checked by FILL
>c049		54 c0 b2 87 04 88		        .word nt_fill, xt_blank, z_blank
>c04f		62 6c 61 6e 6b			        .text "blank"
.c054						nt_fill:
>c054		04 10				        .byte 4, UF
>c056		60 c0 c2 87 04 88		        .word nt_find_name, xt_fill, z_fill
>c05c		66 69 6c 6c			        .text "fill"
.c060						nt_find_name:
>c060		09 10				        .byte 9, UF
>c062		71 c0 f0 9a 33 9b		        .word nt_tick, xt_find_name, z_find_name
>c068		66 69 6e 64 2d 6e 61 6d		        .text "find-name"
>c070		65
.c071						nt_tick:
>c071		01 00				        .byte 1, 0
>c073		7a c0 3c 92 5b 92		        .word nt_bracket_tick, xt_tick, z_tick
>c079		27				        .text "'"
.c07a						nt_bracket_tick:
>c07a		03 05				        .byte 3, CO+IM
>c07c		85 c0 14 83 1a 83		        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
>c082		5b 27 5d			        .text "[']"
.c085						nt_name_to_int:
>c085		08 10				        .byte 8, UF
>c087		95 c0 2e 9c 4a 9c		        .word nt_int_to_name, xt_name_to_int, z_name_to_int
>c08d		6e 61 6d 65 3e 69 6e 74		        .text "name>int"
.c095						nt_int_to_name:
>c095		08 10				        .byte 8, UF
>c097		a5 c0 a8 9b 18 9c		        .word nt_name_to_string, xt_int_to_name, z_int_to_name
>c09d		69 6e 74 3e 6e 61 6d 65		        .text "int>name"
.c0a5						nt_name_to_string:
>c0a5		0b 10				        .byte 11, UF
>c0a7		b8 c0 4b 9c 61 9c		        .word nt_to_body, xt_name_to_string, z_name_to_string
>c0ad		6e 61 6d 65 3e 73 74 72		        .text "name>string"
>c0b5		69 6e 67
.c0b8						nt_to_body:
>c0b8		05 10				        .byte 5, UF
>c0ba		c5 c0 98 92 ba 92		        .word nt_defer, xt_to_body, z_to_body
>c0c0		3e 62 6f 64 79			        .text ">body"
.c0c5						nt_defer:
>c0c5		05 00				        .byte 5, 0
>c0c7		d2 c0 11 85 43 85		        .word nt_latestxt, xt_defer, z_defer
>c0cd		64 65 66 65 72			        .text "defer"
.c0d2						nt_latestxt:
>c0d2		08 00				        .byte 8, 0
>c0d4		e2 c0 27 9c 2d 9c		        .word nt_latestnt, xt_latestxt, z_latestxt
>c0da		6c 61 74 65 73 74 78 74		        .text "latestxt"
.c0e2						nt_latestnt:
>c0e2		08 00				        .byte 8, 0
>c0e4		f2 c0 19 9c 26 9c		        .word nt_parse_name, xt_latestnt, z_latestnt
>c0ea		6c 61 74 65 73 74 6e 74		        .text "latestnt"
.c0f2						nt_parse_name:
>c0f2		0a 08				        .byte 10, NN
>c0f4		04 c1 51 8d 41 8e		        .word nt_parse, xt_parse_name, z_parse_name
>c0fa		70 61 72 73 65 2d 6e 61		        .text "parse-name"
>c102		6d 65
.c104						nt_parse:
>c104		05 10				        .byte 5, UF
>c106		11 c1 ac 8d 41 8e		        .word nt_execute_parsing, xt_parse, z_parse
>c10c		70 61 72 73 65			        .text "parse"
.c111						nt_execute_parsing:
>c111		0f 10				        .byte 15, UF
>c113		28 c1 c9 9a ef 9a		        .word nt_source, xt_execute_parsing, z_execute_parsing
>c119		65 78 65 63 75 74 65 2d		        .text "execute-parsing"
>c121		70 61 72 73 69 6e 67
.c128						nt_source:
>c128		06 00				        .byte 6, 0
>c12a		36 c1 a5 91 b9 91		        .word nt_source_id, xt_source, z_source
>c130		73 6f 75 72 63 65		        .text "source"
.c136						nt_source_id:
>c136		09 00				        .byte 9, 0
>c138		47 c1 ba 91 c4 91		        .word nt_colon, xt_source_id, z_source_id
>c13e		73 6f 75 72 63 65 2d 69		        .text "source-id"
>c146		64
.c147						nt_colon:
>c147		01 00				        .byte 1, 0
>c149		50 c1 6e 83 b0 83		        .word nt_semicolon, xt_colon, z_colon
>c14f		3a				        .text ":"
.c150						nt_semicolon:
>c150		01 05				        .byte 1, CO+IM
>c152		59 c1 eb 90 49 91		        .word nt_colon_noname, xt_semicolon, z_semicolon
>c158		3b				        .text ";"
.c159						nt_colon_noname:
>c159		07 00				        .byte 7, 0
>c15b		68 c1 b1 83 cc 83		        .word nt_compile_comma, xt_colon_noname, z_colon_noname
>c161		3a 6e 6f 6e 61 6d 65		        .text ":noname"
.c168						nt_compile_comma:
>c168		08 18				        .byte 8, UF+NN
>c16a		78 c1 b2 96 7a 97		        .word nt_left_bracket, xt_compile_comma, z_compile_comma
>c170		63 6f 6d 70 69 6c 65 2c		        .text "compile,"
.c178						nt_left_bracket:
>c178		01 05				        .byte 1, IM+CO
>c17a		81 c1 ca 89 ce 89		        .word nt_right_bracket, xt_left_bracket, z_left_bracket
>c180		5b				        .text "["
.c181						nt_right_bracket:
>c181		01 04				        .byte 1, IM
>c183		8a c1 84 8f 8a 8f		        .word nt_literal, xt_right_bracket, z_right_bracket
>c189		5d				        .text "]"
.c18a						nt_literal:
>c18a		07 15				        .byte 7, IM+CO+UF
>c18c		99 c1 f2 89 2f 8a		        .word nt_sliteral, xt_literal, z_literal
>c192		6c 69 74 65 72 61 6c		        .text "literal"
.c199						nt_sliteral:
>c199		08 15				        .byte 8, CO+IM+UF
>c19b		a9 c1 32 a1 75 a1		        .word nt_dot_quote, xt_sliteral, z_sliteral
>c1a1		73 6c 69 74 65 72 61 6c		        .text "sliteral"
.c1a9						nt_dot_quote:
>c1a9		02 05				        .byte 2, CO+IM
>c1ab		b3 c1 61 86 6b 86		        .word nt_s_quote, xt_dot_quote, z_dot_quote
>c1b1		2e 22				        .text ".", $22
.c1b3						nt_s_quote:
>c1b3		02 0c				        .byte 2, IM+NN
>c1b5		bd c1 d4 8f d8 90		        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
>c1bb		73 22				        .text "s", $22
.c1bd						nt_s_backslash_quote:
>c1bd		03 04				        .byte 3, IM
>c1bf		c8 c1 bb 8f c4 8f		        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
>c1c5		73 5c 22			        .text "s", $5C, $22
.c1c8						nt_postpone:
>c1c8		08 05				        .byte 8, IM+CO
>c1ca		d8 c1 86 8e c4 8e		        .word nt_immediate, xt_postpone, z_postpone
>c1d0		70 6f 73 74 70 6f 6e 65		        .text "postpone"
.c1d8						nt_immediate:
>c1d8		09 00				        .byte 9, 0
>c1da		e9 c1 58 89 63 89		        .word nt_compile_only, xt_immediate, z_immediate
>c1e0		69 6d 6d 65 64 69 61 74		        .text "immediate"
>c1e8		65
.c1e9						nt_compile_only:
>c1e9		0c 00				        .byte 12, 0
>c1eb		fd c1 dc 83 e7 83		        .word nt_never_native, xt_compile_only, z_compile_only
>c1f1		63 6f 6d 70 69 6c 65 2d		        .text "compile-only"
>c1f9		6f 6e 6c 79
.c1fd						nt_never_native:
>c1fd		0c 00				        .byte 12, 0
>c1ff		11 c2 67 9c 74 9c		        .word nt_always_native, xt_never_native, z_never_native
>c205		6e 65 76 65 72 2d 6e 61		        .text "never-native"
>c20d		74 69 76 65
.c211						nt_always_native:
>c211		0d 00				        .byte 13, 0
>c213		26 c2 1a 9a 27 9a		        .word nt_allow_native, xt_always_native, z_always_native
>c219		61 6c 77 61 79 73 2d 6e		        .text "always-native"
>c221		61 74 69 76 65
.c226						nt_allow_native:
>c226		0c 00				        .byte 12, 0
>c228		3a c2 0e 9a 19 9a		        .word nt_nc_limit, xt_allow_native, z_allow_native
>c22e		61 6c 6c 6f 77 2d 6e 61		        .text "allow-native"
>c236		74 69 76 65
.c23a						nt_nc_limit:
>c23a		08 08				        .byte 8, NN
>c23c		4a c2 62 9c 67 9c		        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
>c242		6e 63 2d 6c 69 6d 69 74		        .text "nc-limit"
.c24a						nt_strip_underflow:
>c24a		0f 08				        .byte 15, NN
>c24c		61 c2 b7 9d bc 9d		        .word nt_abort, xt_strip_underflow, z_strip_underflow
>c252		73 74 72 69 70 2d 75 6e		        .text "strip-underflow"
>c25a		64 65 72 66 6c 6f 77
.c261						nt_abort:
>c261		05 00				        .byte 5, 0
>c263		6e c2 5e 80 af 80		        .word nt_abort_quote, xt_abort, z_abort
>c269		61 62 6f 72 74			        .text "abort"
.c26e						nt_abort_quote:
>c26e		06 0d				        .byte 6, CO+IM+NN
>c270		7c c2 af 80 b9 80		        .word nt_do, xt_abort_quote, z_abort_quote
>c276		61 62 6f 72 74 22		        .text "abort", $22
.c27c						nt_do:
>c27c		02 0d				        .byte 2, CO+IM+NN
>c27e		86 c2 8b 85 a4 85		        .word nt_question_do, xt_do, z_do
>c284		64 6f				        .text "do"
.c286						nt_question_do:
>c286		03 0d				        .byte 3, CO+IM+NN
>c288		91 c2 61 85 a4 85		        .word nt_i, xt_question_do, z_question_do
>c28e		3f 64 6f			        .text "?do"
.c291						nt_i:
>c291		01 01				        .byte 1, CO
>c293		9a c2 3f 89 53 89		        .word nt_j, xt_i, z_i
>c299		69				        .text "i"
.c29a						nt_j:
>c29a		01 01				        .byte 1, CO
>c29c		a3 c2 8d 89 a6 89		        .word nt_loop, xt_j, z_j
>c2a2		6a				        .text "j"
.c2a3						nt_loop:
>c2a3		04 05				        .byte 4, CO+IM
>c2a5		af c2 59 8a d1 8a		        .word nt_plus_loop, xt_loop, z_loop
>c2ab		6c 6f 6f 70			        .text "loop"
.c2af						nt_plus_loop:
>c2af		05 05				        .byte 5, CO+IM
>c2b1		bc c2 6d 8a d1 8a		        .word nt_exit, xt_plus_loop, z_plus_loop
>c2b7		2b 6c 6f 6f 70			        .text "+loop"
.c2bc						nt_exit:
>c2bc		04 03				        .byte 4, AN+CO
>c2be		c8 c2 19 88 1a 88		        .word nt_unloop, xt_exit, z_exit
>c2c4		65 78 69 74			        .text "exit"
.c2c8						nt_unloop:
>c2c8		06 01				        .byte 6, CO
>c2ca		d6 c2 bc 95 cb 95		        .word nt_leave, xt_unloop, z_unloop
>c2d0		75 6e 6c 6f 6f 70		        .text "unloop"
.c2d6						nt_leave:
>c2d6		05 05				        .byte 5, CO+IM
>c2d8		e3 c2 b4 89 c9 89		        .word nt_recurse, xt_leave, z_leave
>c2de		6c 65 61 76 65			        .text "leave"
.c2e3						nt_recurse:
>c2e3		07 0d				        .byte 7, CO+IM+NN
>c2e5		f2 c2 ff 8e 3b 8f		        .word nt_quit, xt_recurse, z_recurse
>c2eb		72 65 63 75 72 73 65		        .text "recurse"
.c2f2						nt_quit:
>c2f2		04 00				        .byte 4, 0
>c2f4		fe c2 60 80 af 80		        .word nt_begin, xt_quit, z_quit
>c2fa		71 75 69 74			        .text "quit"
.c2fe						nt_begin:
>c2fe		05 05				        .byte 5, CO+IM
>c300		0b c3 1b 89 25 89		        .word nt_again, xt_begin, z_begin
>c306		62 65 67 69 6e			        .text "begin"
.c30b						nt_again:
>c30b		05 15				        .byte 5, CO+IM+UF
>c30d		18 c3 1f 82 25 82		        .word nt_state, xt_again, z_again
>c313		61 67 61 69 6e			        .text "again"
.c318						nt_state:
>c318		05 00				        .byte 5, 0
>c31a		25 c3 07 92 11 92		        .word nt_evaluate, xt_state, z_state
>c320		73 74 61 74 65			        .text "state"
.c325						nt_evaluate:
>c325		08 10				        .byte 8, UF
>c327		35 c3 b2 88 05 89		        .word nt_base, xt_evaluate, z_evaluate
>c32d		65 76 61 6c 75 61 74 65		        .text "evaluate"
.c335						nt_base:
>c335		04 00				        .byte 4, 0
>c337		41 c3 fb 82 03 83		        .word nt_digit_question, xt_base, z_base
>c33d		62 61 73 65			        .text "base"
.c341						nt_digit_question:
>c341		06 10				        .byte 6, UF
>c343		4f c3 94 9a c8 9a		        .word nt_number, xt_digit_question, z_digit_question
>c349		64 69 67 69 74 3f		        .text "digit?"
.c34f						nt_number:
>c34f		06 10				        .byte 6, UF
>c351		5d c3 91 9c 8a 9d		        .word nt_to_number, xt_number, z_number
>c357		6e 75 6d 62 65 72		        .text "number"
.c35d						nt_to_number:
>c35d		07 10				        .byte 7, UF
>c35f		6c c3 c6 92 65 93		        .word nt_hex, xt_to_number, z_to_number
>c365		3e 6e 75 6d 62 65 72		        .text ">number"
.c36c						nt_hex:
>c36c		03 00				        .byte 3, 0
>c36e		77 c3 26 89 2c 89		        .word nt_decimal, xt_hex, z_hex
>c374		68 65 78			        .text "hex"
.c377						nt_decimal:
>c377		07 00				        .byte 7, 0
>c379		86 c3 0a 85 10 85		        .word nt_count, xt_decimal, z_decimal
>c37f		64 65 63 69 6d 61 6c		        .text "decimal"
.c386						nt_count:
>c386		05 10				        .byte 5, UF
>c388		93 c3 26 84 39 84		        .word nt_m_star, xt_count, z_count
>c38e		63 6f 75 6e 74			        .text "count"
.c393						nt_m_star:
>c393		02 10				        .byte 2, UF
>c395		9d c3 21 8b 3b 8b		        .word nt_um_star, xt_m_star, z_m_star
>c39b		6d 2a				        .text "m*"
.c39d						nt_um_star:
>c39d		03 10				        .byte 3, UF
>c39f		a8 c3 76 95 bb 95		        .word nt_star, xt_um_star, z_um_star
>c3a5		75 6d 2a			        .text "um*"
.c3a8						nt_star:
>c3a8		01 10				        .byte 1, UF
>c3aa		b1 c3 e5 91 ed 91		        .word nt_um_slash_mod, xt_star, z_star
>c3b0		2a				        .text "*"
.c3b1						nt_um_slash_mod:
>c3b1		06 10				        .byte 6, UF
>c3b3		bf c3 34 95 75 95		        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
>c3b9		75 6d 2f 6d 6f 64		        .text "um/mod"
.c3bf						nt_sm_slash_rem:
>c3bf		06 10				        .byte 6, UF
>c3c1		cd c3 7c 91 a4 91		        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
>c3c7		73 6d 2f 72 65 6d		        .text "sm/rem"
.c3cd						nt_fm_slash_mod:
>c3cd		06 10				        .byte 6, UF
>c3cf		db c3 75 88 ab 88		        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
>c3d5		66 6d 2f 6d 6f 64		        .text "fm/mod"
.c3db						nt_slash:
>c3db		01 10				        .byte 1, UF
>c3dd		e4 c3 5f 91 7b 91		        .word nt_slash_mod, xt_slash, z_slash
>c3e3		2f				        .text "/"
.c3e4						nt_slash_mod:
>c3e4		04 10				        .byte 4, UF
>c3e6		f0 c3 64 91 7b 91		        .word nt_mod, xt_slash_mod, z_slash_mod
>c3ec		2f 6d 6f 64			        .text "/mod"
.c3f0						nt_mod:
>c3f0		03 10				        .byte 3, UF
>c3f2		fb c3 f7 8b ff 8b		        .word nt_star_slash_mod, xt_mod, z_mod
>c3f8		6d 6f 64			        .text "mod"
.c3fb						nt_star_slash_mod:
>c3fb		05 10				        .byte 5, UF
>c3fd		08 c4 f7 91 06 92		        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
>c403		2a 2f 6d 6f 64			        .text "*/mod"
.c408						nt_star_slash:
>c408		02 10				        .byte 2, UF
>c40a		12 c4 ee 91 f6 91		        .word nt_backslash, xt_star_slash, z_star_slash
>c410		2a 2f				        .text "*/"
.c412						nt_backslash:
>c412		01 04				        .byte 1, IM
>c414		1b c4 d0 82 fa 82		        .word nt_move, xt_backslash, z_backslash
>c41a		5c				        .byte '\'
.c41b						nt_move:
>c41b		04 18				        .byte 4, NN+UF
>c41d		27 c4 00 8c 1e 8c		        .word nt_cmove_up, xt_move, z_move
>c423		6d 6f 76 65			        .text "move"
.c427						nt_cmove_up:
>c427		06 10				        .byte 6, UF
>c429		35 c4 7d 9f b7 9f		        .word nt_cmove, xt_cmove_up, z_cmove_up
>c42f		63 6d 6f 76 65 3e		        .text "cmove>"
.c435						nt_cmove:
>c435		05 10				        .byte 5, UF
>c437		42 c4 42 9f 7c 9f		        .word nt_pad, xt_cmove, z_cmove
>c43d		63 6d 6f 76 65			        .text "cmove"
.c442						nt_pad:
>c442		03 00				        .byte 3, 0
>c444		4d c4 13 8d 22 8d		        .word nt_cleave, xt_pad, z_pad
>c44a		70 61 64			        .text "pad"
.c44d						nt_cleave:
>c44d		06 10				        .byte 6, UF
>c44f		5b c4 47 9a 93 9a		        .word nt_hexstore, xt_cleave, z_cleave
>c455		63 6c 65 61 76 65		        .text "cleave"
.c45b						nt_hexstore:
>c45b		08 10				        .byte 8, UF
>c45d		6b c4 34 9b 86 9b		        .word nt_within, xt_hexstore, z_hexstore
>c463		68 65 78 73 74 6f 72 65		        .text "hexstore"
.c46b						nt_within:
>c46b		06 10				        .byte 6, UF
>c46d		79 c4 00 96 15 96		        .word nt_to_in, xt_within, z_within
>c473		77 69 74 68 69 6e		        .text "within"
.c479						nt_to_in:
>c479		03 00				        .byte 3, 0
>c47b		84 c4 bb 92 c5 92		        .word nt_less_number_sign, xt_to_in, z_to_in
>c481		3e 69 6e			        .text ">in"
.c484						nt_less_number_sign:
>c484		02 00				        .byte 2, 0
>c486		8e c4 cf 89 dc 89		        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
>c48c		3c 23				        .text "<#"
.c48e						nt_number_sign:
>c48e		01 10				        .byte 1, UF
>c490		97 c4 5c 8c 90 8c		        .word nt_number_sign_s, xt_number_sign, z_number_sign
>c496		23				        .text "#"
.c497						nt_number_sign_s:
>c497		02 10				        .byte 2, UF
>c499		a1 c4 b3 8c c3 8c		        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
>c49f		23 73				        .text "#s"
.c4a1						nt_number_sign_greater:
>c4a1		02 10				        .byte 2, UF
>c4a3		ab c4 91 8c b2 8c		        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
>c4a9		23 3e				        .text "#>"
.c4ab						nt_hold:
>c4ab		04 10				        .byte 4, UF
>c4ad		b7 c4 2d 89 3e 89		        .word nt_sign, xt_hold, z_hold
>c4b3		68 6f 6c 64			        .text "hold"
.c4b7						nt_sign:
>c4b7		04 10				        .byte 4, UF
>c4b9		c3 c4 4a 91 5e 91		        .word nt_output, xt_sign, z_sign
>c4bf		73 69 67 6e			        .text "sign"
.c4c3						nt_output:
>c4c3		06 00				        .byte 6, 0
>c4c5		d1 c4 94 9d 9e 9d		        .word nt_input, xt_output, z_output
>c4cb		6f 75 74 70 75 74		        .text "output"
.c4d1						nt_input:
>c4d1		05 00				        .byte 5, 0
>c4d3		de c4 87 9b 91 9b		        .word nt_cr, xt_input, z_input
>c4d9		69 6e 70 75 74			        .text "input"
.c4de						nt_cr:
>c4de		02 00				        .byte 2, 0
>c4e0		e8 c4 3a 84 3f 84		        .word nt_page, xt_cr, z_cr
>c4e6		63 72				        .text "cr"
.c4e8						nt_page:
>c4e8		04 00				        .byte 4, 0
>c4ea		f4 c4 23 8d 40 8d		        .word nt_at_xy, xt_page, z_page
>c4f0		70 61 67 65			        .text "page"
.c4f4						nt_at_xy:
>c4f4		05 10				        .byte 5, UF
>c4f6		01 c5 a2 82 cf 82		        .word nt_marker, xt_at_xy, z_at_xy
>c4fc		61 74 2d 78 79			        .text "at-xy"
.c501						nt_marker:
>c501		06 04				        .byte 6, IM
>c503		0f c5 3c 8b 76 8b		        .word nt_words, xt_marker, z_marker
>c509		6d 61 72 6b 65 72		        .text "marker"
.c50f						nt_words:
>c50f		05 00				        .byte 5, 0
>c511		1c c5 b1 99 0d 9a		        .word nt_wordsize, xt_words, z_words
>c517		77 6f 72 64 73			        .text "words"
.c51c						nt_wordsize:
>c51c		08 10				        .byte 8, UF
>c51e		2c c5 d0 9d f0 9d		        .word nt_aligned, xt_wordsize, z_wordsize
>c524		77 6f 72 64 73 69 7a 65		        .text "wordsize"
.c52c						nt_aligned:
>c52c		07 00				        .byte 7, 0
>c52e		3b c5 26 82 26 82		        .word nt_align, xt_aligned, z_aligned   ; same code as ALIGN
>c534		61 6c 69 67 6e 65 64		        .text "aligned"
.c53b						nt_align:
>c53b		05 00				        .byte 5, 0
>c53d		48 c5 26 82 26 82		        .word nt_bell, xt_align, z_align
>c543		61 6c 69 67 6e			        .text "align"
.c548						nt_bell:
>c548		04 00				        .byte 4, 0
>c54a		54 c5 28 9a 2d 9a		        .word nt_dump, xt_bell, z_bell
>c550		62 65 6c 6c			        .text "bell"
.c554						nt_dump:
>c554		04 10				        .byte 4, UF
>c556		60 c5 a1 98 07 99		        .word nt_dot_s, xt_dump, z_dump
>c55c		64 75 6d 70			        .text "dump"
.c560						nt_dot_s:
>c560		02 00				        .byte 2, 0
>c562		6a c5 5d 98 a0 98		        .word +, xt_dot_s, z_dot_s
>c568		2e 73				        .text ".s"
.c56a						+
.c56a						nt_disasm:
>c56a		06 10				        .byte 6, UF
>c56c		78 c5 9e a1 a4 a1		        .word +, xt_disasm, z_disasm
>c572		64 69 73 61 73 6d		        .text "disasm"
.c578						+
.c578						nt_compare:
>c578		07 10				        .byte 7, UF
>c57a		87 c5 b8 9f 1c a0		        .word nt_search, xt_compare, z_compare
>c580		63 6f 6d 70 61 72 65		        .text "compare"
.c587						nt_search:
>c587		06 18				        .byte 6, UF+NN
>c589		95 c5 73 a0 11 a1		        .word +, xt_search, z_search
>c58f		73 65 61 72 63 68		        .text "search"
.c595						+
.c595						nt_environment_q:
>c595		0c 10				        .byte 12, UF
>c597		a9 c5 dd 86 59 87		        .word +, xt_environment_q, z_environment_q
>c59d		65 6e 76 69 72 6f 6e 6d		        .text "environment?"
>c5a5		65 6e 74 3f
.c5a9						+
.c5a9						nt_find:
>c5a9		04 10				        .byte 4, UF
>c5ab		b5 c5 2d 88 74 88		        .word nt_word, xt_find, z_find
>c5b1		66 69 6e 64			        .text "find"
.c5b5						nt_word:
>c5b5		04 10				        .byte 4, UF
>c5b7		c1 c5 16 96 59 96		        .word nt_paren, xt_word, z_word
>c5bd		77 6f 72 64			        .text "word"
.c5c1						nt_paren:
>c5c1		01 04				        .byte 1, IM
>c5c3		ca c5 41 8d 50 8d		        .word nt_dot_paren, xt_paren, z_paren
>c5c9		28				        .text "("
.c5ca						nt_dot_paren:
>c5ca		02 04				        .byte 2, IM
>c5cc		d4 c5 52 86 60 86		        .word nt_if, xt_dot_paren, z_dot_paren
>c5d2		2e 28				        .text ".("
.c5d4						nt_if:
>c5d4		02 0d				        .byte 2, IM+CO+NN
>c5d6		de c5 54 89 57 89		        .word nt_then, xt_if, z_if
>c5dc		69 66				        .text "if"
.c5de						nt_then:
>c5de		04 0d				        .byte 4, IM+CO+NN
>c5e0		ea c5 b4 86 bd 86		        .word nt_else, xt_then, z_then
>c5e6		74 68 65 6e			        .text "then"
.c5ea						nt_else:
>c5ea		04 0d				        .byte 4, IM+CO+NN
>c5ec		f6 c5 ae 86 bd 86		        .word nt_repeat, xt_else, z_else
>c5f2		65 6c 73 65			        .text "else"
.c5f6						nt_repeat:
>c5f6		06 0d				        .byte 6, IM+CO+NN
>c5f8		04 c6 7e 8f 84 8f		        .word nt_until, xt_repeat, z_repeat
>c5fe		72 65 70 65 61 74		        .text "repeat"
.c604						nt_until:
>c604		05 0d				        .byte 5, IM+CO+NN
>c606		11 c6 cc 95 cf 95		        .word nt_while, xt_until, z_until
>c60c		75 6e 74 69 6c			        .text "until"
.c611						nt_while:
>c611		05 0d				        .byte 5, IM+CO+NN
>c613		1e c6 f9 95 ff 95		        .word nt_case, xt_while, z_while
>c619		77 68 69 6c 65			        .text "while"
.c61e						nt_case:
>c61e		04 0d				        .byte 4, IM+CO+NN
>c620		2a c6 f1 9d f7 9d		        .word nt_of, xt_case, z_case    ; shares code with ZERO
>c626		63 61 73 65			        .text "case"
.c62a						nt_of:
>c62a		02 0d				        .byte 2, IM+CO+NN
>c62c		34 c6 c4 8c dc 8c		        .word nt_endof, xt_of, z_of
>c632		6f 66				        .text "of"
.c634						nt_endof:
>c634		05 0d				        .byte 5, IM+CO+NN
>c636		41 c6 ae 86 bd 86		        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
>c63c		65 6e 64 6f 66			        .text "endof"
.c641						nt_endcase:
>c641		07 0d				        .byte 7, IM+CO+NN
>c643		50 c6 c8 86 dc 86		        .word nt_defer_fetch, xt_endcase, z_endcase
>c649		65 6e 64 63 61 73 65		        .text "endcase"
.c650						nt_defer_fetch:
>c650		06 00				        .byte 6, 0
>c652		5e c6 44 85 4a 85		        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
>c658		64 65 66 65 72 40		        .text "defer@"
.c65e						nt_defer_store:
>c65e		06 00				        .byte 6, 0
>c660		6c c6 4b 85 51 85		        .word nt_is, xt_defer_store, z_defer_store
>c666		64 65 66 65 72 21		        .text "defer!"
.c66c						nt_is:
>c66c		02 04				        .byte 2, IM
>c66e		76 c6 74 89 8c 89		        .word nt_action_of, xt_is, z_is
>c674		69 73				        .text "is"
.c676						nt_action_of:
>c676		09 04				        .byte 9, IM
>c678		87 c6 06 82 1e 82		        .word nt_useraddr, xt_action_of, z_action_of
>c67e		61 63 74 69 6f 6e 2d 6f		        .text "action-of"
>c686		66
.c687						nt_useraddr:
>c687		08 00				        .byte 8, 0
>c689		97 c6 c5 9d cf 9d		        .word nt_buffer_colon, xt_useraddr, z_useraddr
>c68f		75 73 65 72 61 64 64 72		        .text "useraddr"
.c697						nt_buffer_colon:
>c697		07 00				        .byte 7, 0
>c699		a6 c6 1b 83 21 83		        .word +, xt_buffer_colon, z_buffer_colon
>c69f		62 75 66 66 65 72 3a		        .text "buffer:"
.c6a6						+
.c6a6						nt_buffstatus:
>c6a6		0a 00				        .byte 10, 0
>c6a8		b8 c6 cd af d2 af		        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
>c6ae		62 75 66 66 73 74 61 74		        .text "buffstatus"
>c6b6		75 73
.c6b8						nt_buffblocknum:
>c6b8		0c 00				        .byte 12, 0
>c6ba		cc c6 97 af 9c af		        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
>c6c0		62 75 66 66 62 6c 6f 63		        .text "buffblocknum"
>c6c8		6b 6e 75 6d
.c6cc						nt_blkbuffer:
>c6cc		09 00				        .byte 9, 0
>c6ce		dd c6 8d ad 9a ad		        .word nt_scr, xt_blkbuffer, z_blkbuffer
>c6d4		62 6c 6b 62 75 66 66 65		        .text "blkbuffer"
>c6dc		72
.c6dd						nt_scr:
>c6dd		03 08				        .byte 3, NN
>c6df		e8 c6 4f b0 54 b0		        .word nt_blk, xt_scr, z_scr
>c6e5		73 63 72			        .text "scr"
.c6e8						nt_blk:
>c6e8		03 08				        .byte 3, NN
>c6ea		f3 c6 88 ad 8d ad		        .word nt_block_write, xt_blk, z_blk
>c6f0		62 6c 6b			        .text "blk"
.c6f3						nt_block_write:
>c6f3		0b 08				        .byte 11, NN ; Deferred words need the HC (Code Field) flag.
>c6f5		06 c7 84 af 92 af		        .word nt_block_write_vector, xt_block_write, z_block_write
>c6fb		62 6c 6f 63 6b 2d 77 72		        .text "block-write"
>c703		69 74 65
.c706						nt_block_write_vector:
>c706		12 08				        .byte 18, NN ; Deferred words need the HC (Code Field) flag.
>c708		20 c7 92 af 97 af		        .word nt_block_read, xt_block_write_vector, z_block_write_vector
>c70e		62 6c 6f 63 6b 2d 77 72		        .text "block-write-vector"
>c716		69 74 65 2d 76 65 63 74 6f 72
.c720						nt_block_read:
>c720		0a 28				        .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
>c722		32 c7 6c af 7a af		        .word nt_block_read_vector, xt_block_read, z_block_read
>c728		62 6c 6f 63 6b 2d 72 65		        .text "block-read"
>c730		61 64
.c732						nt_block_read_vector:
>c732		11 28				        .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
>c734		4b c7 7a af 7f af		        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
>c73a		62 6c 6f 63 6b 2d 72 65		        .text "block-read-vector"
>c742		61 64 2d 76 65 63 74 6f 72
.c74b						nt_save_buffers:
>c74b		0c 00				        .byte 12, 0
>c74d		5f c7 34 b0 4e b0		        .word nt_block, xt_save_buffers, z_save_buffers
>c753		73 61 76 65 2d 62 75 66		        .text "save-buffers"
>c75b		66 65 72 73
.c75f						nt_block:
>c75f		05 00				        .byte 5, 0
>c761		6c c7 9b ad ed ad		        .word nt_update, xt_block, z_block
>c767		62 6c 6f 63 6b			        .text "block"
.c76c						nt_update:
>c76c		06 00				        .byte 6, 0
>c76e		7a c7 99 b0 a1 b0		        .word nt_buffer, xt_update, z_update
>c774		75 70 64 61 74 65		        .text "update"
.c77a						nt_buffer:
>c77a		06 00				        .byte 6, 0
>c77c		88 c7 9c af cc af		        .word nt_empty_buffers, xt_buffer, z_buffer
>c782		62 75 66 66 65 72		        .text "buffer"
.c788						nt_empty_buffers:
>c788		0d 00				        .byte 13, 0
>c78a		9d c7 d2 af d8 af		        .word nt_flush, xt_empty_buffers, z_empty_buffers
>c790		65 6d 70 74 79 2d 62 75		        .text "empty-buffers"
>c798		66 66 65 72 73
.c79d						nt_flush:
>c79d		05 00				        .byte 5, 0
>c79f		aa c7 d9 af e2 af		        .word nt_load, xt_flush, z_flush
>c7a5		66 6c 75 73 68			        .text "flush"
.c7aa						nt_load:
>c7aa		04 10				        .byte 4, UF
>c7ac		b6 c7 f0 af 33 b0		        .word nt_thru, xt_load, z_load
>c7b2		6c 6f 61 64			        .text "load"
.c7b6						nt_thru:
>c7b6		04 10				        .byte 4, UF
>c7b8		c2 c7 54 b0 98 b0		        .word +, xt_thru, z_thru
>c7be		74 68 72 75			        .text "thru"
.c7c2						+
.c7c2						nt_list:
>c7c2		04 10				        .byte 4, UF
>c7c4		ce c7 e3 af ef af		        .word nt_block_c65_init, xt_list, z_list
>c7ca		6c 69 73 74			        .text "list"
.c7ce						nt_block_c65_init:
>c7ce		0e 00				        .byte 14, 0
>c7d0		e4 c7 ee ad 23 ae		        .word +, xt_block_c65_init, z_block_c65_init
>c7d6		62 6c 6f 63 6b 2d 63 36		        .text "block-c65-init"
>c7de		35 2d 69 6e 69 74
.c7e4						+
.c7e4						nt_block_ramdrive_init:
>c7e4		13 10				        .byte 19, UF
>c7e6		ff c7 46 ae 53 ae		        .word +, xt_block_ramdrive_init, z_block_ramdrive_init
>c7ec		62 6c 6f 63 6b 2d 72 61		        .text "block-ramdrive-init"
>c7f4		6d 64 72 69 76 65 2d 69 6e 69 74
.c7ff						+
.c7ff						nt_definitions:
>c7ff		0b 00				        .byte 11, 0
>c801		12 c8 d7 b1 df b1		        .word nt_wordlist, xt_definitions, z_definitions
>c807		64 65 66 69 6e 69 74 69		        .text "definitions"
>c80f		6f 6e 73
.c812						nt_wordlist:
>c812		08 00				        .byte 8, 0
>c814		22 c8 42 b3 58 b3		        .word nt_search_wordlist, xt_wordlist, z_wordlist
>c81a		77 6f 72 64 6c 69 73 74		        .text "wordlist"
.c822						nt_search_wordlist:
>c822		0f 10				        .byte 15, UF
>c824		39 c8 7b b2 ee b2		        .word nt_set_current, xt_search_wordlist, z_search_wordlist
>c82a		73 65 61 72 63 68 2d 77		        .text "search-wordlist"
>c832		6f 72 64 6c 69 73 74
.c839						nt_set_current:
>c839		0b 10				        .byte 11, UF
>c83b		4c c8 ef b2 fa b2		        .word nt_get_current, xt_set_current, z_set_current
>c841		73 65 74 2d 63 75 72 72		        .text "set-current"
>c849		65 6e 74
.c84c						nt_get_current:
>c84c		0b 00				        .byte 11, 0
>c84e		5f c8 e7 b1 f1 b1		        .word nt_set_order, xt_get_current, z_get_current
>c854		67 65 74 2d 63 75 72 72		        .text "get-current"
>c85c		65 6e 74
.c85f						nt_set_order:
>c85f		09 00				        .byte 9, 0
>c861		70 c8 fb b2 2e b3		        .word nt_get_order, xt_set_order, z_set_order
>c867		73 65 74 2d 6f 72 64 65		        .text "set-order"
>c86f		72
.c870						nt_get_order:
>c870		09 00				        .byte 9, 0
>c872		81 c8 f2 b1 1a b2		        .word nt_root_wordlist, xt_get_order, z_get_order
>c878		67 65 74 2d 6f 72 64 65		        .text "get-order"
>c880		72
.c881						nt_root_wordlist:
>c881		0d 00				        .byte 13, 0
>c883		96 c8 72 b2 7a b2		        .word +, xt_root_wordlist, z_root_wordlist
>c889		72 6f 6f 74 2d 77 6f 72		        .text "root-wordlist"
>c891		64 6c 69 73 74
.c896						+
.c896						nt_assembler_wordlist:
>c896		12 00				        .byte 18, 0
>c898		b0 c8 bc 9d c4 9d		        .word +, xt_assembler_wordlist, z_assembler_wordlist
>c89e		61 73 73 65 6d 62 6c 65		        .text "assembler-wordlist"
>c8a6		72 2d 77 6f 72 64 6c 69 73 74
.c8b0						+
.c8b0						nt_editor_wordlist:
>c8b0		0f 00				        .byte 15, 0
>c8b2		c7 c8 8b 9d 93 9d		        .word +, xt_editor_wordlist, z_editor_wordlist
>c8b8		65 64 69 74 6f 72 2d 77		        .text "editor-wordlist"
>c8c0		6f 72 64 6c 69 73 74
.c8c7						+
.c8c7						nt_forth_wordlist:
>c8c7		0e 00				        .byte 14, 0
>c8c9		dd c8 f1 9d f7 9d		        .word nt_only, xt_forth_wordlist, z_forth_wordlist
>c8cf		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c8d7		72 64 6c 69 73 74
.c8dd						nt_only:
>c8dd		04 00				        .byte 4, 0
>c8df		e9 c8 1b b2 21 b2		        .word nt_also, xt_only, z_only
>c8e5		6f 6e 6c 79			        .text "only"
.c8e9						nt_also:
>c8e9		04 00				        .byte 4, 0
>c8eb		f5 c8 c7 b1 d6 b1		        .word nt_previous, xt_also, z_also
>c8f1		61 6c 73 6f			        .text "also"
.c8f5						nt_previous:
>c8f5		08 00				        .byte 8, 0
>c8f7		05 c9 65 b2 71 b2		        .word nt_to_order, xt_previous, z_previous
>c8fd		70 72 65 76 69 6f 75 73		        .text "previous"
.c905						nt_to_order:
>c905		06 00				        .byte 6, 0
>c907		13 c9 2f b3 41 b3		        .word nt_order, xt_to_order, z_to_order
>c90d		3e 6f 72 64 65 72		        .text ">order"
.c913						nt_order:
>c913		05 00				        .byte 5, 0
>c915		20 c9 22 b2 4c b2		        .word nt_forth, xt_order, z_order
>c91b		6f 72 64 65 72			        .text "order"
.c920						nt_forth:
>c920		05 00				        .byte 5, 0
>c922		2d c9 e0 b1 e6 b1		        .word +, xt_forth, z_forth
>c928		66 6f 72 74 68			        .text "forth"
.c92d						+
>c92d		03 08				nt_see: .byte 3, NN
>c92f		38 c9 23 99 b0 99		        .word +, xt_see, z_see
>c935		73 65 65			        .text "see"
.c938						+
.c938						nt_ed:
>c938		03 08				        .byte 3, NN
>c93a		43 c9 95 a7 98 a7		        .word +, xt_ed, z_ed
>c940		65 64 3a			        .text "ed:"
.c943						+
.c943						nt_cold:
>c943		04 00				        .byte 4, 0
>c945		4f c9 00 80 af 80		        .word nt_bye, xt_cold, z_cold
>c94b		63 6f 6c 64			        .text "cold"
.c94f						nt_bye:
>c94f		03				        .byte 3         ; length of word strings
>c950		00				        .byte 0         ; status byte
>c951		00 00				        .word 0000      ; next word in Dictionary, 0000 signals end
>c953		5a 98				        .word xt_bye    ; start of code block (xt of this word)
>c955		5d 98				        .word z_bye     ; end of code (RTS)
>c957		62 79 65			        .text "bye"     ; word name, always lower case, not zero-terminated
.c95a						root_dictionary_start:
.c95a						nt_root_set_order:
>c95a		09 00				        .byte 9, 0
>c95c		6b c9 fb b2 2e b3		        .word nt_root_forth, xt_set_order, z_set_order
>c962		73 65 74 2d 6f 72 64 65		        .text "set-order"
>c96a		72
.c96b						nt_root_forth:
>c96b		05 00				        .byte 5, 0
>c96d		78 c9 e0 b1 e6 b1		        .word nt_root_forth_wordlist, xt_forth, z_forth
>c973		66 6f 72 74 68			        .text "forth"
.c978						nt_root_forth_wordlist:
>c978		0e 00				        .byte 14, 0
>c97a		8e c9 f1 9d f7 9d		        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
>c980		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c988		72 64 6c 69 73 74
.c98e						nt_root_words:
>c98e		05 00				        .byte 5, 0
>c990		00 00 b1 99 0d 9a		        .word 0000, xt_words, z_words
>c996		77 6f 72 64 73			        .text "words"
.c99b						editor_dictionary_start:
.c99b						nt_editor_o:
>c99b		01 00				        .byte 1, 0
>c99d		a4 c9 81 b1 c6 b1		        .word nt_editor_line, xt_editor_o, z_editor_o
>c9a3		6f				        .text "o"
.c9a4						nt_editor_line:
>c9a4		04 10				        .byte 4, UF
>c9a6		b0 c9 68 b1 80 b1		        .word nt_editor_l, xt_editor_line, z_editor_line
>c9ac		6c 69 6e 65			        .text "line"
.c9b0						nt_editor_l:
>c9b0		01 00				        .byte 1, 0
>c9b2		b9 c9 ee b0 67 b1		        .word nt_editor_el, xt_editor_l, z_editor_l
>c9b8		6c				        .text "l"
.c9b9						nt_editor_el:
>c9b9		02 00				        .byte 2, 0
>c9bb		c3 c9 dc b0 ed b0		        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
>c9c1		65 6c				        .text "el"
.c9c3						nt_editor_erase_screen:
>c9c3		0c 00				        .byte 12, 0
>c9c5		d7 c9 ca b0 db b0		        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
>c9cb		65 72 61 73 65 2d 73 63		        .text "erase-screen"
>c9d3		72 65 65 6e
.c9d7						nt_editor_enter_screen:
>c9d7		0c 00				        .byte 12, 0
>c9d9		00 00 ae b0 c9 b0		        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
>c9df		65 6e 74 65 72 2d 73 63		        .text "enter-screen"
>c9e7		72 65 65 6e
.c9eb						assembler_dictionary_start:
.c9eb						nt_asm_adc_h:
>c9eb		05 0c						.byte 5, IM+NN
>c9ed		f8 c9				                .word nt_asm_adc_x
>c9ef		df a3 e4 a3					.word xt_asm_adc_h, z_asm_adc_h
>c9f3		61 64 63 2e 23					.text "adc.#"
.c9f8						nt_asm_adc_x:
>c9f8		05 0c						.byte 5, IM+NN
>c9fa		05 ca				                .word nt_asm_adc_y
>c9fc		e4 a3 e9 a3					.word xt_asm_adc_x, z_asm_adc_x
>ca00		61 64 63 2e 78					.text "adc.x"
.ca05						nt_asm_adc_y:
>ca05		05 0c						.byte 5, IM+NN
>ca07		12 ca				                .word nt_asm_adc_z
>ca09		e9 a3 ee a3					.word xt_asm_adc_y, z_asm_adc_y
>ca0d		61 64 63 2e 79					.text "adc.y"
.ca12						nt_asm_adc_z:
>ca12		05 0c						.byte 5, IM+NN
>ca14		1f ca				                .word nt_asm_adc_zi
>ca16		ee a3 f3 a3					.word xt_asm_adc_z, z_asm_adc_z
>ca1a		61 64 63 2e 7a					.text "adc.z"
.ca1f						nt_asm_adc_zi:
>ca1f		06 0c						.byte 6, IM+NN
>ca21		2d ca				                .word nt_asm_adc_ziy
>ca23		f3 a3 f8 a3					.word xt_asm_adc_zi, z_asm_adc_zi
>ca27		61 64 63 2e 7a 69				.text "adc.zi"
.ca2d						nt_asm_adc_ziy:
>ca2d		07 0c						.byte 7, IM+NN
>ca2f		3c ca				                .word nt_asm_adc_zx
>ca31		f8 a3 fd a3					.word xt_asm_adc_ziy, z_asm_adc_ziy
>ca35		61 64 63 2e 7a 69 79				.text "adc.ziy"
.ca3c						nt_asm_adc_zx:
>ca3c		06 0c						.byte 6, IM+NN
>ca3e		4a ca				                .word nt_asm_adc_zxi
>ca40		fd a3 02 a4					.word xt_asm_adc_zx, z_asm_adc_zx
>ca44		61 64 63 2e 7a 78				.text "adc.zx"
.ca4a						nt_asm_adc_zxi:
>ca4a		07 0c						.byte 7, IM+NN
>ca4c		59 ca				                .word nt_asm_and
>ca4e		02 a4 07 a4					.word xt_asm_adc_zxi, z_asm_adc_zxi
>ca52		61 64 63 2e 7a 78 69				.text "adc.zxi"
.ca59						nt_asm_and:
>ca59		04 0c						.byte 4, IM+NN
>ca5b		65 ca				                .word nt_asm_and_h
>ca5d		07 a4 0c a4					.word xt_asm_and, z_asm_and
>ca61		61 6e 64 2e					.text "and."
.ca65						nt_asm_and_h:
>ca65		05 0c						.byte 5, IM+NN
>ca67		72 ca				                .word nt_asm_and_x
>ca69		0c a4 11 a4					.word xt_asm_and_h, z_asm_and_h
>ca6d		61 6e 64 2e 23					.text "and.#"
.ca72						nt_asm_and_x:
>ca72		05 0c						.byte 5, IM+NN
>ca74		7f ca				                .word nt_asm_and_y
>ca76		11 a4 16 a4					.word xt_asm_and_x, z_asm_and_x
>ca7a		61 6e 64 2e 78					.text "and.x"
.ca7f						nt_asm_and_y:
>ca7f		05 0c						.byte 5, IM+NN
>ca81		8c ca				                .word nt_asm_and_z
>ca83		16 a4 1b a4					.word xt_asm_and_y, z_asm_and_y
>ca87		61 6e 64 2e 79					.text "and.y"
.ca8c						nt_asm_and_z:
>ca8c		05 0c						.byte 5, IM+NN
>ca8e		99 ca				                .word nt_asm_and_zi
>ca90		1b a4 20 a4					.word xt_asm_and_z, z_asm_and_z
>ca94		61 6e 64 2e 7a					.text "and.z"
.ca99						nt_asm_and_zi:
>ca99		06 0c						.byte 6, IM+NN
>ca9b		a7 ca				                .word nt_asm_and_ziy
>ca9d		20 a4 25 a4					.word xt_asm_and_zi, z_asm_and_zi
>caa1		61 6e 64 2e 7a 69				.text "and.zi"
.caa7						nt_asm_and_ziy:
>caa7		07 0c						.byte 7, IM+NN
>caa9		b6 ca				                .word nt_asm_and_zx
>caab		25 a4 2a a4					.word xt_asm_and_ziy, z_asm_and_ziy
>caaf		61 6e 64 2e 7a 69 79				.text "and.ziy"
.cab6						nt_asm_and_zx:
>cab6		06 0c						.byte 6, IM+NN
>cab8		c4 ca				                .word nt_asm_and_zxi
>caba		2a a4 2f a4					.word xt_asm_and_zx, z_asm_and_zx
>cabe		61 6e 64 2e 7a 78				.text "and.zx"
.cac4						nt_asm_and_zxi:
>cac4		07 0c						.byte 7, IM+NN
>cac6		d3 ca				                .word nt_asm_asl
>cac8		2f a4 34 a4					.word xt_asm_and_zxi, z_asm_and_zxi
>cacc		61 6e 64 2e 7a 78 69				.text "and.zxi"
.cad3						nt_asm_asl:
>cad3		03 0c						.byte 3, IM+NN
>cad5		de ca				                .word nt_asm_asl_a
>cad7		34 a4 39 a4					.word xt_asm_asl, z_asm_asl
>cadb		61 73 6c					.text "asl"
.cade						nt_asm_asl_a:
>cade		05 0c						.byte 5, IM+NN
>cae0		eb ca				                .word nt_asm_asl_x
>cae2		39 a4 3e a4					.word xt_asm_asl_a, z_asm_asl_a
>cae6		61 73 6c 2e 61					.text "asl.a"
.caeb						nt_asm_asl_x:
>caeb		05 0c						.byte 5, IM+NN
>caed		f8 ca				                .word nt_asm_asl_z
>caef		3e a4 43 a4					.word xt_asm_asl_x, z_asm_asl_x
>caf3		61 73 6c 2e 78					.text "asl.x"
.caf8						nt_asm_asl_z:
>caf8		05 0c						.byte 5, IM+NN
>cafa		05 cb				                .word nt_asm_asl_zx
>cafc		43 a4 48 a4					.word xt_asm_asl_z, z_asm_asl_z
>cb00		61 73 6c 2e 7a					.text "asl.z"
.cb05						nt_asm_asl_zx:
>cb05		06 0c						.byte 6, IM+NN
>cb07		13 cb				                .word nt_asm_bcc
>cb09		48 a4 4d a4					.word xt_asm_asl_zx, z_asm_asl_zx
>cb0d		61 73 6c 2e 7a 78				.text "asl.zx"
.cb13						nt_asm_bcc:
>cb13		03 0c						.byte 3, IM+NN
>cb15		1e cb				                .word nt_asm_bcs
>cb17		4d a4 52 a4					.word xt_asm_bcc, z_asm_bcc
>cb1b		62 63 63					.text "bcc"
.cb1e						nt_asm_bcs:
>cb1e		03 0c						.byte 3, IM+NN
>cb20		29 cb				                .word nt_asm_beq
>cb22		52 a4 59 a4					.word xt_asm_bcs, z_asm_bcs
>cb26		62 63 73					.text "bcs"
.cb29						nt_asm_beq:
>cb29		03 0c						.byte 3, IM+NN
>cb2b		34 cb				                .word nt_asm_bit
>cb2d		59 a4 5e a4					.word xt_asm_beq, z_asm_beq
>cb31		62 65 71					.text "beq"
.cb34						nt_asm_bit:
>cb34		03 0c						.byte 3, IM+NN
>cb36		3f cb				                .word nt_asm_bit_h
>cb38		5e a4 63 a4					.word xt_asm_bit, z_asm_bit
>cb3c		62 69 74					.text "bit"
.cb3f						nt_asm_bit_h:
>cb3f		05 0c						.byte 5, IM+NN
>cb41		4c cb				                .word nt_asm_bit_x
>cb43		63 a4 68 a4					.word xt_asm_bit_h, z_asm_bit_h
>cb47		62 69 74 2e 23					.text "bit.#"
.cb4c						nt_asm_bit_x:
>cb4c		05 0c						.byte 5, IM+NN
>cb4e		59 cb				                .word nt_asm_bit_z
>cb50		68 a4 6d a4					.word xt_asm_bit_x, z_asm_bit_x
>cb54		62 69 74 2e 78					.text "bit.x"
.cb59						nt_asm_bit_z:
>cb59		05 0c						.byte 5, IM+NN
>cb5b		66 cb				                .word nt_asm_bit_zx
>cb5d		6d a4 72 a4					.word xt_asm_bit_z, z_asm_bit_z
>cb61		62 69 74 2e 7a					.text "bit.z"
.cb66						nt_asm_bit_zx:
>cb66		06 0c						.byte 6, IM+NN
>cb68		74 cb				                .word nt_asm_bmi
>cb6a		72 a4 77 a4					.word xt_asm_bit_zx, z_asm_bit_zx
>cb6e		62 69 74 2e 7a 78				.text "bit.zx"
.cb74						nt_asm_bmi:
>cb74		03 0c						.byte 3, IM+NN
>cb76		7f cb				                .word nt_asm_bne
>cb78		77 a4 7c a4					.word xt_asm_bmi, z_asm_bmi
>cb7c		62 6d 69					.text "bmi"
.cb7f						nt_asm_bne:
>cb7f		03 0c						.byte 3, IM+NN
>cb81		8a cb				                .word nt_asm_bpl
>cb83		7c a4 81 a4					.word xt_asm_bne, z_asm_bne
>cb87		62 6e 65					.text "bne"
.cb8a						nt_asm_bpl:
>cb8a		03 0c						.byte 3, IM+NN
>cb8c		95 cb				                .word nt_asm_bra
>cb8e		81 a4 86 a4					.word xt_asm_bpl, z_asm_bpl
>cb92		62 70 6c					.text "bpl"
.cb95						nt_asm_bra:
>cb95		03 0c						.byte 3, IM+NN
>cb97		a0 cb				                .word nt_asm_brk
>cb99		86 a4 8b a4					.word xt_asm_bra, z_asm_bra
>cb9d		62 72 61					.text "bra"
.cba0						nt_asm_brk:
>cba0		03 0c						.byte 3, IM+NN
>cba2		ab cb				                .word nt_asm_bvc
>cba4		8b a4 90 a4					.word xt_asm_brk, z_asm_brk
>cba8		62 72 6b					.text "brk"
.cbab						nt_asm_bvc:
>cbab		03 0c						.byte 3, IM+NN
>cbad		b6 cb				                .word nt_asm_bvs
>cbaf		90 a4 95 a4					.word xt_asm_bvc, z_asm_bvc
>cbb3		62 76 63					.text "bvc"
.cbb6						nt_asm_bvs:
>cbb6		03 0c						.byte 3, IM+NN
>cbb8		c1 cb				                .word nt_asm_clc
>cbba		95 a4 9a a4					.word xt_asm_bvs, z_asm_bvs
>cbbe		62 76 73					.text "bvs"
.cbc1						nt_asm_clc:
>cbc1		03 0c						.byte 3, IM+NN
>cbc3		cc cb				                .word nt_asm_cld
>cbc5		9a a4 9f a4					.word xt_asm_clc, z_asm_clc
>cbc9		63 6c 63					.text "clc"
.cbcc						nt_asm_cld:
>cbcc		03 0c						.byte 3, IM+NN
>cbce		d7 cb				                .word nt_asm_cli
>cbd0		9f a4 a4 a4					.word xt_asm_cld, z_asm_cld
>cbd4		63 6c 64					.text "cld"
.cbd7						nt_asm_cli:
>cbd7		03 0c						.byte 3, IM+NN
>cbd9		e2 cb				                .word nt_asm_clv
>cbdb		a4 a4 a9 a4					.word xt_asm_cli, z_asm_cli
>cbdf		63 6c 69					.text "cli"
.cbe2						nt_asm_clv:
>cbe2		03 0c						.byte 3, IM+NN
>cbe4		ed cb				                .word nt_asm_cmp
>cbe6		a9 a4 ae a4					.word xt_asm_clv, z_asm_clv
>cbea		63 6c 76					.text "clv"
.cbed						nt_asm_cmp:
>cbed		03 0c						.byte 3, IM+NN
>cbef		f8 cb				                .word nt_asm_cmp_h
>cbf1		ae a4 b3 a4					.word xt_asm_cmp, z_asm_cmp
>cbf5		63 6d 70					.text "cmp"
.cbf8						nt_asm_cmp_h:
>cbf8		05 0c						.byte 5, IM+NN
>cbfa		05 cc				                .word nt_asm_cmp_x
>cbfc		b3 a4 b8 a4					.word xt_asm_cmp_h, z_asm_cmp_h
>cc00		63 6d 70 2e 23					.text "cmp.#"
.cc05						nt_asm_cmp_x:
>cc05		05 0c						.byte 5, IM+NN
>cc07		12 cc				                .word nt_asm_cmp_y
>cc09		b8 a4 bd a4					.word xt_asm_cmp_x, z_asm_cmp_x
>cc0d		63 6d 70 2e 78					.text "cmp.x"
.cc12						nt_asm_cmp_y:
>cc12		05 0c						.byte 5, IM+NN
>cc14		1f cc				                .word nt_asm_cmp_z
>cc16		bd a4 c2 a4					.word xt_asm_cmp_y, z_asm_cmp_y
>cc1a		63 6d 70 2e 79					.text "cmp.y"
.cc1f						nt_asm_cmp_z:
>cc1f		05 0c						.byte 5, IM+NN
>cc21		2c cc				                .word nt_asm_cmp_zi
>cc23		c2 a4 c7 a4					.word xt_asm_cmp_z, z_asm_cmp_z
>cc27		63 6d 70 2e 7a					.text "cmp.z"
.cc2c						nt_asm_cmp_zi:
>cc2c		06 0c						.byte 6, IM+NN
>cc2e		3a cc				                .word nt_asm_cmp_ziy
>cc30		c7 a4 cc a4					.word xt_asm_cmp_zi, z_asm_cmp_zi
>cc34		63 6d 70 2e 7a 69				.text "cmp.zi"
.cc3a						nt_asm_cmp_ziy:
>cc3a		07 0c						.byte 7, IM+NN
>cc3c		49 cc				                .word nt_asm_cmp_zx
>cc3e		cc a4 d1 a4					.word xt_asm_cmp_ziy, z_asm_cmp_ziy
>cc42		63 6d 70 2e 7a 69 79				.text "cmp.ziy"
.cc49						nt_asm_cmp_zx:
>cc49		06 0c						.byte 6, IM+NN
>cc4b		57 cc				                .word nt_asm_cmp_zxi
>cc4d		d1 a4 d6 a4					.word xt_asm_cmp_zx, z_asm_cmp_zx
>cc51		63 6d 70 2e 7a 78				.text "cmp.zx"
.cc57						nt_asm_cmp_zxi:
>cc57		07 0c						.byte 7, IM+NN
>cc59		66 cc				                .word nt_asm_cpx
>cc5b		d6 a4 db a4					.word xt_asm_cmp_zxi, z_asm_cmp_zxi
>cc5f		63 6d 70 2e 7a 78 69				.text "cmp.zxi"
.cc66						nt_asm_cpx:
>cc66		03 0c						.byte 3, IM+NN
>cc68		71 cc				                .word nt_asm_cpx_h
>cc6a		db a4 e0 a4					.word xt_asm_cpx, z_asm_cpx
>cc6e		63 70 78					.text "cpx"
.cc71						nt_asm_cpx_h:
>cc71		05 0c						.byte 5, IM+NN
>cc73		7e cc				                .word nt_asm_cpx_z
>cc75		e0 a4 e5 a4					.word xt_asm_cpx_h, z_asm_cpx_h
>cc79		63 70 78 2e 23					.text "cpx.#"
.cc7e						nt_asm_cpx_z:
>cc7e		05 0c						.byte 5, IM+NN
>cc80		8b cc				                .word nt_asm_cpy
>cc82		e5 a4 ea a4					.word xt_asm_cpx_z, z_asm_cpx_z
>cc86		63 70 78 2e 7a					.text "cpx.z"
.cc8b						nt_asm_cpy:
>cc8b		03 0c						.byte 3, IM+NN
>cc8d		96 cc				                .word nt_asm_cpy_h
>cc8f		ea a4 f1 a4					.word xt_asm_cpy, z_asm_cpy
>cc93		63 70 79					.text "cpy"
.cc96						nt_asm_cpy_h:
>cc96		05 0c						.byte 5, IM+NN
>cc98		a3 cc				                .word nt_asm_cpy_z
>cc9a		f1 a4 f6 a4					.word xt_asm_cpy_h, z_asm_cpy_h
>cc9e		63 70 79 2e 23					.text "cpy.#"
.cca3						nt_asm_cpy_z:
>cca3		05 0c						.byte 5, IM+NN
>cca5		b0 cc				                .word nt_asm_dec
>cca7		f6 a4 fb a4					.word xt_asm_cpy_z, z_asm_cpy_z
>ccab		63 70 79 2e 7a					.text "cpy.z"
.ccb0						nt_asm_dec:
>ccb0		03 0c						.byte 3, IM+NN
>ccb2		bb cc				                .word nt_asm_dec_a
>ccb4		fb a4 00 a5					.word xt_asm_dec, z_asm_dec
>ccb8		64 65 63					.text "dec"
.ccbb						nt_asm_dec_a:
>ccbb		05 0c						.byte 5, IM+NN
>ccbd		c8 cc				                .word nt_asm_dec_x
>ccbf		00 a5 05 a5					.word xt_asm_dec_a, z_asm_dec_a
>ccc3		64 65 63 2e 61					.text "dec.a"
.ccc8						nt_asm_dec_x:
>ccc8		05 0c						.byte 5, IM+NN
>ccca		d5 cc				                .word nt_asm_dec_z
>cccc		05 a5 0a a5					.word xt_asm_dec_x, z_asm_dec_x
>ccd0		64 65 63 2e 78					.text "dec.x"
.ccd5						nt_asm_dec_z:
>ccd5		05 0c						.byte 5, IM+NN
>ccd7		e2 cc				                .word nt_asm_dec_zx
>ccd9		0a a5 0f a5					.word xt_asm_dec_z, z_asm_dec_z
>ccdd		64 65 63 2e 7a					.text "dec.z"
.cce2						nt_asm_dec_zx:
>cce2		06 0c						.byte 6, IM+NN
>cce4		f0 cc				                .word nt_asm_dex
>cce6		0f a5 14 a5					.word xt_asm_dec_zx, z_asm_dec_zx
>ccea		64 65 63 2e 7a 78				.text "dec.zx"
.ccf0						nt_asm_dex:
>ccf0		03 0c						.byte 3, IM+NN
>ccf2		fb cc				                .word nt_asm_dey
>ccf4		14 a5 19 a5					.word xt_asm_dex, z_asm_dex
>ccf8		64 65 78					.text "dex"
.ccfb						nt_asm_dey:
>ccfb		03 0c						.byte 3, IM+NN
>ccfd		06 cd				                .word nt_asm_eor
>ccff		19 a5 1e a5					.word xt_asm_dey, z_asm_dey
>cd03		64 65 79					.text "dey"
.cd06						nt_asm_eor:
>cd06		03 0c						.byte 3, IM+NN
>cd08		11 cd				                .word nt_asm_eor_h
>cd0a		1e a5 23 a5					.word xt_asm_eor, z_asm_eor
>cd0e		65 6f 72					.text "eor"
.cd11						nt_asm_eor_h:
>cd11		05 0c						.byte 5, IM+NN
>cd13		1e cd				                .word nt_asm_eor_x
>cd15		23 a5 28 a5					.word xt_asm_eor_h, z_asm_eor_h
>cd19		65 6f 72 2e 23					.text "eor.#"
.cd1e						nt_asm_eor_x:
>cd1e		05 0c						.byte 5, IM+NN
>cd20		2b cd				                .word nt_asm_eor_y
>cd22		28 a5 2d a5					.word xt_asm_eor_x, z_asm_eor_x
>cd26		65 6f 72 2e 78					.text "eor.x"
.cd2b						nt_asm_eor_y:
>cd2b		05 0c						.byte 5, IM+NN
>cd2d		38 cd				                .word nt_asm_eor_z
>cd2f		2d a5 32 a5					.word xt_asm_eor_y, z_asm_eor_y
>cd33		65 6f 72 2e 79					.text "eor.y"
.cd38						nt_asm_eor_z:
>cd38		05 0c						.byte 5, IM+NN
>cd3a		45 cd				                .word nt_asm_eor_zi
>cd3c		32 a5 37 a5					.word xt_asm_eor_z, z_asm_eor_z
>cd40		65 6f 72 2e 7a					.text "eor.z"
.cd45						nt_asm_eor_zi:
>cd45		06 0c						.byte 6, IM+NN
>cd47		53 cd				                .word nt_asm_eor_ziy
>cd49		37 a5 3c a5					.word xt_asm_eor_zi, z_asm_eor_zi
>cd4d		65 6f 72 2e 7a 69				.text "eor.zi"
.cd53						nt_asm_eor_ziy:
>cd53		07 0c						.byte 7, IM+NN
>cd55		62 cd				                .word nt_asm_eor_zx
>cd57		3c a5 41 a5					.word xt_asm_eor_ziy, z_asm_eor_ziy
>cd5b		65 6f 72 2e 7a 69 79				.text "eor.ziy"
.cd62						nt_asm_eor_zx:
>cd62		06 0c						.byte 6, IM+NN
>cd64		70 cd				                .word nt_asm_eor_zxi
>cd66		41 a5 46 a5					.word xt_asm_eor_zx, z_asm_eor_zx
>cd6a		65 6f 72 2e 7a 78				.text "eor.zx"
.cd70						nt_asm_eor_zxi:
>cd70		07 0c						.byte 7, IM+NN
>cd72		7f cd				                .word nt_asm_inc
>cd74		46 a5 4b a5					.word xt_asm_eor_zxi, z_asm_eor_zxi
>cd78		65 6f 72 2e 7a 78 69				.text "eor.zxi"
.cd7f						nt_asm_inc:
>cd7f		03 0c						.byte 3, IM+NN
>cd81		8a cd				                .word nt_asm_inc_a
>cd83		4b a5 50 a5					.word xt_asm_inc, z_asm_inc
>cd87		69 6e 63					.text "inc"
.cd8a						nt_asm_inc_a:
>cd8a		05 0c						.byte 5, IM+NN
>cd8c		97 cd				                .word nt_asm_inc_x
>cd8e		50 a5 55 a5					.word xt_asm_inc_a, z_asm_inc_a
>cd92		69 6e 63 2e 61					.text "inc.a"
.cd97						nt_asm_inc_x:
>cd97		05 0c						.byte 5, IM+NN
>cd99		a4 cd				                .word nt_asm_inc_z
>cd9b		55 a5 5a a5					.word xt_asm_inc_x, z_asm_inc_x
>cd9f		69 6e 63 2e 78					.text "inc.x"
.cda4						nt_asm_inc_z:
>cda4		05 0c						.byte 5, IM+NN
>cda6		b1 cd				                .word nt_asm_inc_zx
>cda8		5a a5 5f a5					.word xt_asm_inc_z, z_asm_inc_z
>cdac		69 6e 63 2e 7a					.text "inc.z"
.cdb1						nt_asm_inc_zx:
>cdb1		06 0c						.byte 6, IM+NN
>cdb3		bf cd				                .word nt_asm_inx
>cdb5		5f a5 64 a5					.word xt_asm_inc_zx, z_asm_inc_zx
>cdb9		69 6e 63 2e 7a 78				.text "inc.zx"
.cdbf						nt_asm_inx:
>cdbf		03 0c						.byte 3, IM+NN
>cdc1		ca cd				                .word nt_asm_iny
>cdc3		64 a5 69 a5					.word xt_asm_inx, z_asm_inx
>cdc7		69 6e 78					.text "inx"
.cdca						nt_asm_iny:
>cdca		03 0c						.byte 3, IM+NN
>cdcc		d5 cd				                .word nt_asm_jmp
>cdce		69 a5 6e a5					.word xt_asm_iny, z_asm_iny
>cdd2		69 6e 79					.text "iny"
.cdd5						nt_asm_jmp:
>cdd5		03 0c						.byte 3, IM+NN
>cdd7		e0 cd				                .word nt_asm_jmp_i
>cdd9		6e a5 73 a5					.word xt_asm_jmp, z_asm_jmp
>cddd		6a 6d 70					.text "jmp"
.cde0						nt_asm_jmp_i:
>cde0		05 0c						.byte 5, IM+NN
>cde2		ed cd				                .word nt_asm_jmp_xi
>cde4		73 a5 78 a5					.word xt_asm_jmp_i, z_asm_jmp_i
>cde8		6a 6d 70 2e 69					.text "jmp.i"
.cded						nt_asm_jmp_xi:
>cded		06 0c						.byte 6, IM+NN
>cdef		fb cd				                .word nt_asm_jsr
>cdf1		78 a5 7d a5					.word xt_asm_jmp_xi, z_asm_jmp_xi
>cdf5		6a 6d 70 2e 78 69				.text "jmp.xi"
.cdfb						nt_asm_jsr:
>cdfb		03 0c						.byte 3, IM+NN
>cdfd		06 ce				                .word nt_asm_lda
>cdff		7d a5 82 a5					.word xt_asm_jsr, z_asm_jsr
>ce03		6a 73 72					.text "jsr"
.ce06						nt_asm_lda:
>ce06		03 0c						.byte 3, IM+NN
>ce08		11 ce				                .word nt_asm_lda_h
>ce0a		82 a5 87 a5					.word xt_asm_lda, z_asm_lda
>ce0e		6c 64 61					.text "lda"
.ce11						nt_asm_lda_h:
>ce11		05 0c						.byte 5, IM+NN
>ce13		1e ce				                .word nt_asm_lda_x
>ce15		87 a5 8c a5					.word xt_asm_lda_h, z_asm_lda_h
>ce19		6c 64 61 2e 23					.text "lda.#"
.ce1e						nt_asm_lda_x:
>ce1e		05 0c						.byte 5, IM+NN
>ce20		2b ce				                .word nt_asm_lda_y
>ce22		8c a5 91 a5					.word xt_asm_lda_x, z_asm_lda_x
>ce26		6c 64 61 2e 78					.text "lda.x"
.ce2b						nt_asm_lda_y:
>ce2b		05 0c						.byte 5, IM+NN
>ce2d		38 ce				                .word nt_asm_lda_z
>ce2f		91 a5 96 a5					.word xt_asm_lda_y, z_asm_lda_y
>ce33		6c 64 61 2e 79					.text "lda.y"
.ce38						nt_asm_lda_z:
>ce38		05 0c						.byte 5, IM+NN
>ce3a		45 ce				                .word nt_asm_lda_zi
>ce3c		96 a5 9b a5					.word xt_asm_lda_z, z_asm_lda_z
>ce40		6c 64 61 2e 7a					.text "lda.z"
.ce45						nt_asm_lda_zi:
>ce45		06 0c						.byte 6, IM+NN
>ce47		53 ce				                .word nt_asm_lda_ziy
>ce49		9b a5 a0 a5					.word xt_asm_lda_zi, z_asm_lda_zi
>ce4d		6c 64 61 2e 7a 69				.text "lda.zi"
.ce53						nt_asm_lda_ziy:
>ce53		07 0c						.byte 7, IM+NN
>ce55		62 ce				                .word nt_asm_lda_zx
>ce57		a0 a5 a5 a5					.word xt_asm_lda_ziy, z_asm_lda_ziy
>ce5b		6c 64 61 2e 7a 69 79				.text "lda.ziy"
.ce62						nt_asm_lda_zx:
>ce62		06 0c						.byte 6, IM+NN
>ce64		70 ce				                .word nt_asm_lda_zxi
>ce66		a5 a5 aa a5					.word xt_asm_lda_zx, z_asm_lda_zx
>ce6a		6c 64 61 2e 7a 78				.text "lda.zx"
.ce70						nt_asm_lda_zxi:
>ce70		07 0c						.byte 7, IM+NN
>ce72		7f ce				                .word nt_asm_ldx
>ce74		aa a5 af a5					.word xt_asm_lda_zxi, z_asm_lda_zxi
>ce78		6c 64 61 2e 7a 78 69				.text "lda.zxi"
.ce7f						nt_asm_ldx:
>ce7f		03 0c						.byte 3, IM+NN
>ce81		8a ce				                .word nt_asm_ldx_h
>ce83		af a5 b4 a5					.word xt_asm_ldx, z_asm_ldx
>ce87		6c 64 78					.text "ldx"
.ce8a						nt_asm_ldx_h:
>ce8a		05 0c						.byte 5, IM+NN
>ce8c		97 ce				                .word nt_asm_ldx_y
>ce8e		b4 a5 b9 a5					.word xt_asm_ldx_h, z_asm_ldx_h
>ce92		6c 64 78 2e 23					.text "ldx.#"
.ce97						nt_asm_ldx_y:
>ce97		05 0c						.byte 5, IM+NN
>ce99		a4 ce				                .word nt_asm_ldx_z
>ce9b		b9 a5 be a5					.word xt_asm_ldx_y, z_asm_ldx_y
>ce9f		6c 64 78 2e 79					.text "ldx.y"
.cea4						nt_asm_ldx_z:
>cea4		05 0c						.byte 5, IM+NN
>cea6		b1 ce				                .word nt_asm_ldx_zy
>cea8		be a5 c3 a5					.word xt_asm_ldx_z, z_asm_ldx_z
>ceac		6c 64 78 2e 7a					.text "ldx.z"
.ceb1						nt_asm_ldx_zy:
>ceb1		06 0c						.byte 6, IM+NN
>ceb3		bf ce				                .word nt_asm_ldy
>ceb5		c3 a5 c8 a5					.word xt_asm_ldx_zy, z_asm_ldx_zy
>ceb9		6c 64 78 2e 7a 79				.text "ldx.zy"
.cebf						nt_asm_ldy:
>cebf		03 0c						.byte 3, IM+NN
>cec1		ca ce				                .word nt_asm_ldy_h
>cec3		c8 a5 cd a5					.word xt_asm_ldy, z_asm_ldy
>cec7		6c 64 79					.text "ldy"
.ceca						nt_asm_ldy_h:
>ceca		05 0c						.byte 5, IM+NN
>cecc		d7 ce				                .word nt_asm_ldy_x
>cece		cd a5 d2 a5					.word xt_asm_ldy_h, z_asm_ldy_h
>ced2		6c 64 79 2e 23					.text "ldy.#"
.ced7						nt_asm_ldy_x:
>ced7		05 0c						.byte 5, IM+NN
>ced9		e4 ce				                .word nt_asm_ldy_z
>cedb		d2 a5 d7 a5					.word xt_asm_ldy_x, z_asm_ldy_x
>cedf		6c 64 79 2e 78					.text "ldy.x"
.cee4						nt_asm_ldy_z:
>cee4		05 0c						.byte 5, IM+NN
>cee6		f1 ce				                .word nt_asm_ldy_zx
>cee8		d7 a5 dc a5					.word xt_asm_ldy_z, z_asm_ldy_z
>ceec		6c 64 79 2e 7a					.text "ldy.z"
.cef1						nt_asm_ldy_zx:
>cef1		06 0c						.byte 6, IM+NN
>cef3		ff ce				                .word nt_asm_lsr
>cef5		dc a5 e1 a5					.word xt_asm_ldy_zx, z_asm_ldy_zx
>cef9		6c 64 79 2e 7a 78				.text "ldy.zx"
.ceff						nt_asm_lsr:
>ceff		03 0c						.byte 3, IM+NN
>cf01		0a cf				                .word nt_asm_lsr_a
>cf03		e1 a5 e6 a5					.word xt_asm_lsr, z_asm_lsr
>cf07		6c 73 72					.text "lsr"
.cf0a						nt_asm_lsr_a:
>cf0a		05 0c						.byte 5, IM+NN
>cf0c		17 cf				                .word nt_asm_lsr_x
>cf0e		e6 a5 eb a5					.word xt_asm_lsr_a, z_asm_lsr_a
>cf12		6c 73 72 2e 61					.text "lsr.a"
.cf17						nt_asm_lsr_x:
>cf17		05 0c						.byte 5, IM+NN
>cf19		24 cf				                .word nt_asm_lsr_z
>cf1b		eb a5 f0 a5					.word xt_asm_lsr_x, z_asm_lsr_x
>cf1f		6c 73 72 2e 78					.text "lsr.x"
.cf24						nt_asm_lsr_z:
>cf24		05 0c						.byte 5, IM+NN
>cf26		31 cf				                .word nt_asm_lsr_zx
>cf28		f0 a5 f5 a5					.word xt_asm_lsr_z, z_asm_lsr_z
>cf2c		6c 73 72 2e 7a					.text "lsr.z"
.cf31						nt_asm_lsr_zx:
>cf31		06 0c						.byte 6, IM+NN
>cf33		3f cf				                .word nt_asm_nop
>cf35		f5 a5 fa a5					.word xt_asm_lsr_zx, z_asm_lsr_zx
>cf39		6c 73 72 2e 7a 78				.text "lsr.zx"
.cf3f						nt_asm_nop:
>cf3f		03 0c						.byte 3, IM+NN
>cf41		4a cf				                .word nt_asm_ora
>cf43		fa a5 ff a5					.word xt_asm_nop, z_asm_nop
>cf47		6e 6f 70					.text "nop"
.cf4a						nt_asm_ora:
>cf4a		03 0c						.byte 3, IM+NN
>cf4c		55 cf				                .word nt_asm_ora_h
>cf4e		ff a5 04 a6					.word xt_asm_ora, z_asm_ora
>cf52		6f 72 61					.text "ora"
.cf55						nt_asm_ora_h:
>cf55		05 0c						.byte 5, IM+NN
>cf57		62 cf				                .word nt_asm_ora_x
>cf59		04 a6 09 a6					.word xt_asm_ora_h, z_asm_ora_h
>cf5d		6f 72 61 2e 23					.text "ora.#"
.cf62						nt_asm_ora_x:
>cf62		05 0c						.byte 5, IM+NN
>cf64		6f cf				                .word nt_asm_ora_y
>cf66		09 a6 0e a6					.word xt_asm_ora_x, z_asm_ora_x
>cf6a		6f 72 61 2e 78					.text "ora.x"
.cf6f						nt_asm_ora_y:
>cf6f		05 0c						.byte 5, IM+NN
>cf71		7c cf				                .word nt_asm_ora_z
>cf73		0e a6 13 a6					.word xt_asm_ora_y, z_asm_ora_y
>cf77		6f 72 61 2e 79					.text "ora.y"
.cf7c						nt_asm_ora_z:
>cf7c		05 0c						.byte 5, IM+NN
>cf7e		89 cf				                .word nt_asm_ora_zi
>cf80		13 a6 18 a6					.word xt_asm_ora_z, z_asm_ora_z
>cf84		6f 72 61 2e 7a					.text "ora.z"
.cf89						nt_asm_ora_zi:
>cf89		06 0c						.byte 6, IM+NN
>cf8b		97 cf				                .word nt_asm_ora_ziy
>cf8d		18 a6 1f a6					.word xt_asm_ora_zi, z_asm_ora_zi
>cf91		6f 72 61 2e 7a 69				.text "ora.zi"
.cf97						nt_asm_ora_ziy:
>cf97		07 0c						.byte 7, IM+NN
>cf99		a6 cf				                .word nt_asm_ora_zx
>cf9b		1f a6 24 a6					.word xt_asm_ora_ziy, z_asm_ora_ziy
>cf9f		6f 72 61 2e 7a 69 79				.text "ora.ziy"
.cfa6						nt_asm_ora_zx:
>cfa6		06 0c						.byte 6, IM+NN
>cfa8		b4 cf				                .word nt_asm_ora_zxi
>cfaa		24 a6 29 a6					.word xt_asm_ora_zx, z_asm_ora_zx
>cfae		6f 72 61 2e 7a 78				.text "ora.zx"
.cfb4						nt_asm_ora_zxi:
>cfb4		07 0c						.byte 7, IM+NN
>cfb6		c3 cf				                .word nt_asm_pha
>cfb8		29 a6 2e a6					.word xt_asm_ora_zxi, z_asm_ora_zxi
>cfbc		6f 72 61 2e 7a 78 69				.text "ora.zxi"
.cfc3						nt_asm_pha:
>cfc3		03 0c						.byte 3, IM+NN
>cfc5		ce cf				                .word nt_asm_php
>cfc7		2e a6 33 a6					.word xt_asm_pha, z_asm_pha
>cfcb		70 68 61					.text "pha"
.cfce						nt_asm_php:
>cfce		03 0c						.byte 3, IM+NN
>cfd0		d9 cf				                .word nt_asm_phx
>cfd2		33 a6 38 a6					.word xt_asm_php, z_asm_php
>cfd6		70 68 70					.text "php"
.cfd9						nt_asm_phx:
>cfd9		03 0c						.byte 3, IM+NN
>cfdb		e4 cf				                .word nt_asm_phy
>cfdd		38 a6 3d a6					.word xt_asm_phx, z_asm_phx
>cfe1		70 68 78					.text "phx"
.cfe4						nt_asm_phy:
>cfe4		03 0c						.byte 3, IM+NN
>cfe6		ef cf				                .word nt_asm_pla
>cfe8		3d a6 42 a6					.word xt_asm_phy, z_asm_phy
>cfec		70 68 79					.text "phy"
.cfef						nt_asm_pla:
>cfef		03 0c						.byte 3, IM+NN
>cff1		fa cf				                .word nt_asm_plp
>cff3		42 a6 47 a6					.word xt_asm_pla, z_asm_pla
>cff7		70 6c 61					.text "pla"
.cffa						nt_asm_plp:
>cffa		03 0c						.byte 3, IM+NN
>cffc		05 d0				                .word nt_asm_plx
>cffe		47 a6 4c a6					.word xt_asm_plp, z_asm_plp
>d002		70 6c 70					.text "plp"
.d005						nt_asm_plx:
>d005		03 0c						.byte 3, IM+NN
>d007		10 d0				                .word nt_asm_ply
>d009		4c a6 51 a6					.word xt_asm_plx, z_asm_plx
>d00d		70 6c 78					.text "plx"
.d010						nt_asm_ply:
>d010		03 0c						.byte 3, IM+NN
>d012		1b d0				                .word nt_asm_rol
>d014		51 a6 56 a6					.word xt_asm_ply, z_asm_ply
>d018		70 6c 79					.text "ply"
.d01b						nt_asm_rol:
>d01b		03 0c						.byte 3, IM+NN
>d01d		26 d0				                .word nt_asm_rol_a
>d01f		56 a6 5b a6					.word xt_asm_rol, z_asm_rol
>d023		72 6f 6c					.text "rol"
.d026						nt_asm_rol_a:
>d026		05 0c						.byte 5, IM+NN
>d028		33 d0				                .word nt_asm_rol_x
>d02a		5b a6 60 a6					.word xt_asm_rol_a, z_asm_rol_a
>d02e		72 6f 6c 2e 61					.text "rol.a"
.d033						nt_asm_rol_x:
>d033		05 0c						.byte 5, IM+NN
>d035		40 d0				                .word nt_asm_rol_z
>d037		60 a6 65 a6					.word xt_asm_rol_x, z_asm_rol_x
>d03b		72 6f 6c 2e 78					.text "rol.x"
.d040						nt_asm_rol_z:
>d040		05 0c						.byte 5, IM+NN
>d042		4d d0				                .word nt_asm_rol_zx
>d044		65 a6 6a a6					.word xt_asm_rol_z, z_asm_rol_z
>d048		72 6f 6c 2e 7a					.text "rol.z"
.d04d						nt_asm_rol_zx:
>d04d		06 0c						.byte 6, IM+NN
>d04f		5b d0				                .word nt_asm_ror
>d051		6a a6 6f a6					.word xt_asm_rol_zx, z_asm_rol_zx
>d055		72 6f 6c 2e 7a 78				.text "rol.zx"
.d05b						nt_asm_ror:
>d05b		03 0c						.byte 3, IM+NN
>d05d		66 d0				                .word nt_asm_ror_a
>d05f		6f a6 74 a6					.word xt_asm_ror, z_asm_ror
>d063		72 6f 72					.text "ror"
.d066						nt_asm_ror_a:
>d066		05 0c						.byte 5, IM+NN
>d068		73 d0				                .word nt_asm_ror_x
>d06a		74 a6 79 a6					.word xt_asm_ror_a, z_asm_ror_a
>d06e		72 6f 72 2e 61					.text "ror.a"
.d073						nt_asm_ror_x:
>d073		05 0c						.byte 5, IM+NN
>d075		80 d0				                .word nt_asm_ror_z
>d077		79 a6 7e a6					.word xt_asm_ror_x, z_asm_ror_x
>d07b		72 6f 72 2e 78					.text "ror.x"
.d080						nt_asm_ror_z:
>d080		05 0c						.byte 5, IM+NN
>d082		8d d0				                .word nt_asm_ror_zx
>d084		7e a6 83 a6					.word xt_asm_ror_z, z_asm_ror_z
>d088		72 6f 72 2e 7a					.text "ror.z"
.d08d						nt_asm_ror_zx:
>d08d		06 0c						.byte 6, IM+NN
>d08f		9b d0				                .word nt_asm_rti
>d091		83 a6 88 a6					.word xt_asm_ror_zx, z_asm_ror_zx
>d095		72 6f 72 2e 7a 78				.text "ror.zx"
.d09b						nt_asm_rti:
>d09b		03 0c						.byte 3, IM+NN
>d09d		a6 d0				                .word nt_asm_rts
>d09f		88 a6 8d a6					.word xt_asm_rti, z_asm_rti
>d0a3		72 74 69					.text "rti"
.d0a6						nt_asm_rts:
>d0a6		03 0c						.byte 3, IM+NN
>d0a8		b1 d0				                .word nt_asm_sbc
>d0aa		8d a6 92 a6					.word xt_asm_rts, z_asm_rts
>d0ae		72 74 73					.text "rts"
.d0b1						nt_asm_sbc:
>d0b1		03 0c						.byte 3, IM+NN
>d0b3		bc d0				                .word nt_asm_sbc_h
>d0b5		92 a6 97 a6					.word xt_asm_sbc, z_asm_sbc
>d0b9		73 62 63					.text "sbc"
.d0bc						nt_asm_sbc_h:
>d0bc		05 0c						.byte 5, IM+NN
>d0be		c9 d0				                .word nt_asm_sbc_x
>d0c0		97 a6 9c a6					.word xt_asm_sbc_h, z_asm_sbc_h
>d0c4		73 62 63 2e 23					.text "sbc.#"
.d0c9						nt_asm_sbc_x:
>d0c9		05 0c						.byte 5, IM+NN
>d0cb		d6 d0				                .word nt_asm_sbc_y
>d0cd		9c a6 a1 a6					.word xt_asm_sbc_x, z_asm_sbc_x
>d0d1		73 62 63 2e 78					.text "sbc.x"
.d0d6						nt_asm_sbc_y:
>d0d6		05 0c						.byte 5, IM+NN
>d0d8		e3 d0				                .word nt_asm_sbc_z
>d0da		a1 a6 a6 a6					.word xt_asm_sbc_y, z_asm_sbc_y
>d0de		73 62 63 2e 79					.text "sbc.y"
.d0e3						nt_asm_sbc_z:
>d0e3		05 0c						.byte 5, IM+NN
>d0e5		f0 d0				                .word nt_asm_sbc_zi
>d0e7		a6 a6 ab a6					.word xt_asm_sbc_z, z_asm_sbc_z
>d0eb		73 62 63 2e 7a					.text "sbc.z"
.d0f0						nt_asm_sbc_zi:
>d0f0		06 0c						.byte 6, IM+NN
>d0f2		fe d0				                .word nt_asm_sbc_ziy
>d0f4		ab a6 b0 a6					.word xt_asm_sbc_zi, z_asm_sbc_zi
>d0f8		73 62 63 2e 7a 69				.text "sbc.zi"
.d0fe						nt_asm_sbc_ziy:
>d0fe		07 0c						.byte 7, IM+NN
>d100		0d d1				                .word nt_asm_sbc_zx
>d102		b0 a6 b5 a6					.word xt_asm_sbc_ziy, z_asm_sbc_ziy
>d106		73 62 63 2e 7a 69 79				.text "sbc.ziy"
.d10d						nt_asm_sbc_zx:
>d10d		06 0c						.byte 6, IM+NN
>d10f		1b d1				                .word nt_asm_sbc_zxi
>d111		b5 a6 ba a6					.word xt_asm_sbc_zx, z_asm_sbc_zx
>d115		73 62 63 2e 7a 78				.text "sbc.zx"
.d11b						nt_asm_sbc_zxi:
>d11b		07 0c						.byte 7, IM+NN
>d11d		2a d1				                .word nt_asm_sec
>d11f		ba a6 be a6					.word xt_asm_sbc_zxi, z_asm_sbc_zxi
>d123		73 62 63 2e 7a 78 69				.text "sbc.zxi"
.d12a						nt_asm_sec:
>d12a		03 0c						.byte 3, IM+NN
>d12c		35 d1				                .word nt_asm_sed
>d12e		be a6 c2 a6					.word xt_asm_sec, z_asm_sec
>d132		73 65 63					.text "sec"
.d135						nt_asm_sed:
>d135		03 0c						.byte 3, IM+NN
>d137		40 d1				                .word nt_asm_sei
>d139		c2 a6 c6 a6					.word xt_asm_sed, z_asm_sed
>d13d		73 65 64					.text "sed"
.d140						nt_asm_sei:
>d140		03 0c						.byte 3, IM+NN
>d142		4b d1				                .word nt_asm_sta
>d144		c6 a6 ca a6					.word xt_asm_sei, z_asm_sei
>d148		73 65 69					.text "sei"
.d14b						nt_asm_sta:
>d14b		03 0c						.byte 3, IM+NN
>d14d		56 d1				                .word nt_asm_sta_x
>d14f		ca a6 ce a6					.word xt_asm_sta, z_asm_sta
>d153		73 74 61					.text "sta"
.d156						nt_asm_sta_x:
>d156		05 0c						.byte 5, IM+NN
>d158		63 d1				                .word nt_asm_sta_y
>d15a		ce a6 d2 a6					.word xt_asm_sta_x, z_asm_sta_x
>d15e		73 74 61 2e 78					.text "sta.x"
.d163						nt_asm_sta_y:
>d163		05 0c						.byte 5, IM+NN
>d165		70 d1				                .word nt_asm_sta_z
>d167		d2 a6 d6 a6					.word xt_asm_sta_y, z_asm_sta_y
>d16b		73 74 61 2e 79					.text "sta.y"
.d170						nt_asm_sta_z:
>d170		05 0c						.byte 5, IM+NN
>d172		7d d1				                .word nt_asm_sta_zi
>d174		d6 a6 da a6					.word xt_asm_sta_z, z_asm_sta_z
>d178		73 74 61 2e 7a					.text "sta.z"
.d17d						nt_asm_sta_zi:
>d17d		06 0c						.byte 6, IM+NN
>d17f		8b d1				                .word nt_asm_sta_ziy
>d181		da a6 de a6					.word xt_asm_sta_zi, z_asm_sta_zi
>d185		73 74 61 2e 7a 69				.text "sta.zi"
.d18b						nt_asm_sta_ziy:
>d18b		07 0c						.byte 7, IM+NN
>d18d		9a d1				                .word nt_asm_sta_zx
>d18f		de a6 e2 a6					.word xt_asm_sta_ziy, z_asm_sta_ziy
>d193		73 74 61 2e 7a 69 79				.text "sta.ziy"
.d19a						nt_asm_sta_zx:
>d19a		06 0c						.byte 6, IM+NN
>d19c		a8 d1				                .word nt_asm_sta_zxi
>d19e		e2 a6 e6 a6					.word xt_asm_sta_zx, z_asm_sta_zx
>d1a2		73 74 61 2e 7a 78				.text "sta.zx"
.d1a8						nt_asm_sta_zxi:
>d1a8		07 0c						.byte 7, IM+NN
>d1aa		b7 d1				                .word nt_asm_stx
>d1ac		e6 a6 ea a6					.word xt_asm_sta_zxi, z_asm_sta_zxi
>d1b0		73 74 61 2e 7a 78 69				.text "sta.zxi"
.d1b7						nt_asm_stx:
>d1b7		03 0c						.byte 3, IM+NN
>d1b9		c2 d1				                .word nt_asm_stx_z
>d1bb		ea a6 ee a6					.word xt_asm_stx, z_asm_stx
>d1bf		73 74 78					.text "stx"
.d1c2						nt_asm_stx_z:
>d1c2		05 0c						.byte 5, IM+NN
>d1c4		cf d1				                .word nt_asm_stx_zy
>d1c6		ee a6 f2 a6					.word xt_asm_stx_z, z_asm_stx_z
>d1ca		73 74 78 2e 7a					.text "stx.z"
.d1cf						nt_asm_stx_zy:
>d1cf		06 0c						.byte 6, IM+NN
>d1d1		dd d1				                .word nt_asm_sty
>d1d3		f2 a6 f6 a6					.word xt_asm_stx_zy, z_asm_stx_zy
>d1d7		73 74 78 2e 7a 79				.text "stx.zy"
.d1dd						nt_asm_sty:
>d1dd		03 0c						.byte 3, IM+NN
>d1df		e8 d1				                .word nt_asm_sty_z
>d1e1		f6 a6 fa a6					.word xt_asm_sty, z_asm_sty
>d1e5		73 74 79					.text "sty"
.d1e8						nt_asm_sty_z:
>d1e8		05 0c						.byte 5, IM+NN
>d1ea		f5 d1				                .word nt_asm_sty_zx
>d1ec		fa a6 fe a6					.word xt_asm_sty_z, z_asm_sty_z
>d1f0		73 74 79 2e 7a					.text "sty.z"
.d1f5						nt_asm_sty_zx:
>d1f5		06 0c						.byte 6, IM+NN
>d1f7		03 d2				                .word nt_asm_stz
>d1f9		fe a6 02 a7					.word xt_asm_sty_zx, z_asm_sty_zx
>d1fd		73 74 79 2e 7a 78				.text "sty.zx"
.d203						nt_asm_stz:
>d203		03 0c						.byte 3, IM+NN
>d205		0e d2				                .word nt_asm_stz_x
>d207		02 a7 06 a7					.word xt_asm_stz, z_asm_stz
>d20b		73 74 7a					.text "stz"
.d20e						nt_asm_stz_x:
>d20e		05 0c						.byte 5, IM+NN
>d210		1b d2				                .word nt_asm_stz_z
>d212		06 a7 0a a7					.word xt_asm_stz_x, z_asm_stz_x
>d216		73 74 7a 2e 78					.text "stz.x"
.d21b						nt_asm_stz_z:
>d21b		05 0c						.byte 5, IM+NN
>d21d		28 d2				                .word nt_asm_stz_zx
>d21f		0a a7 0e a7					.word xt_asm_stz_z, z_asm_stz_z
>d223		73 74 7a 2e 7a					.text "stz.z"
.d228						nt_asm_stz_zx:
>d228		06 0c						.byte 6, IM+NN
>d22a		36 d2				                .word nt_asm_tax
>d22c		0e a7 12 a7					.word xt_asm_stz_zx, z_asm_stz_zx
>d230		73 74 7a 2e 7a 78				.text "stz.zx"
.d236						nt_asm_tax:
>d236		03 0c						.byte 3, IM+NN
>d238		41 d2				                .word nt_asm_tay
>d23a		12 a7 16 a7					.word xt_asm_tax, z_asm_tax
>d23e		74 61 78					.text "tax"
.d241						nt_asm_tay:
>d241		03 0c						.byte 3, IM+NN
>d243		4c d2				                .word nt_asm_trb
>d245		16 a7 1a a7					.word xt_asm_tay, z_asm_tay
>d249		74 61 79					.text "tay"
.d24c						nt_asm_trb:
>d24c		03 0c						.byte 3, IM+NN
>d24e		57 d2				                .word nt_asm_trb_z
>d250		1a a7 1e a7					.word xt_asm_trb, z_asm_trb
>d254		74 72 62					.text "trb"
.d257						nt_asm_trb_z:
>d257		05 0c						.byte 5, IM+NN
>d259		64 d2				                .word nt_asm_tsb
>d25b		1e a7 22 a7					.word xt_asm_trb_z, z_asm_trb_z
>d25f		74 72 62 2e 7a					.text "trb.z"
.d264						nt_asm_tsb:
>d264		03 0c						.byte 3, IM+NN
>d266		6f d2				                .word nt_asm_tsb_z
>d268		22 a7 26 a7					.word xt_asm_tsb, z_asm_tsb
>d26c		74 73 62					.text "tsb"
.d26f						nt_asm_tsb_z:
>d26f		05 0c						.byte 5, IM+NN
>d271		7c d2				                .word nt_asm_tsx
>d273		26 a7 2a a7					.word xt_asm_tsb_z, z_asm_tsb_z
>d277		74 73 62 2e 7a					.text "tsb.z"
.d27c						nt_asm_tsx:
>d27c		03 0c						.byte 3, IM+NN
>d27e		87 d2				                .word nt_asm_txa
>d280		2a a7 2e a7					.word xt_asm_tsx, z_asm_tsx
>d284		74 73 78					.text "tsx"
.d287						nt_asm_txa:
>d287		03 0c						.byte 3, IM+NN
>d289		92 d2				                .word nt_asm_txs
>d28b		2e a7 32 a7					.word xt_asm_txa, z_asm_txa
>d28f		74 78 61					.text "txa"
.d292						nt_asm_txs:
>d292		03 0c						.byte 3, IM+NN
>d294		9d d2				                .word nt_asm_tya
>d296		32 a7 36 a7					.word xt_asm_txs, z_asm_txs
>d29a		74 78 73					.text "txs"
.d29d						nt_asm_tya:
>d29d		03 0c						.byte 3, IM+NN
>d29f		a8 d2				                .word nt_asm_arrow
>d2a1		36 a7 3a a7					.word xt_asm_tya, z_asm_tya
>d2a5		74 79 61					.text "tya"
.d2a8						nt_asm_arrow:
>d2a8		03 04				                .byte 3, IM
>d2aa		b3 d2				                .word nt_asm_back_jump
>d2ac		1b 89 25 89			                .word xt_asm_arrow, z_asm_arrow
>d2b0		2d 2d 3e			                .text "-->"
.d2b3						nt_asm_back_jump:
>d2b3		02 04				                .byte 2, IM
>d2b5		bd d2				                .word nt_asm_back_branch
>d2b7		8b a7 8b a7			                .word xt_asm_back_jump, z_asm_back_jump
>d2bb		3c 6a				                .text "<j"
.d2bd						nt_asm_back_branch:
>d2bd		02 04				                .byte 2, IM
>d2bf		c7 d2				                .word nt_asm_push_a
>d2c1		8c a7 94 a7			                .word xt_asm_back_branch, z_asm_back_branch
>d2c5		3c 62				                .text "<b"
.d2c7						nt_asm_push_a:
>d2c7		06 0c				                .byte 6, IM+NN
>d2c9		00 00				                .word 0000
>d2cb		74 a7 83 a7			                .word xt_asm_push_a, z_asm_push_a
>d2cf		70 75 73 68 2d 61		                .text "push-a"

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../strings.asm

=0						ix := 0
=0						str_ok             = ix         ; unused?
=1						ix += 1
=1						str_compile        = ix         ; unused?
=2						ix += 1
=2						str_redefined      = ix
=3						ix += 1
=3						str_abc_upper      = ix         ; unused?
=4						ix += 1
=4						str_wid_forth      = ix
=5						ix += 1
=5						str_wid_editor     = ix
=6						ix += 1
=6						str_wid_assembler  = ix
=7						ix += 1
=7						str_wid_root       = ix
=8						ix += 1
=8						str_see_flags      = ix
=9						ix += 1
=9						str_see_nt         = ix
=10						ix += 1
=10						str_see_xt         = ix
=11						ix += 1
=11						str_see_size       = ix
=12						ix += 1
=12						str_disasm_sdc     = ix
=13						ix += 1
=13						str_disasm_lit     = ix
=14						ix += 1
=14						str_disasm_0bra    = ix
=15						ix += 1
=15						str_disasm_loop    = ix
=16						ix += 1
=16						str_disasm_do      = ix
=17						ix += 1
.d2d5						string_table:
>d2d5		f7 d2 fb d2 05 d3 10 d3		        .word s_ok, s_compiled, s_redefined, s_abc_upper              ; 0-3
>d2dd		47 d3 3f d3 34 d3 4e d3		        .word s_wid_forth, s_wid_editor, s_wid_asm, s_wid_root        ; 4-7
>d2e5		54 d3 70 d3 75 d3 7a d3		        .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 8-11
>d2ed		8b d3 9e d3 a7 d3 b0 d3		        .word s_disasm_sdc, s_disasm_lit, s_disasm_0bra, s_disasm_loop, s_disasm_do ; 12-16
>d2f5		b6 d3
>d2f7		20 6f 6b 00			s_ok:         .text " ok", 0         ; note space at beginning
>d2fb		20 63 6f 6d 70 69 6c 65		s_compiled:   .text " compiled", 0   ; note space at beginning
>d303		64 00
>d305		72 65 64 65 66 69 6e 65		s_redefined:  .text "redefined ", 0  ; note space at end
>d30d		64 20 00
>d310		30 31 32 33 34 35 36 37		s_abc_upper:  .text "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
>d318		38 39 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e
>d328		4f 50 51 52 53 54 55 56 57 58 59 5a
>d334		41 73 73 65 6d 62 6c 65		s_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>d33c		72 20 00
>d33f		45 64 69 74 6f 72 20 00		s_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>d347		46 6f 72 74 68 20 00		s_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>d34e		52 6f 6f 74 20 00		s_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>d354		66 6c 61 67 73 20 28 43		s_see_flags:  .text "flags (CO AN IM NN UF HC): ", 0
>d35c		4f 20 41 4e 20 49 4d 20 4e 4e 20 55 46 20 48 43
>d36c		29 3a 20 00
>d370		6e 74 3a 20 00			s_see_nt:     .text "nt: ", 0
>d375		78 74 3a 20 00			s_see_xt:     .text "xt: ", 0
>d37a		73 69 7a 65 20 28 64 65		s_see_size:   .text "size (decimal): ", 0
>d382		63 69 6d 61 6c 29 3a 20 00
>d38b		20 53 54 41 43 4b 20 44		s_disasm_sdc: .text " STACK DEPTH CHECK", 0
>d393		45 50 54 48 20 43 48 45 43 4b 00
>d39e		4c 49 54 45 52 41 4c 20		s_disasm_lit: .text "LITERAL ", 0
>d3a6		00
>d3a7		30 42 52 41 4e 43 48 20		s_disasm_0bra: .text "0BRANCH ",0
>d3af		00
>d3b0		4c 4f 4f 50 20 00		s_disasm_loop: .text "LOOP ",0
>d3b6		44 4f 20 00			s_disasm_do: .text "DO ",0
=0						err_allot        = 0
=1						err_badsource    = 1
=2						err_compileonly  = 2
=3						err_defer        = 3
=4						err_divzero      = 4
=5						err_noname       = 5
=6						err_refill       = 6
=7						err_state        = 7
=8						err_syntax       = 8
=9						err_underflow    = 9
=10						err_negallot     = 10
=11						err_wordlist     = 11
=12						err_blockwords   = 12
=13						err_returnstack  = 13
.d3ba						error_table:
>d3ba		d6 d3 f7 d3 17 d4 38 d4		        .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
>d3c2		55 d4 66 d4 76 d4 a4 d4		        .word es_divzero, es_noname, es_refill, es_state        ;  4-7
>d3ca		bc d4 dd d4 f2 d4 0e d5		        .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
>d3d2		25 d5 64 d5			        .word es_blockwords, es_returnstack                     ; 12-13
>d3d6		41 4c 4c 4f 54 20 75 73		es_allot:       .text "ALLOT using all available memory", 0
>d3de		69 6e 67 20 61 6c 6c 20 61 76 61 69 6c 61 62 6c
>d3ee		65 20 6d 65 6d 6f 72 79 00
>d3f7		49 6c 6c 65 67 61 6c 20		es_badsource:   .text "Illegal SOURCE-ID during REFILL", 0
>d3ff		53 4f 55 52 43 45 2d 49 44 20 64 75 72 69 6e 67
>d40f		20 52 45 46 49 4c 4c 00
>d417		49 6e 74 65 72 70 72 65		es_compileonly: .text "Interpreting a compile-only word", 0
>d41f		74 69 6e 67 20 61 20 63 6f 6d 70 69 6c 65 2d 6f
>d42f		6e 6c 79 20 77 6f 72 64 00
>d438		44 45 46 45 52 65 64 20		es_defer:       .text "DEFERed word not defined yet", 0
>d440		77 6f 72 64 20 6e 6f 74 20 64 65 66 69 6e 65 64
>d450		20 79 65 74 00
>d455		44 69 76 69 73 69 6f 6e		es_divzero:     .text "Division by zero", 0
>d45d		20 62 79 20 7a 65 72 6f 00
>d466		50 61 72 73 69 6e 67 20		es_noname:      .text "Parsing failure", 0
>d46e		66 61 69 6c 75 72 65 00
>d476		51 55 49 54 20 63 6f 75		es_refill:      .text "QUIT could not get input (REFILL returned -1)", 0
>d47e		6c 64 20 6e 6f 74 20 67 65 74 20 69 6e 70 75 74
>d48e		20 28 52 45 46 49 4c 4c 20 72 65 74 75 72 6e 65
>d49e		64 20 2d 31 29 00
>d4a4		41 6c 72 65 61 64 79 20		es_state:       .text "Already in compile mode", 0
>d4ac		69 6e 20 63 6f 6d 70 69 6c 65 20 6d 6f 64 65 00
>d4bc		55 6e 64 65 66 69 6e 65		es_syntax:      .text "Undefined word or invalid number", 0
>d4c4		64 20 77 6f 72 64 20 6f 72 20 69 6e 76 61 6c 69
>d4d4		64 20 6e 75 6d 62 65 72 00
>d4dd		44 61 74 61 20 73 74 61		es_underflow:   .text "Data stack underflow", 0
>d4e5		63 6b 20 75 6e 64 65 72 66 6c 6f 77 00
>d4f2		4d 61 78 20 6d 65 6d 6f		es_negallot:    .text "Max memory freed with ALLOT", 0
>d4fa		72 79 20 66 72 65 65 64 20 77 69 74 68 20 41 4c
>d50a		4c 4f 54 00
>d50e		4e 6f 20 77 6f 72 64 6c		es_wordlist:    .text "No wordlists available", 0
>d516		69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>d525		50 6c 65 61 73 65 20 61		es_blockwords:  .text "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>d52d		73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42 4c
>d53d		4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52 20
>d54d		61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45 2d
>d55d		56 45 43 54 4f 52 00
>d564		52 65 74 75 72 6e 20 73		es_returnstack: .text "Return stack:", 0
>d56c		74 61 63 6b 3a 00
>d572		0f 2f 43 4f 55 4e 54 45		envs_cs:        .text 15, "/COUNTED-STRING"
>d57a		44 2d 53 54 52 49 4e 47
>d582		05 2f 48 4f 4c 44		envs_hold:      .text 5, "/HOLD"
>d588		04 2f 50 41 44			envs_pad:       .text 4, "/PAD"
>d58d		11 41 44 44 52 45 53 53		envs_aub:       .text 17, "ADDRESS-UNIT-BITS"
>d595		2d 55 4e 49 54 2d 42 49 54 53
>d59f		07 46 4c 4f 4f 52 45 44		envs_floored:   .text 7, "FLOORED"
>d5a7		08 4d 41 58 2d 43 48 41		envs_max_char:  .text 8, "MAX-CHAR"
>d5af		52
>d5b0		05 4d 41 58 2d 4e		envs_max_n:     .text 5, "MAX-N"
>d5b6		05 4d 41 58 2d 55		envs_max_u:     .text 5, "MAX-U"
>d5bc		12 52 45 54 55 52 4e 2d		envs_rsc:       .text 18, "RETURN-STACK-CELLS"
>d5c4		53 54 41 43 4b 2d 43 45 4c 4c 53
>d5cf		0b 53 54 41 43 4b 2d 43		envs_sc:        .text 11, "STACK-CELLS"
>d5d7		45 4c 4c 53
>d5db		09 57 4f 52 44 4c 49 53		envs_wl:        .text 9, "WORDLISTS"
>d5e3		54 53
>d5e5		05 4d 41 58 2d 44		envs_max_d:     .text 5, "MAX-D"
>d5eb		06 4d 41 58 2d 55 44		envs_max_ud:    .text 6, "MAX-UD"

;******  Return to file: platform/../taliforth.asm

.d5f2						doconst:
.d5f2		ca		dex		                dex             ; make room for constant
.d5f3		ca		dex		                dex
.d5f4		68		pla		                pla             ; LSB of return address
.d5f5		85 25		sta $25		                sta tmp1
.d5f7		68		pla		                pla             ; MSB of return address
.d5f8		85 26		sta $26		                sta tmp1+1
.d5fa		a0 01		ldy #$01	                ldy #1
.d5fc		b1 25		lda ($25),y	                lda (tmp1),y
.d5fe		95 00		sta $00,x	                sta 0,x
.d600		c8		iny		                iny
.d601		b1 25		lda ($25),y	                lda (tmp1),y
.d603		95 01		sta $01,x	                sta 1,x
.d605		60		rts		                rts
.d606						dodefer:
.d606		68		pla		                pla             ; LSB
.d607		85 25		sta $25		                sta tmp1
.d609		68		pla		                pla             ; MSB
.d60a		85 26		sta $26		                sta tmp1+1
.d60c		a0 01		ldy #$01	                ldy #1
.d60e		b1 25		lda ($25),y	                lda (tmp1),y
.d610		85 27		sta $27		                sta tmp2
.d612		c8		iny		                iny
.d613		b1 25		lda ($25),y	                lda (tmp1),y
.d615		85 28		sta $28		                sta tmp2+1
.d617		6c 27 00	jmp ($0027)	                jmp (tmp2)      ; This is actually a jump to the new target
.d61a						defer_error:
.d61a		a9 03		lda #$03	                lda #err_defer
.d61c		4c a0 d7	jmp $d7a0	                jmp error
.d61f						dodoes:
.d61f		7a		ply		                ply             ; LSB
.d620		68		pla		                pla             ; MSB
.d621		c8		iny		                iny
.d622		d0 01		bne $d625	                bne +
.d624		1a		inc a		                ina
.d625						+
.d625		84 27		sty $27		                sty tmp2
.d627		85 28		sta $28		                sta tmp2+1
.d629		ca		dex		                dex
.d62a		ca		dex		                dex
.d62b		7a		ply		                ply
.d62c		68		pla		                pla
.d62d		c8		iny		                iny
.d62e		d0 01		bne $d631	                bne +
.d630		1a		inc a		                ina
.d631						+
.d631		94 00		sty $00,x	                sty 0,x         ; LSB
.d633		95 01		sta $01,x	                sta 1,x         ; MSB
.d635		6c 27 00	jmp ($0027)	                jmp (tmp2)
.d638						dovar:
.d638		7a		ply		                ply             ; LSB
.d639		68		pla		                pla             ; MSB
.d63a		c8		iny		                iny
.d63b		d0 01		bne $d63e	                bne +
.d63d		1a		inc a		                ina
.d63e						+
.d63e		ca		dex		                dex
.d63f		ca		dex		                dex
.d640		95 01		sta $01,x	                sta 1,x
.d642		98		tya		                tya
.d643		95 00		sta $00,x	                sta 0,x
.d645		60		rts		                rts
.d646						push_upvar_tos:
.d646		ca		dex		                dex
.d647		ca		dex		                dex
.d648		18		clc		                clc
.d649		65 08		adc $08		                adc up
.d64b		95 00		sta $00,x	                sta 0,x
.d64d		a5 09		lda $09		                lda up+1
.d64f		90 01		bcc $d652	                bcc +
.d651		1a		inc a		                ina
.d652						+
.d652		95 01		sta $01,x	                sta 1,x
.d654		60		rts		                rts
.d655						byte_to_ascii:
.d655		48		pha		                pha
.d656		4a		lsr a		                lsr             ; convert high nibble first
.d657		4a		lsr a		                lsr
.d658		4a		lsr a		                lsr
.d659		4a		lsr a		                lsr
.d65a		20 5e d6	jsr $d65e	                jsr _nibble_to_ascii
.d65d		68		pla		                pla
.d65e						_nibble_to_ascii:
.d65e		29 0f		and #$0f	                and #$F
.d660		09 30		ora #$30	                ora #'0'
.d662		c9 3a		cmp #$3a	                cmp #'9'+1
.d664		90 02		bcc $d668	                bcc +
.d666		69 06		adc #$06	                adc #6
.d668		4c c5 86	jmp $86c5	+               jmp emit_a
.d66b		60		rts		                rts
.d66c						find_header_name:
.d66c		b5 02		lda $02,x	                lda 2,x                 ; Copy mystery string to tmp2
.d66e		85 27		sta $27		                sta tmp2
.d670		b5 03		lda $03,x	                lda 3,x
.d672		85 28		sta $28		                sta tmp2+1
.d674						_loop:
.d674		b2 25		lda ($25)	                lda (tmp1)
.d676		d5 00		cmp $00,x	                cmp 0,x
.d678		d0 3a		bne $d6b4	                bne _next_entry
.d67a		b2 27		lda ($27)	                lda (tmp2)      ; first character of mystery string
.d67c		a0 08		ldy #$08	                ldy #8
.d67e		51 25		eor ($25),y	                eor (tmp1),y    ; flag any mismatched bits
.d680		29 df		and #$df	                and #%11011111  ; but ignore upper/lower case bit
.d682		d0 30		bne $d6b4	                bne _next_entry ; definitely not equal if any bits differ
.d684		a5 25		lda $25		                lda tmp1
.d686		48		pha		                pha             ; Save original address on the stack
.d687		18		clc		                clc
.d688		69 08		adc #$08	                adc #8
.d68a		85 25		sta $25		                sta tmp1
.d68c		a5 26		lda $26		                lda tmp1+1
.d68e		48		pha		                pha
.d68f		90 03		bcc $d694	                bcc +
.d691		1a		inc a		                ina
.d692		85 26		sta $26		                sta tmp1+1
.d694						+
.d694		b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.d696		88		dey		                dey
.d697						_next_char:
.d697		b1 27		lda ($27),y	                lda (tmp2),y    ; last char of mystery string
.d699		c9 5b		cmp #$5b	                cmp #'Z'+1
.d69b		b0 06		bcs $d6a3	                bcs _check_char
.d69d		c9 41		cmp #$41	                cmp #'A'
.d69f		90 02		bcc $d6a3	                bcc _check_char
.d6a1		09 20		ora #$20	                ora #$20
.d6a3						_check_char:
.d6a3		d1 25		cmp ($25),y	                cmp (tmp1),y    ; last char of word we're testing against
.d6a5		d0 03		bne $d6aa	                bne _reset_tmp1
.d6a7		88		dey		                dey
.d6a8		10 ed		bpl $d697	                bpl _next_char
.d6aa						_reset_tmp1:
.d6aa		68		pla		                pla
.d6ab		85 26		sta $26		                sta tmp1+1
.d6ad		68		pla		                pla
.d6ae		85 25		sta $25		                sta tmp1
.d6b0		98		tya		                tya             ; leave A = $FF on success
.d6b1		c8		iny		                iny             ; if Y was $FF, we succeeded
.d6b2		f0 11		beq $d6c5	                beq _done
.d6b4						_next_entry:
.d6b4		a0 02		ldy #$02	                ldy #2
.d6b6		b1 25		lda ($25),y	                lda (tmp1),y
.d6b8		48		pha		                pha
.d6b9		c8		iny		                iny
.d6ba		b1 25		lda ($25),y	                lda (tmp1),y
.d6bc		85 26		sta $26		                sta tmp1+1
.d6be		68		pla		                pla
.d6bf		85 25		sta $25		                sta tmp1
.d6c1		05 26		ora $26		                ora tmp1+1
.d6c3		d0 af		bne $d674	                bne _loop
.d6c5		c9 00		cmp #$00	_done:          cmp #0      ; A is 0 on failure and $FF on success
.d6c7		60		rts		                rts         ; so cmp #0 sets Z on failure and clears on success
.d6c8						compare_16bit:
.d6c8		b5 00		lda $00,x	                lda 0,x                 ; LSB of TOS
.d6ca		d5 02		cmp $02,x	                cmp 2,x                 ; LSB of NOS
.d6cc		f0 08		beq $d6d6	                beq _equal
.d6ce		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d6d0		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d6d2		70 08		bvs $d6dc	                bvs _overflow
.d6d4		80 08		bra $d6de	                bra _not_equal
.d6d6						_equal:
.d6d6		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d6d8		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d6da		50 04		bvc $d6e0	                bvc _done
.d6dc						_overflow:
.d6dc		49 80		eor #$80	                eor #$80                ; complement negative flag
.d6de						_not_equal:
.d6de		09 01		ora #$01	                ora #1                  ; set Z=0 since we're not equal
.d6e0						_done:
.d6e0		60		rts		                rts
.d6e1						current_to_dp:
.d6e1		a0 08		ldy #$08	                ldy #current_offset
.d6e3		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d6e5		0a		asl a		                asl             ; turn it into an offset (in cells)
.d6e6		18		clc		                clc
.d6e7		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d6e9		a8		tay		                tay
.d6ea		b1 08		lda ($08),y	                lda (up),y              ; get the dp for that wordlist.
.d6ec		85 02		sta $02		                sta dp
.d6ee		c8		iny		                iny
.d6ef		b1 08		lda ($08),y	                lda (up),y
.d6f1		85 03		sta $03		                sta dp+1
.d6f3		60		rts		                rts
.d6f4						dp_to_current:
.d6f4		a0 08		ldy #$08	                ldy #current_offset
.d6f6		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d6f8		0a		asl a		                asl             ; turn it into an offset (in cells)
.d6f9		18		clc		                clc
.d6fa		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d6fc		a8		tay		                tay
.d6fd		a5 02		lda $02		                lda dp
.d6ff		91 08		sta ($08),y	                sta (up),y              ; get the dp for that wordlist.
.d701		c8		iny		                iny
.d702		a5 03		lda $03		                lda dp+1
.d704		91 08		sta ($08),y	                sta (up),y
.d706		60		rts		                rts
.d707						interpret:
.d707						_loop:
.d707		20 51 8d	jsr $8d51	                jsr xt_parse_name       ; ( "string" -- addr u )
.d70a		b5 00		lda $00,x	                lda 0,x
.d70c		15 01		ora $01,x	                ora 1,x
.d70e		f0 5b		beq $d76b	                beq _line_done
.d710		20 a5 93	jsr $93a5	                jsr xt_two_dup          ; ( addr u -- addr u addr u )
.d713		20 f0 9a	jsr $9af0	                jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
.d716		b5 00		lda $00,x	                lda 0,x
.d718		15 01		ora $01,x	                ora 1,x
.d71a		d0 19		bne $d735	                bne _got_name_token
.d71c		e8		inx		                inx                     ; ( addr u 0 -- addr u )
.d71d		e8		inx		                inx
.d71e		20 91 9c	jsr $9c91	                jsr xt_number           ; ( addr u -- u|d )
.d721		a5 1a		lda $1a		                lda state
.d723		f0 e2		beq $d707	                beq _loop
.d725		a9 20		lda #$20	                lda #%00100000
.d727		24 1c		bit $1c		                bit status
.d729		d0 05		bne $d730	                bne _double_number
.d72b		20 f2 89	jsr $89f2	                jsr xt_literal
.d72e		80 d7		bra $d707	                bra _loop
.d730						_double_number:
.d730		20 e9 9e	jsr $9ee9	                jsr xt_two_literal
.d733		80 d2		bra $d707	                bra _loop
.d735						_got_name_token:
.d735		b5 00		lda $00,x	                lda 0,x
.d737		95 04		sta $04,x	                sta 4,x
.d739		b5 01		lda $01,x	                lda 1,x
.d73b		95 05		sta $05,x	                sta 5,x
.d73d		e8		inx		                inx
.d73e		e8		inx		                inx
.d73f		e8		inx		                inx
.d740		e8		inx		                inx                     ; ( nt )
.d741		20 e9 8c	jsr $8ce9	                jsr xt_one_plus
.d744		a1 00		lda ($00,x)	                lda (0,x)
.d746		48		pha		                pha
.d747		20 dd 8c	jsr $8cdd	                jsr xt_one_minus
.d74a		20 2e 9c	jsr $9c2e	                jsr xt_name_to_int      ; ( nt - xt )
.d74d		a5 1a		lda $1a		                lda state
.d74f		d0 10		bne $d761	                bne _compile
.d751		68		pla		                pla
.d752		29 01		and #$01	                and #CO                 ; mask everything but Compile Only bit
.d754		f0 05		beq $d75b	                beq _interpret
.d756		a9 02		lda #$02	                lda #err_compileonly
.d758		4c a0 d7	jmp $d7a0	                jmp error
.d75b						_interpret:
.d75b		20 05 88	jsr $8805	                jsr xt_execute
.d75e		4c 07 d7	jmp $d707	                jmp _loop
.d761						_compile:
.d761		68		pla		                pla
.d762		29 04		and #$04	                and #IM                 ; Mask all but IM bit
.d764		d0 f5		bne $d75b	                bne _interpret          ; IMMEDIATE word, execute right now
.d766		20 b2 96	jsr $96b2	                jsr xt_compile_comma
.d769		80 9c		bra $d707	                bra _loop
.d76b						_line_done:
.d76b		e8		inx		                inx
.d76c		e8		inx		                inx
.d76d		e8		inx		                inx
.d76e		e8		inx		                inx
.d76f		60		rts		                rts
.d770						is_printable:
.d770		c9 20		cmp #$20	                cmp #AscSP              ; $20
.d772		90 08		bcc $d77c	                bcc _done
.d774		c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.d776		b0 03		bcs $d77b	                bcs _failed
.d778		38		sec		                sec
.d779		80 01		bra $d77c	                bra _done
.d77b						_failed:
.d77b		18		clc		                clc
.d77c						_done:
.d77c		60		rts		                rts
.d77d						is_whitespace:
.d77d		c9 00		cmp #$00	                cmp #00         ; explicit comparison to leave Y untouched
.d77f		90 08		bcc $d789	                bcc _done
.d781		c9 21		cmp #$21	                cmp #AscSP+1
.d783		b0 03		bcs $d788	                bcs _failed
.d785		38		sec		                sec
.d786		80 01		bra $d789	                bra _done
.d788						_failed:
.d788		18		clc		                clc
.d789						_done:
.d789		60		rts		                rts
.d78a						underflow_1:
.d78a		e0 77		cpx #$77	                cpx #dsp0-1
.d78c		10 10		bpl $d79e	                bpl underflow_error
.d78e		60		rts		                rts
.d78f						underflow_2:
.d78f		e0 75		cpx #$75	                cpx #dsp0-3
.d791		10 0b		bpl $d79e	                bpl underflow_error
.d793		60		rts		                rts
.d794						underflow_3:
.d794		e0 73		cpx #$73	                cpx #dsp0-5
.d796		10 06		bpl $d79e	                bpl underflow_error
.d798		60		rts		                rts
.d799						underflow_4:
.d799		e0 71		cpx #$71	                cpx #dsp0-7
.d79b		10 01		bpl $d79e	                bpl underflow_error
.d79d		60		rts		                rts
.d79e						underflow_error:
.d79e		a9 09		lda #$09	                lda #err_underflow      ; fall through to error
.d7a0						error:
.d7a0		48		pha		                pha                     ; save error
.d7a1		20 e0 d7	jsr $d7e0	                jsr print_error
.d7a4		20 3a 84	jsr $843a	                jsr xt_cr
.d7a7		68		pla		                pla
.d7a8		c9 09		cmp #$09	                cmp #err_underflow      ; should we display return stack?
.d7aa		d0 17		bne $d7c3	                bne _no_underflow
.d7ac		a9 0d		lda #$0d	                lda #err_returnstack
.d7ae		20 e0 d7	jsr $d7e0	                jsr print_error
.d7b1		ba		tsx		                tsx
.d7b2						-
.d7b2		e8		inx		                inx
.d7b3		f0 0b		beq $d7c0	                beq +
.d7b5		20 c5 91	jsr $91c5	                jsr xt_space
.d7b8		bd 00 01	lda $0100,x	                lda $100,x
.d7bb		20 55 d6	jsr $d655	                jsr byte_to_ascii
.d7be		80 f2		bra $d7b2	                bra -
.d7c0						+
.d7c0		20 3a 84	jsr $843a	                jsr xt_cr
.d7c3						_no_underflow:
.d7c3		4c 5e 80	jmp $805e	                jmp xt_abort            ; no jsr, as we clobber return stack
.d7c6						print_string_no_lf:
.d7c6		0a		asl a		                asl
.d7c7		a8		tay		                tay
.d7c8		b9 d5 d2	lda $d2d5,y	                lda string_table,y
.d7cb		85 29		sta $29		                sta tmp3                ; LSB
.d7cd		c8		iny		                iny
.d7ce		b9 d5 d2	lda $d2d5,y	                lda string_table,y
.d7d1		85 2a		sta $2a		                sta tmp3+1              ; MSB
.d7d3						print_common:
.d7d3		a0 00		ldy #$00	                ldy #0
.d7d5						_loop:
.d7d5		b1 29		lda ($29),y	                lda (tmp3),y
.d7d7		f0 06		beq $d7df	                beq _done               ; strings are zero-terminated
.d7d9		20 c5 86	jsr $86c5	                jsr emit_a              ; allows vectoring via output
.d7dc		c8		iny		                iny
.d7dd		80 f6		bra $d7d5	                bra _loop
.d7df						_done:
.d7df		60		rts		                rts
.d7e0						print_error:
.d7e0		0a		asl a		                asl
.d7e1		a8		tay		                tay
.d7e2		b9 ba d3	lda $d3ba,y	                lda error_table,y
.d7e5		85 29		sta $29		                sta tmp3                ; LSB
.d7e7		c8		iny		                iny
.d7e8		b9 ba d3	lda $d3ba,y	                lda error_table,y
.d7eb		85 2a		sta $2a		                sta tmp3+1              ; MSB
.d7ed		20 d3 d7	jsr $d7d3	                jsr print_common
.d7f0		60		rts		                rts
.d7f1						print_string:
.d7f1		20 c6 d7	jsr $d7c6	                jsr print_string_no_lf
.d7f4		4c 3a 84	jmp $843a	                jmp xt_cr               ; JSR/RTS because never compiled
.d7f7						print_u:
.d7f7		20 f1 9d	jsr $9df1	                jsr xt_zero                     ; 0
.d7fa		20 cf 89	jsr $89cf	                jsr xt_less_number_sign         ; <#
.d7fd		20 b3 8c	jsr $8cb3	                jsr xt_number_sign_s            ; #S
.d800		20 91 8c	jsr $8c91	                jsr xt_number_sign_greater      ; #>
.d803		4c af 94	jmp $94af	                jmp xt_type                     ; JSR/RTS because never compiled

;******  Return to file: platform/platform-py65mon.asm


;******  Processing file: platform/simulator.asm

=$f000						io_start = $f000
>f000						                .byte ?
>f001						io_putc:        .byte ?     ; $f001     write byte to stdout
>f002						                .word ?
>f004						io_getc:        .byte ?     ; $f004     read byte from stdin
>f005						io_peekc:       .byte ?     ; $f005     non-blocking input
>f006						io_clk_start:   .byte ?     ; $f006     *read* to start cycle counter
>f007						io_clk_stop:    .byte ?     ; $f007     *read* to stop the cycle counter
>f008						io_clk_cycles:  .word ?,?   ; $f008-b   32-bit cycle count in NUXI order
>f00c						                .word ?,?
>f010						io_blk_action:  .byte ?     ; $f010     Write to act (status=0 read=1 write=2)
>f011						io_blk_status:  .byte ?     ; $f011     Read action result (OK=0)
>f012						io_blk_number:  .word ?     ; $f012     Little endian block number 0-ffff
>f014						io_blk_buffer:  .word ?     ; $f014     Little endian memory address
.f016						io_end:
.f016						kernel_init:
.f016		78		sei		                sei             ; Disable interrupts
.f017		a2 00		ldx #$00	                ldx #0
.f019		bd 32 f0	lda $f032,x	-               lda s_kernel_id,x
.f01c		f0 06		beq $f024	                beq _done
.f01e		20 2d f0	jsr $f02d	                jsr kernel_putc
.f021		e8		inx		                inx
.f022		80 f5		bra $f019	                bra -
.f024						_done:
.f024		4c 00 80	jmp $8000	                jmp forth
.f027						kernel_getc:
.f027						_loop:
.f027		ad 04 f0	lda $f004	                lda io_getc
.f02a		f0 fb		beq $f027	                beq _loop
.f02c		60		rts		                rts
.f02d						kernel_putc:
.f02d		8d 01 f0	sta $f001	                sta io_putc
.f030		60		rts		                rts
.f031						kernel_bye:
.f031		00		brk #		                brk

;******  Return to file: platform/platform-py65mon.asm

.f032						s_kernel_id:
>f032		54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 default kernel for py65mon (04. Dec 2022)", AscLF, 0
>f03a		74 68 20 32 20 64 65 66 61 75 6c 74 20 6b 65 72
>f04a		6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f 6e 20
>f05a		28 30 34 2e 20 44 65 63 20 32 30 32 32 29 0a 00
>fffa		16 f0				v_nmi   .word kernel_init
>fffc		16 f0				v_reset .word kernel_init
>fffe		16 f0				v_irq   .word kernel_init

;******  End of listing
