
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output taliforth-py65mon.bin platform/platform-py65mon.asm
; Thu Aug 15 15:28:07 2024

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

="py65mon"					TALI_ARCH := "py65mon"
=$7fff						ram_end = $7fff
=						TALI_OPTIONAL_WORDS := [ "ed", "editor", "ramdrive", "block", "environment?", "assembler", "disassembler", "wordlist" ]
=["lf"]						TALI_OPTION_CR_EOL := [ "lf" ]
=1						TALI_OPTION_HISTORY := 1
=0						TALI_OPTION_TERSE := 0

;******  Processing file: platform/simulator.asm


;******  Processing file: platform/../taliforth.asm

.8000						code0:
.8000						forth:

;******  Processing file: platform/../words/all.asm

.8000						xt_cold:
.8000						w_cold:
.8000		d8		cld		                cld
.8001		a9 22		lda #$22	                lda #<kernel_putc
.8003		85 12		sta $12		                sta output
.8005		a9 f0		lda #$f0	                lda #>kernel_putc
.8007		85 13		sta $13		                sta output+1
.8009		a2 1d		ldx #$1d	                ldx #cold_zp_table_end-cold_zp_table-1
.800b						_load_zp_loop:
.800b		bd 7a b3	lda $b37a,x	                lda cold_zp_table,x
.800e		95 00		sta $00,x	                sta zpage,x
.8010		ca		dex		                dex
.8011		d0 f8		bne $800b	                bne _load_zp_loop
.8013		ad 7a b3	lda $b37a	                lda cold_zp_table
.8016		85 00		sta $00		                sta zpage
.8018		a2 ff		ldx #$ff	                ldx #rsp0
.801a		9a		txs		                txs
.801b		a2 78		ldx #$78	                ldx #dsp0
.801d		a0 35		ldy #$35	                ldy #cold_user_table_end-cold_user_table-1
.801f						_load_user_vars_loop:
.801f		b9 98 b3	lda $b398,y	                lda cold_user_table,y
.8022		91 08		sta ($08),y	                sta (up),y
.8024		88		dey		                dey
.8025		d0 f8		bne $801f	                bne _load_user_vars_loop
.8027		ad 98 b3	lda $b398	                lda cold_user_table
.802a		92 08		sta ($08)	                sta (up)
.802c		20 ef 83	jsr $83ef	                jsr w_cr
.802f		ca		dex		                dex
.8030		ca		dex		                dex
.8031		ca		dex		                dex
.8032		ca		dex		                dex
.8033		a9 ce		lda #$ce	                lda #<forth_words_start
.8035		95 02		sta $02,x	                sta 2,x
.8037		a9 b3		lda #$b3	                lda #>forth_words_start
.8039		95 03		sta $03,x	                sta 3,x
.803b		a9 e2		lda #$e2	                lda #<(user_words_end-forth_words_start)
.803d		95 00		sta $00,x	                sta 0,x
.803f		a9 00		lda #$00	                lda #>(user_words_end-forth_words_start)
.8041		95 01		sta $01,x	                sta 1,x
.8043		20 81 88	jsr $8881	                jsr w_evaluate
.8046		9c 00 7c	stz $7c00	                stz hist_buff
.8049		9c 80 7c	stz $7c80	                stz hist_buff+$80
.804c		9c 00 7d	stz $7d00	                stz hist_buff+$100
.804f		9c 80 7d	stz $7d80	                stz hist_buff+$180
.8052		9c 00 7e	stz $7e00	                stz hist_buff+$200
.8055		9c 80 7e	stz $7e80	                stz hist_buff+$280
.8058		9c 00 7f	stz $7f00	                stz hist_buff+$300
.805b		9c 80 7f	stz $7f80	                stz hist_buff+$380
.805e						xt_abort:
.805e						w_abort:
.805e		a2 78		ldx #$78	                ldx #dsp0
.8060						xt_quit:
.8060						w_quit:
.8060		8a		txa		                txa             ; Save the DSP that we just defined
.8061		a2 ff		ldx #$ff	                ldx #rsp0
.8063		9a		txs		                txs
.8064		aa		tax		                tax             ; Restore the DSP. Dude, seriously.
.8065		64 04		stz $04		                stz ip
.8067		64 05		stz $05		                stz ip+1
.8069		64 0a		stz $0a		                stz insrc
.806b		64 0b		stz $0b		                stz insrc+1
.806d		a9 00		lda #$00	                lda #0
.806f		a0 04		ldy #$04	                ldy #blk_offset
.8071		91 08		sta ($08),y	                sta (up),y
.8073		c8		iny		                iny
.8074		91 08		sta ($08),y	                sta (up),y
.8076		a9 fc		lda #$fc	                lda #(256-4)
.8078		85 1f		sta $1f		                sta loopctrl
.807a		64 1a		stz $1a		                stz state
.807c		64 1b		stz $1b		                stz state+1
.807e						_get_line:
.807e		a9 00		lda #$00	                lda #<buffer0   ; input buffer, this is paranoid
.8080		85 0c		sta $0c		                sta cib
.8082		a9 02		lda #$02	                lda #>buffer0
.8084		85 0d		sta $0d		                sta cib+1
.8086		64 0e		stz $0e		                stz ciblen
.8088		64 0f		stz $0f		                stz ciblen+1
.808a		20 07 8f	jsr $8f07	                jsr w_refill           ; ( -- f )
.808d		b5 00		lda $00,x	                lda 0,x
.808f		d0 05		bne $8096	                bne _success
.8091		a9 06		lda #$06	                lda #err_refill
.8093		4c 28 d1	jmp $d128	                jmp error
.8096						_success:
.8096		e8		inx		                inx                     ; drop
.8097		e8		inx		                inx
.8098		20 91 d0	jsr $d091	                jsr interpret
.809b		e0 78		cpx #$78	                cpx #dsp0
.809d		f0 05		beq $80a4	                beq _stack_ok
.809f		90 03		bcc $80a4	                bcc _stack_ok           ; DSP must always be smaller than DSP0
.80a1		4c 26 d1	jmp $d126	                jmp underflow_error
.80a4						_stack_ok:
.80a4		a5 1a		lda $1a		                lda state
.80a6		f0 02		beq $80aa	                beq _print
.80a8		a9 01		lda #$01	                lda #1                  ; number for "compile" string
.80aa						_print:
.80aa		20 4e d1	jsr $d14e	                jsr print_string_no_lf
.80ad		20 ef 83	jsr $83ef	                jsr w_cr
.80b0		80 cc		bra $807e	                bra _get_line
.80b2						z_cold:
.80b2						z_abort:
.80b2						z_quit:

;******  Processing file: platform/../words/core.asm

.80b2						xt_abort_quote:
.80b2						w_abort_quote:
.80b2		20 a2 8f	jsr $8fa2	                jsr w_s_quote          ; S"
.80b5		a0 80		ldy #$80	                ldy #>abort_quote_runtime
.80b7		a9 bd		lda #$bd	                lda #<abort_quote_runtime
.80b9		20 b1 97	jsr $97b1	                jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
.80bc		60		rts		z_abort_quote:  rts
.80bd						abort_quote_runtime:
.80bd		b5 04		lda $04,x	                lda 4,x
.80bf		15 05		ora $05,x	                ora 5,x
.80c1		f0 09		beq $80cc	                beq _done       ; if FALSE, we're done
.80c3		20 b4 94	jsr $94b4	                jsr w_type
.80c6		20 ef 83	jsr $83ef	                jsr w_cr
.80c9		4c 5e 80	jmp $805e	                jmp w_abort    ; not JSR, so never come back
.80cc						_done:
.80cc		8a		txa		                txa
.80cd		18		clc		                clc
.80ce		69 06		adc #$06	                adc #6
.80d0		aa		tax		                tax
.80d1		60		rts		                rts
.80d2						xt_abs:
.80d2		20 12 d1	jsr $d112	                jsr underflow_1
.80d5						w_abs:
.80d5		b5 01		lda $01,x	                lda 1,x
.80d7		10 0d		bpl $80e6	                bpl _done       ; positive number, easy money!
.80d9		38		sec		                sec
.80da		a9 00		lda #$00	                lda #0
.80dc		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.80de		95 00		sta $00,x	                sta 0,x
.80e0		a9 00		lda #$00	                lda #0          ; MSB
.80e2		f5 01		sbc $01,x	                sbc 1,x
.80e4		95 01		sta $01,x	                sta 1,x
.80e6						_done:
.80e6		60		rts		z_abs:          rts
.80e7						xt_accept:
.80e7		20 17 d1	jsr $d117	                jsr underflow_2
.80ea						w_accept:
.80ea		b5 00		lda $00,x	                lda 0,x
.80ec		15 01		ora $01,x	                ora 1,x
.80ee		d0 09		bne $80f9	                bne _not_zero
.80f0		e8		inx		                inx
.80f1		e8		inx		                inx
.80f2		74 00		stz $00,x	                stz 0,x
.80f4		74 01		stz $01,x	                stz 1,x
.80f6		4c c5 81	jmp $81c5	                jmp accept_done
.80f9						_not_zero:
.80f9		b5 00		lda $00,x	                lda 0,x         ; number of chars to get in tmp2 ...
.80fb		85 27		sta $27		                sta tmp2
.80fd		64 28		stz $28		                stz tmp2+1      ; ... but we only accept max 255 chars
.80ff		b5 02		lda $02,x	                lda 2,x         ; address of buffer is NOS, to tmp1
.8101		85 25		sta $25		                sta tmp1
.8103		b5 03		lda $03,x	                lda 3,x
.8105		85 26		sta $26		                sta tmp1+1
.8107		e8		inx		                inx
.8108		e8		inx		                inx
.8109		a0 00		ldy #$00	                ldy #0
.810b		a5 1c		lda $1c		                lda status
.810d		29 f7		and #$f7	                and #$F7
.810f		1a		inc a		                ina
.8110		09 08		ora #$08	                ora #%00001000
.8112		85 1c		sta $1c		                sta status
.8114						accept_loop:
.8114		20 7d 89	jsr $897d	                jsr key_a
.8117		c9 0a		cmp #$0a	                cmp #AscLF
.8119		f0 20		beq $813b	                beq _eol
.811b		c9 0d		cmp #$0d	                cmp #AscCR
.811d		f0 1c		beq $813b	                beq _eol
.811f		c9 08		cmp #$08	                cmp #AscBS
.8121		f0 22		beq $8145	                beq _backspace
.8123		c9 7f		cmp #$7f	                cmp #AscDEL     ; (CTRL-h)
.8125		f0 1e		beq $8145	                beq _backspace
.8127		c9 10		cmp #$10	                cmp #AscCP
.8129		f0 36		beq $8161	                beq _ctrl_p
.812b		c9 0e		cmp #$0e	                cmp #AscCN
.812d		f0 44		beq $8173	                beq _ctrl_n
.812f		91 25		sta ($25),y	                sta (tmp1),y
.8131		c8		iny		                iny
.8132		20 93 86	jsr $8693	                jsr emit_a
.8135		c4 27		cpy $27		                cpy tmp2        ; reached character limit?
.8137		d0 db		bne $8114	                bne accept_loop       ; fall through if buffer limit reached
.8139		80 03		bra $813e	                bra _buffer_full
.813b						_eol:
.813b		20 b5 91	jsr $91b5	                jsr w_space    ; print final space
.813e						_buffer_full:
.813e		94 00		sty $00,x	                sty 0,x         ; Y contains number of chars accepted already
.8140		74 01		stz $01,x	                stz 1,x         ; we only accept 256 chars
.8142		4c c5 81	jmp $81c5	                jmp accept_done
.8145						_backspace:
.8145		c0 00		cpy #$00	                cpy #0          ; buffer empty?
.8147		d0 06		bne $814f	                bne +
.8149		a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.814b		20 93 86	jsr $8693	                jsr emit_a
.814e		c8		iny		                iny
.814f						+
.814f		88		dey		                dey
.8150		a9 08		lda #$08	                lda #AscBS      ; move back one
.8152		20 93 86	jsr $8693	                jsr emit_a
.8155		a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.8157		20 93 86	jsr $8693	                jsr emit_a
.815a		a9 08		lda #$08	                lda #AscBS      ; move back over space
.815c		20 93 86	jsr $8693	                jsr emit_a
.815f		80 b3		bra $8114	                bra accept_loop
.8161						_ctrl_p:
.8161		a5 1c		lda $1c		                lda status
.8163		29 07		and #$07	                and #7
.8165		d0 08		bne $816f	                bne _ctrl_p_dec
.8167		a5 1c		lda $1c		                lda status
.8169		09 07		ora #$07	                ora #7
.816b		85 1c		sta $1c		                sta status
.816d		80 11		bra $8180	                bra _recall_history
.816f						_ctrl_p_dec:
.816f		c6 1c		dec $1c		                dec status
.8171		80 0d		bra $8180	                bra _recall_history
.8173						_ctrl_n:
.8173		a9 08		lda #$08	                lda #$8
.8175		24 1c		bit $1c		                bit status
.8177		d0 07		bne $8180	                bne _recall_history
.8179		a5 1c		lda $1c		                lda status
.817b		29 f7		and #$f7	                and #$F7
.817d		1a		inc a		               ina
.817e		85 1c		sta $1c		                sta status
.8180						_recall_history:
.8180		a9 08		lda #$08	                lda #%00001000
.8182		14 1c		trb $1c		                trb status
.8184		20 e0 81	jsr $81e0	                jsr accept_total_recall
.8187		a9 0d		lda #$0d	                lda #AscCR
.8189		20 93 86	jsr $8693	                jsr emit_a
.818c						input_clear:
.818c		c0 00		cpy #$00	                cpy #0
.818e		f0 08		beq $8198	                beq input_cleared
.8190		a9 20		lda #$20	                lda #AscSP
.8192		20 93 86	jsr $8693	                jsr emit_a
.8195		88		dey		                dey
.8196		80 f4		bra $818c	                bra input_clear
.8198						input_cleared:
.8198		a9 0d		lda #$0d	                lda #AscCR
.819a		20 93 86	jsr $8693	                jsr emit_a
.819d		b1 29		lda ($29),y	                lda (tmp3),y
.819f		85 1d		sta $1d		                sta status+1
.81a1		e6 29		inc $29		                inc tmp3
.81a3		d0 02		bne $81a7	                bne +           ; Increment the upper byte on carry.
.81a5		e6 2a		inc $2a		                inc tmp3+1
.81a7						+
.81a7		a9 0d		lda #$0d	                lda #AscCR
.81a9		20 93 86	jsr $8693	                jsr emit_a
.81ac						_history_loop:
.81ac		c4 1d		cpy $1d		                cpy status+1
.81ae		d0 03		bne $81b3	                bne +
.81b0		4c 14 81	jmp $8114	                jmp accept_loop       ; Needs a long jump
.81b3						+
.81b3		c4 27		cpy $27		                cpy tmp2
.81b5		f0 0a		beq $81c1	                beq _hist_filled_buffer
.81b7		b1 29		lda ($29),y	                lda (tmp3),y
.81b9		91 25		sta ($25),y	                sta (tmp1),y
.81bb		20 93 86	jsr $8693	                jsr emit_a
.81be		c8		iny		                iny
.81bf		80 eb		bra $81ac	                bra _history_loop
.81c1						_hist_filled_buffer:
.81c1		88		dey		                dey
.81c2		4c 14 81	jmp $8114	                jmp accept_loop
.81c5						accept_done:
.81c5		20 e0 81	jsr $81e0	                jsr accept_total_recall
.81c8		85 1d		sta $1d		                sta status+1
.81ca		a0 00		ldy #$00	                ldy #0
.81cc		91 29		sta ($29),y	                sta (tmp3),y
.81ce		e6 29		inc $29		                inc tmp3
.81d0		d0 02		bne $81d4	                bne +           ; Increment the upper byte on carry.
.81d2		e6 2a		inc $2a		                inc tmp3+1
.81d4						+
.81d4						_save_history_loop:
.81d4		c4 1d		cpy $1d		                cpy status+1
.81d6		f0 07		beq $81df	                beq _save_history_done
.81d8		b1 25		lda ($25),y	                lda (tmp1),y
.81da		91 29		sta ($29),y	                sta (tmp3),y
.81dc		c8		iny		                iny
.81dd		80 f5		bra $81d4	                bra _save_history_loop
.81df						_save_history_done:
.81df						z_accept:
.81df		60		rts		                rts
.81e0						accept_total_recall:
.81e0		a9 00		lda #$00	                lda #<hist_buff
.81e2		85 29		sta $29		                sta tmp3
.81e4		a9 7c		lda #$7c	                lda #>hist_buff
.81e6		85 2a		sta $2a		                sta tmp3+1
.81e8		a5 1c		lda $1c		                lda status
.81ea		6a		ror a		                ror
.81eb		29 03		and #$03	                and #3
.81ed		18		clc		                clc
.81ee		65 2a		adc $2a		                adc tmp3+1
.81f0		85 2a		sta $2a		                sta tmp3+1
.81f2		a5 1c		lda $1c		                lda status
.81f4		6a		ror a		                ror             ; Rotate through carry into msb.
.81f5		6a		ror a		                ror
.81f6		29 80		and #$80	                and #$80
.81f8		18		clc		                clc
.81f9		65 29		adc $29		                adc tmp3
.81fb		85 29		sta $29		                sta tmp3
.81fd		90 02		bcc $8201	                bcc +           ; Increment the upper byte on carry.
.81ff		e6 2a		inc $2a		                inc tmp3+1
.8201						+
.8201		98		tya		                tya
.8202		c9 80		cmp #$80	                cmp #$80
.8204		90 02		bcc $8208	                bcc +
.8206		a9 7f		lda #$7f	                lda #$7F
.8208						+
.8208		60		rts		                rts
.8209						xt_action_of:
.8209						w_action_of:
.8209		a5 1a		lda $1a		                lda state
.820b		05 1b		ora $1b		                ora state+1
.820d		f0 0c		beq $821b	                beq _interpreting
.820f		20 17 83	jsr $8317	                jsr w_bracket_tick
.8212		a0 85		ldy #$85	                ldy #>w_defer_fetch
.8214		a9 07		lda #$07	                lda #<w_defer_fetch
.8216		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8219		80 06		bra $8221	                bra _done
.821b						_interpreting:
.821b		20 2f 92	jsr $922f	                jsr w_tick
.821e		20 07 85	jsr $8507	                jsr w_defer_fetch
.8221						_done:
.8221		60		rts		z_action_of:           rts
.8222						xt_again:
.8222		20 12 d1	jsr $d112	                jsr underflow_1
.8225						w_again:
.8225		20 a2 97	jsr $97a2	                jsr cmpl_jump_tos
.8228		60		rts		z_again:        rts
.8229						xt_align:
.8229						xt_aligned:
.8229						w_align:
.8229						w_aligned:
.8229						z_align:
.8229						z_aligned:
.8229		60		rts		                rts             ; stripped out during native compile
.822a						xt_allot:
.822a		20 12 d1	jsr $d112	                jsr underflow_1
.822d						w_allot:
.822d		b5 01		lda $01,x	                lda 1,x
.822f		30 22		bmi $8253	                bmi _release
.8231		18		clc		                clc
.8232		a5 00		lda $00		                lda cp
.8234		75 00		adc $00,x	                adc 0,x
.8236		85 00		sta $00		                sta cp
.8238		a5 01		lda $01		                lda cp+1
.823a		75 01		adc $01,x	                adc 1,x
.823c		85 01		sta $01		                sta cp+1
.823e		a0 00		ldy #$00	                ldy #<cp_end
.8240		c4 00		cpy $00		                cpy cp
.8242		a9 7c		lda #$7c	                lda #>cp_end
.8244		e5 01		sbc $01		                sbc cp+1
.8246		b0 48		bcs $8290	                bcs _done               ; we're fine.
.8248		84 00		sty $00		                sty cp                  ; still #<cp_end
.824a		a9 7c		lda #$7c	                lda #>cp_end
.824c		85 01		sta $01		                sta cp+1
.824e		a9 00		lda #$00	                lda #err_allot
.8250		4c 28 d1	jmp $d128	                jmp error
.8253						_release:
.8253		ca		dex		                dex
.8254		ca		dex		                dex
.8255		a5 00		lda $00		                lda cp
.8257		95 00		sta $00,x	                sta 0,x
.8259		a5 01		lda $01		                lda cp+1
.825b		95 01		sta $01,x	                sta 1,x
.825d		20 29 8e	jsr $8e29	                jsr w_plus                     ; new CP is now TOS
.8260		ca		dex		                dex
.8261		ca		dex		                dex                             ; new CP now NOS
.8262		a9 00		lda #$00	                lda #<cp0
.8264		95 00		sta $00,x	                sta 0,x
.8266		a9 03		lda #$03	                lda #>cp0
.8268		95 01		sta $01,x	                sta 1,x                         ; CP0 is TOS
.826a		20 52 d0	jsr $d052	                jsr compare_16bit               ; still ( CP CP0 )
.826d		f0 17		beq $8286	                beq _nega_done
.826f		30 15		bmi $8286	                bmi _nega_done
.8271		a9 00		lda #$00	                lda #<cp0
.8273		85 00		sta $00		                sta cp
.8275		a9 03		lda #$03	                lda #>cp0
.8277		85 01		sta $01		                sta cp+1
.8279		a9 b0		lda #$b0	                lda #<dictionary_start
.827b		85 02		sta $02		                sta dp
.827d		a9 b4		lda #$b4	                lda #>dictionary_start
.827f		85 03		sta $03		                sta dp+1
.8281		a9 0a		lda #$0a	                lda #err_negallot
.8283		4c 28 d1	jmp $d128	                jmp error
.8286						_nega_done:
.8286		b5 02		lda $02,x	                lda 2,x
.8288		85 00		sta $00		                sta cp
.828a		b5 03		lda $03,x	                lda 3,x
.828c		85 01		sta $01		                sta cp+1
.828e		e8		inx		                inx
.828f		e8		inx		                inx                     ; drop through to _done
.8290						_done:
.8290		e8		inx		                inx
.8291		e8		inx		                inx
.8292						z_allot:
.8292		60		rts		                rts
.8293						xt_and:
.8293		20 17 d1	jsr $d117	                jsr underflow_2
.8296						w_and:
.8296		b5 00		lda $00,x	                lda 0,x
.8298		35 02		and $02,x	                and 2,x
.829a		95 02		sta $02,x	                sta 2,x
.829c		b5 01		lda $01,x	                lda 1,x
.829e		35 03		and $03,x	                and 3,x
.82a0		95 03		sta $03,x	                sta 3,x
.82a2		e8		inx		                inx
.82a3		e8		inx		                inx
.82a4		60		rts		z_and:          rts
.82a5						xt_at_xy:
.82a5		20 17 d1	jsr $d117	                jsr underflow_2
.82a8						w_at_xy:
.82a8		a5 18		lda $18		                lda base
.82aa		48		pha		                pha
.82ab		a9 0a		lda #$0a	                lda #10
.82ad		85 18		sta $18		                sta base
.82af		a9 1b		lda #$1b	                lda #AscESC
.82b1		20 93 86	jsr $8693	                jsr emit_a
.82b4		a9 5b		lda #$5b	                lda #'['
.82b6		20 93 86	jsr $8693	                jsr emit_a
.82b9		20 bf 8c	jsr $8cbf	                jsr w_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82bc		20 7a d1	jsr $d17a	                jsr print_u
.82bf		a9 3b		lda #$3b	                lda #';'
.82c1		20 93 86	jsr $8693	                jsr emit_a
.82c4		20 bf 8c	jsr $8cbf	                jsr w_one_plus ; AT-XY is zero based, but ANSI is 1 based
.82c7		20 7a d1	jsr $d17a	                jsr print_u
.82ca		a9 48		lda #$48	                lda #'H'
.82cc		20 93 86	jsr $8693	                jsr emit_a
.82cf		68		pla		                pla
.82d0		85 18		sta $18		                sta base
.82d2		60		rts		z_at_xy:        rts
.82d3						xt_backslash:
.82d3						w_backslash:
.82d3		a0 04		ldy #$04	                ldy #blk_offset
.82d5		b1 08		lda ($08),y	                lda (up),y
.82d7		c8		iny		                iny
.82d8		11 08		ora ($08),y	                ora (up),y
.82da		f0 19		beq $82f5	                beq backslash_not_block
.82dc		a5 10		lda $10		                lda toin
.82de		29 3f		and #$3f	                and #$3F
.82e0		f0 1b		beq $82fd	                beq z_backslash
.82e2		c9 01		cmp #$01	                cmp #$1
.82e4		f0 17		beq $82fd	                beq z_backslash
.82e6		a5 10		lda $10		                lda toin
.82e8		29 c0		and #$c0	                and #$C0        ; Clear lower bits to move to beginning of line.
.82ea		18		clc		                clc             ; Add $40 (64 decimal) to move to next line.
.82eb		69 40		adc #$40	                adc #$40
.82ed		85 10		sta $10		                sta toin
.82ef		90 0c		bcc $82fd	                bcc z_backslash
.82f1		e6 11		inc $11		                inc toin+1
.82f3		80 08		bra $82fd	                bra z_backslash
.82f5						backslash_not_block:
.82f5		a5 0e		lda $0e		                lda ciblen
.82f7		85 10		sta $10		                sta toin
.82f9		a5 0f		lda $0f		                lda ciblen+1
.82fb		85 11		sta $11		                sta toin+1
.82fd		60		rts		z_backslash:    rts
.82fe						xt_base:
.82fe						w_base:
.82fe		ca		dex		                dex
.82ff		ca		dex		                dex
.8300		a9 18		lda #$18	                lda #<base
.8302		95 00		sta $00,x	                sta 0,x         ; LSB
.8304		74 01		stz $01,x	                stz 1,x         ; MSB is always 0
.8306		60		rts		z_base:         rts
.8307						xt_bl:
.8307						w_bl:
.8307		ca		dex		                dex
.8308		ca		dex		                dex
.8309		a9 20		lda #$20	                lda #AscSP
.830b		95 00		sta $00,x	                sta 0,x
.830d		74 01		stz $01,x	                stz 1,x
.830f		60		rts		z_bl:           rts
.8310						xt_bracket_char:
.8310						w_bracket_char:
.8310		20 56 83	jsr $8356	                jsr w_char
.8313		20 d3 89	jsr $89d3	                jsr w_literal
.8316		60		rts		z_bracket_char: rts
.8317						xt_bracket_tick:
.8317						w_bracket_tick:
.8317		20 2f 92	jsr $922f	                jsr w_tick
.831a		20 d3 89	jsr $89d3	                jsr w_literal
.831d		60		rts		z_bracket_tick: rts
.831e						xt_buffer_colon:
.831e						w_buffer_colon:
.831e		20 f5 83	jsr $83f5	                jsr w_create            ; will report default PFA size of 2 in SEE
.8321		20 2d 82	jsr $822d	                jsr w_allot
.8324		60		rts		z_buffer_colon: rts
.8325						xt_c_comma:
.8325		20 12 d1	jsr $d112	                jsr underflow_1
.8328						w_c_comma:
.8328		b5 00		lda $00,x	                lda 0,x
.832a		20 bc 97	jsr $97bc	                jsr cmpl_a
.832d		e8		inx		                inx
.832e		e8		inx		                inx
.832f		60		rts		z_c_comma:      rts
.8330						xt_c_fetch:
.8330		20 12 d1	jsr $d112	                jsr underflow_1
.8333						w_c_fetch:
.8333		a1 00		lda ($00,x)	                lda (0,x)
.8335		95 00		sta $00,x	                sta 0,x
.8337		74 01		stz $01,x	                stz 1,x         ; Ignore LSB
.8339		60		rts		z_c_fetch:      rts
.833a						xt_c_store:
.833a		20 17 d1	jsr $d117	                jsr underflow_2
.833d						w_c_store:
.833d		b5 02		lda $02,x	                lda 2,x
.833f		81 00		sta ($00,x)	                sta (0,x)
.8341		e8		inx		                inx
.8342		e8		inx		                inx
.8343		e8		inx		                inx
.8344		e8		inx		                inx
.8345		60		rts		z_c_store:      rts
.8346						xt_cell_plus:
.8346		20 12 d1	jsr $d112	                jsr underflow_1
.8349						w_cell_plus:
.8349		f6 00		inc $00,x	                inc 0,x
.834b		d0 02		bne $834f	                bne +
.834d		f6 01		inc $01,x	                inc 1,x
.834f						+
.834f		f6 00		inc $00,x	                inc 0,x
.8351		d0 02		bne $8355	                bne _done
.8353		f6 01		inc $01,x	                inc 1,x
.8355						_done:
.8355		60		rts		z_cell_plus:    rts
.8356						xt_char:
.8356						w_char:
.8356		20 24 8d	jsr $8d24	                jsr w_parse_name
.8359		b5 00		lda $00,x	                lda 0,x
.835b		15 01		ora $01,x	                ora 1,x
.835d		d0 05		bne $8364	                bne _not_empty
.835f		a9 05		lda #$05	                lda #err_noname
.8361		4c 28 d1	jmp $d128	                jmp error
.8364						_not_empty:
.8364		e8		inx		                inx             ; drop number of characters, leave addr
.8365		e8		inx		                inx
.8366		a1 00		lda ($00,x)	                lda (0,x)       ; get character (equivalent to C@)
.8368		95 00		sta $00,x	                sta 0,x
.836a		74 01		stz $01,x	                stz 1,x         ; MSB is always zero
.836c		60		rts		z_char:         rts
.836d						xt_chars:
.836d		20 12 d1	jsr $d112	                jsr underflow_1
.8370						w_chars:
.8370		60		rts		z_chars:        rts
.8371						xt_colon:
.8371						w_colon:
.8371		a5 1a		lda $1a		                lda state
.8373		05 1b		ora $1b		                ora state+1
.8375		f0 05		beq $837c	                beq +
.8377		a9 07		lda #$07	                lda #err_state
.8379		4c 28 d1	jmp $d128	                jmp error
.837c						+
.837c		c6 1a		dec $1a		                dec state
.837e		c6 1b		dec $1b		                dec state+1
.8380		a9 d0		lda #$d0	                lda #%11010000
.8382		04 1c		tsb $1c		                tsb status
.8384		a5 00		lda $00		                lda cp
.8386		85 06		sta $06		                sta workword
.8388		a5 01		lda $01		                lda cp+1
.838a		85 07		sta $07		                sta workword+1
.838c		a0 00		ldy #$00	                ldy #0                  ; Tell CREATE we want neither CFA nor dictionary update
.838e		20 fd 83	jsr $83fd	                jsr create_common
.8391		60		rts		z_colon:        rts
.8392						xt_colon_noname:
.8392						w_colon_noname:
.8392		a5 1a		lda $1a		                lda state
.8394		05 1b		ora $1b		                ora state+1
.8396		f0 05		beq $839d	                beq +
.8398		a9 07		lda #$07	                lda #err_state
.839a		4c 28 d1	jmp $d128	                jmp error
.839d						+
.839d		c6 1a		dec $1a		                dec state
.839f		c6 1b		dec $1b		                dec state+1
.83a1		a9 40		lda #$40	                lda #%01000000
.83a3		14 1c		trb $1c		                trb status
.83a5		a5 00		lda $00		                lda cp
.83a7		85 06		sta $06		                sta workword
.83a9		a5 01		lda $01		                lda cp+1
.83ab		85 07		sta $07		                sta workword+1
.83ad		60		rts		z_colon_noname:        rts
.83ae						xt_comma:
.83ae		20 12 d1	jsr $d112	                jsr underflow_1
.83b1						w_comma:
.83b1		a0 02		ldy #$02	                ldy #2
.83b3		b5 00		lda $00,x	_twice:         lda 0,x
.83b5		20 bc 97	jsr $97bc	                jsr cmpl_a
.83b8		e8		inx		                inx
.83b9		88		dey		                dey
.83ba		d0 f7		bne $83b3	                bne _twice
.83bc		60		rts		z_comma:        rts
.83bd						xt_compile_only:
.83bd						w_compile_only:
.83bd		20 6b d0	jsr $d06b	                jsr current_to_dp
.83c0		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.83c2		b1 02		lda ($02),y	                lda (dp),y
.83c4		09 01		ora #$01	                ora #CO        ; make sure bit 7 is set
.83c6		91 02		sta ($02),y	                sta (dp),y
.83c8		60		rts		z_compile_only: rts
.83c9						xt_value:
.83c9						xt_constant:
.83c9		20 12 d1	jsr $d112	                jsr underflow_1
.83cc						w_value:
.83cc						w_constant:
.83cc		a9 02		lda #$02	                lda #2
.83ce		85 1e		sta $1e		                sta tmpdsp              ; 2 byte PFA
.83d0		a9 7a		lda #$7a	                lda #<doconst           ; LSB of DOCONST
.83d2		a0 cf		ldy #$cf	                ldy #>doconst           ; MSB of DOCONST
.83d4		20 fd 83	jsr $83fd	                jsr create_common
.83d7		20 b1 83	jsr $83b1	                jsr w_comma
.83da						z_value:
.83da		60		rts		z_constant:     rts
.83db						xt_count:
.83db		20 12 d1	jsr $d112	                jsr underflow_1
.83de						w_count:
.83de		a1 00		lda ($00,x)	                lda (0,x)       ; Get number of characters (255 max)
.83e0		a8		tay		                tay
.83e1		f6 00		inc $00,x	                inc 0,x         ; LSB
.83e3		d0 02		bne $83e7	                bne +
.83e5		f6 01		inc $01,x	                inc 1,x         ; MSB
.83e7		98		tya		+               tya
.83e8		ca		dex		                dex
.83e9		ca		dex		                dex
.83ea		95 00		sta $00,x	                sta 0,x         ; LSB
.83ec		74 01		stz $01,x	                stz 1,x         ; MSB, always zero
.83ee		60		rts		z_count:        rts
.83ef						xt_cr:
.83ef						w_cr:
.83ef		a9 0a		lda #$0a	                lda #AscLF
.83f1		20 93 86	jsr $8693	                jsr emit_a
.83f4		60		rts		z_cr:           rts
.83f5						xt_create:
.83f5						w_create:
.83f5		a9 02		lda #$02	                lda #2                  ; 2 byte PFA for variable
.83f7		85 1e		sta $1e		                sta tmpdsp
.83f9						create_dovar:
.83f9		a0 cf		ldy #$cf	                ldy #>dovar
.83fb		a9 bb		lda #$bb	                lda #<dovar
.83fd						create_common:
.83fd		ca		dex		                dex
.83fe		ca		dex		                dex
.83ff		95 00		sta $00,x	                sta 0,x
.8401		94 01		sty $01,x	                sty 1,x
.8403		20 24 8d	jsr $8d24	                jsr w_parse_name        ; ( cfa addr u )
.8406		b5 01		lda $01,x	                lda 1,x
.8408		d0 0d		bne $8417	                bne _too_long
.840a		b5 00		lda $00,x	                lda 0,x
.840c		d0 05		bne $8413	                bne +
.840e		a9 05		lda #$05	                lda #err_noname
.8410		4c 28 d1	jmp $d128	                jmp error
.8413						+
.8413		c9 20		cmp #$20	                cmp #32
.8415		90 06		bcc $841d	                bcc +
.8417						_too_long:
.8417		a9 1f		lda #$1f	                lda #31
.8419		95 00		sta $00,x	                sta 0,x
.841b		74 01		stz $01,x	                stz 1,x
.841d						+
.841d		20 9f 93	jsr $939f	                jsr w_two_dup           ; ( cfa addr u addr u )
.8420		20 5d 9b	jsr $9b5d	                jsr w_find_name         ; ( cfa addr u flag ) (non-zero nt as flag)
.8423		e8		inx		                inx                     ; pre-drop flag (nt) from find-name.
.8424		e8		inx		                inx
.8425		b5 fe		lda $fe,x	                lda $fe,x
.8427		15 ff		ora $ff,x	                ora $ff,x
.8429		f0 1a		beq $8445	                beq _new_name           ; We haven't seen this one before.
.842b		24 1c		bit $1c		                bit status
.842d		10 06		bpl $8435	                bpl _redefined_name     ; Bit 7 is zero, so print the message.
.842f		a9 80		lda #$80	                lda #$80                ; Set bit 7 to indicate dup
.8431		04 1c		tsb $1c		                tsb status
.8433		80 14		bra $8449	                bra _process_name
.8435						_redefined_name:
.8435		a9 02		lda #$02	                lda #str_redefined
.8437		20 4e d1	jsr $d14e	                jsr print_string_no_lf
.843a		20 9f 93	jsr $939f	                jsr w_two_dup           ; ( cfa addr u addr u )
.843d		20 b4 94	jsr $94b4	                jsr w_type
.8440		20 b5 91	jsr $91b5	                jsr w_space
.8443		80 04		bra $8449	                bra _process_name
.8445						_new_name:
.8445		a9 80		lda #$80	                lda #$80                ; Clear status bit 7 to indicate new word.
.8447		14 1c		trb $1c		                trb status
.8449						_process_name:
.8449		a5 00		lda $00		                lda cp
.844b		85 25		sta $25		                sta tmp1
.844d		a5 01		lda $01		                lda cp+1
.844f		85 26		sta $26		                sta tmp1+1
.8451		b5 00		lda $00,x	                lda 0,x
.8453		85 27		sta $27		                sta tmp2                ; store length of string in tmp2
.8455		18		clc		                clc
.8456		69 08		adc #$08	                adc #8
.8458		85 28		sta $28		                sta tmp2+1               ; total header length
.845a		95 00		sta $00,x	                sta 0,x
.845c		74 01		stz $01,x	                stz 1,x                 ; max header size is 255 chars
.845e		20 2d 82	jsr $822d	                jsr w_allot
.8461		20 6b d0	jsr $d06b	                jsr current_to_dp
.8464		a0 00		ldy #$00	                ldy #0
.8466		a5 27		lda $27		                lda tmp2
.8468		91 25		sta ($25),y	                sta (tmp1),y
.846a		c8		iny		                iny
.846b		b5 03		lda $03,x	                lda 3,x                 ; check MSB of CFA
.846d		f0 02		beq $8471	                beq +                   ; 0 means no CFA, leave A=0
.846f		a9 10		lda #$10	                lda #HC                 ; otherwise set the HC bit
.8471						+
.8471		09 08		ora #$08	                ora #NN
.8473		91 25		sta ($25),y	                sta (tmp1),y
.8475		c8		iny		                iny
.8476		a5 02		lda $02		                lda dp
.8478		91 25		sta ($25),y	                sta (tmp1),y
.847a		c8		iny		                iny
.847b		a5 03		lda $03		                lda dp+1
.847d		91 25		sta ($25),y	                sta (tmp1),y
.847f		c8		iny		                iny
.8480		b5 03		lda $03,x	                lda 3,x
.8482		f0 08		beq $848c	                beq +
.8484		a5 26		lda $26		                lda tmp1+1
.8486		85 03		sta $03		                sta dp+1
.8488		a5 25		lda $25		                lda tmp1
.848a		85 02		sta $02		                sta dp
.848c						+
.848c		18		clc		                clc
.848d		a5 25		lda $25		                lda tmp1                ; redundant unless we skipped interlude
.848f		65 28		adc $28		                adc tmp2+1              ; add total header length
.8491		91 25		sta ($25),y	                sta (tmp1),y
.8493		85 23		sta $23		                sta tmptos              ; save result for next step
.8495		c8		iny		                iny
.8496		a5 26		lda $26		                lda tmp1+1
.8498		69 00		adc #$00	                adc #0                  ; only need the carry
.849a		91 25		sta ($25),y	                sta (tmp1),y
.849c		85 24		sta $24		                sta tmptos+1
.849e		c8		iny		                iny
.849f		18		clc		                clc
.84a0		b5 03		lda $03,x	                lda 3,x
.84a2		f0 04		beq $84a8	                beq +                   ; leave A=0
.84a4		a9 03		lda #$03	                lda #3
.84a6		65 1e		adc $1e		                adc tmpdsp              ; add PFA size, assume no carry
.84a8						+
.84a8		65 23		adc $23		                adc tmptos              ; add LSB of xt_
.84aa		91 25		sta ($25),y	                sta (tmp1),y
.84ac		c8		iny		                iny
.84ad		a5 24		lda $24		                lda tmptos+1            ; recall MSB of xt_
.84af		69 00		adc #$00	                adc #0                  ; only need the carry
.84b1		91 25		sta ($25),y	                sta (tmp1),y
.84b3		c8		iny		                iny
.84b4		b5 00		lda $00,x	                lda 0,x
.84b6		38		sec		                sec
.84b7		e9 08		sbc #$08	                sbc #8
.84b9		85 23		sta $23		                sta tmptos
.84bb		b5 01		lda $01,x	                lda 1,x
.84bd		e9 00		sbc #$00	                sbc #0          ; only need carry
.84bf		85 24		sta $24		                sta tmptos+1
.84c1						_name_loop:
.84c1		b1 23		lda ($23),y	                lda (tmptos),y
.84c3		c9 5b		cmp #$5b	                cmp #'Z'+1
.84c5		b0 06		bcs $84cd	                bcs _store_name
.84c7		c9 41		cmp #$41	                cmp #'A'
.84c9		90 02		bcc $84cd	                bcc _store_name
.84cb		09 20		ora #$20	                ora #$20
.84cd						_store_name:
.84cd		91 25		sta ($25),y	                sta (tmp1),y
.84cf		c8		iny		                iny
.84d0		c6 27		dec $27		                dec tmp2
.84d2		d0 ed		bne $84c1	                bne _name_loop
.84d4		b4 03		ldy $03,x	                ldy 3,x
.84d6		f0 08		beq $84e0	                beq +
.84d8		b5 02		lda $02,x	                lda 2,x
.84da		20 b1 97	jsr $97b1	                jsr cmpl_subroutine             ; Add the CFA jsr
.84dd		20 7e d0	jsr $d07e	                jsr dp_to_current
.84e0						+
.84e0		e8		inx		                inx
.84e1		e8		inx		                inx
.84e2		e8		inx		                inx
.84e3		e8		inx		                inx
.84e4		60		rts		z_create:       rts
.84e5						xt_decimal:
.84e5						w_decimal:
.84e5		a9 0a		lda #$0a	                lda #10
.84e7		85 18		sta $18		                sta base
.84e9		64 19		stz $19		                stz base+1              ; paranoid
.84eb		60		rts		z_decimal:      rts
.84ec						xt_defer:
.84ec						w_defer:
.84ec		a9 02		lda #$02	                lda #2
.84ee		85 1e		sta $1e		                sta tmpdsp      ; 2 byte PFA
.84f0		a9 8e		lda #$8e	                lda #<dodefer   ; LSB
.84f2		a0 cf		ldy #$cf	                ldy #>dodefer   ; MSB
.84f4		20 fd 83	jsr $83fd	                jsr create_common
.84f7		a9 ff		lda #$ff	                lda #<defer_error
.84f9		a0 84		ldy #$84	                ldy #>defer_error
.84fb		20 b8 97	jsr $97b8	                jsr cmpl_word
.84fe		60		rts		z_defer:        rts
.84ff						defer_error:
.84ff		a9 03		lda #$03	                lda #err_defer
.8501		4c 28 d1	jmp $d128	                jmp error
.8504						xt_defer_fetch:
.8504		20 12 d1	jsr $d112	                jsr underflow_1
.8507						w_defer_fetch:
.8507		20 8e 92	jsr $928e	                jsr w_to_body
.850a		20 e9 87	jsr $87e9	                jsr w_fetch
.850d		60		rts		z_defer_fetch:  rts
.850e						xt_defer_store:
.850e		20 17 d1	jsr $d117	                jsr underflow_2
.8511						w_defer_store:
.8511		20 8e 92	jsr $928e	                jsr w_to_body
.8514		20 08 92	jsr $9208	                jsr w_store
.8517		60		rts		z_defer_store:  rts
.8518						xt_depth:
.8518						w_depth:
.8518		a9 78		lda #$78	                lda #dsp0
.851a		86 1e		stx $1e		                stx tmpdsp
.851c		38		sec		                sec
.851d		e5 1e		sbc $1e		                sbc tmpdsp
.851f		4a		lsr a		                lsr
.8520		ca		dex		                dex
.8521		ca		dex		                dex
.8522		95 00		sta $00,x	                sta 0,x
.8524		74 01		stz $01,x	                stz 1,x
.8526		60		rts		z_depth:        rts
.8527						xt_question_do:
.8527						w_question_do:
.8527		ca		dex		                dex
.8528		ca		dex		                dex
.8529		a9 6a		lda #$6a	                lda #<question_do_runtime
.852b		95 00		sta $00,x	                sta 0,x
.852d		a9 85		lda #$85	                lda #>question_do_runtime
.852f		95 01		sta $01,x	                sta 1,x
.8531		20 69 86	jsr $8669	                jsr w_dup              ; xt and xt' are the same
.8534		ca		dex		                dex
.8535		ca		dex		                dex
.8536		a9 10		lda #$10	                lda #question_do_runtime_size
.8538		95 00		sta $00,x	                sta 0,x
.853a		74 01		stz $01,x	                stz 1,x
.853c		20 2f 97	jsr $972f	                jsr cmpl_by_limit
.853f		90 0b		bcc $854c	                bcc _native
.8541		20 e7 88	jsr $88e7	                jsr w_here
.8544		20 71 9e	jsr $9e71	                jsr w_zero
.8547		20 b1 83	jsr $83b1	                jsr w_comma
.854a		80 08		bra $8554	                bra do_common
.854c						_native:
.854c		20 91 97	jsr $9791	                jsr cmpl_jump_later
.854f		80 03		bra $8554	                bra do_common
.8551						xt_do:
.8551						w_do:
.8551		20 71 9e	jsr $9e71	                jsr w_zero             ; push 0 TOS
.8554						do_common:
.8554		ca		dex		                dex
.8555		ca		dex		                dex
.8556		a5 21		lda $21		                lda loopleave
.8558		95 00		sta $00,x	                sta 0,x
.855a		a5 22		lda $22		                lda loopleave+1
.855c		95 01		sta $01,x	                sta 1,x
.855e		64 22		stz $22		                stz loopleave+1
.8560		a0 85		ldy #$85	                ldy #>do_runtime
.8562		a9 82		lda #$82	                lda #<do_runtime
.8564		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8567		4c e7 88	jmp $88e7	                jmp w_here
.856a						z_question_do:
.856a						z_do:
.856a						question_do_runtime:
.856a		b5 00		lda $00,x	                lda 0,x
.856c		d5 02		cmp $02,x	                cmp 2,x
.856e		d0 0d		bne $857d	                bne _begin
.8570		b5 01		lda $01,x	                lda 1,x
.8572		d5 03		cmp $03,x	                cmp 3,x
.8574		d0 07		bne $857d	                bne _begin
.8576		e8		inx		                inx                     ; drop loop limits and skip
.8577		e8		inx		                inx
.8578		e8		inx		                inx
.8579		e8		inx		                inx
=16						question_do_runtime_size = * - question_do_runtime
.857a		a9 00		lda #$00	                lda #0
>857c		2c				                .byte $2c               ; BIT llhh to hide the lda #1
.857d		a9 01		lda #$01	_begin:         lda #1
.857f		4c 54 98	jmp $9854	                jmp zbranch_runtime
.8582						do_runtime:
.8582		a4 1f		ldy $1f		                ldy loopctrl
.8584		30 05		bmi $858b	                bmi +                   ; is this the first LCB?
.8586		a5 20		lda $20		                lda loopidx0            ; no, write cached LSB
.8588		99 00 01	sta $0100,y	                sta loopindex,y         ; back to loopindex in the LCB
.858b						+
.858b		c8		iny		                iny                     ; Reserve 4 bytes for next LCB
.858c		c8		iny		                iny
.858d		c8		iny		                iny
.858e		c8		iny		                iny
.858f		84 1f		sty $1f		                sty loopctrl            ; Udpate LCB stack pointer
.8591		38		sec		                sec
.8592		a9 00		lda #$00	                lda #0
.8594		f5 02		sbc $02,x	                sbc 2,x             ; LSB of limit
.8596		99 02 01	sta $0102,y	                sta loopfufa,y      ; write to loop control block
.8599		a9 80		lda #$80	                lda #$80
.859b		f5 03		sbc $03,x	                sbc 3,x             ; MSB of limit
.859d		99 03 01	sta $0103,y	                sta loopfufa+1,y
.85a0		18		clc		                clc
.85a1		b5 00		lda $00,x	                lda 0,x             ; LSB of original index
.85a3		79 02 01	adc $0102,y	                adc loopfufa,y
.85a6		85 20		sta $20		                sta loopidx0        ; write LSB to cache not LCB
.85a8		b5 01		lda $01,x	                lda 1,x             ; MSB of orginal index
.85aa		79 03 01	adc $0103,y	                adc loopfufa+1,y
.85ad		99 01 01	sta $0101,y	                sta loopindex+1,y
.85b0		e8		inx		                inx                 ; clean up the stack
.85b1		e8		inx		                inx
.85b2		e8		inx		                inx
.85b3		e8		inx		                inx
.85b4		60		rts		                rts
.85b5						xt_does:
.85b5						w_does:
.85b5		a0 85		ldy #$85	                ldy #>does_runtime
.85b7		a9 c4		lda #$c4	                lda #<does_runtime
.85b9		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.85bc		a0 cf		ldy #$cf	                ldy #>dodoes
.85be		a9 a2		lda #$a2	                lda #<dodoes
.85c0		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.85c3		60		rts		z_does:         rts
.85c4						does_runtime:
.85c4		7a		ply		                ply             ; LSB
.85c5		68		pla		                pla             ; MSB
.85c6		c8		iny		                iny
.85c7		d0 01		bne $85ca	                bne +
.85c9		1a		inc a		                ina
.85ca						+
.85ca		84 25		sty $25		                sty tmp1
.85cc		85 26		sta $26		                sta tmp1+1
.85ce		20 6b d0	jsr $d06b	                jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.85d1		a5 02		lda $02		                lda dp
.85d3		18		clc		                clc
.85d4		69 04		adc #$04	                adc #4
.85d6		85 27		sta $27		                sta tmp2
.85d8		a5 03		lda $03		                lda dp+1
.85da		69 00		adc #$00	                adc #0          ; we only care about the carry
.85dc		85 28		sta $28		                sta tmp2+1
.85de		b2 27		lda ($27)	                lda (tmp2)
.85e0		18		clc		                clc
.85e1		69 01		adc #$01	                adc #1
.85e3		85 29		sta $29		                sta tmp3
.85e5		a0 01		ldy #$01	                ldy #1
.85e7		b1 27		lda ($27),y	                lda (tmp2),y
.85e9		69 00		adc #$00	                adc #0          ; we only care about the carry
.85eb		85 2a		sta $2a		                sta tmp3+1
.85ed		a5 25		lda $25		                lda tmp1        ; LSB
.85ef		92 29		sta ($29)	                sta (tmp3)
.85f1		a5 26		lda $26		                lda tmp1+1
.85f3		91 29		sta ($29),y	                sta (tmp3),y    ; Y is still 1
.85f5		60		rts		                rts
.85f6						xt_dot:
.85f6		20 12 d1	jsr $d112	                jsr underflow_1
.85f9						w_dot:
.85f9		20 69 86	jsr $8669	                jsr w_dup                      ; ( n n )
.85fc		20 d5 80	jsr $80d5	                jsr w_abs                      ; ( n u )
.85ff		20 71 9e	jsr $9e71	                jsr w_zero                     ; ( n u 0 )
.8602		20 ad 89	jsr $89ad	                jsr w_less_number_sign         ; ( n u 0 )
.8605		20 89 8c	jsr $8c89	                jsr w_number_sign_s            ; ( n ud )
.8608		20 5c 8f	jsr $8f5c	                jsr w_rot                      ; ( ud n )
.860b		20 38 91	jsr $9138	                jsr w_sign                     ; ( ud )
.860e		20 67 8c	jsr $8c67	                jsr w_number_sign_greater      ; ( addr u )
.8611		20 b4 94	jsr $94b4	                jsr w_type
.8614		20 b5 91	jsr $91b5	                jsr w_space
.8617		60		rts		z_dot:          rts
.8618						xt_dot_paren:
.8618						w_dot_paren:
.8618		ca		dex		                dex
.8619		ca		dex		                dex
.861a		a9 29		lda #$29	                lda #41     ; Right parenthesis
.861c		95 00		sta $00,x	                sta 0,x
.861e		74 01		stz $01,x	                stz 1,x
.8620		20 82 8d	jsr $8d82	                jsr w_parse
.8623		20 b4 94	jsr $94b4	                jsr w_type
.8626		60		rts		z_dot_paren:    rts
.8627						xt_dot_quote:
.8627						w_dot_quote:
.8627		20 a2 8f	jsr $8fa2	                jsr w_s_quote
.862a		a0 94		ldy #$94	                ldy #>w_type
.862c		a9 b4		lda #$b4	                lda #<w_type
.862e		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8631		60		rts		z_dot_quote:    rts
.8632						xt_dot_r:
.8632		20 17 d1	jsr $d117	                jsr underflow_2
.8635						w_dot_r:
.8635		20 59 93	jsr $9359	                jsr w_to_r
.8638		20 69 86	jsr $8669	                jsr w_dup
.863b		20 d5 80	jsr $80d5	                jsr w_abs
.863e		20 71 9e	jsr $9e71	                jsr w_zero
.8641		20 ad 89	jsr $89ad	                jsr w_less_number_sign
.8644		20 89 8c	jsr $8c89	                jsr w_number_sign_s
.8647		20 5c 8f	jsr $8f5c	                jsr w_rot
.864a		20 38 91	jsr $9138	                jsr w_sign
.864d		20 67 8c	jsr $8c67	                jsr w_number_sign_greater
.8650		20 b5 8e	jsr $8eb5	                jsr w_r_from
.8653		20 db 8c	jsr $8cdb	                jsr w_over
.8656		20 bb 8b	jsr $8bbb	                jsr w_minus
.8659		20 be 91	jsr $91be	                jsr w_spaces
.865c		20 b4 94	jsr $94b4	                jsr w_type
.865f		60		rts		z_dot_r:        rts
.8660						xt_drop:
.8660		20 12 d1	jsr $d112	                jsr underflow_1
.8663						w_drop:
.8663		e8		inx		                inx
.8664		e8		inx		                inx
.8665		60		rts		z_drop:         rts
.8666						xt_dup:
.8666		20 12 d1	jsr $d112	                jsr underflow_1
.8669						w_dup:
.8669		ca		dex		                dex
.866a		ca		dex		                dex
.866b		b5 02		lda $02,x	                lda 2,x         ; LSB
.866d		95 00		sta $00,x	                sta 0,x
.866f		b5 03		lda $03,x	                lda 3,x         ; MSB
.8671		95 01		sta $01,x	                sta 1,x
.8673		60		rts		z_dup:          rts
.8674						xt_else:
.8674						xt_endof:
.8674		20 12 d1	jsr $d112	                jsr underflow_1
.8677						w_else:
.8677						w_endof:
.8677		20 91 97	jsr $9791	                jsr cmpl_jump_later
.867a		20 1e 92	jsr $921e	                jsr w_swap              ; ( target orig )
.867d		80 03		bra $8682	                bra w_then              ; fall through to then
.867f						xt_then:
.867f		20 12 d1	jsr $d112	                jsr underflow_1
.8682						w_then:
.8682		20 e7 88	jsr $88e7	                jsr w_here
.8685		20 1e 92	jsr $921e	                jsr w_swap
.8688		20 08 92	jsr $9208	                jsr w_store
.868b						z_else:
.868b						z_endof:
.868b		60		rts		z_then:         rts
.868c						xt_emit:
.868c		20 12 d1	jsr $d112	                jsr underflow_1
.868f						w_emit:
.868f		b5 00		lda $00,x	                lda 0,x
.8691		e8		inx		                inx
.8692		e8		inx		                inx
.8693						emit_a:
.8693		6c 12 00	jmp ($0012)	                jmp (output)            ; JSR/RTS
.8696						z_emit:
.8696						xt_endcase:
.8696		20 12 d1	jsr $d112	                jsr underflow_1
.8699						w_endcase:
.8699		a0 86		ldy #$86	                ldy #>w_drop
.869b		a9 63		lda #$63	                lda #<w_drop
.869d		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.86a0						_endcase_loop:
.86a0		b5 00		lda $00,x	                lda 0,x
.86a2		15 01		ora $01,x	                ora 1,x
.86a4		f0 05		beq $86ab	                beq _done
.86a6		20 82 86	jsr $8682	                jsr w_then
.86a9		80 f5		bra $86a0	                bra _endcase_loop
.86ab						_done:
.86ab		e8		inx		                inx
.86ac		e8		inx		                inx
.86ad		60		rts		z_endcase:      rts
.86ae						xt_environment_q:
.86ae		20 12 d1	jsr $d112	                jsr underflow_1
.86b1						w_environment_q:
.86b1		a0 00		ldy #$00	                ldy #0                  ; index for table
.86b3						_table_loop:
.86b3		c0 1a		cpy #$1a	                cpy #env_table_end - env_table_single
.86b5		f0 60		beq $8717	                beq _table_done
.86b7		20 9f 93	jsr $939f	                jsr w_two_dup          ; ( addr u addr u ) 2DUP does not use Y
.86ba		ca		dex		                dex
.86bb		ca		dex		                dex                     ; ( addr u addr u ? )
.86bc		b9 20 87	lda $8720,y	                lda env_table_single,y
.86bf		95 00		sta $00,x	                sta 0,x
.86c1		c8		iny		                iny
.86c2		b9 20 87	lda $8720,y	                lda env_table_single,y
.86c5		95 01		sta $01,x	                sta 1,x                 ; ( addr u addr u addr-s )
.86c7		c8		iny		                iny
.86c8		ca		dex		                dex
.86c9		ca		dex		                dex
.86ca		b9 20 87	lda $8720,y	                lda env_table_single,y
.86cd		95 00		sta $00,x	                sta 0,x
.86cf		b9 21 87	lda $8721,y	                lda env_table_single+1,y
.86d2		95 01		sta $01,x	                sta 1,x
.86d4		20 d8 8c	jsr $8cd8	                jsr xt_over
.86d7		20 b8 8b	jsr $8bb8	                jsr xt_minus            ; ( addr u addr u addr-s u-s )
.86da		20 c0 a0	jsr $a0c0	                jsr w_compare           ; ( addr u f )
.86dd		e8		inx		                inx                     ; DROP, now ( addr u )
.86de		e8		inx		                inx
.86df		b5 fe		lda $fe,x	                lda $fe,x
.86e1		15 ff		ora $ff,x	                ora $ff,x
.86e3		d0 ce		bne $86b3	                bne _table_loop         ; Not a match, so try next string
.86e5		88		dey		                dey                     ; go back to index we had
.86e6		88		dey		                dey
.86e7		c0 16		cpy #$16	                cpy #env_table_double - env_table_single
.86e9		b0 0c		bcs $86f7	                bcs _double_result
.86eb		b9 3c 87	lda $873c,y	                lda env_results_single,y
.86ee		95 02		sta $02,x	                sta 2,x
.86f0		b9 3d 87	lda $873d,y	                lda env_results_single+1,y
.86f3		95 03		sta $03,x	                sta 3,x                 ; ( res u )
.86f5		80 1c		bra $8713	                bra _set_flag
.86f7						_double_result:
.86f7		ca		dex		                dex                     ; ( addr u ? )
.86f8		ca		dex		                dex
.86f9		98		tya		                tya
.86fa		38		sec		                sec
.86fb		e9 16		sbc #$16	                sbc #(env_table_double - env_table_single)
.86fd		0a		asl a		                asl
.86fe		a8		tay		                tay
.86ff		b9 52 87	lda $8752,y	                lda env_results_double,y
.8702		95 02		sta $02,x	                sta 2,x
.8704		b9 53 87	lda $8753,y	                lda env_results_double+1,y
.8707		95 03		sta $03,x	                sta 3,x                 ; ( res u ? )
.8709		b9 54 87	lda $8754,y	                lda env_results_double+2,y
.870c		95 04		sta $04,x	                sta 4,x
.870e		b9 55 87	lda $8755,y	                lda env_results_double+3,y
.8711		95 05		sta $05,x	                sta 5,x                 ; ( res res ? )
.8713						_set_flag:
.8713		a9 ff		lda #$ff	                lda #$ff
.8715		80 04		bra $871b	                bra _done
.8717						_table_done:
.8717		e8		inx		                inx
.8718		e8		inx		                inx
.8719		a9 00		lda #$00	                lda #0                  ; flag failure and fall through
.871b						_done:
.871b		95 00		sta $00,x	                sta 0,x
.871d		95 01		sta $01,x	                sta 1,x
.871f						z_environment_q:
.871f		60		rts		                rts
.8720						env_table_single:
>8720		07 cf 16 cf 1b cf 1f cf		        .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
>8728		30 cf
>872a		37 cf 3f cf 44 cf 49 cf		        .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
>8732		5b cf 66 cf			        .word envs_sc, envs_wl
.8736						env_table_double:
>8736		6f cf 74 cf			        .word envs_max_d, envs_max_ud
.873a						env_table_end:
>873a		7a cf				        .word envs_eot                  ; pointer beyond last string
.873c						env_results_single:
>873c		ff 00				        .word $00FF     ; /COUNTED-STRING
>873e		ff 00				        .word $00FF     ; /HOLD
>8740		54 00				        .word $0054     ; /PAD (this is 84 decimal)
>8742		08 00				        .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
>8744		00 00				        .word 0000      ; FLOORED ("FALSE", we have symmetric)
>8746		ff 00				        .word $00FF     ; MAX-CHAR
>8748		ff 7f				        .word $7FFF     ; MAX-N
>874a		ff ff				        .word $FFFF     ; MAX-U
>874c		80 00				        .word $0080     ; RETURN-STACK-CELLS
>874e		20 00				        .word $0020     ; STACK-CELLS (from definitions.asm)
>8750		09 00				        .word $0009     ; WORDLISTS
.8752						env_results_double:
>8752		ff 7f ff ff			        .word $7FFF, $FFFF      ; MAX-D
>8756		ff ff ff ff			        .word $FFFF, $FFFF      ; MAX-UD
.875a						xt_equal:
.875a		20 17 d1	jsr $d117	                jsr underflow_2
.875d						w_equal:
.875d		b5 00		lda $00,x	                lda 0,x                 ; LSB
.875f		d5 02		cmp $02,x	                cmp 2,x
.8761		d0 0a		bne $876d	                bne _false
.8763		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8765		d5 03		cmp $03,x	                cmp 3,x
.8767		d0 04		bne $876d	                bne _false
.8769		a9 ff		lda #$ff	                lda #$FF
.876b		80 02		bra $876f	                bra _done
.876d		a9 00		lda #$00	_false:         lda #0                  ; drop thru to done
.876f		95 02		sta $02,x	_done:          sta 2,x
.8771		95 03		sta $03,x	                sta 3,x
.8773		e8		inx		                inx
.8774		e8		inx		                inx
.8775		60		rts		z_equal:        rts
.8776						xt_blank:
.8776		20 17 d1	jsr $d117	                jsr underflow_2
.8779						w_blank:
.8779		ca		dex		                dex
.877a		ca		dex		                dex
.877b		a9 20		lda #$20	                lda #AscSP
.877d		95 00		sta $00,x	                sta 0,x
.877f		74 01		stz $01,x	                stz 1,x
.8781		80 0e		bra $8791	                bra w_fill     ; skip over code for ERASE
.8783						xt_erase:
.8783		20 17 d1	jsr $d117	                jsr underflow_2
.8786						w_erase:
.8786		ca		dex		                dex
.8787		ca		dex		                dex
.8788		74 00		stz $00,x	                stz 0,x
.878a		74 01		stz $01,x	                stz 1,x
.878c		80 03		bra $8791	                bra w_fill
.878e						xt_fill:
.878e		20 1c d1	jsr $d11c	                jsr underflow_3
.8791						w_fill:
.8791		b5 04		lda $04,x	                lda 4,x         ; LSB
.8793		85 25		sta $25		                sta tmp1
.8795		b5 05		lda $05,x	                lda 5,x
.8797		85 26		sta $26		                sta tmp1+1
.8799		b5 02		lda $02,x	                lda 2,x
.879b		85 27		sta $27		                sta tmp2
.879d		b5 03		lda $03,x	                lda 3,x
.879f		85 28		sta $28		                sta tmp2+1
.87a1		b5 00		lda $00,x	                lda 0,x
.87a3		a8		tay		                tay
.87a4						_loop:
.87a4		a9 7f		lda #$7f	                lda #>ram_end           ; MSB
.87a6		c5 26		cmp $26		                cmp tmp1+1
.87a8		90 21		bcc $87cb	                bcc _done               ; RAM_END < TMP1, so leave
.87aa		d0 06		bne $87b2	                bne _check_counter      ; RAM_END is not smaller and not equal
.87ac		a9 ff		lda #$ff	                lda #<ram_end           ; LSB, because MSBs were equal
.87ae		c5 25		cmp $25		                cmp tmp1
.87b0		90 19		bcc $87cb	                bcc _done               ; RAM_END < TMP1, so leave
.87b2						_check_counter:
.87b2		a5 27		lda $27		                lda tmp2
.87b4		05 28		ora $28		                ora tmp2+1
.87b6		f0 13		beq $87cb	                beq _done
.87b8		98		tya		                tya
.87b9		92 25		sta ($25)	                sta (tmp1)
.87bb		a5 27		lda $27		                lda tmp2
.87bd		d0 02		bne $87c1	                bne +
.87bf		c6 28		dec $28		                dec tmp2+1
.87c1		c6 27		dec $27		+               dec tmp2
.87c3		e6 25		inc $25		                inc tmp1
.87c5		d0 dd		bne $87a4	                bne _loop
.87c7		e6 26		inc $26		                inc tmp1+1
.87c9		80 d9		bra $87a4	                bra _loop
.87cb						_done:
.87cb		8a		txa		                txa
.87cc		18		clc		                clc
.87cd		69 06		adc #$06	                adc #6
.87cf		aa		tax		                tax
.87d0						z_blank:
.87d0						z_erase:
.87d0		60		rts		z_fill:         rts
.87d1						xt_execute:
.87d1		20 12 d1	jsr $d112	                jsr underflow_1
.87d4						w_execute:
.87d4		20 d8 87	jsr $87d8	                jsr doexecute   ; do not combine to JMP (native coding)
.87d7		60		rts		z_execute:      rts
.87d8						doexecute:
.87d8		b5 00		lda $00,x	                lda 0,x
.87da		85 04		sta $04		                sta ip
.87dc		b5 01		lda $01,x	                lda 1,x
.87de		85 05		sta $05		                sta ip+1
.87e0		e8		inx		                inx
.87e1		e8		inx		                inx
.87e2		6c 04 00	jmp ($0004)	                jmp (ip)
.87e5						xt_exit:
.87e5						w_exit:
.87e5		60		rts		                rts             ; keep before z_exit
.87e6						z_exit:
.87e6						xt_fetch:
.87e6		20 12 d1	jsr $d112	                jsr underflow_1
.87e9						w_fetch:
.87e9		a1 00		lda ($00,x)	                lda (0,x)               ; LSB
.87eb		a8		tay		                tay
.87ec		f6 00		inc $00,x	                inc 0,x
.87ee		d0 02		bne $87f2	                bne +
.87f0		f6 01		inc $01,x	                inc 1,x
.87f2						+
.87f2		a1 00		lda ($00,x)	                lda (0,x)               ; MSB
.87f4		95 01		sta $01,x	                sta 1,x
.87f6		94 00		sty $00,x	                sty 0,x
.87f8		60		rts		z_fetch:        rts
.87f9						xt_find:
.87f9		20 12 d1	jsr $d112	                jsr underflow_1
.87fc						w_find:
.87fc		b5 01		lda $01,x	                lda 1,x                 ; MSB
.87fe		48		pha		                pha
.87ff		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8801		48		pha		                pha
.8802		20 de 83	jsr $83de	                jsr w_count            ; ( caddr -- addr u )
.8805		20 5d 9b	jsr $9b5d	                jsr w_find_name        ; ( addr u -- nt | 0 )
.8808		b5 00		lda $00,x	                lda 0,x
.880a		15 01		ora $01,x	                ora 1,x
.880c		d0 0b		bne $8819	                bne _found_word
.880e		20 71 9e	jsr $9e71	                jsr w_false            ; ( 0 0 )
.8811		68		pla		                pla                     ; LSB of address
.8812		95 02		sta $02,x	                sta 2,x
.8814		68		pla		                pla
.8815		95 03		sta $03,x	                sta 3,x                 ; MSB of address
.8817		80 27		bra $8840	                bra _done               ; ( addr 0 )
.8819						_found_word:
.8819		68		pla		                pla
.881a		68		pla		                pla
.881b		20 69 86	jsr $8669	                jsr w_dup              ; ( nt nt )
.881e		20 b1 9c	jsr $9cb1	                jsr w_name_to_int      ; ( nt xt )
.8821		20 1e 92	jsr $921e	                jsr w_swap             ; ( xt nt )
.8824		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.8826		f6 00		inc $00,x	                inc 0,x
.8828		d0 02		bne $882c	                bne +
.882a		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.882c						+
.882c		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.882e		29 02		and #$02	                and #IM
.8830		d0 08		bne $883a	                bne _immediate          ; bit set, we're immediate
.8832		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.8834		95 00		sta $00,x	                sta 0,x
.8836		95 01		sta $01,x	                sta 1,x
.8838		80 06		bra $8840	                bra _done
.883a						_immediate:
.883a		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.883c		95 00		sta $00,x	                sta 0,x
.883e		74 01		stz $01,x	                stz 1,x
.8840						_done:
.8840		60		rts		z_find:         rts
.8841						xt_fm_slash_mod:
.8841		20 1c d1	jsr $d11c	                jsr underflow_3
.8844						w_fm_slash_mod:
.8844		64 27		stz $27		                stz tmp2        ; default: n is positive
.8846		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8848		10 0e		bpl $8858	                bpl _check_d
.884a		e6 27		inc $27		                inc tmp2        ; set flag to negative for n1
.884c		20 f9 8b	jsr $8bf9	                jsr w_negate   ; NEGATE
.884f		20 59 93	jsr $9359	                jsr w_to_r     ; >R
.8852		20 e2 9e	jsr $9ee2	                jsr w_dnegate  ; DNEGATE
.8855		20 b5 8e	jsr $8eb5	                jsr w_r_from   ; R>
.8858						_check_d:
.8858		b5 03		lda $03,x	                lda 3,x         ; MSB of high word of d
.885a		10 0d		bpl $8869	                bpl _multiply
.885c		18		clc		                clc
.885d		b5 00		lda $00,x	                lda 0,x         ; LSB of n1
.885f		75 02		adc $02,x	                adc 2,x         ; LSB of dh
.8861		95 02		sta $02,x	                sta 2,x
.8863		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8865		75 03		adc $03,x	                adc 3,x         ; MSB of dh
.8867		95 03		sta $03,x	                sta 3,x
.8869						_multiply:
.8869		20 39 95	jsr $9539	                jsr w_um_slash_mod     ; ( d n1 -- rem n2 )
.886c		a5 27		lda $27		                lda tmp2
.886e		f0 07		beq $8877	                beq _done
.8870		e8		inx		                inx             ; pretend that we SWAP
.8871		e8		inx		                inx
.8872		20 f9 8b	jsr $8bf9	                jsr w_negate
.8875		ca		dex		                dex
.8876		ca		dex		                dex
.8877						_done:
.8877		60		rts		z_fm_slash_mod: rts
.8878						load_evaluate:
.8878		a9 ff		lda #$ff	                lda #$FF
.887a		85 25		sta $25		                sta tmp1
.887c		80 11		bra $888f	                bra load_evaluate_start
.887e						xt_evaluate:
.887e		20 17 d1	jsr $d117	                jsr underflow_2
.8881						w_evaluate:
.8881		64 25		stz $25		                stz tmp1
.8883		b5 00		lda $00,x	                lda 0,x
.8885		15 01		ora $01,x	                ora 1,x
.8887		d0 06		bne $888f	                bne evaluate_got_work
.8889		e8		inx		                inx
.888a		e8		inx		                inx
.888b		e8		inx		                inx
.888c		e8		inx		                inx
.888d		80 42		bra $88d1	                bra evaluate_done
.888f						load_evaluate_start:
.888f						evaluate_got_work:
.888f		a0 05		ldy #$05	                ldy #blk_offset+1
.8891		b1 08		lda ($08),y	                lda (up),y
.8893		48		pha		                pha
.8894		88		dey		                dey
.8895		b1 08		lda ($08),y	                lda (up),y
.8897		48		pha		                pha
.8898		a5 25		lda $25		                lda tmp1
.889a		d0 05		bne $88a1	                bne _nozero
.889c		91 08		sta ($08),y	                sta (up),y
.889e		c8		iny		                iny
.889f		91 08		sta ($08),y	                sta (up),y
.88a1						_nozero:
.88a1		20 12 9c	jsr $9c12	                jsr w_input_to_r
.88a4		a9 ff		lda #$ff	                lda #$FF
.88a6		85 0a		sta $0a		                sta insrc
.88a8		85 0b		sta $0b		                sta insrc+1
.88aa		64 10		stz $10		                stz toin
.88ac		64 11		stz $11		                stz toin+1
.88ae		b5 00		lda $00,x	                lda 0,x
.88b0		85 0e		sta $0e		                sta ciblen
.88b2		b5 01		lda $01,x	                lda 1,x
.88b4		85 0f		sta $0f		                sta ciblen+1
.88b6		b5 02		lda $02,x	                lda 2,x
.88b8		85 0c		sta $0c		                sta cib
.88ba		b5 03		lda $03,x	                lda 3,x
.88bc		85 0d		sta $0d		                sta cib+1
.88be		e8		inx		                inx             ; A clean stack is a clean mind
.88bf		e8		inx		                inx
.88c0		e8		inx		                inx
.88c1		e8		inx		                inx
.88c2		20 91 d0	jsr $d091	                jsr interpret   ; ( -- )
.88c5		20 1f 9e	jsr $9e1f	                jsr w_r_to_input
.88c8		a0 04		ldy #$04	                ldy #blk_offset
.88ca		68		pla		                pla
.88cb		91 08		sta ($08),y	                sta (up),y
.88cd		c8		iny		                iny
.88ce		68		pla		                pla
.88cf		91 08		sta ($08),y	                sta (up),y
.88d1						evaluate_done:
.88d1		60		rts		z_evaluate:     rts
.88d2						xt_greater_than:
.88d2		20 17 d1	jsr $d117	                jsr underflow_2
.88d5						w_greater_than:
.88d5		a0 00		ldy #$00	                ldy #0          ; default false
.88d7		20 52 d0	jsr $d052	                jsr compare_16bit
.88da		f0 03		beq $88df	                beq _false
.88dc		10 01		bpl $88df	                bpl _false
.88de		88		dey		                dey
.88df						_false:
.88df		98		tya		                tya
.88e0		e8		inx		                inx
.88e1		e8		inx		                inx
.88e2		95 00		sta $00,x	                sta 0,x
.88e4		95 01		sta $01,x	                sta 1,x
.88e6		60		rts		z_greater_than: rts
.88e7						xt_here:
.88e7						xt_begin:
.88e7						xt_asm_arrow:
.88e7						w_here:
.88e7						w_begin:
.88e7						w_asm_arrow:
.88e7		ca		dex		                dex
.88e8		ca		dex		                dex
.88e9		a5 00		lda $00		                lda cp
.88eb		95 00		sta $00,x	                sta 0,x
.88ed		a5 01		lda $01		                lda cp+1
.88ef		95 01		sta $01,x	                sta 1,x
.88f1						z_here:
.88f1						z_begin:
.88f1						z_asm_arrow:
.88f1		60		rts		                rts
.88f2						xt_hex:
.88f2						w_hex:
.88f2		a9 10		lda #$10	                lda #16
.88f4		85 18		sta $18		                sta base
.88f6		64 19		stz $19		                stz base+1              ; paranoid
.88f8		60		rts		z_hex:          rts
.88f9						xt_hold:
.88f9		20 12 d1	jsr $d112	                jsr underflow_1
.88fc						w_hold:
.88fc		a5 2b		lda $2b		                lda tohold
.88fe		d0 02		bne $8902	                bne +
.8900		c6 2c		dec $2c		                dec tohold+1
.8902						+
.8902		c6 2b		dec $2b		                dec tohold
.8904		b5 00		lda $00,x	                lda 0,x
.8906		92 2b		sta ($2b)	                sta (tohold)
.8908		e8		inx		                inx
.8909		e8		inx		                inx
.890a		60		rts		z_hold:         rts
.890b						xt_i:
.890b						w_i:
.890b		ca		dex		                dex
.890c		ca		dex		                dex
.890d		a4 1f		ldy $1f		                ldy loopctrl
.890f		38		sec		                sec
.8910		a5 20		lda $20		                lda loopidx0        ; cached LSB of loopindex
.8912		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.8915		95 00		sta $00,x	                sta 0,x
.8917		b9 01 01	lda $0101,y	                lda loopindex+1,y
.891a		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.891d		95 01		sta $01,x	                sta 1,x
.891f		60		rts		z_i:            rts
.8920						xt_if:
.8920						w_if:
.8920		20 d7 97	jsr $97d7	                jsr cmpl_0branch_later
.8923		60		rts		z_if:           rts
.8924						xt_immediate:
.8924						w_immediate:
.8924		20 6b d0	jsr $d06b	                jsr current_to_dp
.8927		a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8929		b1 02		lda ($02),y	                lda (dp),y
.892b		09 02		ora #$02	                ora #IM        ; make sure bit 7 is set
.892d		91 02		sta ($02),y	                sta (dp),y
.892f		60		rts		z_immediate:    rts
.8930						xt_invert:
.8930		20 12 d1	jsr $d112	                jsr underflow_1
.8933						w_invert:
.8933		a9 ff		lda #$ff	                lda #$FF
.8935		55 00		eor $00,x	                eor 0,x         ; LSB
.8937		95 00		sta $00,x	                sta 0,x
.8939		a9 ff		lda #$ff	                lda #$FF
.893b		55 01		eor $01,x	                eor 1,x         ; MSB
.893d		95 01		sta $01,x	                sta 1,x
.893f		60		rts		z_invert:       rts
.8940						xt_is:
.8940						w_is:
.8940		a5 1a		lda $1a		                lda state
.8942		05 1b		ora $1b		                ora state+1
.8944		f0 0c		beq $8952	                beq _interpreting
.8946		20 17 83	jsr $8317	                jsr w_bracket_tick
.8949		a0 85		ldy #$85	                ldy #>w_defer_store
.894b		a9 11		lda #$11	                lda #<w_defer_store
.894d		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8950		80 06		bra $8958	                bra _done
.8952						_interpreting:
.8952		20 2f 92	jsr $922f	                jsr w_tick
.8955		20 11 85	jsr $8511	                jsr w_defer_store
.8958						_done:
.8958		60		rts		z_is:           rts
.8959						xt_j:
.8959						w_j:
.8959		ca		dex		                dex                 ; make space on the stack
.895a		ca		dex		                dex
.895b		a5 1f		lda $1f		                lda loopctrl
.895d		38		sec		                sec
.895e		e9 04		sbc #$04	                sbc #4
.8960		a8		tay		                tay
.8961		38		sec		                sec
.8962		b9 00 01	lda $0100,y	                lda loopindex,y
.8965		f9 02 01	sbc $0102,y	                sbc loopfufa,y
.8968		95 00		sta $00,x	                sta 0,x
.896a		b9 01 01	lda $0101,y	                lda loopindex+1,y
.896d		f9 03 01	sbc $0103,y	                sbc loopfufa+1,y
.8970		95 01		sta $01,x	                sta 1,x
.8972		60		rts		z_j:            rts
.8973						xt_key:
.8973						w_key:
.8973		20 7d 89	jsr $897d	                jsr key_a               ; returns char in A
.8976		ca		dex		                dex
.8977		ca		dex		                dex
.8978		95 00		sta $00,x	                sta 0,x
.897a		74 01		stz $01,x	                stz 1,x
.897c		60		rts		z_key:          rts
.897d						key_a:
.897d		6c 14 00	jmp ($0014)	                jmp (input)             ; JSR/RTS
.8980						xt_keyq:
.8980						w_keyq:
.8980		a0 00		ldy #$00	                ldy #0
.8982		20 8f 89	jsr $898f	                jsr keyq_a
.8985		f0 01		beq $8988	                beq +           ; A=0 => Y=0
.8987		88		dey		                dey             ; A<>0 => Y=#$ff
.8988						+
.8988		ca		dex		                dex
.8989		ca		dex		                dex
.898a		94 00		sty $00,x	                sty 0,x         ; store either $0000 or $ffff
.898c		94 01		sty $01,x	                sty 1,x
.898e		60		rts		z_keyq:         rts
.898f		6c 16 00	jmp ($0016)	keyq_a:         jmp (havekey)
.8992						xt_leave:
.8992						w_leave:
.8992		a5 21		lda $21		                lda loopleave
.8994		a4 22		ldy $22		                ldy loopleave+1
.8996		20 a8 97	jsr $97a8	                jsr cmpl_jump   ; emit the JMP chaining prior leave address
.8999		38		sec		                sec
.899a		a5 00		lda $00		                lda cp
.899c		e9 02		sbc #$02	                sbc #2
.899e		85 21		sta $21		                sta loopleave
.89a0		a5 01		lda $01		                lda cp+1
.89a2		b0 01		bcs $89a5	                bcs +
.89a4		3a		dec a		                dea
.89a5		85 22		sta $22		+               sta loopleave+1
.89a7						z_leave:
.89a7		60		rts		                rts
.89a8						xt_left_bracket:
.89a8						w_left_bracket:
.89a8		64 1a		stz $1a		                stz state
.89aa		64 1b		stz $1b		                stz state+1
.89ac		60		rts		z_left_bracket: rts
.89ad						xt_less_number_sign:
.89ad						w_less_number_sign:
.89ad		20 e6 8c	jsr $8ce6	                jsr w_pad      ; ( addr )
.89b0		b5 00		lda $00,x	                lda 0,x
.89b2		85 2b		sta $2b		                sta tohold
.89b4		b5 01		lda $01,x	                lda 1,x
.89b6		85 2c		sta $2c		                sta tohold+1
.89b8		e8		inx		                inx
.89b9		e8		inx		                inx
.89ba						z_less_number_sign:
.89ba		60		rts		                rts
.89bb						xt_less_than:
.89bb		20 17 d1	jsr $d117	                jsr underflow_2
.89be						w_less_than:
.89be		a0 00		ldy #$00	                ldy #0          ; default false
.89c0		20 52 d0	jsr $d052	                jsr compare_16bit
.89c3		f0 03		beq $89c8	                beq _false
.89c5		30 01		bmi $89c8	                bmi _false
.89c7		88		dey		                dey
.89c8						_false:
.89c8		98		tya		                tya
.89c9		e8		inx		                inx
.89ca		e8		inx		                inx
.89cb		95 00		sta $00,x	                sta 0,x
.89cd		95 01		sta $01,x	                sta 1,x
.89cf		60		rts		z_less_than:    rts
.89d0						xt_literal:
.89d0		20 12 d1	jsr $d112	                jsr underflow_1
.89d3						w_literal:
.89d3		a9 0a		lda #$0a	                lda #template_push_tos_size
.89d5		20 c5 97	jsr $97c5	                jsr check_nc_limit
.89d8		90 0c		bcc $89e6	                bcc _inline
.89da		a0 8a		ldy #$8a	                ldy #>literal_runtime
.89dc		a9 18		lda #$18	                lda #<literal_runtime
.89de		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.89e1		20 b1 83	jsr $83b1	                jsr w_comma
.89e4		80 27		bra $8a0d	                bra z_literal
.89e6						_inline:
.89e6		a0 94		ldy #$94	                ldy #$94        ; STY opcode
.89e8		b5 01		lda $01,x	                lda 1,x         ; MSB
.89ea		d0 02		bne $89ee	                bne +
.89ec		a0 74		ldy #$74	                ldy #$74        ; STZ opcode
.89ee		5a		phy		+               phy
.89ef		b5 00		lda $00,x	                lda 0,x         ; LSB
.89f1		48		pha		                pha
.89f2		a0 02		ldy #$02	                ldy #2
.89f4		b5 01		lda $01,x	                lda 1,x         ; MSB
.89f6		f0 03		beq $89fb	                beq _copy
.89f8		a0 00		ldy #$00	                ldy #0
.89fa		48		pha		                pha
.89fb		b9 0e 8a	lda $8a0e,y	_copy:          lda template_push_tos,y
.89fe		c9 ff		cmp #$ff	                cmp #$ff        ; is it a placeholder?
.8a00		d0 01		bne $8a03	                bne +
.8a02		68		pla		                pla
.8a03		20 bc 97	jsr $97bc	+               jsr cmpl_a
.8a06		c8		iny		                iny
.8a07		c0 0a		cpy #$0a	                cpy #template_push_tos_size
.8a09		d0 f0		bne $89fb	                bne _copy
.8a0b		e8		inx		                inx             ; drop the literal
.8a0c		e8		inx		                inx
.8a0d		60		rts		z_literal:      rts
.8a0e						template_push_tos:
.8a0e		a0 ff		ldy #$ff	                ldy #$ff        ; we'll omit this if MSB is zero
.8a10		a9 ff		lda #$ff	                lda #$ff
.8a12		ca		dex		                dex
.8a13		ca		dex		                dex
.8a14		95 00		sta $00,x	                sta 0,x
>8a16		ff 01				                .byte $ff, 1    ; this will become either sty 1,x or stz 1,x
=10						template_push_tos_size = * - template_push_tos
.8a18						literal_runtime:
.8a18		ca		dex		                dex
.8a19		ca		dex		                dex
.8a1a		68		pla		                pla             ; LSB
.8a1b		85 25		sta $25		                sta tmp1
.8a1d		68		pla		                pla             ; MSB
.8a1e		85 26		sta $26		                sta tmp1+1
.8a20		a0 01		ldy #$01	                ldy #1
.8a22		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB
.8a24		95 00		sta $00,x	                sta 0,x
.8a26		c8		iny		                iny
.8a27		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB
.8a29		95 01		sta $01,x	                sta 1,x
.8a2b		98		tya		                tya
.8a2c		18		clc		                clc
.8a2d		65 25		adc $25		                adc tmp1
.8a2f		a8		tay		                tay
.8a30		a5 26		lda $26		                lda tmp1+1
.8a32		69 00		adc #$00	                adc #0
.8a34		48		pha		                pha
.8a35		5a		phy		                phy
.8a36		60		rts		                rts
.8a37						xt_loop:
.8a37						w_loop:
.8a37		ca		dex		                dex
.8a38		ca		dex		                dex
.8a39		ca		dex		                dex
.8a3a		ca		dex		                dex
.8a3b		a9 b0		lda #$b0	                lda #<loop_runtime
.8a3d		95 02		sta $02,x	                sta 2,x
.8a3f		a9 8a		lda #$8a	                lda #>loop_runtime
.8a41		95 03		sta $03,x	                sta 3,x
.8a43		a9 11		lda #$11	                lda #loop_runtime_size
.8a45		95 00		sta $00,x	                sta 0,x
.8a47		74 01		stz $01,x	                stz 1,x
.8a49		80 12		bra $8a5d	                bra loop_common
.8a4b						xt_plus_loop:
.8a4b						w_plus_loop:
.8a4b		ca		dex		                dex
.8a4c		ca		dex		                dex
.8a4d		ca		dex		                dex
.8a4e		ca		dex		                dex
.8a4f		a9 c9		lda #$c9	                lda #<plus_loop_runtime
.8a51		95 02		sta $02,x	                sta 2,x
.8a53		a9 8a		lda #$8a	                lda #>plus_loop_runtime
.8a55		95 03		sta $03,x	                sta 3,x
.8a57		a9 1a		lda #$1a	                lda #plus_loop_runtime_size
.8a59		95 00		sta $00,x	                sta 0,x
.8a5b		74 01		stz $01,x	                stz 1,x
.8a5d						loop_common:
.8a5d		20 db 8c	jsr $8cdb	                jsr w_over
.8a60		20 1e 92	jsr $921e	                jsr w_swap             ; xt and xt' are the same
.8a63		20 2f 97	jsr $972f	                jsr cmpl_by_limit
.8a66		90 05		bcc $8a6d	                bcc _native
.8a68		20 b1 83	jsr $83b1	                jsr w_comma
.8a6b		80 03		bra $8a70	                bra +
.8a6d						_native:
.8a6d		20 a2 97	jsr $97a2	                jsr cmpl_jump_tos
.8a70						+
.8a70		a5 22		lda $22		                lda loopleave+1         ; MSB=0 means we're done
.8a72		f0 19		beq $8a8d	                beq _noleave
.8a74						_next:
.8a74		a0 01		ldy #$01	                ldy #1
.8a76		b1 21		lda ($21),y	                lda (loopleave),y
.8a78		48		pha		                pha
.8a79		a5 01		lda $01		                lda cp+1
.8a7b		91 21		sta ($21),y	                sta (loopleave),y
.8a7d		88		dey		                dey
.8a7e		b1 21		lda ($21),y	                lda (loopleave),y
.8a80		48		pha		                pha
.8a81		a5 00		lda $00		                lda cp
.8a83		91 21		sta ($21),y	                sta (loopleave),y
.8a85		68		pla		                pla
.8a86		85 21		sta $21		                sta loopleave
.8a88		68		pla		                pla
.8a89		85 22		sta $22		                sta loopleave+1
.8a8b		d0 e7		bne $8a74	                bne _next
.8a8d						_noleave:
.8a8d		b5 00		lda $00,x	                lda 0,x
.8a8f		85 21		sta $21		                sta loopleave
.8a91		b5 01		lda $01,x	                lda 1,x
.8a93		85 22		sta $22		                sta loopleave+1
.8a95		a9 53		lda #$53	                lda #<nt_unloop
.8a97		95 00		sta $00,x	                sta 0,x
.8a99		a9 bc		lda #$bc	                lda #>nt_unloop
.8a9b		95 01		sta $01,x	                sta 1,x
.8a9d		20 ad 96	jsr $96ad	                jsr compile_nt_comma    ; use the faster entry with the NT
.8aa0		b5 01		lda $01,x	                lda 1,x                 ; MSB=0 means DO so nothing to do
.8aa2		f0 09		beq $8aad	                beq +
.8aa4		20 e7 88	jsr $88e7	                jsr w_here
.8aa7		20 1e 92	jsr $921e	                jsr w_swap
.8aaa		4c 08 92	jmp $9208	                jmp w_store             ; write here as ?DO jmp target and return
.8aad		e8		inx		+               inx                     ; drop the ignored word for DO
.8aae		e8		inx		                inx
.8aaf						z_loop:
.8aaf		60		rts		z_plus_loop:    rts
.8ab0						loop_runtime:
.8ab0		e6 20		inc $20		                inc loopidx0            ; increment the LSB of loopindex
.8ab2		d0 0d		bne $8ac1	                bne _repeat             ; avoid expensive test most of the time
.8ab4		a4 1f		ldy $1f		                ldy loopctrl
.8ab6		b9 01 01	lda $0101,y	                lda loopindex+1,y
.8ab9		1a		inc a		                ina
.8aba		c9 80		cmp #$80	                cmp #$80
.8abc		f0 06		beq $8ac4	                beq _done
.8abe		99 01 01	sta $0101,y	                sta loopindex+1,y
=17						loop_runtime_size = * - loop_runtime
.8ac1						_repeat:
.8ac1		a9 00		lda #$00	                lda #0
>8ac3		2c				                .byte $2c               ; BIT llhh to hide the lda #1
.8ac4		a9 01		lda #$01	_done:          lda #1
.8ac6		4c 54 98	jmp $9854	                jmp zbranch_runtime
.8ac9						plus_loop_runtime:
.8ac9		18		clc		                clc
.8aca		b5 00		lda $00,x	                lda 0,x                 ; LSB of step
.8acc		65 20		adc $20		                adc loopidx0
.8ace		85 20		sta $20		                sta loopidx0
.8ad0		e8		inx		                inx                     ; dump step from TOS before MSB test
.8ad1		e8		inx		                inx                     ; since we might skip it
.8ad2		b5 ff		lda $ff,x	                lda $FF,x               ; MSB of step since 1,x == -1,x+2
.8ad4		d0 02		bne $8ad8	                bne _chkv               ; if it's non-zero we have to check
.8ad6		90 0b		bcc $8ae3	                bcc _repeat             ; but if 0 and no carry, we're good
.8ad8		b8		clv		_chkv:          clv
.8ad9		a4 1f		ldy $1f		                ldy loopctrl            ; get LCB offset
.8adb		79 01 01	adc $0101,y	                adc loopindex+1,y       ; MSB of index
.8ade		99 01 01	sta $0101,y	                sta loopindex+1,y       ; put MSB of index back on stack
.8ae1		70 03		bvs $8ae6	                bvs _done               ; skip over JMP instruction
=26						plus_loop_runtime_size = * - plus_loop_runtime
.8ae3						_repeat:
.8ae3		a9 00		lda #$00	                lda #0
>8ae5		2c				                .byte $2c               ; BIT llhh to hide the lda #1
.8ae6		a9 01		lda #$01	_done:          lda #1
.8ae8		4c 54 98	jmp $9854	                jmp zbranch_runtime
.8aeb						xt_lshift:
.8aeb		20 17 d1	jsr $d117	                jsr underflow_2
.8aee						w_lshift:
.8aee		b5 00		lda $00,x	                lda 0,x
.8af0		29 0f		and #$0f	                and #%00001111
.8af2		f0 08		beq $8afc	                beq _done
.8af4		a8		tay		                tay
.8af5						_loop:
.8af5		16 02		asl $02,x	                asl 2,x
.8af7		36 03		rol $03,x	                rol 3,x
.8af9		88		dey		                dey
.8afa		d0 f9		bne $8af5	                bne _loop
.8afc						_done:
.8afc		e8		inx		                inx
.8afd		e8		inx		                inx
.8afe		60		rts		z_lshift:       rts
.8aff						xt_m_star:
.8aff		20 17 d1	jsr $d117	                jsr underflow_2
.8b02						w_m_star:
.8b02		b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.8b04		55 03		eor $03,x	                eor 3,x         ; MSB of n2
.8b06		48		pha		                pha
.8b07		20 d5 80	jsr $80d5	                jsr w_abs
.8b0a		20 1e 92	jsr $921e	                jsr w_swap
.8b0d		20 d5 80	jsr $80d5	                jsr w_abs
.8b10		20 7b 95	jsr $957b	                jsr w_um_star          ; ( d )
.8b13		68		pla		                pla
.8b14		10 03		bpl $8b19	                bpl _done
.8b16		20 e2 9e	jsr $9ee2	                jsr w_dnegate
.8b19						_done:
.8b19		60		rts		z_m_star:       rts
.8b1a						xt_marker:
.8b1a						w_marker:
.8b1a		20 6b d0	jsr $d06b	                jsr current_to_dp
.8b1d		a5 02		lda $02		                lda dp
.8b1f		48		pha		                pha
.8b20		a5 03		lda $03		                lda dp+1
.8b22		48		pha		                pha
.8b23		a5 00		lda $00		                lda cp
.8b25		48		pha		                pha
.8b26		a5 01		lda $01		                lda cp+1
.8b28		48		pha		                pha
.8b29		a9 28		lda #$28	                lda #4 + marker_end_offset - marker_start_offset
.8b2b		85 1e		sta $1e		                sta tmpdsp              ; PFA size in bytes
.8b2d		a9 4b		lda #$4b	                lda #<marker_runtime
.8b2f		a0 8b		ldy #$8b	                ldy #>marker_runtime
.8b31		20 fd 83	jsr $83fd	                jsr create_common
.8b34		7a		ply		                ply                     ; MSB
.8b35		68		pla		                pla                     ; LSB
.8b36		20 b8 97	jsr $97b8	                jsr cmpl_word
.8b39		7a		ply		                ply                     ; MSB
.8b3a		68		pla		                pla                     ; LSB
.8b3b		20 b8 97	jsr $97b8	                jsr cmpl_word
.8b3e		a0 08		ldy #$08	                ldy #marker_start_offset
.8b40						-
.8b40		b1 08		lda ($08),y	                lda (up),y
.8b42		20 bc 97	jsr $97bc	                jsr cmpl_a
.8b45		c8		iny		                iny
.8b46		c0 2c		cpy #$2c	                cpy #marker_end_offset
.8b48		d0 f6		bne $8b40	                bne -
.8b4a		60		rts		z_marker:       rts
.8b4b						marker_runtime:
.8b4b		68		pla		                pla
.8b4c		85 25		sta $25		                sta tmp1        ; LSB of address
.8b4e		68		pla		                pla
.8b4f		85 26		sta $26		                sta tmp1+1      ; MSB of address
.8b51		a0 01		ldy #$01	                ldy #1          ; start at 1 due to RTS mechanics
.8b53		b1 25		lda ($25),y	                lda (tmp1),y
.8b55		85 00		sta $00		                sta cp
.8b57		c8		iny		                iny
.8b58		b1 25		lda ($25),y	                lda (tmp1),y
.8b5a		85 01		sta $01		                sta cp+1
.8b5c		c8		iny		                iny
.8b5d		b1 25		lda ($25),y	                lda (tmp1),y
.8b5f		85 02		sta $02		                sta dp
.8b61		c8		iny		                iny
.8b62		b1 25		lda ($25),y	                lda (tmp1),y
.8b64		85 03		sta $03		                sta dp+1
.8b66		38		sec		                sec
.8b67		a5 25		lda $25		                lda tmp1
.8b69		e9 03		sbc #$03	                sbc #marker_start_offset - 5
.8b6b		85 25		sta $25		                sta tmp1
.8b6d		b0 02		bcs $8b71	                bcs +
.8b6f		c6 26		dec $26		                dec tmp1+1
.8b71						+
.8b71		a0 08		ldy #$08	                ldy #marker_start_offset
.8b73						-
.8b73		b1 25		lda ($25),y	                lda (tmp1),y
.8b75		91 08		sta ($08),y	                sta (up),y
.8b77		c8		iny		                iny
.8b78		c0 2c		cpy #$2c	                cpy #marker_end_offset
.8b7a		d0 f7		bne $8b73	                bne -
.8b7c		20 7e d0	jsr $d07e	                jsr dp_to_current       ; Move the CURRENT DP back.
.8b7f		60		rts		                rts
.8b80						xt_max:
.8b80		20 17 d1	jsr $d117	                jsr underflow_2
.8b83						w_max:
.8b83		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.8b85		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets the carry
.8b87		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.8b89		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.8b8b		50 02		bvc $8b8f	                bvc _no_overflow
.8b8d		49 80		eor #$80	                eor #$80        ; complement negative flag
.8b8f						_no_overflow:
.8b8f		30 08		bmi $8b99	                bmi _keep_nos
.8b91		b5 00		lda $00,x	                lda 0,x
.8b93		95 02		sta $02,x	                sta 2,x
.8b95		b5 01		lda $01,x	                lda 1,x
.8b97		95 03		sta $03,x	                sta 3,x
.8b99						_keep_nos:
.8b99		e8		inx		                inx
.8b9a		e8		inx		                inx
.8b9b		60		rts		z_max:          rts
.8b9c						xt_min:
.8b9c		20 17 d1	jsr $d117	                jsr underflow_2
.8b9f						w_min:
.8b9f		b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.8ba1		d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets carry
.8ba3		b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.8ba5		f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.8ba7		50 02		bvc $8bab	                bvc _no_overflow
.8ba9		49 80		eor #$80	                eor #$80
.8bab						_no_overflow:
.8bab		10 08		bpl $8bb5	                bpl _keep_nos
.8bad		b5 00		lda $00,x	                lda 0,x
.8baf		95 02		sta $02,x	                sta 2,x
.8bb1		b5 01		lda $01,x	                lda 1,x
.8bb3		95 03		sta $03,x	                sta 3,x
.8bb5						_keep_nos:
.8bb5		e8		inx		                inx
.8bb6		e8		inx		                inx
.8bb7		60		rts		z_min:          rts
.8bb8						xt_minus:
.8bb8		20 17 d1	jsr $d117	                jsr underflow_2
.8bbb						w_minus:
.8bbb		38		sec		                sec
.8bbc		b5 02		lda $02,x	                lda 2,x         ; LSB
.8bbe		f5 00		sbc $00,x	                sbc 0,x
.8bc0		95 02		sta $02,x	                sta 2,x
.8bc2		b5 03		lda $03,x	                lda 3,x         ; MSB
.8bc4		f5 01		sbc $01,x	                sbc 1,x
.8bc6		95 03		sta $03,x	                sta 3,x
.8bc8		e8		inx		                inx
.8bc9		e8		inx		                inx
.8bca		60		rts		z_minus:        rts
.8bcb						xt_mod:
.8bcb		20 17 d1	jsr $d117	                jsr underflow_2
.8bce						w_mod:
.8bce		20 54 91	jsr $9154	                jsr w_slash_mod
.8bd1		e8		inx		                inx             ; DROP
.8bd2		e8		inx		                inx
.8bd3						z_mod:
.8bd3		60		rts		                rts
.8bd4						xt_move:
.8bd4		20 1c d1	jsr $d11c	                jsr underflow_3
.8bd7						w_move:
.8bd7		b5 03		lda $03,x	                lda 3,x                 ; MSB of addr2
.8bd9		d5 05		cmp $05,x	                cmp 5,x                 ; MSB of addr1
.8bdb		f0 05		beq $8be2	                beq _lsb                ; wasn't helpful, move to LSB
.8bdd		b0 0e		bcs $8bed	                bcs _to_move_up         ; we want CMOVE>
.8bdf		4c 4a a0	jmp $a04a	                jmp w_cmove            ; JSR/RTS
.8be2						_lsb:
.8be2		b5 02		lda $02,x	                lda 2,x                 ; LSB of addr2
.8be4		d5 04		cmp $04,x	                cmp 4,x                 ; LSB of addr1
.8be6		f0 08		beq $8bf0	                beq _equal              ; LSB is equal as well
.8be8		b0 03		bcs $8bed	                bcs _to_move_up         ; we want CMOVE>
.8bea		4c 4a a0	jmp $a04a	                jmp w_cmove            ; JSR/RTS
.8bed						_to_move_up:
.8bed		4c 85 a0	jmp $a085	                jmp w_cmove_up         ; JSR/RTS
.8bf0						_equal:
.8bf0		8a		txa		                txa
.8bf1		18		clc		                clc
.8bf2		69 06		adc #$06	                adc #6
.8bf4		aa		tax		                tax
.8bf5		60		rts		z_move:         rts
.8bf6						xt_negate:
.8bf6		20 12 d1	jsr $d112	                jsr underflow_1
.8bf9						w_negate:
.8bf9		a9 00		lda #$00	        	lda #0
.8bfb		38		sec		                sec
.8bfc		f5 00		sbc $00,x	                sbc 0,x         ; LSB
.8bfe		95 00		sta $00,x	                sta 0,x
.8c00		a9 00		lda #$00	                lda #0
.8c02		f5 01		sbc $01,x	                sbc 1,x         ; MSB
.8c04		95 01		sta $01,x	                sta 1,x
.8c06		60		rts		z_negate:       rts
.8c07						xt_nip:
.8c07		20 17 d1	jsr $d117	                jsr underflow_2
.8c0a						w_nip:
.8c0a		b5 00		lda $00,x	                lda 0,x         ; LSB
.8c0c		95 02		sta $02,x	                sta 2,x
.8c0e		b5 01		lda $01,x	                lda 1,x         ; MSB
.8c10		95 03		sta $03,x	                sta 3,x
.8c12		e8		inx		                inx
.8c13		e8		inx		                inx
.8c14		60		rts		z_nip:          rts
.8c15						xt_not_equals:
.8c15		20 17 d1	jsr $d117	                jsr underflow_2
.8c18						w_not_equals:
.8c18		a0 00		ldy #$00	                ldy #0                  ; default is true
.8c1a		b5 00		lda $00,x	                lda 0,x                 ; LSB
.8c1c		d5 02		cmp $02,x	                cmp 2,x
.8c1e		d0 0a		bne $8c2a	                bne _not_equal
.8c20		b5 01		lda $01,x	                lda 1,x                 ; MSB
.8c22		d5 03		cmp $03,x	                cmp 3,x
.8c24		d0 04		bne $8c2a	                bne _not_equal
.8c26		a9 ff		lda #$ff	                lda #$FF
.8c28		80 01		bra $8c2b	                bra _done
.8c2a						_not_equal:
.8c2a		88		dey		                dey                     ; drop thru to done
.8c2b						_done:
.8c2b		98		tya		                tya
.8c2c		e8		inx		                inx
.8c2d		e8		inx		                inx
.8c2e		95 00		sta $00,x	                sta 0,x
.8c30		95 01		sta $01,x	                sta 1,x
.8c32		60		rts		z_not_equals:   rts
.8c33						xt_number_sign:
.8c33		20 17 d1	jsr $d117	                jsr underflow_2         ; double number
.8c36						w_number_sign:
.8c36		ca		dex		                dex                     ; inline w_zero
.8c37		ca		dex		                dex
.8c38		74 00		stz $00,x	                stz 0,x
.8c3a		74 01		stz $01,x	                stz 1,x
.8c3c		e6 19		inc $19		                inc base+1
.8c3e		b5 02		lda $02,x	                lda 2,x                 ; if msw is 0 we can skip the first pass
.8c40		15 03		ora $03,x	                ora 3,x
.8c42		f0 0b		beq $8c4f	                beq _skip               ; enter with ( v 0 0 -rot -- 0 v 0 )
.8c44						_loop:
.8c44		ca		dex		                dex                     ; inline `base @`
.8c45		ca		dex		                dex
.8c46		a5 18		lda $18		                lda base                ; base <= 36
.8c48		95 00		sta $00,x	                sta 0,x
.8c4a		74 01		stz $01,x	                stz 1,x
.8c4c		20 39 95	jsr $9539	                jsr w_um_slash_mod      ; ( v u 0 base -- v ru qu )
.8c4f		20 f8 9c	jsr $9cf8	_skip:          jsr w_not_rot           ; ( qu v ru )
.8c52		46 19		lsr $19		                lsr base+1              ; 1 => 0 + C=1 => 0 + C=0
.8c54		b0 ee		bcs $8c44	                bcs _loop               ; run two passes
.8c56		b5 00		lda $00,x	                lda 0,x
.8c58		a8		tay		                tay
.8c59		b9 64 cc	lda $cc64,y	                lda alpha36,y           ; upper case 0-9A-Z
.8c5c		95 00		sta $00,x	                sta 0,x
.8c5e		74 01		stz $01,x	                stz 1,x                 ; paranoid; now ( ud char )
.8c60		20 fc 88	jsr $88fc	                jsr w_hold
.8c63						z_number_sign:
.8c63		60		rts		                rts
.8c64						xt_number_sign_greater:
.8c64		20 17 d1	jsr $d117	                jsr underflow_2         ; double number
.8c67						w_number_sign_greater:
.8c67		a5 2b		lda $2b		                lda tohold
.8c69		95 00		sta $00,x	                sta 0,x         ; LSB of tohold
.8c6b		95 02		sta $02,x	                sta 2,x
.8c6d		a5 2c		lda $2c		                lda tohold+1
.8c6f		95 01		sta $01,x	                sta 1,x         ; MSB of addr
.8c71		95 03		sta $03,x	                sta 3,x         ; ( addr addr )
.8c73		20 e6 8c	jsr $8ce6	                jsr w_pad      ; ( addr addr pad )
.8c76		38		sec		                sec
.8c77		b5 00		lda $00,x	                lda 0,x         ; LSB of pad address
.8c79		f5 02		sbc $02,x	                sbc 2,x
.8c7b		95 02		sta $02,x	                sta 2,x
.8c7d		b5 01		lda $01,x	                lda 1,x         ; MSB, which should always be zero
.8c7f		f5 03		sbc $03,x	                sbc 3,x
.8c81		95 03		sta $03,x	                sta 3,x         ; ( addr u pad )
.8c83		e8		inx		                inx
.8c84		e8		inx		                inx
.8c85						z_number_sign_greater:
.8c85		60		rts		                rts
.8c86						xt_number_sign_s:
.8c86		20 17 d1	jsr $d117	                jsr underflow_2
.8c89						w_number_sign_s:
.8c89						_loop:
.8c89		20 36 8c	jsr $8c36	                jsr w_number_sign
.8c8c		b5 00		lda $00,x	                lda 0,x
.8c8e		15 01		ora $01,x	                ora 1,x
.8c90		15 02		ora $02,x	                ora 2,x
.8c92		15 03		ora $03,x	                ora 3,x
.8c94		d0 f3		bne $8c89	                bne _loop
.8c96						z_number_sign_s:
.8c96		60		rts		                rts
.8c97						xt_of:
.8c97						w_of:
.8c97		a0 8c		ldy #$8c	                ldy #>w_over
.8c99		a9 db		lda #$db	                lda #<w_over
.8c9b		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8c9e		a0 87		ldy #$87	                ldy #>w_equal
.8ca0		a9 5d		lda #$5d	                lda #<w_equal
.8ca2		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8ca5		20 20 89	jsr $8920	                jsr w_if
.8ca8		a0 86		ldy #$86	                ldy #>w_drop
.8caa		a9 63		lda #$63	                lda #<w_drop
.8cac		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8caf		60		rts		z_of:           rts
.8cb0						xt_one_minus:
.8cb0		20 12 d1	jsr $d112	                jsr underflow_1
.8cb3						w_one_minus:
.8cb3		b5 00		lda $00,x	                lda 0,x
.8cb5		d0 02		bne $8cb9	                bne +
.8cb7		d6 01		dec $01,x	                dec 1,x
.8cb9						+
.8cb9		d6 00		dec $00,x	                dec 0,x
.8cbb		60		rts		z_one_minus:    rts
.8cbc						xt_char_plus:
.8cbc						xt_one_plus:
.8cbc		20 12 d1	jsr $d112	                jsr underflow_1
.8cbf						w_char_plus:
.8cbf						w_one_plus:
.8cbf		f6 00		inc $00,x	                inc 0,x
.8cc1		d0 02		bne $8cc5	                bne _done
.8cc3		f6 01		inc $01,x	                inc 1,x
.8cc5						_done:
.8cc5						z_char_plus:
.8cc5		60		rts		z_one_plus:     rts
.8cc6						xt_or:
.8cc6		20 17 d1	jsr $d117	                jsr underflow_2
.8cc9						w_or:
.8cc9		b5 00		lda $00,x	                lda 0,x
.8ccb		15 02		ora $02,x	                ora 2,x
.8ccd		95 02		sta $02,x	                sta 2,x
.8ccf		b5 01		lda $01,x	                lda 1,x
.8cd1		15 03		ora $03,x	                ora 3,x
.8cd3		95 03		sta $03,x	                sta 3,x
.8cd5		e8		inx		                inx
.8cd6		e8		inx		                inx
.8cd7		60		rts		z_or:           rts
.8cd8						xt_over:
.8cd8		20 17 d1	jsr $d117	                jsr underflow_2
.8cdb						w_over:
.8cdb		ca		dex		                dex
.8cdc		ca		dex		                dex
.8cdd		b5 04		lda $04,x	                lda 4,x         ; LSB
.8cdf		95 00		sta $00,x	                sta 0,x
.8ce1		b5 05		lda $05,x	                lda 5,x         ; MSB
.8ce3		95 01		sta $01,x	                sta 1,x
.8ce5		60		rts		z_over:         rts
.8ce6						xt_pad:
.8ce6						w_pad:
.8ce6		ca		dex		                dex
.8ce7		ca		dex		                dex
.8ce8		a5 00		lda $00		                lda cp
.8cea		18		clc		                clc
.8ceb		69 ff		adc #$ff	                adc #padoffset  ; assumes padoffset one byte in size
.8ced		95 00		sta $00,x	                sta 0,x
.8cef		a5 01		lda $01		                lda cp+1
.8cf1		69 00		adc #$00	                adc #0          ; only need carry
.8cf3		95 01		sta $01,x	                sta 1,x
.8cf5		60		rts		z_pad:          rts
.8cf6						xt_page:
.8cf6						w_page:
.8cf6		a9 1b		lda #$1b	                lda #AscESC
.8cf8		20 93 86	jsr $8693	                jsr emit_a
.8cfb		a9 5b		lda #$5b	                lda #'['
.8cfd		20 93 86	jsr $8693	                jsr emit_a
.8d00		a9 32		lda #$32	                lda #'2'
.8d02		20 93 86	jsr $8693	                jsr emit_a
.8d05		a9 4a		lda #$4a	                lda #'J'
.8d07		20 93 86	jsr $8693	                jsr emit_a
.8d0a		20 71 9e	jsr $9e71	                jsr w_zero
.8d0d		20 71 9e	jsr $9e71	                jsr w_zero
.8d10		20 a8 82	jsr $82a8	                jsr w_at_xy
.8d13		60		rts		z_page:         rts
.8d14						xt_paren:
.8d14						w_paren:
.8d14		ca		dex		                dex
.8d15		ca		dex		                dex
.8d16		a9 29		lda #$29	                lda #41     ; Right parenthesis
.8d18		95 00		sta $00,x	                sta 0,x
.8d1a		74 01		stz $01,x	                stz 1,x
.8d1c		20 82 8d	jsr $8d82	                jsr w_parse
.8d1f		e8		inx		                inx
.8d20		e8		inx		                inx
.8d21		e8		inx		                inx
.8d22		e8		inx		                inx
.8d23		60		rts		z_paren:        rts
.8d24						xt_parse_name:
.8d24						w_parse_name:
.8d24		a5 0e		lda $0e		                lda ciblen              ; LSB of counter
.8d26		38		sec		                sec
.8d27		e5 10		sbc $10		                sbc toin
.8d29		85 25		sta $25		                sta tmp1
.8d2b		a5 0f		lda $0f		                lda ciblen+1            ; MSB
.8d2d		e5 11		sbc $11		                sbc toin+1
.8d2f		85 26		sta $26		                sta tmp1+1
.8d31		a5 25		lda $25		                lda tmp1
.8d33		05 26		ora $26		                ora tmp1+1
.8d35		f0 28		beq $8d5f	                beq _empty_line
.8d37		a5 0c		lda $0c		                lda cib
.8d39		18		clc		                clc
.8d3a		65 10		adc $10		                adc toin
.8d3c		85 27		sta $27		                sta tmp2                ; LSB of first character
.8d3e		a5 0d		lda $0d		                lda cib+1
.8d40		65 11		adc $11		                adc toin+1
.8d42		85 28		sta $28		                sta tmp2+1              ; MSB
.8d44						_skip_loop:
.8d44		b2 27		lda ($27)	                lda (tmp2)              ; work copy of cib
.8d46		20 05 d1	jsr $d105	                jsr is_whitespace
.8d49		90 1f		bcc $8d6a	                bcc _char_found
.8d4b		e6 27		inc $27		                inc tmp2
.8d4d		d0 02		bne $8d51	                bne +
.8d4f		e6 28		inc $28		                inc tmp2+1
.8d51						+
.8d51		a5 25		lda $25		                lda tmp1
.8d53		d0 02		bne $8d57	                bne +
.8d55		c6 26		dec $26		                dec tmp1+1
.8d57		c6 25		dec $25		+               dec tmp1
.8d59		a5 25		lda $25		                lda tmp1
.8d5b		05 26		ora $26		                ora tmp1+1
.8d5d		d0 e5		bne $8d44	                bne _skip_loop          ; fall through if empty line
.8d5f						_empty_line:
.8d5f		ca		dex		                dex
.8d60		ca		dex		                dex
.8d61		ca		dex		                dex
.8d62		ca		dex		                dex
.8d63		74 00		stz $00,x	                stz 0,x                 ; TOS is zero
.8d65		74 01		stz $01,x	                stz 1,x
.8d67		4c 14 8e	jmp $8e14	                jmp z_parse_name        ; skip over PARSE
.8d6a						_char_found:
.8d6a		a5 27		lda $27		                lda tmp2
.8d6c		38		sec		                sec
.8d6d		e5 0c		sbc $0c		                sbc cib
.8d6f		85 10		sta $10		                sta toin
.8d71		a5 28		lda $28		                lda tmp2+1
.8d73		e5 0d		sbc $0d		                sbc cib+1
.8d75		85 11		sta $11		                sta toin+1
.8d77		ca		dex		                dex
.8d78		ca		dex		                dex
.8d79		a9 20		lda #$20	                lda #AscSP
.8d7b		95 00		sta $00,x	                sta 0,x
.8d7d		74 01		stz $01,x	                stz 1,x                 ; paranoid, now ( "name" c )
.8d7f						xt_parse:
.8d7f		20 12 d1	jsr $d112	                jsr underflow_1
.8d82						w_parse:
.8d82		a5 0e		lda $0e		                lda ciblen
.8d84		05 0f		ora $0f		                ora ciblen+1
.8d86		f0 0c		beq $8d94	                beq _abort_parse
.8d88		a5 11		lda $11		                lda toin+1              ; MSB
.8d8a		c5 0f		cmp $0f		                cmp ciblen+1
.8d8c		90 0e		bcc $8d9c	                bcc _go_parse           ; unsigned comparison
.8d8e		a5 10		lda $10		                lda toin                ; LSB
.8d90		c5 0e		cmp $0e		                cmp ciblen
.8d92		90 08		bcc $8d9c	                bcc _go_parse
.8d94						_abort_parse:
.8d94		ca		dex		                dex
.8d95		ca		dex		                dex
.8d96		74 00		stz $00,x	                stz 0,x
.8d98		74 01		stz $01,x	                stz 1,x
.8d9a		80 78		bra $8e14	                bra _done
.8d9c						_go_parse:
.8d9c		b5 00		lda $00,x	                lda 0,x
.8d9e		85 23		sta $23		                sta tmptos
.8da0		ca		dex		                dex
.8da1		ca		dex		                dex
.8da2		a5 0c		lda $0c		                lda cib
.8da4		18		clc		                clc
.8da5		65 10		adc $10		                adc toin        ; LSB
.8da7		85 25		sta $25		                sta tmp1
.8da9		85 27		sta $27		                sta tmp2
.8dab		95 02		sta $02,x	                sta 2,x
.8dad		a5 0d		lda $0d		                lda cib+1
.8daf		65 11		adc $11		                adc toin+1      ; MSB
.8db1		85 26		sta $26		                sta tmp1+1
.8db3		85 28		sta $28		                sta tmp2+1
.8db5		95 03		sta $03,x	                sta 3,x
.8db7		a5 0c		lda $0c		                lda cib
.8db9		18		clc		                clc
.8dba		65 0e		adc $0e		                adc ciblen
.8dbc		85 29		sta $29		                sta tmp3
.8dbe		a5 0d		lda $0d		                lda cib+1
.8dc0		65 0f		adc $0f		                adc ciblen+1
.8dc2		85 2a		sta $2a		                sta tmp3+1
.8dc4		64 24		stz $24		                stz tmptos+1
.8dc6						_loop:
.8dc6		a5 27		lda $27		                lda tmp2
.8dc8		c5 29		cmp $29		                cmp tmp3
.8dca		d0 06		bne $8dd2	                bne _not_empty
.8dcc		a5 28		lda $28		                lda tmp2+1
.8dce		c5 2a		cmp $2a		                cmp tmp3+1
.8dd0		f0 1d		beq $8def	                beq _eol
.8dd2						_not_empty:
.8dd2		b2 27		lda ($27)	                lda (tmp2)
.8dd4		a4 23		ldy $23		                ldy tmptos
.8dd6		c0 20		cpy #$20	                cpy #AscSP
.8dd8		d0 07		bne $8de1	                bne _not_whitespace
.8dda		20 05 d1	jsr $d105	                jsr is_whitespace
.8ddd		90 02		bcc $8de1	                bcc _not_whitespace
.8ddf		80 0c		bra $8ded	                bra _found_delimiter
.8de1						_not_whitespace:
.8de1		c5 23		cmp $23		                cmp tmptos
.8de3		f0 08		beq $8ded	                beq _found_delimiter
.8de5		e6 27		inc $27		                inc tmp2
.8de7		d0 dd		bne $8dc6	                bne _loop
.8de9		e6 28		inc $28		                inc tmp2+1
.8deb		80 d9		bra $8dc6	                bra _loop
.8ded						_found_delimiter:
.8ded		e6 24		inc $24		                inc tmptos+1
.8def						_eol:
.8def		a5 27		lda $27		                lda tmp2
.8df1		38		sec		                sec
.8df2		e5 25		sbc $25		                sbc tmp1
.8df4		95 00		sta $00,x	                sta 0,x
.8df6		a5 28		lda $28		                lda tmp2+1
.8df8		e5 26		sbc $26		                sbc tmp1+1
.8dfa		95 01		sta $01,x	                sta 1,x
.8dfc		a5 27		lda $27		                lda tmp2
.8dfe		38		sec		                sec
.8dff		e5 0c		sbc $0c		                sbc cib
.8e01		85 10		sta $10		                sta toin
.8e03		a5 28		lda $28		                lda tmp2+1
.8e05		e5 0d		sbc $0d		                sbc cib+1
.8e07		85 11		sta $11		                sta toin+1
.8e09		a5 10		lda $10		                lda toin
.8e0b		18		clc		                clc
.8e0c		65 24		adc $24		                adc tmptos+1
.8e0e		85 10		sta $10		                sta toin
.8e10		90 02		bcc $8e14	                bcc +
.8e12		e6 11		inc $11		                inc toin+1
.8e14						+
.8e14						_done:
.8e14						z_parse_name:
.8e14		60		rts		z_parse:        rts
.8e15						xt_pick:
.8e15						w_pick:
.8e15		16 00		asl $00,x	                asl 0,x         ; we assume u < 128 (stack is small)
.8e17		8a		txa		                txa
.8e18		75 00		adc $00,x	                adc 0,x
.8e1a		a8		tay		                tay
.8e1b		b9 02 00	lda $0002,y	                lda 0002,y
.8e1e		95 00		sta $00,x	                sta 0,x
.8e20		b9 03 00	lda $0003,y	                lda 0003,y
.8e23		95 01		sta $01,x	                sta 1,x
.8e25		60		rts		z_pick:         rts
.8e26						xt_plus:
.8e26		20 17 d1	jsr $d117	                jsr underflow_2
.8e29						w_plus:
.8e29		18		clc		                clc
.8e2a		b5 00		lda $00,x	                lda 0,x         ; LSB
.8e2c		75 02		adc $02,x	                adc 2,x
.8e2e		95 02		sta $02,x	                sta 2,x
.8e30		b5 01		lda $01,x	                lda 1,x         ; MSB. No CLC, conserve carry bit
.8e32		75 03		adc $03,x	                adc 3,x
.8e34		95 03		sta $03,x	                sta 3,x
.8e36		e8		inx		                inx
.8e37		e8		inx		                inx
.8e38		60		rts		z_plus:         rts
.8e39						xt_plus_store:
.8e39		20 17 d1	jsr $d117	                jsr underflow_2
.8e3c						w_plus_store:
.8e3c		18		clc		                clc
.8e3d		a1 00		lda ($00,x)	                lda (0,x)       ; fetch LSB at addr
.8e3f		75 02		adc $02,x	                adc 2,x
.8e41		81 00		sta ($00,x)	                sta (0,x)
.8e43		f6 00		inc $00,x	                inc 0,x         ; addr++
.8e45		d0 02		bne $8e49	                bne +
.8e47		f6 01		inc $01,x	                inc 1,x
.8e49						+
.8e49		a1 00		lda ($00,x)	                lda (0,x)       ; fetch MSB
.8e4b		75 03		adc $03,x	                adc 3,x
.8e4d		81 00		sta ($00,x)	                sta (0,x)
.8e4f		e8		inx		                inx
.8e50		e8		inx		                inx
.8e51		e8		inx		                inx
.8e52		e8		inx		                inx
.8e53		60		rts		z_plus_store:   rts
.8e54						xt_postpone:
.8e54						w_postpone:
.8e54		20 24 8d	jsr $8d24	                jsr w_parse_name               ; ( -- addr n )
.8e57		b5 00		lda $00,x	                lda 0,x
.8e59		15 01		ora $01,x	                ora 1,x
.8e5b		d0 05		bne $8e62	                bne +
.8e5d		a9 05		lda #$05	                lda #err_noname
.8e5f		4c 28 d1	jmp $d128	                jmp error
.8e62						+
.8e62		20 5d 9b	jsr $9b5d	                jsr w_find_name                ; ( -- nt | 0 )
.8e65		d0 05		bne $8e6c	                bne +
.8e67		a9 05		lda #$05	                lda #err_noname
.8e69		4c 28 d1	jmp $d128	                jmp error
.8e6c						+
.8e6c		20 69 86	jsr $8669	                jsr w_dup
.8e6f		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.8e72		a1 00		lda ($00,x)	                lda (0,x)
.8e74		e8		inx		                inx
.8e75		e8		inx		                inx
.8e76		29 02		and #$02	                and #IM         ; mask all but Intermediate flag
.8e78		f0 05		beq $8e7f	                beq _not_immediate
.8e7a		20 ad 96	jsr $96ad	                jsr compile_nt_comma
.8e7d		80 0a		bra $8e89	                bra _done
.8e7f						_not_immediate:
.8e7f		20 d3 89	jsr $89d3	                jsr w_literal                   ; ( nt -- )
.8e82		a0 96		ldy #$96	                ldy #>compile_nt_comma
.8e84		a9 ad		lda #$ad	                lda #<compile_nt_comma
.8e86		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.8e89						_done:
.8e89		60		rts		z_postpone:     rts
.8e8a						xt_question_dup:
.8e8a		20 12 d1	jsr $d112	                jsr underflow_1
.8e8d						w_question_dup:
.8e8d		b5 00		lda $00,x	                lda 0,x
.8e8f		15 01		ora $01,x	                ora 1,x
.8e91		f0 0a		beq $8e9d	                beq _done
.8e93		ca		dex		                dex
.8e94		ca		dex		                dex
.8e95		b5 02		lda $02,x	                lda 2,x
.8e97		95 00		sta $00,x	                sta 0,x
.8e99		b5 03		lda $03,x	                lda 3,x
.8e9b		95 01		sta $01,x	                sta 1,x
.8e9d						_done:
.8e9d		60		rts		z_question_dup: rts
.8e9e						xt_r_fetch:
.8e9e						w_r_fetch:
.8e9e		68		pla		                pla                     ; LSB
.8e9f		7a		ply		                ply                     ; MSB
.8ea0		1a		inc a		                inc a
.8ea1		85 25		sta $25		                sta tmp1                ; LSB
.8ea3		d0 01		bne $8ea6	                bne +
.8ea5		c8		iny		                iny
.8ea6						+
.8ea6		84 26		sty $26		                sty tmp1+1              ; MSB
.8ea8		ca		dex		                dex
.8ea9		ca		dex		                dex
.8eaa		7a		ply		                ply             ; LSB
.8eab		94 00		sty $00,x	                sty 0,x
.8ead		68		pla		                pla             ; MSB
.8eae		95 01		sta $01,x	                sta 1,x
.8eb0		48		pha		                pha
.8eb1		5a		phy		                phy
.8eb2		6c 25 00	jmp ($0025)	z_r_fetch:      jmp (tmp1)
.8eb5						xt_r_from:
.8eb5						w_r_from:
.8eb5		68		pla		                pla                     ; LSB
.8eb6		7a		ply		                ply                     ; MSB
.8eb7		1a		inc a		                inc a
.8eb8		85 25		sta $25		                sta tmp1                ; LSB
.8eba		d0 01		bne $8ebd	                bne +
.8ebc		c8		iny		                iny
.8ebd						+
.8ebd		84 26		sty $26		                sty tmp1+1              ; MSB
.8ebf		ca		dex		                dex
.8ec0		ca		dex		                dex
.8ec1		68		pla		                pla             ; LSB
.8ec2		95 00		sta $00,x	                sta 0,x
.8ec4		68		pla		                pla             ; MSB
.8ec5		95 01		sta $01,x	                sta 1,x
.8ec7		6c 25 00	jmp ($0025)	z_r_from:       jmp (tmp1)
.8eca						xt_recurse:
.8eca						w_recurse:
.8eca		a0 00		ldy #$00	                ldy #0
.8ecc		a9 20		lda #$20	                lda #OpJSR
.8ece		91 00		sta ($00),y	                sta (cp),y
.8ed0		c8		iny		                iny
.8ed1		24 1c		bit $1c		                bit status
.8ed3		70 0c		bvs $8ee1	                bvs _nt_in_workword
.8ed5		a5 06		lda $06		                lda workword
.8ed7		91 00		sta ($00),y	                sta (cp),y
.8ed9		c8		iny		                iny
.8eda		a5 07		lda $07		                lda workword+1
.8edc		91 00		sta ($00),y	                sta (cp),y
.8ede		c8		iny		                iny
.8edf		80 1b		bra $8efc	                bra _update_cp
.8ee1						_nt_in_workword:
.8ee1		a5 06		lda $06		                lda workword            ; LSB
.8ee3		18		clc		                clc
.8ee4		69 04		adc #$04	                adc #4
.8ee6		85 25		sta $25		                sta tmp1
.8ee8		a5 07		lda $07		                lda workword+1          ; MSB
.8eea		69 00		adc #$00	                adc #0
.8eec		85 26		sta $26		                sta tmp1+1
.8eee		b2 25		lda ($25)	                lda (tmp1)
.8ef0		91 00		sta ($00),y	                sta (cp),y
.8ef2		5a		phy		                phy
.8ef3		a0 01		ldy #$01	                ldy #1
.8ef5		b1 25		lda ($25),y	                lda (tmp1),y
.8ef7		7a		ply		                ply
.8ef8		c8		iny		                iny
.8ef9		91 00		sta ($00),y	                sta (cp),y
.8efb		c8		iny		                iny
.8efc						_update_cp:
.8efc		98		tya		                tya
.8efd		18		clc		                clc
.8efe		65 00		adc $00		                adc cp
.8f00		85 00		sta $00		                sta cp
.8f02		90 02		bcc $8f06	                bcc _done
.8f04		e6 01		inc $01		                inc cp+1
.8f06						_done:
.8f06		60		rts		z_recurse:      rts
.8f07						xt_refill:
.8f07						w_refill:
.8f07		a5 0a		lda $0a		                lda insrc               ; cheat: We only check LSB
.8f09		d0 2d		bne $8f38	                bne _src_not_kbd
.8f0b		ca		dex		                dex
.8f0c		ca		dex		                dex
.8f0d		ca		dex		                dex
.8f0e		ca		dex		                dex
.8f0f		a5 0c		lda $0c		                lda cib                 ; address of CIB is NOS
.8f11		95 02		sta $02,x	                sta 2,x
.8f13		a5 0d		lda $0d		                lda cib+1
.8f15		95 03		sta $03,x	                sta 3,x
.8f17		64 0e		stz $0e		                stz ciblen              ; go in with empty buffer
.8f19		64 0f		stz $0f		                stz ciblen+1
.8f1b		a9 ff		lda #$ff	                lda #bsize              ; max number of chars is TOS
.8f1d		95 00		sta $00,x	                sta 0,x
.8f1f		74 01		stz $01,x	                stz 1,x                 ; cheat: We only accept max 255
.8f21		20 ea 80	jsr $80ea	                jsr w_accept           ; ( addr n1 -- n2)
.8f24		b5 00		lda $00,x	                lda 0,x
.8f26		85 0e		sta $0e		                sta ciblen
.8f28		b5 01		lda $01,x	                lda 1,x
.8f2a		85 0f		sta $0f		                sta ciblen+1            ; though we only accept 255 chars
.8f2c		64 10		stz $10		                stz toin
.8f2e		64 11		stz $11		                stz toin+1
.8f30		a9 ff		lda #$ff	                lda #$FF                ; overwrite with TRUE flag
.8f32		95 00		sta $00,x	                sta 0,x
.8f34		95 01		sta $01,x	                sta 1,x
.8f36		80 10		bra $8f48	                bra _done
.8f38						_src_not_kbd:
.8f38		1a		inc a		                ina
.8f39		d0 08		bne $8f43	                bne _src_not_string
.8f3b		ca		dex		                dex
.8f3c		ca		dex		                dex
.8f3d		74 00		stz $00,x	                stz 0,x
.8f3f		74 01		stz $01,x	                stz 1,x
.8f41		80 05		bra $8f48	                bra z_refill
.8f43						_src_not_string:
.8f43		a9 01		lda #$01	                lda #err_badsource
.8f45		4c 28 d1	jmp $d128	                jmp error
.8f48						_done:
.8f48		60		rts		z_refill:       rts
.8f49						xt_repeat:
.8f49		20 17 d1	jsr $d117	                jsr underflow_2
.8f4c						w_repeat:
.8f4c		20 25 82	jsr $8225	                jsr w_again
.8f4f		4c 82 86	jmp $8682	                jmp w_then
.8f52						z_repeat:
.8f52						xt_right_bracket:
.8f52						w_right_bracket:
.8f52		a9 ff		lda #$ff	                lda #$FF
.8f54		85 1a		sta $1a		                sta state
.8f56		85 1b		sta $1b		                sta state+1
.8f58						z_right_bracket:
.8f58		60		rts		                rts
.8f59						xt_rot:
.8f59		20 1c d1	jsr $d11c	                jsr underflow_3
.8f5c						w_rot:
.8f5c		b4 05		ldy $05,x	                ldy 5,x         ; MSB first
.8f5e		b5 03		lda $03,x	                lda 3,x
.8f60		95 05		sta $05,x	                sta 5,x
.8f62		b5 01		lda $01,x	                lda 1,x
.8f64		95 03		sta $03,x	                sta 3,x
.8f66		94 01		sty $01,x	                sty 1,x
.8f68		b4 04		ldy $04,x	                ldy 4,x         ; LSB next
.8f6a		b5 02		lda $02,x	                lda 2,x
.8f6c		95 04		sta $04,x	                sta 4,x
.8f6e		b5 00		lda $00,x	                lda 0,x
.8f70		95 02		sta $02,x	                sta 2,x
.8f72		94 00		sty $00,x	                sty 0,x
.8f74		60		rts		z_rot:          rts
.8f75						xt_rshift:
.8f75		20 17 d1	jsr $d117	                jsr underflow_2
.8f78						w_rshift:
.8f78		b5 00		lda $00,x	                lda 0,x
.8f7a		29 0f		and #$0f	                and #%00001111
.8f7c		f0 08		beq $8f86	                beq _done               ; if 0 shifts, quit
.8f7e		a8		tay		                tay
.8f7f						_loop:
.8f7f		56 03		lsr $03,x	                lsr 3,x
.8f81		76 02		ror $02,x	                ror 2,x
.8f83		88		dey		                dey
.8f84		d0 f9		bne $8f7f	                bne _loop
.8f86						_done:
.8f86		e8		inx		                inx
.8f87		e8		inx		                inx
.8f88		60		rts		z_rshift:       rts
.8f89						xt_s_backslash_quote:
.8f89						w_s_backslash_quote:
.8f89		a9 ff		lda #$ff	                lda #$FF
.8f8b		85 27		sta $27		                sta tmp2
.8f8d		64 28		stz $28		                stz tmp2+1
.8f8f		20 a6 8f	jsr $8fa6	                jsr s_quote_start
.8f92						z_s_backslash_quote:
.8f92		60		rts		                rts
.8f93						convert_hex_value:
.8f93		c9 41		cmp #$41	        cmp #'A'
.8f95		90 07		bcc $8f9e	        bcc _digit
.8f97		29 df		and #$df	        and #$DF                ; Make it uppercase.
.8f99		38		sec		        sec
.8f9a		e9 37		sbc #$37	        sbc #'7'                ; gives value 10 for 'A'
.8f9c		80 03		bra $8fa1	        bra _done
.8f9e						_digit:
.8f9e		38		sec		        sec
.8f9f		e9 30		sbc #$30	        sbc #'0'
.8fa1						_done:
.8fa1		60		rts		        rts
.8fa2						xt_s_quote:
.8fa2						w_s_quote:
.8fa2		64 27		stz $27		                stz tmp2
.8fa4		64 28		stz $28		                stz tmp2+1
.8fa6						s_quote_start:
.8fa6		a5 1a		lda $1a		                lda state               ; check whether we're interpeting (0) or compiling (-1)
.8fa8		05 1b		ora $1b		                ora state+1             ; paranoid
.8faa		48		pha		                pha                     ; save zero / nonzero for post-processing
.8fab		f0 0b		beq $8fb8	                beq _interpeting        ; just write string directly
.8fad		18		clc		                clc
.8fae		a5 00		lda $00		                lda cp
.8fb0		69 05		adc #$05	                adc #5                  ; reserve five bytes for the prologue (see below)
.8fb2		85 00		sta $00		                sta cp
.8fb4		90 02		bcc $8fb8	                bcc +
.8fb6		e6 01		inc $01		                inc cp+1
.8fb8						+
.8fb8						_interpeting:
.8fb8		20 e7 88	jsr $88e7	                jsr w_here              ; ( addr )
.8fbb						_savechars_loop:
.8fbb		a5 11		lda $11		                lda toin+1              ; MSB
.8fbd		c5 0f		cmp $0f		                cmp ciblen+1
.8fbf		90 2a		bcc $8feb	                bcc _input_fine         ; unsigned comparison
.8fc1		a5 10		lda $10		                lda toin                ; LSB
.8fc3		c5 0e		cmp $0e		                cmp ciblen
.8fc5		90 24		bcc $8feb	                bcc _input_fine
.8fc7		a5 27		lda $27		                lda tmp2
.8fc9		48		pha		                pha
.8fca		a5 28		lda $28		                lda tmp2+1
.8fcc		48		pha		                pha
.8fcd		a5 29		lda $29		                lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
.8fcf		48		pha		                pha
.8fd0		20 07 8f	jsr $8f07	                jsr w_refill           ; ( -- f )
.8fd3		68		pla		                pla
.8fd4		85 29		sta $29		                sta tmp3
.8fd6		68		pla		                pla
.8fd7		85 28		sta $28		                sta tmp2+1
.8fd9		68		pla		                pla
.8fda		85 27		sta $27		                sta tmp2
.8fdc		b5 00		lda $00,x	                lda 0,x
.8fde		15 01		ora $01,x	                ora 1,x
.8fe0		d0 05		bne $8fe7	                bne _refill_ok
.8fe2		a9 06		lda #$06	                lda #err_refill
.8fe4		4c 28 d1	jmp $d128	                jmp error
.8fe7						_refill_ok:
.8fe7		e8		inx		                inx
.8fe8		e8		inx		                inx
.8fe9		80 d0		bra $8fbb	                bra _savechars_loop
.8feb						_input_fine:
.8feb		a5 0c		lda $0c		                lda cib
.8fed		18		clc		                clc
.8fee		65 10		adc $10		                adc toin        ; LSB
.8ff0		85 25		sta $25		                sta tmp1
.8ff2		a5 0d		lda $0d		                lda cib+1
.8ff4		65 11		adc $11		                adc toin+1      ; MSB
.8ff6		85 26		sta $26		                sta tmp1+1
.8ff8		b2 25		lda ($25)	                lda (tmp1)
.8ffa		24 27		bit $27		                bit tmp2
.8ffc		30 03		bmi $9001	                bmi _handle_escapes    ; Only checking bit 7
.8ffe		4c 69 90	jmp $9069	                jmp _regular_char
.9001						_handle_escapes:
.9001		24 28		bit $28		                bit tmp2+1
.9003		30 03		bmi $9008	                bmi _escaped
.9005		4c 5f 90	jmp $905f	                jmp _not_escaped
.9008						_escaped:
.9008		70 21		bvs $902b	                bvs _check_esc_chars
.900a		a9 01		lda #$01	                lda #1
.900c		24 28		bit $28		                bit tmp2+1
.900e		d0 10		bne $9020	                bne _esc_x_second_digit
.9010		e6 28		inc $28		                inc tmp2+1  ; Adjust flag for second digit next time.
.9012		b2 25		lda ($25)	                lda (tmp1)  ; Get the char again.
.9014		20 93 8f	jsr $8f93	                jsr convert_hex_value
.9017		0a		asl a		                asl
.9018		0a		asl a		                asl
.9019		0a		asl a		                asl
.901a		0a		asl a		                asl
.901b		85 29		sta $29		                sta tmp3    ; Save it for later.
.901d		4c 70 90	jmp $9070	                jmp _next_character
.9020						_esc_x_second_digit:
.9020		64 28		stz $28		                stz tmp2+1
.9022		b2 25		lda ($25)	                lda (tmp1)
.9024		20 93 8f	jsr $8f93	                jsr convert_hex_value
.9027		05 29		ora $29		                ora tmp3
.9029		80 42		bra $906d	                bra _save_character
.902b						_check_esc_chars:
.902b		64 28		stz $28		                stz tmp2+1
.902d		c9 61		cmp #$61	                cmp #'a'
.902f		30 1a		bmi $904b	                bmi _check_esc_quote
.9031		c9 7b		cmp #$7b	                cmp #'z'+1
.9033		10 16		bpl $904b	                bpl _check_esc_quote
.9035		a8		tay		                tay
.9036		b9 3b 90	lda $903b,y	                lda escape_tr_table - 'a',y   ; fake base address to index with a-z directly
.9039		d0 03		bne $903e	                bne _esc_replace
.903b		98		tya		                tya                     ; revert if no translation
.903c		80 0d		bra $904b	                bra _check_esc_quote
.903e		10 2d		bpl $906d	_esc_replace:   bpl _save_character     ; simple replacement
.9040		29 7f		and #$7f	                and #$7F                ; clear hi bit
.9042		f0 29		beq $906d	                beq _save_character     ; NUL we can just output
.9044		20 bc 97	jsr $97bc	                jsr cmpl_a              ; else output first char (CR)
.9047		a9 0a		lda #$0a	                lda #10                 ; followed by LF
.9049		80 22		bra $906d	                bra _save_character
.904b						_check_esc_quote:
.904b		c9 22		cmp #$22	                cmp #'"'
.904d		f0 1e		beq $906d	                beq _save_character
.904f		c9 78		cmp #$78	                cmp #'x'
.9051		d0 06		bne $9059	                bne _check_esc_backslash
.9053		a9 be		lda #$be	                lda #%10111110        ; Clear bits 6 and 0
.9055		85 28		sta $28		                sta tmp2+1
.9057		80 17		bra $9070	                bra _next_character
.9059						_check_esc_backslash:
.9059		c9 5c		cmp #$5c	                cmp #'\'
.905b		d0 0c		bne $9069	                bne _regular_char
.905d		80 0e		bra $906d	                bra _save_character
.905f						_not_escaped:
.905f		c9 5c		cmp #$5c	                cmp #'\'
.9061		d0 06		bne $9069	                bne _regular_char
.9063		a9 ff		lda #$ff	                lda #$FF
.9065		85 28		sta $28		                sta tmp2+1
.9067		80 07		bra $9070	                bra _next_character
.9069						_regular_char:
.9069		c9 22		cmp #$22	                cmp #'"'
.906b		f0 0c		beq $9079	                beq _found_string_end
.906d						_save_character:
.906d		20 bc 97	jsr $97bc	                jsr cmpl_a
.9070						_next_character:
.9070		e6 10		inc $10		                inc toin
.9072		d0 02		bne $9076	                bne _savechars_loop_longjump
.9074		e6 11		inc $11		                inc toin+1
.9076						_savechars_loop_longjump:
.9076		4c bb 8f	jmp $8fbb	                jmp _savechars_loop
.9079						_found_string_end:
.9079		e6 10		inc $10		                inc toin
.907b		d0 02		bne $907f	                bne +
.907d		e6 11		inc $11		                inc toin+1
.907f						+
.907f		20 e7 88	jsr $88e7	                jsr w_here
.9082		20 db 8c	jsr $8cdb	                jsr w_over
.9085		20 bb 8b	jsr $8bbb	                jsr w_minus    ; HERE - addr gives string length
.9088		68		pla		                pla                     ; fetch the state flag (0 = interpret)
.9089		f0 10		beq $909b	                beq _done
.908b		38		sec		                sec                     ; rewind the CP to addr-5
.908c		b5 02		lda $02,x	                lda 2,x
.908e		e9 05		sbc #$05	                sbc #5
.9090		85 00		sta $00		                sta cp
.9092		b5 03		lda $03,x	                lda 3,x
.9094		e9 00		sbc #$00	                sbc #0
.9096		85 01		sta $01		                sta cp+1
.9098		20 3a a2	jsr $a23a	                jsr w_sliteral         ; ( addr u -- )
.909b						_done:
.909b		60		rts		z_s_quote:      rts
.909c						escape_tr_table:
>909c		07				    .byte   7               ; a -> BEL (ASCII value 7)
>909d		08				    .byte   8               ; b -> Backspace (ASCII value 8)
>909e		00 00				    .byte   0,0             ; c, d no escape
>90a0		1b				    .byte   27              ; e -> ESC (ASCII value 27)
>90a1		0c				    .byte   12              ; f -> FF (ASCII value 12)
>90a2		00 00 00 00 00			    .byte   0,0,0,0,0       ; g,h,i,j,k
>90a7		0a				    .byte   10              ; l -> LF (ASCII value 10)
>90a8		8d				    .byte   13+128          ; m -> CR/LF pair (ASCII values 13, 10)
>90a9		0a				    .byte   10              ; n behaves like l --> lf
>90aa		00 00				    .byte   0,0             ; o,p
>90ac		22				    .byte   34              ; q -> Double quote (ASCII value 34)
>90ad		0d				    .byte   13              ; r ->  CR (ASCII value 13)
>90ae		00				    .byte   0               ; s
>90af		09				    .byte   9               ; t -> Horizontal TAB (ASCII value 9)
>90b0		00				    .byte   0               ; u
>90b1		0b				    .byte   11              ; v -> Vertical TAB (ASCII value 11)
>90b2		00 00 00			    .byte   0,0,0           ; w,x,y   (x is a special case later)
>90b5		80				    .byte   0+128           ; z -> NULL (ASCII value 0)
.90b6						xt_s_to_d:
.90b6		20 12 d1	jsr $d112	                jsr underflow_1
.90b9						w_s_to_d:
.90b9		ca		dex		                dex
.90ba		ca		dex		                dex
.90bb		74 00		stz $00,x	                stz 0,x
.90bd		74 01		stz $01,x	                stz 1,x
.90bf		b5 03		lda $03,x	                lda 3,x
.90c1		10 04		bpl $90c7	                bpl _done
.90c3		d6 00		dec $00,x	                dec 0,x
.90c5		d6 01		dec $01,x	                dec 1,x
.90c7						_done:
.90c7		60		rts		z_s_to_d:       rts
.90c8						xt_semicolon:
.90c8						w_semicolon:
.90c8		24 1c		bit $1c		                bit status              ; check bit 6 (overflow flag)
.90ca		70 11		bvs $90dd	                bvs _colonword
.90cc		a9 60		lda #$60	                lda #OpRTS
.90ce		20 bc 97	jsr $97bc	                jsr cmpl_a
.90d1		ca		dex		                dex
.90d2		ca		dex		                dex
.90d3		a5 06		lda $06		                lda workword
.90d5		95 00		sta $00,x	                sta 0,x
.90d7		a5 07		lda $07		                lda workword+1
.90d9		95 01		sta $01,x	                sta 1,x
.90db		80 53		bra $9130	                bra _semicolon_done
.90dd						_colonword:
.90dd		a9 10		lda #$10	                lda #%00010000
.90df		25 1c		and $1c		                and status
.90e1		f0 08		beq $90eb	                beq +
.90e3		a0 01		ldy #$01	                ldy #1
.90e5		b1 06		lda ($06),y	                lda (workword),y
.90e7		29 f7		and #$f7	                and #255-NN
.90e9		91 06		sta ($06),y	                sta (workword),y
.90eb						+
.90eb		a0 06		ldy #$06	                ldy #6
.90ed		a5 00		lda $00		                lda cp
.90ef		91 06		sta ($06),y	                sta (workword),y
.90f1		c8		iny		                iny
.90f2		a5 01		lda $01		                lda cp+1
.90f4		91 06		sta ($06),y	                sta (workword),y
.90f6		a9 60		lda #$60	                lda #OpRTS
.90f8		20 bc 97	jsr $97bc	                jsr cmpl_a
.90fb		24 1c		bit $1c		                bit status
.90fd		10 26		bpl $9125	                bpl _new_word   ; Bit 7 is clear = new word
.90ff		ca		dex		                dex
.9100		ca		dex		                dex
.9101		ca		dex		                dex
.9102		ca		dex		                dex
.9103		b2 06		lda ($06)	                lda (workword)
.9105		95 00		sta $00,x	                sta 0,x
.9107		74 01		stz $01,x	                stz 1,x
.9109		a5 06		lda $06		                lda workword
.910b		18		clc		                clc
.910c		69 08		adc #$08	                adc #8
.910e		95 02		sta $02,x	                sta 2,x
.9110		a5 07		lda $07		                lda workword+1
.9112		69 00		adc #$00	                adc #0                  ; only want carry
.9114		95 03		sta $03,x	                sta 3,x
.9116		a9 02		lda #$02	                lda #str_redefined       ; address of string "redefined"
.9118		20 4e d1	jsr $d14e	                jsr print_string_no_lf
.911b		20 b4 94	jsr $94b4	                jsr w_type
.911e		20 b5 91	jsr $91b5	                jsr w_space
.9121		a9 80		lda #$80	                lda #%10000000
.9123		14 1c		trb $1c		                trb status
.9125						_new_word:
.9125		a5 06		lda $06		                lda workword
.9127		85 02		sta $02		                sta dp
.9129		a5 07		lda $07		                lda workword+1
.912b		85 03		sta $03		                sta dp+1
.912d		20 7e d0	jsr $d07e	                jsr dp_to_current       ; Save the updated DP to the
.9130						_semicolon_done:
.9130		64 1a		stz $1a		                stz state
.9132		64 1b		stz $1b		                stz state+1
.9134		60		rts		z_semicolon:    rts
.9135						xt_sign:
.9135		20 12 d1	jsr $d112	                jsr underflow_1
.9138						w_sign:
.9138		b5 01		lda $01,x	                lda 1,x         ; check MSB of TOS
.913a		30 04		bmi $9140	                bmi _minus
.913c		e8		inx		                inx
.913d		e8		inx		                inx
.913e		80 09		bra $9149	                bra _done
.9140						_minus:
.9140		a9 2d		lda #$2d	                lda #'-'
.9142		95 00		sta $00,x	                sta 0,x         ; overwrite TOS
.9144		74 01		stz $01,x	                stz 1,x         ; paranoid
.9146		20 fc 88	jsr $88fc	                jsr w_hold
.9149						_done:
.9149		60		rts		z_sign:         rts
.914a						xt_slash:
.914a		20 17 d1	jsr $d117	                jsr underflow_2
.914d						w_slash:
.914d		a9 00		lda #$00	                lda #0
.914f		80 05		bra $9156	                bra slashmod_common
.9151						xt_slash_mod:
.9151		20 17 d1	jsr $d117	                jsr underflow_2
.9154						w_slash_mod:
.9154		a9 ff		lda #$ff	                lda #$FF                ; falls through to _common
.9156						slashmod_common:
.9156		48		pha		                pha
.9157		20 59 93	jsr $9359	                jsr w_to_r             ; >R
.915a		20 b9 90	jsr $90b9	                jsr w_s_to_d           ; S>D
.915d		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R>
.9160		20 6f 91	jsr $916f	                jsr w_sm_slash_rem     ; SM/REM
.9163		68		pla		                pla
.9164		d0 05		bne $916b	                bne _done
.9166		20 1e 92	jsr $921e	                jsr w_swap
.9169		e8		inx		                inx             ; DROP
.916a		e8		inx		                inx
.916b						_done:
.916b						z_slash_mod:
.916b		60		rts		z_slash:        rts
.916c						xt_sm_slash_rem:
.916c		20 1c d1	jsr $d11c	                jsr underflow_3 ; contains double number
.916f						w_sm_slash_rem:
.916f		b5 03		lda $03,x	                lda 3,x
.9171		48		pha		                pha
.9172		b5 01		lda $01,x	                lda 1,x
.9174		55 03		eor $03,x	                eor 3,x
.9176		48		pha		                pha
.9177		20 d5 80	jsr $80d5	                jsr w_abs
.917a		e8		inx		                inx             ; pretend we pushed n1 to R
.917b		e8		inx		                inx
.917c		20 c3 9e	jsr $9ec3	                jsr w_dabs
.917f		ca		dex		                dex
.9180		ca		dex		                dex
.9181		20 39 95	jsr $9539	                jsr w_um_slash_mod     ; UM/MOD
.9184		68		pla		                pla
.9185		10 03		bpl $918a	                bpl +
.9187		20 f9 8b	jsr $8bf9	                jsr w_negate
.918a						+
.918a		68		pla		                pla
.918b		10 07		bpl $9194	                bpl _done
.918d		e8		inx		                inx             ; pretend we pushed quotient to R
.918e		e8		inx		                inx
.918f		20 f9 8b	jsr $8bf9	                jsr w_negate
.9192		ca		dex		                dex
.9193		ca		dex		                dex
.9194						_done:
.9194		60		rts		z_sm_slash_rem: rts
.9195						xt_source:
.9195						w_source:
.9195		ca		dex		                dex
.9196		ca		dex		                dex
.9197		a5 0c		lda $0c		                lda cib
.9199		95 00		sta $00,x	                sta 0,x
.919b		a5 0d		lda $0d		                lda cib+1
.919d		95 01		sta $01,x	                sta 1,x
.919f		ca		dex		                dex
.91a0		ca		dex		                dex
.91a1		a5 0e		lda $0e		                lda ciblen
.91a3		95 00		sta $00,x	                sta 0,x
.91a5		a5 0f		lda $0f		                lda ciblen+1
.91a7		95 01		sta $01,x	                sta 1,x
.91a9		60		rts		z_source:       rts
.91aa						xt_source_id:
.91aa						w_source_id:
.91aa		ca		dex		                dex
.91ab		ca		dex		                dex
.91ac		a5 0a		lda $0a		                lda insrc
.91ae		95 00		sta $00,x	                sta 0,x
.91b0		a5 0b		lda $0b		                lda insrc+1
.91b2		95 01		sta $01,x	                sta 1,x
.91b4		60		rts		z_source_id:    rts
.91b5						xt_space:
.91b5						w_space:
.91b5		a9 20		lda #$20	                lda #AscSP
.91b7		20 93 86	jsr $8693	                jsr emit_a
.91ba		60		rts		z_space:        rts
.91bb						xt_spaces:
.91bb		20 12 d1	jsr $d112	                jsr underflow_1
.91be						w_spaces:
.91be		b5 01		lda $01,x	                lda 1,x         ; ANS says this word takes a signed value
.91c0		30 10		bmi $91d2	                bmi _done       ; but prints no spaces for negative values.
.91c2		b4 00		ldy $00,x	                ldy 0,x
.91c4		f0 08		beq $91ce	                beq _msb
.91c6						_loop:
.91c6		a9 20		lda #$20	                lda #AscSP
.91c8		20 93 86	jsr $8693	                jsr emit_a      ; user routine preserves X and Y
.91cb		88		dey		                dey
.91cc		d0 f8		bne $91c6	                bne _loop       ; Y is zero on exit so looping again emits 256 more spaces
.91ce						_msb:
.91ce		d6 01		dec $01,x	                dec 1,x         ; when decrementing MSB goes negative, it was zero so we're done
.91d0		10 f4		bpl $91c6	                bpl _loop       ; otherwise emit another 256 spaces
.91d2		e8		inx		_done:          inx
.91d3		e8		inx		                inx
.91d4		60		rts		z_spaces:       rts
.91d5						xt_star:
.91d5		20 17 d1	jsr $d117	                jsr underflow_2
.91d8						w_star:
.91d8		20 7b 95	jsr $957b	                jsr w_um_star
.91db		e8		inx		                inx
.91dc		e8		inx		                inx
.91dd		60		rts		z_star:         rts
.91de						xt_star_slash:
.91de		20 1c d1	jsr $d11c	                jsr underflow_3
.91e1						w_star_slash:
.91e1		20 ed 91	jsr $91ed	                jsr w_star_slash_mod
.91e4		20 1e 92	jsr $921e	                jsr w_swap
.91e7		e8		inx		                inx
.91e8		e8		inx		                inx
.91e9						z_star_slash:
.91e9		60		rts		                rts
.91ea						xt_star_slash_mod:
.91ea		20 1c d1	jsr $d11c	                jsr underflow_3
.91ed						w_star_slash_mod:
.91ed		20 59 93	jsr $9359	                jsr w_to_r
.91f0		20 02 8b	jsr $8b02	                jsr w_m_star
.91f3		20 b5 8e	jsr $8eb5	                jsr w_r_from
.91f6		20 6f 91	jsr $916f	                jsr w_sm_slash_rem
.91f9						z_star_slash_mod:
.91f9		60		rts		                rts
.91fa						xt_state:
.91fa						w_state:
.91fa		ca		dex		                dex
.91fb		ca		dex		                dex
.91fc		a9 1a		lda #$1a	                lda #<state
.91fe		95 00		sta $00,x	                sta 0,x
.9200		a9 00		lda #$00	                lda #>state
.9202		95 01		sta $01,x	                sta 1,x
.9204		60		rts		z_state:        rts
.9205						xt_store:
.9205		20 17 d1	jsr $d117	                jsr underflow_2
.9208						w_store:
.9208		b5 02		lda $02,x	                lda 2,x         ; LSB
.920a		81 00		sta ($00,x)	                sta (0,x)
.920c		f6 00		inc $00,x	                inc 0,x
.920e		d0 02		bne $9212	                bne +
.9210		f6 01		inc $01,x	                inc 1,x
.9212						+
.9212		b5 03		lda $03,x	                lda 3,x         ; MSB
.9214		81 00		sta ($00,x)	                sta (0,x)
.9216		e8		inx		                inx             ; 2DROP
.9217		e8		inx		                inx
.9218		e8		inx		                inx
.9219		e8		inx		                inx
.921a		60		rts		z_store:        rts
.921b						xt_swap:
.921b		20 17 d1	jsr $d117	                jsr underflow_2
.921e						w_swap:
.921e		b5 00		lda $00,x	                lda 0,x         ; LSB
.9220		b4 02		ldy $02,x	                ldy 2,x
.9222		95 02		sta $02,x	                sta 2,x
.9224		94 00		sty $00,x	                sty 0,x
.9226		b5 01		lda $01,x	                lda 1,x         ; MSB
.9228		b4 03		ldy $03,x	                ldy 3,x
.922a		95 03		sta $03,x	                sta 3,x
.922c		94 01		sty $01,x	                sty 1,x
.922e		60		rts		z_swap:         rts
.922f						xt_tick:
.922f						w_tick:
.922f		20 24 8d	jsr $8d24	                jsr w_parse_name       ; ( -- addr u )
.9232		b5 00		lda $00,x	                lda 0,x
.9234		15 01		ora $01,x	                ora 1,x
.9236		d0 05		bne $923d	                bne +
.9238		a9 05		lda #$05	                lda #err_noname
.923a		4c 28 d1	jmp $d128	                jmp error
.923d						+
.923d		20 5d 9b	jsr $9b5d	                jsr w_find_name        ; ( addr u -- nt )
.9240		b5 00		lda $00,x	                lda 0,x
.9242		15 01		ora $01,x	                ora 1,x
.9244		d0 05		bne $924b	                bne +
.9246		a9 08		lda #$08	                lda #err_syntax
.9248		4c 28 d1	jmp $d128	                jmp error
.924b						+
.924b		20 b1 9c	jsr $9cb1	                jsr w_name_to_int      ; ( nt -- xt )
.924e		60		rts		z_tick:         rts
.924f						xt_to:
.924f						w_to:
.924f		20 2f 92	jsr $922f	                jsr w_tick             ; ( [n] xt )
.9252		b5 00		lda $00,x	                lda 0,x                 ; LSB
.9254		18		clc		                clc
.9255		69 03		adc #$03	                adc #3
.9257		85 25		sta $25		                sta tmp1
.9259		b5 01		lda $01,x	                lda 1,x                 ; MSB
.925b		69 00		adc #$00	                adc #0                  ; we just want the carry
.925d		85 26		sta $26		                sta tmp1+1
.925f		a5 1a		lda $1a		                lda state
.9261		05 1b		ora $1b		                ora state+1
.9263		f0 14		beq $9279	                beq _interpret
.9265		a5 25		lda $25		                lda tmp1            ; replace TOS with tmp1
.9267		95 00		sta $00,x	                sta 0,x
.9269		a5 26		lda $26		                lda tmp1+1
.926b		95 01		sta $01,x	                sta 1,x
.926d		20 d3 89	jsr $89d3	                jsr w_literal      ; generate the runtime for LITERAL tmp1
.9270		a0 92		ldy #$92	                ldy #>w_store      ; write the runtime for !
.9272		a9 08		lda #$08	                lda #<w_store
.9274		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.9277		80 11		bra $928a	                bra _done
.9279						_interpret:
.9279		20 17 d1	jsr $d117	                jsr underflow_2
.927c		e8		inx		                inx
.927d		e8		inx		                inx                     ; leaving just ( n )
.927e		b5 00		lda $00,x	                lda 0,x
.9280		92 25		sta ($25)	                sta (tmp1)              ; LSB
.9282		a0 01		ldy #$01	                ldy #1
.9284		b5 01		lda $01,x	                lda 1,x                 ; MSB
.9286		91 25		sta ($25),y	                sta (tmp1),y            ; fall through to common
.9288		e8		inx		                inx                     ; DROP
.9289		e8		inx		                inx
.928a						_done:
.928a		60		rts		z_to:           rts
.928b						xt_to_body:
.928b		20 12 d1	jsr $d112	                jsr underflow_1
.928e						w_to_body:
.928e		20 69 86	jsr $8669	                jsr w_dup              ; ( xt xt )
.9291		20 2b 9c	jsr $9c2b	                jsr w_int_to_name      ; ( xt nt )
.9294		f6 00		inc $00,x	                inc 0,x
.9296		d0 02		bne $929a	                bne +
.9298		f6 01		inc $01,x	                inc 1,x
.929a						+
.929a		a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.929c		29 10		and #$10	                and #HC
.929e		f0 0b		beq $92ab	                beq _no_cfa
.92a0		18		clc		                clc
.92a1		b5 02		lda $02,x	                lda 2,x         ; LSB
.92a3		69 03		adc #$03	                adc #3
.92a5		95 02		sta $02,x	                sta 2,x
.92a7		90 02		bcc $92ab	                bcc _no_cfa
.92a9		f6 03		inc $03,x	                inc 3,x         ; MSB
.92ab						_no_cfa:
.92ab		e8		inx		                inx             ; get rid of the nt
.92ac		e8		inx		                inx
.92ad		60		rts		z_to_body:      rts
.92ae						xt_to_in:
.92ae						w_to_in:
.92ae		ca		dex		                dex
.92af		ca		dex		                dex
.92b0		a9 10		lda #$10	                lda #<toin
.92b2		95 00		sta $00,x	                sta 0,x
.92b4		a9 00		lda #$00	                lda #>toin      ; paranoid, should be zero
.92b6		95 01		sta $01,x	                sta 1,x
.92b8		60		rts		z_to_in:        rts
.92b9						xt_to_number:
.92b9		20 21 d1	jsr $d121	                jsr underflow_4
.92bc						w_to_number:
.92bc		b5 06		lda $06,x	                lda 6,x         ; ud-lo LSB
.92be		85 2d		sta $2d		                sta scratch
.92c0		b5 07		lda $07,x	                lda 7,x         ; ud-lo MSB
.92c2		85 2e		sta $2e		                sta scratch+1
.92c4		b5 04		lda $04,x	                lda 4,x         ; ud-hi LSB
.92c6		85 2f		sta $2f		                sta scratch+2
.92c8		b5 05		lda $05,x	                lda 5,x         ; ud-hi MSB
.92ca		85 30		sta $30		                sta scratch+3
.92cc		ca		dex		                dex
.92cd		ca		dex		                dex
.92ce						_loop:
.92ce		a1 04		lda ($04,x)	                lda (4,x)
.92d0		95 00		sta $00,x	                sta 0,x                 ; ( ud-lo ud-hi addr u char )
.92d2		74 01		stz $01,x	                stz 1,x                 ; paranoid
.92d4		20 01 9b	jsr $9b01	                jsr w_digit_question   ; ( char -- n -1 | char 0 )
.92d7		b5 00		lda $00,x	                lda 0,x
.92d9		d0 04		bne $92df	                bne _digit_ok
.92db		e8		inx		                inx
.92dc		e8		inx		                inx
.92dd		80 67		bra $9346	                bra _done       ; ( ud-lo ud-hi addr u char )
.92df						_digit_ok:
.92df		b5 02		lda $02,x	                lda 2,x
.92e1		85 31		sta $31		                sta scratch+4
.92e3		b5 03		lda $03,x	                lda 3,x
.92e5		85 32		sta $32		                sta scratch+5
.92e7		a5 2f		lda $2f		                lda scratch+2
.92e9		95 02		sta $02,x	                sta 2,x         ; NOS
.92eb		a5 30		lda $30		                lda scratch+3
.92ed		95 03		sta $03,x	                sta 3,x
.92ef		a5 18		lda $18		                lda base
.92f1		95 00		sta $00,x	                sta 0,x         ; TOS
.92f3		74 01		stz $01,x	                stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
.92f5		20 7b 95	jsr $957b	                jsr w_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
.92f8		b5 02		lda $02,x	                lda 2,x         ; ud-hi-lo
.92fa		85 33		sta $33		                sta scratch+6
.92fc		b5 03		lda $03,x	                lda 3,x
.92fe		85 34		sta $34		                sta scratch+7
.9300		a5 2d		lda $2d		                lda scratch
.9302		95 02		sta $02,x	                sta 2,x
.9304		a5 2e		lda $2e		                lda scratch+1
.9306		95 03		sta $03,x	                sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
.9308		a5 18		lda $18		                lda base
.930a		95 00		sta $00,x	                sta 0,x
.930c		74 01		stz $01,x	                stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
.930e		20 7b 95	jsr $957b	                jsr w_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
.9311		b5 00		lda $00,x	                lda 0,x
.9313		85 2f		sta $2f		                sta scratch+2
.9315		b5 01		lda $01,x	                lda 1,x
.9317		85 30		sta $30		                sta scratch+3
.9319		b5 02		lda $02,x	                lda 2,x
.931b		85 2d		sta $2d		                sta scratch
.931d		b5 03		lda $03,x	                lda 3,x
.931f		85 2e		sta $2e		                sta scratch+1
.9321		18		clc		                clc
.9322		a5 2d		lda $2d		                lda scratch     ; ud-lo LSB
.9324		65 31		adc $31		                adc scratch+4   ; n LSB
.9326		85 2d		sta $2d		                sta scratch     ; this is the new ud-lo
.9328		a5 2e		lda $2e		                lda scratch+1   ; ud-lo MSB
.932a		65 32		adc $32		                adc scratch+5   ; n MSB
.932c		85 2e		sta $2e		                sta scratch+1
.932e		a5 2f		lda $2f		                lda scratch+2   ; LSB
.9330		65 33		adc $33		                adc scratch+6
.9332		85 2f		sta $2f		                sta scratch+2   ; this is the new ud-hi
.9334		a5 30		lda $30		                lda scratch+3   ; MSB
.9336		65 34		adc $34		                adc scratch+7
.9338		85 30		sta $30		                sta scratch+3
.933a		e8		inx		                inx
.933b		e8		inx		                inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
.933c		f6 04		inc $04,x	                inc 4,x
.933e		d0 02		bne $9342	                bne +
.9340		f6 05		inc $05,x	                inc 5,x
.9342						+
.9342		d6 02		dec $02,x	                dec 2,x
.9344		d0 88		bne $92ce	                bne _loop
.9346						_done:
.9346		e8		inx		                inx
.9347		e8		inx		                inx             ; ( ud-lo ud-hi addr u )
.9348		a5 2d		lda $2d		                lda scratch     ; new ud-lo
.934a		95 06		sta $06,x	                sta 6,x
.934c		a5 2e		lda $2e		                lda scratch+1
.934e		95 07		sta $07,x	                sta 7,x
.9350		a5 2f		lda $2f		                lda scratch+2
.9352		95 04		sta $04,x	                sta 4,x
.9354		a5 30		lda $30		                lda scratch+3
.9356		95 05		sta $05,x	                sta 5,x
.9358		60		rts		z_to_number:    rts
.9359						xt_to_r:
.9359						w_to_r:
.9359		68		pla		                pla                     ; LSB
.935a		7a		ply		                ply                     ; MSB
.935b		1a		inc a		                inc a
.935c		85 25		sta $25		                sta tmp1                ; LSB
.935e		d0 01		bne $9361	                bne +
.9360		c8		iny		                iny
.9361						+
.9361		84 26		sty $26		                sty tmp1+1              ; MSB
.9363		20 12 d1	jsr $d112	                jsr underflow_1
.9366		b5 01		lda $01,x	                lda 1,x         ; MSB
.9368		48		pha		                pha
.9369		b5 00		lda $00,x	                lda 0,x         ; LSB
.936b		48		pha		                pha
.936c		e8		inx		                inx
.936d		e8		inx		                inx
.936e		6c 25 00	jmp ($0025)	z_to_r:         jmp (tmp1)
.9371						xt_true:
.9371						w_true:
.9371		ca		dex		                dex
.9372		ca		dex		                dex
.9373		a9 ff		lda #$ff	                lda #$FF
.9375		95 00		sta $00,x	                sta 0,x
.9377		95 01		sta $01,x	                sta 1,x
.9379		60		rts		z_true:         rts
.937a						xt_tuck:
.937a		20 17 d1	jsr $d117	                jsr underflow_2
.937d						w_tuck:
.937d		ca		dex		                dex
.937e		ca		dex		                dex
.937f		b4 04		ldy $04,x	                ldy 4,x         ; LSB
.9381		b5 02		lda $02,x	                lda 2,x
.9383		95 04		sta $04,x	                sta 4,x
.9385		94 02		sty $02,x	                sty 2,x
.9387		95 00		sta $00,x	                sta 0,x
.9389		b4 05		ldy $05,x	                ldy 5,x         ; MSB
.938b		b5 03		lda $03,x	                lda 3,x
.938d		95 05		sta $05,x	                sta 5,x
.938f		94 03		sty $03,x	                sty 3,x         ; bba
.9391		95 01		sta $01,x	                sta 1,x         ; baa
.9393		60		rts		z_tuck:         rts
.9394						xt_two_drop:
.9394		20 17 d1	jsr $d117	                jsr underflow_2
.9397						w_two_drop:
.9397		e8		inx		                inx
.9398		e8		inx		                inx
.9399		e8		inx		                inx
.939a		e8		inx		                inx
.939b		60		rts		z_two_drop:     rts
.939c						xt_two_dup:
.939c		20 17 d1	jsr $d117	                jsr underflow_2
.939f						w_two_dup:
.939f		ca		dex		                dex
.93a0		ca		dex		                dex
.93a1		ca		dex		                dex
.93a2		ca		dex		                dex
.93a3		b5 04		lda $04,x	                lda 4,x         ; TOS
.93a5		95 00		sta $00,x	                sta 0,x
.93a7		b5 05		lda $05,x	                lda 5,x
.93a9		95 01		sta $01,x	                sta 1,x
.93ab		b5 06		lda $06,x	                lda 6,x         ; NOS
.93ad		95 02		sta $02,x	                sta 2,x
.93af		b5 07		lda $07,x	                lda 7,x
.93b1		95 03		sta $03,x	                sta 3,x
.93b3		60		rts		z_two_dup:      rts
.93b4						xt_two_fetch:
.93b4		20 12 d1	jsr $d112	                jsr underflow_1
.93b7						w_two_fetch:
.93b7		b5 00		lda $00,x	                lda 0,x
.93b9		85 25		sta $25		                sta tmp1
.93bb		b4 01		ldy $01,x	                ldy 1,x
.93bd		84 26		sty $26		                sty tmp1+1
.93bf		ca		dex		                dex             ; reuse one stack element
.93c0		ca		dex		                dex
.93c1		b2 25		lda ($25)	                lda (tmp1)      ; copy LSB
.93c3		95 00		sta $00,x	                sta 0,x
.93c5		a0 01		ldy #$01	                ldy #1          ; copy next
.93c7		b1 25		lda ($25),y	                lda (tmp1),y
.93c9		95 01		sta $01,x	                sta 1,x
.93cb		c8		iny		                iny             ; copy next
.93cc		b1 25		lda ($25),y	                lda (tmp1),y
.93ce		95 02		sta $02,x	                sta 2,x
.93d0		c8		iny		                iny             ; copy next
.93d1		b1 25		lda ($25),y	                lda (tmp1),y
.93d3		95 03		sta $03,x	                sta 3,x
.93d5		60		rts		z_two_fetch:    rts
.93d6						xt_two_over:
.93d6		20 21 d1	jsr $d121	                jsr underflow_4
.93d9						w_two_over:
.93d9		ca		dex		                dex
.93da		ca		dex		                dex
.93db		ca		dex		                dex
.93dc		ca		dex		                dex
.93dd		b5 08		lda $08,x	                lda 8,x
.93df		95 00		sta $00,x	                sta 0,x
.93e1		b5 09		lda $09,x	                lda 9,x
.93e3		95 01		sta $01,x	                sta 1,x
.93e5		b5 0a		lda $0a,x	                lda 10,x
.93e7		95 02		sta $02,x	                sta 2,x
.93e9		b5 0b		lda $0b,x	                lda 11,x
.93eb		95 03		sta $03,x	                sta 3,x
.93ed		60		rts		z_two_over:     rts
.93ee						xt_two_r_fetch:
.93ee						w_two_r_fetch:
.93ee		68		pla		                pla                     ; LSB
.93ef		7a		ply		                ply                     ; MSB
.93f0		1a		inc a		                inc a
.93f1		85 25		sta $25		                sta tmp1                ; LSB
.93f3		d0 01		bne $93f6	                bne +
.93f5		c8		iny		                iny
.93f6						+
.93f6		84 26		sty $26		                sty tmp1+1              ; MSB
.93f8		8a		txa		                txa             ; arrange for Y = SP; X -= 4
.93f9		ba		tsx		                tsx
.93fa		da		phx		                phx             ; 65c02 has no TXY, so do it the hard way
.93fb		7a		ply		                ply
.93fc		38		sec		                sec
.93fd		e9 04		sbc #$04	                sbc #4
.93ff		aa		tax		                tax
.9400		b9 01 01	lda $0101,y	                lda $101,y
.9403		95 00		sta $00,x	                sta 0,x
.9405		b9 02 01	lda $0102,y	                lda $102,y
.9408		95 01		sta $01,x	                sta 1,x
.940a		b9 03 01	lda $0103,y	                lda $103,y
.940d		95 02		sta $02,x	                sta 2,x
.940f		b9 04 01	lda $0104,y	                lda $104,y
.9412		95 03		sta $03,x	                sta 3,x
.9414		6c 25 00	jmp ($0025)	z_two_r_fetch:  jmp (tmp1)
.9417						xt_two_r_from:
.9417						w_two_r_from:
.9417		68		pla		                pla
.9418		7a		ply		                ply                     ; MSB
.9419		1a		inc a		                inc a
.941a		85 25		sta $25		                sta tmp1                ; LSB
.941c		d0 01		bne $941f	                bne +
.941e		c8		iny		                iny
.941f						+
.941f		84 26		sty $26		                sty tmp1+1              ; MSB
.9421		ca		dex		                dex
.9422		ca		dex		                dex
.9423		ca		dex		                dex
.9424		ca		dex		                dex
.9425		68		pla		                pla                     ; LSB
.9426		95 00		sta $00,x	                sta 0,x
.9428		68		pla		                pla                     ; MSB
.9429		95 01		sta $01,x	                sta 1,x
.942b		68		pla		                pla                     ; LSB
.942c		95 02		sta $02,x	                sta 2,x
.942e		68		pla		                pla                     ; MSB
.942f		95 03		sta $03,x	                sta 3,x
.9431		6c 25 00	jmp ($0025)	z_two_r_from:   jmp (tmp1)
.9434						xt_two_slash:
.9434		20 12 d1	jsr $d112	                jsr underflow_1
.9437						w_two_slash:
.9437		b5 01		lda $01,x	                lda 1,x
.9439		0a		asl a		                asl                     ; save the sign
.943a		76 01		ror $01,x	                ror 1,x
.943c		76 00		ror $00,x	                ror 0,x
.943e		60		rts		z_two_slash:    rts
.943f						xt_two_star:
.943f						xt_cells:
.943f		20 12 d1	jsr $d112	                jsr underflow_1
.9442						w_two_star:
.9442						w_cells:
.9442		16 00		asl $00,x	                asl 0,x
.9444		36 01		rol $01,x	                rol 1,x
.9446						z_cells:
.9446		60		rts		z_two_star:     rts
.9447						xt_two_store:
.9447		20 1c d1	jsr $d11c	                jsr underflow_3
.944a						w_two_store:
.944a		b5 00		lda $00,x	                lda 0,x
.944c		85 25		sta $25		                sta tmp1
.944e		b4 01		ldy $01,x	                ldy 1,x
.9450		84 26		sty $26		                sty tmp1+1
.9452		e8		inx		                inx
.9453		e8		inx		                inx
.9454		b5 00		lda $00,x	                lda 0,x         ; copy MSB
.9456		92 25		sta ($25)	                sta (tmp1)
.9458		b5 01		lda $01,x	                lda 1,x         ; copy next
.945a		a0 01		ldy #$01	                ldy #1
.945c		91 25		sta ($25),y	                sta (tmp1),y
.945e		b5 02		lda $02,x	                lda 2,x         ; copy next
.9460		c8		iny		                iny
.9461		91 25		sta ($25),y	                sta (tmp1),y
.9463		b5 03		lda $03,x	                lda 3,x         ; copy MSB
.9465		c8		iny		                iny
.9466		91 25		sta ($25),y	                sta (tmp1),y
.9468		e8		inx		                inx             ; 2DROP
.9469		e8		inx		                inx
.946a		e8		inx		                inx
.946b		e8		inx		                inx
.946c		60		rts		z_two_store:    rts
.946d						xt_two_swap:
.946d		20 21 d1	jsr $d121	                jsr underflow_4
.9470						w_two_swap:
.9470		b5 00		lda $00,x	                lda 0,x
.9472		b4 04		ldy $04,x	                ldy 4,x
.9474		95 04		sta $04,x	                sta 4,x
.9476		94 00		sty $00,x	                sty 0,x
.9478		b5 01		lda $01,x	                lda 1,x
.947a		b4 05		ldy $05,x	                ldy 5,x
.947c		95 05		sta $05,x	                sta 5,x
.947e		94 01		sty $01,x	                sty 1,x
.9480		b5 02		lda $02,x	                lda 2,x
.9482		b4 06		ldy $06,x	                ldy 6,x
.9484		95 06		sta $06,x	                sta 6,x
.9486		94 02		sty $02,x	                sty 2,x
.9488		b5 03		lda $03,x	                lda 3,x
.948a		b4 07		ldy $07,x	                ldy 7,x
.948c		95 07		sta $07,x	                sta 7,x
.948e		94 03		sty $03,x	                sty 3,x
.9490		60		rts		z_two_swap:     rts
.9491						xt_two_to_r:
.9491						w_two_to_r:
.9491		68		pla		                pla                     ; LSB
.9492		7a		ply		                ply                     ; MSB
.9493		1a		inc a		                inc a
.9494		85 25		sta $25		                sta tmp1                ; LSB
.9496		d0 01		bne $9499	                bne +
.9498		c8		iny		                iny
.9499						+
.9499		84 26		sty $26		                sty tmp1+1              ; MSB
.949b		20 17 d1	jsr $d117	                jsr underflow_2
.949e		b5 03		lda $03,x	                lda 3,x         ; MSB
.94a0		48		pha		                pha
.94a1		b5 02		lda $02,x	                lda 2,x         ; LSB
.94a3		48		pha		                pha
.94a4		b5 01		lda $01,x	                lda 1,x         ; MSB
.94a6		48		pha		                pha
.94a7		b5 00		lda $00,x	                lda 0,x         ; LSB
.94a9		48		pha		                pha
.94aa		e8		inx		                inx
.94ab		e8		inx		                inx
.94ac		e8		inx		                inx
.94ad		e8		inx		                inx
.94ae		6c 25 00	jmp ($0025)	z_two_to_r:     jmp (tmp1)
.94b1						xt_type:
.94b1		20 17 d1	jsr $d117	                jsr underflow_2
.94b4						w_type:
.94b4		b5 02		lda $02,x	                lda 2,x
.94b6		85 25		sta $25		                sta tmp1
.94b8		b5 03		lda $03,x	                lda 3,x
.94ba		85 26		sta $26		                sta tmp1+1
.94bc						_loop:
.94bc		b5 00		lda $00,x	                lda 0,x
.94be		15 01		ora $01,x	                ora 1,x
.94c0		f0 15		beq $94d7	                beq _done
.94c2		b2 25		lda ($25)	                lda (tmp1)
.94c4		20 93 86	jsr $8693	                jsr emit_a      ; avoids stack foolery
.94c7		e6 25		inc $25		                inc tmp1
.94c9		d0 02		bne $94cd	                bne +
.94cb		e6 26		inc $26		                inc tmp1+1
.94cd						+
.94cd		b5 00		lda $00,x	                lda 0,x
.94cf		d0 02		bne $94d3	                bne +
.94d1		d6 01		dec $01,x	                dec 1,x
.94d3						+
.94d3		d6 00		dec $00,x	                dec 0,x
.94d5		80 e5		bra $94bc	                bra _loop
.94d7						_done:
.94d7		e8		inx		                inx
.94d8		e8		inx		                inx
.94d9		e8		inx		                inx
.94da		e8		inx		                inx
.94db		60		rts		z_type:         rts
.94dc						xt_u_dot:
.94dc		20 12 d1	jsr $d112	                jsr underflow_1
.94df						w_u_dot:
.94df		20 7a d1	jsr $d17a	                jsr print_u
.94e2		a9 20		lda #$20	                lda #AscSP
.94e4		20 93 86	jsr $8693	                jsr emit_a
.94e7		60		rts		z_u_dot:        rts
.94e8						xt_u_dot_r:
.94e8		20 17 d1	jsr $d117	                jsr underflow_2
.94eb						w_u_dot_r:
.94eb		20 59 93	jsr $9359	                jsr w_to_r
.94ee		20 71 9e	jsr $9e71	                jsr w_zero
.94f1		20 ad 89	jsr $89ad	                jsr w_less_number_sign
.94f4		20 89 8c	jsr $8c89	                jsr w_number_sign_s
.94f7		20 67 8c	jsr $8c67	                jsr w_number_sign_greater
.94fa		20 b5 8e	jsr $8eb5	                jsr w_r_from
.94fd		20 db 8c	jsr $8cdb	                jsr w_over
.9500		20 bb 8b	jsr $8bbb	                jsr w_minus
.9503		20 be 91	jsr $91be	                jsr w_spaces
.9506		20 b4 94	jsr $94b4	                jsr w_type
.9509		60		rts		z_u_dot_r:      rts
.950a						xt_u_greater_than:
.950a		20 17 d1	jsr $d117	                jsr underflow_2
.950d						w_u_greater_than:
.950d		b5 00		lda $00,x	                lda 0,x
.950f		d5 02		cmp $02,x	                cmp 2,x
.9511		b5 01		lda $01,x	                lda 1,x
.9513		f5 03		sbc $03,x	                sbc 3,x
.9515		e8		inx		                inx
.9516		e8		inx		                inx
.9517		a9 00		lda #$00	                lda #0
.9519		69 ff		adc #$ff	                adc #$FF
.951b		95 00		sta $00,x	                sta 0,x         ; store flag
.951d		95 01		sta $01,x	                sta 1,x
.951f		60		rts		z_u_greater_than:    rts
.9520						xt_u_less_than:
.9520		20 17 d1	jsr $d117	                jsr underflow_2
.9523						w_u_less_than:
.9523		b5 02		lda $02,x	                lda 2,x
.9525		d5 00		cmp $00,x	                cmp 0,x
.9527		b5 03		lda $03,x	                lda 3,x
.9529		f5 01		sbc $01,x	                sbc 1,x
.952b		e8		inx		                inx
.952c		e8		inx		                inx
.952d		a9 00		lda #$00	                lda #0
.952f		69 ff		adc #$ff	                adc #$FF
.9531		95 00		sta $00,x	                sta 0,x         ; store flag
.9533		95 01		sta $01,x	                sta 1,x
.9535		60		rts		z_u_less_than:    rts
.9536						xt_um_slash_mod:
.9536		20 1c d1	jsr $d11c	                jsr underflow_3
.9539						w_um_slash_mod:
.9539		b5 00		lda $00,x	                lda 0,x
.953b		15 01		ora $01,x	                ora 1,x
.953d		d0 05		bne $9544	                bne _not_zero
.953f		a9 04		lda #$04	                lda #err_divzero
.9541		4c 28 d1	jmp $d128	                jmp error
.9544						_not_zero:
.9544		a9 11		lda #$11	                lda #17
.9546		85 23		sta $23		                sta tmptos
.9548						_loop:
.9548		36 04		rol $04,x	                rol 4,x
.954a		36 05		rol $05,x	                rol 5,x
.954c		c6 23		dec $23		                dec tmptos
.954e		f0 22		beq $9572	                beq _done
.9550		36 02		rol $02,x	                rol 2,x
.9552		36 03		rol $03,x	                rol 3,x
.9554		64 25		stz $25		                stz tmp1        ; store the bit we got from hi cell (MSB)
.9556		26 25		rol $25		                rol tmp1
.9558		38		sec		                sec
.9559		b5 02		lda $02,x	                lda 2,x
.955b		f5 00		sbc $00,x	                sbc 0,x
.955d		85 26		sta $26		                sta tmp1+1
.955f		b5 03		lda $03,x	                lda 3,x
.9561		f5 01		sbc $01,x	                sbc 1,x
.9563		a8		tay		                tay
.9564		a5 25		lda $25		                lda tmp1
.9566		e9 00		sbc #$00	                sbc #0
.9568		90 de		bcc $9548	                bcc _loop
.956a		a5 26		lda $26		                lda tmp1+1
.956c		95 02		sta $02,x	                sta 2,x
.956e		94 03		sty $03,x	                sty 3,x         ; used as temp storage
.9570		80 d6		bra $9548	                bra _loop
.9572						_done:
.9572		e8		inx		                inx
.9573		e8		inx		                inx
.9574		20 1e 92	jsr $921e	                jsr w_swap
.9577		60		rts		z_um_slash_mod: rts
.9578						xt_um_star:
.9578		20 17 d1	jsr $d117	                jsr underflow_2
.957b						w_um_star:
.957b		18		clc		                clc
.957c		b5 00		lda $00,x	                lda 0,x         ; copy TOS to tmp2
.957e		e9 00		sbc #$00	                sbc #0
.9580		85 27		sta $27		                sta tmp2
.9582		b5 01		lda $01,x	                lda 1,x
.9584		e9 00		sbc #$00	                sbc #0
.9586		90 31		bcc $95b9	                bcc _zero       ; is TOS zero?
.9588		85 28		sta $28		                sta tmp2+1
.958a		a9 00		lda #$00	                lda #0
.958c		85 25		sta $25		                sta tmp1
.958e		86 29		stx $29		                stx tmp3        ; tested for exit from outer loop
.9590		ca		dex		                dex
.9591		ca		dex		                dex
.9592						_outer_loop:
.9592		a0 08		ldy #$08	                ldy #8          ; counter inner loop
.9594		56 04		lsr $04,x	                lsr 4,x         ; think "2,x" then later "3,x"
.9596						_inner_loop:
.9596		90 0c		bcc $95a4	                bcc _no_add
.9598		85 26		sta $26		                sta tmp1+1      ; save time, don't CLC
.959a		a5 25		lda $25		                lda tmp1
.959c		65 27		adc $27		                adc tmp2
.959e		85 25		sta $25		                sta tmp1
.95a0		a5 26		lda $26		                lda tmp1+1
.95a2		65 28		adc $28		                adc tmp2+1
.95a4						_no_add:
.95a4		6a		ror a		                ror
.95a5		66 25		ror $25		                ror tmp1
.95a7		76 04		ror $04,x	                ror 4,x         ; think "2,x" then later "3,x"
.95a9		88		dey		                dey
.95aa		d0 ea		bne $9596	                bne _inner_loop ; go back for one more shift?
.95ac		e8		inx		                inx
.95ad		e4 29		cpx $29		                cpx tmp3
.95af		d0 e1		bne $9592	                bne _outer_loop ; go back for eight more shifts?
.95b1		95 01		sta $01,x	                sta 1,x
.95b3		a5 25		lda $25		                lda tmp1
.95b5		95 00		sta $00,x	                sta 0,x
.95b7		80 04		bra $95bd	                bra _done
.95b9						_zero:
.95b9		74 02		stz $02,x	                stz 2,x
.95bb		74 03		stz $03,x	                stz 3,x
.95bd						_done:
.95bd		60		rts		z_um_star:      rts
.95be						xt_unloop:
.95be						w_unloop:
.95be		a4 1f		ldy $1f		                ldy loopctrl
.95c0		88		dey		                dey
.95c1		88		dey		                dey
.95c2		88		dey		                dey
.95c3		88		dey		                dey
.95c4		84 1f		sty $1f		                sty loopctrl
.95c6		30 05		bmi $95cd	                bmi z_unloop            ; no active loops?
.95c8		b9 00 01	lda $0100,y	                lda loopindex,y         ; else re-cache the LSB of loopindex
.95cb		85 20		sta $20		                sta loopidx0
.95cd		60		rts		z_unloop:       rts
.95ce						xt_until:
.95ce		20 12 d1	jsr $d112	                jsr underflow_1
.95d1						w_until:
.95d1		20 ec 97	jsr $97ec	                jsr cmpl_0branch_tos
.95d4		60		rts		z_until:        rts
.95d5						xt_unused:
.95d5						w_unused:
.95d5		ca		dex		                dex
.95d6		ca		dex		                dex
.95d7		a9 00		lda #$00	                lda #<cp_end
.95d9		38		sec		                sec
.95da		e5 00		sbc $00		                sbc cp
.95dc		95 00		sta $00,x	                sta 0,x
.95de		a9 7c		lda #$7c	                lda #>cp_end
.95e0		e5 01		sbc $01		                sbc cp+1
.95e2		95 01		sta $01,x	                sta 1,x
.95e4		60		rts		z_unused:       rts
.95e5						xt_variable:
.95e5						w_variable:
.95e5		20 f5 83	jsr $83f5	                jsr w_create
.95e8		a9 00		lda #$00	                lda #0
.95ea		20 bc 97	jsr $97bc	                jsr cmpl_a
.95ed		20 bc 97	jsr $97bc	                jsr cmpl_a
.95f0		60		rts		z_variable:     rts
.95f1						xt_while:
.95f1		20 12 d1	jsr $d112	                jsr underflow_1
.95f4						w_while:
.95f4		20 d7 97	jsr $97d7	                jsr cmpl_0branch_later          ; branch to location we'll determine later
.95f7		20 1e 92	jsr $921e	                jsr w_swap
.95fa		60		rts		z_while:        rts
.95fb						xt_within:
.95fb		20 1c d1	jsr $d11c	                jsr underflow_3
.95fe						w_within:
.95fe		20 db 8c	jsr $8cdb	                jsr w_over
.9601		20 bb 8b	jsr $8bbb	                jsr w_minus
.9604		20 59 93	jsr $9359	                jsr w_to_r
.9607		20 bb 8b	jsr $8bbb	                jsr w_minus
.960a		20 b5 8e	jsr $8eb5	                jsr w_r_from
.960d		20 23 95	jsr $9523	                jsr w_u_less_than
.9610		60		rts		z_within:       rts
.9611						xt_word:
.9611		20 12 d1	jsr $d112	                jsr underflow_1
.9614						w_word:
.9614		a4 10		ldy $10		                ldy toin                ; >IN
.9616						_loop:
.9616		c4 0e		cpy $0e		                cpy ciblen              ; quit if end of input
.9618		f0 09		beq $9623	                beq _found_char
.961a		b1 0c		lda ($0c),y	                lda (cib),y
.961c		d5 00		cmp $00,x	                cmp 0,x                 ; ASCII of delimiter
.961e		d0 03		bne $9623	                bne _found_char
.9620		c8		iny		                iny
.9621		80 f3		bra $9616	                bra _loop
.9623						_found_char:
.9623		84 10		sty $10		                sty toin
.9625		20 82 8d	jsr $8d82	                jsr w_parse            ; Returns ( addr u )
.9628		b5 00		lda $00,x	                lda 0,x
.962a		92 00		sta ($00)	                sta (cp)                ; Save length of string
.962c		48		pha		                pha                     ; Keep copy of length for later
.962d		20 69 86	jsr $8669	                jsr w_dup              ; ( addr u u )
.9630		a5 00		lda $00		                lda cp
.9632		18		clc		                clc
.9633		69 01		adc #$01	                adc #1
.9635		95 02		sta $02,x	                sta 2,x                 ; LSB of CP
.9637		a5 01		lda $01		                lda cp+1
.9639		69 00		adc #$00	                adc #0
.963b		95 03		sta $03,x	                sta 3,x                 ; ( addr cp+1 u )
.963d		20 d7 8b	jsr $8bd7	                jsr w_move
.9640		ca		dex		                dex
.9641		ca		dex		                dex
.9642		a5 00		lda $00		                lda cp
.9644		95 00		sta $00,x	                sta 0,x
.9646		a5 01		lda $01		                lda cp+1
.9648		95 01		sta $01,x	                sta 1,x
.964a		68		pla		                pla                     ; length of string
.964b		18		clc		                clc
.964c		65 00		adc $00		                adc cp
.964e		85 00		sta $00		                sta cp
.9650		90 02		bcc $9654	                bcc z_word
.9652		e6 01		inc $01		                inc cp+1
.9654		60		rts		z_word:         rts
.9655						xt_xor:
.9655		20 17 d1	jsr $d117	                jsr underflow_2
.9658						w_xor:
.9658		b5 00		lda $00,x	                lda 0,x
.965a		55 02		eor $02,x	                eor 2,x
.965c		95 02		sta $02,x	                sta 2,x
.965e		b5 01		lda $01,x	                lda 1,x
.9660		55 03		eor $03,x	                eor 3,x
.9662		95 03		sta $03,x	                sta 3,x
.9664		e8		inx		                inx
.9665		e8		inx		                inx
.9666		60		rts		z_xor:          rts
.9667						xt_zero_equal:
.9667		20 12 d1	jsr $d112	                jsr underflow_1
.966a						w_zero_equal:
.966a		b5 00		lda $00,x	                lda 0,x
.966c		15 01		ora $01,x	                ora 1,x
.966e		f0 02		beq $9672	                beq _zero       ; if 0, A is inverse of the TRUE (-1) we want
.9670		a9 ff		lda #$ff	                lda #$FF        ; else set A inverse of the FALSE (0) we want
.9672						_zero:
.9672		49 ff		eor #$ff	                eor #$FF        ; now just invert:
.9674		95 00		sta $00,x	                sta 0,x
.9676		95 01		sta $01,x	                sta 1,x
.9678		60		rts		z_zero_equal:   rts
.9679						xt_zero_greater:
.9679		20 12 d1	jsr $d112	                jsr underflow_1
.967c						w_zero_greater:
.967c		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS is negative)
.967e		b5 01		lda $01,x	                lda 1,x         ; MSB
.9680		30 05		bmi $9687	                bmi _done       ; TOS is negative, keep FLASE
.9682		15 00		ora $00,x	                ora 0,x
.9684		f0 01		beq $9687	                beq _done       ; TOS is zero, keep FALSE
.9686		88		dey		                dey             ; TOS is postive, make true
.9687						_done:
.9687		98		tya		                tya
.9688		95 00		sta $00,x	                sta 0,x
.968a		95 01		sta $01,x	                sta 1,x
.968c		60		rts		z_zero_greater: rts
.968d						xt_zero_less:
.968d		20 12 d1	jsr $d112	                jsr underflow_1
.9690						w_zero_less:
.9690		a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS positive)
.9692		b5 01		lda $01,x	                lda 1,x         ; MSB
.9694		10 01		bpl $9697	                bpl _done       ; TOS is positive, so keep FALSE
.9696		88		dey		                dey             ; TOS is negative, make TRUE
.9697						_done:
.9697		98		tya		                tya
.9698		95 00		sta $00,x	                sta 0,x
.969a		95 01		sta $01,x	                sta 1,x
.969c		60		rts		z_zero_less:    rts
.969d						xt_zero_unequal:
.969d		20 12 d1	jsr $d112	                jsr underflow_1
.96a0						w_zero_unequal:
.96a0		b5 00		lda $00,x	                lda 0,x
.96a2		15 01		ora $01,x	                ora 1,x
.96a4		f0 02		beq $96a8	                beq _zero
.96a6		a9 ff		lda #$ff	                lda #$FF
.96a8						_zero:
.96a8		95 00		sta $00,x	                sta 0,x
.96aa		95 01		sta $01,x	                sta 1,x
.96ac		60		rts		z_zero_unequal: rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/compile.asm

.96ad						compile_nt_comma:
.96ad		20 69 86	jsr $8669	        jsr w_dup                       ; ( nt nt )
.96b0		20 b1 9c	jsr $9cb1	        jsr w_name_to_int               ; ( nt xt )
.96b3		20 69 86	jsr $8669	        jsr w_dup                       ; ( nt xt xt )
.96b6		20 5c 8f	jsr $8f5c	        jsr w_rot                       ; ( xt xt nt )
.96b9		80 12		bra $96cd	        bra compile_comma_common
.96bb						xt_compile_comma:
.96bb		20 12 d1	jsr $d112	                jsr underflow_1
.96be						w_compile_comma:
.96be		20 69 86	jsr $8669	                jsr w_dup               ; keep an unadjusted copy of xt
.96c1		20 69 86	jsr $8669	                jsr w_dup               ; plus one to convert to nt
.96c4		20 2b 9c	jsr $9c2b	                jsr w_int_to_name
.96c7		b5 00		lda $00,x	                lda 0,x
.96c9		15 01		ora $01,x	                ora 1,x
.96cb		f0 73		beq $9740	                beq cmpl_as_call        ; No nt so unknown size; must compile as a JSR
.96cd						compile_comma_common:
.96cd		20 69 86	jsr $8669	                jsr w_dup
.96d0		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; status is at nt+1
.96d3		a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.96d5		e8		inx		                inx                     ; drop pointer
.96d6		e8		inx		                inx
.96d7		85 29		sta $29		                sta tmp3                ; keep copy of status byte
.96d9		29 0c		and #$0c	                and #AN+NN              ; check if never native (NN)
.96db		c9 08		cmp #$08	                cmp #NN                 ; NN=1, AN=0?  i.e. not ST=AN+AN
.96dd		f0 61		beq $9740	                beq cmpl_as_call
.96df		20 53 9e	jsr $9e53	                jsr w_wordsize
.96e2		a5 29		lda $29		                lda tmp3
.96e4		29 0c		and #$0c	                and #ST                 ; Check the Stack Thrash flag (ST=NN+AN)
.96e6		c9 0c		cmp #$0c	                cmp #ST
.96e8		d0 16		bne $9700	                bne _check_uf
=10						_strip_sz = 10  ; skip the standard 10 byte header which saves return address + 1 to tmp1
.96ea		18		clc		                clc
.96eb		b5 02		lda $02,x	                lda 2,x
.96ed		69 0a		adc #$0a	                adc #_strip_sz
.96ef		95 02		sta $02,x	                sta 2,x
.96f1		90 02		bcc $96f5	                bcc +
.96f3		f6 03		inc $03,x	                inc 3,x                 ; we just care about the carry
.96f5						+
.96f5		38		sec		                sec
.96f6		b5 00		lda $00,x	                lda 0,x
.96f8		e9 0a		sbc #$0a	                sbc #_strip_sz
.96fa		95 00		sta $00,x	                sta 0,x
.96fc		b0 02		bcs $9700	                bcs +
.96fe		d6 01		dec $01,x	                dec 1,x                 ; we just care about the borrow
.9700						+
.9700						_check_uf:
.9700		a0 02		ldy #$02	                ldy #uf_strip_offset
.9702		b1 08		lda ($08),y	                lda (up),y
.9704		c8		iny		                iny
.9705		11 08		ora ($08),y	                ora (up),y
.9707		f0 1e		beq $9727	                beq _check_limit
.9709		20 db 8c	jsr $8cdb	                jsr w_over
.970c		20 6f 97	jsr $976f	                jsr has_uf_check
.970f		90 16		bcc $9727	                bcc _check_limit        ; not an underflow check
.9711		18		clc		                clc
.9712		b5 02		lda $02,x	                lda 2,x
.9714		69 03		adc #$03	                adc #3
.9716		95 02		sta $02,x	                sta 2,x
.9718		90 02		bcc $971c	                bcc +
.971a		f6 03		inc $03,x	                inc 3,x                  ; we just care about the carry
.971c						+
.971c		38		sec		                sec
.971d		b5 00		lda $00,x	                lda 0,x
.971f		e9 03		sbc #$03	                sbc #3
.9721		95 00		sta $00,x	                sta 0,x
.9723		b0 02		bcs $9727	                bcs +
.9725		d6 01		dec $01,x	                dec 1,x                  ; we just care about the borrow
.9727						+
.9727						_check_limit:
.9727		a5 29		lda $29		                lda tmp3
.9729		29 0c		and #$0c	                and #AN+NN              ; check Always Native (AN) bit
.972b		c9 04		cmp #$04	                cmp #AN                 ; AN=1, NN=0?  (i.e. not ST=AN+NN)
.972d		f0 2c		beq $975b	                beq cmpl_inline         ; always natively compile
.972f						cmpl_by_limit:
.972f		a0 01		ldy #$01	                ldy #nc_limit_offset+1
.9731		b5 01		lda $01,x	                lda 1,x                 ; MSB of word size
.9733		d1 08		cmp ($08),y	                cmp (up),y              ; user-defined limit MSB
.9735		90 24		bcc $975b	                bcc cmpl_inline         ; borrow (C=0) means size < limit
.9737		d0 07		bne $9740	                bne cmpl_as_call        ; else non-zero means size > limit
.9739		88		dey		                dey
.973a		b1 08		lda ($08),y	                lda (up),y              ; user-defined limit LSB
.973c		d5 00		cmp $00,x	                cmp 0,x
.973e		b0 1b		bcs $975b	                bcs cmpl_inline         ; not bigger, so good to go
.9740						cmpl_as_call:
.9740		a5 29		lda $29		                lda tmp3
.9742		29 0c		and #$0c	                and #ST
.9744		d0 08		bne $974e	                bne +
.9746		20 63 86	jsr $8663	                jsr w_drop              ; no stack juggling, use middle (xt or xt')
.9749		20 0a 8c	jsr $8c0a	                jsr w_nip
.974c		80 03		bra $9751	                bra _cmpl
.974e						+
.974e		20 97 93	jsr $9397	                jsr w_two_drop          ; stack juggling, must use first (xt)
.9751						_cmpl:
.9751		a9 20		lda #$20	                lda #OpJSR
.9753		20 bc 97	jsr $97bc	                jsr cmpl_a
.9756		20 b1 83	jsr $83b1	                jsr w_comma
.9759		38		sec		                sec
.975a		60		rts		                rts
.975b						cmpl_inline:
.975b		20 e7 88	jsr $88e7	                jsr w_here
.975e		20 1e 92	jsr $921e	                jsr w_swap
.9761		20 69 86	jsr $8669	                jsr w_dup
.9764		20 2d 82	jsr $822d	                jsr w_allot            ; allocate space for the word
.9767		20 d7 8b	jsr $8bd7	                jsr w_move
.976a		20 63 86	jsr $8663	                jsr w_drop             ; drop original xt
.976d		18		clc		                clc
.976e						z_compile_comma:
.976e		60		rts		                rts
.976f						has_uf_check:
.976f		a1 00		lda ($00,x)	                lda (0,x)               ; fetch byte @ addr
.9771		c9 20		cmp #$20	                cmp #OpJSR
.9773		d0 18		bne $978d	                bne _not_uf             ; not a JSR
.9775		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.9778		20 e9 87	jsr $87e9	                jsr w_fetch             ; get JSR address to TOS
.977b		b5 00		lda $00,x	                lda 0,x                 ; LSB of jsr address
.977d		38		sec		                sec
.977e		e9 12		sbc #$12	                sbc #<underflow_1
.9780		a8		tay		                tay                     ; stash LSB of result and finish subtraction
.9781		b5 01		lda $01,x	                lda 1,x                 ; MSB of jsr address
.9783		e9 d1		sbc #$d1	                sbc #>underflow_1
.9785		d0 06		bne $978d	                bne _not_uf             ; MSB of result must be zero
.9787		c0 10		cpy #$10	                cpy #(underflow_4-underflow_1+1)
.9789		b0 02		bcs $978d	                bcs _not_uf             ; LSB is too big
.978b		38		sec		                sec                     ; C=1 means it is an UF check
>978c		24				                .byte OpBITzp           ; mask the clc, with no effect on carry
.978d		18		clc		_not_uf:        clc                     ; C=0 means it isn't a UF check
.978e		e8		inx		                inx                     ; clean up stack
.978f		e8		inx		                inx
.9790		60		rts		                rts
.9791						cmpl_jump_later:
.9791		ca		dex		                dex
.9792		ca		dex		                dex
.9793		a5 01		lda $01		                lda cp+1
.9795		95 01		sta $01,x	                sta 1,x
.9797		a5 00		lda $00		                lda cp
.9799		1a		inc a		                inc a
.979a		95 00		sta $00,x	                sta 0,x
.979c		d0 0a		bne $97a8	                bne cmpl_jump
.979e		f6 01		inc $01,x	                inc 1,x
.97a0		80 06		bra $97a8	                bra cmpl_jump
.97a2						cmpl_jump_tos:
.97a2		b5 00		lda $00,x	                lda 0,x         ; set up for cmpl_jump Y/A
.97a4		b4 01		ldy $01,x	                ldy 1,x
.97a6		e8		inx		                inx
.97a7		e8		inx		                inx
.97a8						cmpl_jump:
.97a8		48		pha		                pha             ; save LSB of address
.97a9		a9 10		lda #$10	                lda #%00010000  ; unset bit 4 to flag as never-native
.97ab		14 1c		trb $1c		                trb status
.97ad		a9 4c		lda #$4c	                lda #OpJMP      ; load opcode for JMP
.97af		80 03		bra $97b4	                bra +
.97b1						cmpl_subroutine:
.97b1		48		pha		                pha             ; save LSB of address
.97b2		a9 20		lda #$20	                lda #OpJSR      ; load opcode for JSR and fall through
.97b4						+
.97b4		20 bc 97	jsr $97bc	                jsr cmpl_a      ; compile opcode
.97b7		68		pla		                pla             ; retrieve address LSB; fall thru to cmpl_word
.97b8						cmpl_word:
.97b8		20 bc 97	jsr $97bc	                jsr cmpl_a      ; compile LSB of address
.97bb		98		tya		                tya             ; fall thru for MSB
.97bc						cmpl_a:
.97bc		92 00		sta ($00)	                sta (cp)
.97be		e6 00		inc $00		                inc cp
.97c0		d0 02		bne $97c4	                bne _done
.97c2		e6 01		inc $01		                inc cp+1
.97c4						_done:
.97c4		60		rts		                rts
.97c5						check_nc_limit:
.97c5		48		pha		                pha
.97c6		38		sec		                sec
.97c7		a0 01		ldy #$01	                ldy #nc_limit_offset+1
.97c9		b1 08		lda ($08),y	                lda (up),y              ; if MSB non zero we're good, leave with C=0
.97cb		f0 01		beq $97ce	                beq +
.97cd		18		clc		                clc
.97ce						+
.97ce		68		pla		                pla
.97cf		90 05		bcc $97d6	                bcc _done
.97d1		3a		dec a		                dea                     ; simplify test to A-1 < nc-limit
.97d2		88		dey		                dey
.97d3		d1 08		cmp ($08),y	                cmp (up),y              ; A-1 < LSB leaves C=0, else C=1
.97d5		1a		inc a		                ina                     ; restore A, preserves carry
.97d6						_done:
.97d6		60		rts		                rts
.97d7						cmpl_0branch_later:
.97d7		20 71 9e	jsr $9e71	                jsr w_zero             ; dummy placeholder, which forces long jmp in native version
.97da		20 ec 97	jsr $97ec	                jsr cmpl_0branch_tos    ; generate native or subroutine branch code
.97dd		20 e7 88	jsr $88e7	                jsr w_here             ; either way the target address is two bytes before here
.97e0		38		sec		                sec
.97e1		b5 00		lda $00,x	                lda 0,x
.97e3		e9 02		sbc #$02	                sbc #2
.97e5		95 00		sta $00,x	                sta 0,x
.97e7		b0 02		bcs $97eb	                bcs +
.97e9		d6 01		dec $01,x	                dec 1,x
.97eb						+
.97eb		60		rts		                rts
.97ec						cmpl_0branch_tos:
.97ec		a9 0b		lda #$0b	                lda #ztest_runtime_size+5       ; typical size of inline form
.97ee		20 c5 97	jsr $97c5	                jsr check_nc_limit              ; returns C=0 if we should native compile
.97f1		90 0a		bcc $97fd	                bcc _inline
.97f3		a0 98		ldy #$98	                ldy #>zero_branch_runtime
.97f5		a9 4e		lda #$4e	                lda #<zero_branch_runtime
.97f7		20 b1 97	jsr $97b1	                jsr cmpl_subroutine             ; call the 0branch runtime
.97fa		4c b1 83	jmp $83b1	                jmp w_comma                    ; add the payload and return
.97fd						_inline:
.97fd		a0 00		ldy #$00	                ldy #0
.97ff						-
.97ff		b9 4e 98	lda $984e,y	                lda ztest_runtime,y
.9802		20 bc 97	jsr $97bc	                jsr cmpl_a
.9805		c8		iny		                iny
.9806		c0 06		cpy #$06	                cpy #ztest_runtime_size
.9808		d0 f5		bne $97ff	                bne -
.980a		b5 00		lda $00,x	                lda 0,x
.980c		15 01		ora $01,x	                ora 1,x
.980e		f0 31		beq $9841	                beq _long               ; always use the long form if target is 0
.9810		20 69 86	jsr $8669	                jsr w_dup
.9813		20 e7 88	jsr $88e7	                jsr w_here
.9816		18		clc		                clc
.9817		a9 02		lda #$02	                lda #2
.9819		75 00		adc $00,x	                adc 0,x
.981b		95 00		sta $00,x	                sta 0,x
.981d		90 02		bcc $9821	                bcc +
.981f		f6 01		inc $01,x	                inc 1,x
.9821						+
.9821		20 bb 8b	jsr $8bbb	                jsr w_minus
.9824		e8		inx		                inx             ; pre-drop offset and use wraparound indexing to preserve flags
.9825		e8		inx		                inx
.9826		b5 ff		lda $ff,x	                lda $ff,x
.9828		a8		tay		                tay             ; Y=MSB of offset
.9829		b5 fe		lda $fe,x	                lda $fe,x       ; A=LSB, setting N flag to bit 7
.982b		30 04		bmi $9831	                bmi _minus
.982d		c0 00		cpy #$00	                cpy #0          ; if LSB is positive we need MSB = 0
.982f		80 02		bra $9833	                bra +
.9831		c0 ff		cpy #$ff	_minus:         cpy #$ff        ; if LSB is negative we need MSB = ff
.9833		d0 0c		bne $9841	+               bne _long
.9835		a9 f0		lda #$f0	                lda #OpBEQ
.9837		20 bc 97	jsr $97bc	                jsr cmpl_a
.983a		b5 fe		lda $fe,x	                lda $fe,x
.983c		e8		inx		                inx             ; drop the original address we used to calc offset
.983d		e8		inx		                inx
.983e		4c bc 97	jmp $97bc	                jmp cmpl_a
.9841						_long:
.9841		a9 d0		lda #$d0	                lda #OpBNE
.9843		20 bc 97	jsr $97bc	                jsr cmpl_a
.9846		a9 03		lda #$03	                lda #3
.9848		20 bc 97	jsr $97bc	                jsr cmpl_a
.984b		4c a2 97	jmp $97a2	                jmp cmpl_jump_tos
.984e						zero_branch_runtime:
.984e						ztest_runtime:
.984e		e8		inx		                inx
.984f		e8		inx		                inx
.9850		b5 fe		lda $fe,x	                lda $FE,x           ; wraparound so inx doesn't wreck Z status
.9852		15 ff		ora $ff,x	                ora $FF,x
=6						ztest_runtime_size = * - ztest_runtime
.9854						zbranch_runtime:
.9854		7a		ply		                ply
.9855		84 25		sty $25		                sty tmp1
.9857		7a		ply		                ply
.9858		84 26		sty $26		                sty tmp1+1
.985a		a8		tay		                tay             ; test if A = 0 which tells us whether to branch
.985b		f0 0d		beq $986a	                beq _branch
.985d		18		clc		                clc
.985e		a5 25		lda $25		                lda tmp1        ; LSB
.9860		69 03		adc #$03	                adc #3          ; skip two bytes plus the extra for jsr/rts behavior
.9862		85 25		sta $25		                sta tmp1
.9864		90 11		bcc $9877	                bcc _jmp
.9866		e6 26		inc $26		                inc tmp1+1
.9868		80 0d		bra $9877	                bra _jmp
.986a						_branch:
.986a		a0 01		ldy #$01	                ldy #1
.986c		b1 25		lda ($25),y	                lda (tmp1),y
.986e		48		pha		                pha                     ; stash the LSB until we've read the MSB too
.986f		c8		iny		                iny
.9870		b1 25		lda ($25),y	                lda (tmp1),y
.9872		85 26		sta $26		                sta tmp1+1              ; update tmp1 with our branch target
.9874		68		pla		                pla
.9875		85 25		sta $25		                sta tmp1
.9877						_jmp:
.9877		6c 25 00	jmp ($0025)	                jmp (tmp1)

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/tools.asm

.987a						xt_bye:
.987a						w_bye:
.987a		4c 21 f0	jmp $f021	                jmp kernel_bye
.987d						z_bye:
.987d						xt_dot_s:
.987d						w_dot_s:
.987d		20 18 85	jsr $8518	                jsr w_depth    ; ( -- u )
.9880		a9 3c		lda #$3c	                lda #'<'
.9882		20 93 86	jsr $8693	                jsr emit_a
.9885		b5 00		lda $00,x	                lda 0,x
.9887		48		pha		                pha
.9888		ca		dex		                dex             ; DUP
.9889		ca		dex		                dex
.988a		95 00		sta $00,x	                sta 0,x
.988c		74 01		stz $01,x	                stz 1,x
.988e		20 7a d1	jsr $d17a	                jsr print_u
.9891		a9 3e		lda #$3e	                lda #'>'
.9893		20 93 86	jsr $8693	                jsr emit_a
.9896		a9 20		lda #$20	                lda #AscSP      ; ASCII for SPACE
.9898		20 93 86	jsr $8693	                jsr emit_a
.989b		e8		inx		                inx
.989c		e8		inx		                inx
.989d		e0 78		cpx #$78	                cpx #dsp0
.989f		f0 1e		beq $98bf	                beq _done
.98a1		7a		ply		                ply
.98a2		a9 77		lda #$77	                lda #dsp0-1     ; go up one to avoid garbage
.98a4		85 29		sta $29		                sta tmp3
.98a6		64 2a		stz $2a		                stz tmp3+1      ; must be zero page on the 65c02
.98a8						_loop:
.98a8		ca		dex		                dex
.98a9		ca		dex		                dex
.98aa		b2 29		lda ($29)	                lda (tmp3)
.98ac		95 01		sta $01,x	                sta 1,x
.98ae		c6 29		dec $29		                dec tmp3
.98b0		b2 29		lda ($29)	                lda (tmp3)
.98b2		95 00		sta $00,x	                sta 0,x
.98b4		c6 29		dec $29		                dec tmp3
.98b6		5a		phy		                phy
.98b7		20 f9 85	jsr $85f9	                jsr w_dot
.98ba		7a		ply		                ply
.98bb		88		dey		                dey
.98bc		d0 ea		bne $98a8	                bne _loop
.98be		48		pha		                pha             ; dummy to balance stack
.98bf						_done:
.98bf		68		pla		                pla
.98c0		60		rts		z_dot_s:        rts
.98c1						xt_dump:
.98c1		20 17 d1	jsr $d117	                jsr underflow_2
.98c4						w_dump:
.98c4						_row:
.98c4		b5 03		lda $03,x	                lda 3,x
.98c6		85 28		sta $28		                sta tmp2+1
.98c8		b5 02		lda $02,x	                lda 2,x
.98ca		85 27		sta $27		                sta tmp2
.98cc		20 ef 83	jsr $83ef	                jsr w_cr
.98cf		a0 10		ldy #$10	                ldy #16                 ; max 16
.98d1		b5 01		lda $01,x	                lda 1,x                 ; if u > 256 keep 16
.98d3		d0 09		bne $98de	                bne +
.98d5		b5 00		lda $00,x	                lda 0,x                 ; if u = 0 we're done
.98d7		f0 61		beq $993a	                beq _done
.98d9		c9 10		cmp #$10	                cmp #16                 ; if u < 16 do what's left
.98db		b0 01		bcs $98de	                bcs +
.98dd		a8		tay		                tay
.98de						+
.98de		84 25		sty $25		                sty tmp1                ; temporary storage for loop counter
.98e0		a9 40		lda #$40	                lda #$40                ; bit 6 set on first pass and bit 7 on second
.98e2		85 26		sta $26		                sta tmp1+1              ; so we can use bit tmp1+1 to check N flag
.98e4		a0 01		ldy #$01	                ldy #1
.98e6						-
.98e6		b9 27 00	lda $0027,y	                lda tmp2,y
.98e9		20 df cf	jsr $cfdf	                jsr byte_to_ascii
.98ec		88		dey		                dey
.98ed		10 f7		bpl $98e6	                bpl -
.98ef		20 b5 91	jsr $91b5	                jsr w_space
.98f2						_pass:
.98f2		a0 00		ldy #$00	                ldy #0
.98f4						_bytes:
.98f4		98		tya		                tya
.98f5		29 07		and #$07	                and #7
.98f7		d0 03		bne $98fc	                bne +
.98f9		20 b5 91	jsr $91b5	                jsr w_space             ; extra space before bytes 0 and 8
.98fc						+
.98fc		b1 27		lda ($27),y	                lda (tmp2),y
.98fe		24 26		bit $26		                bit tmp1+1              ; which pass are we on?
.9900		30 08		bmi $990a	                bmi _ascii              ; bit 7 set on second pass
.9902		20 df cf	jsr $cfdf	                jsr byte_to_ascii       ; show byte value
.9905		20 b5 91	jsr $91b5	                jsr w_space
.9908		80 0a		bra $9914	                bra _nextbyte
.990a						_ascii:
.990a		20 f9 d0	jsr $d0f9	                jsr is_printable        ; show ascii char
.990d		b0 02		bcs $9911	                bcs +
.990f		a9 2e		lda #$2e	                lda #'.'                ; use dot if not printable
.9911						+
.9911		20 93 86	jsr $8693	                jsr emit_a
.9914						_nextbyte:
.9914		c8		iny		                iny
.9915		c4 25		cpy $25		                cpy tmp1
.9917		d0 db		bne $98f4	                bne _bytes
.9919		06 26		asl $26		                asl tmp1+1              ; $40 -> $80 -> 0
.991b		f0 13		beq $9930	                beq +                   ; done both passes?
.991d		88		dey		                dey                     ; Y-1 is 0...15
.991e		98		tya		                tya
.991f		49 0f		eor #$0f	                eor #$f                 ; 15-(Y-1) is 16-Y
.9921		85 1e		sta $1e		                sta tmpdsp
.9923		0a		asl a		                asl a                   ; A is 2*(16-Y)
.9924		c9 10		cmp #$10	                cmp #16
.9926		65 1e		adc $1e		                adc tmpdsp              ; 3*(16-Y) + 1 if Y<9
.9928		20 c9 cf	jsr $cfc9	                jsr push_a_tos
.992b		20 be 91	jsr $91be	                jsr w_spaces
.992e		80 c2		bra $98f2	                bra _pass
.9930						+
.9930		a5 25		lda $25		                lda tmp1
.9932		20 c9 cf	jsr $cfc9	                jsr push_a_tos
.9935		20 1a a2	jsr $a21a	                jsr w_slash_string      ; ( addr n k -- addr+k n-k )
.9938		80 8a		bra $98c4	                bra _row                ; new row
.993a						_done:
.993a		e8		inx		                inx
.993b		e8		inx		                inx
.993c		e8		inx		                inx
.993d		e8		inx		                inx
.993e		60		rts		z_dump:         rts
.993f						xt_question:
.993f						w_question:
.993f		20 e9 87	jsr $87e9	                jsr w_fetch
.9942		20 f9 85	jsr $85f9	                jsr w_dot
.9945		60		rts		z_question:     rts
.9946						xt_see:
.9946						w_see:
.9946		20 24 8d	jsr $8d24	                jsr w_parse_name       ; ( addr u )
.9949		20 5d 9b	jsr $9b5d	                jsr w_find_name        ; ( nt | 0 )
.994c		b5 00		lda $00,x	                lda 0,x
.994e		15 01		ora $01,x	                ora 1,x
.9950		d0 05		bne $9957	                bne +
.9952		a9 05		lda #$05	                lda #err_noname
.9954		4c 28 d1	jmp $d128	                jmp error
.9957						+
.9957		20 ef 83	jsr $83ef	                jsr w_cr
.995a		a5 18		lda $18		                lda base
.995c		48		pha		                pha
.995d		20 f2 88	jsr $88f2	                jsr w_hex
.9960		a9 07		lda #$07	                lda #str_see_nt
.9962		20 4e d1	jsr $d14e	                jsr print_string_no_lf
.9965		20 69 86	jsr $8669	                jsr w_dup              ; ( nt nt )
.9968		20 df 94	jsr $94df	                jsr w_u_dot
.996b		20 b5 91	jsr $91b5	                jsr w_space            ; ( nt )
.996e		20 69 86	jsr $8669	                jsr w_dup              ; ( nt nt )
.9971		20 b1 9c	jsr $9cb1	                jsr w_name_to_int      ; ( nt xt )
.9974		a9 08		lda #$08	                lda #str_see_xt
.9976		20 4e d1	jsr $d14e	                jsr print_string_no_lf
.9979		20 69 86	jsr $8669	                jsr w_dup              ; ( nt xt xt )
.997c		20 df 94	jsr $94df	                jsr w_u_dot
.997f		20 ef 83	jsr $83ef	                jsr w_cr               ; ( nt xt )
.9982		20 db 8c	jsr $8cdb	                jsr w_over              ; ( nt xt nt )
.9985		20 bf 8c	jsr $8cbf	                jsr w_one_plus          ; ( nt xt nt+1 )
.9988		a1 00		lda ($00,x)	                lda (0,x)
.998a		95 00		sta $00,x	                sta 0,x                 ; stash status flag byte
.998c		74 01		stz $01,x	                stz 1,x                 ; placeholder for synthetic flags
.998e		48		pha		                pha                     ; save a copy of flags for later
.998f		29 0c		and #$0c	                and #ST                 ; calculate ST flag
.9991		c9 0c		cmp #$0c	                cmp #ST
.9993		f0 01		beq $9996	                beq +                   ; C=1 when ST set
.9995		18		clc		                clc
.9996						+
.9996		36 01		rol $01,x	                rol 1,x                 ; add to flag byte
.9998		20 db 8c	jsr $8cdb	                jsr w_over
.999b		20 6f 97	jsr $976f	                jsr has_uf_check        ; C=1 when UF set
.999e		36 01		rol $01,x	                rol 1,x                 ; add to flag byte
.99a0		a9 05		lda #$05	                lda #N_FLAGS            ; count off status byte flags
.99a2		85 23		sta $23		                sta tmptos
.99a4		a9 fd		lda #$fd	                lda #<see_flags_template
.99a6		85 29		sta $29		                sta tmp3                ; LSB
.99a8		a9 cc		lda #$cc	                lda #>see_flags_template
.99aa		85 2a		sta $2a		                sta tmp3+1              ; MSB
.99ac		a0 00		ldy #$00	                ldy #0                  ; index the string
.99ae						_loop:
.99ae		b1 29		lda ($29),y	                lda (tmp3),y            ; next char in template
.99b0		10 04		bpl $99b6	                bpl +                   ; end of string?
.99b2		a0 ff		ldy #$ff	                ldy #$ff                ; flag end of loop
.99b4		29 7f		and #$7f	                and #$7f                ; clear high bit of A to get last character
.99b6						+
.99b6		d0 16		bne $99ce	                bne _emit               ; flag placeholder?
.99b8		20 b5 91	jsr $91b5	                jsr w_space             ; no stack effect
.99bb		c6 23		dec $23		                dec tmptos
.99bd		30 04		bmi $99c3	                bmi _synthetic          ; more core status flags?
.99bf		56 00		lsr $00,x	                lsr 0,x                 ; shift next flag bit into carry
.99c1		80 02		bra $99c5	                bra +
.99c3						_synthetic:
.99c3		56 01		lsr $01,x	                lsr 1,x                 ; show synthetic flags after core ones
.99c5						+
.99c5		a9 30		lda #$30	                lda #'0'                ; convert C=0/1 into '0' or '1'
.99c7		69 00		adc #$00	                adc #0
.99c9		20 93 86	jsr $8693	                jsr emit_a              ; write the flag digit
.99cc		a9 20		lda #$20	                lda #' '                ; fall through and add trailing space
.99ce						_emit:
.99ce		20 93 86	jsr $8693	                jsr emit_a
.99d1		c8		iny		                iny
.99d2		d0 da		bne $99ae	                bne _loop
.99d4		20 ef 83	jsr $83ef	                jsr w_cr
.99d7		e8		inx		                inx
.99d8		e8		inx		                inx                     ; ( nt xt )
.99d9		a9 09		lda #$09	                lda #str_see_size
.99db		20 4e d1	jsr $d14e	                jsr print_string_no_lf
.99de		20 1e 92	jsr $921e	                jsr w_swap              ; ( xt nt )
.99e1		20 53 9e	jsr $9e53	                jsr w_wordsize          ; ( xt u )
.99e4		20 69 86	jsr $8669	                jsr w_dup               ; ( xt u u )
.99e7		20 e5 84	jsr $84e5	                jsr w_decimal
.99ea		68		pla		                pla                     ; fetch flag byte we saved earlier
.99eb		29 10		and #$10	                and #HC                 ; does it have CFA?
.99ed		48		pha		                pha                     ; we'll need to check once more
.99ee		f0 0c		beq $99fc	                beq +
.99f0		a9 0a		lda #$0a	                lda #str_see_cfapfa
.99f2		20 4e d1	jsr $d14e	                jsr print_string_no_lf  ; print "CFA: 3  PFA: "
.99f5		38		sec		                sec
.99f6		b5 00		lda $00,x	                lda 0,x                 ; reduce to u-3
.99f8		e9 03		sbc #$03	                sbc #3
.99fa		95 00		sta $00,x	                sta 0,x                 ; assume u < 256
.99fc						+
.99fc		20 df 94	jsr $94df	                jsr w_u_dot             ; print u (or u-3 for PFA)
.99ff		20 ef 83	jsr $83ef	                jsr w_cr
.9a02		20 9f 93	jsr $939f	                jsr w_two_dup           ; ( xt u xt u )
.9a05		20 f2 88	jsr $88f2	                jsr w_hex
.9a08		20 c4 98	jsr $98c4	                jsr w_dump
.9a0b		68		pla		                pla                     ; recover HC flag
.9a0c		f0 06		beq $9a14	                beq +
.9a0e		a9 03		lda #$03	                lda #3
.9a10		95 00		sta $00,x	                sta 0,x                 ; for CFA words, just show three bytes
.9a12		74 01		stz $01,x	                stz 1,x
.9a14						+
.9a14		20 2a a6	jsr $a62a	                jsr w_disasm
.9a17		68		pla		                pla
.9a18		85 18		sta $18		                sta base
.9a1a		60		rts		z_see:          rts
.9a1b						xt_words:
.9a1b						w_words:
.9a1b		20 ef 83	jsr $83ef	                jsr w_cr
.9a1e		a9 00		lda #$00	                lda #0
.9a20		48		pha		                pha
.9a21		ca		dex		                dex                     ; Make room on the stack for
.9a22		ca		dex		                dex                     ; a dictionary pointer.
.9a23		64 29		stz $29		                stz tmp3                ; Start at the beginning of
.9a25						_wordlist_loop:
.9a25		a0 22		ldy #$22	                ldy #num_order_offset   ; Check against byte variable #ORDER.
.9a27		a5 29		lda $29		                lda tmp3
.9a29		d1 08		cmp ($08),y	                cmp (up),y              ; See if we are done.
.9a2b		d0 02		bne $9a2f	                bne _have_wordlist
.9a2d		80 45		bra $9a74	                bra _words_done
.9a2f						_have_wordlist:
.9a2f		18		clc		                clc                     ; Index into byte array SEARCH-ORDER.
.9a30		69 23		adc #$23	                adc #search_order_offset
.9a32		a8		tay		                tay
.9a33		b1 08		lda ($08),y	                lda (up),y              ; Get the index into array WORDLISTS
.9a35		0a		asl a		                asl                     ; Turn offset into cells offset.
.9a36		18		clc		                clc
.9a37		69 0a		adc #$0a	                adc #wordlists_offset
.9a39		a8		tay		                tay
.9a3a		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.9a3c		95 00		sta $00,x	                sta 0,x                 ; on the stack. ( nt )
.9a3e		c8		iny		                iny
.9a3f		b1 08		lda ($08),y	                lda (up),y
.9a41		95 01		sta $01,x	                sta 1,x
.9a43						_loop:
.9a43		20 69 86	jsr $8669	                jsr w_dup              ; ( nt nt )
.9a46		20 ce 9c	jsr $9cce	                jsr w_name_to_string   ; ( nt addr u )
.9a49		68		pla		                pla
.9a4a		18		clc		                clc
.9a4b		75 00		adc $00,x	                adc 0,x
.9a4d		1a		inc a		                ina                     ; don't forget the space between words
.9a4e		c9 4f		cmp #$4f	                cmp #MAX_LINE_LENGTH    ; usually 79
.9a50		90 06		bcc $9a58	                bcc +
.9a52		20 ef 83	jsr $83ef	                jsr w_cr
.9a55		b5 00		lda $00,x	                lda 0,x                 ; After going to next line, start
.9a57		1a		inc a		                ina                     ; with length of this word.
.9a58						+
.9a58		48		pha		                pha
.9a59		20 b4 94	jsr $94b4	                jsr w_type             ; ( nt )
.9a5c		a9 20		lda #$20	                lda #AscSP
.9a5e		20 93 86	jsr $8693	                jsr emit_a
.9a61		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+
.9a64		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+
.9a67		20 e9 87	jsr $87e9	                jsr w_fetch            ; @ ( nt+1 )
.9a6a		b5 00		lda $00,x	                lda 0,x
.9a6c		15 01		ora $01,x	                ora 1,x
.9a6e		d0 d3		bne $9a43	                bne _loop
.9a70		e6 29		inc $29		                inc tmp3
.9a72		80 b1		bra $9a25	                bra _wordlist_loop
.9a74						_words_done:
.9a74		68		pla		                pla                     ; dump counter
.9a75		e8		inx		                inx
.9a76		e8		inx		                inx
.9a77		60		rts		z_words:        rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/tali.asm

.9a78						xt_allow_native:
.9a78						w_allow_native:
.9a78		20 6b d0	jsr $d06b	                jsr current_to_dp
.9a7b		a0 01		ldy #$01	                ldy #1          ; offset for header flag byte
.9a7d		b1 02		lda ($02),y	                lda (dp),y
.9a7f		29 f3		and #$f3	                and #$FF-NN-AN  ; AN and NN flag is clear.
.9a81		91 02		sta ($02),y	                sta (dp),y
.9a83						z_allow_native:
.9a83		60		rts		                rts
.9a84						xt_always_native:
.9a84						w_always_native:
.9a84		20 6b d0	jsr $d06b	                jsr current_to_dp
.9a87		a0 01		ldy #$01	                ldy #1          ; offset for header flag byte
.9a89		b1 02		lda ($02),y	                lda (dp),y
.9a8b		09 04		ora #$04	                ora #AN         ; Make sure AN flag is set
.9a8d		29 f7		and #$f7	                and #$FF-NN     ; and NN flag is clear.
.9a8f		91 02		sta ($02),y	                sta (dp),y
.9a91						z_always_native:
.9a91		60		rts		                rts
.9a92						xt_bell:
.9a92						w_bell:
.9a92		a9 07		lda #$07	                lda #7          ; ASCII value for BELL (aka ctrl-G)
.9a94		20 93 86	jsr $8693	                jsr emit_a
.9a97		60		rts		z_bell:         rts
.9a98						xt_bounds:
.9a98		20 17 d1	jsr $d117	                jsr underflow_2
.9a9b						w_bounds:
.9a9b		18		clc		                clc
.9a9c		b5 00		lda $00,x	                lda 0,x                 ; LSB u
.9a9e		b4 02		ldy $02,x	                ldy 2,x                 ; LSB addr
.9aa0		75 02		adc $02,x	                adc 2,x
.9aa2		95 02		sta $02,x	                sta 2,x                 ; LSB addr+u
.9aa4		94 00		sty $00,x	                sty 0,x
.9aa6		b5 01		lda $01,x	                lda 1,x                 ; MSB u
.9aa8		b4 03		ldy $03,x	                ldy 3,x                 ; MSB addr
.9aaa		75 03		adc $03,x	                adc 3,x
.9aac		95 03		sta $03,x	                sta 3,x                 ; MSB addr+u
.9aae		94 01		sty $01,x	                sty 1,x
.9ab0		60		rts		z_bounds:       rts
.9ab1						xt_cleave:
.9ab1		20 17 d1	jsr $d117	                jsr underflow_2
.9ab4						w_cleave:
.9ab4		20 25 a1	jsr $a125	                jsr w_minus_leading    ; -LEADING ( addr u )
.9ab7		20 12 9c	jsr $9c12	                jsr w_input_to_r       ; save old imput state
.9aba		b5 00		lda $00,x	                lda 0,x         ; u is new ciblen
.9abc		85 0e		sta $0e		                sta ciblen
.9abe		b5 01		lda $01,x	                lda 1,x
.9ac0		85 0f		sta $0f		                sta ciblen+1
.9ac2		b5 02		lda $02,x	                lda 2,x         ; addr is new cib
.9ac4		85 0c		sta $0c		                sta cib
.9ac6		b5 03		lda $03,x	                lda 3,x
.9ac8		85 0d		sta $0d		                sta cib+1
.9aca		64 10		stz $10		                stz toin        ; >IN pointer is zero
.9acc		64 11		stz $11		                stz toin+1
.9ace		20 24 8d	jsr $8d24	                jsr w_parse_name       ; ( addr u addr-s u-s )
.9ad1		b5 00		lda $00,x	                lda 0,x
.9ad3		15 01		ora $01,x	                ora 1,x
.9ad5		f0 23		beq $9afa	                beq _done
.9ad7		b5 04		lda $04,x	                lda 4,x         ; LSB of original u
.9ad9		38		sec		                sec
.9ada		f5 00		sbc $00,x	                sbc 0,x
.9adc		95 04		sta $04,x	                sta 4,x
.9ade		b5 05		lda $05,x	                lda 5,x         ; MSB of original u
.9ae0		f5 01		sbc $01,x	                sbc 1,x
.9ae2		95 05		sta $05,x	                sta 5,x
.9ae4		b5 06		lda $06,x	                lda 6,x         ; LSB of original addr
.9ae6		18		clc		                clc
.9ae7		75 00		adc $00,x	                adc 0,x
.9ae9		95 06		sta $06,x	                sta 6,x
.9aeb		b5 07		lda $07,x	                lda 7,x         ; MSB of original addr
.9aed		75 01		adc $01,x	                adc 1,x
.9aef		95 07		sta $07,x	                sta 7,x
.9af1		20 70 94	jsr $9470	                jsr w_two_swap         ; ( addr-s u-s addr u )
.9af4		20 25 a1	jsr $a125	                jsr w_minus_leading
.9af7		20 70 94	jsr $9470	                jsr w_two_swap         ; ( addr u addr-s u-s )
.9afa						_done:
.9afa		20 1f 9e	jsr $9e1f	                jsr w_r_to_input
.9afd		60		rts		z_cleave:       rts
.9afe						xt_digit_question:
.9afe		20 12 d1	jsr $d112	                jsr underflow_1
.9b01						w_digit_question:
.9b01		ca		dex		                dex
.9b02		ca		dex		                dex
.9b03		74 00		stz $00,x	                stz 0,x                 ; default flag is failure
.9b05		74 01		stz $01,x	                stz 1,x
.9b07		74 03		stz $03,x	                stz 3,x                 ; paranoid
.9b09		b5 02		lda $02,x	                lda 2,x
.9b0b		c9 30		cmp #$30	                cmp #'0'
.9b0d		90 23		bcc $9b32	                bcc _done               ; failure flag already set
.9b0f		c9 3a		cmp #$3a	                cmp #'9'+1               ; this is actually ":"
.9b11		90 12		bcc $9b25	                bcc _checkbase
.9b13		c9 41		cmp #$41	                cmp #'A'
.9b15		90 1b		bcc $9b32	                bcc _done               ; failure flag is already set
.9b17		c9 61		cmp #$61	                cmp #'a'
.9b19		90 07		bcc $9b22	                bcc _case_done          ; not lower case, too low
.9b1b		c9 7b		cmp #$7b	                cmp #'z'+1
.9b1d		b0 03		bcs $9b22	                bcs _case_done          ; not lower case, too high
.9b1f		18		clc		                clc                     ; just right
.9b20		69 e0		adc #$e0	                adc #$E0                ; offset to upper case (wraps)
.9b22						_case_done:
.9b22		38		sec		                sec
.9b23		e9 07		sbc #$07	                sbc #7                  ; fall through to _checkbase
.9b25						_checkbase:
.9b25		38		sec		                sec
.9b26		e9 30		sbc #$30	                sbc #'0'                 ; this is also the conversion step
.9b28		c5 18		cmp $18		                cmp base
.9b2a		b0 06		bcs $9b32	                bcs _done               ; already have false flag
.9b2c		95 02		sta $02,x	                sta 2,x                 ; put number in NOS
.9b2e		d6 00		dec $00,x	                dec 0,x                 ; set success flag
.9b30		d6 01		dec $01,x	                dec 1,x
.9b32						_done:
.9b32						z_digit_question:
.9b32		60		rts		                rts
.9b33						xt_execute_parsing:
.9b33		20 1c d1	jsr $d11c	                jsr underflow_3
.9b36						w_execute_parsing:
.9b36		20 12 9c	jsr $9c12	                jsr w_input_to_r       ; save normal input for later
.9b39		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; -ROT ( xt addr u )
.9b3c		b5 00		lda $00,x	                lda 0,x                 ; TOS is new ciblen
.9b3e		85 0e		sta $0e		                sta ciblen
.9b40		b5 01		lda $01,x	                lda 1,x
.9b42		85 0f		sta $0f		                sta ciblen+1
.9b44		b5 02		lda $02,x	                lda 2,x                 ; NOS is new cib
.9b46		85 0c		sta $0c		                sta cib
.9b48		b5 03		lda $03,x	                lda 3,x
.9b4a		85 0d		sta $0d		                sta cib+1
.9b4c		64 10		stz $10		                stz toin                ; Set >IN to zero
.9b4e		64 11		stz $11		                stz toin+1
.9b50		20 97 93	jsr $9397	                jsr w_two_drop         ; 2DROP ( xt )
.9b53		20 d4 87	jsr $87d4	                jsr w_execute
.9b56		20 1f 9e	jsr $9e1f	                jsr w_r_to_input
.9b59						z_execute_parsing:
.9b59		60		rts		                rts
.9b5a						xt_find_name:
.9b5a		20 17 d1	jsr $d117	                jsr underflow_2
.9b5d						w_find_name:
.9b5d		b5 00		lda $00,x	                lda 0,x
.9b5f		15 01		ora $01,x	                ora 1,x
.9b61		d0 03		bne $9b66	                bne _nonempty
.9b63		4c a2 9b	jmp $9ba2	                jmp _fail_done
.9b66						_nonempty:
.9b66		ca		dex		                dex
.9b67		ca		dex		                dex
.9b68		a9 1f		lda #$1f	                lda #31
.9b6a		95 00		sta $00,x	                sta 0,x
.9b6c		74 01		stz $01,x	                stz 1,x
.9b6e		20 9f 8b	jsr $8b9f	                jsr w_min
.9b71		64 29		stz $29		                stz tmp3                ; Start at the beginning
.9b73						_wordlist_loop:
.9b73		a0 22		ldy #$22	                ldy #num_order_offset   ; Compare to byte variable #ORDER
.9b75		a5 29		lda $29		                lda tmp3
.9b77		d1 08		cmp ($08),y	                cmp (up),y              ; Check to see if we are done
.9b79		f0 27		beq $9ba2	                beq _fail_done
.9b7b		18		clc		                clc             ; SEARCH-ORDER is array of bytes.
.9b7c		69 23		adc #$23	                adc #search_order_offset
.9b7e		a8		tay		                tay
.9b7f		b1 08		lda ($08),y	                lda (up),y      ; Get the id byte, which is the offset
.9b81		0a		asl a		                asl                     ; Turn offset into cells offset.
.9b82		18		clc		                clc
.9b83		69 0a		adc #$0a	                adc #wordlists_offset
.9b85		a8		tay		                tay
.9b86		b1 08		lda ($08),y	                lda (up),y
.9b88		85 25		sta $25		                sta tmp1
.9b8a		c8		iny		                iny
.9b8b		b1 08		lda ($08),y	                lda (up),y
.9b8d		85 26		sta $26		                sta tmp1+1
.9b8f		20 f6 cf	jsr $cff6	                jsr find_header_name
.9b92		d0 04		bne $9b98	                bne _success
.9b94		e6 29		inc $29		                inc tmp3
.9b96		80 db		bra $9b73	                bra _wordlist_loop
.9b98						_success:
.9b98		a5 25		lda $25		                lda tmp1
.9b9a		95 02		sta $02,x	                sta 2,x
.9b9c		a5 26		lda $26		                lda tmp1+1
.9b9e		95 03		sta $03,x	                sta 3,x
.9ba0		80 04		bra $9ba6	                bra _done
.9ba2						_fail_done:
.9ba2		74 02		stz $02,x	                stz 2,x         ; failure flag
.9ba4		74 03		stz $03,x	                stz 3,x
.9ba6						_done:
.9ba6		e8		inx		                inx
.9ba7		e8		inx		                inx
.9ba8		60		rts		z_find_name:    rts
.9ba9						xt_havekey:
.9ba9						w_havekey:
.9ba9		ca		dex		                dex
.9baa		ca		dex		                dex
.9bab		a9 16		lda #$16	                lda #<havekey
.9bad		95 00		sta $00,x	                sta 0,x
.9baf		a9 00		lda #$00	                lda #>havekey
.9bb1		95 01		sta $01,x	                sta 1,x
.9bb3		60		rts		z_havekey:      rts
.9bb4						xt_hexstore:
.9bb4		20 1c d1	jsr $d11c	                jsr underflow_3
.9bb7						w_hexstore:
.9bb7		20 69 86	jsr $8669	                jsr w_dup              ; Save copy of original address
.9bba		20 91 94	jsr $9491	                jsr w_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
.9bbd						_loop:
.9bbd		b5 00		lda $00,x	                lda 0,x
.9bbf		15 01		ora $01,x	                ora 1,x
.9bc1		f0 36		beq $9bf9	                beq _done
.9bc3		20 b4 9a	jsr $9ab4	                jsr w_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.9bc6		20 91 94	jsr $9491	                jsr w_two_to_r
.9bc9		20 71 9e	jsr $9e71	                jsr w_zero
.9bcc		20 71 9e	jsr $9e71	                jsr w_zero
.9bcf		20 17 94	jsr $9417	                jsr w_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.9bd2		20 bc 92	jsr $92bc	                jsr w_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.9bd5		b5 00		lda $00,x	                lda 0,x
.9bd7		15 01		ora $01,x	                ora 1,x
.9bd9		d0 17		bne $9bf2	                bne _have_chars_left
.9bdb		20 97 93	jsr $9397	                jsr w_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
.9bde		20 bd 9e	jsr $9ebd	                jsr w_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
.9be1		20 9e 8e	jsr $8e9e	                jsr w_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.9be4		20 3d 83	jsr $833d	                jsr w_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
.9be7		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R>
.9bea		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+
.9bed		20 59 93	jsr $9359	                jsr w_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.9bf0		80 cb		bra $9bbd	                bra _loop
.9bf2						_have_chars_left:
.9bf2		8a		txa		                txa
.9bf3		18		clc		                clc
.9bf4		69 08		adc #$08	                adc #8
.9bf6		aa		tax		                tax
.9bf7		80 c4		bra $9bbd	                bra _loop
.9bf9						_done:
.9bf9		e8		inx		                inx
.9bfa		e8		inx		                inx
.9bfb		e8		inx		                inx
.9bfc		e8		inx		                inx                     ; 2DROP
.9bfd		20 17 94	jsr $9417	                jsr w_two_r_from       ; ( addr2+n addr2 )
.9c00		20 1e 92	jsr $921e	                jsr w_swap
.9c03		20 bb 8b	jsr $8bbb	                jsr w_minus            ; ( n )
.9c06		60		rts		z_hexstore:     rts
.9c07						xt_input:
.9c07						w_input:
.9c07		ca		dex		                dex
.9c08		ca		dex		                dex
.9c09		a9 14		lda #$14	                lda #<input
.9c0b		95 00		sta $00,x	                sta 0,x
.9c0d		a9 00		lda #$00	                lda #>input
.9c0f		95 01		sta $01,x	                sta 1,x
.9c11		60		rts		z_input:        rts
.9c12						xt_input_to_r:
.9c12						w_input_to_r:
.9c12		68		pla		                pla
.9c13		85 25		sta $25		                sta tmp1
.9c15		68		pla		                pla
.9c16		85 26		sta $26		                sta tmp1+1
.9c18		a0 07		ldy #$07	                ldy #7
.9c1a						_loop:
.9c1a		b9 0a 00	lda $000a,y	                lda insrc,y     ; insrc+7 is toin+1
.9c1d		48		pha		                pha
.9c1e		88		dey		                dey
.9c1f		10 f9		bpl $9c1a	                bpl _loop
.9c21		a5 26		lda $26		                lda tmp1+1
.9c23		48		pha		                pha
.9c24		a5 25		lda $25		                lda tmp1
.9c26		48		pha		                pha
.9c27		60		rts		z_input_to_r: 	rts
.9c28						xt_int_to_name:
.9c28		20 12 d1	jsr $d112	                jsr underflow_1
.9c2b						w_int_to_name:
.9c2b		ca		dex		                dex
.9c2c		ca		dex		                dex
.9c2d		74 00		stz $00,x	                stz 0,x
.9c2f		74 01		stz $01,x	                stz 1,x
.9c31						_wordlist_loop:
.9c31		b5 00		lda $00,x	                lda 0,x                 ; Get the current wordlist.
.9c33		0a		asl a		                asl                     ; Turn offset into cells offset.
.9c34		18		clc		                clc
.9c35		69 0a		adc #$0a	                adc #wordlists_offset
.9c37		a8		tay		                tay
.9c38		b1 08		lda ($08),y	                lda (up),y              ; Save the DP for this wordlist
.9c3a		85 27		sta $27		                sta tmp2                ; into tmp2
.9c3c		c8		iny		                iny
.9c3d		b1 08		lda ($08),y	                lda (up),y
.9c3f		85 28		sta $28		                sta tmp2+1
.9c41		a5 27		lda $27		                lda tmp2
.9c43		05 28		ora $28		                ora tmp2+1
.9c45		f0 36		beq $9c7d	                beq _next_wordlist
.9c47		b5 02		lda $02,x	                lda 2,x         ; Target xt is now behind wordlist id.
.9c49		85 29		sta $29		                sta tmp3        ; Save target xt in tmp3
.9c4b		b5 03		lda $03,x	                lda 3,x
.9c4d		85 2a		sta $2a		                sta tmp3+1
.9c4f						_loop:
.9c4f		a0 04		ldy #$04	                ldy #4          ; xt is four bytes down
.9c51		b1 27		lda ($27),y	                lda (tmp2),y    ; LSB of xt of current nt
.9c53		c5 29		cmp $29		                cmp tmp3
.9c55		d0 07		bne $9c5e	                bne _no_match
.9c57		c8		iny		                iny
.9c58		b1 27		lda ($27),y	                lda (tmp2),y    ; MSB of xt of current nt
.9c5a		c5 2a		cmp $2a		                cmp tmp3+1
.9c5c		f0 30		beq $9c8e	                beq _match
.9c5e						_no_match:
.9c5e		18		clc		                clc
.9c5f		a5 27		lda $27		                lda tmp2
.9c61		69 02		adc #$02	                adc #2
.9c63		85 27		sta $27		                sta tmp2
.9c65		90 02		bcc $9c69	                bcc +
.9c67		e6 28		inc $28		                inc tmp2+1
.9c69						+
.9c69		a0 00		ldy #$00	                ldy #0
.9c6b		b1 27		lda ($27),y	                lda (tmp2),y
.9c6d		48		pha		                pha
.9c6e		c8		iny		                iny
.9c6f		11 27		ora ($27),y	                ora (tmp2),y
.9c71		f0 09		beq $9c7c	                beq _zero
.9c73		b1 27		lda ($27),y	                lda (tmp2),y
.9c75		85 28		sta $28		                sta tmp2+1
.9c77		68		pla		                pla
.9c78		85 27		sta $27		                sta tmp2
.9c7a		80 d3		bra $9c4f	                bra _loop
.9c7c						_zero:
.9c7c		68		pla		                pla             ; Leftover from above loop
.9c7d						_next_wordlist:
.9c7d		b5 00		lda $00,x	                lda 0,x
.9c7f		1a		inc a		                ina
.9c80		95 00		sta $00,x	                sta 0,x
.9c82		c9 0c		cmp #$0c	                cmp #max_wordlists
.9c84		d0 ab		bne $9c31	                bne _wordlist_loop
.9c86		e8		inx		                inx
.9c87		e8		inx		                inx
.9c88		74 00		stz $00,x	                stz 0,x
.9c8a		74 01		stz $01,x	                stz 1,x
.9c8c		80 0a		bra $9c98	                bra z_int_to_name
.9c8e						_match:
.9c8e		e8		inx		                inx
.9c8f		e8		inx		                inx
.9c90		a5 27		lda $27		                lda tmp2
.9c92		95 00		sta $00,x	                sta 0,x
.9c94		a5 28		lda $28		                lda tmp2+1
.9c96		95 01		sta $01,x	                sta 1,x
.9c98		60		rts		z_int_to_name:  rts
.9c99						xt_latestnt:
.9c99						w_latestnt:
.9c99		ca		dex		                dex
.9c9a		ca		dex		                dex
.9c9b		20 6b d0	jsr $d06b	                jsr current_to_dp
.9c9e		a5 02		lda $02		                lda dp
.9ca0		95 00		sta $00,x	                sta 0,x
.9ca2		a5 03		lda $03		                lda dp+1
.9ca4		95 01		sta $01,x	                sta 1,x
.9ca6		60		rts		z_latestnt:     rts
.9ca7						xt_latestxt:
.9ca7						w_latestxt:
.9ca7		20 99 9c	jsr $9c99	                jsr w_latestnt         ; ( nt )
.9caa		20 b1 9c	jsr $9cb1	                jsr w_name_to_int      ; ( xt )
.9cad		60		rts		z_latestxt:     rts
.9cae						xt_name_to_int:
.9cae		20 12 d1	jsr $d112	                jsr underflow_1
.9cb1						w_name_to_int:
.9cb1		b5 00		lda $00,x	                lda 0,x
.9cb3		18		clc		                clc
.9cb4		69 04		adc #$04	                adc #4
.9cb6		85 29		sta $29		                sta tmp3
.9cb8		b5 01		lda $01,x	                lda 1,x
.9cba		90 01		bcc $9cbd	                bcc _done
.9cbc		1a		inc a		                ina
.9cbd						_done:
.9cbd		85 2a		sta $2a		                sta tmp3+1
.9cbf		a0 00		ldy #$00	                ldy #0
.9cc1		b1 29		lda ($29),y	                lda (tmp3),y
.9cc3		95 00		sta $00,x	                sta 0,x
.9cc5		c8		iny		                iny
.9cc6		b1 29		lda ($29),y	                lda (tmp3),y
.9cc8		95 01		sta $01,x	                sta 1,x
.9cca		60		rts		z_name_to_int:  rts
.9ccb						xt_name_to_string:
.9ccb		20 12 d1	jsr $d112	                jsr underflow_1
.9cce						w_name_to_string:
.9cce		ca		dex		                dex
.9ccf		ca		dex		                dex
.9cd0		a1 02		lda ($02,x)	                lda (2,x)
.9cd2		95 00		sta $00,x	                sta 0,x
.9cd4		74 01		stz $01,x	                stz 1,x
.9cd6		b5 02		lda $02,x	                lda 2,x         ; LSB
.9cd8		18		clc		                clc
.9cd9		69 08		adc #$08	                adc #8
.9cdb		95 02		sta $02,x	                sta 2,x
.9cdd		90 02		bcc $9ce1	                bcc z_name_to_string
.9cdf		f6 03		inc $03,x	                inc 3,x         ; MSB
.9ce1						z_name_to_string:
.9ce1		60		rts		                rts
.9ce2						xt_nc_limit:
.9ce2						w_nc_limit:
.9ce2		a9 00		lda #$00	                lda #nc_limit_offset
.9ce4		4c d0 cf	jmp $cfd0	                jmp push_upvar_tos
.9ce7						z_nc_limit:
.9ce7						xt_never_native:
.9ce7						w_never_native:
.9ce7		20 6b d0	jsr $d06b	                jsr current_to_dp
.9cea		a0 01		ldy #$01	                ldy #1          ; offset for header flag byte
.9cec		b1 02		lda ($02),y	                lda (dp),y
.9cee		09 08		ora #$08	                ora #NN         ; Make sure NN flag is set
.9cf0		29 fb		and #$fb	                and #$FF-AN     ; and AN flag is clear.
.9cf2		91 02		sta ($02),y	                sta (dp),y
.9cf4						z_never_native:
.9cf4		60		rts		                rts
.9cf5						xt_not_rot:
.9cf5		20 1c d1	jsr $d11c	                jsr underflow_3
.9cf8						w_not_rot:
.9cf8		b4 01		ldy $01,x	                ldy 1,x         ; MSB first
.9cfa		b5 03		lda $03,x	                lda 3,x
.9cfc		95 01		sta $01,x	                sta 1,x
.9cfe		b5 05		lda $05,x	                lda 5,x
.9d00		95 03		sta $03,x	                sta 3,x
.9d02		94 05		sty $05,x	                sty 5,x
.9d04		b4 00		ldy $00,x	                ldy 0,x         ; LSB second
.9d06		b5 02		lda $02,x	                lda 2,x
.9d08		95 00		sta $00,x	                sta 0,x
.9d0a		b5 04		lda $04,x	                lda 4,x
.9d0c		95 02		sta $02,x	                sta 2,x
.9d0e		94 04		sty $04,x	                sty 4,x
.9d10		60		rts		z_not_rot:      rts
.9d11						xt_number:
.9d11		20 17 d1	jsr $d117	                jsr underflow_2
.9d14						w_number:
.9d14		64 1e		stz $1e		                stz tmpdsp      ; %n000 000d
.9d16		a5 18		lda $18		                lda base
.9d18		48		pha		                pha
.9d19		20 9f 93	jsr $939f	                jsr w_two_dup
.9d1c		a1 02		lda ($02,x)	                lda (2,x)
.9d1e		c9 23		cmp #$23	                cmp #'#'                ; decimal?
.9d20		d0 04		bne $9d26	                bne _check_hex
.9d22		a9 0a		lda #$0a	                lda #10
.9d24		80 42		bra $9d68	                bra _base_changed
.9d26						_check_hex:
.9d26		c9 24		cmp #$24	                cmp #'$'
.9d28		d0 04		bne $9d2e	                bne _check_binary
.9d2a		a9 10		lda #$10	                lda #16
.9d2c		80 3a		bra $9d68	                bra _base_changed
.9d2e						_check_binary:
.9d2e		c9 25		cmp #$25	                cmp #'%'                ; binary?
.9d30		d0 04		bne $9d36	                bne _check_char
.9d32		a9 02		lda #$02	                lda #2
.9d34		80 32		bra $9d68	                bra _base_changed
.9d36						_check_char:
.9d36		c9 27		cmp #$27	                cmp #"'"
.9d38		d0 3a		bne $9d74	                bne _check_minus
.9d3a		b5 00		lda $00,x	                lda 0,x         ; Get the length
.9d3c		c9 03		cmp #$03	                cmp #3
.9d3e		d0 26		bne $9d66	                bne _not_a_char
.9d40		b5 01		lda $01,x	                lda 1,x
.9d42		d0 22		bne $9d66	                bne _not_a_char ; No compare needed to check for non-zero.
.9d44		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9d46		18		clc		                clc
.9d47		69 02		adc #$02	                adc #2          ; length of string
.9d49		85 23		sta $23		                sta tmptos
.9d4b		b5 03		lda $03,x	                lda 3,x
.9d4d		69 00		adc #$00	                adc #0          ; only need carry
.9d4f		85 24		sta $24		                sta tmptos+1
.9d51		b2 23		lda ($23)	                lda (tmptos)
.9d53		c9 27		cmp #$27	                cmp #"'"
.9d55		d0 0f		bne $9d66	                bne _not_a_char
.9d57		f6 02		inc $02,x	                inc 2,x
.9d59		d0 02		bne $9d5d	                bne +
.9d5b		f6 03		inc $03,x	                inc 3,x
.9d5d						+
.9d5d		a1 02		lda ($02,x)	                lda (2,x)
.9d5f		95 02		sta $02,x	                sta 2,x
.9d61		74 03		stz $03,x	                stz 3,x
.9d63		4c e6 9d	jmp $9de6	                jmp _drop_original_string ; Single flag will drop the TOS for us.
.9d66						_not_a_char:
.9d66		80 5c		bra $9dc4	                bra _number_error
.9d68						_base_changed:
.9d68		85 18		sta $18		                sta base        ; Switch to the new base
.9d6a		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9d6c		d0 02		bne $9d70	                bne +
.9d6e		f6 03		inc $03,x	                inc 3,x
.9d70						+
.9d70		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9d72		a1 02		lda ($02,x)	                lda (2,x)       ; Load the first char again
.9d74						_check_minus:
.9d74		c9 2d		cmp #$2d	                cmp #'-'
.9d76		d0 0c		bne $9d84	                bne _check_dot
.9d78		a9 80		lda #$80	                lda #$80
.9d7a		85 1e		sta $1e		                sta tmpdsp      ; set the sign bit
.9d7c		f6 02		inc $02,x	                inc 2,x         ; start one character later
.9d7e		d0 02		bne $9d82	                bne +
.9d80		f6 03		inc $03,x	                inc 3,x
.9d82						+
.9d82		d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9d84						_check_dot:
.9d84		b5 02		lda $02,x	                lda 2,x         ; LSB of address
.9d86		18		clc		                clc
.9d87		75 00		adc $00,x	                adc 0,x         ; length of string
.9d89		85 23		sta $23		                sta tmptos
.9d8b		b5 03		lda $03,x	                lda 3,x
.9d8d		69 00		adc #$00	                adc #0          ; only need carry
.9d8f		85 24		sta $24		                sta tmptos+1
.9d91		a5 23		lda $23		                lda tmptos
.9d93		d0 02		bne $9d97	                bne +
.9d95		c6 24		dec $24		                dec tmptos+1
.9d97						+
.9d97		c6 23		dec $23		                dec tmptos
.9d99		b2 23		lda ($23)	                lda (tmptos)
.9d9b		c9 2e		cmp #$2e	                cmp #'.'
.9d9d		d0 04		bne $9da3	                bne _main
.9d9f		e6 1e		inc $1e		                inc tmpdsp
.9da1		d6 00		dec $00,x	                dec 0,x
.9da3						_main:
.9da3		ca		dex		                dex
.9da4		ca		dex		                dex
.9da5		ca		dex		                dex
.9da6		ca		dex		                dex
.9da7		b5 04		lda $04,x	                lda 4,x         ; LSB of length
.9da9		95 00		sta $00,x	                sta 0,x
.9dab		74 01		stz $01,x	                stz 1,x         ; MSB, max length 255 chars
.9dad		b5 06		lda $06,x	                lda 6,x         ; LSB of address
.9daf		95 02		sta $02,x	                sta 2,x
.9db1		b5 07		lda $07,x	                lda 7,x         ; MSB of address
.9db3		95 03		sta $03,x	                sta 3,x
.9db5		74 04		stz $04,x	                stz 4,x         ; clear space for ud
.9db7		74 05		stz $05,x	                stz 5,x
.9db9		74 06		stz $06,x	                stz 6,x
.9dbb		74 07		stz $07,x	                stz 7,x
.9dbd		20 bc 92	jsr $92bc	                jsr w_to_number        ; (ud addr u -- ud addr u )
.9dc0		b5 00		lda $00,x	                lda 0,x
.9dc2		f0 1e		beq $9de2	                beq _all_converted
.9dc4						_number_error:
.9dc4		20 97 93	jsr $9397	                jsr w_two_drop ; >NUMBER modified addr u
.9dc7		20 97 93	jsr $9397	                jsr w_two_drop ; ud   (partially converted number)
.9dca		a9 3e		lda #$3e	                lda #'>'
.9dcc		20 93 86	jsr $8693	                jsr emit_a
.9dcf		20 b4 94	jsr $94b4	                jsr w_type
.9dd2		a9 3c		lda #$3c	                lda #'<'
.9dd4		20 93 86	jsr $8693	                jsr emit_a
.9dd7		20 b5 91	jsr $91b5	                jsr w_space
.9dda		68		pla		                pla
.9ddb		85 18		sta $18		                sta base
.9ddd		a9 08		lda #$08	                lda #err_syntax
.9ddf		4c 28 d1	jmp $d128	                jmp error
.9de2						_all_converted:
.9de2		e8		inx		                inx ; Drop the current addr u
.9de3		e8		inx		                inx
.9de4		e8		inx		                inx
.9de5		e8		inx		                inx
.9de6						_drop_original_string:
.9de6		20 70 94	jsr $9470	                jsr w_two_swap  ; Drop the original addr u
.9de9		20 97 93	jsr $9397	                jsr w_two_drop  ; (was saved for unknown word error message)
.9dec		a5 1e		lda $1e		                lda tmpdsp      ; flag for double/minus
.9dee		a0 20		ldy #$20	                ldy #%00100000  ; status bit 5 for double(1) or single(0)
.9df0		0a		asl a		                asl             ; %n000 000d => %0000 00d0, C=n, Z=d
.9df1		f0 0a		beq $9dfd	                beq _single
.9df3		98		tya		                tya
.9df4		04 1c		tsb $1c		                tsb status
.9df6		90 0f		bcc $9e07	                bcc _done       ; no minus, all done
.9df8		20 e2 9e	jsr $9ee2	                jsr w_dnegate
.9dfb		80 0a		bra $9e07	                bra _done
.9dfd						_single:
.9dfd		e8		inx		                inx
.9dfe		e8		inx		                inx
.9dff		98		tya		                tya
.9e00		14 1c		trb $1c		                trb status
.9e02		90 03		bcc $9e07	                bcc _done       ; no minus, all done
.9e04		20 f9 8b	jsr $8bf9	                jsr w_negate
.9e07						_done:
.9e07		68		pla		                pla
.9e08		85 18		sta $18		                sta base
.9e0a		60		rts		z_number:       rts
.9e0b						xt_editor_wordlist:
.9e0b						xt_one:
.9e0b						w_editor_wordlist:
.9e0b						w_one:
.9e0b		ca		dex		                dex
.9e0c		ca		dex		                dex
.9e0d		a9 01		lda #$01	                lda #1
.9e0f		95 00		sta $00,x	                sta 0,x
.9e11		74 01		stz $01,x	                stz 1,x
.9e13						z_editor_wordlist:
.9e13						z_one:
.9e13		60		rts		                rts
.9e14						xt_output:
.9e14						w_output:
.9e14		ca		dex		                dex
.9e15		ca		dex		                dex
.9e16		a9 12		lda #$12	                lda #<output
.9e18		95 00		sta $00,x	                sta 0,x
.9e1a		a9 00		lda #$00	                lda #>output
.9e1c		95 01		sta $01,x	                sta 1,x
.9e1e		60		rts		z_output:       rts
.9e1f						xt_r_to_input:
.9e1f						w_r_to_input:
.9e1f		68		pla		                pla
.9e20		85 25		sta $25		                sta tmp1
.9e22		68		pla		                pla
.9e23		85 26		sta $26		                sta tmp1+1
.9e25		a0 00		ldy #$00	                ldy #0
.9e27						_loop:
.9e27		68		pla		                pla
.9e28		99 0a 00	sta $000a,y	                sta insrc,y
.9e2b		c8		iny		                iny
.9e2c		c0 08		cpy #$08	                cpy #8
.9e2e		d0 f7		bne $9e27	                bne _loop
.9e30		a5 26		lda $26		                lda tmp1+1
.9e32		48		pha		                pha
.9e33		a5 25		lda $25		                lda tmp1
.9e35		48		pha		                pha
.9e36		60		rts		z_r_to_input: 	rts
.9e37						xt_strip_underflow:
.9e37						w_strip_underflow:
.9e37		a9 02		lda #$02	                lda #uf_strip_offset
.9e39		4c d0 cf	jmp $cfd0	                jmp push_upvar_tos
.9e3c						z_strip_underflow:
.9e3c						xt_assembler_wordlist:
.9e3c						xt_two:
.9e3c						w_assembler_wordlist:
.9e3c						w_two:
.9e3c		ca		dex		                dex
.9e3d		ca		dex		                dex
.9e3e		a9 02		lda #$02	                lda #2
.9e40		95 00		sta $00,x	                sta 0,x
.9e42		74 01		stz $01,x	                stz 1,x
.9e44						z_assembler_wordlist:
.9e44		60		rts		z_two:          rts
.9e45						xt_useraddr:
.9e45						w_useraddr:
.9e45		ca		dex		                dex
.9e46		ca		dex		                dex
.9e47		a9 08		lda #$08	                lda #<up
.9e49		95 00		sta $00,x	                sta 0,x
.9e4b		a9 00		lda #$00	                lda #>up
.9e4d		95 01		sta $01,x	                sta 1,x
.9e4f		60		rts		z_useraddr:     rts
.9e50						xt_wordsize:
.9e50		20 12 d1	jsr $d112	                jsr underflow_1
.9e53						w_wordsize:
.9e53		b5 00		lda $00,x	                lda 0,x
.9e55		85 25		sta $25		                sta tmp1
.9e57		b5 01		lda $01,x	                lda 1,x
.9e59		85 26		sta $26		                sta tmp1+1
.9e5b		a0 06		ldy #$06	                ldy #6
.9e5d		b1 25		lda ($25),y	                lda (tmp1),y    ; LSB of z
.9e5f		88		dey		                dey
.9e60		88		dey		                dey
.9e61		38		sec		                sec
.9e62		f1 25		sbc ($25),y	                sbc (tmp1),y    ; LSB of xt
.9e64		95 00		sta $00,x	                sta 0,x
.9e66		a0 07		ldy #$07	                ldy #7
.9e68		b1 25		lda ($25),y	                lda (tmp1),y    ; MSB of z
.9e6a		88		dey		                dey
.9e6b		88		dey		                dey
.9e6c		f1 25		sbc ($25),y	                sbc (tmp1),y    ; MSB of xt
.9e6e		95 01		sta $01,x	                sta 1,x
.9e70		60		rts		z_wordsize:     rts
.9e71						xt_case:
.9e71						xt_false:
.9e71						xt_forth_wordlist:
.9e71						xt_zero:
.9e71						w_case:
.9e71						w_false:
.9e71						w_forth_wordlist:
.9e71						w_zero:
.9e71		ca		dex		                dex             ; push
.9e72		ca		dex		                dex
.9e73		74 00		stz $00,x	                stz 0,x
.9e75		74 01		stz $01,x	                stz 1,x
.9e77						z_case:
.9e77						z_false:
.9e77						z_forth_wordlist:
.9e77						z_zero:
.9e77		60		rts		                rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/double.asm

.9e78						xt_d_minus:
.9e78		20 21 d1	jsr $d121	                jsr underflow_4 ; two double numbers
.9e7b						w_d_minus:
.9e7b		38		sec		                sec
.9e7c		b5 06		lda $06,x	                lda 6,x         ; LSB of lower word
.9e7e		f5 02		sbc $02,x	                sbc 2,x
.9e80		95 06		sta $06,x	                sta 6,x
.9e82		b5 07		lda $07,x	                lda 7,x         ; MSB of lower word
.9e84		f5 03		sbc $03,x	                sbc 3,x
.9e86		95 07		sta $07,x	                sta 7,x
.9e88		b5 04		lda $04,x	                lda 4,x         ; LSB of upper word
.9e8a		f5 00		sbc $00,x	                sbc 0,x
.9e8c		95 04		sta $04,x	                sta 4,x
.9e8e		b5 05		lda $05,x	                lda 5,x         ; MSB of upper word
.9e90		f5 01		sbc $01,x	                sbc 1,x
.9e92		95 05		sta $05,x	                sta 5,x
.9e94		e8		inx		                inx
.9e95		e8		inx		                inx
.9e96		e8		inx		                inx
.9e97		e8		inx		                inx
.9e98		60		rts		z_d_minus:      rts
.9e99						xt_d_plus:
.9e99		20 21 d1	jsr $d121	                jsr underflow_4 ; two double numbers
.9e9c						w_d_plus:
.9e9c		18		clc		                clc
.9e9d		b5 02		lda $02,x	                lda 2,x         ; LSB of lower word
.9e9f		75 06		adc $06,x	                adc 6,x
.9ea1		95 06		sta $06,x	                sta 6,x
.9ea3		b5 03		lda $03,x	                lda 3,x         ; MSB of lower word
.9ea5		75 07		adc $07,x	                adc 7,x
.9ea7		95 07		sta $07,x	                sta 7,x
.9ea9		b5 00		lda $00,x	                lda 0,x         ; LSB of upper word
.9eab		75 04		adc $04,x	                adc 4,x
.9ead		95 04		sta $04,x	                sta 4,x
.9eaf		b5 01		lda $01,x	                lda 1,x         ; MSB of upper word
.9eb1		75 05		adc $05,x	                adc 5,x
.9eb3		95 05		sta $05,x	                sta 5,x
.9eb5		e8		inx		                inx
.9eb6		e8		inx		                inx
.9eb7		e8		inx		                inx
.9eb8		e8		inx		                inx
.9eb9		60		rts		z_d_plus:       rts
.9eba						xt_d_to_s:
.9eba		20 17 d1	jsr $d117	                jsr underflow_2
.9ebd						w_d_to_s:
.9ebd		e8		inx		                inx
.9ebe		e8		inx		                inx
.9ebf		60		rts		z_d_to_s:       rts
.9ec0						xt_dabs:
.9ec0		20 17 d1	jsr $d117	                jsr underflow_2 ; double number
.9ec3						w_dabs:
.9ec3		b5 01		lda $01,x	                lda 1,x         ; MSB of high cell
.9ec5		10 17		bpl $9ede	                bpl _done       ; positive, we get off light
.9ec7		a0 00		ldy #$00	                ldy #0
.9ec9		38		sec		                sec
.9eca		98		tya		                tya
.9ecb		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.9ecd		95 02		sta $02,x	                sta 2,x
.9ecf		98		tya		                tya
.9ed0		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.9ed2		95 03		sta $03,x	                sta 3,x
.9ed4		98		tya		                tya
.9ed5		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.9ed7		95 00		sta $00,x	                sta 0,x
.9ed9		98		tya		                tya
.9eda		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.9edc		95 01		sta $01,x	                sta 1,x
.9ede						_done:
.9ede		60		rts		z_dabs:         rts
.9edf						xt_dnegate:
.9edf		20 17 d1	jsr $d117	                jsr underflow_2 ; double number
.9ee2						w_dnegate:
.9ee2		a0 00		ldy #$00	     		ldy #0
.9ee4		38		sec		                sec
.9ee5		98		tya		                tya
.9ee6		f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.9ee8		95 02		sta $02,x	                sta 2,x
.9eea		98		tya		                tya
.9eeb		f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.9eed		95 03		sta $03,x	                sta 3,x
.9eef		98		tya		                tya
.9ef0		f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.9ef2		95 00		sta $00,x	                sta 0,x
.9ef4		98		tya		                tya
.9ef5		f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.9ef7		95 01		sta $01,x	                sta 1,x
.9ef9		60		rts		z_dnegate:      rts
.9efa						xt_d_dot:
.9efa		20 17 d1	jsr $d117	                jsr underflow_2
.9efd						w_d_dot:
.9efd		20 7d 93	jsr $937d	                jsr w_tuck
.9f00		20 c3 9e	jsr $9ec3	                jsr w_dabs
.9f03		20 ad 89	jsr $89ad	                jsr w_less_number_sign
.9f06		20 89 8c	jsr $8c89	                jsr w_number_sign_s
.9f09		20 5c 8f	jsr $8f5c	                jsr w_rot
.9f0c		20 38 91	jsr $9138	                jsr w_sign
.9f0f		20 67 8c	jsr $8c67	                jsr w_number_sign_greater
.9f12		20 b4 94	jsr $94b4	                jsr w_type
.9f15		20 b5 91	jsr $91b5	                jsr w_space
.9f18		60		rts		z_d_dot:        rts
.9f19						xt_d_dot_r:
.9f19		20 1c d1	jsr $d11c	                jsr underflow_3
.9f1c						w_d_dot_r:
.9f1c		20 59 93	jsr $9359	                jsr w_to_r
.9f1f		20 7d 93	jsr $937d	                jsr w_tuck
.9f22		20 c3 9e	jsr $9ec3	                jsr w_dabs
.9f25		20 ad 89	jsr $89ad	                jsr w_less_number_sign
.9f28		20 89 8c	jsr $8c89	                jsr w_number_sign_s
.9f2b		20 5c 8f	jsr $8f5c	                jsr w_rot
.9f2e		20 38 91	jsr $9138	                jsr w_sign
.9f31		20 67 8c	jsr $8c67	                jsr w_number_sign_greater
.9f34		20 b5 8e	jsr $8eb5	                jsr w_r_from
.9f37		20 db 8c	jsr $8cdb	                jsr w_over
.9f3a		20 bb 8b	jsr $8bbb	                jsr w_minus
.9f3d		20 be 91	jsr $91be	                jsr w_spaces
.9f40		20 b4 94	jsr $94b4	                jsr w_type
.9f43		60		rts		z_d_dot_r:      rts
.9f44						xt_m_star_slash:
.9f44		20 21 d1	jsr $d121	                jsr underflow_4
.9f47						w_m_star_slash:
.9f47		20 9f 93	jsr $939f	                jsr w_two_dup
.9f4a		20 58 96	jsr $9658	                jsr w_xor
.9f4d		20 1e 92	jsr $921e	                jsr w_swap
.9f50		20 d5 80	jsr $80d5	                jsr w_abs
.9f53		20 59 93	jsr $9359	                jsr w_to_r
.9f56		20 1e 92	jsr $921e	                jsr w_swap
.9f59		20 d5 80	jsr $80d5	                jsr w_abs
.9f5c		20 59 93	jsr $9359	                jsr w_to_r
.9f5f		20 db 8c	jsr $8cdb	                jsr w_over
.9f62		20 58 96	jsr $9658	                jsr w_xor
.9f65		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; rot rot
.9f68		20 c3 9e	jsr $9ec3	                jsr w_dabs
.9f6b		20 1e 92	jsr $921e	                jsr w_swap
.9f6e		20 9e 8e	jsr $8e9e	                jsr w_r_fetch
.9f71		20 7b 95	jsr $957b	                jsr w_um_star
.9f74		20 5c 8f	jsr $8f5c	                jsr w_rot
.9f77		20 b5 8e	jsr $8eb5	                jsr w_r_from
.9f7a		20 7b 95	jsr $957b	                jsr w_um_star
.9f7d		20 5c 8f	jsr $8f5c	                jsr w_rot
.9f80		20 71 9e	jsr $9e71	                jsr w_zero
.9f83		20 9c 9e	jsr $9e9c	                jsr w_d_plus
.9f86		20 9e 8e	jsr $8e9e	                jsr w_r_fetch
.9f89		20 39 95	jsr $9539	                jsr w_um_slash_mod
.9f8c		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; rot rot
.9f8f		20 b5 8e	jsr $8eb5	                jsr w_r_from
.9f92		20 39 95	jsr $9539	                jsr w_um_slash_mod
.9f95		20 1e 92	jsr $921e	                jsr w_swap
.9f98		20 63 86	jsr $8663	                jsr w_drop
.9f9b		20 1e 92	jsr $921e	                jsr w_swap
.9f9e		20 5c 8f	jsr $8f5c	                jsr w_rot
.9fa1		e8		inx		                inx                     ; pre-drop TOS
.9fa2		e8		inx		                inx
.9fa3		b5 ff		lda $ff,x	                lda $ff,x               ; and check sign bit MSB
.9fa5		10 03		bpl $9faa	                bpl z_m_star_slash      ; ... 0< if ...
.9fa7		20 e2 9e	jsr $9ee2	                jsr w_dnegate
.9faa		60		rts		z_m_star_slash: rts
.9fab						xt_two_constant:
.9fab		20 17 d1	jsr $d117	                jsr underflow_2
.9fae						w_two_constant:
.9fae		a9 04		lda #$04	                lda #4
.9fb0		85 1e		sta $1e		                sta tmpdsp              ; PFA size 4
.9fb2		20 f9 83	jsr $83f9	                jsr create_dovar
.9fb5		20 b1 83	jsr $83b1	                jsr w_comma
.9fb8		20 b1 83	jsr $83b1	                jsr w_comma
.9fbb		20 c4 85	jsr $85c4	                jsr does_runtime    ; does> turns into these two routines.
.9fbe		20 a2 cf	jsr $cfa2	                jsr dodoes
.9fc1		20 b7 93	jsr $93b7	                jsr w_two_fetch
.9fc4		60		rts		z_two_constant: rts
.9fc5						xt_two_literal:
.9fc5		20 17 d1	jsr $d117	                jsr underflow_2 ; double number
.9fc8						w_two_literal:
.9fc8		a9 14		lda #$14	                lda #2 * template_push_tos_size
.9fca		20 c5 97	jsr $97c5	                jsr check_nc_limit
.9fcd		b0 09		bcs $9fd8	                bcs _no_inline
.9fcf		20 1e 92	jsr $921e	                jsr w_swap
.9fd2		20 d3 89	jsr $89d3	                jsr w_literal
.9fd5		4c d3 89	jmp $89d3	                jmp w_literal
.9fd8						_no_inline:
.9fd8		a0 9f		ldy #$9f	                ldy #>two_literal_runtime
.9fda		a9 eb		lda #$eb	                lda #<two_literal_runtime
.9fdc		20 b1 97	jsr $97b1	                jsr cmpl_subroutine
.9fdf		a0 04		ldy #$04	                ldy #4
.9fe1						-
.9fe1		b5 00		lda $00,x	                lda 0,x         ; move four bytes from the stack to cp
.9fe3		20 bc 97	jsr $97bc	                jsr cmpl_a
.9fe6		e8		inx		                inx
.9fe7		88		dey		                dey
.9fe8		d0 f7		bne $9fe1	                bne -
.9fea		60		rts		z_two_literal:  rts
.9feb						two_literal_runtime:
.9feb		68		pla		                pla             ; LSB of address
.9fec		85 25		sta $25		                sta tmp1
.9fee		7a		ply		                ply             ; MSB of address
.9fef		84 26		sty $26		                sty tmp1+1
.9ff1		18		clc		                clc             ; add four to the return address
.9ff2		69 04		adc #$04	                adc #4
.9ff4		90 01		bcc $9ff7	                bcc +
.9ff6		c8		iny		                iny
.9ff7						+
.9ff7		5a		phy		                phy             ; and re-stack
.9ff8		48		pha		                pha
.9ff9		a0 04		ldy #$04	                ldy #4
.9ffb						-
.9ffb		b1 25		lda ($25),y	                lda (tmp1),y    ; copy trailing four bytes to the stack
.9ffd		ca		dex		                dex
.9ffe		95 00		sta $00,x	                sta 0,x
.a000		88		dey		                dey
.a001		d0 f8		bne $9ffb	                bne -
.a003		60		rts		                rts
.a004						xt_two_variable:
.a004						w_two_variable:
.a004		ca		dex		                dex
.a005		ca		dex		                dex
.a006		a9 04		lda #$04	                lda #4
.a008		95 00		sta $00,x	                sta 0,x
.a00a		74 01		stz $01,x	                stz 1,x
.a00c		85 1e		sta $1e		                sta tmpdsp              ; PFA size 4
.a00e		20 f9 83	jsr $83f9	                jsr create_dovar
.a011		20 2d 82	jsr $822d	                jsr w_allot
.a014		60		rts		z_two_variable: rts
.a015						xt_ud_dot:
.a015		20 17 d1	jsr $d117	                jsr underflow_2 ; double number
.a018						w_ud_dot:
.a018		20 ad 89	jsr $89ad	                jsr w_less_number_sign
.a01b		20 89 8c	jsr $8c89	                jsr w_number_sign_s
.a01e		20 67 8c	jsr $8c67	                jsr w_number_sign_greater
.a021		20 b4 94	jsr $94b4	                jsr w_type
.a024		20 b5 91	jsr $91b5	                jsr w_space
.a027		60		rts		z_ud_dot:        rts
.a028						xt_ud_dot_r:
.a028		20 1c d1	jsr $d11c	                jsr underflow_3
.a02b						w_ud_dot_r:
.a02b		20 59 93	jsr $9359	                jsr w_to_r
.a02e		20 ad 89	jsr $89ad	                jsr w_less_number_sign
.a031		20 89 8c	jsr $8c89	                jsr w_number_sign_s
.a034		20 67 8c	jsr $8c67	                jsr w_number_sign_greater
.a037		20 b5 8e	jsr $8eb5	                jsr w_r_from
.a03a		20 db 8c	jsr $8cdb	                jsr w_over
.a03d		20 bb 8b	jsr $8bbb	                jsr w_minus
.a040		20 be 91	jsr $91be	                jsr w_spaces
.a043		20 b4 94	jsr $94b4	                jsr w_type
.a046		60		rts		z_ud_dot_r:      rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/string.asm

.a047						xt_cmove:
.a047		20 1c d1	jsr $d11c	                jsr underflow_3
.a04a						w_cmove:
.a04a		b5 02		lda $02,x	                lda 2,x
.a04c		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.a04e		b5 03		lda $03,x	                lda 3,x
.a050		85 28		sta $28		                sta tmp2+1
.a052		b5 04		lda $04,x	                lda 4,x
.a054		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.a056		b5 05		lda $05,x	                lda 5,x
.a058		85 26		sta $26		                sta tmp1+1
.a05a		a0 00		ldy #$00	                ldy #0
.a05c		b5 01		lda $01,x	                lda 1,x         ; number of whole pages to move
.a05e		f0 0f		beq $a06f	                beq _dopartial
.a060						_page:
.a060		b1 25		lda ($25),y	                lda (tmp1),y
.a062		91 27		sta ($27),y	                sta (tmp2),y
.a064		c8		iny		                iny
.a065		d0 f9		bne $a060	                bne _page
.a067		e6 26		inc $26		                inc tmp1+1
.a069		e6 28		inc $28		                inc tmp2+1
.a06b		d6 01		dec $01,x	                dec 1,x
.a06d		d0 f1		bne $a060	                bne _page
.a06f						_dopartial:
.a06f		b5 00		lda $00,x	                lda 0,x         ; length of last page
.a071		f0 09		beq $a07c	                beq _done
.a073						_partial:
.a073		b1 25		lda ($25),y	                lda (tmp1),y
.a075		91 27		sta ($27),y	                sta (tmp2),y
.a077		c8		iny		                iny
.a078		d6 00		dec $00,x	                dec 0,x
.a07a		d0 f7		bne $a073	                bne _partial
.a07c						_done:
.a07c		8a		txa		                txa
.a07d		18		clc		                clc
.a07e		69 06		adc #$06	                adc #6
.a080		aa		tax		                tax
.a081		60		rts		z_cmove:        rts
.a082						xt_cmove_up:
.a082		20 1c d1	jsr $d11c	                jsr underflow_3
.a085						w_cmove_up:
.a085		b5 02		lda $02,x	                lda 2,x
.a087		85 27		sta $27		                sta tmp2        ; use tmp2 because easier to remember
.a089		b5 03		lda $03,x	                lda 3,x
.a08b		18		clc		                clc
.a08c		75 01		adc $01,x	                adc 1,x
.a08e		85 28		sta $28		                sta tmp2+1      ; point to last page of destination
.a090		b5 04		lda $04,x	                lda 4,x
.a092		85 25		sta $25		                sta tmp1        ; use tmp1 because easier to remember
.a094		b5 05		lda $05,x	                lda 5,x
.a096		18		clc		                clc
.a097		75 01		adc $01,x	                adc 1,x
.a099		85 26		sta $26		                sta tmp1+1      ; point to last page of source
.a09b		f6 01		inc $01,x	                inc 1,x         ; allows us to use bne with dec 1,x below
.a09d		b4 00		ldy $00,x	                ldy 0,x         ; length of last page
.a09f		f0 0e		beq $a0af	                beq _nopartial
.a0a1						_outerloop:
.a0a1		88		dey		                dey
.a0a2		f0 07		beq $a0ab	                beq _finishpage
.a0a4						_innerloop:
.a0a4		b1 25		lda ($25),y	                lda (tmp1),y
.a0a6		91 27		sta ($27),y	                sta (tmp2),y
.a0a8		88		dey		                dey
.a0a9		d0 f9		bne $a0a4	                bne _innerloop
.a0ab						_finishpage:
.a0ab		b2 25		lda ($25)	                lda (tmp1)      ; handle y = 0 separately
.a0ad		92 27		sta ($27)	                sta (tmp2)
.a0af						_nopartial:
.a0af		c6 26		dec $26		                dec tmp1+1      ; back up to previous pages
.a0b1		c6 28		dec $28		                dec tmp2+1
.a0b3		d6 01		dec $01,x	                dec 1,x
.a0b5		d0 ea		bne $a0a1	                bne _outerloop
.a0b7		8a		txa		                txa
.a0b8		18		clc		                clc
.a0b9		69 06		adc #$06	                adc #6
.a0bb		aa		tax		                tax
.a0bc		60		rts		z_cmove_up:     rts
.a0bd						xt_compare:
.a0bd		20 21 d1	jsr $d121	                jsr underflow_4
.a0c0						w_compare:
.a0c0		b5 02		lda $02,x	                lda 2,x
.a0c2		85 27		sta $27		                sta tmp2
.a0c4		b5 03		lda $03,x	                lda 3,x
.a0c6		85 28		sta $28		                sta tmp2+1
.a0c8		b5 06		lda $06,x	                lda 6,x
.a0ca		85 25		sta $25		                sta tmp1
.a0cc		b5 07		lda $07,x	                lda 7,x
.a0ce		85 26		sta $26		                sta tmp1+1
.a0d0						_compare_loop:
.a0d0		b5 04		lda $04,x	                lda 4,x
.a0d2		15 05		ora $05,x	                ora 5,x
.a0d4		f0 2c		beq $a102	                beq _str1_done
.a0d6		b5 00		lda $00,x	                lda 0,x
.a0d8		15 01		ora $01,x	                ora 1,x
.a0da		f0 3a		beq $a116	                beq _greater    ; Str2 empty first
.a0dc		b2 25		lda ($25)	                lda (tmp1)
.a0de		d2 27		cmp ($27)	                cmp (tmp2)
.a0e0		90 26		bcc $a108	                bcc _less
.a0e2		d0 32		bne $a116	                bne _greater
.a0e4		e6 25		inc $25		                inc tmp1
.a0e6		d0 02		bne $a0ea	                bne +
.a0e8		e6 26		inc $26		                inc tmp1+1
.a0ea						+
.a0ea		e6 27		inc $27		                inc tmp2
.a0ec		d0 02		bne $a0f0	                bne +
.a0ee		e6 28		inc $28		                inc tmp2+1
.a0f0						+
.a0f0		b5 04		lda $04,x	                lda 4,x
.a0f2		d0 02		bne $a0f6	                bne +
.a0f4		d6 05		dec $05,x	                dec 5,x
.a0f6						+
.a0f6		d6 04		dec $04,x	                dec 4,x
.a0f8		b5 00		lda $00,x	                lda 0,x
.a0fa		d0 02		bne $a0fe	                bne +
.a0fc		d6 01		dec $01,x	                dec 1,x
.a0fe						+
.a0fe		d6 00		dec $00,x	                dec 0,x
.a100		80 ce		bra $a0d0	                bra _compare_loop
.a102						_str1_done:
.a102		b5 00		lda $00,x	                lda 0,x
.a104		15 01		ora $01,x	                ora 1,x
.a106		f0 08		beq $a110	                beq _equal      ; Both out of letters
.a108						_less:
.a108		a9 ff		lda #$ff	                lda #$FF
.a10a		95 06		sta $06,x	                sta 6,x
.a10c		95 07		sta $07,x	                sta 7,x
.a10e		80 0c		bra $a11c	                bra _done
.a110						_equal:
.a110		74 06		stz $06,x	                stz 6,x
.a112		74 07		stz $07,x	                stz 7,x
.a114		80 06		bra $a11c	                bra _done
.a116						_greater:
.a116		a9 01		lda #$01	                lda #1
.a118		95 06		sta $06,x	                sta 6,x
.a11a		74 07		stz $07,x	                stz 7,x
.a11c						_done:
.a11c		8a		txa		                txa
.a11d		18		clc		                clc
.a11e		69 06		adc #$06	                adc #6
.a120		aa		tax		                tax
.a121		60		rts		z_compare:      rts
.a122						xt_minus_leading:
.a122		20 17 d1	jsr $d117	                jsr underflow_2
.a125						w_minus_leading:
.a125						_loop:
.a125		b5 00		lda $00,x	                lda 0,x
.a127		15 01		ora $01,x	                ora 1,x
.a129		f0 0f		beq $a13a	                beq _done
.a12b		a1 02		lda ($02,x)	                lda (2,x)               ; get first character
.a12d		20 05 d1	jsr $d105	                jsr is_whitespace
.a130		90 08		bcc $a13a	                bcc _done
.a132		20 0b 9e	jsr $9e0b	                jsr w_one              ; ( addr u 1 )
.a135		20 1a a2	jsr $a21a	                jsr w_slash_string     ; ( addr+ u-1 )
.a138		80 eb		bra $a125	                bra _loop
.a13a						_done:
.a13a						z_minus_leading:
.a13a		60		rts		                rts
.a13b						xt_minus_trailing:
.a13b		20 17 d1	jsr $d117	                jsr underflow_2
.a13e						w_minus_trailing:
.a13e		b5 00		lda $00,x	                lda 0,x         ; LSB of n
.a140		15 01		ora $01,x	                ora 1,x         ; MSB of n
.a142		f0 33		beq $a177	                beq _done
.a144		18		clc		                clc
.a145		b5 02		lda $02,x	                lda 2,x         ; LSB of addr
.a147		75 00		adc $00,x	                adc 0,x
.a149		85 25		sta $25		                sta tmp1
.a14b		b5 03		lda $03,x	                lda 3,x         ; MSB of addr
.a14d		75 01		adc $01,x	                adc 1,x
.a14f		85 26		sta $26		                sta tmp1+1
.a151		a5 25		lda $25		                lda tmp1
.a153		d0 02		bne $a157	                bne +
.a155		c6 26		dec $26		                dec tmp1+1
.a157						+
.a157		c6 25		dec $25		                dec tmp1
.a159						_loop:
.a159		b2 25		lda ($25)	                lda (tmp1)
.a15b		c9 20		cmp #$20	                cmp #AscSP
.a15d		d0 18		bne $a177	                bne _done
.a15f		a5 25		lda $25		                lda tmp1
.a161		d0 02		bne $a165	                bne +
.a163		c6 26		dec $26		                dec tmp1+1
.a165						+
.a165		c6 25		dec $25		                dec tmp1
.a167		b5 00		lda $00,x	                lda 0,x
.a169		d0 02		bne $a16d	                bne +
.a16b		d6 01		dec $01,x	                dec 1,x
.a16d						+
.a16d		d6 00		dec $00,x	                dec 0,x
.a16f		b5 00		lda $00,x	                lda 0,x
.a171		15 01		ora $01,x	                ora 1,x
.a173		f0 02		beq $a177	                beq _done       ; Count has reached zero - we're done!
.a175		80 e2		bra $a159	                bra _loop
.a177						_done:
.a177						z_minus_trailing:
.a177		60		rts		                rts
.a178						xt_search:
.a178		20 21 d1	jsr $d121	                jsr underflow_4
.a17b						w_search:
.a17b		b5 00		lda $00,x	                lda 0,x
.a17d		15 01		ora $01,x	                ora 1,x
.a17f		d0 0b		bne $a18c	                bne _start_search
.a181		e8		inx		                inx             ; Remove u2
.a182		e8		inx		                inx
.a183		a9 ff		lda #$ff	                lda #$FF        ; Turn addr2 into a true flag
.a185		95 00		sta $00,x	                sta 0,x
.a187		95 01		sta $01,x	                sta 1,x
.a189		4c 16 a2	jmp $a216	                jmp z_search
.a18c						_start_search:
.a18c		20 71 9e	jsr $9e71	                jsr w_zero
.a18f						_search_loop:
.a18f		18		clc		                clc
.a190		b5 00		lda $00,x	                lda 0,x
.a192		75 02		adc $02,x	                adc 2,x
.a194		85 25		sta $25		                sta tmp1
.a196		b5 01		lda $01,x	                lda 1,x
.a198		75 03		adc $03,x	                adc 3,x
.a19a		d5 07		cmp $07,x	                cmp 7,x
.a19c		90 12		bcc $a1b0	                bcc _init_comparison ; Obviously less
.a19e		d0 06		bne $a1a6	                bne _not_found
.a1a0		b5 06		lda $06,x	                lda 6,x
.a1a2		c5 25		cmp $25		                cmp tmp1
.a1a4		b0 0a		bcs $a1b0	                bcs _init_comparison
.a1a6						_not_found:
.a1a6		e8		inx		                inx             ; Remove offset
.a1a7		e8		inx		                inx
.a1a8		e8		inx		                inx             ; Remove u2
.a1a9		e8		inx		                inx
.a1aa		74 00		stz $00,x	                stz 0,x         ; Turn addr2 into a false flag
.a1ac		74 01		stz $01,x	                stz 1,x
.a1ae		80 66		bra $a216	                bra z_search
.a1b0						_init_comparison:
.a1b0		18		clc		                clc
.a1b1		b5 08		lda $08,x	                lda 8,x
.a1b3		75 00		adc $00,x	                adc 0,x
.a1b5		85 25		sta $25		                sta tmp1
.a1b7		b5 09		lda $09,x	                lda 9,x
.a1b9		75 01		adc $01,x	                adc 1,x
.a1bb		85 26		sta $26		                sta tmp1+1
.a1bd		b5 04		lda $04,x	                lda 4,x
.a1bf		85 27		sta $27		                sta tmp2
.a1c1		b5 05		lda $05,x	                lda 5,x
.a1c3		85 28		sta $28		                sta tmp2+1
.a1c5		b5 02		lda $02,x	                lda 2,x
.a1c7		85 29		sta $29		                sta tmp3
.a1c9		b5 03		lda $03,x	                lda 3,x
.a1cb		85 2a		sta $2a		                sta tmp3+1
.a1cd						_comparison_loop:
.a1cd		b2 25		lda ($25)	                lda (tmp1)
.a1cf		d2 27		cmp ($27)	                cmp (tmp2)
.a1d1		f0 05		beq $a1d8	                beq _letters_match
.a1d3		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.a1d6		80 b7		bra $a18f	                bra _search_loop
.a1d8						_letters_match:
.a1d8		e6 25		inc $25		                inc tmp1
.a1da		d0 02		bne $a1de	                bne +
.a1dc		e6 26		inc $26		                inc tmp1+1
.a1de						+
.a1de		e6 27		inc $27		                inc tmp2
.a1e0		d0 02		bne $a1e4	                bne +
.a1e2		e6 28		inc $28		                inc tmp2+1
.a1e4						+
.a1e4		a5 29		lda $29		                lda tmp3
.a1e6		d0 02		bne $a1ea	                bne +
.a1e8		c6 2a		dec $2a		                dec tmp3+1
.a1ea						+
.a1ea		c6 29		dec $29		                dec tmp3
.a1ec		a5 29		lda $29		                lda tmp3
.a1ee		05 2a		ora $2a		                ora tmp3+1
.a1f0		d0 db		bne $a1cd	                bne _comparison_loop ; Check the next letter
.a1f2		18		clc		                clc
.a1f3		b5 00		lda $00,x	                lda 0,x
.a1f5		75 08		adc $08,x	                adc 8,x
.a1f7		95 08		sta $08,x	                sta 8,x
.a1f9		b5 01		lda $01,x	                lda 1,x
.a1fb		75 09		adc $09,x	                adc 9,x
.a1fd		95 09		sta $09,x	                sta 9,x
.a1ff		38		sec		                sec
.a200		b5 06		lda $06,x	                lda 6,x
.a202		f5 00		sbc $00,x	                sbc 0,x
.a204		95 06		sta $06,x	                sta 6,x
.a206		b5 07		lda $07,x	                lda 7,x
.a208		f5 01		sbc $01,x	                sbc 1,x
.a20a		95 07		sta $07,x	                sta 7,x
.a20c		e8		inx		                inx             ; drop offset
.a20d		e8		inx		                inx
.a20e		e8		inx		                inx             ; drop u2
.a20f		e8		inx		                inx
.a210		a9 ff		lda #$ff	                lda #$FF
.a212		95 00		sta $00,x	                sta 0,x         ; Turn addr2 into a true flag.
.a214		95 01		sta $01,x	                sta 1,x
.a216		60		rts		z_search:       rts
.a217						xt_slash_string:
.a217		20 1c d1	jsr $d11c	                jsr underflow_3
.a21a						w_slash_string:
.a21a		18		clc		                clc             ; 3OS+TOS
.a21b		b5 00		lda $00,x	                lda 0,x
.a21d		75 04		adc $04,x	                adc 4,x
.a21f		95 04		sta $04,x	                sta 4,x
.a221		b5 01		lda $01,x	                lda 1,x
.a223		75 05		adc $05,x	                adc 5,x
.a225		95 05		sta $05,x	                sta 5,x
.a227		38		sec		                sec             ; NOS-TOS
.a228		b5 02		lda $02,x	                lda 2,x
.a22a		f5 00		sbc $00,x	                sbc 0,x
.a22c		95 02		sta $02,x	                sta 2,x
.a22e		b5 03		lda $03,x	                lda 3,x
.a230		f5 01		sbc $01,x	                sbc 1,x
.a232		95 03		sta $03,x	                sta 3,x
.a234		e8		inx		                inx
.a235		e8		inx		                inx
.a236		60		rts		z_slash_string: rts
.a237						xt_sliteral:
.a237		20 17 d1	jsr $d117	                jsr underflow_2
.a23a						w_sliteral:
.a23a		a0 a2		ldy #$a2	                ldy #>sliteral_runtime
.a23c		a9 58		lda #$58	                lda #<sliteral_runtime
.a23e		20 b1 97	jsr $97b1	                jsr cmpl_subroutine     ; jsr sliteral_runtime
.a241		b5 00		lda $00,x	                lda 0,x
.a243		b4 01		ldy $01,x	                ldy 1,x
.a245		20 b8 97	jsr $97b8	                jsr cmpl_word           ; .word u
.a248		20 e7 88	jsr $88e7	                jsr w_here
.a24b		20 1e 92	jsr $921e	                jsr w_swap
.a24e		20 69 86	jsr $8669	                jsr w_dup               ; allocate space for the string
.a251		20 2d 82	jsr $822d	                jsr w_allot
.a254		20 d7 8b	jsr $8bd7	                jsr w_move              ; .text < u bytes >
.a257		60		rts		z_sliteral:     rts
.a258						sliteral_runtime:
.a258		ca		dex		                dex             ; make space on the stack
.a259		ca		dex		                dex
.a25a		ca		dex		                dex
.a25b		ca		dex		                dex
.a25c		18		clc		                clc
.a25d		68		pla		                pla             ; LSB of return address
.a25e		85 25		sta $25		                sta tmp1
.a260		69 03		adc #$03	                adc #3          ; calculate string offset
.a262		95 02		sta $02,x	                sta 2,x         ; LSB of string address
.a264		7a		ply		                ply             ; MSB of address
.a265		84 26		sty $26		                sty tmp1+1
.a267		90 01		bcc $a26a	                bcc +
.a269		c8		iny		                iny
.a26a						+
.a26a		94 03		sty $03,x	                sty 3,x         ; MSB of string address
.a26c		a0 02		ldy #$02	                ldy #2          ; copy u to TOS
.a26e		b1 25		lda ($25),y	                lda (tmp1),y
.a270		95 01		sta $01,x	                sta 1,x         ; MSB of u
.a272		88		dey		                dey
.a273		b1 25		lda ($25),y	                lda (tmp1),y
.a275		95 00		sta $00,x	                sta 0,x         ; LSB of u
.a277		18		clc		                clc             ; A still has LSB of u
.a278		75 02		adc $02,x	                adc 2,x         ; LSB of continuation address
.a27a		85 25		sta $25		                sta tmp1
.a27c		b5 01		lda $01,x	                lda 1,x
.a27e		75 03		adc $03,x	                adc 3,x
.a280		85 26		sta $26		                sta tmp1+1
.a282		6c 25 00	jmp ($0025)	                jmp (tmp1)

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/assembler.asm

.a285						assembler:
.a285						asm_op_table:
.a285		20 85 a5	jsr $a585	        jsr asm_op_common
.a288		20 85 a5	jsr $a585	        jsr asm_op_common
.a28b		20 85 a5	jsr $a585	        jsr asm_op_common
.a28e		20 85 a5	jsr $a585	        jsr asm_op_common
.a291		20 85 a5	jsr $a585	        jsr asm_op_common
.a294		20 85 a5	jsr $a585	        jsr asm_op_common
.a297		20 85 a5	jsr $a585	        jsr asm_op_common
.a29a		20 85 a5	jsr $a585	        jsr asm_op_common
.a29d		20 85 a5	jsr $a585	        jsr asm_op_common
.a2a0		20 85 a5	jsr $a585	        jsr asm_op_common
.a2a3		20 85 a5	jsr $a585	        jsr asm_op_common
.a2a6		20 85 a5	jsr $a585	        jsr asm_op_common
.a2a9		20 85 a5	jsr $a585	        jsr asm_op_common
.a2ac		20 85 a5	jsr $a585	        jsr asm_op_common
.a2af		20 85 a5	jsr $a585	        jsr asm_op_common
.a2b2		20 85 a5	jsr $a585	        jsr asm_op_common
.a2b5		20 85 a5	jsr $a585	        jsr asm_op_common
.a2b8		20 85 a5	jsr $a585	        jsr asm_op_common
.a2bb		20 85 a5	jsr $a585	        jsr asm_op_common
.a2be		20 85 a5	jsr $a585	        jsr asm_op_common
.a2c1		20 85 a5	jsr $a585	        jsr asm_op_common
.a2c4		20 85 a5	jsr $a585	        jsr asm_op_common
.a2c7		20 85 a5	jsr $a585	        jsr asm_op_common
.a2ca		20 85 a5	jsr $a585	        jsr asm_op_common
.a2cd		20 85 a5	jsr $a585	        jsr asm_op_common
.a2d0		20 85 a5	jsr $a585	        jsr asm_op_common
.a2d3		20 85 a5	jsr $a585	        jsr asm_op_common
.a2d6		20 85 a5	jsr $a585	        jsr asm_op_common
.a2d9		20 85 a5	jsr $a585	        jsr asm_op_common
.a2dc		20 85 a5	jsr $a585	        jsr asm_op_common
.a2df		20 85 a5	jsr $a585	        jsr asm_op_common
.a2e2		20 85 a5	jsr $a585	        jsr asm_op_common
.a2e5		20 85 a5	jsr $a585	        jsr asm_op_common
.a2e8		20 85 a5	jsr $a585	        jsr asm_op_common
.a2eb		20 85 a5	jsr $a585	        jsr asm_op_common
.a2ee		20 85 a5	jsr $a585	        jsr asm_op_common
.a2f1		20 85 a5	jsr $a585	        jsr asm_op_common
.a2f4		20 85 a5	jsr $a585	        jsr asm_op_common
.a2f7		20 85 a5	jsr $a585	        jsr asm_op_common
.a2fa		20 85 a5	jsr $a585	        jsr asm_op_common
.a2fd		20 85 a5	jsr $a585	        jsr asm_op_common
.a300		20 85 a5	jsr $a585	        jsr asm_op_common
.a303		20 85 a5	jsr $a585	        jsr asm_op_common
.a306		20 85 a5	jsr $a585	        jsr asm_op_common
.a309		20 85 a5	jsr $a585	        jsr asm_op_common
.a30c		20 85 a5	jsr $a585	        jsr asm_op_common
.a30f		20 85 a5	jsr $a585	        jsr asm_op_common
.a312		20 85 a5	jsr $a585	        jsr asm_op_common
.a315		20 85 a5	jsr $a585	        jsr asm_op_common
.a318		20 85 a5	jsr $a585	        jsr asm_op_common
.a31b		20 85 a5	jsr $a585	        jsr asm_op_common
.a31e		20 85 a5	jsr $a585	        jsr asm_op_common
.a321		20 85 a5	jsr $a585	        jsr asm_op_common
.a324		20 85 a5	jsr $a585	        jsr asm_op_common
.a327		20 85 a5	jsr $a585	        jsr asm_op_common
.a32a		20 85 a5	jsr $a585	        jsr asm_op_common
.a32d		20 85 a5	jsr $a585	        jsr asm_op_common
.a330		20 85 a5	jsr $a585	        jsr asm_op_common
.a333		20 85 a5	jsr $a585	        jsr asm_op_common
.a336		20 85 a5	jsr $a585	        jsr asm_op_common
.a339		20 85 a5	jsr $a585	        jsr asm_op_common
.a33c		20 85 a5	jsr $a585	        jsr asm_op_common
.a33f		20 85 a5	jsr $a585	        jsr asm_op_common
.a342		20 85 a5	jsr $a585	        jsr asm_op_common
.a345		20 85 a5	jsr $a585	        jsr asm_op_common
.a348		20 85 a5	jsr $a585	        jsr asm_op_common
.a34b		20 85 a5	jsr $a585	        jsr asm_op_common
.a34e		20 85 a5	jsr $a585	        jsr asm_op_common
.a351		20 85 a5	jsr $a585	        jsr asm_op_common
.a354		20 85 a5	jsr $a585	        jsr asm_op_common
.a357		20 85 a5	jsr $a585	        jsr asm_op_common
.a35a		20 85 a5	jsr $a585	        jsr asm_op_common
.a35d		20 85 a5	jsr $a585	        jsr asm_op_common
.a360		20 85 a5	jsr $a585	        jsr asm_op_common
.a363		20 85 a5	jsr $a585	        jsr asm_op_common
.a366		20 85 a5	jsr $a585	        jsr asm_op_common
.a369		20 85 a5	jsr $a585	        jsr asm_op_common
.a36c		20 85 a5	jsr $a585	        jsr asm_op_common
.a36f		20 85 a5	jsr $a585	        jsr asm_op_common
.a372		20 85 a5	jsr $a585	        jsr asm_op_common
.a375		20 85 a5	jsr $a585	        jsr asm_op_common
.a378		20 85 a5	jsr $a585	        jsr asm_op_common
.a37b		20 85 a5	jsr $a585	        jsr asm_op_common
.a37e		20 85 a5	jsr $a585	        jsr asm_op_common
.a381		20 85 a5	jsr $a585	        jsr asm_op_common
.a384		20 85 a5	jsr $a585	        jsr asm_op_common
.a387		20 85 a5	jsr $a585	        jsr asm_op_common
.a38a		20 85 a5	jsr $a585	        jsr asm_op_common
.a38d		20 85 a5	jsr $a585	        jsr asm_op_common
.a390		20 85 a5	jsr $a585	        jsr asm_op_common
.a393		20 85 a5	jsr $a585	        jsr asm_op_common
.a396		20 85 a5	jsr $a585	        jsr asm_op_common
.a399		20 85 a5	jsr $a585	        jsr asm_op_common
.a39c		20 85 a5	jsr $a585	        jsr asm_op_common
.a39f		20 85 a5	jsr $a585	        jsr asm_op_common
.a3a2		20 85 a5	jsr $a585	        jsr asm_op_common
.a3a5		20 85 a5	jsr $a585	        jsr asm_op_common
.a3a8		20 85 a5	jsr $a585	        jsr asm_op_common
.a3ab		20 85 a5	jsr $a585	        jsr asm_op_common
.a3ae		20 85 a5	jsr $a585	        jsr asm_op_common
.a3b1		20 85 a5	jsr $a585	        jsr asm_op_common
.a3b4		20 85 a5	jsr $a585	        jsr asm_op_common
.a3b7		20 85 a5	jsr $a585	        jsr asm_op_common
.a3ba		20 85 a5	jsr $a585	        jsr asm_op_common
.a3bd		20 85 a5	jsr $a585	        jsr asm_op_common
.a3c0		20 85 a5	jsr $a585	        jsr asm_op_common
.a3c3		20 85 a5	jsr $a585	        jsr asm_op_common
.a3c6		20 85 a5	jsr $a585	        jsr asm_op_common
.a3c9		20 85 a5	jsr $a585	        jsr asm_op_common
.a3cc		20 85 a5	jsr $a585	        jsr asm_op_common
.a3cf		20 85 a5	jsr $a585	        jsr asm_op_common
.a3d2		20 85 a5	jsr $a585	        jsr asm_op_common
.a3d5		20 85 a5	jsr $a585	        jsr asm_op_common
.a3d8		20 85 a5	jsr $a585	        jsr asm_op_common
.a3db		20 85 a5	jsr $a585	        jsr asm_op_common
.a3de		20 85 a5	jsr $a585	        jsr asm_op_common
.a3e1		20 85 a5	jsr $a585	        jsr asm_op_common
.a3e4		20 85 a5	jsr $a585	        jsr asm_op_common
.a3e7		20 85 a5	jsr $a585	        jsr asm_op_common
.a3ea		20 85 a5	jsr $a585	        jsr asm_op_common
.a3ed		20 85 a5	jsr $a585	        jsr asm_op_common
.a3f0		20 85 a5	jsr $a585	        jsr asm_op_common
.a3f3		20 85 a5	jsr $a585	        jsr asm_op_common
.a3f6		20 85 a5	jsr $a585	        jsr asm_op_common
.a3f9		20 85 a5	jsr $a585	        jsr asm_op_common
.a3fc		20 85 a5	jsr $a585	        jsr asm_op_common
.a3ff		20 85 a5	jsr $a585	        jsr asm_op_common
.a402		20 85 a5	jsr $a585	        jsr asm_op_common
.a405		20 85 a5	jsr $a585	        jsr asm_op_common
.a408		20 85 a5	jsr $a585	        jsr asm_op_common
.a40b		20 85 a5	jsr $a585	        jsr asm_op_common
.a40e		20 85 a5	jsr $a585	        jsr asm_op_common
.a411		20 85 a5	jsr $a585	        jsr asm_op_common
.a414		20 85 a5	jsr $a585	        jsr asm_op_common
.a417		20 85 a5	jsr $a585	        jsr asm_op_common
.a41a		20 85 a5	jsr $a585	        jsr asm_op_common
.a41d		20 85 a5	jsr $a585	        jsr asm_op_common
.a420		20 85 a5	jsr $a585	        jsr asm_op_common
.a423		20 85 a5	jsr $a585	        jsr asm_op_common
.a426		20 85 a5	jsr $a585	        jsr asm_op_common
.a429		20 85 a5	jsr $a585	        jsr asm_op_common
.a42c		20 85 a5	jsr $a585	        jsr asm_op_common
.a42f		20 85 a5	jsr $a585	        jsr asm_op_common
.a432		20 85 a5	jsr $a585	        jsr asm_op_common
.a435		20 85 a5	jsr $a585	        jsr asm_op_common
.a438		20 85 a5	jsr $a585	        jsr asm_op_common
.a43b		20 85 a5	jsr $a585	        jsr asm_op_common
.a43e		20 85 a5	jsr $a585	        jsr asm_op_common
.a441		20 85 a5	jsr $a585	        jsr asm_op_common
.a444		20 85 a5	jsr $a585	        jsr asm_op_common
.a447		20 85 a5	jsr $a585	        jsr asm_op_common
.a44a		20 85 a5	jsr $a585	        jsr asm_op_common
.a44d		20 85 a5	jsr $a585	        jsr asm_op_common
.a450		20 85 a5	jsr $a585	        jsr asm_op_common
.a453		20 85 a5	jsr $a585	        jsr asm_op_common
.a456		20 85 a5	jsr $a585	        jsr asm_op_common
.a459		20 85 a5	jsr $a585	        jsr asm_op_common
.a45c		20 85 a5	jsr $a585	        jsr asm_op_common
.a45f		20 85 a5	jsr $a585	        jsr asm_op_common
.a462		20 85 a5	jsr $a585	        jsr asm_op_common
.a465		20 85 a5	jsr $a585	        jsr asm_op_common
.a468		20 85 a5	jsr $a585	        jsr asm_op_common
.a46b		20 85 a5	jsr $a585	        jsr asm_op_common
.a46e		20 85 a5	jsr $a585	        jsr asm_op_common
.a471		20 85 a5	jsr $a585	        jsr asm_op_common
.a474		20 85 a5	jsr $a585	        jsr asm_op_common
.a477		20 85 a5	jsr $a585	        jsr asm_op_common
.a47a		20 85 a5	jsr $a585	        jsr asm_op_common
.a47d		20 85 a5	jsr $a585	        jsr asm_op_common
.a480		20 85 a5	jsr $a585	        jsr asm_op_common
.a483		20 85 a5	jsr $a585	        jsr asm_op_common
.a486		20 85 a5	jsr $a585	        jsr asm_op_common
.a489		20 85 a5	jsr $a585	        jsr asm_op_common
.a48c		20 85 a5	jsr $a585	        jsr asm_op_common
.a48f		20 85 a5	jsr $a585	        jsr asm_op_common
.a492		20 85 a5	jsr $a585	        jsr asm_op_common
.a495		20 85 a5	jsr $a585	        jsr asm_op_common
.a498		20 85 a5	jsr $a585	        jsr asm_op_common
.a49b		20 85 a5	jsr $a585	        jsr asm_op_common
.a49e		20 85 a5	jsr $a585	        jsr asm_op_common
.a4a1		20 85 a5	jsr $a585	        jsr asm_op_common
.a4a4		20 85 a5	jsr $a585	        jsr asm_op_common
.a4a7		20 85 a5	jsr $a585	        jsr asm_op_common
.a4aa		20 85 a5	jsr $a585	        jsr asm_op_common
.a4ad		20 85 a5	jsr $a585	        jsr asm_op_common
.a4b0		20 85 a5	jsr $a585	        jsr asm_op_common
.a4b3		20 85 a5	jsr $a585	        jsr asm_op_common
.a4b6		20 85 a5	jsr $a585	        jsr asm_op_common
.a4b9		20 85 a5	jsr $a585	        jsr asm_op_common
.a4bc		20 85 a5	jsr $a585	        jsr asm_op_common
.a4bf		20 85 a5	jsr $a585	        jsr asm_op_common
.a4c2		20 85 a5	jsr $a585	        jsr asm_op_common
.a4c5		20 85 a5	jsr $a585	        jsr asm_op_common
.a4c8		20 85 a5	jsr $a585	        jsr asm_op_common
.a4cb		20 85 a5	jsr $a585	        jsr asm_op_common
.a4ce		20 85 a5	jsr $a585	        jsr asm_op_common
.a4d1		20 85 a5	jsr $a585	        jsr asm_op_common
.a4d4		20 85 a5	jsr $a585	        jsr asm_op_common
.a4d7		20 85 a5	jsr $a585	        jsr asm_op_common
.a4da		20 85 a5	jsr $a585	        jsr asm_op_common
.a4dd		20 85 a5	jsr $a585	        jsr asm_op_common
.a4e0		20 85 a5	jsr $a585	        jsr asm_op_common
.a4e3		20 85 a5	jsr $a585	        jsr asm_op_common
.a4e6		20 85 a5	jsr $a585	        jsr asm_op_common
.a4e9		20 85 a5	jsr $a585	        jsr asm_op_common
.a4ec		20 85 a5	jsr $a585	        jsr asm_op_common
.a4ef		20 85 a5	jsr $a585	        jsr asm_op_common
.a4f2		20 85 a5	jsr $a585	        jsr asm_op_common
.a4f5		20 85 a5	jsr $a585	        jsr asm_op_common
.a4f8		20 85 a5	jsr $a585	        jsr asm_op_common
.a4fb		20 85 a5	jsr $a585	        jsr asm_op_common
.a4fe		20 85 a5	jsr $a585	        jsr asm_op_common
.a501		20 85 a5	jsr $a585	        jsr asm_op_common
.a504		20 85 a5	jsr $a585	        jsr asm_op_common
.a507		20 85 a5	jsr $a585	        jsr asm_op_common
.a50a		20 85 a5	jsr $a585	        jsr asm_op_common
.a50d		20 85 a5	jsr $a585	        jsr asm_op_common
.a510		20 85 a5	jsr $a585	        jsr asm_op_common
.a513		20 85 a5	jsr $a585	        jsr asm_op_common
.a516		20 85 a5	jsr $a585	        jsr asm_op_common
.a519		20 85 a5	jsr $a585	        jsr asm_op_common
.a51c		20 85 a5	jsr $a585	        jsr asm_op_common
.a51f		20 85 a5	jsr $a585	        jsr asm_op_common
.a522		20 85 a5	jsr $a585	        jsr asm_op_common
.a525		20 85 a5	jsr $a585	        jsr asm_op_common
.a528		20 85 a5	jsr $a585	        jsr asm_op_common
.a52b		20 85 a5	jsr $a585	        jsr asm_op_common
.a52e		20 85 a5	jsr $a585	        jsr asm_op_common
.a531		20 85 a5	jsr $a585	        jsr asm_op_common
.a534		20 85 a5	jsr $a585	        jsr asm_op_common
.a537		20 85 a5	jsr $a585	        jsr asm_op_common
.a53a		20 85 a5	jsr $a585	        jsr asm_op_common
.a53d		20 85 a5	jsr $a585	        jsr asm_op_common
.a540		20 85 a5	jsr $a585	        jsr asm_op_common
.a543		20 85 a5	jsr $a585	        jsr asm_op_common
.a546		20 85 a5	jsr $a585	        jsr asm_op_common
.a549		20 85 a5	jsr $a585	        jsr asm_op_common
.a54c		20 85 a5	jsr $a585	        jsr asm_op_common
.a54f		20 85 a5	jsr $a585	        jsr asm_op_common
.a552		20 85 a5	jsr $a585	        jsr asm_op_common
.a555		20 85 a5	jsr $a585	        jsr asm_op_common
.a558		20 85 a5	jsr $a585	        jsr asm_op_common
.a55b		20 85 a5	jsr $a585	        jsr asm_op_common
.a55e		20 85 a5	jsr $a585	        jsr asm_op_common
.a561		20 85 a5	jsr $a585	        jsr asm_op_common
.a564		20 85 a5	jsr $a585	        jsr asm_op_common
.a567		20 85 a5	jsr $a585	        jsr asm_op_common
.a56a		20 85 a5	jsr $a585	        jsr asm_op_common
.a56d		20 85 a5	jsr $a585	        jsr asm_op_common
.a570		20 85 a5	jsr $a585	        jsr asm_op_common
.a573		20 85 a5	jsr $a585	        jsr asm_op_common
.a576		20 85 a5	jsr $a585	        jsr asm_op_common
.a579		20 85 a5	jsr $a585	        jsr asm_op_common
.a57c		20 85 a5	jsr $a585	        jsr asm_op_common
.a57f		20 85 a5	jsr $a585	        jsr asm_op_common
.a582		20 85 a5	jsr $a585	        jsr asm_op_common
.a585						asm_op_common:
.a585		68		pla		                pla     ; LSB contains op code
.a586		7a		ply		                ply     ; MSB is ignored
.a587		c9 4c		cmp #$4c	                cmp #$4c
.a589		d0 03		bne $a58e	                bne +
.a58b		4c a2 97	jmp $97a2	                jmp cmpl_jump_tos
.a58e						+
.a58e		a8		tay		                tay
.a58f		20 bc 97	jsr $97bc	                jsr cmpl_a
.a592		98		tya		                tya
.a593		20 dd a5	jsr $a5dd	                jsr op_length           ; get opcode length in Y
.a596		88		dey		                dey
.a597		f0 12		beq $a5ab	                beq _done
.a599		20 12 d1	jsr $d112	                jsr underflow_1
.a59c		b5 00		lda $00,x	                lda 0,x
.a59e		20 bc 97	jsr $97bc	                jsr cmpl_a      ; does not use Y
.a5a1		88		dey		                dey
.a5a2		f0 05		beq $a5a9	                beq _done_drop
.a5a4		b5 01		lda $01,x	                lda 1,x
.a5a6		20 bc 97	jsr $97bc	                jsr cmpl_a      ; Fall through to _done_drop
.a5a9						_done_drop:
.a5a9		e8		inx		                inx
.a5aa		e8		inx		                inx             ; Fall through to _done
.a5ab						_done:
.a5ab		60		rts		                rts             ; Returns to original caller
.a5ac						op_find_nt:
.a5ac		38		sec		                sec
.a5ad		e9 02		sbc #$02	                sbc #2
.a5af		85 23		sta $23		                sta tmptos
.a5b1		a9 6f		lda #$6f	                lda #<nt_asm_first      ; first candidate NT
.a5b3		85 25		sta $25		                sta tmp1
.a5b5		a9 c3		lda #$c3	                lda #>nt_asm_first
.a5b7		85 26		sta $26		                sta tmp1+1
.a5b9						_loop:
.a5b9		a0 04		ldy #$04	                ldy #4
.a5bb		b1 25		lda ($25),y	                lda (tmp1),y            ; check LSB of this words XT
.a5bd		c5 23		cmp $23		                cmp tmptos
.a5bf		f0 1b		beq $a5dc	                beq _found
.a5c1		a0 02		ldy #$02	                ldy #2
.a5c3		b1 25		lda ($25),y	                lda (tmp1),y
.a5c5		48		pha		                pha
.a5c6		c8		iny		                iny
.a5c7		b1 25		lda ($25),y	                lda (tmp1),y
.a5c9		85 26		sta $26		                sta tmp1+1
.a5cb		68		pla		                pla
.a5cc		85 25		sta $25		                sta tmp1
.a5ce		c9 37		cmp #$37	                cmp #<nt_asm_last
.a5d0		d0 e7		bne $a5b9	                bne _loop
.a5d2		a5 26		lda $26		                lda tmp1+1
.a5d4		c9 cc		cmp #$cc	                cmp #>nt_asm_last
.a5d6		d0 e1		bne $a5b9	                bne _loop
.a5d8		64 25		stz $25		                stz tmp1
.a5da		64 26		stz $26		                stz tmp1+1
.a5dc						        _found:
.a5dc		60		rts		                rts
.a5dd						op_length:
.a5dd		48		pha		                pha
.a5de		29 0f		and #$0f	                and #$f
.a5e0		a8		tay		                tay
.a5e1		b9 e9 a5	lda $a5e9,y	                lda _lengths,y  ; lookup the length
.a5e4		30 13		bmi $a5f9	                bmi _special    ; $x0 and $x9 are special
.a5e6		7a		ply		                ply             ; discard the opcode
.a5e7		a8		tay		                tay             ; return the length
.a5e8		60		rts		                rts
>a5e9		80 02 02 01 02 02 02 02		_lengths:       .byte $80,2,2,1,2,2,2,2, 1,$81,1,1,3,3,3,3
>a5f1		01 81 01 01 03 03 03 03
.a5f9						_special:
.a5f9		a0 01		ldy #$01	                ldy #1          ; guess length 1
.a5fb		6a		ror a		                ror             ; test bit 0: C=0 means $x0, C=1 means $x9
.a5fc		68		pla		                pla             ; recover the opcode
.a5fd		b0 09		bcs $a608	                bcs _x9
.a5ff		89 9f		bit #$9f	                bit #%10011111  ; is opcode 0/20/40/60 ?
.a601		d0 0a		bne $a60d	                bne _two
.a603		0a		asl a		                asl             ; test bit 6 by shifting to sign bit
.a604		30 08		bmi $a60e	                bmi _one        ; bit 6 set means $40 or $60
.a606		4a		lsr a		                lsr
.a607		4a		lsr a		                lsr
.a608						_x9:
.a608		29 10		and #$10	                and #$10
.a60a		f0 01		beq $a60d	                beq _two
.a60c		c8		iny		_three:         iny
.a60d		c8		iny		_two:           iny
.a60e		60		rts		_one:           rts
.a60f						xt_asm_push_a:
.a60f		a0 00		ldy #$00	                ldy #0
.a611						_loop:
.a611		b9 c9 cf	lda $cfc9,y	                lda push_a_tos,y
.a614		20 bc 97	jsr $97bc	                jsr cmpl_a      ; does not change Y
.a617		c8		iny		                iny
.a618		c0 06		cpy #$06	                cpy #z_push_a_tos - push_a_tos
.a61a		d0 f5		bne $a611	                bne _loop
.a61c						_done:
.a61c						z_asm_push_a:
.a61c		60		rts		                rts
.a61d						xt_asm_back_jump:
.a61d						z_asm_back_jump:
.a61d		60		rts		                rts
.a61e						xt_asm_back_branch:
.a61e		20 e7 88	jsr $88e7	                jsr w_here             ; ( addr-l addr-h )
.a621		20 bb 8b	jsr $8bbb	                jsr w_minus            ; ( offset )
.a624		3a		dec a		                dea
.a625		3a		dec a		                dea
.a626						z_asm_back_branch:
.a626		60		rts		                rts
.a627						assembler_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/disasm.asm

.a627						xt_disasm:
.a627		20 17 d1	jsr $d117	                jsr underflow_2
.a62a						w_disasm:
.a62a		20 2e a6	jsr $a62e	                jsr disassembler
.a62d		60		rts		z_disasm:       rts
.a62e						disassembler:
.a62e		20 ef 83	jsr $83ef	                jsr w_cr            ; ( addr u )
.a631						_byte_loop:
.a631		20 db 8c	jsr $8cdb	                jsr w_over          ; ( addr u addr )
.a634		20 df 94	jsr $94df	                jsr w_u_dot         ; ( addr u )
.a637		20 b5 91	jsr $91b5	                jsr w_space
.a63a		b5 02		lda $02,x	                lda 2,x
.a63c		85 27		sta $27		                sta tmp2
.a63e		b5 03		lda $03,x	                lda 3,x
.a640		85 28		sta $28		                sta tmp2+1
.a642		b2 27		lda ($27)	                lda (tmp2)          ; get opcode that addr points to
.a644		85 2d		sta $2d		                sta scratch         ; save a copy
.a646		20 ac a5	jsr $a5ac	                jsr op_find_nt      ; get NT or 0 in tmp1
.a649		a5 26		lda $26		                lda tmp1+1
.a64b		d0 08		bne $a655	                bne _found          ; MSB 0 means we failed
.a64d		a9 b6		lda #$b6	                lda #>nt_question
.a64f		48		pha		                pha
.a650		a9 05		lda #$05	                lda #<nt_question
.a652		48		pha		                pha
.a653		80 29		bra $a67e	                bra _no_operand
.a655						_found:
.a655		48		pha		                pha                 ; stash the NT for later
.a656		a5 25		lda $25		                lda tmp1
.a658		48		pha		                pha
.a659		a5 2d		lda $2d		                lda scratch         ; fetch the opcode
.a65b		20 dd a5	jsr $a5dd	                jsr op_length       ; get length Y = 1,2,3
.a65e		88		dey		                dey
.a65f		f0 1d		beq $a67e	                beq _no_operand
.a661		98		tya		                tya
.a662		20 c9 cf	jsr $cfc9	                jsr push_a_tos      ; put operand byte count on stack
.a665		64 2f		stz $2f		                stz scratch+2       ; set MSB to zero in case there isn't one
.a667						_copy_operand:
.a667		b1 27		lda ($27),y	                lda (tmp2),y
.a669		99 2d 00	sta $002d,y	                sta scratch,y
.a66c		88		dey		                dey
.a66d		d0 f8		bne $a667	                bne _copy_operand
.a66f		20 1a a2	jsr $a21a	                jsr w_slash_string  ; drop the operand byte(s)
.a672		ca		dex		                dex
.a673		ca		dex		                dex
.a674		a5 2e		lda $2e		                lda scratch+1       ; add operand to stack
.a676		95 00		sta $00,x	                sta 0,x
.a678		a5 2f		lda $2f		                lda scratch+2
.a67a		95 01		sta $01,x	                sta 1,x
.a67c		38		sec		                sec                 ; flag operand
>a67d		24				                .byte OpBITzp       ; mask the clc
.a67e						_no_operand:
.a67e		18		clc		                clc                 ; flag no operand
.a67f		a9 05		lda #$05	                lda #5
.a681		20 c9 cf	jsr $cfc9	                jsr push_a_tos      ; ( addr+n u-n [opr] 5 )
.a684		b0 05		bcs $a68b	                bcs _print_operand
.a686		20 be 91	jsr $91be	                jsr w_spaces        ; no operand, just indent
.a689		80 03		bra $a68e	                bra _print_mnemonic
.a68b						_print_operand:
.a68b		20 eb 94	jsr $94eb	                jsr w_u_dot_r       ; right-justify the operand
.a68e						_print_mnemonic:
.a68e		ca		dex		                dex
.a68f		ca		dex		                dex
.a690		68		pla		                pla                 ; put NT on stack
.a691		95 00		sta $00,x	                sta 0,x
.a693		68		pla		                pla
.a694		95 01		sta $01,x	                sta 1,x
.a696		20 b5 91	jsr $91b5	                jsr w_space
.a699		20 ce 9c	jsr $9cce	                jsr w_name_to_string
.a69c		20 b4 94	jsr $94b4	                jsr w_type
.a69f		a5 2d		lda $2d		                lda scratch
.a6a1		c9 20		cmp #$20	                cmp #OpJSR
.a6a3		d0 12		bne $a6b7	                bne _not_jsr
.a6a5		a9 05		lda #$05	                lda #5
.a6a7		20 c9 cf	jsr $cfc9	                jsr push_a_tos
.a6aa		20 be 91	jsr $91be	                jsr w_spaces
.a6ad		20 41 a7	jsr $a741	                jsr disasm_special
.a6b0		b0 39		bcs $a6eb	                bcs _printing_done
.a6b2		20 04 a7	jsr $a704	                jsr disasm_jsr
.a6b5		b0 34		bcs $a6eb	                bcs _printing_done
.a6b7						_not_jsr:
.a6b7		c9 80		cmp #$80	                cmp #OpBRA            ; is it bra?
.a6b9		f0 06		beq $a6c1	                beq _is_rel
.a6bb		29 1f		and #$1f	                and #$1F
.a6bd		49 10		eor #$10	                eor #$10            ; do bottom five bits match xxx10000 ?
.a6bf		d0 2a		bne $a6eb	                bne _printing_done
.a6c1						_is_rel:
.a6c1		a0 76		ldy #$76	                ldy #'v'            ; we'll indicate branch forward or back with v or ^
.a6c3		a5 2e		lda $2e		                lda scratch+1
.a6c5		20 c9 cf	jsr $cfc9	                jsr push_a_tos
.a6c8		10 04		bpl $a6ce	                bpl +
.a6ca		d6 01		dec $01,x	                dec 1,x             ; for negative offsets extend the sign bit so add works out
.a6cc		a0 5e		ldy #$5e	                ldy #'^'            ; it's a backward branch
.a6ce		38		sec		+               sec                 ; start counting from address after opcode
.a6cf		75 04		adc $04,x	                adc 4,x
.a6d1		95 00		sta $00,x	                sta 0,x
.a6d3		b5 01		lda $01,x	                lda 1,x
.a6d5		75 05		adc $05,x	                adc 5,x
.a6d7		95 01		sta $01,x	                sta 1,x
.a6d9		5a		phy		                phy                 ; save the direction indicator
.a6da		a9 09		lda #$09	                lda #9
.a6dc		20 c9 cf	jsr $cfc9	                jsr push_a_tos
.a6df		20 eb 94	jsr $94eb	                jsr w_u_dot_r      ; print the destination with 5 leading spaces
.a6e2		a9 20		lda #$20	                lda #AscSP          ; print space and branch direction indicator
.a6e4		20 93 86	jsr $8693	                jsr emit_a
.a6e7		68		pla		                pla
.a6e8		20 93 86	jsr $8693	                jsr emit_a
.a6eb						_printing_done:
.a6eb		20 ef 83	jsr $83ef	                jsr w_cr
.a6ee		20 0b 9e	jsr $9e0b	                jsr w_one
.a6f1		20 1a a2	jsr $a21a	                jsr w_slash_string      ; ( addr u -- addr+1 u-1 )
.a6f4		b5 00		lda $00,x	                lda 0,x                 ; All done?
.a6f6		15 01		ora $01,x	                ora 1,x
.a6f8		f0 07		beq $a701	                beq _done
.a6fa		b5 01		lda $01,x	                lda 1,x                 ; Catch mid-instruction ranges
.a6fc		30 03		bmi $a701	                bmi _done
.a6fe		4c 31 a6	jmp $a631	                jmp _byte_loop          ; out of range for BRA
.a701						_done:
.a701		4c 97 93	jmp $9397	                jmp w_two_drop         ; JSR/RTS
.a704						disasm_jsr:
.a704		ca		dex		                dex
.a705		ca		dex		                dex
.a706		a5 2e		lda $2e		                lda scratch+1
.a708		95 00		sta $00,x	                sta 0,x
.a70a		a5 2f		lda $2f		                lda scratch+2
.a70c		95 01		sta $01,x	                sta 1,x
.a70e		20 2b 9c	jsr $9c2b	                jsr w_int_to_name
.a711		b5 00		lda $00,x	                lda 0,x
.a713		15 01		ora $01,x	                ora 1,x
.a715		d0 1e		bne $a735	                bne _found_nt
.a717		a5 2e		lda $2e		                lda scratch+1
.a719		38		sec		                sec
.a71a		e9 03		sbc #$03	                sbc #3         ; Subtract 3 this time.
.a71c		95 00		sta $00,x	                sta 0,x
.a71e		a5 2f		lda $2f		                lda scratch+2
.a720		e9 00		sbc #$00	                sbc #0         ; Subtract the carry if needed.
.a722		95 01		sta $01,x	                sta 1,x
.a724		20 69 86	jsr $8669	                jsr w_dup
.a727		20 6f 97	jsr $976f	                jsr has_uf_check
.a72a		90 11		bcc $a73d	                bcc _no_nt
.a72c		20 2b 9c	jsr $9c2b	                jsr w_int_to_name     ; Try looking again
.a72f		b5 00		lda $00,x	                lda 0,x
.a731		15 01		ora $01,x	                ora 1,x
.a733		f0 08		beq $a73d	                beq _no_nt
.a735						_found_nt:
.a735		20 ce 9c	jsr $9cce	                jsr w_name_to_string
.a738		20 b4 94	jsr $94b4	                jsr w_type
.a73b		38		sec		                sec
.a73c		60		rts		                rts
.a73d						_no_nt:
.a73d		e8		inx		                inx
.a73e		e8		inx		                inx
.a73f		18		clc		                clc
.a740		60		rts		                rts
.a741						disasm_special:
.a741		a0 2c		ldy #$2c	                ldy #(_end_handlers - _special_handlers - 4)
.a743		b9 e4 a7	lda $a7e4,y	_check:         lda _special_handlers,y
.a746		c5 2e		cmp $2e		                cmp scratch+1
.a748		d0 07		bne $a751	                bne _next
.a74a		b9 e5 a7	lda $a7e5,y	                lda _special_handlers+1,y
.a74d		c5 2f		cmp $2f		                cmp scratch+2
.a74f		f0 08		beq $a759	                beq _found_handler
.a751		88		dey		_next:          dey
.a752		88		dey		                dey
.a753		88		dey		                dey
.a754		88		dey		                dey
.a755		10 ec		bpl $a743	                bpl _check
.a757		18		clc		                clc
.a758		60		rts		                rts
.a759						_found_handler:
.a759		84 32		sty $32		                sty scratch+5               ; store the offset for later
.a75b		b9 e7 a7	lda $a7e7,y	                lda _special_handlers+3,y   ; payload + prefix
.a75e		48		pha		                pha                         ; stash a copy for payload later
.a75f		4a		lsr a		                lsr
.a760		4a		lsr a		                lsr
.a761		f0 06		beq $a769	                beq _no_prefix
.a763		18		clc		                clc
.a764		69 20		adc #$20	                adc #32
.a766		20 93 86	jsr $8693	                jsr emit_a                  ; print the char stored as (ch - 32) << 2
.a769						_no_prefix:
.a769		b9 e6 a7	lda $a7e6,y	                lda _special_handlers+2,y   ; string index
.a76c		20 4e d1	jsr $d14e	                jsr print_string_no_lf
.a76f		68		pla		                pla
.a770		29 03		and #$03	                and #3                      ; payload is 0, 1 or 2 words
.a772		f0 4b		beq $a7bf	                beq _done
.a774		c9 03		cmp #$03	                cmp #3                      ; where 3 means a double-word
.a776		d0 05		bne $a77d	                bne _show_payload
.a778		20 d0 a7	jsr $a7d0	                jsr _print_2literal
.a77b		80 42		bra $a7bf	                bra _done
.a77d						_show_payload:
.a77d		48		pha		                pha
.a77e		20 c1 a7	jsr $a7c1	                jsr _print_literal
.a781		68		pla		                pla
.a782		3a		dec a		                dea
.a783		d0 f8		bne $a77d	                bne _show_payload
.a785		a5 32		lda $32		                lda scratch+5
.a787		c9 14		cmp #$14	                cmp #_sliteral_handler - _special_handlers
.a789		d0 34		bne $a7bf	                bne _done
.a78b		20 db 8c	jsr $8cdb	                jsr w_over
.a78e		20 b3 8c	jsr $8cb3	                jsr w_one_minus
.a791		20 e9 87	jsr $87e9	                jsr w_fetch         ; ( addr n u )
.a794		b5 01		lda $01,x	                lda 1,x
.a796		d0 06		bne $a79e	                bne _truncate
.a798		b5 00		lda $00,x	                lda 0,x
.a79a		c9 10		cmp #$10	                cmp #16
.a79c		90 02		bcc $a7a0	                bcc +               ; length < 16?
.a79e						_truncate:
.a79e		a9 12		lda #$12	                lda #18             ; extra chars for ellipses
.a7a0						+
.a7a0		85 1e		sta $1e		                sta tmpdsp
.a7a2		b5 04		lda $04,x	                lda 4,x             ; tmp1 points 1 before string
.a7a4		85 25		sta $25		                sta tmp1
.a7a6		b5 05		lda $05,x	                lda 5,x
.a7a8		85 26		sta $26		                sta tmp1+1
.a7aa		a0 01		ldy #$01	                ldy #1
.a7ac						_snippet:
.a7ac		b1 25		lda ($25),y	                lda (tmp1),y
.a7ae		c0 10		cpy #$10	                cpy #16
.a7b0		90 02		bcc $a7b4	                bcc +
.a7b2		a9 2e		lda #$2e	                lda #'.'
.a7b4						+
.a7b4		20 93 86	jsr $8693	                jsr emit_a
.a7b7		c8		iny		                iny
.a7b8		c6 1e		dec $1e		                dec tmpdsp
.a7ba		d0 f0		bne $a7ac	                bne _snippet
.a7bc		20 1a a2	jsr $a21a	                jsr w_slash_string
.a7bf		38		sec		_done:          sec
.a7c0		60		rts		                rts
.a7c1						_print_literal:
.a7c1		20 db 8c	jsr $8cdb	                jsr w_over
.a7c4		20 bf 8c	jsr $8cbf	                jsr w_one_plus              ; ( addr u addr+1 )
.a7c7		20 3f 99	jsr $993f	                jsr w_question              ; Print the value at the address
.a7ca		20 3c 9e	jsr $9e3c	                jsr w_two
.a7cd		4c 1a a2	jmp $a21a	                jmp w_slash_string          ; leaving (addr+2 u-2)
.a7d0						_print_2literal:
.a7d0		20 db 8c	jsr $8cdb	                jsr w_over                  ; ( addr u addr+1 )
.a7d3		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.a7d6		20 b7 93	jsr $93b7	                jsr w_two_fetch
.a7d9		20 fd 9e	jsr $9efd	                jsr w_d_dot                 ; fetch and print double word
.a7dc		a9 04		lda #$04	                lda #4
.a7de		20 c9 cf	jsr $cfc9	                jsr push_a_tos
.a7e1		4c 1a a2	jmp $a21a	                jmp w_slash_string          ; ( addr+4 u-4 )
.a7e4						_special_handlers:
>a7e4		12 d1				    .word underflow_1
>a7e6		0b 44				        .byte str_disasm_sdc, 0 + ('1'-32)*4
>a7e8		17 d1				    .word underflow_2
>a7ea		0b 48				        .byte str_disasm_sdc, 0 + ('2'-32)*4
>a7ec		1c d1				    .word underflow_3
>a7ee		0b 4c				        .byte str_disasm_sdc, 0 + ('3'-32)*4
>a7f0		21 d1				    .word underflow_4
>a7f2		0b 50				        .byte str_disasm_sdc, 0 + ('4'-32)*4
>a7f4		18 8a				    .word literal_runtime
>a7f6		0c 01				        .byte str_disasm_lit, 1
.a7f8						_sliteral_handler:
>a7f8		58 a2				    .word sliteral_runtime
>a7fa		0c cd				        .byte str_disasm_lit, 1 + ('S'-32)*4
>a7fc		eb 9f				    .word two_literal_runtime
>a7fe		0c 4b				        .byte str_disasm_lit, 3 + ('2'-32)*4
>a800		4e 98				    .word zero_branch_runtime
>a802		0d 01				        .byte str_disasm_0bra, 1
>a804		b0 8a				    .word loop_runtime
>a806		0e 01				        .byte str_disasm_loop, 1
>a808		c9 8a				    .word plus_loop_runtime
>a80a		0e 2d				        .byte str_disasm_loop, 1 + ('+'-32)*4
>a80c		82 85				    .word do_runtime
>a80e		0f 00				        .byte str_disasm_do, 0
>a810		6a 85				    .word question_do_runtime
>a812		0f 7d				        .byte str_disasm_do, 1 + ('?'-32)*4
.a814						_end_handlers:
.a814						disassembler_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/ed.asm

.a814						xt_ed:
.a814						w_ed:
.a814		20 18 a8	jsr $a818	                jsr ed6502      ; kept in separate file
.a817		60		rts		z_ed:           rts
=$0035						ed_head  = tmped    ; pointer to first list element (addr) (2 bytes)
=$0037						ed_cur   = tmped+2  ; current line number (1 is first line) (2 bytes)
=$0039						ed_flags = tmped+4  ; Flags used by ed, where
=$003a						ed_base  = tmped+5  ; used to hold BASE and put it back at the end.
.a818						ed6502:
.a818		a5 18		lda $18		                lda base
.a81a		85 3a		sta $3a		                sta ed_base
.a81c		a9 0a		lda #$0a	                lda #10
.a81e		85 18		sta $18		                sta base
.a820		64 35		stz $35		                stz ed_head
.a822		64 36		stz $36		                stz ed_head+1
.a824		64 37		stz $37		                stz ed_cur
.a826		64 38		stz $38		                stz ed_cur+1
.a828		64 39		stz $39		                stz ed_flags
.a82a		20 71 9e	jsr $9e71	                jsr w_zero
.a82d		20 71 9e	jsr $9e71	                jsr w_zero             ; ( addr-t u-t )
.a830		20 ef 83	jsr $83ef	                jsr w_cr
.a833						ed_input_loop:
.a833		a9 81		lda #$81	                lda #%10000001
.a835		14 39		trb $39		                trb ed_flags
.a837		20 12 ad	jsr $ad12	                jsr ed_get_input
.a83a		a5 0e		lda $0e		                lda ciblen
.a83c		d0 1f		bne $a85d	                bne _command_mode
.a83e		ca		dex		                dex
.a83f		ca		dex		                dex                     ; ( addr-t u-t ? )
.a840		a5 37		lda $37		                lda ed_cur
.a842		95 00		sta $00,x	                sta 0,x
.a844		a5 38		lda $38		                lda ed_cur+1
.a846		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t u )
.a848		a9 80		lda #$80	                lda #%10000000
.a84a		04 39		tsb $39		                tsb ed_flags
.a84c		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; ( addr-t u-t u+1 )
.a84f		20 2e ad	jsr $ad2e	                jsr ed_is_valid_line
.a852		b0 03		bcs $a857	                bcs +
.a854		4c 02 ad	jmp $ad02	                jmp ed_error_1drop
.a857						+
.a857		20 71 9e	jsr $9e71	                jsr w_zero             ; ( addr-t u-t u+1 0 )
.a85a		4c 28 a9	jmp $a928	                jmp _line_number_only_from_external
.a85d						_command_mode:
.a85d		20 71 9e	jsr $9e71	                jsr w_zero             ; parameter 1 is NOS ( addr-t u-t 0 )
.a860		20 71 9e	jsr $9e71	                jsr w_zero             ; parameter 2 is TOS ( addr-t u-t 0 0 )
.a863		b2 0c		lda ($0c)	                lda (cib)
.a865		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII '.'
.a867		d0 3a		bne $a8a3	                bne _prefix_dollar
.a869		20 23 ad	jsr $ad23	                jsr ed_have_text
.a86c		a5 37		lda $37		                lda ed_cur
.a86e		95 02		sta $02,x	                sta 2,x
.a870		a5 38		lda $38		                lda ed_cur+1
.a872		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.a874		a9 80		lda #$80	                lda #%10000000
.a876		04 39		tsb $39		                tsb ed_flags
.a878		a5 0e		lda $0e		                lda ciblen
.a87a		3a		dec a		                dea                     ; sets Z if A was 1
.a87b		d0 03		bne $a880	                bne +
.a87d		4c 28 a9	jmp $a928	                jmp _line_number_only_from_external
.a880						+
.a880		ca		dex		                dex
.a881		ca		dex		                dex
.a882		ca		dex		                dex
.a883		ca		dex		                dex
.a884		a5 0c		lda $0c		                lda cib
.a886		95 02		sta $02,x	                sta 2,x
.a888		a5 0d		lda $0d		                lda cib+1
.a88a		95 03		sta $03,x	                sta 3,x
.a88c		a5 0e		lda $0e		                lda ciblen
.a88e		95 00		sta $00,x	                sta 0,x
.a890		a5 0f		lda $0f		                lda ciblen+1
.a892		95 01		sta $01,x	                sta 1,x
.a894		20 b3 8c	jsr $8cb3	                jsr w_one_minus        ; ( addr-t u-t para1 0 addr u-1 )
.a897		20 1e 92	jsr $921e	                jsr w_swap             ; ( addr-t u-t para1 0 u-1 addr )
.a89a		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; ( addr-t u-t para1 0 u-1 addr+1 )
.a89d		20 1e 92	jsr $921e	                jsr w_swap             ; ( addr-t u-t para1 0 addr+1 u-1 )
.a8a0		4c 80 a9	jmp $a980	                jmp _check_for_para2
.a8a3						_prefix_dollar:
.a8a3		b2 0c		lda ($0c)	                lda (cib)
.a8a5		c9 24		cmp #$24	                cmp #'$'
.a8a7		d0 1c		bne $a8c5	                bne _prefix_percent
.a8a9		20 23 ad	jsr $ad23	                jsr ed_have_text
.a8ac		e8		inx		                inx
.a8ad		e8		inx		                inx                     ; ( addr-t u-t 0 )
.a8ae		20 50 ad	jsr $ad50	                jsr ed_last_line          ; ( addr-t u-t 0 para1 )
.a8b1		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-t u-t para1 0 )
.a8b4		a9 80		lda #$80	                lda #%10000000
.a8b6		04 39		tsb $39		                tsb ed_flags
.a8b8		a5 0e		lda $0e		                lda ciblen
.a8ba		3a		dec a		                dea                     ; sets Z if A was 1
.a8bb		d0 03		bne $a8c0	                bne +
.a8bd		4c 28 a9	jmp $a928	                jmp _line_number_only_from_external
.a8c0						+
.a8c0		a0 01		ldy #$01	                ldy #01
.a8c2		4c fc a9	jmp $a9fc	                jmp _check_command
.a8c5						_prefix_percent:
.a8c5		b2 0c		lda ($0c)	                lda (cib)
.a8c7		c9 25		cmp #$25	                cmp #'%'                ; ASCII '%'
.a8c9		f0 04		beq $a8cf	                beq _whole_text
.a8cb		c9 2c		cmp #$2c	                cmp #','                ; ASCII ','
.a8cd		d0 17		bne $a8e6	                bne _prefix_semicolon
.a8cf						_whole_text:
.a8cf		20 23 ad	jsr $ad23	                jsr ed_have_text
.a8d2		a9 01		lda #$01	                lda #01
.a8d4		95 02		sta $02,x	                sta 2,x                 ; LSB of NOS is para 1
.a8d6		74 03		stz $03,x	                stz 3,x                 ; ( addr-t u-t para1 0 )
.a8d8						_semicolon_entry:
.a8d8		e8		inx		                inx
.a8d9		e8		inx		                inx                     ; DROP ( addr-t u-t para1 )
.a8da		20 50 ad	jsr $ad50	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.a8dd		a9 80		lda #$80	                lda #%10000000
.a8df		04 39		tsb $39		                tsb ed_flags
.a8e1		a0 01		ldy #$01	                ldy #01
.a8e3		4c fc a9	jmp $a9fc	                jmp _check_command
.a8e6						_prefix_semicolon:
.a8e6		b2 0c		lda ($0c)	                lda (cib)
.a8e8		c9 3b		cmp #$3b	                cmp #';'                ; ASCII ';'
.a8ea		d0 0d		bne $a8f9	                bne _prefix_number
.a8ec		20 23 ad	jsr $ad23	                jsr ed_have_text
.a8ef		a5 37		lda $37		                lda ed_cur
.a8f1		95 02		sta $02,x	                sta 2,x
.a8f3		a5 38		lda $38		                lda ed_cur+1
.a8f5		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.a8f7		80 df		bra $a8d8	                bra _semicolon_entry
.a8f9						_prefix_number:
.a8f9		20 71 9e	jsr $9e71	                jsr w_zero
.a8fc		20 71 9e	jsr $9e71	                jsr w_zero             ; ( addr-t u-t 0 0 0 0 )
.a8ff		ca		dex		                dex
.a900		ca		dex		                dex
.a901		ca		dex		                dex
.a902		ca		dex		                dex                     ; ( addr-t u-t 0 0 0 0 ? ? )
.a903		a5 0c		lda $0c		                lda cib
.a905		95 02		sta $02,x	                sta 2,x
.a907		a5 0d		lda $0d		                lda cib+1
.a909		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t 0 0 0 0 cib ? )
.a90b		a5 0e		lda $0e		                lda ciblen
.a90d		95 00		sta $00,x	                sta 0,x
.a90f		a5 0f		lda $0f		                lda ciblen+1
.a911		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 0 0 cib ciblen )
.a913		20 bc 92	jsr $92bc	                jsr w_to_number        ; ( addr-t u-t 0 0 ud addr2 u2 )
.a916		b5 00		lda $00,x	                lda 0,x
.a918		15 01		ora $01,x	                ora 1,x
.a91a		d0 24		bne $a940	                bne _have_unconverted_chars
.a91c		e8		inx		                inx
.a91d		e8		inx		                inx
.a91e		e8		inx		                inx
.a91f		e8		inx		                inx                     ; 2DROP ( addr-t u-t 0 0 ud )
.a920		20 bd 9e	jsr $9ebd	                jsr w_d_to_s           ; D>S ( addr-t u-t 0 0 u )
.a923		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; -ROT ( addr-t u-t u 0 0 )
.a926		e8		inx		                inx
.a927		e8		inx		                inx                     ; ( addr-t u-t u 0 ) drop through
.a928						_line_number_only_from_external:
.a928		20 1e 92	jsr $921e	                jsr w_swap             ; ( addr-t u-t 0 u )
.a92b		20 2e ad	jsr $ad2e	                jsr ed_is_valid_line
.a92e		b0 03		bcs $a933	                bcs +
.a930		4c 00 ad	jmp $ad00	                jmp ed_error_2drop
.a933						+
.a933		20 1e 92	jsr $921e	                jsr w_swap             ; ( addr-t u-t u 0 )
.a936		20 bd ad	jsr $adbd	                jsr ed_para1_to_cur
.a939		a9 80		lda #$80	                lda #%10000000
.a93b		04 39		tsb $39		                tsb ed_flags
.a93d		4c db ab	jmp $abdb	                jmp ed_cmd_p_from_external
.a940						_have_unconverted_chars:
.a940		20 69 86	jsr $8669	                jsr w_dup              ; ( addr-t u-t 0 0 ud addr2 u2 u2 )
.a943		ca		dex		                dex
.a944		ca		dex		                dex                     ; ( addr-t u-t 0 0 ud addr2 u2 u2 ? )
.a945		a5 0e		lda $0e		                lda ciblen
.a947		95 00		sta $00,x	                sta 0,x
.a949		a5 0f		lda $0f		                lda ciblen+1
.a94b		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 ud addr2 u2 u2 ciblen )
.a94d		20 5d 87	jsr $875d	                jsr w_equal            ; ( addr-t u-t 0 0 ud addr2 u2 f )
.a950		b5 00		lda $00,x	                lda 0,x
.a952		15 01		ora $01,x	                ora 1,x
.a954		f0 0e		beq $a964	                beq _no_command_yet
.a956		8a		txa		                txa
.a957		18		clc		                clc
.a958		69 0a		adc #$0a	                adc #10
.a95a		aa		tax		                tax                     ; ( addr-t u-t 0 0 )
.a95b		a9 80		lda #$80	                lda #%10000000
.a95d		14 39		trb $39		                trb ed_flags
.a95f		a0 00		ldy #$00	                ldy #00
.a961		4c fc a9	jmp $a9fc	                jmp _check_command
.a964						_no_command_yet:
.a964		e8		inx		                inx
.a965		e8		inx		                inx                     ; ( ... 0 0 ud addr2 u2 )
.a966		20 59 93	jsr $9359	                jsr w_to_r             ; >R ( ... 0 0 ud addr2 ) (R: u2)
.a969		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.a96c		20 bd 9e	jsr $9ebd	                jsr w_d_to_s           ; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.a96f		b5 00		lda $00,x	                lda 0,x                 ; LSB
.a971		95 06		sta $06,x	                sta 6,x
.a973		b5 01		lda $01,x	                lda 1,x                 ; MSB
.a975		95 07		sta $07,x	                sta 7,x                 ; ( ... para1 0 addr2 para1 ) (R: u2)
.a977		e8		inx		                inx
.a978		e8		inx		                inx                     ; ( addr-t u-t para1 0 addr2 ) (R: u2)
.a979		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.a97c		a9 80		lda #$80	                lda #%10000000
.a97e		04 39		tsb $39		                tsb ed_flags
.a980						_check_for_para2:
.a980		a1 02		lda ($02,x)	                lda (2,x)
.a982		c9 2c		cmp #$2c	                cmp #','                ; ASCII code for ',' (comma)
.a984		f0 0d		beq $a993	                beq _got_comma
.a986		38		sec		                sec
.a987		a5 0e		lda $0e		                lda ciblen
.a989		f5 00		sbc $00,x	                sbc 0,x
.a98b		a8		tay		                tay
.a98c		e8		inx		                inx
.a98d		e8		inx		                inx
.a98e		e8		inx		                inx
.a98f		e8		inx		                inx                     ; 2DROP ( addr-t u-t para1 0 )
.a990		4c fc a9	jmp $a9fc	                jmp _check_command
.a993						_got_comma:
.a993		f6 02		inc $02,x	                inc 2,x
.a995		d0 02		bne $a999	                bne +
.a997		f6 03		inc $03,x	                inc 3,x                 ; ( addr-t u-t para1 0 addr2+1 u2 )
.a999						+
.a999		b5 01		lda $01,x	                lda 1,x
.a99b		f0 02		beq $a99f	                beq +
.a99d		d6 01		dec $01,x	                dec 1,x
.a99f						+
.a99f		d6 00		dec $00,x	                dec 0,x                 ; ( addr-t u-t para1 0 addr2+1 u2-1 )
.a9a1		a1 02		lda ($02,x)	                lda (2,x)
.a9a3		c9 24		cmp #$24	                cmp #$24                ; ASCII for '$'
.a9a5		d0 14		bne $a9bb	                bne _para2_not_dollar
.a9a7		38		sec		                sec
.a9a8		a5 0e		lda $0e		                lda ciblen
.a9aa		f5 02		sbc $02,x	                sbc 2,x
.a9ac		a8		tay		                tay
.a9ad		c8		iny		                iny
.a9ae		5a		phy		                phy
.a9af		8a		txa		                txa
.a9b0		18		clc		                clc
.a9b1		69 06		adc #$06	                adc #06
.a9b3		aa		tax		                tax                     ; ( addr-t u-t para1 )
.a9b4		20 50 ad	jsr $ad50	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.a9b7		7a		ply		                ply
.a9b8		4c fc a9	jmp $a9fc	                jmp _check_command
.a9bb						_para2_not_dollar:
.a9bb		20 59 93	jsr $9359	                jsr w_to_r             ; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.a9be		20 71 9e	jsr $9e71	                jsr w_zero             ; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.a9c1		20 71 9e	jsr $9e71	                jsr w_zero             ; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.a9c4		20 5c 8f	jsr $8f5c	                jsr w_rot              ; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.a9c7		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R> ( ... para1 0 0 0 addr2+1 u2-1)
.a9ca		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.a9cd		20 59 93	jsr $9359	                jsr w_to_r             ; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.a9d0		20 bc 92	jsr $92bc	                jsr w_to_number        ; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.a9d3		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.a9d6		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.a9d9		20 5d 87	jsr $875d	                jsr w_equal            ; = ( ... para1 0 ud addr3 u3 f )
.a9dc		b5 00		lda $00,x	                lda 0,x
.a9de		15 01		ora $01,x	                ora 1,x
.a9e0		f0 08		beq $a9ea	                beq _second_number
.a9e2		8a		txa		                txa
.a9e3		18		clc		                clc
.a9e4		69 0c		adc #$0c	                adc #12
.a9e6		aa		tax		                tax                     ; back to ( addr-t u-t )
.a9e7		4c 04 ad	jmp $ad04	                jmp ed_error
.a9ea						_second_number:
.a9ea		e8		inx		                inx
.a9eb		e8		inx		                inx                     ; ( addr-t u-t para1 0 ud addr3 u3 )
.a9ec		38		sec		                sec
.a9ed		a5 0e		lda $0e		                lda ciblen
.a9ef		f5 00		sbc $00,x	                sbc 0,x
.a9f1		48		pha		                pha
.a9f2		20 97 93	jsr $9397	                jsr w_two_drop         ; 2DROP ( addr-t u-t para1 0 ud )
.a9f5		20 bd 9e	jsr $9ebd	                jsr w_d_to_s           ; D>S  ( addr-t u-t para1 0 para2 )
.a9f8		20 0a 8c	jsr $8c0a	                jsr w_nip              ; NIP ( addr-t u-t para1 para2 )
.a9fb		7a		ply		                ply
.a9fc						_check_command:
.a9fc		24 39		bit $39		                bit ed_flags
.a9fe		30 08		bmi $aa08	                bmi _check_command_have_arg
.aa00		a5 37		lda $37		                lda ed_cur
.aa02		95 02		sta $02,x	                sta 2,x
.aa04		a5 38		lda $38		                lda ed_cur+1
.aa06		95 03		sta $03,x	                sta 3,x
.aa08						_check_command_have_arg:
.aa08		b1 0c		lda ($0c),y	                lda (cib),y             ; get mystery char from input
.aa0a		85 25		sta $25		                sta tmp1
.aa0c		da		phx		                phx
.aa0d		a2 00		ldx #$00	                ldx #00
.aa0f						_cmd_loop:
.aa0f		bd e8 ad	lda $ade8,x	                lda ed_cmd_list,x
.aa12		f0 07		beq $aa1b	                beq _illegal_command    ; zero marks end of list
.aa14		c5 25		cmp $25		                cmp tmp1
.aa16		f0 07		beq $aa1f	                beq _found_cmd
.aa18		e8		inx		                inx
.aa19		80 f4		bra $aa0f	                bra _cmd_loop
.aa1b						_illegal_command:
.aa1b		fa		plx		                plx
.aa1c		4c 00 ad	jmp $ad00	                jmp ed_error_2drop
.aa1f						_found_cmd:
.aa1f		8a		txa		                txa
.aa20		0a		asl a		                asl
.aa21		aa		tax		                tax                     ; X * 2 for table
.aa22		7c f3 ad	jmp ($adf3,x)	                jmp (ed_cmd_table,x)
.aa25						ed_next_command:
.aa25		e8		inx		                inx
.aa26		e8		inx		                inx
.aa27		e8		inx		                inx
.aa28		e8		inx		                inx                     ; ( addr-t u-t ) Fall through
.aa29		4c 33 a8	jmp $a833	                jmp ed_input_loop
.aa2c						ed_all_done:
.aa2c		64 0e		stz $0e		                stz ciblen
.aa2e		64 0f		stz $0f		                stz ciblen+1
.aa30		20 97 93	jsr $9397	                jsr w_two_drop                 ; 2DROP ( addr-t u-t )
.aa33		a5 3a		lda $3a		                lda ed_base
.aa35		85 18		sta $18		                sta base
.aa37		60		rts		                rts
.aa38						ed_cmd_a:
.aa38		fa		plx		                plx
.aa39		e8		inx		                inx
.aa3a		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.aa3b						ed_entry_cmd_i:
.aa3b		20 86 ad	jsr $ad86	                jsr ed_num_to_addr        ;  ( addr-t u-t addr1 )
.aa3e		20 ef 83	jsr $83ef	                jsr w_cr
.aa41						_next_string_loop:
.aa41		20 12 ad	jsr $ad12	                jsr ed_get_input
.aa44		b2 0c		lda ($0c)	                lda (cib)
.aa46		c9 2e		cmp #$2e	                cmp #'.'                ; ASCII for '.'
.aa48		d0 16		bne $aa60	                bne _add_line
.aa4a		a4 0e		ldy $0e		                ldy ciblen
.aa4c		c0 01		cpy #$01	                cpy #01
.aa4e		d0 10		bne $aa60	                bne _add_line
.aa50		a4 0f		ldy $0f		                ldy ciblen+1
.aa52		d0 0c		bne $aa60	                bne _add_line
.aa54		e8		inx		                inx
.aa55		e8		inx		                inx
.aa56		a9 40		lda #$40	                lda #%01000000
.aa58		04 39		tsb $39		                tsb ed_flags
.aa5a		20 ef 83	jsr $83ef	                jsr w_cr
.aa5d		4c 33 a8	jmp $a833	                jmp ed_input_loop
.aa60						_add_line:
.aa60		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-t u-t addr1 addr1 )
.aa63		20 e7 88	jsr $88e7	                jsr w_here             ; HERE ( addr-t u-t addr1 addr1 here )
.aa66		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-t u-t addr1 here addr1 )
.aa69		20 e9 87	jsr $87e9	                jsr w_fetch            ; @  ( addr-t u-t addr1 here addr2 )
.aa6c		20 b1 83	jsr $83b1	                jsr w_comma            ; ,  ( addr-t u-t addr1 here )
.aa6f		20 7d 93	jsr $937d	                jsr w_tuck             ; TUCK ( addr-t u-t here addr1 here )
.aa72		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-t u-t here here addr1 )
.aa75		20 08 92	jsr $9208	                jsr w_store            ; ! ( addr-t u-t here )
.aa78		20 e7 88	jsr $88e7	                jsr w_here             ; HERE ( addr-t u-t here here2)
.aa7b		a5 00		lda $00		                lda cp
.aa7d		18		clc		                clc
.aa7e		69 04		adc #$04	                adc #04
.aa80		85 00		sta $00		                sta cp
.aa82		90 02		bcc $aa86	                bcc +
.aa84		e6 01		inc $01		                inc cp+1
.aa86						+
.aa86		e6 37		inc $37		                inc ed_cur
.aa88		d0 02		bne $aa8c	                bne +
.aa8a		e6 38		inc $38		                inc ed_cur+1
.aa8c						+
.aa8c		20 e7 88	jsr $88e7	                jsr w_here     ; HERE ( addr-t u-t here here2 here3 )
.aa8f		20 69 86	jsr $8669	                jsr w_dup      ; DUP ( addr-t u-t here here2 here3 here3 )
.aa92		ca		dex		                dex
.aa93		ca		dex		                dex             ; ( addr-t u-t here here2 here3 here3 ? )
.aa94		a5 0c		lda $0c		                lda cib
.aa96		95 00		sta $00,x	                sta 0,x
.aa98		a5 0d		lda $0d		                lda cib+1
.aa9a		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 here3 cib )
.aa9c		20 1e 92	jsr $921e	                jsr w_swap     ; SWAP ( addr-t u-t here here2 here3 cib here3 )
.aa9f		ca		dex		                dex
.aaa0		ca		dex		                dex             ; ( addr-t u-t here here2 here3 cib here3 ? )
.aaa1		a5 0e		lda $0e		                lda ciblen
.aaa3		95 00		sta $00,x	                sta 0,x
.aaa5		a5 0f		lda $0f		                lda ciblen+1
.aaa7		95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 cib here3 ciblen )
.aaa9		20 d7 8b	jsr $8bd7	                jsr w_move     ; ( addr-t u-t here here2 here3 )
.aaac		18		clc		                clc
.aaad		a5 00		lda $00		                lda cp
.aaaf		65 0e		adc $0e		                adc ciblen
.aab1		85 00		sta $00		                sta cp
.aab3		90 06		bcc $aabb	                bcc +
.aab5		a5 01		lda $01		                lda cp+1
.aab7		65 0f		adc $0f		                adc ciblen+1
.aab9		85 01		sta $01		                sta cp+1
.aabb						+
.aabb		20 db 8c	jsr $8cdb	                jsr w_over             ; OVER ( addr-t u-t here here2 here3 here2 )
.aabe		20 08 92	jsr $9208	                jsr w_store            ; ! ( addr-t u-t here here2 )
.aac1		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+
.aac4		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+ ( addr-t u-t here here2+2 )
.aac7		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-t u-t here here2+2 here2+2 )
.aaca		a5 0e		lda $0e		                lda ciblen
.aacc		95 02		sta $02,x	                sta 2,x
.aace		a5 0f		lda $0f		                lda ciblen+1
.aad0		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t here ciblen here2+2 )
.aad2		20 08 92	jsr $9208	                jsr w_store            ; ! ( addr-t u-t here )
.aad5		20 ef 83	jsr $83ef	                jsr w_cr
.aad8		4c 41 aa	jmp $aa41	                jmp _next_string_loop
.aadb						ed_cmd_d:
.aadb		fa		plx		                plx
.aadc		20 23 ad	jsr $ad23	                jsr ed_have_text
.aadf		20 78 ad	jsr $ad78	                jsr ed_no_line_zero
.aae2		b5 00		lda $00,x	                lda 0,x
.aae4		15 01		ora $01,x	                ora 1,x
.aae6		d0 08		bne $aaf0	                bne +
.aae8		20 db 8c	jsr $8cdb	                jsr w_over             ; ( addr-t u-t para1 0 para1 )
.aaeb		20 2d ab	jsr $ab2d	                jsr _cmd_d_common       ; ( addr-t u-t para1 0 )
.aaee		80 33		bra $ab23	                bra _cmd_d_done
.aaf0						+
.aaf0		20 2e ad	jsr $ad2e	                jsr ed_is_valid_line      ; result is in C flag
.aaf3		b0 03		bcs $aaf8	                bcs _cmd_d_loop
.aaf5		4c 00 ad	jmp $ad00	                jmp ed_error_2drop
.aaf8						_cmd_d_loop:
.aaf8		20 9f 93	jsr $939f	                jsr w_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.aafb		20 d5 88	jsr $88d5	                jsr w_greater_than     ; > ( addr-t u-t para1 para2 f )
.aafe		b5 00		lda $00,x	                lda 0,x
.ab00		15 01		ora $01,x	                ora 1,x
.ab02		d0 0d		bne $ab11	                bne _cmd_d_done_with_flag
.ab04		e8		inx		                inx
.ab05		e8		inx		                inx                     ; Get rid of the flag from >
.ab06		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-t u-t para1 para2 para2 )
.ab09		20 2d ab	jsr $ab2d	                jsr _cmd_d_common       ; ( addr-t u-t para1 para2 )
.ab0c		20 b3 8c	jsr $8cb3	                jsr w_one_minus        ; 1- ( addr-t u-t para1 para2-1 )
.ab0f		80 e7		bra $aaf8	                bra _cmd_d_loop
.ab11						_cmd_d_done_with_flag:
.ab11		e8		inx		                inx                     ; ( addr-t u-t para1 para2 )
.ab12		e8		inx		                inx
.ab13		b5 02		lda $02,x	                lda 2,x
.ab15		d0 02		bne $ab19	                bne +
.ab17		d6 03		dec $03,x	                dec 3,x
.ab19						+
.ab19		d6 02		dec $02,x	                dec 2,x
.ab1b		b5 02		lda $02,x	                lda 2,x
.ab1d		85 37		sta $37		                sta ed_cur
.ab1f		b5 03		lda $03,x	                lda 3,x
.ab21		85 38		sta $38		                sta ed_cur+1            ; drop through to _cmd_d_done
.ab23						_cmd_d_done:
.ab23		a9 40		lda #$40	                lda #%01000000
.ab25		04 39		tsb $39		                tsb ed_flags
.ab27		20 ef 83	jsr $83ef	                jsr w_cr
.ab2a		4c 25 aa	jmp $aa25	                jmp ed_next_command
.ab2d						_cmd_d_common:
.ab2d		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-t u-t u u )
.ab30		20 86 ad	jsr $ad86	                jsr ed_num_to_addr        ; ( addr-t u-t u addr )
.ab33		20 e9 87	jsr $87e9	                jsr w_fetch            ; @ ( addr-t u-t u addr1 )
.ab36		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-t u-t addr1 u )
.ab39		20 b3 8c	jsr $8cb3	                jsr w_one_minus        ; 1- ( addr-t u-t addr1 u-1 )
.ab3c		20 86 ad	jsr $ad86	                jsr ed_num_to_addr        ; ( addr-t u-t addr1 addr-1 )
.ab3f		20 08 92	jsr $9208	                jsr w_store            ; ! ( addr-t u-t )
.ab42		60		rts		                rts
.ab43						ed_cmd_equ:
.ab43		fa		plx		                plx
.ab44		a5 35		lda $35		                lda ed_head
.ab46		05 36		ora $36		                ora ed_head+1
.ab48		d0 08		bne $ab52	                bne _cmd_equ_have_text
.ab4a		ca		dex		                dex
.ab4b		ca		dex		                dex
.ab4c		74 00		stz $00,x	                stz 0,x
.ab4e		74 01		stz $01,x	                stz 1,x                 ; ( addr-t u-t para1 para2 0 )
.ab50		80 21		bra $ab73	                bra _cmd_equ_done
.ab52						_cmd_equ_have_text:
.ab52		20 78 ad	jsr $ad78	                jsr ed_no_line_zero
.ab55		24 39		bit $39		                bit ed_flags
.ab57		30 0c		bmi $ab65	                bmi _cmd_equ_have_para
.ab59		ca		dex		                dex
.ab5a		ca		dex		                dex                     ; ( addr-t u-t para1 para2 ? )
.ab5b		a5 37		lda $37		                lda ed_cur
.ab5d		95 00		sta $00,x	                sta 0,x
.ab5f		a5 38		lda $38		                lda ed_cur+1
.ab61		95 01		sta $01,x	                sta 1,x
.ab63		80 0e		bra $ab73	                bra _cmd_equ_done       ; ( addr-t u-t para1 para2 cur )
.ab65						_cmd_equ_have_para:
.ab65		b5 00		lda $00,x	                lda 0,x
.ab67		15 01		ora $01,x	                ora 1,x
.ab69		d0 05		bne $ab70	                bne _cmd_equ_two_paras
.ab6b		20 db 8c	jsr $8cdb	                jsr w_over             ; ( addr-t u-t para1 para2 para1)
.ab6e		80 03		bra $ab73	                bra _cmd_equ_done
.ab70						_cmd_equ_two_paras:
.ab70		20 69 86	jsr $8669	                jsr w_dup              ; ( addr-t u-t para1 para2 para2) drop through
.ab73						_cmd_equ_done:
.ab73		20 ef 83	jsr $83ef	                jsr w_cr               ; number goes on new line
.ab76		20 df 94	jsr $94df	                jsr w_u_dot            ; ( addr-t u-t para1 para2 )
.ab79		20 ef 83	jsr $83ef	                jsr w_cr
.ab7c		4c 25 aa	jmp $aa25	                jmp ed_next_command
.ab7f						ed_cmd_f:
.ab7f		fa		plx		                plx
.ab80		24 39		bit $39		                bit ed_flags
.ab82		30 17		bmi $ab9b	                bmi _cmd_f_have_para
.ab84		20 ef 83	jsr $83ef	                jsr w_cr
.ab87		20 59 93	jsr $9359	                jsr w_to_r             ; >R   ( addr-t u-t 0 ) ( R: 0 )
.ab8a		20 5c 8f	jsr $8f5c	                jsr w_rot              ; ROT  ( u-t 0 addr-t ) ( R: 0 )
.ab8d		20 69 86	jsr $8669	                jsr w_dup              ; DUP  ( u-t 0 addr-t addr-t ) ( R: 0 )
.ab90		20 df 94	jsr $94df	                jsr w_u_dot            ; U.   ( u-t 0 addr-t ) ( R: 0 )
.ab93		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; -ROT ( addr-t u-t 0 ) ( R: 0 )
.ab96		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R>   ( addr-t u-t 0 0 )
.ab99		80 11		bra $abac	                bra _cmd_f_done
.ab9b						_cmd_f_have_para:
.ab9b		20 db 8c	jsr $8cdb	                jsr w_over
.ab9e		20 ef 83	jsr $83ef	                jsr w_cr
.aba1		20 df 94	jsr $94df	                jsr w_u_dot
.aba4		b5 02		lda $02,x	                lda 2,x
.aba6		95 06		sta $06,x	                sta 6,x
.aba8		b5 03		lda $03,x	                lda 3,x
.abaa		95 07		sta $07,x	                sta 7,x                 ; fall through to _cmd_f_done
.abac						_cmd_f_done:
.abac		20 ef 83	jsr $83ef	                jsr w_cr
.abaf		4c 25 aa	jmp $aa25	                jmp ed_next_command
.abb2						ed_cmd_i:
.abb2		fa		plx		                plx
.abb3		e8		inx		                inx
.abb4		e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.abb5		24 39		bit $39		                bit ed_flags
.abb7		30 08		bmi $abc1	                bmi _cmd_i_have_para
.abb9		a5 37		lda $37		                lda ed_cur
.abbb		95 00		sta $00,x	                sta 0,x
.abbd		a5 38		lda $38		                lda ed_cur+1
.abbf		95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.abc1						_cmd_i_have_para:
.abc1		b5 00		lda $00,x	                lda 0,x
.abc3		15 01		ora $01,x	                ora 1,x
.abc5		f0 09		beq $abd0	                beq _cmd_i_done
.abc7		20 b3 8c	jsr $8cb3	                jsr w_one_minus        ; 1-  ( addr-t u-t para1-1 )
.abca		20 71 9e	jsr $9e71	                jsr w_zero             ; 0   ( addr-t u-t para1-1 0 )
.abcd		20 83 8b	jsr $8b83	                jsr w_max              ; MAX ( addr-t u-t para1-1 | 0 )
.abd0						_cmd_i_done:
.abd0		4c 3b aa	jmp $aa3b	                jmp ed_entry_cmd_i
.abd3						ed_cmd_n:
.abd3		fa		plx		                plx
.abd4		a9 01		lda #$01	                lda #%00000001
.abd6		04 39		tsb $39		                tsb ed_flags
.abd8		80 05		bra $abdf	                bra ed_cmd_p_entry_for_cmd_n
.abda						ed_cmd_p:
.abda		fa		plx		                plx
.abdb						ed_cmd_p_from_external:
.abdb		a9 01		lda #$01	                lda #%00000001
.abdd		14 39		trb $39		                trb ed_flags
.abdf						ed_cmd_p_entry_for_cmd_n:
.abdf		20 23 ad	jsr $ad23	                jsr ed_have_text
.abe2		20 78 ad	jsr $ad78	                jsr ed_no_line_zero
.abe5		20 ef 83	jsr $83ef	                jsr w_cr
.abe8		b5 00		lda $00,x	                lda 0,x
.abea		15 01		ora $01,x	                ora 1,x
.abec		d0 10		bne $abfe	                bne _cmd_p_loop
.abee		b5 02		lda $02,x	                lda 2,x
.abf0		85 37		sta $37		                sta ed_cur
.abf2		b5 03		lda $03,x	                lda 3,x
.abf4		85 38		sta $38		                sta ed_cur+1
.abf6		20 db 8c	jsr $8cdb	                jsr w_over             ; OVER ( addr-t u-t para1 para2 para1 )
.abf9		20 27 ac	jsr $ac27	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.abfc		80 26		bra $ac24	                bra _cmd_p_all_done
.abfe						_cmd_p_loop:
.abfe		20 9f 93	jsr $939f	                jsr w_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.ac01		20 d5 88	jsr $88d5	                jsr w_greater_than     ; > ( addr-t u-t para1 para2 f )
.ac04		b5 00		lda $00,x	                lda 0,x
.ac06		15 01		ora $01,x	                ora 1,x
.ac08		d0 10		bne $ac1a	                bne _cmd_p_done
.ac0a		e8		inx		                inx
.ac0b		e8		inx		                inx                     ; Get rid of the flag from >
.ac0c		20 db 8c	jsr $8cdb	                jsr w_over             ; ( addr-t u-t para1 para2 para1 )
.ac0f		20 27 ac	jsr $ac27	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.ac12		f6 02		inc $02,x	                inc 2,x
.ac14		d0 02		bne $ac18	                bne +
.ac16		f6 03		inc $03,x	                inc 3,x
.ac18						+
.ac18		80 e4		bra $abfe	                bra _cmd_p_loop
.ac1a						_cmd_p_done:
.ac1a		e8		inx		                inx
.ac1b		e8		inx		                inx                     ; fall through to _cmp_p_all_done
.ac1c		b5 00		lda $00,x	                lda 0,x
.ac1e		85 37		sta $37		                sta ed_cur
.ac20		b5 01		lda $01,x	                lda 1,x
.ac22		85 38		sta $38		                sta ed_cur+1
.ac24						_cmd_p_all_done:
.ac24		4c 25 aa	jmp $aa25	                jmp ed_next_command
.ac27						_cmd_p_common:
.ac27		a5 39		lda $39		                lda ed_flags
.ac29		4a		lsr a		                lsr                     ; bit 0 now in carry
.ac2a		90 0b		bcc $ac37	                bcc _cmd_p_common_no_num
.ac2c		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-t u-t para1 para1 )
.ac2f		20 df 94	jsr $94df	                jsr w_u_dot            ; U. ( addr-t u-t para1 )
.ac32		a9 09		lda #$09	                lda #$09                 ; ASCII for Tab
.ac34		20 93 86	jsr $8693	                jsr emit_a
.ac37						_cmd_p_common_no_num:
.ac37		20 86 ad	jsr $ad86	                jsr ed_num_to_addr        ; ( addr-t u-t addr )
.ac3a		20 c6 ad	jsr $adc6	                jsr ed_print_addr
.ac3d		60		rts		                rts
.ac3e						ed_cmd_q:
.ac3e		fa		plx		                plx
.ac3f		24 39		bit $39		                bit ed_flags            ; bit 6 is change flag
.ac41		50 03		bvc $ac46	                bvc +
.ac43		4c 00 ad	jmp $ad00	                jmp ed_error_2drop
.ac46						+
.ac46		4c 2c aa	jmp $aa2c	                jmp ed_all_done            ; can't fall thru because of PLX
.ac49						ed_cmd_qq:
.ac49		fa		plx		                plx
.ac4a		4c 2c aa	jmp $aa2c	                jmp ed_all_done
.ac4d						ed_cmd_w:
.ac4d		fa		plx		                plx
.ac4e		20 23 ad	jsr $ad23	                jsr ed_have_text
.ac51		24 39		bit $39		                bit ed_flags
.ac53		30 13		bmi $ac68	                bmi _cmd_w_have_para
.ac55		b5 06		lda $06,x	                lda 6,x
.ac57		15 07		ora $07,x	                ora 7,x
.ac59		d0 03		bne $ac5e	                bne +
.ac5b		4c 00 ad	jmp $ad00	                jmp ed_error_2drop
.ac5e						+
.ac5e		b5 06		lda $06,x	                lda 6,x
.ac60		95 02		sta $02,x	                sta 2,x
.ac62		b5 07		lda $07,x	                lda 7,x
.ac64		95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t addr-t ? )
.ac66		80 08		bra $ac70	                bra _cmd_w_para_ready
.ac68						_cmd_w_have_para:
.ac68		b5 02		lda $02,x	                lda 2,x
.ac6a		95 06		sta $06,x	                sta 6,x
.ac6c		b5 03		lda $03,x	                lda 3,x
.ac6e		95 07		sta $07,x	                sta 7,x                 ; drop through to _cmd_w_para_ready
.ac70						_cmd_w_para_ready:
.ac70		a9 35		lda #$35	                lda #<ed_head
.ac72		95 00		sta $00,x	                sta 0,x
.ac74		a9 00		lda #$00	                lda #>ed_head
.ac76		95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t addr-t addr-h )
.ac78		20 db 8c	jsr $8cdb	                jsr w_over             ; OVER ( addr-t u-t addr-t addr-h addr-t )
.ac7b		20 59 93	jsr $9359	                jsr w_to_r             ; >R ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.ac7e						_cmd_w_loop:
.ac7e		20 e9 87	jsr $87e9	                jsr w_fetch            ; @ ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.ac81		b5 00		lda $00,x	                lda 0,x
.ac83		15 01		ora $01,x	                ora 1,x
.ac85		f0 55		beq $acdc	                beq _cmd_w_eol
.ac87		20 9f 93	jsr $939f	                jsr w_two_dup          ; 2DUP ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.ac8a		20 91 94	jsr $9491	                jsr w_two_to_r         ; 2>R  ( addr-t addr-1 ) (R: ... )
.ac8d		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+ ( addr-t addr1+1 ) (R: ... )
.ac90		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+ ( addr-t addr1+2 ) (R: ... )
.ac93		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-t addr1+2 addr1+2 ) ( R: ... )
.ac96		20 e9 87	jsr $87e9	                jsr w_fetch            ; @ ( addr-t addr1+2 addr-s ) ( R: ... )
.ac99		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-t addr-s addr1+2 ) ( R: ... )
.ac9c		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+ ( addr-t addr-s addr1+1 ) (R: ... )
.ac9f		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+ ( addr-t addr-s addr1+2 ) (R: ... )
.aca2		20 e9 87	jsr $87e9	                jsr w_fetch            ; @ ( addr-t addr-s u-s ) ( R: ... )
.aca5		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; -ROT ( u-s addr-t addr-s ) ( R: ... )
.aca8		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( u-s addr-s addr-t ) ( R: ... )
.acab		20 5c 8f	jsr $8f5c	                jsr w_rot              ; ROT (addr-s addr-t u-s ) ( R: ... )
.acae		20 69 86	jsr $8669	                jsr w_dup              ; DUP (addr-s addr-t u-s u-s ) ( R: ... )
.acb1		20 59 93	jsr $9359	                jsr w_to_r             ; >R (addr-s addr-t u-s ) ( R: ... u-s )
.acb4		20 d7 8b	jsr $8bd7	                jsr w_move             ; MOVE ( )( R: addr-t addr-1 addr-t )
.acb7		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R> ( u-s )  ( R: addr-t addr-h addr-t )
.acba		20 17 94	jsr $9417	                jsr w_two_r_from       ; 2R> ( u-s addr-t addr-h ) ( R: addr-t )
.acbd		20 f8 9c	jsr $9cf8	                jsr w_not_rot          ; -ROT ( addr-h u-s addr-t ) ( R: addr-t )
.acc0		20 29 8e	jsr $8e29	                jsr w_plus             ; + ( addr-h addr-t1 ) ( R: addr-t )
.acc3		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.acc6		ca		dex		                dex
.acc7		ca		dex		                dex                     ; ( addr-h addr-t1 addr-t1 ? ) ( R: addr-t )
.acc8		a9 0a		lda #$0a	                lda #AscLF              ; ASCII for LF
.acca		95 00		sta $00,x	                sta 0,x
.accc		74 01		stz $01,x	                stz 1,x                 ; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.acce		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.acd1		20 08 92	jsr $9208	                jsr w_store            ; ! ( addr-h addr-t1 ) ( R: addr-t )
.acd4		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; 1+ ( addr-h addr-t1+1 ) ( R: addr-t )
.acd7		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-t1+1 addr-h ) ( R: addr-t )
.acda		80 a2		bra $ac7e	                bra _cmd_w_loop
.acdc						_cmd_w_eol:
.acdc		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.acdf		20 b5 8e	jsr $8eb5	                jsr w_r_from           ; R> ( addr-t u-t addr-n addr-tn addr-t )
.ace2		20 bb 8b	jsr $8bbb	                jsr w_minus            ; - ( addr-t u-t addr-n u )
.ace5		b5 00		lda $00,x	                lda 0,x
.ace7		95 04		sta $04,x	                sta 4,x
.ace9		b5 01		lda $01,x	                lda 1,x
.aceb		95 05		sta $05,x	                sta 5,x                 ; ( addr-t u addr-n u )
.aced		20 ef 83	jsr $83ef	                jsr w_cr
.acf0		20 69 86	jsr $8669	                jsr w_dup              ; DUP ( addr-t u addr-n u u )
.acf3		20 df 94	jsr $94df	                jsr w_u_dot            ; U. ( addr-t u addr-n u )
.acf6		20 ef 83	jsr $83ef	                jsr w_cr
.acf9		a9 40		lda #$40	                lda #%01000000
.acfb		14 39		trb $39		                trb ed_flags
.acfd		4c 25 aa	jmp $aa25	                jmp ed_next_command
.ad00						ed_error_2drop:
.ad00		e8		inx		                inx
.ad01		e8		inx		                inx                     ; drop through to _error_1drop
.ad02						ed_error_1drop:
.ad02		e8		inx		                inx
.ad03		e8		inx		                inx                     ; drop through to _error
.ad04						ed_error:
.ad04		20 ef 83	jsr $83ef	                jsr w_cr
.ad07		a9 3f		lda #$3f	                lda #'?'
.ad09		20 93 86	jsr $8693	                jsr emit_a
.ad0c		20 ef 83	jsr $83ef	                jsr w_cr
.ad0f		4c 33 a8	jmp $a833	                jmp ed_input_loop
.ad12						ed_get_input:
.ad12		20 07 8f	jsr $8f07	                jsr w_refill           ;  ( addr-t u-t f )
.ad15		b5 00		lda $00,x	                lda 0,x
.ad17		15 01		ora $01,x	                ora 1,x
.ad19		d0 05		bne $ad20	                bne +
.ad1b		7a		ply		                ply
.ad1c		7a		ply		                ply
.ad1d		4c 02 ad	jmp $ad02	                jmp ed_error_1drop
.ad20						+
.ad20		e8		inx		                inx
.ad21		e8		inx		                inx
.ad22		60		rts		                rts
.ad23						ed_have_text:
.ad23		a5 35		lda $35		                lda ed_head
.ad25		05 36		ora $36		                ora ed_head+1
.ad27		d0 04		bne $ad2d	                bne +
.ad29		7a		ply		                ply
.ad2a		7a		ply		                ply
.ad2b		80 d7		bra $ad04	                bra ed_error
.ad2d						+
.ad2d		60		rts		                rts
.ad2e						ed_is_valid_line:
.ad2e		38		sec		                sec                             ; default is legal line number
.ad2f		b5 00		lda $00,x	                lda 0,x
.ad31		15 01		ora $01,x	                ora 1,x
.ad33		f0 19		beq $ad4e	                beq _is_valid_line_nope_zero    ; ( n )
.ad35		20 69 86	jsr $8669	                jsr w_dup                      ; DUP ( n n )
.ad38		20 50 ad	jsr $ad50	                jsr ed_last_line                  ; ( n n last )
.ad3b		20 1e 92	jsr $921e	                jsr w_swap                     ; SWAP ( n last n )
.ad3e		20 be 89	jsr $89be	                jsr w_less_than                ; < ( n f )
.ad41		b5 00		lda $00,x	                lda 0,x                         ; 0 flag is good
.ad43		15 01		ora $01,x	                ora 1,x
.ad45		d0 05		bne $ad4c	                bne _is_valid_line_too_small
.ad47		e8		inx		                inx
.ad48		e8		inx		                inx                     ; DROP flag ( n )
.ad49		38		sec		                sec                     ; Who knows what's happened to C by now
.ad4a		80 03		bra $ad4f	                bra _is_valid_line_done ; only one exit from this routine
.ad4c						_is_valid_line_too_small:
.ad4c		e8		inx		                inx
.ad4d		e8		inx		                inx                     ; drop through to _is_valid_line_zero
.ad4e						_is_valid_line_nope_zero:
.ad4e		18		clc		                clc                     ; drop through to _is_valid_line_done
.ad4f						_is_valid_line_done:
.ad4f		60		rts		                rts
.ad50						ed_last_line:
.ad50		64 25		stz $25		                stz tmp1
.ad52		64 26		stz $26		                stz tmp1+1
.ad54		ca		dex		                dex
.ad55		ca		dex		                dex                     ; ( ? )
.ad56		a9 35		lda #$35	                lda #<ed_head
.ad58		95 00		sta $00,x	                sta 0,x
.ad5a		a9 00		lda #$00	                lda #>ed_head
.ad5c		95 01		sta $01,x	                sta 1,x                 ; ( addr )
.ad5e						_last_line_loop:
.ad5e		20 e9 87	jsr $87e9	                jsr w_fetch            ; ( addr | 0 )
.ad61		b5 00		lda $00,x	                lda 0,x
.ad63		15 01		ora $01,x	                ora 1,x
.ad65		f0 08		beq $ad6f	                beq _last_line_done
.ad67		e6 25		inc $25		                inc tmp1
.ad69		d0 02		bne $ad6d	                bne +
.ad6b		e6 26		inc $26		                inc tmp1+1
.ad6d						+
.ad6d		80 ef		bra $ad5e	                bra _last_line_loop
.ad6f						_last_line_done:
.ad6f		a5 25		lda $25		                lda tmp1
.ad71		95 00		sta $00,x	                sta 0,x
.ad73		a5 26		lda $26		                lda tmp1+1
.ad75		95 01		sta $01,x	                sta 1,x                 ; ( u )
.ad77		60		rts		                rts
.ad78						ed_no_line_zero:
.ad78		b5 02		lda $02,x	                lda 2,x
.ad7a		15 03		ora $03,x	                ora 3,x
.ad7c		d0 07		bne $ad85	                bne _no_line_zero_done
.ad7e		24 39		bit $39		                bit ed_flags
.ad80		10 03		bpl $ad85	                bpl _no_line_zero_done
.ad82		4c 00 ad	jmp $ad00	                jmp ed_error_2drop
.ad85						_no_line_zero_done:
.ad85		60		rts		                rts
.ad86						ed_num_to_addr:
.ad86		ca		dex		                dex
.ad87		ca		dex		                dex                     ; ( u ? )
.ad88		a9 35		lda #$35	                lda #<ed_head
.ad8a		95 00		sta $00,x	                sta 0,x
.ad8c		a9 00		lda #$00	                lda #>ed_head
.ad8e		95 01		sta $01,x	                sta 1,x                 ; ( u addr-h )
.ad90		b5 02		lda $02,x	                lda 2,x
.ad92		15 03		ora $03,x	                ora 3,x
.ad94		d0 05		bne $ad9b	                bne _num_to_addr_loop
.ad96		20 0a 8c	jsr $8c0a	                jsr w_nip              ; ( addr-h )
.ad99		80 21		bra $adbc	                bra _num_to_addr_done
.ad9b						_num_to_addr_loop:
.ad9b		20 e9 87	jsr $87e9	                jsr w_fetch            ; @ ( u addr1 )
.ad9e		b5 00		lda $00,x	                lda 0,x
.ada0		15 01		ora $01,x	                ora 1,x
.ada2		d0 05		bne $ada9	                bne +
.ada4		20 0a 8c	jsr $8c0a	                jsr w_nip              ; NIP ( addr1 )
.ada7		80 13		bra $adbc	                bra _num_to_addr_done
.ada9						+
.ada9		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( addr1 u )
.adac		20 b3 8c	jsr $8cb3	                jsr w_one_minus        ; 1- ( addr1 u-1 )
.adaf		b5 00		lda $00,x	                lda 0,x
.adb1		15 01		ora $01,x	                ora 1,x
.adb3		f0 05		beq $adba	                beq _num_to_addr_finished
.adb5		20 1e 92	jsr $921e	                jsr w_swap             ; SWAP ( u-1 addr1 )
.adb8		80 e1		bra $ad9b	                bra _num_to_addr_loop
.adba						_num_to_addr_finished:
.adba		e8		inx		                inx
.adbb		e8		inx		                inx                     ; ( addr )
.adbc						_num_to_addr_done:
.adbc		60		rts		                rts
.adbd						ed_para1_to_cur:
.adbd		b5 02		lda $02,x	                lda 2,x
.adbf		85 37		sta $37		                sta ed_cur
.adc1		b5 03		lda $03,x	                lda 3,x
.adc3		85 38		sta $38		                sta ed_cur+1
.adc5		60		rts		                rts
.adc6						ed_print_addr:
.adc6		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.adc9		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; ( addr+2 )
.adcc		20 69 86	jsr $8669	                jsr w_dup              ; ( addr+2 addr+2 )
.adcf		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.add2		20 bf 8c	jsr $8cbf	                jsr w_one_plus         ; ( addr+2 addr+4 )
.add5		20 e9 87	jsr $87e9	                jsr w_fetch            ; ( addr+2 u-s )
.add8		20 1e 92	jsr $921e	                jsr w_swap             ; ( u-s addr+2 )
.addb		20 e9 87	jsr $87e9	                jsr w_fetch            ; ( u-s addr-s )
.adde		20 1e 92	jsr $921e	                jsr w_swap             ; ( addr-s u-s )
.ade1		20 b4 94	jsr $94b4	                jsr w_type
.ade4		20 ef 83	jsr $83ef	                jsr w_cr
.ade7		60		rts		                rts
>ade8		61 66 69 64 70 6e 3d 77		ed_cmd_list:    .text "afidpn=wqQ", 0
>adf0		71 51 00
.adf3						ed_cmd_table:
>adf3		38 aa 7f ab b2 ab db aa		                .word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>adfb		da ab d3 ab
>adff		43 ab 4d ac 3e ac 49 ac		                .word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.ae07						ed6502_end:

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/block.asm

.ae07						xt_blk:
.ae07						w_blk:
.ae07		a9 04		lda #$04	                lda #blk_offset
.ae09		4c d0 cf	jmp $cfd0	                jmp push_upvar_tos
.ae0c						z_blk:
.ae0c						xt_blkbuffer:
.ae0c						w_blkbuffer:
.ae0c		ca		dex		                dex
.ae0d		ca		dex		                dex
.ae0e		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.ae10		b1 08		lda ($08),y	                lda (up),y
.ae12		95 00		sta $00,x	                sta 0,x
.ae14		c8		iny		                iny             ; Move along to the next byte
.ae15		b1 08		lda ($08),y	                lda (up),y
.ae17		95 01		sta $01,x	                sta 1,x
.ae19		60		rts		z_blkbuffer:    rts
.ae1a						xt_block:
.ae1a						w_block:
.ae1a		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.ae1c		b1 08		lda ($08),y	                lda (up),y
.ae1e		d5 00		cmp $00,x	                cmp 0,x
.ae20		d0 0f		bne $ae31	                bne _not_in_buffer
.ae22		c8		iny		                iny
.ae23		b1 08		lda ($08),y	                lda (up),y
.ae25		d5 01		cmp $01,x	                cmp 1,x
.ae27		d0 08		bne $ae31	                bne _not_in_buffer
.ae29		a0 30		ldy #$30	                ldy #buffstatus_offset
.ae2b		b1 08		lda ($08),y	                lda (up),y
.ae2d		29 01		and #$01	                and #1          ; Check the in-use flag (bit 0)
.ae2f		d0 30		bne $ae61	                bne _done       ; It's already in the buffer and in use.
.ae31						_not_in_buffer:
.ae31		a0 30		ldy #$30	                ldy #buffstatus_offset
.ae33		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.ae35		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.ae37		d0 0c		bne $ae45	                bne _buffer_available ; Unused or not dirty = available
.ae39		20 0c ae	jsr $ae0c	                jsr w_blkbuffer
.ae3c		20 bc af	jsr $afbc	                jsr w_buffblocknum
.ae3f		20 e9 87	jsr $87e9	                jsr w_fetch
.ae42		20 a9 af	jsr $afa9	                jsr w_block_write
.ae45						_buffer_available:
.ae45		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.ae47		b5 00		lda $00,x	                lda 0,x
.ae49		91 08		sta ($08),y	                sta (up),y
.ae4b		c8		iny		                iny
.ae4c		b5 01		lda $01,x	                lda 1,x
.ae4e		91 08		sta ($08),y	                sta (up),y
.ae50		20 0c ae	jsr $ae0c	                jsr w_blkbuffer
.ae53		20 1e 92	jsr $921e	                jsr w_swap
.ae56		20 91 af	jsr $af91	                jsr w_block_read
.ae59		a9 01		lda #$01	                lda #1
.ae5b		a0 30		ldy #$30	                ldy #buffstatus_offset
.ae5d		91 08		sta ($08),y	                sta (up),y
.ae5f		ca		dex		                dex
.ae60		ca		dex		                dex
.ae61						_done:
.ae61		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.ae63		b1 08		lda ($08),y	                lda (up),y
.ae65		95 00		sta $00,x	                sta 0,x
.ae67		c8		iny		                iny
.ae68		b1 08		lda ($08),y	                lda (up),y
.ae6a		95 01		sta $01,x	                sta 1,x
.ae6c		60		rts		z_block:        rts
.ae6d						xt_block_ramdrive_init:
.ae6d		20 12 d1	jsr $d112	                jsr underflow_1
.ae70						w_block_ramdrive_init:
.ae70		20 58 a2	jsr $a258	                jsr sliteral_runtime
>ae73		18 01				                .word ramdrive_code_end-ramdrive_code
.ae75						ramdrive_code:
>ae75		62 61 73 65 20 40 20 73		                .text "base @ swap decimal"
>ae7d		77 61 70 20 64 65 63 69 6d 61 6c
>ae88		20 31 30 32 34 20 2a		                .text " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
>ae8f		20 64 75 70			                .text " dup"    ; ( Save a copy for formatting it at the end )
>ae93		20 62 75 66 66 65 72 3a		                .text " buffer: ramdrive" ; ( Create ramdrive )
>ae9b		20 72 61 6d 64 72 69 76 65
>aea4		20 3a 20 62 6c 6f 63 6b		                .text " : block-read-ramdrive"  ; ( addr u -- )
>aeac		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65
>aeba		20 72 61 6d 64 72 69 76		                .text " ramdrive swap 1024 * + swap 1024 move ;"
>aec2		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>aed2		73 77 61 70 20 31 30 32 34 20 6d 6f 76 65 20 3b
>aee2		20 3a 20 62 6c 6f 63 6b		                .text " : block-write-ramdrive" ; ( addr u -- )
>aeea		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65
>aef9		20 72 61 6d 64 72 69 76		                .text " ramdrive swap 1024 * + 1024 move ;"
>af01		65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>af11		31 30 32 34 20 6d 6f 76 65 20 3b
>af1c		20 27 20 62 6c 6f 63 6b		                .text " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
>af24		2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65 20 62
>af34		6c 6f 63 6b 2d 72 65 61 64 2d 76 65 63 74 6f 72
>af44		20 21
>af46		20 27 20 62 6c 6f 63 6b		                .text " ' block-write-ramdrive block-write-vector !"
>af4e		2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65 20
>af5e		62 6c 6f 63 6b 2d 77 72 69 74 65 2d 76 65 63 74
>af6e		6f 72 20 21
>af72		20 72 61 6d 64 72 69 76		                .text " ramdrive swap blank base !"
>af7a		65 20 73 77 61 70 20 62 6c 61 6e 6b 20 62 61 73
>af8a		65 20 21
.af8d						ramdrive_code_end:
.af8d		20 81 88	jsr $8881	                jsr w_evaluate
.af90						z_block_ramdrive_init:
.af90		60		rts		                rts
.af91						xt_block_read:
.af91						w_block_read:
.af91		a0 32		ldy #$32	                ldy #blockread_offset
.af93		b1 08		lda ($08),y	                lda (up),y
.af95		85 25		sta $25		                sta tmp1
.af97		c8		iny		                iny
.af98		b1 08		lda ($08),y	                lda (up),y
.af9a		85 26		sta $26		                sta tmp1+1
.af9c		6c 25 00	jmp ($0025)	                jmp (tmp1)
.af9f						z_block_read:
.af9f						xt_block_read_vector:
.af9f						w_block_read_vector:
.af9f		a9 32		lda #$32	                lda #blockread_offset
.afa1		4c d0 cf	jmp $cfd0	                jmp push_upvar_tos
.afa4						z_block_read_vector:
.afa4						xt_block_word_error:
.afa4						w_block_word_error:
.afa4		a9 0c		lda #$0c	                lda #err_blockwords
.afa6		4c 28 d1	jmp $d128	                jmp error       ; no RTS needed
.afa9						xt_block_write:
.afa9						w_block_write:
.afa9		a0 34		ldy #$34	                ldy #blockwrite_offset
.afab		b1 08		lda ($08),y	                lda (up),y
.afad		85 25		sta $25		                sta tmp1
.afaf		c8		iny		                iny
.afb0		b1 08		lda ($08),y	                lda (up),y
.afb2		85 26		sta $26		                sta tmp1+1
.afb4		6c 25 00	jmp ($0025)	                jmp (tmp1)
.afb7						z_block_write:
.afb7						xt_block_write_vector:
.afb7						w_block_write_vector:
.afb7		a9 34		lda #$34	                lda #blockwrite_offset
.afb9		4c d0 cf	jmp $cfd0	                jmp push_upvar_tos
.afbc						z_block_write_vector:
.afbc						xt_buffblocknum:
.afbc						w_buffblocknum:
.afbc		a9 2e		lda #$2e	                lda #buffblocknum_offset
.afbe		4c d0 cf	jmp $cfd0	                jmp push_upvar_tos
.afc1						z_buffblocknum:
.afc1						xt_buffer:
.afc1						w_buffer:
.afc1		a0 30		ldy #$30	                ldy #buffstatus_offset
.afc3		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.afc5		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.afc7		d0 0c		bne $afd5	                bne _buffer_available ; Unused or not dirty = available
.afc9		20 0c ae	jsr $ae0c	                jsr w_blkbuffer
.afcc		20 bc af	jsr $afbc	                jsr w_buffblocknum
.afcf		20 e9 87	jsr $87e9	                jsr w_fetch
.afd2		20 a9 af	jsr $afa9	                jsr w_block_write
.afd5						_buffer_available:
.afd5		a0 2e		ldy #$2e	                ldy #buffblocknum_offset
.afd7		b5 00		lda $00,x	                lda 0,x
.afd9		91 08		sta ($08),y	                sta (up),y
.afdb		c8		iny		                iny
.afdc		b5 01		lda $01,x	                lda 1,x
.afde		91 08		sta ($08),y	                sta (up),y
.afe0		a9 01		lda #$01	                lda #1
.afe2		a0 30		ldy #$30	                ldy #buffstatus_offset
.afe4		91 08		sta ($08),y	                sta (up),y
.afe6		a0 2c		ldy #$2c	                ldy #blkbuffer_offset
.afe8		b1 08		lda ($08),y	                lda (up),y
.afea		95 00		sta $00,x	                sta 0,x
.afec		c8		iny		                iny
.afed		b1 08		lda ($08),y	                lda (up),y
.afef		95 01		sta $01,x	                sta 1,x
.aff1		60		rts		z_buffer:       rts
.aff2						xt_buffstatus:
.aff2						w_buffstatus:
.aff2		a9 30		lda #$30	                lda #buffstatus_offset
.aff4		4c d0 cf	jmp $cfd0	                jmp push_upvar_tos
.aff7						z_buffstatus:
.aff7						xt_empty_buffers:
.aff7						w_empty_buffers:
.aff7		a0 30		ldy #$30	                ldy #buffstatus_offset
.aff9		a9 00		lda #$00	                lda #0
.affb		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.affd						z_empty_buffers:
.affd		60		rts		                rts
.affe						xt_flush:
.affe						w_flush:
.affe		20 59 b0	jsr $b059	                jsr w_save_buffers
.b001		a0 30		ldy #$30	                ldy #buffstatus_offset
.b003		a9 00		lda #$00	                lda #0
.b005		91 08		sta ($08),y	                sta (up),y      ; Only LSB is used.
.b007						z_flush:
.b007		60		rts		                rts
.b008						xt_list:
.b008		20 12 d1	jsr $d112	                jsr underflow_1
.b00b						w_list:
.b00b		20 74 b0	jsr $b074	                jsr w_scr
.b00e		20 08 92	jsr $9208	                jsr w_store
.b011		20 13 b1	jsr $b113	                jsr w_editor_l
.b014		60		rts		z_list:         rts
.b015						xt_load:
.b015		20 12 d1	jsr $d112	                jsr underflow_1
.b018						w_load:
.b018		a0 05		ldy #$05	                ldy #blk_offset+1
.b01a		b1 08		lda ($08),y	                lda (up),y
.b01c		48		pha		                pha
.b01d		88		dey		                dey
.b01e		b1 08		lda ($08),y	                lda (up),y
.b020		48		pha		                pha
.b021		b5 00		lda $00,x	                lda 0,x
.b023		91 08		sta ($08),y	                sta (up),y
.b025		c8		iny		                iny
.b026		b5 01		lda $01,x	                lda 1,x
.b028		91 08		sta ($08),y	                sta (up),y
.b02a		20 1a ae	jsr $ae1a	                jsr w_block
.b02d		ca		dex		                dex
.b02e		ca		dex		                dex
.b02f		a9 04		lda #$04	                lda #4
.b031		95 01		sta $01,x	                sta 1,x
.b033		74 00		stz $00,x	                stz 0,x
.b035		20 78 88	jsr $8878	                jsr load_evaluate
.b038		a0 04		ldy #$04	                ldy #blk_offset
.b03a		68		pla		                pla
.b03b		91 08		sta ($08),y	                sta (up),y
.b03d		c8		iny		                iny
.b03e		68		pla		                pla
.b03f		91 08		sta ($08),y	                sta (up),y
.b041		88		dey		                dey
.b042		11 08		ora ($08),y	                ora (up),y
.b044		f0 12		beq $b058	                beq _done
.b046		ca		dex		                dex
.b047		ca		dex		                dex
.b048		a0 04		ldy #$04	                ldy #blk_offset
.b04a		b1 08		lda ($08),y	                lda (up),y
.b04c		95 00		sta $00,x	                sta 0,x
.b04e		c8		iny		                iny
.b04f		b1 08		lda ($08),y	                lda (up),y
.b051		95 01		sta $01,x	                sta 1,x
.b053		20 1a ae	jsr $ae1a	                jsr w_block
.b056		e8		inx		                inx
.b057		e8		inx		                inx
.b058						_done:
.b058		60		rts		z_load:         rts
.b059						xt_save_buffers:
.b059						w_save_buffers:
.b059		a0 30		ldy #$30	                ldy #buffstatus_offset
.b05b		b1 08		lda ($08),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.b05d		c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.b05f		d0 12		bne $b073	                bne _done       ; Either not used or not dirty = done!
.b061		20 0c ae	jsr $ae0c	                jsr w_blkbuffer
.b064		20 bc af	jsr $afbc	                jsr w_buffblocknum
.b067		20 e9 87	jsr $87e9	                jsr w_fetch
.b06a		20 a9 af	jsr $afa9	                jsr w_block_write
.b06d		a9 01		lda #$01	                lda #1
.b06f		a0 30		ldy #$30	                ldy #buffstatus_offset
.b071		91 08		sta ($08),y	                sta (up),y
.b073						_done:
.b073		60		rts		z_save_buffers: rts
.b074						xt_scr:
.b074						w_scr:
.b074		a9 06		lda #$06	                lda #scr_offset
.b076		4c d0 cf	jmp $cfd0	                jmp push_upvar_tos
.b079						z_scr:
.b079						xt_thru:
.b079		20 17 d1	jsr $d117	                jsr underflow_2
.b07c						w_thru:
.b07c		b5 01		lda $01,x	                lda 1,x
.b07e		48		pha		                pha
.b07f		b5 00		lda $00,x	                lda 0,x
.b081		48		pha		                pha
.b082		e8		inx		                inx
.b083		e8		inx		                inx
.b084						_thru_loop:
.b084		b5 01		lda $01,x	                lda 1,x
.b086		48		pha		                pha
.b087		b5 00		lda $00,x	                lda 0,x
.b089		48		pha		                pha
.b08a		20 18 b0	jsr $b018	                jsr w_load
.b08d		68		pla		                pla
.b08e		85 25		sta $25		                sta tmp1
.b090		68		pla		                pla
.b091		85 26		sta $26		                sta tmp1+1
.b093		68		pla		                pla
.b094		85 27		sta $27		                sta tmp2
.b096		68		pla		                pla
.b097		85 28		sta $28		                sta tmp2+1
.b099		c5 26		cmp $26		                cmp tmp1+1
.b09b		d0 08		bne $b0a5	                bne _next_screen
.b09d		a5 27		lda $27		                lda tmp2        ; Compare the LSB
.b09f		c5 25		cmp $25		                cmp tmp1
.b0a1		d0 02		bne $b0a5	                bne _next_screen
.b0a3		80 18		bra $b0bd	                bra _done       ; We just did the last screen.
.b0a5						_next_screen:
.b0a5		a5 28		lda $28		                lda tmp2+1
.b0a7		48		pha		                pha
.b0a8		a5 27		lda $27		                lda tmp2
.b0aa		48		pha		                pha
.b0ab		e6 25		inc $25		                inc tmp1
.b0ad		d0 02		bne $b0b1	                bne +
.b0af		e6 26		inc $26		                inc tmp1+1
.b0b1						+
.b0b1		ca		dex		                dex
.b0b2		ca		dex		                dex
.b0b3		a5 25		lda $25		                lda tmp1
.b0b5		95 00		sta $00,x	                sta 0,x
.b0b7		a5 26		lda $26		                lda tmp1+1
.b0b9		95 01		sta $01,x	                sta 1,x
.b0bb		80 c7		bra $b084	                bra _thru_loop
.b0bd						_done:
.b0bd		60		rts		z_thru:         rts
.b0be						xt_update:
.b0be						w_update:
.b0be		a0 30		ldy #$30	                ldy #buffstatus_offset
.b0c0		b1 08		lda ($08),y	                lda (up),y
.b0c2		09 02		ora #$02	                ora #2          ; Turn on dirty flag (bit 2)
.b0c4		91 08		sta ($08),y	                sta (up),y
.b0c6		60		rts		z_update:       rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/editor.asm

.b0c7						xt_editor_screen_helper:
.b0c7						w_editor_screen_helper:
.b0c7		20 69 86	jsr $8669	                jsr w_dup
.b0ca		20 74 b0	jsr $b074	                jsr w_scr
.b0cd		20 08 92	jsr $9208	                jsr w_store
.b0d0		4c c1 af	jmp $afc1	                jmp w_buffer
.b0d3						xt_editor_enter_screen:
.b0d3						w_editor_enter_screen:
.b0d3		20 c7 b0	jsr $b0c7	                jsr w_editor_screen_helper
.b0d6		20 63 86	jsr $8663	                jsr w_drop
.b0d9		64 35		stz $35		                stz ed_head
.b0db						_prompt_loop:
.b0db		ca		dex		                dex
.b0dc		ca		dex		                dex
.b0dd		a5 35		lda $35		                lda ed_head
.b0df		95 00		sta $00,x	                sta 0,x
.b0e1		74 01		stz $01,x	                stz 1,x
.b0e3		20 a2 b1	jsr $b1a2	                jsr w_editor_o
.b0e6		e6 35		inc $35		                inc ed_head
.b0e8		a9 10		lda #$10	                lda #16
.b0ea		c5 35		cmp $35		                cmp ed_head
.b0ec		d0 ed		bne $b0db	                bne _prompt_loop
.b0ee						z_editor_enter_screen:
.b0ee		60		rts		                rts
.b0ef						xt_editor_erase_screen:
.b0ef						w_editor_erase_screen:
.b0ef		20 c7 b0	jsr $b0c7	                jsr w_editor_screen_helper
.b0f2		ca		dex		                dex
.b0f3		ca		dex		                dex
.b0f4		74 00		stz $00,x	                stz 0,x
.b0f6		a9 04		lda #$04	                lda #4          ; 4 in MSB makes 1024 ($400).
.b0f8		95 01		sta $01,x	                sta 1,x
.b0fa		20 79 87	jsr $8779	                jsr w_blank
.b0fd		20 be b0	jsr $b0be	                jsr w_update
.b100						z_editor_erase_screen:
.b100		60		rts		                rts
.b101						xt_editor_el:
.b101						w_editor_el:
.b101		20 8c b1	jsr $b18c	                jsr w_editor_line
.b104		ca		dex		                dex
.b105		ca		dex		                dex
.b106		a9 40		lda #$40	                lda #64
.b108		95 00		sta $00,x	                sta 0,x
.b10a		74 01		stz $01,x	                stz 1,x
.b10c		20 79 87	jsr $8779	                jsr w_blank
.b10f		20 be b0	jsr $b0be	                jsr w_update
.b112		60		rts		z_editor_el:    rts
.b113						xt_editor_l:
.b113						w_editor_l:
.b113		ca		dex		                dex             ; Put SCR on the stack.
.b114		ca		dex		                dex
.b115		a0 06		ldy #$06	                ldy #scr_offset
.b117		b1 08		lda ($08),y	                lda (up),y
.b119		95 00		sta $00,x	                sta 0,x
.b11b		c8		iny		                iny
.b11c		b1 08		lda ($08),y	                lda (up),y
.b11e		95 01		sta $01,x	                sta 1,x
.b120		20 1a ae	jsr $ae1a	                jsr w_block    ; Get the current screen.
.b123		20 ef 83	jsr $83ef	                jsr w_cr
.b126		20 58 a2	jsr $a258	                jsr sliteral_runtime
>b129		08 00				                .word _after_screen_msg-_screen_msg
.b12b						_screen_msg:
>b12b		53 63 72 65 65 6e 20 23		                .text "Screen #"
.b133						_after_screen_msg:
.b133		20 b4 94	jsr $94b4	                jsr w_type
.b136		20 74 b0	jsr $b074	                jsr w_scr
.b139		20 e9 87	jsr $87e9	                jsr w_fetch
.b13c		ca		dex		                dex
.b13d		ca		dex		                dex
.b13e		a9 04		lda #$04	                lda #4          ; four spaces
.b140		95 00		sta $00,x	                sta 0,x
.b142		74 01		stz $01,x	                stz 1,x
.b144		20 eb 94	jsr $94eb	                jsr w_u_dot_r
.b147		64 29		stz $29		                stz tmp3
.b149						_line_loop:
.b149		20 ef 83	jsr $83ef	                jsr w_cr
.b14c		ca		dex		                dex
.b14d		ca		dex		                dex
.b14e		ca		dex		                dex
.b14f		ca		dex		                dex
.b150		74 03		stz $03,x	                stz 3,x
.b152		a5 29		lda $29		                lda tmp3
.b154		95 02		sta $02,x	                sta 2,x
.b156		74 01		stz $01,x	                stz 1,x
.b158		a9 02		lda #$02	                lda #2
.b15a		95 00		sta $00,x	                sta 0,x
.b15c		20 eb 94	jsr $94eb	                jsr w_u_dot_r
.b15f		20 b5 91	jsr $91b5	                jsr w_space
.b162		20 69 86	jsr $8669	                jsr w_dup
.b165		ca		dex		                dex
.b166		ca		dex		                dex
.b167		a9 40		lda #$40	                lda #64
.b169		95 00		sta $00,x	                sta 0,x
.b16b		74 01		stz $01,x	                stz 1,x
.b16d		20 b4 94	jsr $94b4	                jsr w_type
.b170		18		clc		                clc
.b171		a9 40		lda #$40	                lda #64
.b173		75 00		adc $00,x	                adc 0,x
.b175		95 00		sta $00,x	                sta 0,x
.b177		90 02		bcc $b17b	                bcc +
.b179		f6 01		inc $01,x	                inc 1,x
.b17b						+
.b17b		e6 29		inc $29		                inc tmp3
.b17d		a5 29		lda $29		                lda tmp3
.b17f		c9 10		cmp #$10	                cmp #16
.b181		d0 c6		bne $b149	                bne _line_loop
.b183		20 ef 83	jsr $83ef	                jsr w_cr
.b186		e8		inx		                inx
.b187		e8		inx		                inx
.b188		60		rts		z_editor_l:     rts
.b189						xt_editor_line:
.b189		20 12 d1	jsr $d112	                jsr underflow_1
.b18c						w_editor_line:
.b18c		a0 06		ldy #$06	                ldy #6          ; *64 is same as left shift 6 times.
.b18e						_shift_tos_left:
.b18e		16 00		asl $00,x	                asl 0,x         ; Shift TOS to the left
.b190		36 01		rol $01,x	                rol 1,x         ; ROL brings MSb from lower byte.
.b192		88		dey		                dey
.b193		d0 f9		bne $b18e	                bne _shift_tos_left
.b195		20 74 b0	jsr $b074	                jsr w_scr
.b198		20 e9 87	jsr $87e9	                jsr w_fetch
.b19b		20 1a ae	jsr $ae1a	                jsr w_block
.b19e		20 29 8e	jsr $8e29	                jsr w_plus
.b1a1		60		rts		z_editor_line:  rts
.b1a2						xt_editor_o:
.b1a2						w_editor_o:
.b1a2		20 ef 83	jsr $83ef	                jsr w_cr
.b1a5		20 69 86	jsr $8669	                jsr w_dup
.b1a8		20 3c 9e	jsr $9e3c	                jsr w_two
.b1ab		20 eb 94	jsr $94eb	                jsr w_u_dot_r
.b1ae		20 b5 91	jsr $91b5	                jsr w_space
.b1b1		a9 2a		lda #$2a	                lda #'*'
.b1b3		20 93 86	jsr $8693	                jsr emit_a
.b1b6		20 b5 91	jsr $91b5	                jsr w_space
.b1b9		20 8c b1	jsr $b18c	                jsr w_editor_line
.b1bc		20 69 86	jsr $8669	                jsr w_dup      ; Save a copy of the line address for later.
.b1bf		ca		dex		                dex
.b1c0		ca		dex		                dex
.b1c1		a9 40		lda #$40	                lda #64         ; chars/line
.b1c3		95 00		sta $00,x	                sta 0,x
.b1c5		74 01		stz $01,x	                stz 1,x
.b1c7		20 ea 80	jsr $80ea	                jsr w_accept
.b1ca		20 69 86	jsr $8669	                jsr w_dup
.b1cd		20 f8 9c	jsr $9cf8	                jsr w_not_rot  ; -rot
.b1d0		20 29 8e	jsr $8e29	                jsr w_plus
.b1d3		ca		dex		                dex
.b1d4		ca		dex		                dex
.b1d5		a9 40		lda #$40	                lda #64         ; chars/line
.b1d7		95 00		sta $00,x	                sta 0,x
.b1d9		74 01		stz $01,x	                stz 1,x
.b1db		20 5c 8f	jsr $8f5c	                jsr w_rot
.b1de		20 bb 8b	jsr $8bbb	                jsr w_minus
.b1e1		20 79 87	jsr $8779	                jsr w_blank
.b1e4		20 be b0	jsr $b0be	                jsr w_update
.b1e7		60		rts		z_editor_o:     rts

;******  Return to file: platform/../words/all.asm


;******  Processing file: platform/../words/wordlist.asm

.b1e8						xt_also:
.b1e8						w_also:
.b1e8		20 13 b2	jsr $b213	                jsr w_get_order
.b1eb		20 db 8c	jsr $8cdb	                jsr w_over
.b1ee		20 1e 92	jsr $921e	                jsr w_swap
.b1f1		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.b1f4		20 1c b3	jsr $b31c	                jsr w_set_order
.b1f7		60		rts		z_also:         rts
.b1f8						xt_definitions:
.b1f8						w_definitions:
.b1f8		a0 23		ldy #$23	                ldy #search_order_offset    ; Transfer byte variable
.b1fa		b1 08		lda ($08),y	                lda (up),y                  ; SEARCH_ORDER[0] to
.b1fc		a0 08		ldy #$08	                ldy #current_offset         ; byte variable CURRENT.
.b1fe		91 08		sta ($08),y	                sta (up),y
.b200		60		rts		z_definitions:  rts
.b201						xt_forth:
.b201						w_forth:
.b201		a0 23		ldy #$23	                ldy #search_order_offset
.b203		a9 00		lda #$00	                lda #0          ; The WID for Forth is 0.
.b205		91 08		sta ($08),y	                sta (up),y
.b207						z_forth:
.b207		60		rts		                rts
.b208						xt_get_current:
.b208						w_get_current:
.b208		ca		dex		                dex
.b209		ca		dex		                dex
.b20a		a0 08		ldy #$08	                ldy #current_offset
.b20c		b1 08		lda ($08),y	                lda (up),y
.b20e		95 00		sta $00,x	                sta 0,x         ; CURRENT is a byte variable
.b210		74 01		stz $01,x	                stz 1,x         ; so the MSB is zero.
.b212		60		rts		z_get_current:  rts
.b213						xt_get_order:
.b213						w_get_order:
.b213		a0 22		ldy #$22	                ldy #num_order_offset
.b215		b1 08		lda ($08),y	                lda (up),y
.b217		85 25		sta $25		                sta tmp1
.b219		f0 16		beq $b231	                beq _done       ; If zero, there are no wordlists.
.b21b						_loop:
.b21b		c6 25		dec $25		                dec tmp1        ; Count down by bytes.
.b21d		a9 23		lda #$23	                lda #search_order_offset
.b21f		18		clc		                clc
.b220		65 25		adc $25		                adc tmp1
.b222		a8		tay		                tay
.b223		ca		dex		                dex
.b224		ca		dex		                dex
.b225		b1 08		lda ($08),y	                lda (up),y
.b227		95 00		sta $00,x	                sta 0,x         ; Search order array is bytes, so
.b229		74 01		stz $01,x	                stz 1,x         ; put a zero in the high byte.
.b22b		a9 00		lda #$00	                lda #0
.b22d		c5 25		cmp $25		                cmp tmp1
.b22f		d0 ea		bne $b21b	                bne _loop
.b231						_done:
.b231		ca		dex		                dex
.b232		ca		dex		                dex
.b233		a0 22		ldy #$22	                ldy #num_order_offset
.b235		b1 08		lda ($08),y	                lda (up),y
.b237		95 00		sta $00,x	                sta 0,x
.b239		74 01		stz $01,x	                stz 1,x         ; We only support 8 wordlists.
.b23b		60		rts		z_get_order:    rts
.b23c						xt_only:
.b23c						w_only:
.b23c		20 71 93	jsr $9371	                jsr w_true
.b23f		20 1c b3	jsr $b31c	                jsr w_set_order
.b242		60		rts		z_only:         rts
.b243						xt_order:
.b243						w_order:
.b243		20 ef 83	jsr $83ef	                jsr w_cr
.b246		20 13 b2	jsr $b213	                jsr w_get_order         ; ( wid_n ... wid_1 n )
.b249		e8		inx		                inx                     ; pre-drop n
.b24a		e8		inx		                inx
.b24b		b5 fe		lda $fe,x	                lda $fe,x                 ; assumes no more than 255 wordlists
.b24d		f0 1e		beq $b26d	                beq _done
.b24f		85 1e		sta $1e		                sta tmpdsp
.b251						_loop:
.b251		b5 00		lda $00,x	                lda 0,x                 ; fetch wid to A and drop it
.b253		e8		inx		                inx
.b254		e8		inx		                inx
.b255		20 6e b2	jsr $b26e	                jsr order_print_wid_string   ; internal helper function
.b258		c6 1e		dec $1e		                dec tmpdsp
.b25a		d0 f5		bne $b251	                bne _loop
.b25c		20 b5 91	jsr $91b5	                jsr w_space
.b25f		20 b5 91	jsr $91b5	                jsr w_space
.b262		20 08 b2	jsr $b208	                jsr w_get_current      ; ( wid )
.b265		b5 00		lda $00,x	                lda 0,x
.b267		20 6e b2	jsr $b26e	                jsr order_print_wid_string
.b26a		20 ef 83	jsr $83ef	                jsr w_cr
.b26d						_done:
.b26d						z_order:
.b26d		60		rts		                rts
.b26e						order_print_wid_string:
.b26e		c9 04		cmp #$04	                cmp #4
.b270		90 09		bcc $b27b	                bcc _output_string      ; less than 4, print a real string
.b272		ca		dex		                dex
.b273		ca		dex		                dex
.b274		95 00		sta $00,x	                sta 0,x
.b276		74 01		stz $01,x	                stz 1,x
.b278		4c df 94	jmp $94df	                jmp w_u_dot            ; JSR/RTS as this routine is not compiled
.b27b						_output_string:
.b27b		a8		tay		                tay
.b27c		b9 82 b2	lda $b282,y	                lda _wid_data,y
.b27f		4c 4e d1	jmp $d14e	                jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
.b282						_wid_data:
>b282		03				        .byte str_wid_forth            ; WID 0: "Forth "
>b283		04				        .byte str_wid_editor           ; WID 1: "Editor "
>b284		05				        .byte str_wid_assembler        ; WID 2: "Assembler "
>b285		06				        .byte str_wid_root             ; WID 3: "Root "
.b286						xt_previous:
.b286						w_previous:
.b286		20 13 b2	jsr $b213	                jsr w_get_order
.b289		20 0a 8c	jsr $8c0a	                jsr w_nip
.b28c		20 b3 8c	jsr $8cb3	                jsr w_one_minus
.b28f		20 1c b3	jsr $b31c	                jsr w_set_order
.b292		60		rts		z_previous:     rts
.b293						xt_root_wordlist:
.b293						w_root_wordlist:
.b293		ca		dex		                dex             ; The WID for the Root wordlist is 3.
.b294		ca		dex		                dex
.b295		a9 03		lda #$03	                lda #3
.b297		95 00		sta $00,x	                sta 0,x
.b299		74 01		stz $01,x	                stz 1,x
.b29b						z_root_wordlist:
.b29b		60		rts		                rts
.b29c						xt_search_wordlist:
.b29c		20 1c d1	jsr $d11c	                jsr underflow_3
.b29f						w_search_wordlist:
.b29f		a5 08		lda $08		                lda up
.b2a1		18		clc		                clc
.b2a2		69 0a		adc #$0a	                adc #wordlists_offset
.b2a4		85 27		sta $27		                sta tmp2
.b2a6		a5 09		lda $09		                lda up+1
.b2a8		69 00		adc #$00	                adc #0          ; Adding carry
.b2aa		85 28		sta $28		                sta tmp2+1
.b2ac		b5 00		lda $00,x	                lda 0,x
.b2ae		0a		asl a		                asl             ; Convert wid to offset in cells (x2)
.b2af		65 27		adc $27		                adc tmp2
.b2b1		85 27		sta $27		                sta tmp2
.b2b3		90 02		bcc $b2b7	                bcc +
.b2b5		e6 28		inc $28		                inc tmp2+1      ; Propagate carry if needed.
.b2b7						+
.b2b7		e8		inx		                inx
.b2b8		e8		inx		                inx
.b2b9		b5 00		lda $00,x	                lda 0,x
.b2bb		15 01		ora $01,x	                ora 1,x
.b2bd		f0 4e		beq $b30d	                beq _done
.b2bf		a5 27		lda $27		                lda tmp2
.b2c1		05 28		ora $28		                ora tmp2+1
.b2c3		f0 48		beq $b30d	                beq _done
.b2c5		b2 27		lda ($27)	                lda (tmp2)              ; nt of first word in Dictionary
.b2c7		85 25		sta $25		                sta tmp1
.b2c9		e6 27		inc $27		                inc tmp2                ; Move to the upper byte
.b2cb		d0 02		bne $b2cf	                bne +
.b2cd		e6 28		inc $28		                inc tmp2+1
.b2cf						+
.b2cf		b2 27		lda ($27)	                lda (tmp2)
.b2d1		85 26		sta $26		                sta tmp1+1
.b2d3		20 f6 cf	jsr $cff6	                jsr find_header_name
.b2d6		f0 31		beq $b309	                beq _fail_done
.b2d8		e8		inx		                inx
.b2d9		e8		inx		                inx
.b2da		a5 25		lda $25		                lda tmp1
.b2dc		95 00		sta $00,x	                sta 0,x
.b2de		a5 26		lda $26		                lda tmp1+1
.b2e0		95 01		sta $01,x	                sta 1,x
.b2e2		20 69 86	jsr $8669	                jsr w_dup              ; ( nt nt )
.b2e5		20 b1 9c	jsr $9cb1	                jsr w_name_to_int      ; ( nt xt )
.b2e8		20 1e 92	jsr $921e	                jsr w_swap             ; ( xt nt )
.b2eb		a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.b2ed		f6 00		inc $00,x	                inc 0,x
.b2ef		d0 02		bne $b2f3	                bne +
.b2f1		f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.b2f3						+
.b2f3		a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.b2f5		29 02		and #$02	                and #IM
.b2f7		d0 08		bne $b301	                bne _immediate          ; bit set, we're immediate
.b2f9		a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.b2fb		95 00		sta $00,x	                sta 0,x
.b2fd		95 01		sta $01,x	                sta 1,x
.b2ff		80 0e		bra $b30f	                bra _done_nodrop
.b301						_immediate:
.b301		a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.b303		95 00		sta $00,x	                sta 0,x
.b305		74 01		stz $01,x	                stz 1,x
.b307		80 06		bra $b30f	                bra _done_nodrop
.b309						_fail_done:
.b309		74 02		stz $02,x	                stz 2,x         ; failure flag
.b30b		74 03		stz $03,x	                stz 3,x
.b30d						_done:
.b30d		e8		inx		                inx
.b30e		e8		inx		                inx
.b30f						_done_nodrop:
.b30f						z_search_wordlist:
.b30f		60		rts		                rts
.b310						xt_set_current:
.b310		20 12 d1	jsr $d112	                jsr underflow_1
.b313						w_set_current:
.b313		a0 08		ldy #$08	                ldy #current_offset
.b315		b5 00		lda $00,x	                lda 0,x         ; CURRENT is byte variable
.b317		91 08		sta ($08),y	                sta (up),y      ; so only the LSB is used.
.b319		e8		inx		                inx
.b31a		e8		inx		                inx
.b31b		60		rts		z_set_current:  rts
.b31c						xt_set_order:
.b31c						w_set_order:
.b31c		a9 ff		lda #$ff	                lda #$FF
.b31e		d5 01		cmp $01,x	                cmp 1,x
.b320		d0 12		bne $b334	                bne _start
.b322		d5 00		cmp $00,x	                cmp 0,x
.b324		d0 0e		bne $b334	                bne _start
.b326		ca		dex		                dex             ; Make room for the count.
.b327		ca		dex		                dex
.b328		74 03		stz $03,x	                stz 3,x         ; ROOT-WORDLIST is 3
.b32a		a9 03		lda #$03	                lda #3
.b32c		95 02		sta $02,x	                sta 2,x
.b32e		74 01		stz $01,x	                stz 1,x         ; Count is 1.
.b330		a9 01		lda #$01	                lda #1
.b332		95 00		sta $00,x	                sta 0,x
.b334						_start:
.b334		a0 22		ldy #$22	                ldy #num_order_offset
.b336		b5 00		lda $00,x	                lda 0,x
.b338		91 08		sta ($08),y	                sta (up),y      ; #ORDER is a byte variable.
.b33a		85 25		sta $25		                sta tmp1        ; Save a copy for zero check and looping.
.b33c		e8		inx		                inx             ; Drop the count off the data stack.
.b33d		e8		inx		                inx
.b33e		a5 25		lda $25		                lda tmp1
.b340		f0 0d		beq $b34f	                beq _done       ; If zero, there are no wordlists.
.b342		a0 23		ldy #$23	                ldy #search_order_offset
.b344						_loop:
.b344		b5 00		lda $00,x	                lda 0,x         ; The search order is a byte array
.b346		91 08		sta ($08),y	                sta (up),y      ; so only save the LSB
.b348		c8		iny		                iny
.b349		e8		inx		                inx
.b34a		e8		inx		                inx
.b34b		c6 25		dec $25		                dec tmp1
.b34d		d0 f5		bne $b344	                bne _loop
.b34f						_done:
.b34f		60		rts		z_set_order:    rts
.b350						xt_to_order:
.b350						w_to_order:
.b350		20 59 93	jsr $9359	                jsr w_to_r
.b353		20 13 b2	jsr $b213	                jsr w_get_order
.b356		20 b5 8e	jsr $8eb5	                jsr w_r_from
.b359		20 1e 92	jsr $921e	                jsr w_swap
.b35c		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.b35f		20 1c b3	jsr $b31c	                jsr w_set_order
.b362		60		rts		z_to_order:     rts
.b363						xt_wordlist:
.b363						w_wordlist:
.b363		a0 09		ldy #$09	                ldy #num_wordlists_offset
.b365		b1 08		lda ($08),y	                lda (up),y      ; This is a byte variable, so only
.b367		c9 0c		cmp #$0c	                cmp #max_wordlists
.b369		d0 05		bne $b370	                bne _ok
.b36b		a9 0b		lda #$0b	                lda #err_wordlist
.b36d		4c 28 d1	jmp $d128	                jmp error
.b370						_ok:
.b370		1a		inc a		                ina             ; Increment the wordlist#
.b371		91 08		sta ($08),y	                sta (up),y      ; Save it into byte variable #wordlists
.b373		ca		dex		                dex             ; and put it on the stack.
.b374		ca		dex		                dex
.b375		95 00		sta $00,x	                sta 0,x
.b377		74 01		stz $01,x	                stz 1,x         ; 12 is the max, so upper byte is always zero.
.b379		60		rts		z_wordlist:     rts

;******  Return to file: platform/../words/all.asm


;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../definitions.asm

=$0000						ram_start = $0000          ; start of installed RAM, must include zpage
=$0000						zpage     = ram_start      ; begin of Zero Page ($0000-$00ff)
=$0100						stack0    = $0100          ; begin of Return Stack ($0100-$01ff)
=$7f						zpage_end = $7F            ; end of Zero Page used ($0000-$007f)
=32767						ram_end   = $8000-1        ; end of installed RAM
=31744						hist_buff = ram_end-$03ff  ; begin of history buffers
=$ff						rsp0      = $ff              ; initial Return Stack Pointer (65c02 stack)
=$ff						bsize     = $ff              ; size of input/output buffers
=$0000						user0     = zpage            ; TaliForth2 system variables
=512						buffer0   = stack0+$100      ; input buffer ($0200-$02ff)
=768						cp0       = buffer0+bsize+1  ; Dictionary starts after last buffer
=31744						cp_end    = hist_buff        ; Last RAM byte available for code
=$ff						padoffset = $ff              ; offset from CP to PAD (holds number strings)
=120						dsp0      = zpage_end-7    ; initial Data Stack Pointer
.b37a						cold_zp_table:
>b37a	0000	00 08				cp:         .word cp0+256+1024      ; Compiler Pointer
>b37c	0002	b0 b4				dp:         .word dictionary_start  ; Dictionary Pointer
>b37e	0004	00 00				ip:         .word 0                 ; Instruction Pointer (current xt)
>b380	0006	00 00				workword:   .word 0                 ; nt (not xt!) of word being compiled, except in
>b382	0008	00 03				up:         .word cp0               ; Forth user vars at start of available RAM
>b384	000a	00 00				insrc:      .word 0                 ; input source for SOURCE-ID (0 for keyboard)
>b386	000c	00 02				cib:        .word buffer0           ; address of current input buffer
>b388	000e	00 00				ciblen:     .word 0                 ; length of current input buffer
>b38a	0010	00 00				toin:       .word 0                 ; pointer to CIB (>IN in Forth)
>b38c	0012	22 f0				output:     .word kernel_putc       ; vector for EMIT
>b38e	0014	26 f0				input:      .word kernel_getc       ; vector for KEY
>b390	0016	34 f0				havekey:    .word kernel_kbhit      ; vector for KEY?
>b392	0018	0a 00				base:       .word 10                ; number radix, default decimal
>b394	001a	00 00				state:      .word 0                 ; STATE: -1 compile, 0 interpret
>b396	001c	00 00				status:     .word 0                 ; internal status used by CREATE : :NONAME ; ACCEPT NUMBER
>b398	001e					tmpdsp:     .byte ?         ; temporary DSP (X) storage (single byte)
>b399	001f					loopctrl:   .byte ?         ; Offset from lcbstack0 to current loop control block for DO/LOOP/+LOOP
>b39a	0020					loopidx0    .byte ?         ; cached LSB of current loop index for LOOP (not +LOOP)
=$0100						lcbstack0 = stack0
=256						loopindex = lcbstack0+0     ; loop control block index for adjusted loopindex
=258						loopfufa  = lcbstack0+2     ; loop control block offset for limit fudge factor
>b39b	0021					loopleave:  .word ?         ; tmp for LEAVE chaining ;TODO could it use existing tmp?
>b39d	0023					tmptos:     .word ?         ; temporary TOS storage
>b39f	0025					tmp1:       .word ?         ; temporary storage
>b3a1	0027					tmp2:       .word ?         ; temporary storage
>b3a3	0029					tmp3:       .word ?         ; temporary storage (especially for print)
>b3a5	002b					tohold:     .word ?         ; pointer for formatted output
>b3a7	002d					scratch:    .word ?,?,?,?   ; 8 byte scratchpad (see UM/MOD)
>b3af	0035					tmped:      .word ?,?,?     ; temporary for editors
.b398						cold_zp_table_end:
.b398						cold_user_table:
>b398	0000	14 00				nc_limit_offset:        .word 20        ; byte limit for Native Compile size
>b39a	0002	00 00				uf_strip_offset:        .word 0         ; flag to strip underflow detection (0 off)
>b39c	0004	00 00				blk_offset:             .word 0         ; BLK
>b39e	0006	00 00				scr_offset:             .word 0         ; SCR
=12						max_wordlists = 12    ; Maximum number of wordlists supported (4 built-in, 8 user wordlists)
.b3a0	0008					marker_start_offset:
>b3a0	0008	00				current_offset:         .byte 0         ; CURRENT = FORTH-WORDLIST (compilation wordlist)
>b3a1	0009	04				num_wordlists_offset:   .byte 4         ; #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
.b3a2	000a					wordlists_offset:
>b3a2	000a	b0 b4				    .word dictionary_start              ; FORTH-WORDLIST
>b3a4	000c	1f c3				    .word editor_dictionary_start       ; EDITOR-WORDLIST
>b3a6	000e	6f c3				    .word assembler_dictionary_start    ; ASSEMBLER-WORDLIST
>b3a8	0010	de c2				    .word root_dictionary_start         ; ROOT-WORDLIST
>b3aa	0012	00 00 00 00 00 00 00 00		    .word 0,0,0,0,0,0,0,0               ; Space for 8 User wordlists
>b3b2	001a	00 00 00 00 00 00 00 00
>b3ba	0022	01				num_order_offset:       .byte 1         ; #ORDER (Number of wordlists in search order)
.b3bb	0023					search_order_offset:
>b3bb	0023	00 00 00 00 00 00 00 00		    .byte 0,0,0,0,0,0,0,0,0             ; SEARCH-ORDER (9 bytes to keep offsets even)
>b3c3	002b	00
.b3c4	002c					marker_end_offset:
>b3c4	002c	00 04				blkbuffer_offset:       .word cp0+256   ; Address of buffer (right after USER vars)
>b3c6	002e	00 00				buffblocknum_offset:    .word 0         ; Block number current in buffer
>b3c8	0030	00 00				buffstatus_offset:      .word 0         ; Buffer status (bit 0 = used, bit 1 = dirty) (not in use)
>b3ca	0032	a4 af				blockread_offset:       .word xt_block_word_error   ; Vector to block reading routine
>b3cc	0034	a4 af				blockwrite_offset:      .word xt_block_word_error   ; Vector to block writing routine
.b3ce						cold_user_table_end:
=$03						AscCC   = $03  ; break (CTRL-c)
=$07						AscBELL = $07  ; bell sound
=$08						AscBS   = $08  ; backspace
=$0a						AscLF   = $0A  ; line feed
=$0d						AscCR   = $0D  ; carriage return
=$1b						AscESC  = $1B  ; escape
=$20						AscSP   = $20  ; space
=$7f						AscDEL  = $7F  ; delete (CTRL-h)
=$10						AscCP   = $10  ; CTRL-p (used to recall previous input history)
=$0e						AscCN   = $0E  ; CTRL-n (used to recall next input history)
=$20						OpJSR   = $20
=$4c						OpJMP   = $4C
=$d0						OpBNE   = $D0
=$f0						OpBEQ   = $F0
=$60						OpRTS   = $60
=$80						OpBRA   = $80
=$24						OpBITzp = $24   ; used to save a branch occasionally
=5						N_FLAGS = 5                 ; Bits 5-7 are currently unused.
=1						CO = 1                      ; Compile Only
=2						IM = 2                      ; Immediate Word
=4						AN = 4                      ; Always Native Compile
=8						NN = 8                      ; Never Native Compile
=12						ST = AN+NN                  ; Stack juggling to be stripped for native compile
=16						HC = 16                     ; Word has Code Field Area (CFA)
=79						MAX_LINE_LENGTH  = 79      ; assumes 80 character lines

;******  Return to file: platform/../taliforth.asm

.b3ce						forth_words_start:
>b3ce		20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>b3d6		61 6c 69 20 46 6f 72 74 68 20 32 20 66 6f 72 20
>b3e6		74 68 65 20 36 35 63 30 32 29 20 63 72 20 2e 28
>b3f6		20 56 65 72 73 69 6f 6e 20 31 2e 31 20 30 36 2e
>b406		20 41 70 72 20 32 30 32 34 20 29 20 63 72 20 2e
>b416		28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31 34
>b426		2d 32 30 32 34 20 53 63 6f 74 20 57 2e 20 53 74
>b436		65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f 6c
>b446		77 65 6c 6c 2c 20 50 61 74 72 69 63 6b 20 53 75
>b456		72 72 79 29 20 63 72 20 2e 28 20 54 61 6c 69 20
>b466		46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20 77 69
>b476		74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20 4e 4f
>b486		20 57 41 52 52 41 4e 54 59 29 20 63 72 20 2e 28
>b496		20 54 79 70 65 20 27 62 79 65 27 20 74 6f 20 65
>b4a6		78 69 74 29 20 63 72 20
.b4ae						forth_words_end:
.b4ae						user_words_start:
>b4ae		20 20				.binary "user_words.asc"
.b4b0						user_words_end:

;******  Processing file: platform/../words/headers.asm

.b4b0						dictionary_start:
.b4b0						nt_drop:
>b4b0		04 00				        .byte 4, 0
>b4b2		bc b4 60 86 65 86		        .word nt_dup, xt_drop, z_drop
>b4b8		64 72 6f 70			        .text "drop"
.b4bc						nt_dup:
>b4bc		03 00				        .byte 3, 0
>b4be		c7 b4 66 86 73 86		        .word nt_swap, xt_dup, z_dup
>b4c4		64 75 70			        .text "dup"
.b4c7						nt_swap:
>b4c7		04 00				        .byte 4, 0
>b4c9		d3 b4 1b 92 2e 92		        .word nt_store, xt_swap, z_swap
>b4cf		73 77 61 70			        .text "swap"
.b4d3						nt_store:
>b4d3		01 00				        .byte 1, 0
>b4d5		dc b4 05 92 1a 92		        .word nt_fetch, xt_store, z_store
>b4db		21				        .text "!"
.b4dc						nt_fetch:
>b4dc		01 00				        .byte 1, 0
>b4de		e5 b4 e6 87 f8 87		        .word nt_over, xt_fetch, z_fetch
>b4e4		40				        .text "@"
.b4e5						nt_over:
>b4e5		04 00				        .byte 4, 0
>b4e7		f1 b4 d8 8c e5 8c		        .word nt_to_r, xt_over, z_over
>b4ed		6f 76 65 72			        .text "over"
.b4f1						nt_to_r:
>b4f1		02 0d				        .byte 2, CO+ST       ; native skips stack juggling
>b4f3		fb b4 59 93 6e 93		        .word nt_r_from, xt_to_r, z_to_r
>b4f9		3e 72				        .text ">r"
.b4fb						nt_r_from:
>b4fb		02 0d				        .byte 2, CO+ST          ; native skips stack juggling
>b4fd		05 b5 b5 8e c7 8e		        .word nt_r_fetch, xt_r_from, z_r_from
>b503		72 3e				        .text "r>"
.b505						nt_r_fetch:
>b505		02 0d				        .byte 2, CO+ST          ; native skips stack juggling
>b507		0f b5 9e 8e b2 8e		        .word nt_nip, xt_r_fetch, z_r_fetch
>b50d		72 40				        .text "r@"
.b50f						nt_nip:
>b50f		03 00				        .byte 3, 0
>b511		1a b5 07 8c 14 8c		        .word nt_rot, xt_nip, z_nip
>b517		6e 69 70			        .text "nip"
.b51a						nt_rot:
>b51a		03 00				        .byte 3, 0
>b51c		25 b5 59 8f 74 8f		        .word nt_not_rot, xt_rot, z_rot
>b522		72 6f 74			        .text "rot"
.b525						nt_not_rot:
>b525		04 00				        .byte 4, 0
>b527		31 b5 f5 9c 10 9d		        .word nt_tuck, xt_not_rot, z_not_rot
>b52d		2d 72 6f 74			        .text "-rot"
.b531						nt_tuck:
>b531		04 00				        .byte 4, 0
>b533		3d b5 7a 93 93 93		        .word nt_comma, xt_tuck, z_tuck
>b539		74 75 63 6b			        .text "tuck"
.b53d						nt_comma:
>b53d		01 00				        .byte 1, 0
>b53f		46 b5 ae 83 bc 83		        .word nt_c_fetch, xt_comma, z_comma
>b545		2c				        .text ","
.b546						nt_c_fetch:
>b546		02 00				        .byte 2, 0
>b548		50 b5 30 83 39 83		        .word nt_c_store, xt_c_fetch, z_c_fetch
>b54e		63 40				        .text "c@"
.b550						nt_c_store:
>b550		02 00				        .byte 2, 0
>b552		5a b5 3a 83 45 83		        .word nt_plus_store, xt_c_store, z_c_store
>b558		63 21				        .text "c!"
.b55a						nt_plus_store:
>b55a		02 00				        .byte 2, 0
>b55c		64 b5 39 8e 53 8e		        .word nt_zero, xt_plus_store, z_plus_store
>b562		2b 21				        .text "+!"
.b564						nt_zero:
>b564		01 00				        .byte 1, 0
>b566		6d b5 71 9e 77 9e		        .word nt_one, xt_zero, z_zero
>b56c		30				        .text "0"
.b56d						nt_one:
>b56d		01 00				        .byte 1, 0
>b56f		76 b5 0b 9e 13 9e		        .word nt_two, xt_one, z_one
>b575		31				        .text "1"
.b576						nt_two:
>b576		01 00				        .byte 1, 0
>b578		7f b5 3c 9e 44 9e		        .word nt_execute, xt_two, z_two
>b57e		32				        .text "2"
.b57f						nt_execute:
>b57f		07 00				        .byte 7, 0
>b581		8e b5 d1 87 d7 87		        .word nt_emit, xt_execute, z_execute
>b587		65 78 65 63 75 74 65		        .text "execute"
.b58e						nt_emit:
>b58e		04 08				        .byte 4, NN
>b590		9a b5 8c 86 96 86		        .word nt_type, xt_emit, z_emit
>b596		65 6d 69 74			        .text "emit"
.b59a						nt_type:
>b59a		04 00				        .byte 4, 0
>b59c		a6 b5 b1 94 db 94		        .word nt_dot, xt_type, z_type
>b5a2		74 79 70 65			        .text "type"
.b5a6						nt_dot:
>b5a6		01 00				        .byte 1, 0
>b5a8		af b5 f6 85 17 86		        .word nt_u_dot, xt_dot, z_dot
>b5ae		2e				        .text "."
.b5af						nt_u_dot:
>b5af		02 00				        .byte 2, 0
>b5b1		b9 b5 dc 94 e7 94		        .word nt_u_dot_r, xt_u_dot, z_u_dot
>b5b7		75 2e				        .text "u."
.b5b9						nt_u_dot_r:
>b5b9		03 00				        .byte 3, 0
>b5bb		c4 b5 e8 94 09 95		        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
>b5c1		75 2e 72			        .text "u.r"
.b5c4						nt_dot_r:
>b5c4		02 00				        .byte 2, 0
>b5c6		ce b5 32 86 5f 86		        .word nt_d_dot, xt_dot_r, z_dot_r
>b5cc		2e 72				        .text ".r"
.b5ce						nt_d_dot:
>b5ce		02 00				        .byte 2, 0
>b5d0		d8 b5 fa 9e 18 9f		        .word nt_d_dot_r, xt_d_dot, z_d_dot
>b5d6		64 2e				        .text "d."
.b5d8						nt_d_dot_r:
>b5d8		03 00				        .byte 3, 0
>b5da		e3 b5 19 9f 43 9f		        .word nt_m_star_slash, xt_d_dot_r, z_d_dot_r
>b5e0		64 2e 72			        .text "d.r"
.b5e3						nt_m_star_slash:
>b5e3		03 00				        .byte 3, 0
>b5e5		ee b5 44 9f aa 9f		        .word nt_ud_dot, xt_m_star_slash, z_m_star_slash
>b5eb		6d 2a 2f			        .text "m*/"
.b5ee						nt_ud_dot:
>b5ee		03 00				        .byte 3, 0
>b5f0		f9 b5 15 a0 27 a0		        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
>b5f6		75 64 2e			        .text "ud."
.b5f9						nt_ud_dot_r:
>b5f9		04 00				        .byte 4, 0
>b5fb		05 b6 28 a0 46 a0		        .word nt_question, xt_ud_dot_r, z_ud_dot_r
>b601		75 64 2e 72			        .text "ud.r"
.b605						nt_question:
>b605		01 00				        .byte 1, 0
>b607		0e b6 3f 99 45 99		        .word nt_false, xt_question, z_question
>b60d		3f				        .text "?"
.b60e						nt_false:
>b60e		05 00				        .byte 5, 0
>b610		1b b6 71 9e 77 9e		        .word nt_true, xt_false, z_false
>b616		66 61 6c 73 65			        .text "false"
.b61b						nt_true:
>b61b		04 00				        .byte 4, 0
>b61d		27 b6 71 93 79 93		        .word nt_space, xt_true, z_true
>b623		74 72 75 65			        .text "true"
.b627						nt_space:
>b627		05 00				        .byte 5, 0
>b629		34 b6 b5 91 ba 91		        .word nt_two_dup, xt_space, z_space
>b62f		73 70 61 63 65			        .text "space"
.b634						nt_two_dup:
>b634		04 00				        .byte 4, 0
>b636		40 b6 9c 93 b3 93		        .word nt_question_dup, xt_two_dup, z_two_dup
>b63c		32 64 75 70			        .text "2dup"
.b640						nt_question_dup:
>b640		04 00				        .byte 4, 0
>b642		4c b6 8a 8e 9d 8e		        .word nt_plus, xt_question_dup, z_question_dup
>b648		3f 64 75 70			        .text "?dup"
.b64c						nt_plus:
>b64c		01 00				        .byte 1, 0
>b64e		55 b6 26 8e 38 8e		        .word nt_minus, xt_plus, z_plus
>b654		2b				        .text "+"
.b655						nt_minus:
>b655		01 00				        .byte 1, 0
>b657		5e b6 b8 8b ca 8b		        .word nt_one_minus, xt_minus, z_minus
>b65d		2d				        .text "-"
.b65e						nt_one_minus:
>b65e		02 00				        .byte 2, 0
>b660		68 b6 b0 8c bb 8c		        .word nt_one_plus, xt_one_minus, z_one_minus
>b666		31 2d				        .text "1-"
.b668						nt_one_plus:
>b668		02 00				        .byte 2, 0
>b66a		72 b6 bc 8c c5 8c		        .word nt_two_star, xt_one_plus, z_one_plus
>b670		31 2b				        .text "1+"
.b672						nt_two_star:
>b672		02 00				        .byte 2, 0
>b674		7c b6 3f 94 46 94		        .word nt_two_slash, xt_two_star, z_two_star
>b67a		32 2a				        .text "2*"
.b67c						nt_two_slash:
>b67c		02 00				        .byte 2, 0
>b67e		86 b6 34 94 3e 94		        .word nt_abs, xt_two_slash, z_two_slash
>b684		32 2f				        .text "2/"
.b686						nt_abs:
>b686		03 00				        .byte 3, 0
>b688		91 b6 d2 80 e6 80		        .word nt_dabs, xt_abs, z_abs
>b68e		61 62 73			        .text "abs"
.b691						nt_dabs:
>b691		04 00				        .byte 4, 0
>b693		9d b6 c0 9e de 9e		        .word nt_and, xt_dabs, z_dabs
>b699		64 61 62 73			        .text "dabs"
.b69d						nt_and:
>b69d		03 00				        .byte 3, 0
>b69f		a8 b6 93 82 a4 82		        .word nt_or, xt_and, z_and
>b6a5		61 6e 64			        .text "and"
.b6a8						nt_or:
>b6a8		02 00				        .byte 2, 0
>b6aa		b2 b6 c6 8c d7 8c		        .word nt_xor, xt_or, z_or
>b6b0		6f 72				        .text "or"
.b6b2						nt_xor:
>b6b2		03 00				        .byte 3, 0
>b6b4		bd b6 55 96 66 96		        .word nt_rshift, xt_xor, z_xor
>b6ba		78 6f 72			        .text "xor"
.b6bd						nt_rshift:
>b6bd		06 00				        .byte 6, 0
>b6bf		cb b6 75 8f 88 8f		        .word nt_lshift, xt_rshift, z_rshift
>b6c5		72 73 68 69 66 74		        .text "rshift"
.b6cb						nt_lshift:
>b6cb		06 00				        .byte 6, 0
>b6cd		d9 b6 eb 8a fe 8a		        .word nt_pick, xt_lshift, z_lshift
>b6d3		6c 73 68 69 66 74		        .text "lshift"
.b6d9						nt_pick:
>b6d9		04 00				        .byte 4, 0    ; underflow check is complicated, leave off here
>b6db		e5 b6 15 8e 25 8e		        .word nt_char, xt_pick, z_pick
>b6e1		70 69 63 6b			        .text "pick"
.b6e5						nt_char:
>b6e5		04 00				        .byte 4, 0
>b6e7		f1 b6 56 83 6c 83		        .word nt_bracket_char, xt_char, z_char
>b6ed		63 68 61 72			        .text "char"
.b6f1						nt_bracket_char:
>b6f1		06 03				        .byte 6, CO+IM
>b6f3		ff b6 10 83 16 83		        .word nt_char_plus, xt_bracket_char, z_bracket_char
>b6f9		5b 63 68 61 72 5d		        .text "[char]"
.b6ff						nt_char_plus:
>b6ff		05 00				        .byte 5, 0
>b701		0c b7 bc 8c c5 8c		        .word nt_chars, xt_char_plus, z_char_plus ; same as 1+
>b707		63 68 61 72 2b			        .text "char+"
.b70c						nt_chars:
>b70c		05 00				        .byte 5, 0      ; deleted during compile
>b70e		19 b7 6d 83 70 83		        .word nt_cells, xt_chars, z_chars
>b714		63 68 61 72 73			        .text "chars"
.b719						nt_cells:
>b719		05 00				        .byte 5, 0
>b71b		26 b7 3f 94 46 94		        .word nt_cell_plus, xt_cells, z_cells  ; same as 2*
>b721		63 65 6c 6c 73			        .text "cells"
.b726						nt_cell_plus:
>b726		05 00				        .byte 5, 0
>b728		33 b7 46 83 55 83		        .word nt_here, xt_cell_plus, z_cell_plus
>b72e		63 65 6c 6c 2b			        .text "cell+"
.b733						nt_here:
>b733		04 00				        .byte 4, 0
>b735		3f b7 e7 88 f1 88		        .word nt_equal, xt_here, z_here
>b73b		68 65 72 65			        .text "here"
.b73f						nt_equal:
>b73f		01 00				        .byte 1, 0
>b741		48 b7 5a 87 75 87		        .word nt_not_equals, xt_equal, z_equal
>b747		3d				        .text "="
.b748						nt_not_equals:
>b748		02 00				        .byte 2, 0
>b74a		52 b7 15 8c 32 8c		        .word nt_less_than, xt_not_equals, z_not_equals
>b750		3c 3e				        .text "<>"
.b752						nt_less_than:
>b752		01 00				        .byte 1, 0
>b754		5b b7 bb 89 cf 89		        .word nt_u_less_than, xt_less_than, z_less_than
>b75a		3c				        .text "<"
.b75b						nt_u_less_than:
>b75b		02 00				        .byte 2, 0
>b75d		65 b7 20 95 35 95		        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
>b763		75 3c				        .text "u<"
.b765						nt_u_greater_than:
>b765		02 00				        .byte 2, 0
>b767		6f b7 0a 95 1f 95		        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
>b76d		75 3e				        .text "u>"
.b76f						nt_greater_than:
>b76f		01 00				        .byte 1, 0
>b771		78 b7 d2 88 e6 88		        .word nt_zero_equal, xt_greater_than, z_greater_than
>b777		3e				        .text ">"
.b778						nt_zero_equal:
>b778		02 00				        .byte 2, 0
>b77a		82 b7 67 96 78 96		        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
>b780		30 3d				        .text "0="
.b782						nt_zero_unequal:
>b782		03 00				        .byte 3, 0
>b784		8d b7 9d 96 ac 96		        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
>b78a		30 3c 3e			        .text "0<>"
.b78d						nt_zero_greater:
>b78d		02 00				        .byte 2, 0
>b78f		97 b7 79 96 8c 96		        .word nt_zero_less, xt_zero_greater, z_zero_greater
>b795		30 3e				        .text "0>"
.b797						nt_zero_less:
>b797		02 00				        .byte 2, 0
>b799		a1 b7 8d 96 9c 96		        .word nt_min, xt_zero_less, z_zero_less
>b79f		30 3c				        .text "0<"
.b7a1						nt_min:
>b7a1		03 00				        .byte 3, 0
>b7a3		ac b7 9c 8b b7 8b		        .word nt_max, xt_min, z_min
>b7a9		6d 69 6e			        .text "min"
.b7ac						nt_max:
>b7ac		03 00				        .byte 3, 0
>b7ae		b7 b7 80 8b 9b 8b		        .word nt_two_drop, xt_max, z_max
>b7b4		6d 61 78			        .text "max"
.b7b7						nt_two_drop:
>b7b7		05 00				        .byte 5, 0
>b7b9		c4 b7 94 93 9b 93		        .word nt_two_swap, xt_two_drop, z_two_drop
>b7bf		32 64 72 6f 70			        .text "2drop"
.b7c4						nt_two_swap:
>b7c4		05 00				        .byte 5, 0
>b7c6		d1 b7 6d 94 90 94		        .word nt_two_over, xt_two_swap, z_two_swap
>b7cc		32 73 77 61 70			        .text "2swap"
.b7d1						nt_two_over:
>b7d1		05 00				        .byte 5, 0
>b7d3		de b7 d6 93 ed 93		        .word nt_two_store, xt_two_over, z_two_over
>b7d9		32 6f 76 65 72			        .text "2over"
.b7de						nt_two_store:
>b7de		02 00				        .byte 2, 0
>b7e0		e8 b7 47 94 6c 94		        .word nt_two_fetch, xt_two_store, z_two_store
>b7e6		32 21				        .text "2!"
.b7e8						nt_two_fetch:
>b7e8		02 00				        .byte 2, 0
>b7ea		f2 b7 b4 93 d5 93		        .word nt_two_variable, xt_two_fetch, z_two_fetch
>b7f0		32 40				        .text "2@"
.b7f2						nt_two_variable:
>b7f2		09 00				        .byte 9, 0
>b7f4		03 b8 04 a0 14 a0		        .word nt_two_constant, xt_two_variable, z_two_variable
>b7fa		32 76 61 72 69 61 62 6c		        .text "2variable"
>b802		65
.b803						nt_two_constant:
>b803		09 00				        .byte 9, 0
>b805		14 b8 ab 9f c4 9f		        .word nt_two_literal, xt_two_constant, z_two_constant
>b80b		32 63 6f 6e 73 74 61 6e		        .text "2constant"
>b813		74
.b814						nt_two_literal:
>b814		08 02				        .byte 8, IM
>b816		24 b8 c5 9f ea 9f		        .word nt_two_r_fetch, xt_two_literal, z_two_literal
>b81c		32 6c 69 74 65 72 61 6c		        .text "2literal"
.b824						nt_two_r_fetch:
>b824		03 0d				        .byte 3, CO+ST          ; native skips stack juggling
>b826		2f b8 ee 93 14 94		        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
>b82c		32 72 40			        .text "2r@"
.b82f						nt_two_r_from:
>b82f		03 0d				        .byte 3, CO+ST          ; native skips stack juggling
>b831		3a b8 17 94 31 94		        .word nt_two_to_r, xt_two_r_from, z_two_r_from
>b837		32 72 3e			        .text "2r>"
.b83a						nt_two_to_r:
>b83a		03 0d				        .byte 3, CO+ST       ; native skips stack juggling
>b83c		45 b8 91 94 ae 94		        .word nt_invert, xt_two_to_r, z_two_to_r
>b842		32 3e 72			        .text "2>r"
.b845						nt_invert:
>b845		06 00				        .byte 6, 0
>b847		53 b8 30 89 3f 89		        .word nt_negate, xt_invert, z_invert
>b84d		69 6e 76 65 72 74		        .text "invert"
.b853						nt_negate:
>b853		06 00				        .byte 6, 0
>b855		61 b8 f6 8b 06 8c		        .word nt_dnegate, xt_negate, z_negate
>b85b		6e 65 67 61 74 65		        .text "negate"
.b861						nt_dnegate:
>b861		07 00				        .byte 7, 0
>b863		70 b8 df 9e f9 9e		        .word nt_c_comma, xt_dnegate, z_dnegate
>b869		64 6e 65 67 61 74 65		        .text "dnegate"
.b870						nt_c_comma:
>b870		02 00				        .byte 2, 0
>b872		7a b8 25 83 2f 83		        .word nt_bounds, xt_c_comma, z_c_comma
>b878		63 2c				        .text "c,"
.b87a						nt_bounds:
>b87a		06 00				        .byte 6, 0
>b87c		88 b8 98 9a b0 9a		        .word nt_spaces, xt_bounds, z_bounds
>b882		62 6f 75 6e 64 73		        .text "bounds"
.b888						nt_spaces:
>b888		06 00				        .byte 6, 0
>b88a		96 b8 bb 91 d4 91		        .word nt_bl, xt_spaces, z_spaces
>b890		73 70 61 63 65 73		        .text "spaces"
.b896						nt_bl:
>b896		02 00				        .byte 2, 0
>b898		a0 b8 07 83 0f 83		        .word nt_minus_trailing, xt_bl, z_bl
>b89e		62 6c				        .text "bl"
.b8a0						nt_minus_trailing:
>b8a0		09 00				        .byte 9, 0
>b8a2		b1 b8 3b a1 77 a1		        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
>b8a8		2d 74 72 61 69 6c 69 6e		        .text "-trailing"
>b8b0		67
.b8b1						nt_minus_leading:
>b8b1		08 00				        .byte 8, 0
>b8b3		c1 b8 22 a1 3a a1		        .word nt_slash_string, xt_minus_leading, z_minus_leading
>b8b9		2d 6c 65 61 64 69 6e 67		        .text "-leading"
.b8c1						nt_slash_string:
>b8c1		07 00				        .byte 7, 0
>b8c3		d0 b8 17 a2 36 a2		        .word nt_refill, xt_slash_string, z_slash_string
>b8c9		2f 73 74 72 69 6e 67		        .text "/string"
.b8d0						nt_refill:
>b8d0		06 00				        .byte 6, 0
>b8d2		de b8 07 8f 48 8f		        .word nt_accept, xt_refill, z_refill
>b8d8		72 65 66 69 6c 6c		        .text "refill"
.b8de						nt_accept:
>b8de		06 08				        .byte 6, NN
>b8e0		ec b8 e7 80 df 81		        .word nt_input_to_r, xt_accept, z_accept
>b8e6		61 63 63 65 70 74		        .text "accept"
.b8ec						nt_input_to_r:
>b8ec		07 08				        .byte 7, NN
>b8ee		fb b8 12 9c 27 9c		        .word nt_r_to_input, xt_input_to_r, z_input_to_r
>b8f4		69 6e 70 75 74 3e 72		        .text "input>r"
.b8fb						nt_r_to_input:
>b8fb		07 08				        .byte 7, NN
>b8fd		0a b9 1f 9e 36 9e		        .word nt_unused, xt_r_to_input, z_r_to_input
>b903		72 3e 69 6e 70 75 74		        .text "r>input"
.b90a						nt_unused:
>b90a		06 00				        .byte 6, 0
>b90c		18 b9 d5 95 e4 95		        .word nt_depth, xt_unused, z_unused
>b912		75 6e 75 73 65 64		        .text "unused"
.b918						nt_depth:
>b918		05 00				        .byte 5, 0
>b91a		25 b9 18 85 26 85		        .word nt_key, xt_depth, z_depth
>b920		64 65 70 74 68			        .text "depth"
.b925						nt_key:
>b925		03 00				        .byte 3, 0
>b927		30 b9 73 89 7c 89		        .word nt_keyq, xt_key, z_key
>b92d		6b 65 79			        .text "key"
.b930						nt_keyq:
>b930		04 00				        .byte 4, 0
>b932		3c b9 80 89 8e 89		        .word nt_allot, xt_keyq, z_keyq
>b938		6b 65 79 3f			        .text "key?"
.b93c						nt_allot:
>b93c		05 00				        .byte 5, 0
>b93e		49 b9 2a 82 92 82		        .word nt_create, xt_allot, z_allot
>b944		61 6c 6c 6f 74			        .text "allot"
.b949						nt_create:
>b949		06 00				        .byte 6, 0
>b94b		57 b9 f5 83 e4 84		        .word nt_does, xt_create, z_create
>b951		63 72 65 61 74 65		        .text "create"
.b957						nt_does:
>b957		05 03				        .byte 5, CO+IM
>b959		64 b9 b5 85 c3 85		        .word nt_variable, xt_does, z_does
>b95f		64 6f 65 73 3e			        .text "does>"
.b964						nt_variable:
>b964		08 00				        .byte 8, 0
>b966		74 b9 e5 95 f0 95		        .word nt_constant, xt_variable, z_variable
>b96c		76 61 72 69 61 62 6c 65		        .text "variable"
.b974						nt_constant:
>b974		08 00				        .byte 8, 0
>b976		84 b9 c9 83 da 83		        .word nt_value, xt_constant, z_constant
>b97c		63 6f 6e 73 74 61 6e 74		        .text "constant"
.b984						nt_value:
>b984		05 00				        .byte 5, 0
>b986		91 b9 c9 83 da 83		        .word nt_to, xt_value, z_value          ; same code as CONSTANT
>b98c		76 61 6c 75 65			        .text "value"
.b991						nt_to:
>b991		02 0a				        .byte 2, NN+IM
>b993		9b b9 4f 92 8a 92		        .word nt_s_to_d, xt_to, z_to
>b999		74 6f				        .text "to"
.b99b						nt_s_to_d:
>b99b		03 00				        .byte 3, 0
>b99d		a6 b9 b6 90 c7 90		        .word nt_d_to_s, xt_s_to_d, z_s_to_d
>b9a3		73 3e 64			        .text "s>d"
.b9a6						nt_d_to_s:
>b9a6		03 00				        .byte 3, 0
>b9a8		b1 b9 ba 9e bf 9e		        .word nt_d_minus, xt_d_to_s, z_d_to_s
>b9ae		64 3e 73			        .text "d>s"
.b9b1						nt_d_minus:
>b9b1		02 00				        .byte 2, 0
>b9b3		bb b9 78 9e 98 9e		        .word nt_d_plus, xt_d_minus, z_d_minus
>b9b9		64 2d				        .text "d-"
.b9bb						nt_d_plus:
>b9bb		02 00				        .byte 2, 0
>b9bd		c5 b9 99 9e b9 9e		        .word nt_erase, xt_d_plus, z_d_plus
>b9c3		64 2b				        .text "d+"
.b9c5						nt_erase:
>b9c5		05 00				        .byte 5, 0
>b9c7		d2 b9 83 87 d0 87		        .word nt_blank, xt_erase, z_erase
>b9cd		65 72 61 73 65			        .text "erase"
.b9d2						nt_blank:
>b9d2		05 00				        .byte 5, 0
>b9d4		df b9 76 87 d0 87		        .word nt_fill, xt_blank, z_blank
>b9da		62 6c 61 6e 6b			        .text "blank"
.b9df						nt_fill:
>b9df		04 00				        .byte 4, 0
>b9e1		eb b9 8e 87 d0 87		        .word nt_find_name, xt_fill, z_fill
>b9e7		66 69 6c 6c			        .text "fill"
.b9eb						nt_find_name:
>b9eb		09 00				        .byte 9, 0
>b9ed		fc b9 5a 9b a8 9b		        .word nt_tick, xt_find_name, z_find_name
>b9f3		66 69 6e 64 2d 6e 61 6d		        .text "find-name"
>b9fb		65
.b9fc						nt_tick:
>b9fc		01 00				        .byte 1, 0
>b9fe		05 ba 2f 92 4e 92		        .word nt_bracket_tick, xt_tick, z_tick
>ba04		27				        .text "'"
.ba05						nt_bracket_tick:
>ba05		03 03				        .byte 3, CO+IM
>ba07		10 ba 17 83 1d 83		        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
>ba0d		5b 27 5d			        .text "[']"
.ba10						nt_name_to_int:
>ba10		08 00				        .byte 8, 0
>ba12		20 ba ae 9c ca 9c		        .word nt_int_to_name, xt_name_to_int, z_name_to_int
>ba18		6e 61 6d 65 3e 69 6e 74		        .text "name>int"
.ba20						nt_int_to_name:
>ba20		08 00				        .byte 8, 0
>ba22		30 ba 28 9c 98 9c		        .word nt_name_to_string, xt_int_to_name, z_int_to_name
>ba28		69 6e 74 3e 6e 61 6d 65		        .text "int>name"
.ba30						nt_name_to_string:
>ba30		0b 00				        .byte 11, 0
>ba32		43 ba cb 9c e1 9c		        .word nt_to_body, xt_name_to_string, z_name_to_string
>ba38		6e 61 6d 65 3e 73 74 72		        .text "name>string"
>ba40		69 6e 67
.ba43						nt_to_body:
>ba43		05 00				        .byte 5, 0
>ba45		50 ba 8b 92 ad 92		        .word nt_defer, xt_to_body, z_to_body
>ba4b		3e 62 6f 64 79			        .text ">body"
.ba50						nt_defer:
>ba50		05 00				        .byte 5, 0
>ba52		5d ba ec 84 fe 84		        .word nt_latestxt, xt_defer, z_defer
>ba58		64 65 66 65 72			        .text "defer"
.ba5d						nt_latestxt:
>ba5d		08 00				        .byte 8, 0
>ba5f		6d ba a7 9c ad 9c		        .word nt_latestnt, xt_latestxt, z_latestxt
>ba65		6c 61 74 65 73 74 78 74		        .text "latestxt"
.ba6d						nt_latestnt:
>ba6d		08 00				        .byte 8, 0
>ba6f		7d ba 99 9c a6 9c		        .word nt_parse_name, xt_latestnt, z_latestnt
>ba75		6c 61 74 65 73 74 6e 74		        .text "latestnt"
.ba7d						nt_parse_name:
>ba7d		0a 08				        .byte 10, NN
>ba7f		8f ba 24 8d 14 8e		        .word nt_parse, xt_parse_name, z_parse_name
>ba85		70 61 72 73 65 2d 6e 61		        .text "parse-name"
>ba8d		6d 65
.ba8f						nt_parse:
>ba8f		05 00				        .byte 5, 0
>ba91		9c ba 7f 8d 14 8e		        .word nt_execute_parsing, xt_parse, z_parse
>ba97		70 61 72 73 65			        .text "parse"
.ba9c						nt_execute_parsing:
>ba9c		0f 00				        .byte 15, 0
>ba9e		b3 ba 33 9b 59 9b		        .word nt_source, xt_execute_parsing, z_execute_parsing
>baa4		65 78 65 63 75 74 65 2d		        .text "execute-parsing"
>baac		70 61 72 73 69 6e 67
.bab3						nt_source:
>bab3		06 00				        .byte 6, 0
>bab5		c1 ba 95 91 a9 91		        .word nt_source_id, xt_source, z_source
>babb		73 6f 75 72 63 65		        .text "source"
.bac1						nt_source_id:
>bac1		09 00				        .byte 9, 0
>bac3		d2 ba aa 91 b4 91		        .word nt_colon, xt_source_id, z_source_id
>bac9		73 6f 75 72 63 65 2d 69		        .text "source-id"
>bad1		64
.bad2						nt_colon:
>bad2		01 00				        .byte 1, 0
>bad4		db ba 71 83 91 83		        .word nt_semicolon, xt_colon, z_colon
>bada		3a				        .text ":"
.badb						nt_semicolon:
>badb		01 03				        .byte 1, CO+IM
>badd		e4 ba c8 90 34 91		        .word nt_colon_noname, xt_semicolon, z_semicolon
>bae3		3b				        .text ";"
.bae4						nt_colon_noname:
>bae4		07 00				        .byte 7, 0
>bae6		f3 ba 92 83 ad 83		        .word nt_compile_comma, xt_colon_noname, z_colon_noname
>baec		3a 6e 6f 6e 61 6d 65		        .text ":noname"
.baf3						nt_compile_comma:
>baf3		08 08				        .byte 8, NN
>baf5		03 bb bb 96 6e 97		        .word nt_left_bracket, xt_compile_comma, z_compile_comma
>bafb		63 6f 6d 70 69 6c 65 2c		        .text "compile,"
.bb03						nt_left_bracket:
>bb03		01 03				        .byte 1, IM+CO
>bb05		0c bb a8 89 ac 89		        .word nt_right_bracket, xt_left_bracket, z_left_bracket
>bb0b		5b				        .text "["
.bb0c						nt_right_bracket:
>bb0c		01 02				        .byte 1, IM
>bb0e		15 bb 52 8f 58 8f		        .word nt_literal, xt_right_bracket, z_right_bracket
>bb14		5d				        .text "]"
.bb15						nt_literal:
>bb15		07 03				        .byte 7, IM+CO
>bb17		24 bb d0 89 0d 8a		        .word nt_sliteral, xt_literal, z_literal
>bb1d		6c 69 74 65 72 61 6c		        .text "literal"
.bb24						nt_sliteral:
>bb24		08 03				        .byte 8, CO+IM
>bb26		34 bb 37 a2 57 a2		        .word nt_dot_quote, xt_sliteral, z_sliteral
>bb2c		73 6c 69 74 65 72 61 6c		        .text "sliteral"
.bb34						nt_dot_quote:
>bb34		02 03				        .byte 2, CO+IM
>bb36		3e bb 27 86 31 86		        .word nt_s_quote, xt_dot_quote, z_dot_quote
>bb3c		2e 22				        .text ".", $22
.bb3e						nt_s_quote:
>bb3e		02 0a				        .byte 2, IM+NN
>bb40		48 bb a2 8f 9b 90		        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
>bb46		73 22				        .text "s", $22
.bb48						nt_s_backslash_quote:
>bb48		03 02				        .byte 3, IM
>bb4a		53 bb 89 8f 92 8f		        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
>bb50		73 5c 22			        .text "s", $5C, $22
.bb53						nt_postpone:
>bb53		08 03				        .byte 8, IM+CO
>bb55		63 bb 54 8e 89 8e		        .word nt_immediate, xt_postpone, z_postpone
>bb5b		70 6f 73 74 70 6f 6e 65		        .text "postpone"
.bb63						nt_immediate:
>bb63		09 00				        .byte 9, 0
>bb65		74 bb 24 89 2f 89		        .word nt_compile_only, xt_immediate, z_immediate
>bb6b		69 6d 6d 65 64 69 61 74		        .text "immediate"
>bb73		65
.bb74						nt_compile_only:
>bb74		0c 00				        .byte 12, 0
>bb76		88 bb bd 83 c8 83		        .word nt_never_native, xt_compile_only, z_compile_only
>bb7c		63 6f 6d 70 69 6c 65 2d		        .text "compile-only"
>bb84		6f 6e 6c 79
.bb88						nt_never_native:
>bb88		0c 00				        .byte 12, 0
>bb8a		9c bb e7 9c f4 9c		        .word nt_always_native, xt_never_native, z_never_native
>bb90		6e 65 76 65 72 2d 6e 61		        .text "never-native"
>bb98		74 69 76 65
.bb9c						nt_always_native:
>bb9c		0d 00				        .byte 13, 0
>bb9e		b1 bb 84 9a 91 9a		        .word nt_allow_native, xt_always_native, z_always_native
>bba4		61 6c 77 61 79 73 2d 6e		        .text "always-native"
>bbac		61 74 69 76 65
.bbb1						nt_allow_native:
>bbb1		0c 00				        .byte 12, 0
>bbb3		c5 bb 78 9a 83 9a		        .word nt_nc_limit, xt_allow_native, z_allow_native
>bbb9		61 6c 6c 6f 77 2d 6e 61		        .text "allow-native"
>bbc1		74 69 76 65
.bbc5						nt_nc_limit:
>bbc5		08 08				        .byte 8, NN
>bbc7		d5 bb e2 9c e7 9c		        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
>bbcd		6e 63 2d 6c 69 6d 69 74		        .text "nc-limit"
.bbd5						nt_strip_underflow:
>bbd5		0f 08				        .byte 15, NN
>bbd7		ec bb 37 9e 3c 9e		        .word nt_abort, xt_strip_underflow, z_strip_underflow
>bbdd		73 74 72 69 70 2d 75 6e		        .text "strip-underflow"
>bbe5		64 65 72 66 6c 6f 77
.bbec						nt_abort:
>bbec		05 00				        .byte 5, 0
>bbee		f9 bb 5e 80 b2 80		        .word nt_abort_quote, xt_abort, z_abort
>bbf4		61 62 6f 72 74			        .text "abort"
.bbf9						nt_abort_quote:
>bbf9		06 0b				        .byte 6, CO+IM+NN
>bbfb		07 bc b2 80 bc 80		        .word nt_do, xt_abort_quote, z_abort_quote
>bc01		61 62 6f 72 74 22		        .text "abort", $22
.bc07						nt_do:
>bc07		02 0b				        .byte 2, CO+IM+NN
>bc09		11 bc 51 85 6a 85		        .word nt_question_do, xt_do, z_do
>bc0f		64 6f				        .text "do"
.bc11						nt_question_do:
>bc11		03 0b				        .byte 3, CO+IM+NN
>bc13		1c bc 27 85 6a 85		        .word nt_i, xt_question_do, z_question_do
>bc19		3f 64 6f			        .text "?do"
.bc1c						nt_i:
>bc1c		01 01				        .byte 1, CO
>bc1e		25 bc 0b 89 1f 89		        .word nt_j, xt_i, z_i
>bc24		69				        .text "i"
.bc25						nt_j:
>bc25		01 01				        .byte 1, CO
>bc27		2e bc 59 89 72 89		        .word nt_loop, xt_j, z_j
>bc2d		6a				        .text "j"
.bc2e						nt_loop:
>bc2e		04 03				        .byte 4, CO+IM
>bc30		3a bc 37 8a af 8a		        .word nt_plus_loop, xt_loop, z_loop
>bc36		6c 6f 6f 70			        .text "loop"
.bc3a						nt_plus_loop:
>bc3a		05 03				        .byte 5, CO+IM
>bc3c		47 bc 4b 8a af 8a		        .word nt_exit, xt_plus_loop, z_plus_loop
>bc42		2b 6c 6f 6f 70			        .text "+loop"
.bc47						nt_exit:
>bc47		04 05				        .byte 4, AN+CO
>bc49		53 bc e5 87 e6 87		        .word nt_unloop, xt_exit, z_exit
>bc4f		65 78 69 74			        .text "exit"
.bc53						nt_unloop:
>bc53		06 01				        .byte 6, CO
>bc55		61 bc be 95 cd 95		        .word nt_leave, xt_unloop, z_unloop
>bc5b		75 6e 6c 6f 6f 70		        .text "unloop"
.bc61						nt_leave:
>bc61		05 03				        .byte 5, CO+IM
>bc63		6e bc 92 89 a7 89		        .word nt_recurse, xt_leave, z_leave
>bc69		6c 65 61 76 65			        .text "leave"
.bc6e						nt_recurse:
>bc6e		07 0b				        .byte 7, CO+IM+NN
>bc70		7d bc ca 8e 06 8f		        .word nt_quit, xt_recurse, z_recurse
>bc76		72 65 63 75 72 73 65		        .text "recurse"
.bc7d						nt_quit:
>bc7d		04 00				        .byte 4, 0
>bc7f		89 bc 60 80 b2 80		        .word nt_begin, xt_quit, z_quit
>bc85		71 75 69 74			        .text "quit"
.bc89						nt_begin:
>bc89		05 03				        .byte 5, CO+IM
>bc8b		96 bc e7 88 f1 88		        .word nt_again, xt_begin, z_begin
>bc91		62 65 67 69 6e			        .text "begin"
.bc96						nt_again:
>bc96		05 03				        .byte 5, CO+IM
>bc98		a3 bc 22 82 28 82		        .word nt_state, xt_again, z_again
>bc9e		61 67 61 69 6e			        .text "again"
.bca3						nt_state:
>bca3		05 00				        .byte 5, 0
>bca5		b0 bc fa 91 04 92		        .word nt_evaluate, xt_state, z_state
>bcab		73 74 61 74 65			        .text "state"
.bcb0						nt_evaluate:
>bcb0		08 00				        .byte 8, 0
>bcb2		c0 bc 7e 88 d1 88		        .word nt_base, xt_evaluate, z_evaluate
>bcb8		65 76 61 6c 75 61 74 65		        .text "evaluate"
.bcc0						nt_base:
>bcc0		04 00				        .byte 4, 0
>bcc2		cc bc fe 82 06 83		        .word nt_digit_question, xt_base, z_base
>bcc8		62 61 73 65			        .text "base"
.bccc						nt_digit_question:
>bccc		06 00				        .byte 6, 0
>bcce		da bc fe 9a 32 9b		        .word nt_number, xt_digit_question, z_digit_question
>bcd4		64 69 67 69 74 3f		        .text "digit?"
.bcda						nt_number:
>bcda		06 00				        .byte 6, 0
>bcdc		e8 bc 11 9d 0a 9e		        .word nt_to_number, xt_number, z_number
>bce2		6e 75 6d 62 65 72		        .text "number"
.bce8						nt_to_number:
>bce8		07 00				        .byte 7, 0
>bcea		f7 bc b9 92 58 93		        .word nt_hex, xt_to_number, z_to_number
>bcf0		3e 6e 75 6d 62 65 72		        .text ">number"
.bcf7						nt_hex:
>bcf7		03 00				        .byte 3, 0
>bcf9		02 bd f2 88 f8 88		        .word nt_decimal, xt_hex, z_hex
>bcff		68 65 78			        .text "hex"
.bd02						nt_decimal:
>bd02		07 00				        .byte 7, 0
>bd04		11 bd e5 84 eb 84		        .word nt_count, xt_decimal, z_decimal
>bd0a		64 65 63 69 6d 61 6c		        .text "decimal"
.bd11						nt_count:
>bd11		05 00				        .byte 5, 0
>bd13		1e bd db 83 ee 83		        .word nt_m_star, xt_count, z_count
>bd19		63 6f 75 6e 74			        .text "count"
.bd1e						nt_m_star:
>bd1e		02 00				        .byte 2, 0
>bd20		28 bd ff 8a 19 8b		        .word nt_um_star, xt_m_star, z_m_star
>bd26		6d 2a				        .text "m*"
.bd28						nt_um_star:
>bd28		03 00				        .byte 3, 0
>bd2a		33 bd 78 95 bd 95		        .word nt_star, xt_um_star, z_um_star
>bd30		75 6d 2a			        .text "um*"
.bd33						nt_star:
>bd33		01 00				        .byte 1, 0
>bd35		3c bd d5 91 dd 91		        .word nt_um_slash_mod, xt_star, z_star
>bd3b		2a				        .text "*"
.bd3c						nt_um_slash_mod:
>bd3c		06 00				        .byte 6, 0
>bd3e		4a bd 36 95 77 95		        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
>bd44		75 6d 2f 6d 6f 64		        .text "um/mod"
.bd4a						nt_sm_slash_rem:
>bd4a		06 00				        .byte 6, 0
>bd4c		58 bd 6c 91 94 91		        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
>bd52		73 6d 2f 72 65 6d		        .text "sm/rem"
.bd58						nt_fm_slash_mod:
>bd58		06 00				        .byte 6, 0
>bd5a		66 bd 41 88 77 88		        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
>bd60		66 6d 2f 6d 6f 64		        .text "fm/mod"
.bd66						nt_slash:
>bd66		01 00				        .byte 1, 0
>bd68		6f bd 4a 91 6b 91		        .word nt_slash_mod, xt_slash, z_slash
>bd6e		2f				        .text "/"
.bd6f						nt_slash_mod:
>bd6f		04 00				        .byte 4, 0
>bd71		7b bd 51 91 6b 91		        .word nt_mod, xt_slash_mod, z_slash_mod
>bd77		2f 6d 6f 64			        .text "/mod"
.bd7b						nt_mod:
>bd7b		03 00				        .byte 3, 0
>bd7d		86 bd cb 8b d3 8b		        .word nt_star_slash_mod, xt_mod, z_mod
>bd83		6d 6f 64			        .text "mod"
.bd86						nt_star_slash_mod:
>bd86		05 00				        .byte 5, 0
>bd88		93 bd ea 91 f9 91		        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
>bd8e		2a 2f 6d 6f 64			        .text "*/mod"
.bd93						nt_star_slash:
>bd93		02 00				        .byte 2, 0
>bd95		9d bd de 91 e9 91		        .word nt_backslash, xt_star_slash, z_star_slash
>bd9b		2a 2f				        .text "*/"
.bd9d						nt_backslash:
>bd9d		01 02				        .byte 1, IM
>bd9f		a6 bd d3 82 fd 82		        .word nt_move, xt_backslash, z_backslash
>bda5		5c				        .byte '\'
.bda6						nt_move:
>bda6		04 08				        .byte 4, NN
>bda8		b2 bd d4 8b f5 8b		        .word nt_cmove_up, xt_move, z_move
>bdae		6d 6f 76 65			        .text "move"
.bdb2						nt_cmove_up:
>bdb2		06 00				        .byte 6, 0
>bdb4		c0 bd 82 a0 bc a0		        .word nt_cmove, xt_cmove_up, z_cmove_up
>bdba		63 6d 6f 76 65 3e		        .text "cmove>"
.bdc0						nt_cmove:
>bdc0		05 00				        .byte 5, 0
>bdc2		cd bd 47 a0 81 a0		        .word nt_pad, xt_cmove, z_cmove
>bdc8		63 6d 6f 76 65			        .text "cmove"
.bdcd						nt_pad:
>bdcd		03 00				        .byte 3, 0
>bdcf		d8 bd e6 8c f5 8c		        .word nt_cleave, xt_pad, z_pad
>bdd5		70 61 64			        .text "pad"
.bdd8						nt_cleave:
>bdd8		06 00				        .byte 6, 0
>bdda		e6 bd b1 9a fd 9a		        .word nt_hexstore, xt_cleave, z_cleave
>bde0		63 6c 65 61 76 65		        .text "cleave"
.bde6						nt_hexstore:
>bde6		08 00				        .byte 8, 0
>bde8		f6 bd b4 9b 06 9c		        .word nt_within, xt_hexstore, z_hexstore
>bdee		68 65 78 73 74 6f 72 65		        .text "hexstore"
.bdf6						nt_within:
>bdf6		06 00				        .byte 6, 0
>bdf8		04 be fb 95 10 96		        .word nt_to_in, xt_within, z_within
>bdfe		77 69 74 68 69 6e		        .text "within"
.be04						nt_to_in:
>be04		03 00				        .byte 3, 0
>be06		0f be ae 92 b8 92		        .word nt_less_number_sign, xt_to_in, z_to_in
>be0c		3e 69 6e			        .text ">in"
.be0f						nt_less_number_sign:
>be0f		02 00				        .byte 2, 0
>be11		19 be ad 89 ba 89		        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
>be17		3c 23				        .text "<#"
.be19						nt_number_sign:
>be19		01 00				        .byte 1, 0
>be1b		22 be 33 8c 63 8c		        .word nt_number_sign_s, xt_number_sign, z_number_sign
>be21		23				        .text "#"
.be22						nt_number_sign_s:
>be22		02 00				        .byte 2, 0
>be24		2c be 86 8c 96 8c		        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
>be2a		23 73				        .text "#s"
.be2c						nt_number_sign_greater:
>be2c		02 00				        .byte 2, 0
>be2e		36 be 64 8c 85 8c		        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
>be34		23 3e				        .text "#>"
.be36						nt_hold:
>be36		04 00				        .byte 4, 0
>be38		42 be f9 88 0a 89		        .word nt_sign, xt_hold, z_hold
>be3e		68 6f 6c 64			        .text "hold"
.be42						nt_sign:
>be42		04 00				        .byte 4, 0
>be44		4e be 35 91 49 91		        .word nt_output, xt_sign, z_sign
>be4a		73 69 67 6e			        .text "sign"
.be4e						nt_output:
>be4e		06 00				        .byte 6, 0
>be50		5c be 14 9e 1e 9e		        .word nt_input, xt_output, z_output
>be56		6f 75 74 70 75 74		        .text "output"
.be5c						nt_input:
>be5c		05 00				        .byte 5, 0
>be5e		69 be 07 9c 11 9c		        .word nt_havekey, xt_input, z_input
>be64		69 6e 70 75 74			        .text "input"
.be69						nt_havekey:
>be69		07 00				        .byte 7, 0
>be6b		78 be a9 9b b3 9b		        .word nt_cr, xt_havekey, z_havekey
>be71		68 61 76 65 6b 65 79		        .text "havekey"
.be78						nt_cr:
>be78		02 00				        .byte 2, 0
>be7a		82 be ef 83 f4 83		        .word nt_page, xt_cr, z_cr
>be80		63 72				        .text "cr"
.be82						nt_page:
>be82		04 00				        .byte 4, 0
>be84		8e be f6 8c 13 8d		        .word nt_at_xy, xt_page, z_page
>be8a		70 61 67 65			        .text "page"
.be8e						nt_at_xy:
>be8e		05 00				        .byte 5, 0
>be90		9b be a5 82 d2 82		        .word nt_marker, xt_at_xy, z_at_xy
>be96		61 74 2d 78 79			        .text "at-xy"
.be9b						nt_marker:
>be9b		06 02				        .byte 6, IM
>be9d		a9 be 1a 8b 4a 8b		        .word nt_words, xt_marker, z_marker
>bea3		6d 61 72 6b 65 72		        .text "marker"
.bea9						nt_words:
>bea9		05 00				        .byte 5, 0
>beab		b6 be 1b 9a 77 9a		        .word nt_wordsize, xt_words, z_words
>beb1		77 6f 72 64 73			        .text "words"
.beb6						nt_wordsize:
>beb6		08 00				        .byte 8, 0
>beb8		c6 be 50 9e 70 9e		        .word nt_aligned, xt_wordsize, z_wordsize
>bebe		77 6f 72 64 73 69 7a 65		        .text "wordsize"
.bec6						nt_aligned:
>bec6		07 00				        .byte 7, 0
>bec8		d5 be 29 82 29 82		        .word nt_align, xt_aligned, z_aligned   ; same code as ALIGN
>bece		61 6c 69 67 6e 65 64		        .text "aligned"
.bed5						nt_align:
>bed5		05 00				        .byte 5, 0
>bed7		e2 be 29 82 29 82		        .word nt_bell, xt_align, z_align
>bedd		61 6c 69 67 6e			        .text "align"
.bee2						nt_bell:
>bee2		04 00				        .byte 4, 0
>bee4		ee be 92 9a 97 9a		        .word nt_dump, xt_bell, z_bell
>beea		62 65 6c 6c			        .text "bell"
.beee						nt_dump:
>beee		04 00				        .byte 4, 0
>bef0		fa be c1 98 3e 99		        .word nt_dot_s, xt_dump, z_dump
>bef6		64 75 6d 70			        .text "dump"
.befa						nt_dot_s:
>befa		02 00				        .byte 2, 0
>befc		04 bf 7d 98 c0 98		        .word +, xt_dot_s, z_dot_s
>bf02		2e 73				        .text ".s"
.bf04						+
.bf04						nt_disasm:
>bf04		06 00				        .byte 6, 0
>bf06		12 bf 27 a6 2d a6		        .word +, xt_disasm, z_disasm
>bf0c		64 69 73 61 73 6d		        .text "disasm"
.bf12						+
.bf12						nt_compare:
>bf12		07 00				        .byte 7, 0
>bf14		21 bf bd a0 21 a1		        .word nt_search, xt_compare, z_compare
>bf1a		63 6f 6d 70 61 72 65		        .text "compare"
.bf21						nt_search:
>bf21		06 08				        .byte 6, NN
>bf23		2f bf 78 a1 16 a2		        .word +, xt_search, z_search
>bf29		73 65 61 72 63 68		        .text "search"
.bf2f						+
.bf2f						nt_environment_q:
>bf2f		0c 00				        .byte 12, 0
>bf31		43 bf ae 86 1f 87		        .word +, xt_environment_q, z_environment_q
>bf37		65 6e 76 69 72 6f 6e 6d		        .text "environment?"
>bf3f		65 6e 74 3f
.bf43						+
.bf43						nt_find:
>bf43		04 00				        .byte 4, 0
>bf45		4f bf f9 87 40 88		        .word nt_word, xt_find, z_find
>bf4b		66 69 6e 64			        .text "find"
.bf4f						nt_word:
>bf4f		04 00				        .byte 4, 0
>bf51		5b bf 11 96 54 96		        .word nt_paren, xt_word, z_word
>bf57		77 6f 72 64			        .text "word"
.bf5b						nt_paren:
>bf5b		01 02				        .byte 1, IM
>bf5d		64 bf 14 8d 23 8d		        .word nt_dot_paren, xt_paren, z_paren
>bf63		28				        .text "("
.bf64						nt_dot_paren:
>bf64		02 02				        .byte 2, IM
>bf66		6e bf 18 86 26 86		        .word nt_if, xt_dot_paren, z_dot_paren
>bf6c		2e 28				        .text ".("
.bf6e						nt_if:
>bf6e		02 0b				        .byte 2, IM+CO+NN
>bf70		78 bf 20 89 23 89		        .word nt_then, xt_if, z_if
>bf76		69 66				        .text "if"
.bf78						nt_then:
>bf78		04 0b				        .byte 4, IM+CO+NN
>bf7a		84 bf 7f 86 8b 86		        .word nt_else, xt_then, z_then
>bf80		74 68 65 6e			        .text "then"
.bf84						nt_else:
>bf84		04 0b				        .byte 4, IM+CO+NN
>bf86		90 bf 74 86 8b 86		        .word nt_repeat, xt_else, z_else
>bf8c		65 6c 73 65			        .text "else"
.bf90						nt_repeat:
>bf90		06 0b				        .byte 6, IM+CO+NN
>bf92		9e bf 49 8f 52 8f		        .word nt_until, xt_repeat, z_repeat
>bf98		72 65 70 65 61 74		        .text "repeat"
.bf9e						nt_until:
>bf9e		05 0b				        .byte 5, IM+CO+NN
>bfa0		ab bf ce 95 d4 95		        .word nt_while, xt_until, z_until
>bfa6		75 6e 74 69 6c			        .text "until"
.bfab						nt_while:
>bfab		05 0b				        .byte 5, IM+CO+NN
>bfad		b8 bf f1 95 fa 95		        .word nt_case, xt_while, z_while
>bfb3		77 68 69 6c 65			        .text "while"
.bfb8						nt_case:
>bfb8		04 0b				        .byte 4, IM+CO+NN
>bfba		c4 bf 71 9e 77 9e		        .word nt_of, xt_case, z_case    ; shares code with ZERO
>bfc0		63 61 73 65			        .text "case"
.bfc4						nt_of:
>bfc4		02 0b				        .byte 2, IM+CO+NN
>bfc6		ce bf 97 8c af 8c		        .word nt_endof, xt_of, z_of
>bfcc		6f 66				        .text "of"
.bfce						nt_endof:
>bfce		05 0b				        .byte 5, IM+CO+NN
>bfd0		db bf 74 86 8b 86		        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
>bfd6		65 6e 64 6f 66			        .text "endof"
.bfdb						nt_endcase:
>bfdb		07 0b				        .byte 7, IM+CO+NN
>bfdd		ea bf 96 86 ad 86		        .word nt_defer_fetch, xt_endcase, z_endcase
>bfe3		65 6e 64 63 61 73 65		        .text "endcase"
.bfea						nt_defer_fetch:
>bfea		06 00				        .byte 6, 0
>bfec		f8 bf 04 85 0d 85		        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
>bff2		64 65 66 65 72 40		        .text "defer@"
.bff8						nt_defer_store:
>bff8		06 00				        .byte 6, 0
>bffa		06 c0 0e 85 17 85		        .word nt_is, xt_defer_store, z_defer_store
>c000		64 65 66 65 72 21		        .text "defer!"
.c006						nt_is:
>c006		02 02				        .byte 2, IM
>c008		10 c0 40 89 58 89		        .word nt_action_of, xt_is, z_is
>c00e		69 73				        .text "is"
.c010						nt_action_of:
>c010		09 02				        .byte 9, IM
>c012		21 c0 09 82 21 82		        .word nt_useraddr, xt_action_of, z_action_of
>c018		61 63 74 69 6f 6e 2d 6f		        .text "action-of"
>c020		66
.c021						nt_useraddr:
>c021		08 00				        .byte 8, 0
>c023		31 c0 45 9e 4f 9e		        .word nt_buffer_colon, xt_useraddr, z_useraddr
>c029		75 73 65 72 61 64 64 72		        .text "useraddr"
.c031						nt_buffer_colon:
>c031		07 00				        .byte 7, 0
>c033		40 c0 1e 83 24 83		        .word +, xt_buffer_colon, z_buffer_colon
>c039		62 75 66 66 65 72 3a		        .text "buffer:"
.c040						+
.c040						nt_buffstatus:
>c040		0a 00				        .byte 10, 0
>c042		52 c0 f2 af f7 af		        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
>c048		62 75 66 66 73 74 61 74		        .text "buffstatus"
>c050		75 73
.c052						nt_buffblocknum:
>c052		0c 00				        .byte 12, 0
>c054		66 c0 bc af c1 af		        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
>c05a		62 75 66 66 62 6c 6f 63		        .text "buffblocknum"
>c062		6b 6e 75 6d
.c066						nt_blkbuffer:
>c066		09 00				        .byte 9, 0
>c068		77 c0 0c ae 19 ae		        .word nt_scr, xt_blkbuffer, z_blkbuffer
>c06e		62 6c 6b 62 75 66 66 65		        .text "blkbuffer"
>c076		72
.c077						nt_scr:
>c077		03 08				        .byte 3, NN
>c079		82 c0 74 b0 79 b0		        .word nt_blk, xt_scr, z_scr
>c07f		73 63 72			        .text "scr"
.c082						nt_blk:
>c082		03 08				        .byte 3, NN
>c084		8d c0 07 ae 0c ae		        .word nt_block_write, xt_blk, z_blk
>c08a		62 6c 6b			        .text "blk"
.c08d						nt_block_write:
>c08d		0b 08				        .byte 11, NN
>c08f		a0 c0 a9 af b7 af		        .word nt_block_write_vector, xt_block_write, z_block_write
>c095		62 6c 6f 63 6b 2d 77 72		        .text "block-write"
>c09d		69 74 65
.c0a0						nt_block_write_vector:
>c0a0		12 08				        .byte 18, NN
>c0a2		ba c0 b7 af bc af		        .word nt_block_read, xt_block_write_vector, z_block_write_vector
>c0a8		62 6c 6f 63 6b 2d 77 72		        .text "block-write-vector"
>c0b0		69 74 65 2d 76 65 63 74 6f 72
.c0ba						nt_block_read:
>c0ba		0a 08				        .byte 10, NN
>c0bc		cc c0 91 af 9f af		        .word nt_block_read_vector, xt_block_read, z_block_read
>c0c2		62 6c 6f 63 6b 2d 72 65		        .text "block-read"
>c0ca		61 64
.c0cc						nt_block_read_vector:
>c0cc		11 08				        .byte 17, NN
>c0ce		e5 c0 9f af a4 af		        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
>c0d4		62 6c 6f 63 6b 2d 72 65		        .text "block-read-vector"
>c0dc		61 64 2d 76 65 63 74 6f 72
.c0e5						nt_save_buffers:
>c0e5		0c 00				        .byte 12, 0
>c0e7		f9 c0 59 b0 73 b0		        .word nt_block, xt_save_buffers, z_save_buffers
>c0ed		73 61 76 65 2d 62 75 66		        .text "save-buffers"
>c0f5		66 65 72 73
.c0f9						nt_block:
>c0f9		05 00				        .byte 5, 0
>c0fb		06 c1 1a ae 6c ae		        .word nt_update, xt_block, z_block
>c101		62 6c 6f 63 6b			        .text "block"
.c106						nt_update:
>c106		06 00				        .byte 6, 0
>c108		14 c1 be b0 c6 b0		        .word nt_buffer, xt_update, z_update
>c10e		75 70 64 61 74 65		        .text "update"
.c114						nt_buffer:
>c114		06 00				        .byte 6, 0
>c116		22 c1 c1 af f1 af		        .word nt_empty_buffers, xt_buffer, z_buffer
>c11c		62 75 66 66 65 72		        .text "buffer"
.c122						nt_empty_buffers:
>c122		0d 00				        .byte 13, 0
>c124		37 c1 f7 af fd af		        .word nt_flush, xt_empty_buffers, z_empty_buffers
>c12a		65 6d 70 74 79 2d 62 75		        .text "empty-buffers"
>c132		66 66 65 72 73
.c137						nt_flush:
>c137		05 00				        .byte 5, 0
>c139		44 c1 fe af 07 b0		        .word nt_load, xt_flush, z_flush
>c13f		66 6c 75 73 68			        .text "flush"
.c144						nt_load:
>c144		04 00				        .byte 4, 0
>c146		50 c1 15 b0 58 b0		        .word nt_thru, xt_load, z_load
>c14c		6c 6f 61 64			        .text "load"
.c150						nt_thru:
>c150		04 00				        .byte 4, 0
>c152		5c c1 79 b0 bd b0		        .word +, xt_thru, z_thru
>c158		74 68 72 75			        .text "thru"
.c15c						+
.c15c						nt_list:
>c15c		04 00				        .byte 4, 0
>c15e		68 c1 08 b0 14 b0		        .word +, xt_list, z_list
>c164		6c 69 73 74			        .text "list"
.c168						+
.c168						nt_block_ramdrive_init:
>c168		13 00				        .byte 19, 0
>c16a		83 c1 6d ae 90 af		        .word +, xt_block_ramdrive_init, z_block_ramdrive_init
>c170		62 6c 6f 63 6b 2d 72 61		        .text "block-ramdrive-init"
>c178		6d 64 72 69 76 65 2d 69 6e 69 74
.c183						+
.c183						nt_definitions:
>c183		0b 00				        .byte 11, 0
>c185		96 c1 f8 b1 00 b2		        .word nt_wordlist, xt_definitions, z_definitions
>c18b		64 65 66 69 6e 69 74 69		        .text "definitions"
>c193		6f 6e 73
.c196						nt_wordlist:
>c196		08 00				        .byte 8, 0
>c198		a6 c1 63 b3 79 b3		        .word nt_search_wordlist, xt_wordlist, z_wordlist
>c19e		77 6f 72 64 6c 69 73 74		        .text "wordlist"
.c1a6						nt_search_wordlist:
>c1a6		0f 00				        .byte 15, 0
>c1a8		bd c1 9c b2 0f b3		        .word nt_set_current, xt_search_wordlist, z_search_wordlist
>c1ae		73 65 61 72 63 68 2d 77		        .text "search-wordlist"
>c1b6		6f 72 64 6c 69 73 74
.c1bd						nt_set_current:
>c1bd		0b 00				        .byte 11, 0
>c1bf		d0 c1 10 b3 1b b3		        .word nt_get_current, xt_set_current, z_set_current
>c1c5		73 65 74 2d 63 75 72 72		        .text "set-current"
>c1cd		65 6e 74
.c1d0						nt_get_current:
>c1d0		0b 00				        .byte 11, 0
>c1d2		e3 c1 08 b2 12 b2		        .word nt_set_order, xt_get_current, z_get_current
>c1d8		67 65 74 2d 63 75 72 72		        .text "get-current"
>c1e0		65 6e 74
.c1e3						nt_set_order:
>c1e3		09 00				        .byte 9, 0
>c1e5		f4 c1 1c b3 4f b3		        .word nt_get_order, xt_set_order, z_set_order
>c1eb		73 65 74 2d 6f 72 64 65		        .text "set-order"
>c1f3		72
.c1f4						nt_get_order:
>c1f4		09 00				        .byte 9, 0
>c1f6		05 c2 13 b2 3b b2		        .word nt_root_wordlist, xt_get_order, z_get_order
>c1fc		67 65 74 2d 6f 72 64 65		        .text "get-order"
>c204		72
.c205						nt_root_wordlist:
>c205		0d 00				        .byte 13, 0
>c207		1a c2 93 b2 9b b2		        .word +, xt_root_wordlist, z_root_wordlist
>c20d		72 6f 6f 74 2d 77 6f 72		        .text "root-wordlist"
>c215		64 6c 69 73 74
.c21a						+
.c21a						nt_assembler_wordlist:
>c21a		12 00				        .byte 18, 0
>c21c		34 c2 3c 9e 44 9e		        .word +, xt_assembler_wordlist, z_assembler_wordlist
>c222		61 73 73 65 6d 62 6c 65		        .text "assembler-wordlist"
>c22a		72 2d 77 6f 72 64 6c 69 73 74
.c234						+
.c234						nt_editor_wordlist:
>c234		0f 00				        .byte 15, 0
>c236		4b c2 0b 9e 13 9e		        .word +, xt_editor_wordlist, z_editor_wordlist
>c23c		65 64 69 74 6f 72 2d 77		        .text "editor-wordlist"
>c244		6f 72 64 6c 69 73 74
.c24b						+
.c24b						nt_forth_wordlist:
>c24b		0e 00				        .byte 14, 0
>c24d		61 c2 71 9e 77 9e		        .word nt_only, xt_forth_wordlist, z_forth_wordlist
>c253		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c25b		72 64 6c 69 73 74
.c261						nt_only:
>c261		04 00				        .byte 4, 0
>c263		6d c2 3c b2 42 b2		        .word nt_also, xt_only, z_only
>c269		6f 6e 6c 79			        .text "only"
.c26d						nt_also:
>c26d		04 00				        .byte 4, 0
>c26f		79 c2 e8 b1 f7 b1		        .word nt_previous, xt_also, z_also
>c275		61 6c 73 6f			        .text "also"
.c279						nt_previous:
>c279		08 00				        .byte 8, 0
>c27b		89 c2 86 b2 92 b2		        .word nt_to_order, xt_previous, z_previous
>c281		70 72 65 76 69 6f 75 73		        .text "previous"
.c289						nt_to_order:
>c289		06 00				        .byte 6, 0
>c28b		97 c2 50 b3 62 b3		        .word nt_order, xt_to_order, z_to_order
>c291		3e 6f 72 64 65 72		        .text ">order"
.c297						nt_order:
>c297		05 00				        .byte 5, 0
>c299		a4 c2 43 b2 6d b2		        .word nt_forth, xt_order, z_order
>c29f		6f 72 64 65 72			        .text "order"
.c2a4						nt_forth:
>c2a4		05 00				        .byte 5, 0
>c2a6		b1 c2 01 b2 07 b2		        .word +, xt_forth, z_forth
>c2ac		66 6f 72 74 68			        .text "forth"
.c2b1						+
>c2b1		03 08				nt_see: .byte 3, NN
>c2b3		bc c2 46 99 1a 9a		        .word +, xt_see, z_see
>c2b9		73 65 65			        .text "see"
.c2bc						+
.c2bc						nt_ed:
>c2bc		03 08				        .byte 3, NN
>c2be		c7 c2 14 a8 17 a8		        .word +, xt_ed, z_ed
>c2c4		65 64 3a			        .text "ed:"
.c2c7						+
.c2c7						nt_cold:
>c2c7		04 00				        .byte 4, 0
>c2c9		d3 c2 00 80 b2 80		        .word nt_bye, xt_cold, z_cold
>c2cf		63 6f 6c 64			        .text "cold"
.c2d3						nt_bye:
>c2d3		03				        .byte 3         ; length of word strings
>c2d4		00				        .byte 0         ; status byte
>c2d5		00 00				        .word 0000      ; next word in Dictionary, 0000 signals end
>c2d7		7a 98				        .word xt_bye    ; start of code block (xt of this word)
>c2d9		7d 98				        .word z_bye     ; end of code (RTS)
>c2db		62 79 65			        .text "bye"     ; word name, always lower case, not zero-terminated
.c2de						root_dictionary_start:
.c2de						nt_root_set_order:
>c2de		09 00				        .byte 9, 0
>c2e0		ef c2 1c b3 4f b3		        .word nt_root_forth, xt_set_order, z_set_order
>c2e6		73 65 74 2d 6f 72 64 65		        .text "set-order"
>c2ee		72
.c2ef						nt_root_forth:
>c2ef		05 00				        .byte 5, 0
>c2f1		fc c2 01 b2 07 b2		        .word nt_root_forth_wordlist, xt_forth, z_forth
>c2f7		66 6f 72 74 68			        .text "forth"
.c2fc						nt_root_forth_wordlist:
>c2fc		0e 00				        .byte 14, 0
>c2fe		12 c3 71 9e 77 9e		        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
>c304		66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>c30c		72 64 6c 69 73 74
.c312						nt_root_words:
>c312		05 00				        .byte 5, 0
>c314		00 00 1b 9a 77 9a		        .word 0000, xt_words, z_words
>c31a		77 6f 72 64 73			        .text "words"
.c31f						editor_dictionary_start:
.c31f						nt_editor_o:
>c31f		01 00				        .byte 1, 0
>c321		28 c3 a2 b1 e7 b1		        .word nt_editor_line, xt_editor_o, z_editor_o
>c327		6f				        .text "o"
.c328						nt_editor_line:
>c328		04 00				        .byte 4, 0
>c32a		34 c3 89 b1 a1 b1		        .word nt_editor_l, xt_editor_line, z_editor_line
>c330		6c 69 6e 65			        .text "line"
.c334						nt_editor_l:
>c334		01 00				        .byte 1, 0
>c336		3d c3 13 b1 88 b1		        .word nt_editor_el, xt_editor_l, z_editor_l
>c33c		6c				        .text "l"
.c33d						nt_editor_el:
>c33d		02 00				        .byte 2, 0
>c33f		47 c3 01 b1 12 b1		        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
>c345		65 6c				        .text "el"
.c347						nt_editor_erase_screen:
>c347		0c 00				        .byte 12, 0
>c349		5b c3 ef b0 00 b1		        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
>c34f		65 72 61 73 65 2d 73 63		        .text "erase-screen"
>c357		72 65 65 6e
.c35b						nt_editor_enter_screen:
>c35b		0c 00				        .byte 12, 0
>c35d		00 00 d3 b0 ee b0		        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
>c363		65 6e 74 65 72 2d 73 63		        .text "enter-screen"
>c36b		72 65 65 6e
.c36f						assembler_dictionary_start:
.c36f						nt_asm_first:
.c36f						nt_asm_adc:
=$a46b						        _ := asm_op_table + 3*(171 * (512 + $6d - 2 - <asm_op_table) % 256)
>c36f		03 0a				        .byte len("adc"), IM+NN
>c371		7a c3				        .word +
>c373		6b a4 6e a4			        .word _, _ + 3
>c377		61 64 63			        .text "adc"
.c37a						+
.c37a						nt_asm_adc_h:
=$a567						        _ := asm_op_table + 3*(171 * (512 + $69 - 2 - <asm_op_table) % 256)
>c37a		05 0a				        .byte len("adc.#"), IM+NN
>c37c		87 c3				        .word +
>c37e		67 a5 6a a5			        .word _, _ + 3
>c382		61 64 63 2e 23			        .text "adc.#"
.c387						+
.c387						nt_asm_adc_x:
=$a37b						        _ := asm_op_table + 3*(171 * (512 + $7d - 2 - <asm_op_table) % 256)
>c387		05 0a				        .byte len("adc.x"), IM+NN
>c389		94 c3				        .word +
>c38b		7b a3 7e a3			        .word _, _ + 3
>c38f		61 64 63 2e 78			        .text "adc.x"
.c394						+
.c394						nt_asm_adc_y:
=$a477						        _ := asm_op_table + 3*(171 * (512 + $79 - 2 - <asm_op_table) % 256)
>c394		05 0a				        .byte len("adc.y"), IM+NN
>c396		a1 c3				        .word +
>c398		77 a4 7a a4			        .word _, _ + 3
>c39c		61 64 63 2e 79			        .text "adc.y"
.c3a1						+
.c3a1						nt_asm_adc_z:
=$a363						        _ := asm_op_table + 3*(171 * (512 + $65 - 2 - <asm_op_table) % 256)
>c3a1		05 0a				        .byte len("adc.z"), IM+NN
>c3a3		ae c3				        .word +
>c3a5		63 a3 66 a3			        .word _, _ + 3
>c3a9		61 64 63 2e 7a			        .text "adc.z"
.c3ae						+
.c3ae						nt_asm_adc_zi:
=$a570						        _ := asm_op_table + 3*(171 * (512 + $72 - 2 - <asm_op_table) % 256)
>c3ae		06 0a				        .byte len("adc.zi"), IM+NN
>c3b0		bc c3				        .word +
>c3b2		70 a5 73 a5			        .word _, _ + 3
>c3b6		61 64 63 2e 7a 69		        .text "adc.zi"
.c3bc						+
.c3bc						nt_asm_adc_ziy:
=$a36f						        _ := asm_op_table + 3*(171 * (512 + $71 - 2 - <asm_op_table) % 256)
>c3bc		07 0a				        .byte len("adc.ziy"), IM+NN
>c3be		cb c3				        .word +
>c3c0		6f a3 72 a3			        .word _, _ + 3
>c3c4		61 64 63 2e 7a 69 79		        .text "adc.ziy"
.c3cb						+
.c3cb						nt_asm_adc_zx:
=$a573						        _ := asm_op_table + 3*(171 * (512 + $75 - 2 - <asm_op_table) % 256)
>c3cb		06 0a				        .byte len("adc.zx"), IM+NN
>c3cd		d9 c3				        .word +
>c3cf		73 a5 76 a5			        .word _, _ + 3
>c3d3		61 64 63 2e 7a 78		        .text "adc.zx"
.c3d9						+
.c3d9						nt_asm_adc_zxi:
=$a45f						        _ := asm_op_table + 3*(171 * (512 + $61 - 2 - <asm_op_table) % 256)
>c3d9		07 0a				        .byte len("adc.zxi"), IM+NN
>c3db		e8 c3				        .word +
>c3dd		5f a4 62 a4			        .word _, _ + 3
>c3e1		61 64 63 2e 7a 78 69		        .text "adc.zxi"
.c3e8						+
.c3e8						nt_asm_and:
=$a52b						        _ := asm_op_table + 3*(171 * (512 + $2d - 2 - <asm_op_table) % 256)
>c3e8		04 0a				        .byte len("and."), IM+NN
>c3ea		f4 c3				        .word +
>c3ec		2b a5 2e a5			        .word _, _ + 3
>c3f0		61 6e 64 2e			        .text "and."
.c3f4						+
.c3f4						nt_asm_and_h:
=$a327						        _ := asm_op_table + 3*(171 * (512 + $29 - 2 - <asm_op_table) % 256)
>c3f4		05 0a				        .byte len("and.#"), IM+NN
>c3f6		01 c4				        .word +
>c3f8		27 a3 2a a3			        .word _, _ + 3
>c3fc		61 6e 64 2e 23			        .text "and.#"
.c401						+
.c401						nt_asm_and_x:
=$a43b						        _ := asm_op_table + 3*(171 * (512 + $3d - 2 - <asm_op_table) % 256)
>c401		05 0a				        .byte len("and.x"), IM+NN
>c403		0e c4				        .word +
>c405		3b a4 3e a4			        .word _, _ + 3
>c409		61 6e 64 2e 78			        .text "and.x"
.c40e						+
.c40e						nt_asm_and_y:
=$a537						        _ := asm_op_table + 3*(171 * (512 + $39 - 2 - <asm_op_table) % 256)
>c40e		05 0a				        .byte len("and.y"), IM+NN
>c410		1b c4				        .word +
>c412		37 a5 3a a5			        .word _, _ + 3
>c416		61 6e 64 2e 79			        .text "and.y"
.c41b						+
.c41b						nt_asm_and_z:
=$a423						        _ := asm_op_table + 3*(171 * (512 + $25 - 2 - <asm_op_table) % 256)
>c41b		05 0a				        .byte len("and.z"), IM+NN
>c41d		28 c4				        .word +
>c41f		23 a4 26 a4			        .word _, _ + 3
>c423		61 6e 64 2e 7a			        .text "and.z"
.c428						+
.c428						nt_asm_and_zi:
=$a330						        _ := asm_op_table + 3*(171 * (512 + $32 - 2 - <asm_op_table) % 256)
>c428		06 0a				        .byte len("and.zi"), IM+NN
>c42a		36 c4				        .word +
>c42c		30 a3 33 a3			        .word _, _ + 3
>c430		61 6e 64 2e 7a 69		        .text "and.zi"
.c436						+
.c436						nt_asm_and_ziy:
=$a42f						        _ := asm_op_table + 3*(171 * (512 + $31 - 2 - <asm_op_table) % 256)
>c436		07 0a				        .byte len("and.ziy"), IM+NN
>c438		45 c4				        .word +
>c43a		2f a4 32 a4			        .word _, _ + 3
>c43e		61 6e 64 2e 7a 69 79		        .text "and.ziy"
.c445						+
.c445						nt_asm_and_zx:
=$a333						        _ := asm_op_table + 3*(171 * (512 + $35 - 2 - <asm_op_table) % 256)
>c445		06 0a				        .byte len("and.zx"), IM+NN
>c447		53 c4				        .word +
>c449		33 a3 36 a3			        .word _, _ + 3
>c44d		61 6e 64 2e 7a 78		        .text "and.zx"
.c453						+
.c453						nt_asm_and_zxi:
=$a51f						        _ := asm_op_table + 3*(171 * (512 + $21 - 2 - <asm_op_table) % 256)
>c453		07 0a				        .byte len("and.zxi"), IM+NN
>c455		62 c4				        .word +
>c457		1f a5 22 a5			        .word _, _ + 3
>c45b		61 6e 64 2e 7a 78 69		        .text "and.zxi"
.c462						+
.c462						nt_asm_asl:
=$a30c						        _ := asm_op_table + 3*(171 * (512 + $0e - 2 - <asm_op_table) % 256)
>c462		03 0a				        .byte len("asl"), IM+NN
>c464		6d c4				        .word +
>c466		0c a3 0f a3			        .word _, _ + 3
>c46a		61 73 6c			        .text "asl"
.c46d						+
.c46d						nt_asm_asl_a:
=$a408						        _ := asm_op_table + 3*(171 * (512 + $0a - 2 - <asm_op_table) % 256)
>c46d		05 0a				        .byte len("asl.a"), IM+NN
>c46f		7a c4				        .word +
>c471		08 a4 0b a4			        .word _, _ + 3
>c475		61 73 6c 2e 61			        .text "asl.a"
.c47a						+
.c47a						nt_asm_asl_x:
=$a51c						        _ := asm_op_table + 3*(171 * (512 + $1e - 2 - <asm_op_table) % 256)
>c47a		05 0a				        .byte len("asl.x"), IM+NN
>c47c		87 c4				        .word +
>c47e		1c a5 1f a5			        .word _, _ + 3
>c482		61 73 6c 2e 78			        .text "asl.x"
.c487						+
.c487						nt_asm_asl_z:
=$a504						        _ := asm_op_table + 3*(171 * (512 + $06 - 2 - <asm_op_table) % 256)
>c487		05 0a				        .byte len("asl.z"), IM+NN
>c489		94 c4				        .word +
>c48b		04 a5 07 a5			        .word _, _ + 3
>c48f		61 73 6c 2e 7a			        .text "asl.z"
.c494						+
.c494						nt_asm_asl_zx:
=$a414						        _ := asm_op_table + 3*(171 * (512 + $16 - 2 - <asm_op_table) % 256)
>c494		06 0a				        .byte len("asl.zx"), IM+NN
>c496		a2 c4				        .word +
>c498		14 a4 17 a4			        .word _, _ + 3
>c49c		61 73 6c 2e 7a 78		        .text "asl.zx"
.c4a2						+
.c4a2						nt_asm_bcc:
=$a28e						        _ := asm_op_table + 3*(171 * (512 + $90 - 2 - <asm_op_table) % 256)
>c4a2		03 0a				        .byte len("bcc"), IM+NN
>c4a4		ad c4				        .word +
>c4a6		8e a2 91 a2			        .word _, _ + 3
>c4aa		62 63 63			        .text "bcc"
.c4ad						+
.c4ad						nt_asm_bcs:
=$a3ae						        _ := asm_op_table + 3*(171 * (512 + $b0 - 2 - <asm_op_table) % 256)
>c4ad		03 0a				        .byte len("bcs"), IM+NN
>c4af		b8 c4				        .word +
>c4b1		ae a3 b1 a3			        .word _, _ + 3
>c4b5		62 63 73			        .text "bcs"
.c4b8						+
.c4b8						nt_asm_beq:
=$a2ee						        _ := asm_op_table + 3*(171 * (512 + $f0 - 2 - <asm_op_table) % 256)
>c4b8		03 0a				        .byte len("beq"), IM+NN
>c4ba		c3 c4				        .word +
>c4bc		ee a2 f1 a2			        .word _, _ + 3
>c4c0		62 65 71			        .text "beq"
.c4c3						+
.c4c3						nt_asm_bmi:
=$a52e						        _ := asm_op_table + 3*(171 * (512 + $30 - 2 - <asm_op_table) % 256)
>c4c3		03 0a				        .byte len("bmi"), IM+NN
>c4c5		ce c4				        .word +
>c4c7		2e a5 31 a5			        .word _, _ + 3
>c4cb		62 6d 69			        .text "bmi"
.c4ce						+
.c4ce						nt_asm_bne:
=$a4ce						        _ := asm_op_table + 3*(171 * (512 + $d0 - 2 - <asm_op_table) % 256)
>c4ce		03 0a				        .byte len("bne"), IM+NN
>c4d0		d9 c4				        .word +
>c4d2		ce a4 d1 a4			        .word _, _ + 3
>c4d6		62 6e 65			        .text "bne"
.c4d9						+
.c4d9						nt_asm_bpl:
=$a40e						        _ := asm_op_table + 3*(171 * (512 + $10 - 2 - <asm_op_table) % 256)
>c4d9		03 0a				        .byte len("bpl"), IM+NN
>c4db		e4 c4				        .word +
>c4dd		0e a4 11 a4			        .word _, _ + 3
>c4e1		62 70 6c			        .text "bpl"
.c4e4						+
.c4e4						nt_asm_bra:
=$a37e						        _ := asm_op_table + 3*(171 * (512 + $80 - 2 - <asm_op_table) % 256)
>c4e4		03 0a				        .byte len("bra"), IM+NN
>c4e6		ef c4				        .word +
>c4e8		7e a3 81 a3			        .word _, _ + 3
>c4ec		62 72 61			        .text "bra"
.c4ef						+
.c4ef						nt_asm_bvc:
=$a34e						        _ := asm_op_table + 3*(171 * (512 + $50 - 2 - <asm_op_table) % 256)
>c4ef		03 0a				        .byte len("bvc"), IM+NN
>c4f1		fa c4				        .word +
>c4f3		4e a3 51 a3			        .word _, _ + 3
>c4f7		62 76 63			        .text "bvc"
.c4fa						+
.c4fa						nt_asm_bvs:
=$a46e						        _ := asm_op_table + 3*(171 * (512 + $70 - 2 - <asm_op_table) % 256)
>c4fa		03 0a				        .byte len("bvs"), IM+NN
>c4fc		05 c5				        .word +
>c4fe		6e a4 71 a4			        .word _, _ + 3
>c502		62 76 73			        .text "bvs"
.c505						+
.c505						nt_asm_bit:
=$a32a						        _ := asm_op_table + 3*(171 * (512 + $2c - 2 - <asm_op_table) % 256)
>c505		03 0a				        .byte len("bit"), IM+NN
>c507		10 c5				        .word +
>c509		2a a3 2d a3			        .word _, _ + 3
>c50d		62 69 74			        .text "bit"
.c510						+
.c510						nt_asm_bit_h:
=$a387						        _ := asm_op_table + 3*(171 * (512 + $89 - 2 - <asm_op_table) % 256)
>c510		05 0a				        .byte len("bit.#"), IM+NN
>c512		1d c5				        .word +
>c514		87 a3 8a a3			        .word _, _ + 3
>c518		62 69 74 2e 23			        .text "bit.#"
.c51d						+
.c51d						nt_asm_bit_x:
=$a53a						        _ := asm_op_table + 3*(171 * (512 + $3c - 2 - <asm_op_table) % 256)
>c51d		05 0a				        .byte len("bit.x"), IM+NN
>c51f		2a c5				        .word +
>c521		3a a5 3d a5			        .word _, _ + 3
>c525		62 69 74 2e 78			        .text "bit.x"
.c52a						+
.c52a						nt_asm_bit_z:
=$a522						        _ := asm_op_table + 3*(171 * (512 + $24 - 2 - <asm_op_table) % 256)
>c52a		05 0a				        .byte len("bit.z"), IM+NN
>c52c		37 c5				        .word +
>c52e		22 a5 25 a5			        .word _, _ + 3
>c532		62 69 74 2e 7a			        .text "bit.z"
.c537						+
.c537						nt_asm_bit_zx:
=$a432						        _ := asm_op_table + 3*(171 * (512 + $34 - 2 - <asm_op_table) % 256)
>c537		06 0a				        .byte len("bit.zx"), IM+NN
>c539		45 c5				        .word +
>c53b		32 a4 35 a4			        .word _, _ + 3
>c53f		62 69 74 2e 7a 78		        .text "bit.zx"
.c545						+
.c545						nt_asm_brk:
=$a4fe						        _ := asm_op_table + 3*(171 * (512 + $00 - 2 - <asm_op_table) % 256)
>c545		03 0a				        .byte len("brk"), IM+NN
>c547		50 c5				        .word +
>c549		fe a4 01 a5			        .word _, _ + 3
>c54d		62 72 6b			        .text "brk"
.c550						+
.c550						nt_asm_clc:
=$a516						        _ := asm_op_table + 3*(171 * (512 + $18 - 2 - <asm_op_table) % 256)
>c550		03 0a				        .byte len("clc"), IM+NN
>c552		5b c5				        .word +
>c554		16 a5 19 a5			        .word _, _ + 3
>c558		63 6c 63			        .text "clc"
.c55b						+
.c55b						nt_asm_cld:
=$a2d6						        _ := asm_op_table + 3*(171 * (512 + $d8 - 2 - <asm_op_table) % 256)
>c55b		03 0a				        .byte len("cld"), IM+NN
>c55d		66 c5				        .word +
>c55f		d6 a2 d9 a2			        .word _, _ + 3
>c563		63 6c 64			        .text "cld"
.c566						+
.c566						nt_asm_cli:
=$a456						        _ := asm_op_table + 3*(171 * (512 + $58 - 2 - <asm_op_table) % 256)
>c566		03 0a				        .byte len("cli"), IM+NN
>c568		71 c5				        .word +
>c56a		56 a4 59 a4			        .word _, _ + 3
>c56e		63 6c 69			        .text "cli"
.c571						+
.c571						nt_asm_clv:
=$a4b6						        _ := asm_op_table + 3*(171 * (512 + $b8 - 2 - <asm_op_table) % 256)
>c571		03 0a				        .byte len("clv"), IM+NN
>c573		7c c5				        .word +
>c575		b6 a4 b9 a4			        .word _, _ + 3
>c579		63 6c 76			        .text "clv"
.c57c						+
.c57c						nt_asm_cmp:
=$a4cb						        _ := asm_op_table + 3*(171 * (512 + $cd - 2 - <asm_op_table) % 256)
>c57c		03 0a				        .byte len("cmp"), IM+NN
>c57e		87 c5				        .word +
>c580		cb a4 ce a4			        .word _, _ + 3
>c584		63 6d 70			        .text "cmp"
.c587						+
.c587						nt_asm_cmp_h:
=$a2c7						        _ := asm_op_table + 3*(171 * (512 + $c9 - 2 - <asm_op_table) % 256)
>c587		05 0a				        .byte len("cmp.#"), IM+NN
>c589		94 c5				        .word +
>c58b		c7 a2 ca a2			        .word _, _ + 3
>c58f		63 6d 70 2e 23			        .text "cmp.#"
.c594						+
.c594						nt_asm_cmp_x:
=$a3db						        _ := asm_op_table + 3*(171 * (512 + $dd - 2 - <asm_op_table) % 256)
>c594		05 0a				        .byte len("cmp.x"), IM+NN
>c596		a1 c5				        .word +
>c598		db a3 de a3			        .word _, _ + 3
>c59c		63 6d 70 2e 78			        .text "cmp.x"
.c5a1						+
.c5a1						nt_asm_cmp_y:
=$a4d7						        _ := asm_op_table + 3*(171 * (512 + $d9 - 2 - <asm_op_table) % 256)
>c5a1		05 0a				        .byte len("cmp.y"), IM+NN
>c5a3		ae c5				        .word +
>c5a5		d7 a4 da a4			        .word _, _ + 3
>c5a9		63 6d 70 2e 79			        .text "cmp.y"
.c5ae						+
.c5ae						nt_asm_cmp_z:
=$a3c3						        _ := asm_op_table + 3*(171 * (512 + $c5 - 2 - <asm_op_table) % 256)
>c5ae		05 0a				        .byte len("cmp.z"), IM+NN
>c5b0		bb c5				        .word +
>c5b2		c3 a3 c6 a3			        .word _, _ + 3
>c5b6		63 6d 70 2e 7a			        .text "cmp.z"
.c5bb						+
.c5bb						nt_asm_cmp_zi:
=$a2d0						        _ := asm_op_table + 3*(171 * (512 + $d2 - 2 - <asm_op_table) % 256)
>c5bb		06 0a				        .byte len("cmp.zi"), IM+NN
>c5bd		c9 c5				        .word +
>c5bf		d0 a2 d3 a2			        .word _, _ + 3
>c5c3		63 6d 70 2e 7a 69		        .text "cmp.zi"
.c5c9						+
.c5c9						nt_asm_cmp_ziy:
=$a3cf						        _ := asm_op_table + 3*(171 * (512 + $d1 - 2 - <asm_op_table) % 256)
>c5c9		07 0a				        .byte len("cmp.ziy"), IM+NN
>c5cb		d8 c5				        .word +
>c5cd		cf a3 d2 a3			        .word _, _ + 3
>c5d1		63 6d 70 2e 7a 69 79		        .text "cmp.ziy"
.c5d8						+
.c5d8						nt_asm_cmp_zx:
=$a2d3						        _ := asm_op_table + 3*(171 * (512 + $d5 - 2 - <asm_op_table) % 256)
>c5d8		06 0a				        .byte len("cmp.zx"), IM+NN
>c5da		e6 c5				        .word +
>c5dc		d3 a2 d6 a2			        .word _, _ + 3
>c5e0		63 6d 70 2e 7a 78		        .text "cmp.zx"
.c5e6						+
.c5e6						nt_asm_cmp_zxi:
=$a4bf						        _ := asm_op_table + 3*(171 * (512 + $c1 - 2 - <asm_op_table) % 256)
>c5e6		07 0a				        .byte len("cmp.zxi"), IM+NN
>c5e8		f5 c5				        .word +
>c5ea		bf a4 c2 a4			        .word _, _ + 3
>c5ee		63 6d 70 2e 7a 78 69		        .text "cmp.zxi"
.c5f5						+
.c5f5						nt_asm_cpx:
=$a3ea						        _ := asm_op_table + 3*(171 * (512 + $ec - 2 - <asm_op_table) % 256)
>c5f5		03 0a				        .byte len("cpx"), IM+NN
>c5f7		00 c6				        .word +
>c5f9		ea a3 ed a3			        .word _, _ + 3
>c5fd		63 70 78			        .text "cpx"
.c600						+
.c600						nt_asm_cpx_h:
=$a3de						        _ := asm_op_table + 3*(171 * (512 + $e0 - 2 - <asm_op_table) % 256)
>c600		05 0a				        .byte len("cpx.#"), IM+NN
>c602		0d c6				        .word +
>c604		de a3 e1 a3			        .word _, _ + 3
>c608		63 70 78 2e 23			        .text "cpx.#"
.c60d						+
.c60d						nt_asm_cpx_z:
=$a2e2						        _ := asm_op_table + 3*(171 * (512 + $e4 - 2 - <asm_op_table) % 256)
>c60d		05 0a				        .byte len("cpx.z"), IM+NN
>c60f		1a c6				        .word +
>c611		e2 a2 e5 a2			        .word _, _ + 3
>c615		63 70 78 2e 7a			        .text "cpx.z"
.c61a						+
.c61a						nt_asm_cpy:
=$a2ca						        _ := asm_op_table + 3*(171 * (512 + $cc - 2 - <asm_op_table) % 256)
>c61a		03 0a				        .byte len("cpy"), IM+NN
>c61c		25 c6				        .word +
>c61e		ca a2 cd a2			        .word _, _ + 3
>c622		63 70 79			        .text "cpy"
.c625						+
.c625						nt_asm_cpy_h:
=$a2be						        _ := asm_op_table + 3*(171 * (512 + $c0 - 2 - <asm_op_table) % 256)
>c625		05 0a				        .byte len("cpy.#"), IM+NN
>c627		32 c6				        .word +
>c629		be a2 c1 a2			        .word _, _ + 3
>c62d		63 70 79 2e 23			        .text "cpy.#"
.c632						+
.c632						nt_asm_cpy_z:
=$a4c2						        _ := asm_op_table + 3*(171 * (512 + $c4 - 2 - <asm_op_table) % 256)
>c632		05 0a				        .byte len("cpy.z"), IM+NN
>c634		3f c6				        .word +
>c636		c2 a4 c5 a4			        .word _, _ + 3
>c63a		63 70 79 2e 7a			        .text "cpy.z"
.c63f						+
.c63f						nt_asm_dec:
=$a3cc						        _ := asm_op_table + 3*(171 * (512 + $ce - 2 - <asm_op_table) % 256)
>c63f		03 0a				        .byte len("dec"), IM+NN
>c641		4a c6				        .word +
>c643		cc a3 cf a3			        .word _, _ + 3
>c647		64 65 63			        .text "dec"
.c64a						+
.c64a						nt_asm_dec_a:
=$a438						        _ := asm_op_table + 3*(171 * (512 + $3a - 2 - <asm_op_table) % 256)
>c64a		05 0a				        .byte len("dec.a"), IM+NN
>c64c		57 c6				        .word +
>c64e		38 a4 3b a4			        .word _, _ + 3
>c652		64 65 63 2e 61			        .text "dec.a"
.c657						+
.c657						nt_asm_dec_x:
=$a2dc						        _ := asm_op_table + 3*(171 * (512 + $de - 2 - <asm_op_table) % 256)
>c657		05 0a				        .byte len("dec.x"), IM+NN
>c659		64 c6				        .word +
>c65b		dc a2 df a2			        .word _, _ + 3
>c65f		64 65 63 2e 78			        .text "dec.x"
.c664						+
.c664						nt_asm_dec_z:
=$a2c4						        _ := asm_op_table + 3*(171 * (512 + $c6 - 2 - <asm_op_table) % 256)
>c664		05 0a				        .byte len("dec.z"), IM+NN
>c666		71 c6				        .word +
>c668		c4 a2 c7 a2			        .word _, _ + 3
>c66c		64 65 63 2e 7a			        .text "dec.z"
.c671						+
.c671						nt_asm_dec_zx:
=$a4d4						        _ := asm_op_table + 3*(171 * (512 + $d6 - 2 - <asm_op_table) % 256)
>c671		06 0a				        .byte len("dec.zx"), IM+NN
>c673		7f c6				        .word +
>c675		d4 a4 d7 a4			        .word _, _ + 3
>c679		64 65 63 2e 7a 78		        .text "dec.zx"
.c67f						+
.c67f						nt_asm_dex:
=$a4c8						        _ := asm_op_table + 3*(171 * (512 + $ca - 2 - <asm_op_table) % 256)
>c67f		03 0a				        .byte len("dex"), IM+NN
>c681		8a c6				        .word +
>c683		c8 a4 cb a4			        .word _, _ + 3
>c687		64 65 78			        .text "dex"
.c68a						+
.c68a						nt_asm_dey:
=$a486						        _ := asm_op_table + 3*(171 * (512 + $88 - 2 - <asm_op_table) % 256)
>c68a		03 0a				        .byte len("dey"), IM+NN
>c68c		95 c6				        .word +
>c68e		86 a4 89 a4			        .word _, _ + 3
>c692		64 65 79			        .text "dey"
.c695						+
.c695						nt_asm_eor:
=$a34b						        _ := asm_op_table + 3*(171 * (512 + $4d - 2 - <asm_op_table) % 256)
>c695		03 0a				        .byte len("eor"), IM+NN
>c697		a0 c6				        .word +
>c699		4b a3 4e a3			        .word _, _ + 3
>c69d		65 6f 72			        .text "eor"
.c6a0						+
.c6a0						nt_asm_eor_h:
=$a447						        _ := asm_op_table + 3*(171 * (512 + $49 - 2 - <asm_op_table) % 256)
>c6a0		05 0a				        .byte len("eor.#"), IM+NN
>c6a2		ad c6				        .word +
>c6a4		47 a4 4a a4			        .word _, _ + 3
>c6a8		65 6f 72 2e 23			        .text "eor.#"
.c6ad						+
.c6ad						nt_asm_eor_x:
=$a55b						        _ := asm_op_table + 3*(171 * (512 + $5d - 2 - <asm_op_table) % 256)
>c6ad		05 0a				        .byte len("eor.x"), IM+NN
>c6af		ba c6				        .word +
>c6b1		5b a5 5e a5			        .word _, _ + 3
>c6b5		65 6f 72 2e 78			        .text "eor.x"
.c6ba						+
.c6ba						nt_asm_eor_y:
=$a357						        _ := asm_op_table + 3*(171 * (512 + $59 - 2 - <asm_op_table) % 256)
>c6ba		05 0a				        .byte len("eor.y"), IM+NN
>c6bc		c7 c6				        .word +
>c6be		57 a3 5a a3			        .word _, _ + 3
>c6c2		65 6f 72 2e 79			        .text "eor.y"
.c6c7						+
.c6c7						nt_asm_eor_z:
=$a543						        _ := asm_op_table + 3*(171 * (512 + $45 - 2 - <asm_op_table) % 256)
>c6c7		05 0a				        .byte len("eor.z"), IM+NN
>c6c9		d4 c6				        .word +
>c6cb		43 a5 46 a5			        .word _, _ + 3
>c6cf		65 6f 72 2e 7a			        .text "eor.z"
.c6d4						+
.c6d4						nt_asm_eor_zi:
=$a450						        _ := asm_op_table + 3*(171 * (512 + $52 - 2 - <asm_op_table) % 256)
>c6d4		06 0a				        .byte len("eor.zi"), IM+NN
>c6d6		e2 c6				        .word +
>c6d8		50 a4 53 a4			        .word _, _ + 3
>c6dc		65 6f 72 2e 7a 69		        .text "eor.zi"
.c6e2						+
.c6e2						nt_asm_eor_ziy:
=$a54f						        _ := asm_op_table + 3*(171 * (512 + $51 - 2 - <asm_op_table) % 256)
>c6e2		07 0a				        .byte len("eor.ziy"), IM+NN
>c6e4		f1 c6				        .word +
>c6e6		4f a5 52 a5			        .word _, _ + 3
>c6ea		65 6f 72 2e 7a 69 79		        .text "eor.ziy"
.c6f1						+
.c6f1						nt_asm_eor_zx:
=$a453						        _ := asm_op_table + 3*(171 * (512 + $55 - 2 - <asm_op_table) % 256)
>c6f1		06 0a				        .byte len("eor.zx"), IM+NN
>c6f3		ff c6				        .word +
>c6f5		53 a4 56 a4			        .word _, _ + 3
>c6f9		65 6f 72 2e 7a 78		        .text "eor.zx"
.c6ff						+
.c6ff						nt_asm_eor_zxi:
=$a33f						        _ := asm_op_table + 3*(171 * (512 + $41 - 2 - <asm_op_table) % 256)
>c6ff		07 0a				        .byte len("eor.zxi"), IM+NN
>c701		0e c7				        .word +
>c703		3f a3 42 a3			        .word _, _ + 3
>c707		65 6f 72 2e 7a 78 69		        .text "eor.zxi"
.c70e						+
.c70e						nt_asm_inc:
=$a4ec						        _ := asm_op_table + 3*(171 * (512 + $ee - 2 - <asm_op_table) % 256)
>c70e		03 0a				        .byte len("inc"), IM+NN
>c710		19 c7				        .word +
>c712		ec a4 ef a4			        .word _, _ + 3
>c716		69 6e 63			        .text "inc"
.c719						+
.c719						nt_asm_inc_a:
=$a318						        _ := asm_op_table + 3*(171 * (512 + $1a - 2 - <asm_op_table) % 256)
>c719		05 0a				        .byte len("inc.a"), IM+NN
>c71b		26 c7				        .word +
>c71d		18 a3 1b a3			        .word _, _ + 3
>c721		69 6e 63 2e 61			        .text "inc.a"
.c726						+
.c726						nt_asm_inc_x:
=$a3fc						        _ := asm_op_table + 3*(171 * (512 + $fe - 2 - <asm_op_table) % 256)
>c726		05 0a				        .byte len("inc.x"), IM+NN
>c728		33 c7				        .word +
>c72a		fc a3 ff a3			        .word _, _ + 3
>c72e		69 6e 63 2e 78			        .text "inc.x"
.c733						+
.c733						nt_asm_inc_z:
=$a3e4						        _ := asm_op_table + 3*(171 * (512 + $e6 - 2 - <asm_op_table) % 256)
>c733		05 0a				        .byte len("inc.z"), IM+NN
>c735		40 c7				        .word +
>c737		e4 a3 e7 a3			        .word _, _ + 3
>c73b		69 6e 63 2e 7a			        .text "inc.z"
.c740						+
.c740						nt_asm_inc_zx:
=$a2f4						        _ := asm_op_table + 3*(171 * (512 + $f6 - 2 - <asm_op_table) % 256)
>c740		06 0a				        .byte len("inc.zx"), IM+NN
>c742		4e c7				        .word +
>c744		f4 a2 f7 a2			        .word _, _ + 3
>c748		69 6e 63 2e 7a 78		        .text "inc.zx"
.c74e						+
.c74e						nt_asm_inx:
=$a4e6						        _ := asm_op_table + 3*(171 * (512 + $e8 - 2 - <asm_op_table) % 256)
>c74e		03 0a				        .byte len("inx"), IM+NN
>c750		59 c7				        .word +
>c752		e6 a4 e9 a4			        .word _, _ + 3
>c756		69 6e 78			        .text "inx"
.c759						+
.c759						nt_asm_iny:
=$a3c6						        _ := asm_op_table + 3*(171 * (512 + $c8 - 2 - <asm_op_table) % 256)
>c759		03 0a				        .byte len("iny"), IM+NN
>c75b		64 c7				        .word +
>c75d		c6 a3 c9 a3			        .word _, _ + 3
>c761		69 6e 79			        .text "iny"
.c764						+
.c764						nt_asm_jmp:
=$a44a						        _ := asm_op_table + 3*(171 * (512 + $4c - 2 - <asm_op_table) % 256)
>c764		03 0a				        .byte len("jmp"), IM+NN
>c766		6f c7				        .word +
>c768		4a a4 4d a4			        .word _, _ + 3
>c76c		6a 6d 70			        .text "jmp"
.c76f						+
.c76f						nt_asm_jmp_i:
=$a56a						        _ := asm_op_table + 3*(171 * (512 + $6c - 2 - <asm_op_table) % 256)
>c76f		05 0a				        .byte len("jmp.i"), IM+NN
>c771		7c c7				        .word +
>c773		6a a5 6d a5			        .word _, _ + 3
>c777		6a 6d 70 2e 69			        .text "jmp.i"
.c77c						+
.c77c						nt_asm_jmp_xi:
=$a47a						        _ := asm_op_table + 3*(171 * (512 + $7c - 2 - <asm_op_table) % 256)
>c77c		06 0a				        .byte len("jmp.xi"), IM+NN
>c77e		8a c7				        .word +
>c780		7a a4 7d a4			        .word _, _ + 3
>c784		6a 6d 70 2e 78 69		        .text "jmp.xi"
.c78a						+
.c78a						nt_asm_jsr:
=$a31e						        _ := asm_op_table + 3*(171 * (512 + $20 - 2 - <asm_op_table) % 256)
>c78a		03 0a				        .byte len("jsr"), IM+NN
>c78c		95 c7				        .word +
>c78e		1e a3 21 a3			        .word _, _ + 3
>c792		6a 73 72			        .text "jsr"
.c795						+
.c795						nt_asm_lda:
=$a3ab						        _ := asm_op_table + 3*(171 * (512 + $ad - 2 - <asm_op_table) % 256)
>c795		03 0a				        .byte len("lda"), IM+NN
>c797		a0 c7				        .word +
>c799		ab a3 ae a3			        .word _, _ + 3
>c79d		6c 64 61			        .text "lda"
.c7a0						+
.c7a0						nt_asm_lda_h:
=$a4a7						        _ := asm_op_table + 3*(171 * (512 + $a9 - 2 - <asm_op_table) % 256)
>c7a0		05 0a				        .byte len("lda.#"), IM+NN
>c7a2		ad c7				        .word +
>c7a4		a7 a4 aa a4			        .word _, _ + 3
>c7a8		6c 64 61 2e 23			        .text "lda.#"
.c7ad						+
.c7ad						nt_asm_lda_x:
=$a2bb						        _ := asm_op_table + 3*(171 * (512 + $bd - 2 - <asm_op_table) % 256)
>c7ad		05 0a				        .byte len("lda.x"), IM+NN
>c7af		ba c7				        .word +
>c7b1		bb a2 be a2			        .word _, _ + 3
>c7b5		6c 64 61 2e 78			        .text "lda.x"
.c7ba						+
.c7ba						nt_asm_lda_y:
=$a3b7						        _ := asm_op_table + 3*(171 * (512 + $b9 - 2 - <asm_op_table) % 256)
>c7ba		05 0a				        .byte len("lda.y"), IM+NN
>c7bc		c7 c7				        .word +
>c7be		b7 a3 ba a3			        .word _, _ + 3
>c7c2		6c 64 61 2e 79			        .text "lda.y"
.c7c7						+
.c7c7						nt_asm_lda_z:
=$a2a3						        _ := asm_op_table + 3*(171 * (512 + $a5 - 2 - <asm_op_table) % 256)
>c7c7		05 0a				        .byte len("lda.z"), IM+NN
>c7c9		d4 c7				        .word +
>c7cb		a3 a2 a6 a2			        .word _, _ + 3
>c7cf		6c 64 61 2e 7a			        .text "lda.z"
.c7d4						+
.c7d4						nt_asm_lda_zi:
=$a4b0						        _ := asm_op_table + 3*(171 * (512 + $b2 - 2 - <asm_op_table) % 256)
>c7d4		06 0a				        .byte len("lda.zi"), IM+NN
>c7d6		e2 c7				        .word +
>c7d8		b0 a4 b3 a4			        .word _, _ + 3
>c7dc		6c 64 61 2e 7a 69		        .text "lda.zi"
.c7e2						+
.c7e2						nt_asm_lda_ziy:
=$a2af						        _ := asm_op_table + 3*(171 * (512 + $b1 - 2 - <asm_op_table) % 256)
>c7e2		07 0a				        .byte len("lda.ziy"), IM+NN
>c7e4		f1 c7				        .word +
>c7e6		af a2 b2 a2			        .word _, _ + 3
>c7ea		6c 64 61 2e 7a 69 79		        .text "lda.ziy"
.c7f1						+
.c7f1						nt_asm_lda_zx:
=$a4b3						        _ := asm_op_table + 3*(171 * (512 + $b5 - 2 - <asm_op_table) % 256)
>c7f1		06 0a				        .byte len("lda.zx"), IM+NN
>c7f3		ff c7				        .word +
>c7f5		b3 a4 b6 a4			        .word _, _ + 3
>c7f9		6c 64 61 2e 7a 78		        .text "lda.zx"
.c7ff						+
.c7ff						nt_asm_lda_zxi:
=$a39f						        _ := asm_op_table + 3*(171 * (512 + $a1 - 2 - <asm_op_table) % 256)
>c7ff		07 0a				        .byte len("lda.zxi"), IM+NN
>c801		0e c8				        .word +
>c803		9f a3 a2 a3			        .word _, _ + 3
>c807		6c 64 61 2e 7a 78 69		        .text "lda.zxi"
.c80e						+
.c80e						nt_asm_ldx:
=$a2ac						        _ := asm_op_table + 3*(171 * (512 + $ae - 2 - <asm_op_table) % 256)
>c80e		03 0a				        .byte len("ldx"), IM+NN
>c810		19 c8				        .word +
>c812		ac a2 af a2			        .word _, _ + 3
>c816		6c 64 78			        .text "ldx"
.c819						+
.c819						nt_asm_ldx_h:
=$a2a0						        _ := asm_op_table + 3*(171 * (512 + $a2 - 2 - <asm_op_table) % 256)
>c819		05 0a				        .byte len("ldx.#"), IM+NN
>c81b		26 c8				        .word +
>c81d		a0 a2 a3 a2			        .word _, _ + 3
>c821		6c 64 78 2e 23			        .text "ldx.#"
.c826						+
.c826						nt_asm_ldx_y:
=$a4bc						        _ := asm_op_table + 3*(171 * (512 + $be - 2 - <asm_op_table) % 256)
>c826		05 0a				        .byte len("ldx.y"), IM+NN
>c828		33 c8				        .word +
>c82a		bc a4 bf a4			        .word _, _ + 3
>c82e		6c 64 78 2e 79			        .text "ldx.y"
.c833						+
.c833						nt_asm_ldx_z:
=$a4a4						        _ := asm_op_table + 3*(171 * (512 + $a6 - 2 - <asm_op_table) % 256)
>c833		05 0a				        .byte len("ldx.z"), IM+NN
>c835		40 c8				        .word +
>c837		a4 a4 a7 a4			        .word _, _ + 3
>c83b		6c 64 78 2e 7a			        .text "ldx.z"
.c840						+
.c840						nt_asm_ldx_zy:
=$a3b4						        _ := asm_op_table + 3*(171 * (512 + $b6 - 2 - <asm_op_table) % 256)
>c840		06 0a				        .byte len("ldx.zy"), IM+NN
>c842		4e c8				        .word +
>c844		b4 a3 b7 a3			        .word _, _ + 3
>c848		6c 64 78 2e 7a 79		        .text "ldx.zy"
.c84e						+
.c84e						nt_asm_ldy:
=$a4aa						        _ := asm_op_table + 3*(171 * (512 + $ac - 2 - <asm_op_table) % 256)
>c84e		03 0a				        .byte len("ldy"), IM+NN
>c850		59 c8				        .word +
>c852		aa a4 ad a4			        .word _, _ + 3
>c856		6c 64 79			        .text "ldy"
.c859						+
.c859						nt_asm_ldy_h:
=$a49e						        _ := asm_op_table + 3*(171 * (512 + $a0 - 2 - <asm_op_table) % 256)
>c859		05 0a				        .byte len("ldy.#"), IM+NN
>c85b		66 c8				        .word +
>c85d		9e a4 a1 a4			        .word _, _ + 3
>c861		6c 64 79 2e 23			        .text "ldy.#"
.c866						+
.c866						nt_asm_ldy_x:
=$a3ba						        _ := asm_op_table + 3*(171 * (512 + $bc - 2 - <asm_op_table) % 256)
>c866		05 0a				        .byte len("ldy.x"), IM+NN
>c868		73 c8				        .word +
>c86a		ba a3 bd a3			        .word _, _ + 3
>c86e		6c 64 79 2e 78			        .text "ldy.x"
.c873						+
.c873						nt_asm_ldy_z:
=$a3a2						        _ := asm_op_table + 3*(171 * (512 + $a4 - 2 - <asm_op_table) % 256)
>c873		05 0a				        .byte len("ldy.z"), IM+NN
>c875		80 c8				        .word +
>c877		a2 a3 a5 a3			        .word _, _ + 3
>c87b		6c 64 79 2e 7a			        .text "ldy.z"
.c880						+
.c880						nt_asm_ldy_zx:
=$a2b2						        _ := asm_op_table + 3*(171 * (512 + $b4 - 2 - <asm_op_table) % 256)
>c880		06 0a				        .byte len("ldy.zx"), IM+NN
>c882		8e c8				        .word +
>c884		b2 a2 b5 a2			        .word _, _ + 3
>c888		6c 64 79 2e 7a 78		        .text "ldy.zx"
.c88e						+
.c88e						nt_asm_lsr:
=$a54c						        _ := asm_op_table + 3*(171 * (512 + $4e - 2 - <asm_op_table) % 256)
>c88e		03 0a				        .byte len("lsr"), IM+NN
>c890		99 c8				        .word +
>c892		4c a5 4f a5			        .word _, _ + 3
>c896		6c 73 72			        .text "lsr"
.c899						+
.c899						nt_asm_lsr_a:
=$a348						        _ := asm_op_table + 3*(171 * (512 + $4a - 2 - <asm_op_table) % 256)
>c899		05 0a				        .byte len("lsr.a"), IM+NN
>c89b		a6 c8				        .word +
>c89d		48 a3 4b a3			        .word _, _ + 3
>c8a1		6c 73 72 2e 61			        .text "lsr.a"
.c8a6						+
.c8a6						nt_asm_lsr_x:
=$a45c						        _ := asm_op_table + 3*(171 * (512 + $5e - 2 - <asm_op_table) % 256)
>c8a6		05 0a				        .byte len("lsr.x"), IM+NN
>c8a8		b3 c8				        .word +
>c8aa		5c a4 5f a4			        .word _, _ + 3
>c8ae		6c 73 72 2e 78			        .text "lsr.x"
.c8b3						+
.c8b3						nt_asm_lsr_z:
=$a444						        _ := asm_op_table + 3*(171 * (512 + $46 - 2 - <asm_op_table) % 256)
>c8b3		05 0a				        .byte len("lsr.z"), IM+NN
>c8b5		c0 c8				        .word +
>c8b7		44 a4 47 a4			        .word _, _ + 3
>c8bb		6c 73 72 2e 7a			        .text "lsr.z"
.c8c0						+
.c8c0						nt_asm_lsr_zx:
=$a354						        _ := asm_op_table + 3*(171 * (512 + $56 - 2 - <asm_op_table) % 256)
>c8c0		06 0a				        .byte len("lsr.zx"), IM+NN
>c8c2		ce c8				        .word +
>c8c4		54 a3 57 a3			        .word _, _ + 3
>c8c8		6c 73 72 2e 7a 78		        .text "lsr.zx"
.c8ce						+
.c8ce						nt_asm_nop:
=$a2e8						        _ := asm_op_table + 3*(171 * (512 + $ea - 2 - <asm_op_table) % 256)
>c8ce		03 0a				        .byte len("nop"), IM+NN
>c8d0		d9 c8				        .word +
>c8d2		e8 a2 eb a2			        .word _, _ + 3
>c8d6		6e 6f 70			        .text "nop"
.c8d9						+
.c8d9						nt_asm_ora:
=$a40b						        _ := asm_op_table + 3*(171 * (512 + $0d - 2 - <asm_op_table) % 256)
>c8d9		03 0a				        .byte len("ora"), IM+NN
>c8db		e4 c8				        .word +
>c8dd		0b a4 0e a4			        .word _, _ + 3
>c8e1		6f 72 61			        .text "ora"
.c8e4						+
.c8e4						nt_asm_ora_h:
=$a507						        _ := asm_op_table + 3*(171 * (512 + $09 - 2 - <asm_op_table) % 256)
>c8e4		05 0a				        .byte len("ora.#"), IM+NN
>c8e6		f1 c8				        .word +
>c8e8		07 a5 0a a5			        .word _, _ + 3
>c8ec		6f 72 61 2e 23			        .text "ora.#"
.c8f1						+
.c8f1						nt_asm_ora_x:
=$a31b						        _ := asm_op_table + 3*(171 * (512 + $1d - 2 - <asm_op_table) % 256)
>c8f1		05 0a				        .byte len("ora.x"), IM+NN
>c8f3		fe c8				        .word +
>c8f5		1b a3 1e a3			        .word _, _ + 3
>c8f9		6f 72 61 2e 78			        .text "ora.x"
.c8fe						+
.c8fe						nt_asm_ora_y:
=$a417						        _ := asm_op_table + 3*(171 * (512 + $19 - 2 - <asm_op_table) % 256)
>c8fe		05 0a				        .byte len("ora.y"), IM+NN
>c900		0b c9				        .word +
>c902		17 a4 1a a4			        .word _, _ + 3
>c906		6f 72 61 2e 79			        .text "ora.y"
.c90b						+
.c90b						nt_asm_ora_z:
=$a303						        _ := asm_op_table + 3*(171 * (512 + $05 - 2 - <asm_op_table) % 256)
>c90b		05 0a				        .byte len("ora.z"), IM+NN
>c90d		18 c9				        .word +
>c90f		03 a3 06 a3			        .word _, _ + 3
>c913		6f 72 61 2e 7a			        .text "ora.z"
.c918						+
.c918						nt_asm_ora_zi:
=$a510						        _ := asm_op_table + 3*(171 * (512 + $12 - 2 - <asm_op_table) % 256)
>c918		06 0a				        .byte len("ora.zi"), IM+NN
>c91a		26 c9				        .word +
>c91c		10 a5 13 a5			        .word _, _ + 3
>c920		6f 72 61 2e 7a 69		        .text "ora.zi"
.c926						+
.c926						nt_asm_ora_ziy:
=$a30f						        _ := asm_op_table + 3*(171 * (512 + $11 - 2 - <asm_op_table) % 256)
>c926		07 0a				        .byte len("ora.ziy"), IM+NN
>c928		35 c9				        .word +
>c92a		0f a3 12 a3			        .word _, _ + 3
>c92e		6f 72 61 2e 7a 69 79		        .text "ora.ziy"
.c935						+
.c935						nt_asm_ora_zx:
=$a513						        _ := asm_op_table + 3*(171 * (512 + $15 - 2 - <asm_op_table) % 256)
>c935		06 0a				        .byte len("ora.zx"), IM+NN
>c937		43 c9				        .word +
>c939		13 a5 16 a5			        .word _, _ + 3
>c93d		6f 72 61 2e 7a 78		        .text "ora.zx"
.c943						+
.c943						nt_asm_ora_zxi:
=$a3ff						        _ := asm_op_table + 3*(171 * (512 + $01 - 2 - <asm_op_table) % 256)
>c943		07 0a				        .byte len("ora.zxi"), IM+NN
>c945		52 c9				        .word +
>c947		ff a3 02 a4			        .word _, _ + 3
>c94b		6f 72 61 2e 7a 78 69		        .text "ora.zxi"
.c952						+
.c952						nt_asm_pha:
=$a546						        _ := asm_op_table + 3*(171 * (512 + $48 - 2 - <asm_op_table) % 256)
>c952		03 0a				        .byte len("pha"), IM+NN
>c954		5d c9				        .word +
>c956		46 a5 49 a5			        .word _, _ + 3
>c95a		70 68 61			        .text "pha"
.c95d						+
.c95d						nt_asm_php:
=$a306						        _ := asm_op_table + 3*(171 * (512 + $08 - 2 - <asm_op_table) % 256)
>c95d		03 0a				        .byte len("php"), IM+NN
>c95f		68 c9				        .word +
>c961		06 a3 09 a3			        .word _, _ + 3
>c965		70 68 70			        .text "php"
.c968						+
.c968						nt_asm_phx:
=$a3d8						        _ := asm_op_table + 3*(171 * (512 + $da - 2 - <asm_op_table) % 256)
>c968		03 0a				        .byte len("phx"), IM+NN
>c96a		73 c9				        .word +
>c96c		d8 a3 db a3			        .word _, _ + 3
>c970		70 68 78			        .text "phx"
.c973						+
.c973						nt_asm_phy:
=$a558						        _ := asm_op_table + 3*(171 * (512 + $5a - 2 - <asm_op_table) % 256)
>c973		03 0a				        .byte len("phy"), IM+NN
>c975		7e c9				        .word +
>c977		58 a5 5b a5			        .word _, _ + 3
>c97b		70 68 79			        .text "phy"
.c97e						+
.c97e						nt_asm_pla:
=$a366						        _ := asm_op_table + 3*(171 * (512 + $68 - 2 - <asm_op_table) % 256)
>c97e		03 0a				        .byte len("pla"), IM+NN
>c980		89 c9				        .word +
>c982		66 a3 69 a3			        .word _, _ + 3
>c986		70 6c 61			        .text "pla"
.c989						+
.c989						nt_asm_plp:
=$a426						        _ := asm_op_table + 3*(171 * (512 + $28 - 2 - <asm_op_table) % 256)
>c989		03 0a				        .byte len("plp"), IM+NN
>c98b		94 c9				        .word +
>c98d		26 a4 29 a4			        .word _, _ + 3
>c991		70 6c 70			        .text "plp"
.c994						+
.c994						nt_asm_plx:
=$a4f8						        _ := asm_op_table + 3*(171 * (512 + $fa - 2 - <asm_op_table) % 256)
>c994		03 0a				        .byte len("plx"), IM+NN
>c996		9f c9				        .word +
>c998		f8 a4 fb a4			        .word _, _ + 3
>c99c		70 6c 78			        .text "plx"
.c99f						+
.c99f						nt_asm_ply:
=$a378						        _ := asm_op_table + 3*(171 * (512 + $7a - 2 - <asm_op_table) % 256)
>c99f		03 0a				        .byte len("ply"), IM+NN
>c9a1		aa c9				        .word +
>c9a3		78 a3 7b a3			        .word _, _ + 3
>c9a7		70 6c 79			        .text "ply"
.c9aa						+
.c9aa						nt_asm_rol:
=$a42c						        _ := asm_op_table + 3*(171 * (512 + $2e - 2 - <asm_op_table) % 256)
>c9aa		03 0a				        .byte len("rol"), IM+NN
>c9ac		b5 c9				        .word +
>c9ae		2c a4 2f a4			        .word _, _ + 3
>c9b2		72 6f 6c			        .text "rol"
.c9b5						+
.c9b5						nt_asm_rol_a:
=$a528						        _ := asm_op_table + 3*(171 * (512 + $2a - 2 - <asm_op_table) % 256)
>c9b5		05 0a				        .byte len("rol.a"), IM+NN
>c9b7		c2 c9				        .word +
>c9b9		28 a5 2b a5			        .word _, _ + 3
>c9bd		72 6f 6c 2e 61			        .text "rol.a"
.c9c2						+
.c9c2						nt_asm_rol_x:
=$a33c						        _ := asm_op_table + 3*(171 * (512 + $3e - 2 - <asm_op_table) % 256)
>c9c2		05 0a				        .byte len("rol.x"), IM+NN
>c9c4		cf c9				        .word +
>c9c6		3c a3 3f a3			        .word _, _ + 3
>c9ca		72 6f 6c 2e 78			        .text "rol.x"
.c9cf						+
.c9cf						nt_asm_rol_z:
=$a324						        _ := asm_op_table + 3*(171 * (512 + $26 - 2 - <asm_op_table) % 256)
>c9cf		05 0a				        .byte len("rol.z"), IM+NN
>c9d1		dc c9				        .word +
>c9d3		24 a3 27 a3			        .word _, _ + 3
>c9d7		72 6f 6c 2e 7a			        .text "rol.z"
.c9dc						+
.c9dc						nt_asm_rol_zx:
=$a534						        _ := asm_op_table + 3*(171 * (512 + $36 - 2 - <asm_op_table) % 256)
>c9dc		06 0a				        .byte len("rol.zx"), IM+NN
>c9de		ea c9				        .word +
>c9e0		34 a5 37 a5			        .word _, _ + 3
>c9e4		72 6f 6c 2e 7a 78		        .text "rol.zx"
.c9ea						+
.c9ea						nt_asm_ror:
=$a36c						        _ := asm_op_table + 3*(171 * (512 + $6e - 2 - <asm_op_table) % 256)
>c9ea		03 0a				        .byte len("ror"), IM+NN
>c9ec		f5 c9				        .word +
>c9ee		6c a3 6f a3			        .word _, _ + 3
>c9f2		72 6f 72			        .text "ror"
.c9f5						+
.c9f5						nt_asm_ror_a:
=$a468						        _ := asm_op_table + 3*(171 * (512 + $6a - 2 - <asm_op_table) % 256)
>c9f5		05 0a				        .byte len("ror.a"), IM+NN
>c9f7		02 ca				        .word +
>c9f9		68 a4 6b a4			        .word _, _ + 3
>c9fd		72 6f 72 2e 61			        .text "ror.a"
.ca02						+
.ca02						nt_asm_ror_x:
=$a57c						        _ := asm_op_table + 3*(171 * (512 + $7e - 2 - <asm_op_table) % 256)
>ca02		05 0a				        .byte len("ror.x"), IM+NN
>ca04		0f ca				        .word +
>ca06		7c a5 7f a5			        .word _, _ + 3
>ca0a		72 6f 72 2e 78			        .text "ror.x"
.ca0f						+
.ca0f						nt_asm_ror_z:
=$a564						        _ := asm_op_table + 3*(171 * (512 + $66 - 2 - <asm_op_table) % 256)
>ca0f		05 0a				        .byte len("ror.z"), IM+NN
>ca11		1c ca				        .word +
>ca13		64 a5 67 a5			        .word _, _ + 3
>ca17		72 6f 72 2e 7a			        .text "ror.z"
.ca1c						+
.ca1c						nt_asm_ror_zx:
=$a474						        _ := asm_op_table + 3*(171 * (512 + $76 - 2 - <asm_op_table) % 256)
>ca1c		06 0a				        .byte len("ror.zx"), IM+NN
>ca1e		2a ca				        .word +
>ca20		74 a4 77 a4			        .word _, _ + 3
>ca24		72 6f 72 2e 7a 78		        .text "ror.zx"
.ca2a						+
.ca2a						nt_asm_rti:
=$a43e						        _ := asm_op_table + 3*(171 * (512 + $40 - 2 - <asm_op_table) % 256)
>ca2a		03 0a				        .byte len("rti"), IM+NN
>ca2c		35 ca				        .word +
>ca2e		3e a4 41 a4			        .word _, _ + 3
>ca32		72 74 69			        .text "rti"
.ca35						+
.ca35						nt_asm_rts:
=$a55e						        _ := asm_op_table + 3*(171 * (512 + $60 - 2 - <asm_op_table) % 256)
>ca35		03 0a				        .byte len("rts"), IM+NN
>ca37		40 ca				        .word +
>ca39		5e a5 61 a5			        .word _, _ + 3
>ca3d		72 74 73			        .text "rts"
.ca40						+
.ca40						nt_asm_sbc:
=$a2eb						        _ := asm_op_table + 3*(171 * (512 + $ed - 2 - <asm_op_table) % 256)
>ca40		03 0a				        .byte len("sbc"), IM+NN
>ca42		4b ca				        .word +
>ca44		eb a2 ee a2			        .word _, _ + 3
>ca48		73 62 63			        .text "sbc"
.ca4b						+
.ca4b						nt_asm_sbc_h:
=$a3e7						        _ := asm_op_table + 3*(171 * (512 + $e9 - 2 - <asm_op_table) % 256)
>ca4b		05 0a				        .byte len("sbc.#"), IM+NN
>ca4d		58 ca				        .word +
>ca4f		e7 a3 ea a3			        .word _, _ + 3
>ca53		73 62 63 2e 23			        .text "sbc.#"
.ca58						+
.ca58						nt_asm_sbc_x:
=$a4fb						        _ := asm_op_table + 3*(171 * (512 + $fd - 2 - <asm_op_table) % 256)
>ca58		05 0a				        .byte len("sbc.x"), IM+NN
>ca5a		65 ca				        .word +
>ca5c		fb a4 fe a4			        .word _, _ + 3
>ca60		73 62 63 2e 78			        .text "sbc.x"
.ca65						+
.ca65						nt_asm_sbc_y:
=$a2f7						        _ := asm_op_table + 3*(171 * (512 + $f9 - 2 - <asm_op_table) % 256)
>ca65		05 0a				        .byte len("sbc.y"), IM+NN
>ca67		72 ca				        .word +
>ca69		f7 a2 fa a2			        .word _, _ + 3
>ca6d		73 62 63 2e 79			        .text "sbc.y"
.ca72						+
.ca72						nt_asm_sbc_z:
=$a4e3						        _ := asm_op_table + 3*(171 * (512 + $e5 - 2 - <asm_op_table) % 256)
>ca72		05 0a				        .byte len("sbc.z"), IM+NN
>ca74		7f ca				        .word +
>ca76		e3 a4 e6 a4			        .word _, _ + 3
>ca7a		73 62 63 2e 7a			        .text "sbc.z"
.ca7f						+
.ca7f						nt_asm_sbc_zi:
=$a3f0						        _ := asm_op_table + 3*(171 * (512 + $f2 - 2 - <asm_op_table) % 256)
>ca7f		06 0a				        .byte len("sbc.zi"), IM+NN
>ca81		8d ca				        .word +
>ca83		f0 a3 f3 a3			        .word _, _ + 3
>ca87		73 62 63 2e 7a 69		        .text "sbc.zi"
.ca8d						+
.ca8d						nt_asm_sbc_ziy:
=$a4ef						        _ := asm_op_table + 3*(171 * (512 + $f1 - 2 - <asm_op_table) % 256)
>ca8d		07 0a				        .byte len("sbc.ziy"), IM+NN
>ca8f		9c ca				        .word +
>ca91		ef a4 f2 a4			        .word _, _ + 3
>ca95		73 62 63 2e 7a 69 79		        .text "sbc.ziy"
.ca9c						+
.ca9c						nt_asm_sbc_zx:
=$a3f3						        _ := asm_op_table + 3*(171 * (512 + $f5 - 2 - <asm_op_table) % 256)
>ca9c		06 0a				        .byte len("sbc.zx"), IM+NN
>ca9e		aa ca				        .word +
>caa0		f3 a3 f6 a3			        .word _, _ + 3
>caa4		73 62 63 2e 7a 78		        .text "sbc.zx"
.caaa						+
.caaa						nt_asm_sbc_zxi:
=$a2df						        _ := asm_op_table + 3*(171 * (512 + $e1 - 2 - <asm_op_table) % 256)
>caaa		07 0a				        .byte len("sbc.zxi"), IM+NN
>caac		b9 ca				        .word +
>caae		df a2 e2 a2			        .word _, _ + 3
>cab2		73 62 63 2e 7a 78 69		        .text "sbc.zxi"
.cab9						+
.cab9						nt_asm_sec:
=$a336						        _ := asm_op_table + 3*(171 * (512 + $38 - 2 - <asm_op_table) % 256)
>cab9		03 0a				        .byte len("sec"), IM+NN
>cabb		c4 ca				        .word +
>cabd		36 a3 39 a3			        .word _, _ + 3
>cac1		73 65 63			        .text "sec"
.cac4						+
.cac4						nt_asm_sed:
=$a3f6						        _ := asm_op_table + 3*(171 * (512 + $f8 - 2 - <asm_op_table) % 256)
>cac4		03 0a				        .byte len("sed"), IM+NN
>cac6		cf ca				        .word +
>cac8		f6 a3 f9 a3			        .word _, _ + 3
>cacc		73 65 64			        .text "sed"
.cacf						+
.cacf						nt_asm_sei:
=$a576						        _ := asm_op_table + 3*(171 * (512 + $78 - 2 - <asm_op_table) % 256)
>cacf		03 0a				        .byte len("sei"), IM+NN
>cad1		da ca				        .word +
>cad3		76 a5 79 a5			        .word _, _ + 3
>cad7		73 65 69			        .text "sei"
.cada						+
.cada						nt_asm_sta:
=$a28b						        _ := asm_op_table + 3*(171 * (512 + $8d - 2 - <asm_op_table) % 256)
>cada		03 0a				        .byte len("sta"), IM+NN
>cadc		e5 ca				        .word +
>cade		8b a2 8e a2			        .word _, _ + 3
>cae2		73 74 61			        .text "sta"
.cae5						+
.cae5						nt_asm_sta_x:
=$a49b						        _ := asm_op_table + 3*(171 * (512 + $9d - 2 - <asm_op_table) % 256)
>cae5		05 0a				        .byte len("sta.x"), IM+NN
>cae7		f2 ca				        .word +
>cae9		9b a4 9e a4			        .word _, _ + 3
>caed		73 74 61 2e 78			        .text "sta.x"
.caf2						+
.caf2						nt_asm_sta_y:
=$a297						        _ := asm_op_table + 3*(171 * (512 + $99 - 2 - <asm_op_table) % 256)
>caf2		05 0a				        .byte len("sta.y"), IM+NN
>caf4		ff ca				        .word +
>caf6		97 a2 9a a2			        .word _, _ + 3
>cafa		73 74 61 2e 79			        .text "sta.y"
.caff						+
.caff						nt_asm_sta_z:
=$a483						        _ := asm_op_table + 3*(171 * (512 + $85 - 2 - <asm_op_table) % 256)
>caff		05 0a				        .byte len("sta.z"), IM+NN
>cb01		0c cb				        .word +
>cb03		83 a4 86 a4			        .word _, _ + 3
>cb07		73 74 61 2e 7a			        .text "sta.z"
.cb0c						+
.cb0c						nt_asm_sta_zi:
=$a390						        _ := asm_op_table + 3*(171 * (512 + $92 - 2 - <asm_op_table) % 256)
>cb0c		06 0a				        .byte len("sta.zi"), IM+NN
>cb0e		1a cb				        .word +
>cb10		90 a3 93 a3			        .word _, _ + 3
>cb14		73 74 61 2e 7a 69		        .text "sta.zi"
.cb1a						+
.cb1a						nt_asm_sta_ziy:
=$a48f						        _ := asm_op_table + 3*(171 * (512 + $91 - 2 - <asm_op_table) % 256)
>cb1a		07 0a				        .byte len("sta.ziy"), IM+NN
>cb1c		29 cb				        .word +
>cb1e		8f a4 92 a4			        .word _, _ + 3
>cb22		73 74 61 2e 7a 69 79		        .text "sta.ziy"
.cb29						+
.cb29						nt_asm_sta_zx:
=$a393						        _ := asm_op_table + 3*(171 * (512 + $95 - 2 - <asm_op_table) % 256)
>cb29		06 0a				        .byte len("sta.zx"), IM+NN
>cb2b		37 cb				        .word +
>cb2d		93 a3 96 a3			        .word _, _ + 3
>cb31		73 74 61 2e 7a 78		        .text "sta.zx"
.cb37						+
.cb37						nt_asm_sta_zxi:
=$a57f						        _ := asm_op_table + 3*(171 * (512 + $81 - 2 - <asm_op_table) % 256)
>cb37		07 0a				        .byte len("sta.zxi"), IM+NN
>cb39		46 cb				        .word +
>cb3b		7f a5 82 a5			        .word _, _ + 3
>cb3f		73 74 61 2e 7a 78 69		        .text "sta.zxi"
.cb46						+
.cb46						nt_asm_stx:
=$a48c						        _ := asm_op_table + 3*(171 * (512 + $8e - 2 - <asm_op_table) % 256)
>cb46		03 0a				        .byte len("stx"), IM+NN
>cb48		51 cb				        .word +
>cb4a		8c a4 8f a4			        .word _, _ + 3
>cb4e		73 74 78			        .text "stx"
.cb51						+
.cb51						nt_asm_stx_z:
=$a384						        _ := asm_op_table + 3*(171 * (512 + $86 - 2 - <asm_op_table) % 256)
>cb51		05 0a				        .byte len("stx.z"), IM+NN
>cb53		5e cb				        .word +
>cb55		84 a3 87 a3			        .word _, _ + 3
>cb59		73 74 78 2e 7a			        .text "stx.z"
.cb5e						+
.cb5e						nt_asm_stx_zy:
=$a294						        _ := asm_op_table + 3*(171 * (512 + $96 - 2 - <asm_op_table) % 256)
>cb5e		06 0a				        .byte len("stx.zy"), IM+NN
>cb60		6c cb				        .word +
>cb62		94 a2 97 a2			        .word _, _ + 3
>cb66		73 74 78 2e 7a 79		        .text "stx.zy"
.cb6c						+
.cb6c						nt_asm_sty:
=$a38a						        _ := asm_op_table + 3*(171 * (512 + $8c - 2 - <asm_op_table) % 256)
>cb6c		03 0a				        .byte len("sty"), IM+NN
>cb6e		77 cb				        .word +
>cb70		8a a3 8d a3			        .word _, _ + 3
>cb74		73 74 79			        .text "sty"
.cb77						+
.cb77						nt_asm_sty_z:
=$a582						        _ := asm_op_table + 3*(171 * (512 + $84 - 2 - <asm_op_table) % 256)
>cb77		05 0a				        .byte len("sty.z"), IM+NN
>cb79		84 cb				        .word +
>cb7b		82 a5 85 a5			        .word _, _ + 3
>cb7f		73 74 79 2e 7a			        .text "sty.z"
.cb84						+
.cb84						nt_asm_sty_zx:
=$a492						        _ := asm_op_table + 3*(171 * (512 + $94 - 2 - <asm_op_table) % 256)
>cb84		06 0a				        .byte len("sty.zx"), IM+NN
>cb86		92 cb				        .word +
>cb88		92 a4 95 a4			        .word _, _ + 3
>cb8c		73 74 79 2e 7a 78		        .text "sty.zx"
.cb92						+
.cb92						nt_asm_stz:
=$a29a						        _ := asm_op_table + 3*(171 * (512 + $9c - 2 - <asm_op_table) % 256)
>cb92		03 0a				        .byte len("stz"), IM+NN
>cb94		9d cb				        .word +
>cb96		9a a2 9d a2			        .word _, _ + 3
>cb9a		73 74 7a			        .text "stz"
.cb9d						+
.cb9d						nt_asm_stz_x:
=$a39c						        _ := asm_op_table + 3*(171 * (512 + $9e - 2 - <asm_op_table) % 256)
>cb9d		05 0a				        .byte len("stz.x"), IM+NN
>cb9f		aa cb				        .word +
>cba1		9c a3 9f a3			        .word _, _ + 3
>cba5		73 74 7a 2e 78			        .text "stz.x"
.cbaa						+
.cbaa						nt_asm_stz_z:
=$a462						        _ := asm_op_table + 3*(171 * (512 + $64 - 2 - <asm_op_table) % 256)
>cbaa		05 0a				        .byte len("stz.z"), IM+NN
>cbac		b7 cb				        .word +
>cbae		62 a4 65 a4			        .word _, _ + 3
>cbb2		73 74 7a 2e 7a			        .text "stz.z"
.cbb7						+
.cbb7						nt_asm_stz_zx:
=$a372						        _ := asm_op_table + 3*(171 * (512 + $74 - 2 - <asm_op_table) % 256)
>cbb7		06 0a				        .byte len("stz.zx"), IM+NN
>cbb9		c5 cb				        .word +
>cbbb		72 a3 75 a3			        .word _, _ + 3
>cbbf		73 74 7a 2e 7a 78		        .text "stz.zx"
.cbc5						+
.cbc5						nt_asm_tax:
=$a3a8						        _ := asm_op_table + 3*(171 * (512 + $aa - 2 - <asm_op_table) % 256)
>cbc5		03 0a				        .byte len("tax"), IM+NN
>cbc7		d0 cb				        .word +
>cbc9		a8 a3 ab a3			        .word _, _ + 3
>cbcd		74 61 78			        .text "tax"
.cbd0						+
.cbd0						nt_asm_tay:
=$a2a6						        _ := asm_op_table + 3*(171 * (512 + $a8 - 2 - <asm_op_table) % 256)
>cbd0		03 0a				        .byte len("tay"), IM+NN
>cbd2		db cb				        .word +
>cbd4		a6 a2 a9 a2			        .word _, _ + 3
>cbd8		74 61 79			        .text "tay"
.cbdb						+
.cbdb						nt_asm_trb:
=$a41a						        _ := asm_op_table + 3*(171 * (512 + $1c - 2 - <asm_op_table) % 256)
>cbdb		03 0a				        .byte len("trb"), IM+NN
>cbdd		e6 cb				        .word +
>cbdf		1a a4 1d a4			        .word _, _ + 3
>cbe3		74 72 62			        .text "trb"
.cbe6						+
.cbe6						nt_asm_trb_z:
=$a312						        _ := asm_op_table + 3*(171 * (512 + $14 - 2 - <asm_op_table) % 256)
>cbe6		05 0a				        .byte len("trb.z"), IM+NN
>cbe8		f3 cb				        .word +
>cbea		12 a3 15 a3			        .word _, _ + 3
>cbee		74 72 62 2e 7a			        .text "trb.z"
.cbf3						+
.cbf3						nt_asm_tsb:
=$a50a						        _ := asm_op_table + 3*(171 * (512 + $0c - 2 - <asm_op_table) % 256)
>cbf3		03 0a				        .byte len("tsb"), IM+NN
>cbf5		fe cb				        .word +
>cbf7		0a a5 0d a5			        .word _, _ + 3
>cbfb		74 73 62			        .text "tsb"
.cbfe						+
.cbfe						nt_asm_tsb_z:
=$a402						        _ := asm_op_table + 3*(171 * (512 + $04 - 2 - <asm_op_table) % 256)
>cbfe		05 0a				        .byte len("tsb.z"), IM+NN
>cc00		0b cc				        .word +
>cc02		02 a4 05 a4			        .word _, _ + 3
>cc06		74 73 62 2e 7a			        .text "tsb.z"
.cc0b						+
.cc0b						nt_asm_tsx:
=$a2b8						        _ := asm_op_table + 3*(171 * (512 + $ba - 2 - <asm_op_table) % 256)
>cc0b		03 0a				        .byte len("tsx"), IM+NN
>cc0d		16 cc				        .word +
>cc0f		b8 a2 bb a2			        .word _, _ + 3
>cc13		74 73 78			        .text "tsx"
.cc16						+
.cc16						nt_asm_txa:
=$a288						        _ := asm_op_table + 3*(171 * (512 + $8a - 2 - <asm_op_table) % 256)
>cc16		03 0a				        .byte len("txa"), IM+NN
>cc18		21 cc				        .word +
>cc1a		88 a2 8b a2			        .word _, _ + 3
>cc1e		74 78 61			        .text "txa"
.cc21						+
.cc21						nt_asm_txs:
=$a498						        _ := asm_op_table + 3*(171 * (512 + $9a - 2 - <asm_op_table) % 256)
>cc21		03 0a				        .byte len("txs"), IM+NN
>cc23		2c cc				        .word +
>cc25		98 a4 9b a4			        .word _, _ + 3
>cc29		74 78 73			        .text "txs"
.cc2c						+
.cc2c						nt_asm_tya:
=$a396						        _ := asm_op_table + 3*(171 * (512 + $98 - 2 - <asm_op_table) % 256)
>cc2c		03 0a				        .byte len("tya"), IM+NN
>cc2e		37 cc				        .word +
>cc30		96 a3 99 a3			        .word _, _ + 3
>cc34		74 79 61			        .text "tya"
.cc37						+
.cc37						nt_asm_last:
.cc37						nt_asm_arrow:
>cc37		03 02				                .byte 3, IM
>cc39		42 cc				                .word nt_asm_back_jump
>cc3b		e7 88 f1 88			                .word xt_asm_arrow, z_asm_arrow
>cc3f		2d 2d 3e			                .text "-->"
.cc42						nt_asm_back_jump:
>cc42		02 02				                .byte 2, IM
>cc44		4c cc				                .word nt_asm_back_branch
>cc46		1d a6 1d a6			                .word xt_asm_back_jump, z_asm_back_jump
>cc4a		3c 6a				                .text "<j"
.cc4c						nt_asm_back_branch:
>cc4c		02 02				                .byte 2, IM
>cc4e		56 cc				                .word nt_asm_push_a
>cc50		1e a6 26 a6			                .word xt_asm_back_branch, z_asm_back_branch
>cc54		3c 62				                .text "<b"
.cc56						nt_asm_push_a:
>cc56		06 0a				                .byte 6, IM+NN
>cc58		00 00				                .word 0000
>cc5a		0f a6 1c a6			                .word xt_asm_push_a, z_asm_push_a
>cc5e		70 75 73 68 2d 61		                .text "push-a"

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../strings.asm

>cc64		30 31 32 33 34 35 36 37		alpha36:  .text "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
>cc6c		38 39 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e
>cc7c		4f 50 51 52 53 54 55 56 57 58 59 5a
=0						ix := 0
=0						str_ok             = ix         ; referenced by QUIT via state=0
=1						ix += 1
=1						str_compile        = ix         ; referenced by QUIT via state=1
=2						ix += 1
=2						str_redefined      = ix
=3						ix += 1
=3						str_wid_forth      = ix
=4						ix += 1
=4						str_wid_editor     = ix
=5						ix += 1
=5						str_wid_assembler  = ix
=6						ix += 1
=6						str_wid_root       = ix
=7						ix += 1
=7						str_see_nt         = ix
=8						ix += 1
=8						str_see_xt         = ix
=9						ix += 1
=9						str_see_size       = ix
=10						ix += 1
=10						str_see_cfapfa     = ix
=11						ix += 1
=11						str_disasm_sdc     = ix
=12						ix += 1
=12						str_disasm_lit     = ix
=13						ix += 1
=13						str_disasm_0bra    = ix
=14						ix += 1
=14						str_disasm_loop    = ix
=15						ix += 1
=15						str_disasm_do      = ix
=16						ix += 1
.cc88						string_table:
>cc88		a8 cc ab cc b4 cc		        .word s_ok, s_compiled, s_redefined                     ; 0-2
>cc8e		cf cc c8 cc be cc d5 cc		        .word s_wid_forth, s_wid_editor, s_wid_asm, s_wid_root  ; 3-6
>cc96		da cc de cc e2 cc f2 cc		        .word s_see_nt, s_see_xt, s_see_size, s_see_cfapfa            ; 7-10
>cc9e		1b cd 2d cd 35 cd 3d cd		        .word s_disasm_sdc, s_disasm_lit, s_disasm_0bra, s_disasm_loop, s_disasm_do ; 11-15
>cca6		42 cd
>cca8		20 6f eb			s_ok:         .shift " ok"              ; note space at beginning
>ccab		20 63 6f 6d 70 69 6c 65		s_compiled:   .shift " compiled"        ; note space at beginning
>ccb3		e4
>ccb4		72 65 64 65 66 69 6e 65		s_redefined:  .shift "redefined "       ; note space at end
>ccbc		64 a0
>ccbe		41 73 73 65 6d 62 6c 65		s_wid_asm:    .shift "Assembler "       ; Wordlist ID 2, note space at end
>ccc6		72 a0
>ccc8		45 64 69 74 6f 72 a0		s_wid_editor: .shift "Editor "     ; Wordlist ID 1, note space at end
>cccf		46 6f 72 74 68 a0		s_wid_forth:  .shift "Forth "      ; Wordlist ID 0, note space at end
>ccd5		52 6f 6f 74 a0			s_wid_root:   .shift "Root "       ; Wordlist ID 3, note space at end
>ccda		6e 74 3a a0			s_see_nt:     .shift "nt: "
>ccde		78 74 3a a0			s_see_xt:     .shift "xt: "
>cce2		73 69 7a 65 20 28 64 65		s_see_size:   .shift "size (decimal): "
>ccea		63 69 6d 61 6c 29 3a a0
>ccf2		43 46 41 20 33 20 20 50		s_see_cfapfa: .shift "CFA 3  PFA "
>ccfa		46 41 a0
>ccfd		66 6c 61 67 73 3a 20 43		see_flags_template:     .shift "flags: CO",0,"IM",0,"AN",0,"NN",0,"HC",0,"| UF",0,"ST",0
>cd05		4f 00 49 4d 00 41 4e 00 4e 4e 00 48 43 00 7c 20
>cd15		55 46 00 53 54 80
>cd1b		20 53 54 41 43 4b 20 44		s_disasm_sdc: .shift " STACK DEPTH CHECK"
>cd23		45 50 54 48 20 43 48 45 43 cb
>cd2d		4c 49 54 45 52 41 4c a0		s_disasm_lit: .shift "LITERAL "
>cd35		30 42 52 41 4e 43 48 a0		s_disasm_0bra: .shift "0BRANCH "
>cd3d		4c 4f 4f 50 a0			s_disasm_loop: .shift "LOOP "
>cd42		44 4f a0			s_disasm_do: .shift "DO "
=0						err_allot        = 0
=1						err_badsource    = 1
=2						err_compileonly  = 2
=3						err_defer        = 3
=4						err_divzero      = 4
=5						err_noname       = 5
=6						err_refill       = 6
=7						err_state        = 7
=8						err_syntax       = 8
=9						err_underflow    = 9
=10						err_negallot     = 10
=11						err_wordlist     = 11
=12						err_blockwords   = 12
=13						err_returnstack  = 13
=14						err_toolong      = 14
.cd45						error_table:
>cd45		63 cd 83 cd a2 cd c2 cd		        .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
>cd4d		de cd ee cd fd cd 2a ce		        .word es_divzero, es_noname, es_refill, es_state        ;  4-7
>cd55		41 ce 61 ce 75 ce 90 ce		        .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
>cd5d		a6 ce e4 ce f1 ce		        .word es_blockwords, es_returnstack, es_toolong         ; 12-14
>cd63		41 4c 4c 4f 54 20 75 73		es_allot:       .shift "ALLOT using all available memory"
>cd6b		69 6e 67 20 61 6c 6c 20 61 76 61 69 6c 61 62 6c
>cd7b		65 20 6d 65 6d 6f 72 f9
>cd83		49 6c 6c 65 67 61 6c 20		es_badsource:   .shift "Illegal SOURCE-ID during REFILL"
>cd8b		53 4f 55 52 43 45 2d 49 44 20 64 75 72 69 6e 67
>cd9b		20 52 45 46 49 4c cc
>cda2		49 6e 74 65 72 70 72 65		es_compileonly: .shift "Interpreting a compile-only word"
>cdaa		74 69 6e 67 20 61 20 63 6f 6d 70 69 6c 65 2d 6f
>cdba		6e 6c 79 20 77 6f 72 e4
>cdc2		44 45 46 45 52 65 64 20		es_defer:       .shift "DEFERed word not defined yet"
>cdca		77 6f 72 64 20 6e 6f 74 20 64 65 66 69 6e 65 64
>cdda		20 79 65 f4
>cdde		44 69 76 69 73 69 6f 6e		es_divzero:     .shift "Division by zero"
>cde6		20 62 79 20 7a 65 72 ef
>cdee		50 61 72 73 69 6e 67 20		es_noname:      .shift "Parsing failure"
>cdf6		66 61 69 6c 75 72 e5
>cdfd		51 55 49 54 20 63 6f 75		es_refill:      .shift "QUIT could not get input (REFILL returned -1)"
>ce05		6c 64 20 6e 6f 74 20 67 65 74 20 69 6e 70 75 74
>ce15		20 28 52 45 46 49 4c 4c 20 72 65 74 75 72 6e 65
>ce25		64 20 2d 31 a9
>ce2a		41 6c 72 65 61 64 79 20		es_state:       .shift "Already in compile mode"
>ce32		69 6e 20 63 6f 6d 70 69 6c 65 20 6d 6f 64 e5
>ce41		55 6e 64 65 66 69 6e 65		es_syntax:      .shift "Undefined word or invalid number"
>ce49		64 20 77 6f 72 64 20 6f 72 20 69 6e 76 61 6c 69
>ce59		64 20 6e 75 6d 62 65 f2
>ce61		44 61 74 61 20 73 74 61		es_underflow:   .shift "Data stack underflow"
>ce69		63 6b 20 75 6e 64 65 72 66 6c 6f f7
>ce75		4d 61 78 20 6d 65 6d 6f		es_negallot:    .shift "Max memory freed with ALLOT"
>ce7d		72 79 20 66 72 65 65 64 20 77 69 74 68 20 41 4c
>ce8d		4c 4f d4
>ce90		4e 6f 20 77 6f 72 64 6c		es_wordlist:    .shift "No wordlists available"
>ce98		69 73 74 73 20 61 76 61 69 6c 61 62 6c e5
>cea6		50 6c 65 61 73 65 20 61		es_blockwords:  .shift "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR"
>ceae		73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42 4c
>cebe		4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52 20
>cece		61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45 2d
>cede		56 45 43 54 4f d2
>cee4		52 65 74 75 72 6e 20 73		es_returnstack: .shift "Return stack:"
>ceec		74 61 63 6b ba
>cef1		4e 61 6d 65 20 74 6f 6f		es_toolong:     .shift "Name too long (max 31)"
>cef9		20 6c 6f 6e 67 20 28 6d 61 78 20 33 31 a9
>cf07		2f 43 4f 55 4e 54 45 44		envs_cs:        .text "/COUNTED-STRING"
>cf0f		2d 53 54 52 49 4e 47
>cf16		2f 48 4f 4c 44			envs_hold:      .text "/HOLD"
>cf1b		2f 50 41 44			envs_pad:       .text "/PAD"
>cf1f		41 44 44 52 45 53 53 2d		envs_aub:       .text "ADDRESS-UNIT-BITS"
>cf27		55 4e 49 54 2d 42 49 54 53
>cf30		46 4c 4f 4f 52 45 44		envs_floored:   .text "FLOORED"
>cf37		4d 41 58 2d 43 48 41 52		envs_max_char:  .text "MAX-CHAR"
>cf3f		4d 41 58 2d 4e			envs_max_n:     .text "MAX-N"
>cf44		4d 41 58 2d 55			envs_max_u:     .text "MAX-U"
>cf49		52 45 54 55 52 4e 2d 53		envs_rsc:       .text "RETURN-STACK-CELLS"
>cf51		54 41 43 4b 2d 43 45 4c 4c 53
>cf5b		53 54 41 43 4b 2d 43 45		envs_sc:        .text "STACK-CELLS"
>cf63		4c 4c 53
>cf66		57 4f 52 44 4c 49 53 54		envs_wl:        .text "WORDLISTS"
>cf6e		53
>cf6f		4d 41 58 2d 44			envs_max_d:     .text "MAX-D"
>cf74		4d 41 58 2d 55 44		envs_max_ud:    .text "MAX-UD"
.cf7a						envs_eot:

;******  Return to file: platform/../taliforth.asm

.cf7a						doconst:
.cf7a		ca		dex		                dex             ; make room for constant
.cf7b		ca		dex		                dex
.cf7c		68		pla		                pla             ; LSB of return address
.cf7d		85 25		sta $25		                sta tmp1
.cf7f		68		pla		                pla             ; MSB of return address
.cf80		85 26		sta $26		                sta tmp1+1
.cf82		a0 01		ldy #$01	                ldy #1
.cf84		b1 25		lda ($25),y	                lda (tmp1),y
.cf86		95 00		sta $00,x	                sta 0,x
.cf88		c8		iny		                iny
.cf89		b1 25		lda ($25),y	                lda (tmp1),y
.cf8b		95 01		sta $01,x	                sta 1,x
.cf8d		60		rts		                rts
.cf8e						dodefer:
.cf8e		68		pla		                pla             ; LSB
.cf8f		85 25		sta $25		                sta tmp1
.cf91		68		pla		                pla             ; MSB
.cf92		85 26		sta $26		                sta tmp1+1
.cf94		a0 01		ldy #$01	                ldy #1
.cf96		b1 25		lda ($25),y	                lda (tmp1),y
.cf98		85 27		sta $27		                sta tmp2
.cf9a		c8		iny		                iny
.cf9b		b1 25		lda ($25),y	                lda (tmp1),y
.cf9d		85 28		sta $28		                sta tmp2+1
.cf9f		6c 27 00	jmp ($0027)	                jmp (tmp2)      ; This is actually a jump to the new target
.cfa2						dodoes:
.cfa2		7a		ply		                ply             ; LSB
.cfa3		68		pla		                pla             ; MSB
.cfa4		c8		iny		                iny
.cfa5		d0 01		bne $cfa8	                bne +
.cfa7		1a		inc a		                ina
.cfa8						+
.cfa8		84 27		sty $27		                sty tmp2
.cfaa		85 28		sta $28		                sta tmp2+1
.cfac		ca		dex		                dex
.cfad		ca		dex		                dex
.cfae		7a		ply		                ply
.cfaf		68		pla		                pla
.cfb0		c8		iny		                iny
.cfb1		d0 01		bne $cfb4	                bne +
.cfb3		1a		inc a		                ina
.cfb4						+
.cfb4		94 00		sty $00,x	                sty 0,x         ; LSB
.cfb6		95 01		sta $01,x	                sta 1,x         ; MSB
.cfb8		6c 27 00	jmp ($0027)	                jmp (tmp2)
.cfbb						dovar:
.cfbb		7a		ply		                ply             ; LSB
.cfbc		68		pla		                pla             ; MSB
.cfbd		c8		iny		                iny
.cfbe		d0 01		bne $cfc1	                bne +
.cfc0		1a		inc a		                ina
.cfc1						+
.cfc1		ca		dex		                dex
.cfc2		ca		dex		                dex
.cfc3		95 01		sta $01,x	                sta 1,x
.cfc5		98		tya		                tya
.cfc6		95 00		sta $00,x	                sta 0,x
.cfc8		60		rts		                rts
.cfc9						push_a_tos:
.cfc9		ca		dex		                dex
.cfca		ca		dex		                dex
.cfcb		95 00		sta $00,x	                sta 0,x
.cfcd		74 01		stz $01,x	                stz 1,x
.cfcf						z_push_a_tos:
.cfcf		60		rts		                rts
.cfd0						push_upvar_tos:
.cfd0		ca		dex		                dex
.cfd1		ca		dex		                dex
.cfd2		18		clc		                clc
.cfd3		65 08		adc $08		                adc up
.cfd5		95 00		sta $00,x	                sta 0,x
.cfd7		a5 09		lda $09		                lda up+1
.cfd9		90 01		bcc $cfdc	                bcc +
.cfdb		1a		inc a		                ina
.cfdc						+
.cfdc		95 01		sta $01,x	                sta 1,x
.cfde		60		rts		                rts
.cfdf						byte_to_ascii:
.cfdf		48		pha		                pha
.cfe0		4a		lsr a		                lsr             ; convert high nibble first
.cfe1		4a		lsr a		                lsr
.cfe2		4a		lsr a		                lsr
.cfe3		4a		lsr a		                lsr
.cfe4		20 e8 cf	jsr $cfe8	                jsr _nibble_to_ascii
.cfe7		68		pla		                pla
.cfe8						_nibble_to_ascii:
.cfe8		29 0f		and #$0f	                and #$F
.cfea		09 30		ora #$30	                ora #'0'
.cfec		c9 3a		cmp #$3a	                cmp #'9'+1
.cfee		90 02		bcc $cff2	                bcc +
.cff0		69 06		adc #$06	                adc #6
.cff2		4c 93 86	jmp $8693	+               jmp emit_a
.cff5		60		rts		                rts
.cff6						find_header_name:
.cff6		b5 02		lda $02,x	                lda 2,x                 ; Copy mystery string to tmp2
.cff8		85 27		sta $27		                sta tmp2
.cffa		b5 03		lda $03,x	                lda 3,x
.cffc		85 28		sta $28		                sta tmp2+1
.cffe						_loop:
.cffe		b2 25		lda ($25)	                lda (tmp1)
.d000		d5 00		cmp $00,x	                cmp 0,x
.d002		d0 3a		bne $d03e	                bne _next_entry
.d004		b2 27		lda ($27)	                lda (tmp2)      ; first character of mystery string
.d006		a0 08		ldy #$08	                ldy #8
.d008		51 25		eor ($25),y	                eor (tmp1),y    ; flag any mismatched bits
.d00a		29 df		and #$df	                and #%11011111  ; but ignore upper/lower case bit
.d00c		d0 30		bne $d03e	                bne _next_entry ; definitely not equal if any bits differ
.d00e		a5 25		lda $25		                lda tmp1
.d010		48		pha		                pha             ; Save original address on the stack
.d011		18		clc		                clc
.d012		69 08		adc #$08	                adc #8
.d014		85 25		sta $25		                sta tmp1
.d016		a5 26		lda $26		                lda tmp1+1
.d018		48		pha		                pha
.d019		90 03		bcc $d01e	                bcc +
.d01b		1a		inc a		                ina
.d01c		85 26		sta $26		                sta tmp1+1
.d01e						+
.d01e		b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.d020		88		dey		                dey
.d021						_next_char:
.d021		b1 27		lda ($27),y	                lda (tmp2),y    ; last char of mystery string
.d023		c9 5b		cmp #$5b	                cmp #'Z'+1
.d025		b0 06		bcs $d02d	                bcs _check_char
.d027		c9 41		cmp #$41	                cmp #'A'
.d029		90 02		bcc $d02d	                bcc _check_char
.d02b		09 20		ora #$20	                ora #$20
.d02d						_check_char:
.d02d		d1 25		cmp ($25),y	                cmp (tmp1),y    ; last char of word we're testing against
.d02f		d0 03		bne $d034	                bne _reset_tmp1
.d031		88		dey		                dey
.d032		10 ed		bpl $d021	                bpl _next_char
.d034						_reset_tmp1:
.d034		68		pla		                pla
.d035		85 26		sta $26		                sta tmp1+1
.d037		68		pla		                pla
.d038		85 25		sta $25		                sta tmp1
.d03a		98		tya		                tya             ; leave A = $FF on success
.d03b		c8		iny		                iny             ; if Y was $FF, we succeeded
.d03c		f0 11		beq $d04f	                beq _done
.d03e						_next_entry:
.d03e		a0 02		ldy #$02	                ldy #2
.d040		b1 25		lda ($25),y	                lda (tmp1),y
.d042		48		pha		                pha
.d043		c8		iny		                iny
.d044		b1 25		lda ($25),y	                lda (tmp1),y
.d046		85 26		sta $26		                sta tmp1+1
.d048		68		pla		                pla
.d049		85 25		sta $25		                sta tmp1
.d04b		05 26		ora $26		                ora tmp1+1
.d04d		d0 af		bne $cffe	                bne _loop
.d04f		c9 00		cmp #$00	_done:          cmp #0      ; A is 0 on failure and $FF on success
.d051		60		rts		                rts         ; so cmp #0 sets Z on failure and clears on success
.d052						compare_16bit:
.d052		b5 00		lda $00,x	                lda 0,x                 ; LSB of TOS
.d054		d5 02		cmp $02,x	                cmp 2,x                 ; LSB of NOS
.d056		f0 08		beq $d060	                beq _equal
.d058		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d05a		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d05c		70 08		bvs $d066	                bvs _overflow
.d05e		80 08		bra $d068	                bra _not_equal
.d060						_equal:
.d060		b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d062		f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d064		50 04		bvc $d06a	                bvc _done
.d066						_overflow:
.d066		49 80		eor #$80	                eor #$80                ; complement negative flag
.d068						_not_equal:
.d068		09 01		ora #$01	                ora #1                  ; set Z=0 since we're not equal
.d06a						_done:
.d06a		60		rts		                rts
.d06b						current_to_dp:
.d06b		a0 08		ldy #$08	                ldy #current_offset
.d06d		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d06f		0a		asl a		                asl             ; turn it into an offset (in cells)
.d070		18		clc		                clc
.d071		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d073		a8		tay		                tay
.d074		b1 08		lda ($08),y	                lda (up),y              ; get the dp for that wordlist.
.d076		85 02		sta $02		                sta dp
.d078		c8		iny		                iny
.d079		b1 08		lda ($08),y	                lda (up),y
.d07b		85 03		sta $03		                sta dp+1
.d07d		60		rts		                rts
.d07e						dp_to_current:
.d07e		a0 08		ldy #$08	                ldy #current_offset
.d080		b1 08		lda ($08),y	                lda (up),y      ; current is a byte variable
.d082		0a		asl a		                asl             ; turn it into an offset (in cells)
.d083		18		clc		                clc
.d084		69 0a		adc #$0a	                adc #wordlists_offset   ; add offset to wordlists base.
.d086		a8		tay		                tay
.d087		a5 02		lda $02		                lda dp
.d089		91 08		sta ($08),y	                sta (up),y              ; get the dp for that wordlist.
.d08b		c8		iny		                iny
.d08c		a5 03		lda $03		                lda dp+1
.d08e		91 08		sta ($08),y	                sta (up),y
.d090		60		rts		                rts
.d091						interpret:
.d091						_loop:
.d091		20 24 8d	jsr $8d24	                jsr w_parse_name       ; ( "string" -- addr u )
.d094		b5 00		lda $00,x	                lda 0,x
.d096		15 01		ora $01,x	                ora 1,x
.d098		f0 5a		beq $d0f4	                beq _line_done
.d09a		20 9f 93	jsr $939f	                jsr w_two_dup          ; ( addr u -- addr u addr u )
.d09d		20 5d 9b	jsr $9b5d	                jsr w_find_name        ; ( addr u addr u -- addr u nt|0 )
.d0a0		b5 00		lda $00,x	                lda 0,x
.d0a2		15 01		ora $01,x	                ora 1,x
.d0a4		d0 19		bne $d0bf	                bne _got_name_token
.d0a6		e8		inx		                inx                     ; ( addr u 0 -- addr u )
.d0a7		e8		inx		                inx
.d0a8		20 14 9d	jsr $9d14	                jsr w_number           ; ( addr u -- u|d )
.d0ab		a5 1a		lda $1a		                lda state
.d0ad		f0 e2		beq $d091	                beq _loop
.d0af		a9 20		lda #$20	                lda #%00100000
.d0b1		24 1c		bit $1c		                bit status
.d0b3		d0 05		bne $d0ba	                bne _double_number
.d0b5		20 d3 89	jsr $89d3	                jsr w_literal
.d0b8		80 d7		bra $d091	                bra _loop
.d0ba						_double_number:
.d0ba		20 c8 9f	jsr $9fc8	                jsr w_two_literal
.d0bd		80 d2		bra $d091	                bra _loop
.d0bf						_got_name_token:
.d0bf		b5 00		lda $00,x	                lda 0,x
.d0c1		95 04		sta $04,x	                sta 4,x
.d0c3		b5 01		lda $01,x	                lda 1,x
.d0c5		95 05		sta $05,x	                sta 5,x
.d0c7		e8		inx		                inx
.d0c8		e8		inx		                inx
.d0c9		e8		inx		                inx
.d0ca		e8		inx		                inx                     ; ( nt )
.d0cb		20 69 86	jsr $8669	                jsr w_dup
.d0ce		20 bf 8c	jsr $8cbf	                jsr w_one_plus
.d0d1		a1 00		lda ($00,x)	                lda (0,x)
.d0d3		e8		inx		                inx
.d0d4		e8		inx		                inx
.d0d5		a4 1a		ldy $1a		                ldy state
.d0d7		d0 12		bne $d0eb	                bne _compile
.d0d9		29 01		and #$01	                and #CO                 ; mask everything but Compile Only bit
.d0db		f0 05		beq $d0e2	                beq _interpret
.d0dd		a9 02		lda #$02	                lda #err_compileonly
.d0df		4c 28 d1	jmp $d128	                jmp error
.d0e2						_interpret:
.d0e2		20 b1 9c	jsr $9cb1	                jsr w_name_to_int      ; ( nt - xt )
.d0e5		20 d4 87	jsr $87d4	                jsr w_execute
.d0e8		4c 91 d0	jmp $d091	                jmp _loop
.d0eb						_compile:
.d0eb		29 02		and #$02	                and #IM                 ; Mask all but IM bit
.d0ed		d0 f3		bne $d0e2	                bne _interpret          ; IMMEDIATE word, execute right now
.d0ef		20 ad 96	jsr $96ad	                jsr compile_nt_comma
.d0f2		80 9d		bra $d091	                bra _loop
.d0f4						_line_done:
.d0f4		e8		inx		                inx
.d0f5		e8		inx		                inx
.d0f6		e8		inx		                inx
.d0f7		e8		inx		                inx
.d0f8		60		rts		                rts
.d0f9						is_printable:
.d0f9		c9 20		cmp #$20	                cmp #AscSP              ; $20
.d0fb		90 07		bcc $d104	                bcc _done
.d0fd		c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.d0ff		b0 02		bcs $d103	                bcs _failed
.d101		38		sec		                sec
>d102		24				                .byte OpBITzp
.d103						_failed:
.d103		18		clc		                clc
.d104						_done:
.d104		60		rts		                rts
.d105						is_whitespace:
.d105		c9 00		cmp #$00	                cmp #00         ; explicit comparison to leave Y untouched
.d107		90 08		bcc $d111	                bcc _done
.d109		c9 21		cmp #$21	                cmp #AscSP+1
.d10b		b0 03		bcs $d110	                bcs _failed
.d10d		38		sec		                sec
.d10e		80 01		bra $d111	                bra _done
.d110						_failed:
.d110		18		clc		                clc
.d111						_done:
.d111		60		rts		                rts
.d112						underflow_1:
.d112		e0 77		cpx #$77	                cpx #dsp0-1
.d114		10 10		bpl $d126	                bpl underflow_error
.d116		60		rts		                rts
.d117						underflow_2:
.d117		e0 75		cpx #$75	                cpx #dsp0-3
.d119		10 0b		bpl $d126	                bpl underflow_error
.d11b		60		rts		                rts
.d11c						underflow_3:
.d11c		e0 73		cpx #$73	                cpx #dsp0-5
.d11e		10 06		bpl $d126	                bpl underflow_error
.d120		60		rts		                rts
.d121						underflow_4:
.d121		e0 71		cpx #$71	                cpx #dsp0-7
.d123		10 01		bpl $d126	                bpl underflow_error
.d125		60		rts		                rts
.d126						underflow_error:
.d126		a9 09		lda #$09	                lda #err_underflow      ; fall through to error
.d128						error:
.d128		48		pha		                pha                     ; save error
.d129		20 6b d1	jsr $d16b	                jsr print_error
.d12c		20 ef 83	jsr $83ef	                jsr w_cr
.d12f		68		pla		                pla
.d130		c9 09		cmp #$09	                cmp #err_underflow      ; should we display return stack?
.d132		d0 17		bne $d14b	                bne _no_underflow
.d134		a9 0d		lda #$0d	                lda #err_returnstack
.d136		20 6b d1	jsr $d16b	                jsr print_error
.d139		ba		tsx		                tsx
.d13a						-
.d13a		e8		inx		                inx
.d13b		f0 0b		beq $d148	                beq +
.d13d		20 b5 91	jsr $91b5	                jsr w_space
.d140		bd 00 01	lda $0100,x	                lda $100,x
.d143		20 df cf	jsr $cfdf	                jsr byte_to_ascii
.d146		80 f2		bra $d13a	                bra -
.d148						+
.d148		20 ef 83	jsr $83ef	                jsr w_cr
.d14b						_no_underflow:
.d14b		4c 5e 80	jmp $805e	                jmp w_abort            ; no jsr, as we clobber return stack
.d14e						print_string_no_lf:
.d14e		0a		asl a		                asl
.d14f		a8		tay		                tay
.d150		b9 88 cc	lda $cc88,y	                lda string_table,y
.d153		85 29		sta $29		                sta tmp3                ; LSB
.d155		b9 89 cc	lda $cc89,y	                lda string_table+1,y
.d158		85 2a		sta $2a		                sta tmp3+1              ; MSB
.d15a						print_common:
.d15a		a0 00		ldy #$00	                ldy #0
.d15c						_loop:
.d15c		b1 29		lda ($29),y	                lda (tmp3),y
.d15e		10 04		bpl $d164	                bpl +                           ; strings are high-bit terminated
.d160		29 7f		and #$7f	                and #$7f                        ; last character, clear high bit
.d162		a0 ff		ldy #$ff	                ldy #$ff                        ; flag end of loop
.d164						+
.d164		20 93 86	jsr $8693	                jsr emit_a                      ; allows vectoring via output
.d167		c8		iny		                iny
.d168		d0 f2		bne $d15c	                bne _loop
.d16a		60		rts		                rts
.d16b						print_error:
.d16b		0a		asl a		                asl
.d16c		a8		tay		                tay
.d16d		b9 45 cd	lda $cd45,y	                lda error_table,y
.d170		85 29		sta $29		                sta tmp3                        ; LSB
.d172		c8		iny		                iny
.d173		b9 45 cd	lda $cd45,y	                lda error_table,y
.d176		85 2a		sta $2a		                sta tmp3+1                      ; MSB
.d178		80 e0		bra $d15a	                bra print_common
.d17a						print_u:
.d17a		20 71 9e	jsr $9e71	                jsr w_zero                     ; 0
.d17d		20 ad 89	jsr $89ad	                jsr w_less_number_sign         ; <#
.d180		20 89 8c	jsr $8c89	                jsr w_number_sign_s            ; #S
.d183		20 67 8c	jsr $8c67	                jsr w_number_sign_greater      ; #>
.d186		4c b4 94	jmp $94b4	                jmp w_type                     ; JSR/RTS because never compiled
.d189						code_end:

;******  Return to file: platform/simulator.asm

=$f000						io_start = $f000                ; virtual hardware addresses for the simulators
>f000						                .byte ?
>f001						io_putc:        .byte ?         ; $f001     write byte to stdout
>f002						                .byte ?
>f003						io_kbhit:       .byte ?         ; $f003     read non-zero on key ready (c65 only)
>f004						io_getc:        .byte ?         ; $f004     non-blocking read input character (0 if no key)
>f005						                .byte ?
>f006						io_clk_start:   .byte ?         ; $f006     *read* to start cycle counter
>f007						io_clk_stop:    .byte ?         ; $f007     *read* to stop the cycle counter
>f008						io_clk_cycles:  .word ?,?       ; $f008-b   32-bit cycle count in NUXI order
>f00c						                .word ?,?
.f010						kernel_init:
.f010		78		sei		                sei             ; Disable interrupts
.f011		a2 00		ldx #$00	                ldx #0
.f013		bd 40 f0	lda $f040,x	-               lda s_kernel_id,x
.f016		f0 06		beq $f01e	                beq _done
.f018		20 22 f0	jsr $f022	                jsr kernel_putc
.f01b		e8		inx		                inx
.f01c		80 f5		bra $f013	                bra -
.f01e						_done:
.f01e		4c 00 80	jmp $8000	                jmp forth
.f021						kernel_bye:
.f021		00		brk #		                brk
.f022						kernel_putc:
.f022		8d 01 f0	sta $f001	                sta io_putc
.f025		60		rts		                rts

;******  Return to file: platform/platform-py65mon.asm

=$f002						io_bufc = io_putc+1
.f026						kernel_getc:
.f026		ad 02 f0	lda $f002	                lda io_bufc             ; first check the buffer
.f029		9c 02 f0	stz $f002	                stz io_bufc
.f02c		d0 05		bne $f033	                bne _done
.f02e						_loop:
.f02e		ad 04 f0	lda $f004	                lda io_getc
.f031		f0 fb		beq $f02e	                beq _loop
.f033						_done:
.f033		60		rts		                rts
.f034						kernel_kbhit:
.f034		ad 02 f0	lda $f002	                lda io_bufc             ; do we already have a character?
.f037		d0 06		bne $f03f	                bne _done
.f039		ad 04 f0	lda $f004	                lda io_getc             ; otherwise check and buffer the result
.f03c		8d 02 f0	sta $f002	                sta io_bufc
.f03f						_done:
.f03f		60		rts		                rts
.f040						s_kernel_id:
>f040		54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 default kernel for py65mon (04. Dec 2022)", AscLF, 0
>f048		74 68 20 32 20 64 65 66 61 75 6c 74 20 6b 65 72
>f058		6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f 6e 20
>f068		28 30 34 2e 20 44 65 63 20 32 30 32 32 29 0a 00
>fffa		10 f0				v_nmi   .word kernel_init
>fffc		10 f0				v_reset .word kernel_init
>fffe		10 f0				v_irq   .word kernel_init

;******  End of listing
