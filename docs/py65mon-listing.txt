
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass --nostart --list=docs/py65mon-listing.txt --labels=docs/py65mon-labelmap.txt --output taliforth-py65mon.bin platform/platform-py65mon.asm
; Mon Mar 18 13:08:11 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: platform/platform-py65mon.asm

=$0000					ram_start = $0000          ; start of installed 32 KiB of RAM
=32767					ram_end   = $8000-1        ; end of installed RAM
=$0000					zpage     = ram_start      ; begin of Zero Page ($0000-$00ff)
=$7f					zpage_end = $7F            ; end of Zero Page used ($0000-$007f)
=$0100					stack0    = $0100          ; begin of Return Stack ($0100-$01ff)
=31744					hist_buff = ram_end-$03ff  ; begin of history buffers
=$0000					user0     = zpage            ; TaliForth2 system variables
=$ff					rsp0      = $ff              ; initial Return Stack Pointer (65c02 stack)
=$ff					bsize     = $ff              ; size of input/output buffers
=512					buffer0   = stack0+$100      ; input buffer ($0200-$027f)
=768					cp0       = buffer0+bsize+1  ; Dictionary starts after last buffer
=31744					cp_end    = hist_buff        ; Last RAM byte available for code
=$ff					padoffset = $ff              ; offset from CP to PAD (holds number strings)
=					TALI_OPTIONAL_WORDS := [ "ed", "editor", "ramdrive", "block", "environment?", "assembler", "disassembler", "wordlist" ]
=["lf"]					TALI_OPTION_CR_EOL := [ "lf" ]
=1					TALI_OPTION_HISTORY := 1
=0					TALI_OPTION_TERSE := 0

;******  Processing file: platform/../taliforth.asm

.8000					code0:

;******  Processing file: platform/../definitions.asm

=0					cp        = user0+0   ; Compiler Pointer
=2					dp        = user0+2   ; Dictionary Pointer
=4					workword  = user0+4   ; nt (not xt!) of word being compiled, except in
=6					insrc     = user0+6   ; input Source for SOURCE-ID
=8					cib       = user0+8   ; address of current input buffer
=10					ciblen    = user0+10  ; length of current input buffer
=12					toin      = user0+12  ; pointer to CIB (>IN in Forth)
=14					ip        = user0+14  ; Instruction Pointer (current xt)
=16					output    = user0+16  ; vector for EMIT
=18					input     = user0+18  ; vector for KEY
=20					havekey   = user0+20  ; vector for KEY?
=22					state     = user0+22  ; STATE: -1 compile, 0 interpret
=24					base      = user0+24  ; number radix, default decimal
=26					nc_limit  = user0+26  ; limit for Native Compile size
=28					uf_strip  = user0+28  ; flag to strip underflow detection code
=30					up        = user0+30  ; User Pointer (Address of user variables)
=32					status    = user0+32  ; internal status information
=34					tmpbranch = user0+34  ; temporary storage for 0BRANCH, BRANCH only
=36					tmp1      = user0+36  ; temporary storage
=38					tmp2      = user0+38  ; temporary storage
=40					tmp3      = user0+40  ; temporary storage (especially for print)
=42					tmpdsp    = user0+42  ; temporary DSP (X) storage (two bytes)
=44					tmptos    = user0+44  ; temporary TOS storage
=46					editor1   = user0+46  ; temporary for editors
=48					editor2   = user0+48  ; temporary for editors
=50					editor3   = user0+50  ; temporary for editors
=52					tohold    = user0+52  ; pointer for formatted output
=54					scratch   = user0+54  ; 8 byte scratchpad (see UM/MOD)
=120					dsp0      = zpage_end-7    ; initial Data Stack Pointer
=126					turnkey   = zpage_end-1    ; word to resume in pre-compiled image
=0					blk_offset = 0        ; BLK : UP + 0
=2					scr_offset = 2        ; SCR : UP + 2
=4					current_offset = 4    ; CURRENT (byte) : UP + 4 (Compilation wordlist)
=5					num_wordlists_offset = 5
=6					wordlists_offset = 6  ; WORDLISTS (cells) : UP + 6 to UP + 29
=30					num_order_offset = 30 ; #ORDER (byte) : UP + 30
=31					search_order_offset = 31
=12					max_wordlists = 12    ; Maximum number of wordlists supported
=40					blkbuffer_offset    = 40   ; Address of buffer
=42					buffblocknum_offset = 42   ; Block number current in buffer
=44					buffstatus_offset   = 44   ; Status of buffer (bit 0 = used, bit 1 = dirty)
=46					blockread_offset    = 46   ; Vector to block reading routine
=48					blockwrite_offset   = 48   ; Vector to block writing routine
=$03					AscCC   = $03  ; break (CTRL-c)
=$07					AscBELL = $07  ; bell sound
=$08					AscBS   = $08  ; backspace
=$0a					AscLF   = $0a  ; line feed
=$0d					AscCR   = $0d  ; carriage return
=$1b					AscESC  = $1b  ; escape
=$20					AscSP   = $20  ; space
=$7f					AscDEL  = $7f  ; delete (CTRL-h)
=$10					AscCP   = $10  ; CTRL-p (used to recall previous input history)
=$0e					AscCN   = $0e  ; CTRL-n (used to recall next input history)
=1					CO = 1  ; Compile Only
=2					AN = 2  ; Always Native Compile
=4					IM = 4  ; Immediate Word
=8					NN = 8  ; Never Native Compile
=16					UF = 16 ; Includes Underflow Check (RESERVED)
=32					HC = 32 ; Word has Code Field Area (CFA)
=79					MAX_LINE_LENGTH  = 79      ; assumes 80 character lines

;******  Return to file: platform/../taliforth.asm

.8000					forth:

;******  Processing file: platform/../native_words.asm

.8000					xt_cold:
.8000	d8		cld		                cld
.8001	a9 27		lda #$27	                lda #<kernel_putc
.8003	85 10		sta $10		                sta output
.8005	a9 f0		lda #$f0	                lda #>kernel_putc
.8007	85 11		sta $11		                sta output+1
.8009	a2 21		ldx #$21	                ldx #cold_zp_table_end-cold_zp_table-1
.800b					_load_zp_loop:
.800b	bd bd 80	lda $80bd,x	                lda cold_zp_table,x
.800e	95 00		sta $00,x	                sta zpage,x
.8010	ca		dex		                dex
.8011	d0 f8		bne $800b	                bne _load_zp_loop
.8013	ad bd 80	lda $80bd	                lda cold_zp_table
.8016	85 00		sta $00		                sta zpage
.8018	a2 ff		ldx #$ff	                ldx #rsp0
.801a	9a		txs		                txs
.801b	a2 78		ldx #$78	                ldx #dsp0
.801d	a0 33		ldy #$33	                ldy #cold_user_table_end-cold_user_table-1
.801f	a9 00		lda #$00	                lda #0
.8021					_load_user_vars_loop:
.8021	b9 df 80	lda $80df,y	                lda cold_user_table,y
.8024	91 1e		sta ($1e),y	                sta (up),y
.8026	88		dey		                dey
.8027	d0 f8		bne $8021	                bne _load_user_vars_loop
.8029	ad df 80	lda $80df	                lda cold_user_table
.802c	92 1e		sta ($1e)	                sta (up)
.802e	20 7f 89	jsr $897f	                jsr xt_cr
.8031	ca		dex		                dex
.8032	ca		dex		                dex
.8033	ca		dex		                dex
.8034	ca		dex		                dex
.8035	a9 5e		lda #$5e	                lda #<forth_words_start
.8037	95 02		sta $02,x	                sta 2,x
.8039	a9 bb		lda #$bb	                lda #>forth_words_start
.803b	95 03		sta $03,x	                sta 3,x
.803d	a9 a9		lda #$a9	                lda #<(user_words_end-forth_words_start)
.803f	95 00		sta $00,x	                sta 0,x
.8041	a9 01		lda #$01	                lda #>(user_words_end-forth_words_start)
.8043	95 01		sta $01,x	                sta 1,x
.8045	20 f1 90	jsr $90f1	                jsr xt_evaluate
.8048	80 0e		bra $8058	                bra _skip_turnkey
.804a					_turnkey:
.804a	78		sei		                sei
.804b	a2 76		ldx #$76	                ldx #dsp0-2
.804d	a5 7e		lda $7e		                lda turnkey
.804f	95 00		sta $00,x	                sta 0,x
.8051	a5 7f		lda $7f		                lda turnkey+1
.8053	95 01		sta $01,x	                sta 1,x
.8055	20 59 8f	jsr $8f59	                jsr xt_execute
.8058					_skip_turnkey:
.8058	9c 00 7c	stz $7c00	                stz hist_buff
.805b	9c 80 7c	stz $7c80	                stz hist_buff+$80
.805e	9c 00 7d	stz $7d00	                stz hist_buff+$100
.8061	9c 80 7d	stz $7d80	                stz hist_buff+$180
.8064	9c 00 7e	stz $7e00	                stz hist_buff+$200
.8067	9c 80 7e	stz $7e80	                stz hist_buff+$280
.806a	9c 00 7f	stz $7f00	                stz hist_buff+$300
.806d	9c 80 7f	stz $7f80	                stz hist_buff+$380
.8070					xt_abort:
.8070	a2 78		ldx #$78	                ldx #dsp0
.8072					xt_quit:
.8072	8a		txa		                txa             ; Save the DSP that we just defined
.8073	a2 ff		ldx #$ff	                ldx #rsp0
.8075	9a		txs		                txs
.8076	aa		tax		                tax             ; Restore the DSP. Dude, seriously.
.8077	64 0e		stz $0e		                stz ip
.8079	64 0f		stz $0f		                stz ip+1
.807b	64 06		stz $06		                stz insrc
.807d	64 07		stz $07		                stz insrc+1
.807f	a9 00		lda #$00	                lda #0
.8081	a0 00		ldy #$00	                ldy #blk_offset
.8083	91 1e		sta ($1e),y	                sta (up),y
.8085	c8		iny		                iny
.8086	91 1e		sta ($1e),y	                sta (up),y
.8088	64 16		stz $16		                stz state
.808a	64 17		stz $17		                stz state+1
.808c					_get_line:
.808c	a9 00		lda #$00	                lda #<buffer0   ; input buffer, this is paranoid
.808e	85 08		sta $08		                sta cib
.8090	a9 02		lda #$02	                lda #>buffer0
.8092	85 09		sta $09		                sta cib+1
.8094	64 0a		stz $0a		                stz ciblen
.8096	64 0b		stz $0b		                stz ciblen+1
.8098	20 14 9b	jsr $9b14	                jsr xt_refill           ; ( -- f )
.809b	b5 00		lda $00,x	                lda 0,x
.809d	d0 05		bne $80a4	                bne _success
.809f	a9 06		lda #$06	                lda #err_refill
.80a1	4c f7 d8	jmp $d8f7	                jmp error
.80a4					_success:
.80a4	e8		inx		                inx                     ; drop
.80a5	e8		inx		                inx
.80a6	20 49 d8	jsr $d849	                jsr interpret
.80a9	e0 78		cpx #$78	                cpx #dsp0
.80ab	f0 05		beq $80b2	                beq _stack_ok
.80ad	90 03		bcc $80b2	                bcc _stack_ok           ; DSP must always be smaller than DSP0
.80af	4c f5 d8	jmp $d8f5	                jmp underflow_error
.80b2					_stack_ok:
.80b2	a5 16		lda $16		                lda state
.80b4	f0 02		beq $80b8	                beq _print
.80b6	a9 01		lda #$01	                lda #1                  ; number for "compile" string
.80b8					_print:
.80b8	20 48 d9	jsr $d948	                jsr print_string
.80bb	80 cf		bra $808c	                bra _get_line
.80bd					z_cold:
.80bd					z_abort:
.80bd					z_quit:
.80bd					cold_zp_table:
>80bd	00 08				        .word cp0+256+1024      ; cp moved to make room for user vars and
>80bf	07 bd				        .word dictionary_start  ; dp
>80c1	00 00				        .word 0                 ; workword
>80c3	00 00				        .word 0                 ; insrc (SOURCE-ID is 0 for keyboard)
>80c5	00 02				        .word buffer0           ; cib
>80c7	00 00				        .word 0                 ; ciblen
>80c9	00 00				        .word 0                 ; toin
>80cb	00 00				        .word 0                 ; ip
>80cd	27 f0				        .word kernel_putc       ; output
>80cf	21 f0				        .word kernel_getc       ; input
>80d1	00 00				        .word 0                 ; havekey
>80d3	00 00				        .word 0                 ; state (0 = interpret)
>80d5	0a 00				        .word 10                ; base
>80d7	14 00				        .word 20                ; nc-limit
>80d9	00 00				        .word 0                 ; uf_strip (off by default)
>80db	00 03				        .word cp0               ; up (user vars put right at beginning of
>80dd	00 00				        .word 0                 ; status
.80df					cold_zp_table_end:
.80df					cold_user_table:
>80df	00 00				        .word 0                         ;  0 BLK
>80e1	00 00				        .word 0                         ;  2 SCR
>80e3	00				        .byte 0                         ;  4 CURRENT = FORTH-WORDLIST
>80e4	04				        .byte 4                         ;  5 #WORDLISTS (FORTH EDITOR ASSEMBLER ROOT)
>80e5	07 bd				        .word dictionary_start          ;  6 FORTH-WORDLIST
>80e7	4f cb				        .word editor_dictionary_start   ;  8 EDITOR-WORDLIST
>80e9	9f cb				        .word assembler_dictionary_start ; a ASSEMBLER-WORDLIST
>80eb	0e cb				        .word root_dictionary_start     ;  c ROOT-WORDLIST
>80ed	00 00 00 00 00 00 00 00		        .word 0,0,0,0,0,0,0,0           ;  e User wordlists
>80f5	00 00 00 00 00 00 00 00
>80fd	01				        .byte 1                         ; 1e #ORDER
>80fe	00 00 00 00 00 00 00 00		        .byte 0,0,0,0,0,0,0,0,0         ; 1f search-order
>8106	00
>8107	00 04				        .word cp0+256                   ; 28 Address of buffer (right after USER vars)
>8109	00 00				        .word 0                         ; 2a block in buffer
>810b	00 00				        .word 0                         ; 2c buffer status (not in use)
>810d	77 85				        .word xt_block_word_error       ; 2e block-read vector
>810f	77 85				        .word xt_block_word_error       ; 30 block-write vector
>8111	00 00				        .word 0                         ; 32 'COLD
.8113					cold_user_table_end:
.8113					xt_abort_quote:
.8113	20 6b 9d	jsr $9d6b	                jsr xt_s_quote          ; S"
.8116	a0 81		ldy #$81	                ldy #>abort_quote_runtime
.8118	a9 1e		lda #$1e	                lda #<abort_quote_runtime
.811a	20 84 d7	jsr $d784	                jsr cmpl_subroutine     ; may not be JMP as JSR/RTS
.811d	60		rts		z_abort_quote:  rts
.811e					abort_quote_runtime:
.811e	b5 04		lda $04,x	                lda 4,x
.8120	15 05		ora $05,x	                ora 5,x
.8122	f0 09		beq $812d	                beq _done       ; if FALSE, we're done
.8124	20 f0 a4	jsr $a4f0	                jsr xt_type
.8127	20 7f 89	jsr $897f	                jsr xt_cr
.812a	4c 70 80	jmp $8070	                jmp xt_abort    ; not JSR, so never come back
.812d					_done:
.812d	8a		txa		                txa
.812e	18		clc		                clc
.812f	69 06		adc #$06	                adc #6
.8131	aa		tax		                tax
.8132	60		rts		                rts
.8133					xt_abs:
.8133	20 e1 d8	jsr $d8e1	                jsr underflow_1
.8136	b5 01		lda $01,x	                lda 1,x
.8138	10 0d		bpl $8147	                bpl _done       ; positive number, easy money!
.813a	38		sec		                sec
.813b	a9 00		lda #$00	                lda #0
.813d	f5 00		sbc $00,x	                sbc 0,x         ; LSB
.813f	95 00		sta $00,x	                sta 0,x
.8141	a9 00		lda #$00	                lda #0          ; MSB
.8143	f5 01		sbc $01,x	                sbc 1,x
.8145	95 01		sta $01,x	                sta 1,x
.8147					_done:
.8147	60		rts		z_abs:          rts
.8148					xt_accept:
.8148	20 e6 d8	jsr $d8e6	                jsr underflow_2
.814b	b5 00		lda $00,x	                lda 0,x
.814d	15 01		ora $01,x	                ora 1,x
.814f	d0 09		bne $815a	                bne _not_zero
.8151	e8		inx		                inx
.8152	e8		inx		                inx
.8153	74 00		stz $00,x	                stz 0,x
.8155	74 01		stz $01,x	                stz 1,x
.8157	4c 26 82	jmp $8226	                jmp accept_done
.815a					_not_zero:
.815a	b5 00		lda $00,x	                lda 0,x         ; number of chars to get in tmp2 ...
.815c	85 26		sta $26		                sta tmp2
.815e	64 27		stz $27		                stz tmp2+1      ; ... but we only accept max 255 chars
.8160	b5 02		lda $02,x	                lda 2,x         ; address of buffer is NOS, to tmp1
.8162	85 24		sta $24		                sta tmp1
.8164	b5 03		lda $03,x	                lda 3,x
.8166	85 25		sta $25		                sta tmp1+1
.8168	e8		inx		                inx
.8169	e8		inx		                inx
.816a	a0 00		ldy #$00	                ldy #0
.816c	a5 20		lda $20		                lda status
.816e	29 f7		and #$f7	                and #$f7
.8170	1a		inc a		               ina
.8171	09 08		ora #$08	                ora #$08
.8173	85 20		sta $20		                sta status
.8175					accept_loop:
.8175	20 54 93	jsr $9354	                jsr key_a
.8178	c9 0a		cmp #$0a	                cmp #AscLF
.817a	f0 20		beq $819c	                beq _eol
.817c	c9 0d		cmp #$0d	                cmp #AscCR
.817e	f0 1c		beq $819c	                beq _eol
.8180	c9 08		cmp #$08	                cmp #AscBS
.8182	f0 22		beq $81a6	                beq _backspace
.8184	c9 7f		cmp #$7f	                cmp #AscDEL     ; (CTRL-h)
.8186	f0 1e		beq $81a6	                beq _backspace
.8188	c9 10		cmp #$10	                cmp #AscCP
.818a	f0 36		beq $81c2	                beq _ctrl_p
.818c	c9 0e		cmp #$0e	                cmp #AscCN
.818e	f0 44		beq $81d4	                beq _ctrl_n
.8190	91 24		sta ($24),y	                sta (tmp1),y
.8192	c8		iny		                iny
.8193	20 12 8e	jsr $8e12	                jsr emit_a
.8196	c4 26		cpy $26		                cpy tmp2        ; reached character limit?
.8198	d0 db		bne $8175	                bne accept_loop       ; fall through if buffer limit reached
.819a	80 03		bra $819f	                bra _buffer_full
.819c					_eol:
.819c	20 0b a1	jsr $a10b	                jsr xt_space    ; print final space
.819f					_buffer_full:
.819f	94 00		sty $00,x	                sty 0,x         ; Y contains number of chars accepted already
.81a1	74 01		stz $01,x	                stz 1,x         ; we only accept 256 chars
.81a3	4c 26 82	jmp $8226	                jmp accept_done
.81a6					_backspace:
.81a6	c0 00		cpy #$00	                cpy #0          ; buffer empty?
.81a8	d0 06		bne $81b0	                bne +
.81aa	a9 07		lda #$07	                lda #AscBELL    ; complain and don't delete beyond the start of line
.81ac	20 12 8e	jsr $8e12	                jsr emit_a
.81af	c8		iny		                iny
.81b0					+
.81b0	88		dey		                dey
.81b1	a9 08		lda #$08	                lda #AscBS      ; move back one
.81b3	20 12 8e	jsr $8e12	                jsr emit_a
.81b6	a9 20		lda #$20	                lda #AscSP      ; print a space (rubout)
.81b8	20 12 8e	jsr $8e12	                jsr emit_a
.81bb	a9 08		lda #$08	                lda #AscBS      ; move back over space
.81bd	20 12 8e	jsr $8e12	                jsr emit_a
.81c0	80 b3		bra $8175	                bra accept_loop
.81c2					_ctrl_p:
.81c2	a5 20		lda $20		                lda status
.81c4	29 07		and #$07	                and #7
.81c6	d0 08		bne $81d0	                bne _ctrl_p_dec
.81c8	a5 20		lda $20		                lda status
.81ca	09 07		ora #$07	                ora #7
.81cc	85 20		sta $20		                sta status
.81ce	80 11		bra $81e1	                bra _recall_history
.81d0					_ctrl_p_dec:
.81d0	c6 20		dec $20		                dec status
.81d2	80 0d		bra $81e1	                bra _recall_history
.81d4					_ctrl_n:
.81d4	a9 08		lda #$08	                lda #$8
.81d6	24 20		bit $20		                bit status
.81d8	d0 07		bne $81e1	                bne _recall_history
.81da	a5 20		lda $20		                lda status
.81dc	29 f7		and #$f7	                and #$f7
.81de	1a		inc a		               ina
.81df	85 20		sta $20		                sta status
.81e1					_recall_history:
.81e1	a9 08		lda #$08	                lda #%00001000
.81e3	14 20		trb $20		                trb status
.81e5	20 41 82	jsr $8241	                jsr accept_total_recall
.81e8	a9 0d		lda #$0d	                lda #AscCR
.81ea	20 12 8e	jsr $8e12	                jsr emit_a
.81ed					input_clear:
.81ed	c0 00		cpy #$00	                cpy #0
.81ef	f0 08		beq $81f9	                beq input_cleared
.81f1	a9 20		lda #$20	                lda #AscSP
.81f3	20 12 8e	jsr $8e12	                jsr emit_a
.81f6	88		dey		                dey
.81f7	80 f4		bra $81ed	                bra input_clear
.81f9					input_cleared:
.81f9	a9 0d		lda #$0d	                lda #AscCR
.81fb	20 12 8e	jsr $8e12	                jsr emit_a
.81fe	b1 28		lda ($28),y	                lda (tmp3),y
.8200	85 21		sta $21		                sta status+1
.8202	e6 28		inc $28		                inc tmp3
.8204	d0 02		bne $8208	                bne +           ; Increment the upper byte on carry.
.8206	e6 29		inc $29		                inc tmp3+1
.8208					+
.8208	a9 0d		lda #$0d	                lda #AscCR
.820a	20 12 8e	jsr $8e12	                jsr emit_a
.820d					_history_loop:
.820d	c4 21		cpy $21		                cpy status+1
.820f	d0 03		bne $8214	                bne +
.8211	4c 75 81	jmp $8175	                jmp accept_loop       ; Needs a long jump
.8214					+
.8214	c4 26		cpy $26		                cpy tmp2
.8216	f0 0a		beq $8222	                beq _hist_filled_buffer
.8218	b1 28		lda ($28),y	                lda (tmp3),y
.821a	91 24		sta ($24),y	                sta (tmp1),y
.821c	20 12 8e	jsr $8e12	                jsr emit_a
.821f	c8		iny		                iny
.8220	80 eb		bra $820d	                bra _history_loop
.8222					_hist_filled_buffer:
.8222	88		dey		                dey
.8223	4c 75 81	jmp $8175	                jmp accept_loop
.8226					accept_done:
.8226	20 41 82	jsr $8241	                jsr accept_total_recall
.8229	85 21		sta $21		                sta status+1
.822b	a0 00		ldy #$00	                ldy #0
.822d	91 28		sta ($28),y	                sta (tmp3),y
.822f	e6 28		inc $28		                inc tmp3
.8231	d0 02		bne $8235	                bne +           ; Increment the upper byte on carry.
.8233	e6 29		inc $29		                inc tmp3+1
.8235					+
.8235					_save_history_loop:
.8235	c4 21		cpy $21		                cpy status+1
.8237	f0 07		beq $8240	                beq _save_history_done
.8239	b1 24		lda ($24),y	                lda (tmp1),y
.823b	91 28		sta ($28),y	                sta (tmp3),y
.823d	c8		iny		                iny
.823e	80 f5		bra $8235	                bra _save_history_loop
.8240					_save_history_done:
.8240					z_accept:
.8240	60		rts		                rts
.8241					accept_total_recall:
.8241	a9 00		lda #$00	                lda #<hist_buff
.8243	85 28		sta $28		                sta tmp3
.8245	a9 7c		lda #$7c	                lda #>hist_buff
.8247	85 29		sta $29		                sta tmp3+1
.8249	a5 20		lda $20		                lda status
.824b	6a		ror a		                ror
.824c	29 03		and #$03	                and #3
.824e	18		clc		                clc
.824f	65 29		adc $29		                adc tmp3+1
.8251	85 29		sta $29		                sta tmp3+1
.8253	a5 20		lda $20		                lda status
.8255	6a		ror a		                ror             ; Rotate through carry into msb.
.8256	6a		ror a		                ror
.8257	29 80		and #$80	                and #$80
.8259	18		clc		                clc
.825a	65 28		adc $28		                adc tmp3
.825c	85 28		sta $28		                sta tmp3
.825e	90 02		bcc $8262	                bcc +           ; Increment the upper byte on carry.
.8260	e6 29		inc $29		                inc tmp3+1
.8262					+
.8262	98		tya		                tya
.8263	c9 80		cmp #$80	                cmp #$80
.8265	90 02		bcc $8269	                bcc +
.8267	a9 7f		lda #$7f	                lda #$7F
.8269					+
.8269	60		rts		                rts
.826a					xt_action_of:
.826a	a5 16		lda $16		                lda state
.826c	05 17		ora $17		                ora state+1
.826e	f0 0c		beq $827c	                beq _interpreting
.8270					_compiling:
.8270	20 ba 85	jsr $85ba	                jsr xt_bracket_tick
.8273	a0 8a		ldy #$8a	                ldy #>xt_defer_fetch
.8275	a9 fb		lda #$fb	                lda #<xt_defer_fetch
.8277	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.827a	80 06		bra $8282	                bra _done
.827c					_interpreting:
.827c	20 fe a1	jsr $a1fe	                jsr xt_tick
.827f	20 fb 8a	jsr $8afb	                jsr xt_defer_fetch
.8282					_done:
.8282	60		rts		z_action_of:           rts
.8283					xt_again:
.8283	20 e1 d8	jsr $d8e1	                jsr underflow_1
.8286	a0 00		ldy #$00	                ldy #0
.8288	a9 4c		lda #$4c	                lda #$4C        ; JMP
.828a	91 00		sta ($00),y	                sta (cp),y
.828c	c8		iny		                iny
.828d	b5 00		lda $00,x	                lda 0,x         ; LSB of address
.828f	91 00		sta ($00),y	                sta (cp),y
.8291	c8		iny		                iny
.8292	b5 01		lda $01,x	                lda 1,x         ; MSB of address
.8294	91 00		sta ($00),y	                sta (cp),y
.8296	c8		iny		                iny
.8297	98		tya		                tya
.8298	18		clc		                clc
.8299	65 00		adc $00		                adc cp
.829b	85 00		sta $00		                sta cp
.829d	90 02		bcc $82a1	                bcc _done
.829f	e6 01		inc $01		                inc cp+1
.82a1					_done:
.82a1	e8		inx		                inx
.82a2	e8		inx		                inx
.82a3	60		rts		z_again:        rts
.82a4					xt_align:
.82a4					xt_aligned:
.82a4					z_align:
.82a4	60		rts		z_aligned:      rts             ; stripped out during native compile
.82a5					xt_allot:
.82a5	20 e1 d8	jsr $d8e1	                jsr underflow_1
.82a8	b5 01		lda $01,x	                lda 1,x
.82aa	30 22		bmi $82ce	                bmi _release
.82ac	18		clc		                clc
.82ad	a5 00		lda $00		                lda cp
.82af	75 00		adc $00,x	                adc 0,x
.82b1	85 00		sta $00		                sta cp
.82b3	a5 01		lda $01		                lda cp+1
.82b5	75 01		adc $01,x	                adc 1,x
.82b7	85 01		sta $01		                sta cp+1
.82b9	a0 00		ldy #$00	                ldy #<cp_end
.82bb	c4 00		cpy $00		                cpy cp
.82bd	a9 7c		lda #$7c	                lda #>cp_end
.82bf	e5 01		sbc $01		                sbc cp+1
.82c1	b0 48		bcs $830b	                bcs _done               ; we're fine.
.82c3	84 00		sty $00		                sty cp                  ; still #<cp_end
.82c5	a9 7c		lda #$7c	                lda #>cp_end
.82c7	85 01		sta $01		                sta cp+1
.82c9	a9 00		lda #$00	                lda #err_allot
.82cb	4c f7 d8	jmp $d8f7	                jmp error
.82ce					_release:
.82ce	ca		dex		                dex
.82cf	ca		dex		                dex
.82d0	a5 00		lda $00		                lda cp
.82d2	95 00		sta $00,x	                sta 0,x
.82d4	a5 01		lda $01		                lda cp+1
.82d6	95 01		sta $01,x	                sta 1,x
.82d8	20 ff 99	jsr $99ff	                jsr xt_plus                     ; new CP is now TOS
.82db	ca		dex		                dex
.82dc	ca		dex		                dex                             ; new CP now NOS
.82dd	a9 00		lda #$00	                lda #<cp0
.82df	95 00		sta $00,x	                sta 0,x
.82e1	a9 03		lda #$03	                lda #>cp0
.82e3	95 01		sta $01,x	                sta 1,x                         ; CP0 is TOS
.82e5	20 08 d8	jsr $d808	                jsr compare_16bit               ; still ( CP CP0 )
.82e8	f0 17		beq $8301	                beq _nega_done
.82ea	30 15		bmi $8301	                bmi _nega_done
.82ec	a9 00		lda #$00	                lda #<cp0
.82ee	85 00		sta $00		                sta cp
.82f0	a9 03		lda #$03	                lda #>cp0
.82f2	85 01		sta $01		                sta cp+1
.82f4	a9 07		lda #$07	                lda #<dictionary_start
.82f6	85 02		sta $02		                sta dp
.82f8	a9 bd		lda #$bd	                lda #>dictionary_start
.82fa	85 03		sta $03		                sta dp+1
.82fc	a9 0a		lda #$0a	                lda #err_negallot
.82fe	4c f7 d8	jmp $d8f7	                jmp error
.8301					_nega_done:
.8301	b5 02		lda $02,x	                lda 2,x
.8303	85 00		sta $00		                sta cp
.8305	b5 03		lda $03,x	                lda 3,x
.8307	85 01		sta $01		                sta cp+1
.8309	e8		inx		                inx
.830a	e8		inx		                inx                     ; drop through to _done
.830b					_done:
.830b	e8		inx		                inx
.830c	e8		inx		                inx
.830d					z_allot:
.830d	60		rts		                rts
.830e					xt_allow_native:
.830e	20 23 d8	jsr $d823	                jsr current_to_dp
.8311	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8313	b1 02		lda ($02),y	                lda (dp),y
.8315	29 f5		and #$f5	                and #$ff-NN-AN  ; AN and NN flag is clear.
.8317	91 02		sta ($02),y	                sta (dp),y
.8319					z_allow_native:
.8319	60		rts		                rts
.831a					xt_also:
.831a	20 50 91	jsr $9150	                jsr xt_get_order
.831d	20 af 98	jsr $98af	                jsr xt_over
.8320	20 9b a1	jsr $a19b	                jsr xt_swap
.8323	20 39 98	jsr $9839	                jsr xt_one_plus
.8326	20 37 9d	jsr $9d37	                jsr xt_set_order
.8329	60		rts		z_also:         rts
.832a					xt_always_native:
.832a	20 23 d8	jsr $d823	                jsr current_to_dp
.832d	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.832f	b1 02		lda ($02),y	                lda (dp),y
.8331	09 02		ora #$02	                ora #AN         ; Make sure AN flag is set
.8333	29 f7		and #$f7	                and #$ff-NN     ; and NN flag is clear.
.8335	91 02		sta ($02),y	                sta (dp),y
.8337					z_always_native:
.8337	60		rts		                rts
.8338					xt_and:
.8338	20 e6 d8	jsr $d8e6	                jsr underflow_2
.833b	b5 00		lda $00,x	                lda 0,x
.833d	35 02		and $02,x	                and 2,x
.833f	95 02		sta $02,x	                sta 2,x
.8341	b5 01		lda $01,x	                lda 1,x
.8343	35 03		and $03,x	                and 3,x
.8345	95 03		sta $03,x	                sta 3,x
.8347	e8		inx		                inx
.8348	e8		inx		                inx
.8349	60		rts		z_and:          rts
.834a					xt_at_xy:
.834a	20 e6 d8	jsr $d8e6	                jsr underflow_2
.834d	a5 18		lda $18		                lda base
.834f	48		pha		                pha
.8350	a9 0a		lda #$0a	                lda #10
.8352	85 18		sta $18		                sta base
.8354	a9 1b		lda #$1b	                lda #AscESC
.8356	20 12 8e	jsr $8e12	                jsr emit_a
.8359	a9 5b		lda #$5b	                lda #$5B        ; ASCII for "["
.835b	20 12 8e	jsr $8e12	                jsr emit_a
.835e	20 39 98	jsr $9839	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.8361	20 4e d9	jsr $d94e	                jsr print_u
.8364	a9 3b		lda #$3b	                lda #$3B        ; ASCII for ";"
.8366	20 12 8e	jsr $8e12	                jsr emit_a
.8369	20 39 98	jsr $9839	                jsr xt_one_plus ; AT-XY is zero based, but ANSI is 1 based
.836c	20 4e d9	jsr $d94e	                jsr print_u
.836f	a9 48		lda #$48	                lda #'H'
.8371	20 12 8e	jsr $8e12	                jsr emit_a
.8374	68		pla		                pla
.8375	85 18		sta $18		                sta base
.8377	60		rts		z_at_xy:        rts
.8378					xt_backslash:
.8378	a0 00		ldy #$00	                ldy #blk_offset
.837a	b1 1e		lda ($1e),y	                lda (up),y
.837c	c8		iny		                iny
.837d	11 1e		ora ($1e),y	                ora (up),y
.837f	f0 19		beq $839a	                beq backslash_not_block
.8381	a5 0c		lda $0c		                lda toin
.8383	29 3f		and #$3f	                and #$3F
.8385	f0 1b		beq $83a2	                beq z_backslash
.8387	c9 01		cmp #$01	                cmp #$01
.8389	f0 17		beq $83a2	                beq z_backslash
.838b	a5 0c		lda $0c		                lda toin
.838d	29 c0		and #$c0	                and #$C0        ; Clear lower bits to move to beginning of line.
.838f	18		clc		                clc             ; Add $40 (64 decimal) to move to next line.
.8390	69 40		adc #$40	                adc #$40
.8392	85 0c		sta $0c		                sta toin
.8394	90 0c		bcc $83a2	                bcc z_backslash
.8396	e6 0d		inc $0d		                inc toin+1
.8398	80 08		bra $83a2	                bra z_backslash
.839a					backslash_not_block:
.839a	a5 0a		lda $0a		                lda ciblen
.839c	85 0c		sta $0c		                sta toin
.839e	a5 0b		lda $0b		                lda ciblen+1
.83a0	85 0d		sta $0d		                sta toin+1
.83a2	60		rts		z_backslash:    rts
.83a3					xt_base:
.83a3	ca		dex		                dex
.83a4	ca		dex		                dex
.83a5	a9 18		lda #$18	                lda #<base
.83a7	95 00		sta $00,x	                sta 0,x         ; LSB
.83a9	74 01		stz $01,x	                stz 1,x         ; MSB is always 0
.83ab	60		rts		z_base:         rts
.83ac					xt_begin:
.83ac	20 8e 91	jsr $918e	                jsr xt_here
.83af	60		rts		z_begin:        rts
.83b0					xt_bell:
.83b0	a9 07		lda #$07	                lda #7          ; ASCII value for BELl
.83b2	20 12 8e	jsr $8e12	                jsr emit_a
.83b5	60		rts		z_bell:         rts
.83b6					xt_bl:
.83b6	ca		dex		                dex
.83b7	ca		dex		                dex
.83b8	a9 20		lda #$20	                lda #AscSP
.83ba	95 00		sta $00,x	                sta 0,x
.83bc	74 01		stz $01,x	                stz 1,x
.83be	60		rts		z_bl:           rts
.83bf					xt_blk:
.83bf	ca		dex		                dex
.83c0	ca		dex		                dex
.83c1	18		clc		                clc
.83c2	a5 1e		lda $1e		                lda up
.83c4	69 00		adc #$00	                adc #blk_offset ; Add offset
.83c6	95 00		sta $00,x	                sta 0,x
.83c8	a5 1f		lda $1f		                lda up+1
.83ca	69 00		adc #$00	                adc #0          ; Adding carry
.83cc	95 01		sta $01,x	                sta 1,x
.83ce	60		rts		z_blk:          rts
.83cf					xt_blkbuffer:
.83cf	ca		dex		                dex
.83d0	ca		dex		                dex
.83d1	a0 28		ldy #$28	                ldy #blkbuffer_offset
.83d3	b1 1e		lda ($1e),y	                lda (up),y
.83d5	95 00		sta $00,x	                sta 0,x
.83d7	c8		iny		                iny             ; Move along to the next byte
.83d8	b1 1e		lda ($1e),y	                lda (up),y
.83da	95 01		sta $01,x	                sta 1,x
.83dc	60		rts		z_blkbuffer:    rts
.83dd					xt_block:
.83dd	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.83df	b1 1e		lda ($1e),y	                lda (up),y
.83e1	d5 00		cmp $00,x	                cmp 0,x
.83e3	d0 0f		bne $83f4	                bne _not_in_buffer
.83e5	c8		iny		                iny
.83e6	b1 1e		lda ($1e),y	                lda (up),y
.83e8	d5 01		cmp $01,x	                cmp 1,x
.83ea	d0 08		bne $83f4	                bne _not_in_buffer
.83ec	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83ee	b1 1e		lda ($1e),y	                lda (up),y
.83f0	29 01		and #$01	                and #1          ; Check the in-use flag (bit 0)
.83f2	d0 30		bne $8424	                bne _done       ; It's already in the buffer and in use.
.83f4					_not_in_buffer:
.83f4	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.83f6	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.83f8	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.83fa	d0 0c		bne $8408	                bne _buffer_available ; Unused or not dirty = available
.83fc	20 cf 83	jsr $83cf	                jsr xt_blkbuffer
.83ff	20 c1 85	jsr $85c1	                jsr xt_buffblocknum
.8402	20 9c 8f	jsr $8f9c	                jsr xt_fetch
.8405	20 7c 85	jsr $857c	                jsr xt_block_write
.8408					_buffer_available:
.8408	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.840a	b5 00		lda $00,x	                lda 0,x
.840c	91 1e		sta ($1e),y	                sta (up),y
.840e	c8		iny		                iny
.840f	b5 01		lda $01,x	                lda 1,x
.8411	91 1e		sta ($1e),y	                sta (up),y
.8413	20 cf 83	jsr $83cf	                jsr xt_blkbuffer
.8416	20 9b a1	jsr $a19b	                jsr xt_swap
.8419	20 59 85	jsr $8559	                jsr xt_block_read
.841c	a9 01		lda #$01	                lda #1
.841e	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.8420	91 1e		sta ($1e),y	                sta (up),y
.8422	ca		dex		                dex
.8423	ca		dex		                dex
.8424					_done:
.8424	a0 28		ldy #$28	                ldy #blkbuffer_offset
.8426	b1 1e		lda ($1e),y	                lda (up),y
.8428	95 00		sta $00,x	                sta 0,x
.842a	c8		iny		                iny
.842b	b1 1e		lda ($1e),y	                lda (up),y
.842d	95 01		sta $01,x	                sta 1,x
.842f	60		rts		z_block:        rts
.8430					xt_block_ramdrive_init:
.8430	20 e1 d8	jsr $d8e1	                jsr underflow_1
.8433	4c 4e 85	jmp $854e	                jmp _after_ramdrive_code
.8436					_ramdrive_code:
>8436	62 61 73 65 20 40 20 73		        .text "base @ swap decimal"
>843e	77 61 70 20 64 65 63 69 6d 61 6c
>8449	20 31 30 32 34 20 2a		        .text " 1024 *" ; ( Calculate how many bytes are needed for numblocks blocks )
>8450	20 64 75 70			        .text " dup"    ; ( Save a copy for formatting it at the end )
>8454	20 62 75 66 66 65 72 3a		        .text " buffer: ramdrive" ; ( Create ramdrive )
>845c	20 72 61 6d 64 72 69 76 65
>8465	20 3a 20 62 6c 6f 63 6b		        .text " : block-read-ramdrive"  ; ( addr u -- )
>846d	2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65
>847b	20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + swap 1024 move ;"
>8483	65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>8493	73 77 61 70 20 31 30 32 34 20 6d 6f 76 65 20 3b
>84a3	20 3a 20 62 6c 6f 63 6b		        .text " : block-write-ramdrive" ; ( addr u -- )
>84ab	2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65
>84ba	20 72 61 6d 64 72 69 76		        .text " ramdrive swap 1024 * + 1024 move ;"
>84c2	65 20 73 77 61 70 20 31 30 32 34 20 2a 20 2b 20
>84d2	31 30 32 34 20 6d 6f 76 65 20 3b
>84dd	20 27 20 62 6c 6f 63 6b		        .text " ' block-read-ramdrive block-read-vector !" ; ( Replace I/O vectors )
>84e5	2d 72 65 61 64 2d 72 61 6d 64 72 69 76 65 20 62
>84f5	6c 6f 63 6b 2d 72 65 61 64 2d 76 65 63 74 6f 72
>8505	20 21
>8507	20 27 20 62 6c 6f 63 6b		        .text " ' block-write-ramdrive block-write-vector !"
>850f	2d 77 72 69 74 65 2d 72 61 6d 64 72 69 76 65 20
>851f	62 6c 6f 63 6b 2d 77 72 69 74 65 2d 76 65 63 74
>852f	6f 72 20 21
>8533	20 72 61 6d 64 72 69 76		        .text " ramdrive swap blank base !"
>853b	65 20 73 77 61 70 20 62 6c 61 6e 6b 20 62 61 73
>854b	65 20 21
.854e					_after_ramdrive_code:
.854e	20 96 a0	jsr $a096	                jsr sliteral_runtime
>8551	36 84 18 01			.word _ramdrive_code, _after_ramdrive_code-_ramdrive_code
.8555	20 f1 90	jsr $90f1	                jsr xt_evaluate
.8558					z_block_ramdrive_init:
.8558	60		rts		                rts
.8559					xt_block_read:
.8559	a0 2e		ldy #$2e	                ldy #blockread_offset
.855b	b1 1e		lda ($1e),y	                lda (up),y
.855d	85 24		sta $24		                sta tmp1
.855f	c8		iny		                iny
.8560	b1 1e		lda ($1e),y	                lda (up),y
.8562	85 25		sta $25		                sta tmp1+1
.8564	6c 24 00	jmp ($0024)	                jmp (tmp1)
.8567					z_block_read:
.8567					xt_block_read_vector:
.8567	ca		dex		                dex
.8568	ca		dex		                dex
.8569	18		clc		                clc
.856a	a5 1e		lda $1e		                lda up
.856c	69 2e		adc #$2e	                adc #blockread_offset
.856e	95 00		sta $00,x	                sta 0,x
.8570	a5 1f		lda $1f		                lda up+1
.8572	69 00		adc #$00	                adc #0          ; Add carry
.8574	95 01		sta $01,x	                sta 1,x
.8576					z_block_read_vector:
.8576	60		rts		                rts
.8577					xt_block_word_error:
.8577	a9 0c		lda #$0c	                lda #err_blockwords
.8579	4c f7 d8	jmp $d8f7	                jmp error       ; no RTS needed
.857c					z_block_word_error:
.857c					xt_block_write:
.857c	a0 30		ldy #$30	                ldy #blockwrite_offset
.857e	b1 1e		lda ($1e),y	                lda (up),y
.8580	85 24		sta $24		                sta tmp1
.8582	c8		iny		                iny
.8583	b1 1e		lda ($1e),y	                lda (up),y
.8585	85 25		sta $25		                sta tmp1+1
.8587	6c 24 00	jmp ($0024)	                jmp (tmp1)
.858a					z_block_write:
.858a					xt_block_write_vector:
.858a	ca		dex		                dex
.858b	ca		dex		                dex
.858c	18		clc		                clc
.858d	a5 1e		lda $1e		                lda up
.858f	69 30		adc #$30	                adc #blockwrite_offset
.8591	95 00		sta $00,x	                sta 0,x
.8593	a5 1f		lda $1f		                lda up+1
.8595	69 00		adc #$00	                adc #0          ; Add carry
.8597	95 01		sta $01,x	                sta 1,x
.8599					z_block_write_vector:
.8599	60		rts		                rts
.859a					xt_bounds:
.859a	20 e6 d8	jsr $d8e6	                jsr underflow_2
.859d	18		clc		                clc
.859e	b5 00		lda $00,x	                lda 0,x                 ; LSB u
.85a0	b4 02		ldy $02,x	                ldy 2,x                 ; LSB addr
.85a2	75 02		adc $02,x	                adc 2,x
.85a4	95 02		sta $02,x	                sta 2,x                 ; LSB addr+u
.85a6	94 00		sty $00,x	                sty 0,x
.85a8	b5 01		lda $01,x	                lda 1,x                 ; MSB u
.85aa	b4 03		ldy $03,x	                ldy 3,x                 ; MSB addr
.85ac	75 03		adc $03,x	                adc 3,x
.85ae	95 03		sta $03,x	                sta 3,x                 ; MSB addr+u
.85b0	94 01		sty $01,x	                sty 1,x
.85b2	60		rts		z_bounds:       rts
.85b3					xt_bracket_char:
.85b3	20 4d 86	jsr $864d	                jsr xt_char
.85b6	20 a6 93	jsr $93a6	                jsr xt_literal
.85b9	60		rts		z_bracket_char: rts
.85ba					xt_bracket_tick:
.85ba	20 fe a1	jsr $a1fe	                jsr xt_tick
.85bd	20 a6 93	jsr $93a6	                jsr xt_literal
.85c0	60		rts		z_bracket_tick: rts
.85c1					xt_buffblocknum:
.85c1	ca		dex		                dex
.85c2	ca		dex		                dex
.85c3	18		clc		                clc
.85c4	a5 1e		lda $1e		                lda up
.85c6	69 2a		adc #$2a	                adc #buffblocknum_offset        ; Add offset
.85c8	95 00		sta $00,x	                sta 0,x
.85ca	a5 1f		lda $1f		                lda up+1
.85cc	69 00		adc #$00	                adc #0                          ; Adding carry
.85ce	95 01		sta $01,x	                sta 1,x
.85d0	60		rts		z_buffblocknum: rts
.85d1					xt_buffer:
.85d1	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.85d3	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.85d5	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.85d7	d0 0c		bne $85e5	                bne _buffer_available ; Unused or not dirty = available
.85d9	20 cf 83	jsr $83cf	                jsr xt_blkbuffer
.85dc	20 c1 85	jsr $85c1	                jsr xt_buffblocknum
.85df	20 9c 8f	jsr $8f9c	                jsr xt_fetch
.85e2	20 7c 85	jsr $857c	                jsr xt_block_write
.85e5					_buffer_available:
.85e5	a0 2a		ldy #$2a	                ldy #buffblocknum_offset
.85e7	b5 00		lda $00,x	                lda 0,x
.85e9	91 1e		sta ($1e),y	                sta (up),y
.85eb	c8		iny		                iny
.85ec	b5 01		lda $01,x	                lda 1,x
.85ee	91 1e		sta ($1e),y	                sta (up),y
.85f0	a9 01		lda #$01	                lda #1
.85f2	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.85f4	91 1e		sta ($1e),y	                sta (up),y
.85f6					_done:
.85f6	a0 28		ldy #$28	                ldy #blkbuffer_offset
.85f8	b1 1e		lda ($1e),y	                lda (up),y
.85fa	95 00		sta $00,x	                sta 0,x
.85fc	c8		iny		                iny
.85fd	b1 1e		lda ($1e),y	                lda (up),y
.85ff	95 01		sta $01,x	                sta 1,x
.8601	60		rts		z_buffer:       rts
.8602					xt_buffer_colon:
.8602	20 85 89	jsr $8985	                jsr xt_create
.8605	20 a5 82	jsr $82a5	                jsr xt_allot
.8608	60		rts		z_buffer_colon: rts
.8609					xt_buffstatus:
.8609	ca		dex		                dex
.860a	ca		dex		                dex
.860b	18		clc		                clc
.860c	a5 1e		lda $1e		                lda up
.860e	69 2c		adc #$2c	                adc #buffstatus_offset  ; Add offset
.8610	95 00		sta $00,x	                sta 0,x
.8612	a5 1f		lda $1f		                lda up+1
.8614	69 00		adc #$00	                adc #0                  ; Adding carry
.8616	95 01		sta $01,x	                sta 1,x
.8618	60		rts		z_buffstatus:   rts
.8619					xt_bye:
.8619	4c 2b f0	jmp $f02b	                jmp platform_bye
.861c					z_bye:
.861c					xt_c_comma:
.861c	20 e1 d8	jsr $d8e1	                jsr underflow_1
.861f	b5 00		lda $00,x	                lda 0,x
.8621	20 94 d7	jsr $d794	                jsr cmpl_a
.8624	e8		inx		                inx
.8625	e8		inx		                inx
.8626	60		rts		z_c_comma:      rts
.8627					xt_c_fetch:
.8627	20 e1 d8	jsr $d8e1	                jsr underflow_1
.862a	a1 00		lda ($00,x)	                lda (0,x)
.862c	95 00		sta $00,x	                sta 0,x
.862e	74 01		stz $01,x	                stz 1,x         ; Ignore LSB
.8630	60		rts		z_c_fetch:      rts
.8631					xt_c_store:
.8631	20 e6 d8	jsr $d8e6	                jsr underflow_2
.8634	b5 02		lda $02,x	                lda 2,x
.8636	81 00		sta ($00,x)	                sta (0,x)
.8638	e8		inx		                inx
.8639	e8		inx		                inx
.863a	e8		inx		                inx
.863b	e8		inx		                inx
.863c	60		rts		z_c_store:      rts
.863d					xt_cell_plus:
.863d	20 e1 d8	jsr $d8e1	                jsr underflow_1
.8640	f6 00		inc $00,x	                inc 0,x
.8642	d0 02		bne $8646	                bne +
.8644	f6 01		inc $01,x	                inc 1,x
.8646					+
.8646	f6 00		inc $00,x	                inc 0,x
.8648	d0 02		bne $864c	                bne _done
.864a	f6 01		inc $01,x	                inc 1,x
.864c					_done:
.864c	60		rts		z_cell_plus:    rts
.864d					xt_char:
.864d	20 fb 98	jsr $98fb	                jsr xt_parse_name
.8650	b5 00		lda $00,x	                lda 0,x
.8652	15 01		ora $01,x	                ora 1,x
.8654	d0 05		bne $865b	                bne _not_empty
.8656	a9 05		lda #$05	                lda #err_noname
.8658	4c f7 d8	jmp $d8f7	                jmp error
.865b					_not_empty:
.865b	e8		inx		                inx             ; drop number of characters, leave addr
.865c	e8		inx		                inx
.865d	a1 00		lda ($00,x)	                lda (0,x)       ; get character (equivalent to C@)
.865f	95 00		sta $00,x	                sta 0,x
.8661	74 01		stz $01,x	                stz 1,x         ; MSB is always zero
.8663	60		rts		z_char:         rts
.8664					xt_chars:
.8664	20 e1 d8	jsr $d8e1	                jsr underflow_1
.8667	60		rts		z_chars:        rts
.8668					xt_cleave:
.8668	20 e6 d8	jsr $d8e6	                jsr underflow_2
.866b	20 7f 95	jsr $957f	                jsr xt_minus_leading    ; -LEADING ( addr u )
.866e	20 7e 92	jsr $927e	                jsr xt_input_to_r       ; save old imput state
.8671	b5 00		lda $00,x	                lda 0,x         ; u is new ciblen
.8673	85 0a		sta $0a		                sta ciblen
.8675	b5 01		lda $01,x	                lda 1,x
.8677	85 0b		sta $0b		                sta ciblen+1
.8679	b5 02		lda $02,x	                lda 2,x         ; addr is new cib
.867b	85 08		sta $08		                sta cib
.867d	b5 03		lda $03,x	                lda 3,x
.867f	85 09		sta $09		                sta cib+1
.8681	64 0c		stz $0c		                stz toin        ; >IN pointer is zero
.8683	64 0d		stz $0d		                stz toin+1
.8685	20 fb 98	jsr $98fb	                jsr xt_parse_name       ; ( addr u addr-s u-s )
.8688	b5 00		lda $00,x	                lda 0,x
.868a	15 01		ora $01,x	                ora 1,x
.868c	f0 23		beq $86b1	                beq _done
.868e	b5 04		lda $04,x	                lda 4,x         ; LSB of original u
.8690	38		sec		                sec
.8691	f5 00		sbc $00,x	                sbc 0,x
.8693	95 04		sta $04,x	                sta 4,x
.8695	b5 05		lda $05,x	                lda 5,x         ; MSB of original u
.8697	f5 01		sbc $01,x	                sbc 1,x
.8699	95 05		sta $05,x	                sta 5,x
.869b	b5 06		lda $06,x	                lda 6,x         ; LSB of original addr
.869d	18		clc		                clc
.869e	75 00		adc $00,x	                adc 0,x
.86a0	95 06		sta $06,x	                sta 6,x
.86a2	b5 07		lda $07,x	                lda 7,x         ; MSB of original addr
.86a4	75 01		adc $01,x	                adc 1,x
.86a6	95 07		sta $07,x	                sta 7,x
.86a8	20 6b a4	jsr $a46b	                jsr xt_two_swap         ; ( addr-s u-s addr u )
.86ab	20 7f 95	jsr $957f	                jsr xt_minus_leading
.86ae	20 6b a4	jsr $a46b	                jsr xt_two_swap         ; ( addr u addr-s u-s )
.86b1					_done:
.86b1	20 bf 9a	jsr $9abf	                jsr xt_r_to_input
.86b4	60		rts		z_cleave:       rts
.86b5					xt_cmove:
.86b5	20 eb d8	jsr $d8eb	                jsr underflow_3
.86b8	b5 02		lda $02,x	                lda 2,x
.86ba	85 26		sta $26		                sta tmp2        ; use tmp2 because easier to remember
.86bc	b5 03		lda $03,x	                lda 3,x
.86be	85 27		sta $27		                sta tmp2+1
.86c0	b5 04		lda $04,x	                lda 4,x
.86c2	85 24		sta $24		                sta tmp1        ; use tmp1 because easier to remember
.86c4	b5 05		lda $05,x	                lda 5,x
.86c6	85 25		sta $25		                sta tmp1+1
.86c8	a0 00		ldy #$00	                ldy #0
.86ca	b5 01		lda $01,x	                lda 1,x         ; number of whole pages to move
.86cc	f0 0f		beq $86dd	                beq _dopartial
.86ce					_page:
.86ce	b1 24		lda ($24),y	                lda (tmp1),y
.86d0	91 26		sta ($26),y	                sta (tmp2),y
.86d2	c8		iny		                iny
.86d3	d0 f9		bne $86ce	                bne _page
.86d5	e6 25		inc $25		                inc tmp1+1
.86d7	e6 27		inc $27		                inc tmp2+1
.86d9	d6 01		dec $01,x	                dec 1,x
.86db	d0 f1		bne $86ce	                bne _page
.86dd					_dopartial:
.86dd	b5 00		lda $00,x	                lda 0,x         ; length of last page
.86df	f0 09		beq $86ea	                beq _done
.86e1					_partial:
.86e1	b1 24		lda ($24),y	                lda (tmp1),y
.86e3	91 26		sta ($26),y	                sta (tmp2),y
.86e5	c8		iny		                iny
.86e6	d6 00		dec $00,x	                dec 0,x
.86e8	d0 f7		bne $86e1	                bne _partial
.86ea					_done:
.86ea	8a		txa		                txa
.86eb	18		clc		                clc
.86ec	69 06		adc #$06	                adc #6
.86ee	aa		tax		                tax
.86ef	60		rts		z_cmove:        rts
.86f0					xt_cmove_up:
.86f0	20 eb d8	jsr $d8eb	                jsr underflow_3
.86f3	b5 02		lda $02,x	                lda 2,x
.86f5	85 26		sta $26		                sta tmp2        ; use tmp2 because easier to remember
.86f7	b5 03		lda $03,x	                lda 3,x
.86f9	18		clc		                clc
.86fa	75 01		adc $01,x	                adc 1,x
.86fc	85 27		sta $27		                sta tmp2+1      ; point to last page of destination
.86fe	b5 04		lda $04,x	                lda 4,x
.8700	85 24		sta $24		                sta tmp1        ; use tmp1 because easier to remember
.8702	b5 05		lda $05,x	                lda 5,x
.8704	18		clc		                clc
.8705	75 01		adc $01,x	                adc 1,x
.8707	85 25		sta $25		                sta tmp1+1      ; point to last page of source
.8709	f6 01		inc $01,x	                inc 1,x         ; allows us to use bne with dec 1,x below
.870b	b4 00		ldy $00,x	                ldy 0,x         ; length of last page
.870d	f0 0e		beq $871d	                beq _nopartial
.870f					_outerloop:
.870f	88		dey		                dey
.8710	f0 07		beq $8719	                beq _finishpage
.8712					_innerloop:
.8712	b1 24		lda ($24),y	                lda (tmp1),y
.8714	91 26		sta ($26),y	                sta (tmp2),y
.8716	88		dey		                dey
.8717	d0 f9		bne $8712	                bne _innerloop
.8719					_finishpage:
.8719	b2 24		lda ($24)	                lda (tmp1)      ; handle y = 0 separately
.871b	92 26		sta ($26)	                sta (tmp2)
.871d					_nopartial:
.871d	c6 25		dec $25		                dec tmp1+1      ; back up to previous pages
.871f	c6 27		dec $27		                dec tmp2+1
.8721	d6 01		dec $01,x	                dec 1,x
.8723	d0 ea		bne $870f	                bne _outerloop
.8725					_done:
.8725	8a		txa		                txa
.8726	18		clc		                clc
.8727	69 06		adc #$06	                adc #6
.8729	aa		tax		                tax
.872a	60		rts		z_cmove_up:     rts
.872b					xt_colon:
.872b	a5 16		lda $16		                lda state
.872d	05 17		ora $17		                ora state+1
.872f	f0 05		beq $8736	                beq +
.8731	a9 07		lda #$07	                lda #err_state
.8733	4c f7 d8	jmp $d8f7	                jmp error
.8736					+
.8736	c6 16		dec $16		                dec state
.8738	c6 17		dec $17		                dec state+1
.873a	a9 40		lda #$40	                lda #%01000000
.873c	04 20		tsb $20		                tsb status
.873e	20 23 d8	jsr $d823	                jsr current_to_dp
.8741	a5 03		lda $03		                lda dp+1            ; CREATE uses a lot of variables
.8743	48		pha		                pha
.8744	a5 02		lda $02		                lda dp
.8746	48		pha		                pha
.8747	a9 80		lda #$80	                lda #%10000000
.8749	04 20		tsb $20		                tsb status
.874b	20 85 89	jsr $8985	                jsr xt_create
.874e	20 23 d8	jsr $d823	                jsr current_to_dp   ; This might be able to be omitted
.8751	a5 02		lda $02		                lda dp
.8753	85 04		sta $04		                sta workword
.8755	a5 03		lda $03		                lda dp+1
.8757	85 05		sta $05		                sta workword+1
.8759	68		pla		                pla
.875a	85 02		sta $02		                sta dp
.875c	68		pla		                pla
.875d	85 03		sta $03		                sta dp+1
.875f	20 36 d8	jsr $d836	                jsr dp_to_current
.8762	a5 00		lda $00		                lda cp
.8764	38		sec		                sec
.8765	e9 03		sbc #$03	                sbc #3
.8767	85 00		sta $00		                sta cp
.8769	b0 02		bcs $876d	                bcs _done
.876b	c6 01		dec $01		                dec cp+1
.876d					_done:
.876d	60		rts		z_colon:        rts
.876e					xt_colon_noname:
.876e	a5 16		lda $16		                lda state
.8770	05 17		ora $17		                ora state+1
.8772	f0 05		beq $8779	                beq +
.8774	a9 07		lda #$07	                lda #err_state
.8776	4c f7 d8	jmp $d8f7	                jmp error
.8779					+
.8779	c6 16		dec $16		                dec state
.877b	c6 17		dec $17		                dec state+1
.877d	a9 40		lda #$40	                lda #%01000000
.877f	14 20		trb $20		                trb status
.8781	a5 00		lda $00		                lda cp
.8783	85 04		sta $04		                sta workword
.8785	a5 01		lda $01		                lda cp+1
.8787	85 05		sta $05		                sta workword+1
.8789					_done:
.8789	60		rts		z_colon_noname:        rts
.878a					xt_comma:
.878a	20 e1 d8	jsr $d8e1	                jsr underflow_1
.878d	b5 00		lda $00,x	                lda 0,x
.878f	92 00		sta ($00)	                sta (cp)
.8791	e6 00		inc $00		                inc cp
.8793	d0 02		bne $8797	                bne +
.8795	e6 01		inc $01		                inc cp+1
.8797					+
.8797	b5 01		lda $01,x	                lda 1,x
.8799	92 00		sta ($00)	                sta (cp)
.879b	e6 00		inc $00		                inc cp
.879d	d0 02		bne $87a1	                bne _done
.879f	e6 01		inc $01		                inc cp+1
.87a1					_done:
.87a1	e8		inx		                inx
.87a2	e8		inx		                inx
.87a3	60		rts		z_comma:        rts
.87a4					xt_compare:
.87a4	20 f0 d8	jsr $d8f0	                jsr underflow_4
.87a7	b5 02		lda $02,x	                lda 2,x
.87a9	85 26		sta $26		                sta tmp2
.87ab	b5 03		lda $03,x	                lda 3,x
.87ad	85 27		sta $27		                sta tmp2+1
.87af	b5 06		lda $06,x	                lda 6,x
.87b1	85 24		sta $24		                sta tmp1
.87b3	b5 07		lda $07,x	                lda 7,x
.87b5	85 25		sta $25		                sta tmp1+1
.87b7					_compare_loop:
.87b7	b5 04		lda $04,x	                lda 4,x
.87b9	15 05		ora $05,x	                ora 5,x
.87bb	f0 2c		beq $87e9	                beq _str1_done
.87bd	b5 00		lda $00,x	                lda 0,x
.87bf	15 01		ora $01,x	                ora 1,x
.87c1	f0 3a		beq $87fd	                beq _greater    ; Str2 empty first
.87c3					_check_letter:
.87c3	b2 24		lda ($24)	                lda (tmp1)
.87c5	d2 26		cmp ($26)	                cmp (tmp2)
.87c7	90 26		bcc $87ef	                bcc _less
.87c9	d0 32		bne $87fd	                bne _greater
.87cb					_next_letter:
.87cb	e6 24		inc $24		                inc tmp1
.87cd	d0 02		bne $87d1	                bne +
.87cf	e6 25		inc $25		                inc tmp1+1
.87d1					+
.87d1	e6 26		inc $26		                inc tmp2
.87d3	d0 02		bne $87d7	                bne +
.87d5	e6 27		inc $27		                inc tmp2+1
.87d7					+
.87d7	b5 04		lda $04,x	                lda 4,x
.87d9	d0 02		bne $87dd	                bne +
.87db	d6 05		dec $05,x	                dec 5,x
.87dd					+
.87dd	d6 04		dec $04,x	                dec 4,x
.87df	b5 00		lda $00,x	                lda 0,x
.87e1	d0 02		bne $87e5	                bne +
.87e3	d6 01		dec $01,x	                dec 1,x
.87e5					+
.87e5	d6 00		dec $00,x	                dec 0,x
.87e7	80 ce		bra $87b7	                bra _compare_loop
.87e9					_str1_done:
.87e9	b5 00		lda $00,x	                lda 0,x
.87eb	15 01		ora $01,x	                ora 1,x
.87ed	f0 08		beq $87f7	                beq _equal      ; Both out of letters
.87ef					_less:
.87ef	a9 ff		lda #$ff	                lda #$FF
.87f1	95 06		sta $06,x	                sta 6,x
.87f3	95 07		sta $07,x	                sta 7,x
.87f5	80 0c		bra $8803	                bra _done
.87f7					_equal:
.87f7	74 06		stz $06,x	                stz 6,x
.87f9	74 07		stz $07,x	                stz 7,x
.87fb	80 06		bra $8803	                bra _done
.87fd					_greater:
.87fd	a9 01		lda #$01	                lda #1
.87ff	95 06		sta $06,x	                sta 6,x
.8801	74 07		stz $07,x	                stz 7,x
.8803					_done:
.8803	8a		txa		                txa
.8804	18		clc		                clc
.8805	69 06		adc #$06	                adc #6
.8807	aa		tax		                tax
.8808	60		rts		z_compare:      rts
.8809					xt_compile_comma:
.8809	20 e1 d8	jsr $d8e1	                jsr underflow_1
.880c	b5 01		lda $01,x	                lda 1,x                 ; MSB
.880e	48		pha		                pha
.880f	b5 00		lda $00,x	                lda 0,x
.8811	48		pha		                pha                     ; LSB
.8812	20 94 92	jsr $9294	                jsr xt_int_to_name      ; ( xt -- nt )
.8815	b5 00		lda $00,x	                lda 0,x
.8817	15 01		ora $01,x	                ora 1,x
.8819	d0 03		bne $881e	                bne _check_nt
.881b	4c 06 89	jmp $8906	                jmp _compile_as_jump
.881e					_check_nt:
.881e	b5 00		lda $00,x	                lda 0,x
.8820	85 2c		sta $2c		                sta tmptos
.8822	b5 01		lda $01,x	                lda 1,x
.8824	85 2d		sta $2d		                sta tmptos+1
.8826	f6 00		inc $00,x	                inc 0,x
.8828	d0 02		bne $882c	                bne +
.882a	f6 01		inc $01,x	                inc 1,x                 ; ( nt -- nt+1 )
.882c					+
.882c	a1 00		lda ($00,x)	                lda (0,x)
.882e	85 28		sta $28		                sta tmp3                ; keep copy of status byte for NN
.8830	29 02		and #$02	                and #AN                 ; mask all but Always Native (AN) bit
.8832	f0 0d		beq $8841	                beq _compile_check
.8834	a5 2c		lda $2c		                lda tmptos
.8836	95 00		sta $00,x	                sta 0,x
.8838	a5 2d		lda $2d		                lda tmptos+1
.883a	95 01		sta $01,x	                sta 1,x
.883c	20 62 a7	jsr $a762	                jsr xt_wordsize         ; ( nt -- u )
.883f	80 27		bra $8868	                bra _compile_as_code
.8841					_compile_check:
.8841	a5 28		lda $28		                lda tmp3
.8843	29 08		and #$08	                and #NN
.8845	f0 03		beq $884a	                beq _check_size_limit
.8847	4c 06 89	jmp $8906	                jmp _compile_as_jump    ; too far for BRA
.884a					_check_size_limit:
.884a	a5 2c		lda $2c		                lda tmptos
.884c	95 00		sta $00,x	                sta 0,x
.884e	a5 2d		lda $2d		                lda tmptos+1
.8850	95 01		sta $01,x	                sta 1,x
.8852	20 62 a7	jsr $a762	                jsr xt_wordsize         ; ( nt -- u )
.8855	b5 01		lda $01,x	                lda 1,x
.8857	c5 1b		cmp $1b		                cmp nc_limit+1
.8859	90 0d		bcc $8868	                bcc _compile_as_code    ; user-defined limit MSB
.885b	d0 08		bne $8865	                bne _jumpto_compile_as_jump
.885d	b5 00		lda $00,x	                lda 0,x
.885f	c5 1a		cmp $1a		                cmp nc_limit            ; user-defined limit LSB
.8861	90 05		bcc $8868	                bcc _compile_as_code    ; Allow native compiling for less
.8863	f0 03		beq $8868	                beq _compile_as_code    ; than or equal to the limit.
.8865					_jumpto_compile_as_jump:
.8865	4c 06 89	jmp $8906	                jmp _compile_as_jump    ; too far for BRA
.8868					_compile_as_code:
.8868	ca		dex		                dex
.8869	ca		dex		                dex                     ; ( -- u ? )
.886a	ca		dex		                dex
.886b	ca		dex		                dex                     ; ( -- u ? ? )
.886c	b5 04		lda $04,x	                lda 4,x
.886e	95 00		sta $00,x	                sta 0,x                 ; LSB of u
.8870	b5 05		lda $05,x	                lda 5,x
.8872	95 01		sta $01,x	                sta 1,x                 ; ( -- u ? u )
.8874	68		pla		                pla
.8875	95 04		sta $04,x	                sta 4,x                 ; LSB of xt
.8877	68		pla		                pla
.8878	95 05		sta $05,x	                sta 5,x                 ; ( -- xt ? u )
.887a	a5 00		lda $00		                lda cp                  ; LSB of cp
.887c	95 02		sta $02,x	                sta 2,x
.887e	a5 01		lda $01		                lda cp+1
.8880	95 03		sta $03,x	                sta 3,x                 ; ( -- xt cp u )
.8882	a0 00		ldy #$00	                ldy #0
.8884					_strip_loop:
.8884	b9 f4 88	lda $88f4,y	                lda _strip_table,y      ; LSB of first word
.8887	d5 04		cmp $04,x	                cmp 4,x                 ; LSB of xt
.8889	d0 07		bne $8892	                bne _next_entry
.888b	b9 f5 88	lda $88f5,y	                lda _strip_table+1,y
.888e	d5 05		cmp $05,x	                cmp 5,x
.8890	f0 0c		beq $889e	                beq _found_entry
.8892					_next_entry:
.8892	b9 f4 88	lda $88f4,y	                lda _strip_table,y      ; pointing to LSB
.8895	19 f5 88	ora $88f5,y	                ora _strip_table+1,y    ; get MSB
.8898	f0 22		beq $88bc	                beq _underflow_strip    ; table done, let's get out of here
.889a	c8		iny		                iny
.889b	c8		iny		                iny
.889c	80 e6		bra $8884	                bra _strip_loop
.889e					_found_entry:
.889e	98		tya		                tya
.889f	4a		lsr a		                lsr
.88a0	a8		tay		                tay
.88a1	b9 00 89	lda $8900,y	                lda _strip_size,y
.88a4	85 2c		sta $2c		                sta tmptos              ; save a copy
.88a6	18		clc		                clc
.88a7	75 04		adc $04,x	                adc 4,x
.88a9	95 04		sta $04,x	                sta 4,x
.88ab	90 02		bcc $88af	                bcc+
.88ad	f6 05		inc $05,x	                inc 5,x                 ; we just care about the carry
.88af					+
.88af	06 2c		asl $2c		                asl tmptos
.88b1	38		sec		                sec
.88b2	b5 00		lda $00,x	                lda 0,x
.88b4	e5 2c		sbc $2c		                sbc tmptos
.88b6	95 00		sta $00,x	                sta 0,x
.88b8	b0 02		bcs $88bc	                bcs +
.88ba	d6 01		dec $01,x	                dec 1,x                 ; we just care about the borrow
.88bc					+
.88bc					_underflow_strip:
.88bc	a5 1c		lda $1c		                lda uf_strip
.88be	05 1d		ora $1d		                ora uf_strip+1
.88c0	f0 1c		beq $88de	                beq _specials_done
.88c2	a5 28		lda $28		                lda tmp3
.88c4	29 10		and #$10	                and #UF
.88c6	f0 16		beq $88de	                beq _specials_done
.88c8	18		clc		                clc
.88c9	b5 04		lda $04,x	                lda 4,x
.88cb	69 03		adc #$03	                adc #3
.88cd	95 04		sta $04,x	                sta 4,x
.88cf	90 02		bcc $88d3	                bcc +
.88d1	f6 05		inc $05,x	                inc 5,x                  ; we just care about the carry
.88d3					+
.88d3	38		sec		                sec
.88d4	b5 00		lda $00,x	                lda 0,x
.88d6	e9 03		sbc #$03	                sbc #3
.88d8	95 00		sta $00,x	                sta 0,x
.88da	b0 02		bcs $88de	                bcs +
.88dc	d6 01		dec $01,x	                dec 1,x                  ; we just care about the borrow
.88de					+
.88de					_specials_done:
.88de	b5 01		lda $01,x	                lda 1,x                 ; MSB
.88e0	48		pha		                pha
.88e1	b5 00		lda $00,x	                lda 0,x                 ; LSB
.88e3	48		pha		                pha
.88e4	20 de 95	jsr $95de	                jsr xt_move
.88e7	18		clc		                clc
.88e8	68		pla		                pla                     ; LSB
.88e9	65 00		adc $00		                adc cp
.88eb	85 00		sta $00		                sta cp
.88ed	68		pla		                pla                     ; MSB
.88ee	65 01		adc $01		                adc cp+1
.88f0	85 01		sta $01		                sta cp+1
.88f2	80 2c		bra $8920	                bra _done
.88f4					_strip_table:
>88f4	ae 9a 99 9a 5d a3		                .word xt_r_from, xt_r_fetch, xt_to_r    ; R>, R@, >R
>88fa	8f a4 15 a4 00 00		                .word xt_two_to_r, xt_two_r_from, 0000  ; 2>R, 2R>, EOL
.8900					_strip_size:
>8900	04 04 04 06 06 00		                .byte 4, 4, 4, 6, 6, 0          ; R>, R@, >R, 2>R, 2R>, EOL
.8906					_compile_as_jump:
.8906	a9 20		lda #$20	                lda #$20
.8908	92 00		sta ($00)	                sta (cp)
.890a	a0 01		ldy #$01	                ldy #1
.890c	68		pla		                pla             ; LSB
.890d	91 00		sta ($00),y	                sta (cp),y
.890f	c8		iny		                iny
.8910	68		pla		                pla             ; MSB
.8911	91 00		sta ($00),y	                sta (cp),y
.8913	a9 03		lda #$03	                lda #3
.8915	18		clc		                clc
.8916	65 00		adc $00		                adc cp
.8918	85 00		sta $00		                sta cp
.891a	90 02		bcc $891e	                bcc +
.891c	e6 01		inc $01		                inc cp+1
.891e					+
.891e	e8		inx		                inx             ; drop xt
.891f	e8		inx		                inx
.8920					_done:
.8920					z_compile_comma:
.8920	60		rts		                rts
.8921					xt_compile_only:
.8921	20 23 d8	jsr $d823	                jsr current_to_dp
.8924	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.8926	b1 02		lda ($02),y	                lda (dp),y
.8928	09 01		ora #$01	                ora #CO        ; make sure bit 7 is set
.892a	91 02		sta ($02),y	                sta (dp),y
.892c	60		rts		z_compile_only: rts
.892d					xt_value:
.892d					xt_constant:
.892d	20 e1 d8	jsr $d8e1	                jsr underflow_1
.8930	20 85 89	jsr $8985	                jsr xt_create
.8933	38		sec		                sec
.8934	a5 00		lda $00		                lda cp
.8936	e9 02		sbc #$02	                sbc #2
.8938	85 24		sta $24		                sta tmp1
.893a	a5 01		lda $01		                lda cp+1
.893c	e9 00		sbc #$00	                sbc #0
.893e	85 25		sta $25		                sta tmp1+1
.8940	a9 9d		lda #$9d	                lda #<doconst           ; LSB of DOCONST
.8942	92 24		sta ($24)	                sta (tmp1)
.8944	a0 01		ldy #$01	                ldy #1
.8946	a9 d7		lda #$d7	                lda #>doconst           ; MSB of DOCONST
.8948	91 24		sta ($24),y	                sta (tmp1),y
.894a	20 8a 87	jsr $878a	                jsr xt_comma            ; drop through to adjust_z
.894d					adjust_z:
.894d	20 57 93	jsr $9357	                jsr xt_latestnt         ; gives us ( -- nt )
.8950	b5 00		lda $00,x	                lda 0,x
.8952	85 24		sta $24		                sta tmp1
.8954	b5 01		lda $01,x	                lda 1,x
.8956	85 25		sta $25		                sta tmp1+1
.8958	a0 06		ldy #$06	                ldy #6
.895a	b1 24		lda ($24),y	                lda (tmp1),y
.895c	18		clc		                clc
.895d	69 02		adc #$02	                adc #2
.895f	91 24		sta ($24),y	                sta (tmp1),y
.8961	c8		iny		                iny
.8962	b1 24		lda ($24),y	                lda (tmp1),y
.8964	69 00		adc #$00	                adc #0                  ; only need carry
.8966	91 24		sta ($24),y	                sta (tmp1),y
.8968	e8		inx		                inx
.8969	e8		inx		                inx
.896a					z_value:
.896a	60		rts		z_constant:     rts
.896b					xt_count:
.896b	20 e1 d8	jsr $d8e1	                jsr underflow_1
.896e	a1 00		lda ($00,x)	                lda (0,x)       ; Get number of characters (255 max)
.8970	a8		tay		                tay
.8971	f6 00		inc $00,x	                inc 0,x         ; LSB
.8973	d0 02		bne $8977	                bne +
.8975	f6 01		inc $01,x	                inc 1,x         ; MSB
.8977	98		tya		+               tya
.8978	ca		dex		                dex
.8979	ca		dex		                dex
.897a	95 00		sta $00,x	                sta 0,x         ; LSB
.897c	74 01		stz $01,x	                stz 1,x         ; MSB, always zero
.897e	60		rts		z_count:        rts
.897f					xt_cr:
.897f	a9 0a		lda #$0a	                lda #AscLF
.8981	20 12 8e	jsr $8e12	                jsr emit_a
.8984	60		rts		z_cr:           rts
.8985					xt_create:
.8985	20 fb 98	jsr $98fb	                jsr xt_parse_name       ; ( addr u )
.8988	b5 00		lda $00,x	                lda 0,x
.898a	15 01		ora $01,x	                ora 1,x
.898c	d0 05		bne $8993	                bne _got_name
.898e	a9 05		lda #$05	                lda #err_noname
.8990	4c f7 d8	jmp $d8f7	                jmp error
.8993					_got_name:
.8993	74 01		stz $01,x	                stz 1,x
.8995	20 a5 a3	jsr $a3a5	                jsr xt_two_dup          ; ( addr u addr u )
.8998	20 f7 8f	jsr $8ff7	                jsr xt_find_name        ; ( addr u flag ) (non-zero nt as flag)
.899b	b5 00		lda $00,x	                lda 0,x
.899d	15 01		ora $01,x	                ora 1,x
.899f	f0 1e		beq $89bf	                beq _new_name           ; We haven't seen this one before.
.89a1	e8		inx		                inx                     ; Drop flag (nt) from find-name.
.89a2	e8		inx		                inx
.89a3	24 20		bit $20		                bit status
.89a5	10 08		bpl $89af	                bpl _redefined_name     ; Bit 7 is zero, so print the message.
.89a7	a9 80		lda #$80	                lda #$80                ; Set bit 7 to indicate dup
.89a9	05 20		ora $20		                ora status
.89ab	85 20		sta $20		                sta status
.89ad	80 18		bra $89c7	                bra _process_name
.89af					_redefined_name:
.89af	a9 02		lda #$02	                lda #str_redefined
.89b1	20 1d d9	jsr $d91d	                jsr print_string_no_lf
.89b4	20 a5 a3	jsr $a3a5	                jsr xt_two_dup           ; ( addr u addr u )
.89b7	20 f0 a4	jsr $a4f0	                jsr xt_type
.89ba	20 0b a1	jsr $a10b	                jsr xt_space
.89bd	80 08		bra $89c7	                bra _process_name
.89bf					_new_name:
.89bf	e8		inx		                inx                     ; Drop flag (0) from find-name.
.89c0	e8		inx		                inx
.89c1	a9 7f		lda #$7f	                lda #$7F                ; Clear bit 0 of status to indicate new word.
.89c3	25 20		and $20		                and status
.89c5	85 20		sta $20		                sta status
.89c7					_process_name:
.89c7	b5 00		lda $00,x	                lda 0,x
.89c9	85 26		sta $26		                sta tmp2                ; store length of string in tmp2
.89cb	a5 00		lda $00		                lda cp
.89cd	85 24		sta $24		                sta tmp1
.89cf	a5 01		lda $01		                lda cp+1
.89d1	85 25		sta $25		                sta tmp1+1
.89d3	b5 00		lda $00,x	                lda 0,x
.89d5	18		clc		                clc
.89d6	69 08		adc #$08	                adc #8
.89d8	85 28		sta $28		                sta tmp3                ; total header length
.89da	18		clc		                clc
.89db	69 03		adc #$03	                adc #3
.89dd	95 00		sta $00,x	                sta 0,x
.89df	74 01		stz $01,x	                stz 1,x         ; max header size is 255 chars
.89e1	20 a5 82	jsr $82a5	                jsr xt_allot    ; ( addr )
.89e4	20 23 d8	jsr $d823	                jsr current_to_dp
.89e7	a0 00		ldy #$00	                ldy #0
.89e9	a5 26		lda $26		                lda tmp2
.89eb	91 24		sta ($24),y	                sta (tmp1),y
.89ed	a9 08		lda #$08	                lda #NN
.89ef	09 20		ora #$20	                ora #HC
.89f1	c8		iny		                iny
.89f2	91 24		sta ($24),y	                sta (tmp1),y
.89f4	c8		iny		                iny
.89f5	a5 02		lda $02		                lda dp
.89f7	91 24		sta ($24),y	                sta (tmp1),y
.89f9	c8		iny		                iny
.89fa	a5 03		lda $03		                lda dp+1
.89fc	91 24		sta ($24),y	                sta (tmp1),y
.89fe	c8		iny		                iny
.89ff	a5 25		lda $25		                lda tmp1+1
.8a01	85 03		sta $03		                sta dp+1
.8a03	a5 24		lda $24		                lda tmp1
.8a05	85 02		sta $02		                sta dp
.8a07	18		clc		                clc
.8a08	65 28		adc $28		                adc tmp3        ; add total header length
.8a0a	91 24		sta ($24),y	                sta (tmp1),y
.8a0c	48		pha		                pha             ; we need this in the next step
.8a0d	c8		iny		                iny
.8a0e	a5 25		lda $25		                lda tmp1+1
.8a10	69 00		adc #$00	                adc #0          ; only need the carry
.8a12	91 24		sta ($24),y	                sta (tmp1),y
.8a14	c8		iny		                iny
.8a15	68		pla		                pla             ; LSB of "z_" address
.8a16	18		clc		                clc
.8a17	69 03		adc #$03	                adc #3
.8a19	91 24		sta ($24),y	                sta (tmp1),y
.8a1b	88		dey		                dey             ; get the MSB of xt back
.8a1c	b1 24		lda ($24),y	                lda (tmp1),y
.8a1e	69 00		adc #$00	                adc #0          ; only need the carry
.8a20	c8		iny		                iny
.8a21	c8		iny		                iny
.8a22	91 24		sta ($24),y	                sta (tmp1),y
.8a24	c8		iny		                iny
.8a25	b5 00		lda $00,x	                lda 0,x
.8a27	38		sec		                sec
.8a28	e9 08		sbc #$08	                sbc #8
.8a2a	85 2c		sta $2c		                sta tmptos
.8a2c	b5 01		lda $01,x	                lda 1,x
.8a2e	e9 00		sbc #$00	                sbc #0          ; only need carry
.8a30	85 2d		sta $2d		                sta tmptos+1
.8a32					_name_loop:
.8a32	b1 2c		lda ($2c),y	                lda (tmptos),y
.8a34	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.8a36	b0 07		bcs $8a3f	                bcs _store_name
.8a38	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.8a3a	90 03		bcc $8a3f	                bcc _store_name
.8a3c	18		clc		                clc
.8a3d	69 20		adc #$20	                adc #$20
.8a3f					_store_name:
.8a3f	91 24		sta ($24),y	                sta (tmp1),y
.8a41	c8		iny		                iny
.8a42	c6 26		dec $26		                dec tmp2
.8a44	d0 ec		bne $8a32	                bne _name_loop
.8a46	a9 20		lda #$20	                lda #$20        ; opcode of JSR
.8a48	91 24		sta ($24),y	                sta (tmp1),y
.8a4a	c8		iny		                iny
.8a4b	a9 e3		lda #$e3	                lda #<dovar
.8a4d	91 24		sta ($24),y	                sta (tmp1),y
.8a4f	c8		iny		                iny
.8a50	a9 d7		lda #$d7	                lda #>dovar
.8a52	91 24		sta ($24),y	                sta (tmp1),y
.8a54	20 36 d8	jsr $d836	                jsr dp_to_current
.8a57	e8		inx		                inx
.8a58	e8		inx		                inx
.8a59	60		rts		z_create:       rts
.8a5a					xt_d_minus:
.8a5a	20 f0 d8	jsr $d8f0	                jsr underflow_4 ; two double numbers
.8a5d	38		sec		                sec
.8a5e	b5 06		lda $06,x	                lda 6,x         ; LSB of lower word
.8a60	f5 02		sbc $02,x	                sbc 2,x
.8a62	95 06		sta $06,x	                sta 6,x
.8a64	b5 07		lda $07,x	                lda 7,x         ; MSB of lower word
.8a66	f5 03		sbc $03,x	                sbc 3,x
.8a68	95 07		sta $07,x	                sta 7,x
.8a6a	b5 04		lda $04,x	                lda 4,x         ; LSB of upper word
.8a6c	f5 00		sbc $00,x	                sbc 0,x
.8a6e	95 04		sta $04,x	                sta 4,x
.8a70	b5 05		lda $05,x	                lda 5,x         ; MSB of upper word
.8a72	f5 01		sbc $01,x	                sbc 1,x
.8a74	95 05		sta $05,x	                sta 5,x
.8a76	e8		inx		                inx
.8a77	e8		inx		                inx
.8a78	e8		inx		                inx
.8a79	e8		inx		                inx
.8a7a	60		rts		z_d_minus:      rts
.8a7b					xt_d_plus:
.8a7b	20 f0 d8	jsr $d8f0	                jsr underflow_4 ; two double numbers
.8a7e	18		clc		                clc
.8a7f	b5 02		lda $02,x	                lda 2,x         ; LSB of lower word
.8a81	75 06		adc $06,x	                adc 6,x
.8a83	95 06		sta $06,x	                sta 6,x
.8a85	b5 03		lda $03,x	                lda 3,x         ; MSB of lower word
.8a87	75 07		adc $07,x	                adc 7,x
.8a89	95 07		sta $07,x	                sta 7,x
.8a8b	b5 00		lda $00,x	                lda 0,x         ; LSB of upper word
.8a8d	75 04		adc $04,x	                adc 4,x
.8a8f	95 04		sta $04,x	                sta 4,x
.8a91	b5 01		lda $01,x	                lda 1,x         ; MSB of upper word
.8a93	75 05		adc $05,x	                adc 5,x
.8a95	95 05		sta $05,x	                sta 5,x
.8a97	e8		inx		                inx
.8a98	e8		inx		                inx
.8a99	e8		inx		                inx
.8a9a	e8		inx		                inx
.8a9b	60		rts		z_d_plus:       rts
.8a9c					xt_d_to_s:
.8a9c	20 e6 d8	jsr $d8e6	                jsr underflow_2
.8a9f	e8		inx		                inx
.8aa0	e8		inx		                inx
.8aa1	60		rts		z_d_to_s:       rts
.8aa2					xt_dabs:
.8aa2	20 e6 d8	jsr $d8e6	                jsr underflow_2 ; double number
.8aa5	b5 01		lda $01,x	                lda 1,x         ; MSB of high cell
.8aa7	10 17		bpl $8ac0	                bpl _done       ; positive, we get off light
.8aa9	a0 00		ldy #$00	                ldy #0
.8aab	38		sec		                sec
.8aac	98		tya		                tya
.8aad	f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8aaf	95 02		sta $02,x	                sta 2,x
.8ab1	98		tya		                tya
.8ab2	f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8ab4	95 03		sta $03,x	                sta 3,x
.8ab6	98		tya		                tya
.8ab7	f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8ab9	95 00		sta $00,x	                sta 0,x
.8abb	98		tya		                tya
.8abc	f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8abe	95 01		sta $01,x	                sta 1,x
.8ac0					_done:
.8ac0	60		rts		z_dabs:         rts
.8ac1					xt_decimal:
.8ac1	a9 0a		lda #$0a	                lda #10
.8ac3	85 18		sta $18		                sta base
.8ac5	64 19		stz $19		                stz base+1              ; paranoid
.8ac7	60		rts		z_decimal:      rts
.8ac8					xt_defer:
.8ac8	20 85 89	jsr $8985	                jsr xt_create
.8acb	a5 00		lda $00		                lda cp          ; LSB
.8acd	38		sec		                sec
.8ace	e9 02		sbc #$02	                sbc #2
.8ad0	85 24		sta $24		                sta tmp1
.8ad2	a5 01		lda $01		                lda cp+1        ; MSB
.8ad4	e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.8ad6	85 25		sta $25		                sta tmp1+1
.8ad8	a0 00		ldy #$00	                ldy #0
.8ada	a9 b1		lda #$b1	                lda #<dodefer   ; LSB
.8adc	91 24		sta ($24),y	                sta (tmp1),y
.8ade	c8		iny		                iny
.8adf	a9 d7		lda #$d7	                lda #>dodefer   ; MSB
.8ae1	91 24		sta ($24),y	                sta (tmp1),y
.8ae3	a9 c5		lda #$c5	                lda #<defer_error
.8ae5	92 00		sta ($00)	                sta (cp)
.8ae7	e6 00		inc $00		                inc cp
.8ae9	d0 02		bne $8aed	                bne +
.8aeb	e6 01		inc $01		                inc cp+1
.8aed					+
.8aed	a9 d7		lda #$d7	                lda #>defer_error
.8aef	92 00		sta ($00)	                sta (cp)
.8af1	e6 00		inc $00		                inc cp
.8af3	d0 02		bne $8af7	                bne +
.8af5	e6 01		inc $01		                inc cp+1
.8af7					+
.8af7	20 4d 89	jsr $894d	                jsr adjust_z    ; adjust header to correct length
.8afa	60		rts		z_defer:        rts
.8afb					xt_defer_fetch:
.8afb	20 7a a2	jsr $a27a	                jsr xt_to_body
.8afe	20 9c 8f	jsr $8f9c	                jsr xt_fetch
.8b01	60		rts		z_defer_fetch:  rts
.8b02					xt_defer_store:
.8b02	20 7a a2	jsr $a27a	                jsr xt_to_body
.8b05	20 7a a1	jsr $a17a	                jsr xt_store
.8b08	60		rts		z_defer_store:  rts
.8b09					xt_definitions:
.8b09	a0 1f		ldy #$1f	                ldy #search_order_offset    ; Transfer byte variable
.8b0b	b1 1e		lda ($1e),y	                lda (up),y                  ; SEARCH_ORDER[0] to
.8b0d	a0 04		ldy #$04	                ldy #current_offset         ; byte variable CURRENT.
.8b0f	91 1e		sta ($1e),y	                sta (up),y
.8b11	60		rts		z_definitions:  rts
.8b12					xt_depth:
.8b12	a9 78		lda #$78	                lda #dsp0
.8b14	86 2a		stx $2a		                stx tmpdsp
.8b16	38		sec		                sec
.8b17	e5 2a		sbc $2a		                sbc tmpdsp
.8b19	4a		lsr a		                lsr
.8b1a	ca		dex		                dex
.8b1b	ca		dex		                dex
.8b1c	95 00		sta $00,x	                sta 0,x
.8b1e	74 01		stz $01,x	                stz 1,x
.8b20	60		rts		z_depth:        rts
.8b21					xt_digit_question:
.8b21	20 e1 d8	jsr $d8e1	                jsr underflow_1
.8b24	ca		dex		                dex
.8b25	ca		dex		                dex
.8b26	74 00		stz $00,x	                stz 0,x                 ; default flag is failure
.8b28	74 01		stz $01,x	                stz 1,x
.8b2a	74 03		stz $03,x	                stz 3,x                 ; paranoid
.8b2c	b5 02		lda $02,x	                lda 2,x
.8b2e	c9 30		cmp #$30	                cmp #'0'
.8b30	90 23		bcc $8b55	                bcc _done               ; failure flag already set
.8b32	c9 3a		cmp #$3a	                cmp #'9'+1               ; this is actually ":"
.8b34	90 12		bcc $8b48	                bcc _checkbase
.8b36	c9 41		cmp #$41	                cmp #'A'
.8b38	90 1b		bcc $8b55	                bcc _done               ; failure flag is already set
.8b3a	c9 61		cmp #$61	                cmp #'a'
.8b3c	90 07		bcc $8b45	                bcc _case_done          ; not lower case, too low
.8b3e	c9 7b		cmp #$7b	                cmp #'z'+1
.8b40	b0 03		bcs $8b45	                bcs _case_done          ; not lower case, too high
.8b42	18		clc		                clc                     ; just right
.8b43	69 e0		adc #$e0	                adc #$e0                ; offset to upper case (wraps)
.8b45					_case_done:
.8b45	38		sec		                sec
.8b46	e9 07		sbc #$07	                sbc #7                  ; fall through to _checkbase
.8b48					_checkbase:
.8b48	38		sec		                sec
.8b49	e9 30		sbc #$30	                sbc #'0'                 ; this is also the conversion step
.8b4b	c5 18		cmp $18		                cmp base
.8b4d	b0 06		bcs $8b55	                bcs _done               ; already have false flag
.8b4f	95 02		sta $02,x	                sta 2,x                 ; put number in NOS
.8b51	d6 00		dec $00,x	                dec 0,x                 ; set success flag
.8b53	d6 01		dec $01,x	                dec 1,x
.8b55					_done:
.8b55					z_digit_question:
.8b55	60		rts		                rts
.8b56					xt_disasm:
.8b56	20 e6 d8	jsr $d8e6	                jsr underflow_2
.8b59	20 c4 ac	jsr $acc4	                jsr disassembler
.8b5c	60		rts		z_disasm:       rts
.8b5d					xt_dnegate:
.8b5d	20 e6 d8	jsr $d8e6	                jsr underflow_2 ; double number
.8b60	a0 00		ldy #$00	     		ldy #0
.8b62	38		sec		                sec
.8b63	98		tya		                tya
.8b64	f5 02		sbc $02,x	                sbc 2,x         ; LSB of low cell
.8b66	95 02		sta $02,x	                sta 2,x
.8b68	98		tya		                tya
.8b69	f5 03		sbc $03,x	                sbc 3,x         ; MSB of low cell
.8b6b	95 03		sta $03,x	                sta 3,x
.8b6d	98		tya		                tya
.8b6e	f5 00		sbc $00,x	                sbc 0,x         ; LSB of high cell
.8b70	95 00		sta $00,x	                sta 0,x
.8b72	98		tya		                tya
.8b73	f5 01		sbc $01,x	                sbc 1,x         ; MSB of high cell
.8b75	95 01		sta $01,x	                sta 1,x
.8b77	60		rts		z_dnegate:      rts
.8b78					xt_question_do:
.8b78	a9 ff		lda #$ff	                lda #$ff                ; -1 is ?DO, jump to common code
.8b7a	85 24		sta $24		                sta tmp1
.8b7c	80 02		bra $8b80	                bra do_common           ; skip flag for DO
.8b7e					xt_do:
.8b7e	64 24		stz $24		                stz tmp1                ; 0 is DO, drop through to DO_COMMON
.8b80					do_common:
.8b80	ca		dex		                dex
.8b81	ca		dex		                dex
.8b82	a5 00		lda $00		                lda cp
.8b84	95 00		sta $00,x	                sta 0,x                 ; LSB
.8b86	a5 01		lda $01		                lda cp+1
.8b88	95 01		sta $01,x	                sta 1,x                 ; MSB   ( limit start here )
.8b8a	a9 05		lda #$05	                lda #5                  ; we don't really care about the value,
.8b8c	a8		tay		                tay                     ; so we use 5 to be tricky
.8b8d					_loop:
.8b8d	91 00		sta ($00),y	                sta (CP),y
.8b8f	88		dey		                dey
.8b90	10 fb		bpl $8b8d	                bpl _loop
.8b92	1a		inc a		                ina             ; we used 5 as a dummy value, this is why
.8b93	18		clc		                clc
.8b94	65 00		adc $00		                adc CP
.8b96	85 00		sta $00		                sta CP
.8b98	90 02		bcc $8b9c	                bcc +
.8b9a	e6 01		inc $01		                inc CP+1
.8b9c					+
.8b9c	a5 24		lda $24		                lda tmp1
.8b9e	f0 17		beq $8bb7	                beq _compile_do
.8ba0	a0 14		ldy #$14	                ldy #question_do_runtime_end-question_do_runtime
.8ba2	5a		phy		                phy             ; save counter to calculate new CP
.8ba3					-
.8ba3	b9 fd 8b	lda $8bfd,y	                lda question_do_runtime,y
.8ba6	91 00		sta ($00),y	                sta (cp),y
.8ba8	88		dey		                dey
.8ba9	10 f8		bpl $8ba3	                bpl -
.8bab	68		pla		                pla             ; retrieve counter
.8bac	18		clc		                clc
.8bad	65 00		adc $00		                adc cp
.8baf	85 00		sta $00		                sta cp
.8bb1	a5 01		lda $01		                lda cp+1
.8bb3	69 00		adc #$00	                adc #0          ; only care about carry
.8bb5	85 01		sta $01		                sta cp+1        ; fall through to _compile_do
.8bb7					_compile_do:
.8bb7	a0 24		ldy #$24	                ldy #do_runtime_end-do_runtime  ; counter
.8bb9	5a		phy		                phy             ; save counter to calculate new CP
.8bba					-
.8bba	b9 d9 8b	lda $8bd9,y	                lda do_runtime,y
.8bbd	91 00		sta ($00),y	                sta (cp),y
.8bbf	88		dey		                dey
.8bc0	10 f8		bpl $8bba	                bpl -
.8bc2	68		pla		                pla             ; retrieve counter
.8bc3	18		clc		                clc
.8bc4	65 00		adc $00		                adc cp
.8bc6	85 00		sta $00		                sta cp
.8bc8	a5 01		lda $01		                lda cp+1
.8bca	69 00		adc #$00	                adc #0          ; only care about carry
.8bcc	85 01		sta $01		                sta cp+1
.8bce	ca		dex		                dex
.8bcf	ca		dex		                dex
.8bd0	a5 00		lda $00		                lda CP          ; LSB
.8bd2	95 00		sta $00,x	                sta 0,x
.8bd4	a5 01		lda $01		                lda CP+1        ; MSB
.8bd6	95 01		sta $01,x	                sta 1,x
.8bd8					z_question_do:
.8bd8	60		rts		z_do:           rts
.8bd9					do_runtime:
.8bd9	38		sec		                sec
.8bda	a9 00		lda #$00	                lda #0
.8bdc	f5 02		sbc $02,x	                sbc 2,x         ; LSB of limit
.8bde	95 02		sta $02,x	                sta 2,x         ; save FUFA for later use
.8be0	a9 80		lda #$80	                lda #$80
.8be2	f5 03		sbc $03,x	                sbc 3,x         ; MSB of limit
.8be4	95 03		sta $03,x	                sta 3,x         ; save FUFA for later use
.8be6	48		pha		                pha             ; FUFA replaces limit on R stack
.8be7	b5 02		lda $02,x	                lda 2,x         ; LSB of limit
.8be9	48		pha		                pha
.8bea	18		clc		                clc
.8beb	b5 00		lda $00,x	                lda 0,x         ; LSB of original index
.8bed	75 02		adc $02,x	                adc 2,x         ; add LSB of FUFA
.8bef	95 00		sta $00,x	                sta 0,x
.8bf1	b5 01		lda $01,x	                lda 1,x         ; MSB of orginal index
.8bf3	75 03		adc $03,x	                adc 3,x         ; add MSB of FUFA
.8bf5	48		pha		                pha
.8bf6	b5 00		lda $00,x	                lda 0,x         ; LSB of index
.8bf8	48		pha		                pha
.8bf9	e8		inx		                inx
.8bfa	e8		inx		                inx
.8bfb	e8		inx		                inx
.8bfc	e8		inx		                inx             ; no RTS because this is copied into code
.8bfd					do_runtime_end:
.8bfd					question_do_runtime:
.8bfd	20 a5 a3	jsr $a3a5	                jsr xt_two_dup          ; ( n1 n2 n1 n2 )
.8c00	20 ea 8e	jsr $8eea	                jsr xt_equal            ; ( -- n1 n2 f )
.8c03	b5 00		lda $00,x	                lda 0,x
.8c05	15 01		ora $01,x	                ora 1,x
.8c07	f0 06		beq $8c0f	                beq _do_do
.8c09	8a		txa		                txa
.8c0a	18		clc		                clc
.8c0b	69 06		adc #$06	                adc #6
.8c0d	aa		tax		                tax
.8c0e	60		rts		                rts
.8c0f					_do_do:
.8c0f	e8		inx		                inx             ; clear flag from EQUAL off stack
.8c10	e8		inx		                inx             ; no RTS because this is copied into code
.8c11					question_do_runtime_end:
.8c11					xt_does:
.8c11	a0 8c		ldy #$8c	                ldy #>does_runtime
.8c13	a9 20		lda #$20	                lda #<does_runtime
.8c15	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.8c18	a0 d7		ldy #$d7	                ldy #>dodoes
.8c1a	a9 ca		lda #$ca	                lda #<dodoes
.8c1c	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.8c1f	60		rts		z_does:         rts
.8c20					does_runtime:
.8c20	7a		ply		                ply             ; LSB
.8c21	68		pla		                pla             ; MSB
.8c22	c8		iny		                iny
.8c23	d0 01		bne $8c26	                bne +
.8c25	1a		inc a		                ina
.8c26					+
.8c26	84 24		sty $24		                sty tmp1
.8c28	85 25		sta $25		                sta tmp1+1
.8c2a	20 23 d8	jsr $d823	                jsr current_to_dp   ; Grab the DP from the CURRENT wordlist.
.8c2d	a5 02		lda $02		                lda dp
.8c2f	18		clc		                clc
.8c30	69 04		adc #$04	                adc #4
.8c32	85 26		sta $26		                sta tmp2
.8c34	a5 03		lda $03		                lda dp+1
.8c36	69 00		adc #$00	                adc #0          ; we only care about the carry
.8c38	85 27		sta $27		                sta tmp2+1
.8c3a	b2 26		lda ($26)	                lda (tmp2)
.8c3c	18		clc		                clc
.8c3d	69 01		adc #$01	                adc #1
.8c3f	85 28		sta $28		                sta tmp3
.8c41	a0 01		ldy #$01	                ldy #1
.8c43	b1 26		lda ($26),y	                lda (tmp2),y
.8c45	69 00		adc #$00	                adc #0          ; we only care about the carry
.8c47	85 29		sta $29		                sta tmp3+1
.8c49	a5 24		lda $24		                lda tmp1        ; LSB
.8c4b	92 28		sta ($28)	                sta (tmp3)
.8c4d	a5 25		lda $25		                lda tmp1+1
.8c4f	91 28		sta ($28),y	                sta (tmp3),y    ; Y is still 1
.8c51	60		rts		                rts
.8c52					xt_dot:
.8c52	20 e1 d8	jsr $d8e1	                jsr underflow_1
.8c55	20 cb 8d	jsr $8dcb	                jsr xt_dup                      ; ( n n )
.8c58	20 33 81	jsr $8133	                jsr xt_abs                      ; ( n u )
.8c5b	20 95 a7	jsr $a795	                jsr xt_zero                     ; ( n u 0 )
.8c5e	20 76 93	jsr $9376	                jsr xt_less_number_sign         ; ( n u 0 )
.8c61	20 fa 97	jsr $97fa	                jsr xt_number_sign_s            ; ( n ud )
.8c64	20 73 9b	jsr $9b73	                jsr xt_rot                      ; ( ud n )
.8c67	20 d4 9f	jsr $9fd4	                jsr xt_sign                     ; ( ud )
.8c6a	20 d8 97	jsr $97d8	                jsr xt_number_sign_greater      ; ( addr u )
.8c6d	20 f0 a4	jsr $a4f0	                jsr xt_type
.8c70	20 0b a1	jsr $a10b	                jsr xt_space
.8c73	60		rts		z_dot:          rts
.8c74					xt_dot_paren:
.8c74	ca		dex		                dex
.8c75	ca		dex		                dex
.8c76	a9 29		lda #$29	                lda #41     ; Right parenthesis
.8c78	95 00		sta $00,x	                sta 0,x
.8c7a	74 01		stz $01,x	                stz 1,x
.8c7c	20 56 99	jsr $9956	                jsr xt_parse
.8c7f	20 f0 a4	jsr $a4f0	                jsr xt_type
.8c82	60		rts		z_dot_paren:    rts
.8c83					xt_dot_quote:
.8c83	20 6b 9d	jsr $9d6b	                jsr xt_s_quote
.8c86	a0 a4		ldy #$a4	                ldy #>xt_type
.8c88	a9 f0		lda #$f0	                lda #<xt_type
.8c8a	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.8c8d	60		rts		z_dot_quote:    rts
.8c8e					xt_dot_r:
.8c8e	20 e6 d8	jsr $d8e6	                jsr underflow_2
.8c91	20 5d a3	jsr $a35d	                jsr xt_to_r
.8c94	20 cb 8d	jsr $8dcb	                jsr xt_dup
.8c97	20 33 81	jsr $8133	                jsr xt_abs
.8c9a	20 95 a7	jsr $a795	                jsr xt_zero
.8c9d	20 76 93	jsr $9376	                jsr xt_less_number_sign
.8ca0	20 fa 97	jsr $97fa	                jsr xt_number_sign_s
.8ca3	20 73 9b	jsr $9b73	                jsr xt_rot
.8ca6	20 d4 9f	jsr $9fd4	                jsr xt_sign
.8ca9	20 d8 97	jsr $97d8	                jsr xt_number_sign_greater
.8cac	20 ae 9a	jsr $9aae	                jsr xt_r_from
.8caf	20 af 98	jsr $98af	                jsr xt_over
.8cb2	20 6c 95	jsr $956c	                jsr xt_minus
.8cb5	20 11 a1	jsr $a111	                jsr xt_spaces
.8cb8	20 f0 a4	jsr $a4f0	                jsr xt_type
.8cbb	60		rts		z_dot_r:        rts
.8cbc					xt_dot_s:
.8cbc	20 12 8b	jsr $8b12	                jsr xt_depth    ; ( -- u )
.8cbf	a9 3c		lda #$3c	                lda #$3c        ; ASCII for "<"
.8cc1	20 12 8e	jsr $8e12	                jsr emit_a
.8cc4	b5 00		lda $00,x	                lda 0,x
.8cc6	48		pha		                pha
.8cc7	ca		dex		                dex             ; DUP
.8cc8	ca		dex		                dex
.8cc9	95 00		sta $00,x	                sta 0,x
.8ccb	74 01		stz $01,x	                stz 1,x
.8ccd	20 4e d9	jsr $d94e	                jsr print_u
.8cd0	a9 3e		lda #$3e	                lda #$3e        ; ASCII for ">"
.8cd2	20 12 8e	jsr $8e12	                jsr emit_a
.8cd5	a9 20		lda #$20	                lda #AscSP      ; ASCII for SPACE
.8cd7	20 12 8e	jsr $8e12	                jsr emit_a
.8cda	e8		inx		                inx
.8cdb	e8		inx		                inx
.8cdc	e0 78		cpx #$78	                cpx #dsp0
.8cde	f0 1e		beq $8cfe	                beq _done
.8ce0					_have_stack:
.8ce0	7a		ply		                ply
.8ce1	a9 77		lda #$77	                lda #dsp0-1     ; go up one to avoid garbage
.8ce3	85 28		sta $28		                sta tmp3
.8ce5	64 29		stz $29		                stz tmp3+1      ; must be zero page on the 65c02
.8ce7					_loop:
.8ce7	ca		dex		                dex
.8ce8	ca		dex		                dex
.8ce9	b2 28		lda ($28)	                lda (tmp3)
.8ceb	95 01		sta $01,x	                sta 1,x
.8ced	c6 28		dec $28		                dec tmp3
.8cef	b2 28		lda ($28)	                lda (tmp3)
.8cf1	95 00		sta $00,x	                sta 0,x
.8cf3	c6 28		dec $28		                dec tmp3
.8cf5	5a		phy		                phy
.8cf6	20 52 8c	jsr $8c52	                jsr xt_dot
.8cf9	7a		ply		                ply
.8cfa	88		dey		                dey
.8cfb	d0 ea		bne $8ce7	                bne _loop
.8cfd	48		pha		                pha             ; dummy to balance stack
.8cfe					_done:
.8cfe	68		pla		                pla
.8cff	60		rts		z_dot_s:        rts
.8d00					xt_d_dot:
.8d00	20 e6 d8	jsr $d8e6	                jsr underflow_2
.8d03	20 7a a3	jsr $a37a	                jsr xt_tuck
.8d06	20 a2 8a	jsr $8aa2	                jsr xt_dabs
.8d09	20 76 93	jsr $9376	                jsr xt_less_number_sign
.8d0c	20 fa 97	jsr $97fa	                jsr xt_number_sign_s
.8d0f	20 73 9b	jsr $9b73	                jsr xt_rot
.8d12	20 d4 9f	jsr $9fd4	                jsr xt_sign
.8d15	20 d8 97	jsr $97d8	                jsr xt_number_sign_greater
.8d18	20 f0 a4	jsr $a4f0	                jsr xt_type
.8d1b	20 0b a1	jsr $a10b	                jsr xt_space
.8d1e	60		rts		z_d_dot:        rts
.8d1f					xt_d_dot_r:
.8d1f	20 eb d8	jsr $d8eb	                jsr underflow_3
.8d22	20 5d a3	jsr $a35d	                jsr xt_to_r
.8d25	20 7a a3	jsr $a37a	                jsr xt_tuck
.8d28	20 a2 8a	jsr $8aa2	                jsr xt_dabs
.8d2b	20 76 93	jsr $9376	                jsr xt_less_number_sign
.8d2e	20 fa 97	jsr $97fa	                jsr xt_number_sign_s
.8d31	20 73 9b	jsr $9b73	                jsr xt_rot
.8d34	20 d4 9f	jsr $9fd4	                jsr xt_sign
.8d37	20 d8 97	jsr $97d8	                jsr xt_number_sign_greater
.8d3a	20 ae 9a	jsr $9aae	                jsr xt_r_from
.8d3d	20 af 98	jsr $98af	                jsr xt_over
.8d40	20 6c 95	jsr $956c	                jsr xt_minus
.8d43	20 11 a1	jsr $a111	                jsr xt_spaces
.8d46	20 f0 a4	jsr $a4f0	                jsr xt_type
.8d49	60		rts		z_d_dot_r:      rts
.8d4a					xt_drop:
.8d4a	20 e1 d8	jsr $d8e1	                jsr underflow_1
.8d4d	e8		inx		                inx
.8d4e	e8		inx		                inx
.8d4f	60		rts		z_drop:         rts
.8d50					xt_dump:
.8d50	20 e6 d8	jsr $d8e6	                jsr underflow_2
.8d53					_row:
.8d53	a0 10		ldy #$10	                ldy #16
.8d55	64 26		stz $26		                stz tmp2
.8d57	20 7f 89	jsr $897f	                jsr xt_cr
.8d5a	b5 03		lda $03,x	                lda 3,x
.8d5c	20 f1 d7	jsr $d7f1	                jsr byte_to_ascii
.8d5f	b5 02		lda $02,x	                lda 2,x
.8d61	20 f1 d7	jsr $d7f1	                jsr byte_to_ascii
.8d64	20 0b a1	jsr $a10b	                jsr xt_space
.8d67	20 0b a1	jsr $a10b	                jsr xt_space
.8d6a					_loop:
.8d6a	b5 00		lda $00,x	                lda 0,x
.8d6c	15 01		ora $01,x	                ora 1,x
.8d6e	f0 39		beq $8da9	                beq _all_printed
.8d70	a1 02		lda ($02,x)	                lda (2,x)
.8d72	48		pha		                pha                     ; byte_to_ascii destroys A
.8d73	20 f1 d7	jsr $d7f1	                jsr byte_to_ascii
.8d76	20 0b a1	jsr $a10b	                jsr xt_space
.8d79	68		pla		                pla
.8d7a	20 c7 d8	jsr $d8c7	                jsr is_printable
.8d7d	b0 02		bcs $8d81	                bcs _printable
.8d7f	a9 2e		lda #$2e	                lda #'.'                 ; Print dot if not printable
.8d81					_printable:
.8d81	5a		phy		                phy                     ; save counter
.8d82	a4 26		ldy $26		                ldy tmp2
.8d84	91 00		sta ($00),y	                sta (cp),y
.8d86	e6 26		inc $26		                inc tmp2
.8d88	7a		ply		                ply
.8d89	c0 09		cpy #$09	                cpy #9
.8d8b	d0 03		bne $8d90	                bne _next_char
.8d8d	20 0b a1	jsr $a10b	                jsr xt_space
.8d90					_next_char:
.8d90	f6 02		inc $02,x	                inc 2,x
.8d92	d0 02		bne $8d96	                bne _counter
.8d94	f6 03		inc $03,x	                inc 3,x
.8d96					_counter:
.8d96	b5 00		lda $00,x	                lda 0,x
.8d98	d0 02		bne $8d9c	                bne +
.8d9a	d6 01		dec $01,x	                dec 1,x
.8d9c					+
.8d9c	d6 00		dec $00,x	                dec 0,x
.8d9e	88		dey		                dey
.8d9f	d0 c9		bne $8d6a	                bne _loop               ; next byte
.8da1	20 0b a1	jsr $a10b	                jsr xt_space
.8da4	20 b7 8d	jsr $8db7	                jsr dump_print_ascii
.8da7	80 aa		bra $8d53	                bra _row                ; new row
.8da9					_all_printed:
.8da9	a5 26		lda $26		                lda tmp2
.8dab	f0 06		beq $8db3	                beq _done
.8dad	20 0b a1	jsr $a10b	                jsr xt_space
.8db0	20 b7 8d	jsr $8db7	                jsr dump_print_ascii
.8db3					_done:
.8db3	20 9d a3	jsr $a39d	                jsr xt_two_drop         ; one byte less than 4x INX
.8db6	60		rts		z_dump:         rts
.8db7					dump_print_ascii:
.8db7	a0 00		ldy #$00	                ldy #0
.8db9					_ascii_loop:
.8db9	b1 00		lda ($00),y	                lda (cp),y
.8dbb	20 12 8e	jsr $8e12	                jsr emit_a
.8dbe	c8		iny		                iny
.8dbf	c0 08		cpy #$08	                cpy #8
.8dc1	d0 03		bne $8dc6	                bne +
.8dc3	20 0b a1	jsr $a10b	                jsr xt_space
.8dc6					+
.8dc6	c6 26		dec $26		                dec tmp2
.8dc8	d0 ef		bne $8db9	                bne _ascii_loop
.8dca	60		rts		                rts
.8dcb					xt_dup:
.8dcb	20 e1 d8	jsr $d8e1	                jsr underflow_1
.8dce	ca		dex		                dex
.8dcf	ca		dex		                dex
.8dd0	b5 02		lda $02,x	                lda 2,x         ; LSB
.8dd2	95 00		sta $00,x	                sta 0,x
.8dd4	b5 03		lda $03,x	                lda 3,x         ; MSB
.8dd6	95 01		sta $01,x	                sta 1,x
.8dd8	60		rts		z_dup:          rts
.8dd9					xt_ed:
.8dd9	20 6f b5	jsr $b56f	                jsr ed6502      ; kept in separate file
.8ddc	60		rts		z_ed:           rts
.8ddd					xt_else:
.8ddd					xt_endof:
.8ddd	a0 8d		ldy #$8d	                ldy #>branch_runtime
.8ddf	a9 f7		lda #$f7	                lda #<branch_runtime
.8de1	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.8de4	20 8e 91	jsr $918e	                jsr xt_here
.8de7	20 95 a7	jsr $a795	                jsr xt_zero
.8dea	20 8a 87	jsr $878a	                jsr xt_comma
.8ded	20 8e 91	jsr $918e	                jsr xt_here
.8df0	20 73 9b	jsr $9b73	                jsr xt_rot
.8df3	20 7a a1	jsr $a17a	                jsr xt_store
.8df6					z_else:
.8df6					z_endof:
.8df6	60		rts		                rts
.8df7					branch_runtime:
.8df7	68		pla		                pla
.8df8	85 22		sta $22		                sta tmpbranch
.8dfa	68		pla		                pla
.8dfb	85 23		sta $23		                sta tmpbranch+1
.8dfd	a0 01		ldy #$01	                ldy #1
.8dff	b1 22		lda ($22),y	                lda (tmpbranch),y  ; LSB
.8e01	85 24		sta $24		                sta tmp1
.8e03	c8		iny		                iny
.8e04	b1 22		lda ($22),y	                lda (tmpbranch),y  ; MSB
.8e06	85 25		sta $25		                sta tmp1+1
.8e08	6c 24 00	jmp ($0024)	                jmp (tmp1)
.8e0b					xt_emit:
.8e0b	20 e1 d8	jsr $d8e1	                jsr underflow_1
.8e0e	b5 00		lda $00,x	                lda 0,x
.8e10	e8		inx		                inx
.8e11	e8		inx		                inx
.8e12					emit_a:
.8e12	6c 10 00	jmp ($0010)	                jmp (output)            ; JSR/RTS
.8e15					z_emit:
.8e15					xt_empty_buffers:
.8e15	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.8e17	a9 00		lda #$00	                lda #0
.8e19	91 1e		sta ($1e),y	                sta (up),y      ; Only LSB is used.
.8e1b					z_empty_buffers:
.8e1b	60		rts		                rts
.8e1c					xt_endcase:
.8e1c	a0 8d		ldy #$8d	                ldy #>xt_drop
.8e1e	a9 4a		lda #$4a	                lda #<xt_drop
.8e20	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.8e23					_endcase_loop:
.8e23	b5 00		lda $00,x	                lda 0,x
.8e25	15 01		ora $01,x	                ora 1,x
.8e27	f0 05		beq $8e2e	                beq _done
.8e29	20 af a1	jsr $a1af	                jsr xt_then
.8e2c	80 f5		bra $8e23	                bra _endcase_loop
.8e2e					_done:
.8e2e	e8		inx		                inx
.8e2f	e8		inx		                inx
.8e30	60		rts		z_endcase:      rts
.8e31					xt_environment_q:
.8e31	20 e1 d8	jsr $d8e1	                jsr underflow_1
.8e34	a0 00		ldy #$00	                ldy #00                 ; counter for table
.8e36	5a		phy		                phy
.8e37					_table_loop:
.8e37	20 a5 a3	jsr $a3a5	                jsr xt_two_dup          ; ( addr u addr u ) 2DUP does not use Y
.8e3a	ca		dex		                dex
.8e3b	ca		dex		                dex                     ; ( addr u addr u ? )
.8e3c	b9 ae 8e	lda $8eae,y	                lda env_table_single,y
.8e3f	95 00		sta $00,x	                sta 0,x
.8e41	c8		iny		                iny
.8e42	b9 ae 8e	lda $8eae,y	                lda env_table_single,y
.8e45	95 01		sta $01,x	                sta 1,x                 ; ( addr u addr u addr-t )
.8e47	c8		iny		                iny
.8e48	15 00		ora $00,x	                ora 0,x
.8e4a	f0 4d		beq $8e99	                beq _table_done
.8e4c	5a		phy		                phy                     ; save Y, which is used by COUNT
.8e4d	20 6b 89	jsr $896b	                jsr xt_count            ; ( addr u addr u addr-s u-s )
.8e50	20 a4 87	jsr $87a4	                jsr xt_compare          ; ( addr u f )
.8e53	7a		ply		                ply
.8e54	b5 00		lda $00,x	                lda 0,x
.8e56	15 01		ora $01,x	                ora 1,x
.8e58	f0 04		beq $8e5e	                beq _got_result
.8e5a	e8		inx		                inx                     ; DROP, now ( addr u )
.8e5b	e8		inx		                inx
.8e5c	80 d9		bra $8e37	                bra _table_loop
.8e5e					_got_result:
.8e5e	e8		inx		                inx                     ; drop flag, now ( addr u )
.8e5f	e8		inx		                inx
.8e60	88		dey		                dey                     ; go back to index we had
.8e61	88		dey		                dey
.8e62	68		pla		                pla
.8e63	d0 0d		bne $8e72	                bne _double_result
.8e65	b9 cc 8e	lda $8ecc,y	                lda env_results_single,y
.8e68	95 02		sta $02,x	                sta 2,x
.8e6a	c8		iny		                iny
.8e6b	b9 cc 8e	lda $8ecc,y	                lda env_results_single,y
.8e6e	95 03		sta $03,x	                sta 3,x                 ; ( res u )
.8e70	80 1f		bra $8e91	                bra _set_flag
.8e72					_double_result:
.8e72	ca		dex		                dex                     ; ( addr u ? )
.8e73	ca		dex		                dex
.8e74	98		tya		                tya
.8e75	38		sec		                sec
.8e76	e9 18		sbc #$18	                sbc #24
.8e78	0a		asl a		                asl
.8e79	a8		tay		                tay
.8e7a	b9 e2 8e	lda $8ee2,y	                lda env_results_double,y
.8e7d	95 02		sta $02,x	                sta 2,x
.8e7f	c8		iny		                iny
.8e80	b9 e2 8e	lda $8ee2,y	                lda env_results_double,y
.8e83	95 03		sta $03,x	                sta 3,x                 ; ( res u ? )
.8e85	c8		iny		                iny
.8e86	b9 e2 8e	lda $8ee2,y	                lda env_results_double,y
.8e89	95 04		sta $04,x	                sta 4,x
.8e8b	c8		iny		                iny
.8e8c	b9 e2 8e	lda $8ee2,y	                lda env_results_double,y
.8e8f	95 05		sta $05,x	                sta 5,x                 ; ( res res ? )
.8e91					_set_flag:
.8e91	a9 ff		lda #$ff	                lda #$ff
.8e93	95 00		sta $00,x	                sta 0,x
.8e95	95 01		sta $01,x	                sta 1,x                 ; ( res f )
.8e97	80 14		bra $8ead	                bra _done
.8e99					_table_done:
.8e99	68		pla		                pla
.8e9a	d0 09		bne $8ea5	                bne _no_match
.8e9c	1a		inc a		                ina
.8e9d	48		pha		                pha
.8e9e	8a		txa		                txa
.8e9f	18		clc		                clc
.8ea0	69 06		adc #$06	                adc #6                  ; skip six bytes
.8ea2	aa		tax		                tax                     ; ( addr u )
.8ea3	80 92		bra $8e37	                bra _table_loop
.8ea5					_no_match:
.8ea5	8a		txa		                txa
.8ea6	18		clc		                clc
.8ea7	69 0a		adc #$0a	                adc #10
.8ea9	aa		tax		                tax                     ; ( addr ) - not ( 0 ) !
.8eaa	20 95 8f	jsr $8f95	                jsr xt_false
.8ead					_done:
.8ead					z_environment_q:
.8ead	60		rts		                rts
.8eae					env_table_single:
>8eae	04 d7 14 d7 1a d7 1f d7		        .word envs_cs, envs_hold, envs_pad, envs_aub, envs_floored
>8eb6	31 d7
>8eb8	39 d7 42 d7 48 d7 4e d7		        .word envs_max_char, envs_max_n, envs_max_u, envs_rsc
>8ec0	61 d7 6d d7 00 00		        .word envs_sc, envs_wl, 0000
.8ec6					env_table_double:
>8ec6	77 d7 7d d7 00 00		        .word envs_max_d, envs_max_ud, 0000
.8ecc					env_results_single:
>8ecc	ff 7f				        .word $7FFF     ; /COUNTED-STRING
>8ece	ff 00				        .word $00FF     ; /HOLD
>8ed0	54 00				        .word $0054     ; /PAD (this is 84 decimal)
>8ed2	08 00				        .word $0008     ; ADDRESS-UNIT-BITS (keep "$" to avoid octal!)
>8ed4	00 00				        .word 0000      ; FLOORED ("FALSE", we have symmetric)
>8ed6	ff 00				        .word $00FF     ; MAX-CHAR
>8ed8	ff 7f				        .word $7FFF     ; MAX-N
>8eda	ff ff				        .word $FFFF     ; MAX-U
>8edc	80 00				        .word $0080     ; RETURN-STACK-CELLS
>8ede	20 00				        .word $0020     ; STACK-CELLS (from definitions.asm)
>8ee0	09 00				        .word $0009     ; WORDLISTS
.8ee2					env_results_double:
>8ee2	ff 7f ff ff			        .word $7FFF, $FFFF      ; MAX-D
>8ee6	ff ff ff ff			        .word $FFFF, $FFFF      ; MAX-UD
.8eea					xt_equal:
.8eea	20 e6 d8	jsr $d8e6	                jsr underflow_2
.8eed	b5 00		lda $00,x	                lda 0,x                 ; LSB
.8eef	d5 02		cmp $02,x	                cmp 2,x
.8ef1	d0 0a		bne $8efd	                bne _false
.8ef3	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8ef5	d5 03		cmp $03,x	                cmp 3,x
.8ef7	d0 04		bne $8efd	                bne _false
.8ef9	a9 ff		lda #$ff	                lda #$ff
.8efb	80 02		bra $8eff	                bra _done
.8efd	a9 00		lda #$00	_false:         lda #0                  ; drop thru to done
.8eff	95 02		sta $02,x	_done:          sta 2,x
.8f01	95 03		sta $03,x	                sta 3,x
.8f03	e8		inx		                inx
.8f04	e8		inx		                inx
.8f05	60		rts		z_equal:        rts
.8f06					xt_blank:
.8f06	ca		dex		                dex
.8f07	ca		dex		                dex
.8f08	a9 20		lda #$20	                lda #AscSP
.8f0a	95 00		sta $00,x	                sta 0,x
.8f0c	74 01		stz $01,x	                stz 1,x
.8f0e	80 06		bra $8f16	                bra xt_fill     ; skip over code for ERASE
.8f10					xt_erase:
.8f10	ca		dex		                dex
.8f11	ca		dex		                dex
.8f12	74 00		stz $00,x	                stz 0,x
.8f14	74 01		stz $01,x	                stz 1,x
.8f16					xt_fill:
.8f16	20 eb d8	jsr $d8eb	                jsr underflow_3
.8f19	b5 04		lda $04,x	                lda 4,x         ; LSB
.8f1b	85 24		sta $24		                sta tmp1
.8f1d	b5 05		lda $05,x	                lda 5,x
.8f1f	85 25		sta $25		                sta tmp1+1
.8f21	b5 02		lda $02,x	                lda 2,x
.8f23	85 26		sta $26		                sta tmp2
.8f25	b5 03		lda $03,x	                lda 3,x
.8f27	85 27		sta $27		                sta tmp2+1
.8f29	b5 00		lda $00,x	                lda 0,x
.8f2b	a8		tay		                tay
.8f2c					_loop:
.8f2c	a9 7f		lda #$7f	                lda #>ram_end           ; MSB
.8f2e	c5 25		cmp $25		                cmp tmp1+1
.8f30	90 21		bcc $8f53	                bcc _done               ; RAM_END < TMP1, so leave
.8f32	d0 06		bne $8f3a	                bne _check_counter      ; RAM_END is not smaller and not equal
.8f34	a9 ff		lda #$ff	                lda #<ram_end           ; LSB, because MSBs were equal
.8f36	c5 24		cmp $24		                cmp tmp1
.8f38	90 19		bcc $8f53	                bcc _done               ; RAM_END < TMP1, so leave
.8f3a					_check_counter:
.8f3a	a5 26		lda $26		                lda tmp2
.8f3c	05 27		ora $27		                ora tmp2+1
.8f3e	f0 13		beq $8f53	                beq _done
.8f40	98		tya		                tya
.8f41	92 24		sta ($24)	                sta (tmp1)
.8f43	a5 26		lda $26		                lda tmp2
.8f45	d0 02		bne $8f49	                bne +
.8f47	c6 27		dec $27		                dec tmp2+1
.8f49	c6 26		dec $26		+               dec tmp2
.8f4b	e6 24		inc $24		                inc tmp1
.8f4d	d0 dd		bne $8f2c	                bne _loop
.8f4f	e6 25		inc $25		                inc tmp1+1
.8f51	80 d9		bra $8f2c	                bra _loop
.8f53					_done:
.8f53	8a		txa		                txa
.8f54	18		clc		                clc
.8f55	69 06		adc #$06	                adc #6
.8f57	aa		tax		                tax
.8f58					z_blank:
.8f58					z_erase:
.8f58	60		rts		z_fill:         rts
.8f59					xt_execute:
.8f59	20 e1 d8	jsr $d8e1	                jsr underflow_1
.8f5c	20 60 8f	jsr $8f60	                jsr doexecute   ; do not combine to JMP (native coding)
.8f5f	60		rts		z_execute:      rts
.8f60					doexecute:
.8f60	b5 00		lda $00,x	                lda 0,x
.8f62	85 0e		sta $0e		                sta ip
.8f64	b5 01		lda $01,x	                lda 1,x
.8f66	85 0f		sta $0f		                sta ip+1
.8f68	e8		inx		                inx
.8f69	e8		inx		                inx
.8f6a	6c 0e 00	jmp ($000e)	                jmp (ip)
.8f6d					xt_execute_parsing:
.8f6d	20 eb d8	jsr $d8eb	                jsr underflow_3
.8f70	20 7e 92	jsr $927e	                jsr xt_input_to_r       ; save normal input for later
.8f73	20 8a 96	jsr $968a	                jsr xt_not_rote         ; -ROT ( xt addr u )
.8f76	b5 00		lda $00,x	                lda 0,x                 ; TOS is new ciblen
.8f78	85 0a		sta $0a		                sta ciblen
.8f7a	b5 01		lda $01,x	                lda 1,x
.8f7c	85 0b		sta $0b		                sta ciblen+1
.8f7e	b5 02		lda $02,x	                lda 2,x                 ; NOS is new cib
.8f80	85 08		sta $08		                sta cib
.8f82	b5 03		lda $03,x	                lda 3,x
.8f84	85 09		sta $09		                sta cib+1
.8f86	64 0c		stz $0c		                stz toin                ; Set >IN to zero
.8f88	64 0d		stz $0d		                stz toin+1
.8f8a	20 9d a3	jsr $a39d	                jsr xt_two_drop         ; 2DROP ( xt )
.8f8d	20 59 8f	jsr $8f59	                jsr xt_execute
.8f90	20 bf 9a	jsr $9abf	                jsr xt_r_to_input
.8f93					z_execute_parsing:
.8f93	60		rts		                rts
.8f94					xt_exit:
.8f94	60		rts		                rts             ; keep before z_exit
.8f95					z_exit:
.8f95					xt_false:
.8f95	ca		dex		                dex
.8f96	ca		dex		                dex
.8f97	74 00		stz $00,x	                stz 0,x
.8f99	74 01		stz $01,x	                stz 1,x
.8f9b	60		rts		z_false:        rts
.8f9c					xt_fetch:
.8f9c	20 e1 d8	jsr $d8e1	                jsr underflow_1
.8f9f	a1 00		lda ($00,x)	                lda (0,x)               ; LSB
.8fa1	a8		tay		                tay
.8fa2	f6 00		inc $00,x	                inc 0,x
.8fa4	d0 02		bne $8fa8	                bne +
.8fa6	f6 01		inc $01,x	                inc 1,x
.8fa8					+
.8fa8	a1 00		lda ($00,x)	                lda (0,x)               ; MSB
.8faa	95 01		sta $01,x	                sta 1,x
.8fac	94 00		sty $00,x	                sty 0,x
.8fae	60		rts		z_fetch:        rts
.8faf					xt_find:
.8faf	20 e1 d8	jsr $d8e1	                jsr underflow_1
.8fb2	b5 01		lda $01,x	                lda 1,x                 ; MSB
.8fb4	48		pha		                pha
.8fb5	b5 00		lda $00,x	                lda 0,x                 ; LSB
.8fb7	48		pha		                pha
.8fb8	20 6b 89	jsr $896b	                jsr xt_count            ; ( caddr -- addr u )
.8fbb	20 f7 8f	jsr $8ff7	                jsr xt_find_name        ; ( addr u -- nt | 0 )
.8fbe	b5 00		lda $00,x	                lda 0,x
.8fc0	15 01		ora $01,x	                ora 1,x
.8fc2	d0 0b		bne $8fcf	                bne _found_word
.8fc4	20 95 8f	jsr $8f95	                jsr xt_false            ; ( 0 0 )
.8fc7	68		pla		                pla                     ; LSB of address
.8fc8	95 02		sta $02,x	                sta 2,x
.8fca	68		pla		                pla
.8fcb	95 03		sta $03,x	                sta 3,x                 ; MSB of address
.8fcd	80 27		bra $8ff6	                bra _done               ; ( addr 0 )
.8fcf					_found_word:
.8fcf	68		pla		                pla
.8fd0	68		pla		                pla
.8fd1	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; ( nt nt )
.8fd4	20 fd 95	jsr $95fd	                jsr xt_name_to_int      ; ( nt xt )
.8fd7	20 9b a1	jsr $a19b	                jsr xt_swap             ; ( xt nt )
.8fda	a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.8fdc	f6 00		inc $00,x	                inc 0,x
.8fde	d0 02		bne $8fe2	                bne +
.8fe0	f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.8fe2					+
.8fe2	a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.8fe4	29 04		and #$04	                and #IM
.8fe6	d0 08		bne $8ff0	                bne _immediate          ; bit set, we're immediate
.8fe8	a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.8fea	95 00		sta $00,x	                sta 0,x
.8fec	95 01		sta $01,x	                sta 1,x
.8fee	80 06		bra $8ff6	                bra _done
.8ff0					_immediate:
.8ff0	a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.8ff2	95 00		sta $00,x	                sta 0,x
.8ff4	74 01		stz $01,x	                stz 1,x
.8ff6					_done:
.8ff6	60		rts		z_find:         rts
.8ff7					xt_find_name:
.8ff7	20 e6 d8	jsr $d8e6	                jsr underflow_2
.8ffa	b5 00		lda $00,x	                lda 0,x
.8ffc	15 01		ora $01,x	                ora 1,x
.8ffe	d0 03		bne $9003	                bne _nonempty
.9000	4c 9c 90	jmp $909c	                jmp _fail_done
.9003					_nonempty:
.9003	64 28		stz $28		                stz tmp3                ; Start at the beginning
.9005					_wordlist_loop:
.9005	a0 1e		ldy #$1e	                ldy #num_order_offset   ; Compare to byte variable #ORDER
.9007	a5 28		lda $28		                lda tmp3
.9009	d1 1e		cmp ($1e),y	                cmp (up),y              ; Check to see if we are done
.900b	d0 03		bne $9010	                bne _have_string
.900d	4c 9c 90	jmp $909c	                jmp _fail_done
.9010					_have_string:
.9010	18		clc		                clc             ; SEARCH-ORDER is array of bytes.
.9011	69 1f		adc #$1f	                adc #search_order_offset
.9013	a8		tay		                tay
.9014	b1 1e		lda ($1e),y	                lda (up),y      ; Get the id byte, which is the offset
.9016	0a		asl a		                asl                     ; Turn offset into cells offset.
.9017	18		clc		                clc
.9018	69 06		adc #$06	                adc #wordlists_offset
.901a	a8		tay		                tay
.901b	b1 1e		lda ($1e),y	                lda (up),y
.901d	85 24		sta $24		                sta tmp1
.901f	c8		iny		                iny
.9020	b1 1e		lda ($1e),y	                lda (up),y
.9022	85 25		sta $25		                sta tmp1+1
.9024	b5 02		lda $02,x	                lda 2,x                 ; Address of mystery string
.9026	85 26		sta $26		                sta tmp2
.9028	b5 03		lda $03,x	                lda 3,x
.902a	85 27		sta $27		                sta tmp2+1
.902c					_loop:
.902c	b2 24		lda ($24)	                lda (tmp1)
.902e	d5 00		cmp $00,x	                cmp 0,x
.9030	d0 54		bne $9086	                bne _next_entry
.9032					_compare_string:
.9032	b2 26		lda ($26)	                lda (tmp2)      ; first character of mystery string
.9034	c9 5b		cmp #$5b	                cmp #$5B        ; ASCII '[' (one past Z)
.9036	b0 07		bcs $903f	                bcs _compare_first
.9038	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.903a	90 03		bcc $903f	                bcc _compare_first
.903c	18		clc		                clc
.903d	69 20		adc #$20	                adc #$20
.903f					_compare_first:
.903f	a0 08		ldy #$08	                ldy #8          ; Offset in nt to name
.9041	d1 24		cmp ($24),y	                cmp (tmp1),y    ; first character of current word
.9043	d0 41		bne $9086	                bne _next_entry
.9045	b5 00		lda $00,x	                lda 0,x
.9047	3a		dec a		                dea
.9048	f0 2c		beq $9076	                beq _success
.904a	a5 24		lda $24		                lda tmp1
.904c	48		pha		                pha             ; Preserve tmp1 on the return stack.
.904d	18		clc		                clc
.904e	69 08		adc #$08	                adc #8
.9050	85 24		sta $24		                sta tmp1        ; Reusing tmp1 temporarily for string check.
.9052	a5 25		lda $25		                lda tmp1+1
.9054	48		pha		                pha             ; Preserve tmp1+1 on the return stack.
.9055	69 00		adc #$00	                adc #0          ; we only need the carry
.9057	85 25		sta $25		                sta tmp1+1
.9059	b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.905b	88		dey		                dey
.905c					_string_loop:
.905c	b1 26		lda ($26),y	                lda (tmp2),y    ; last char of mystery string
.905e	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.9060	b0 07		bcs $9069	                bcs _check_char
.9062	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9064	90 03		bcc $9069	                bcc _check_char
.9066	18		clc		                clc
.9067	69 20		adc #$20	                adc #$20
.9069					_check_char:
.9069	d1 24		cmp ($24),y	                cmp (tmp1),y    ; last char of word we're testing against
.906b	d0 13		bne $9080	                bne _next_entry_tmp1
.906d	88		dey		                dey
.906e	d0 ec		bne $905c	                bne _string_loop
.9070					_success_tmp1:
.9070	68		pla		                pla             ; Restore tmp1 from the return stack.
.9071	85 25		sta $25		                sta tmp1+1
.9073	68		pla		                pla
.9074	85 24		sta $24		                sta tmp1
.9076					_success:
.9076	a5 24		lda $24		                lda tmp1
.9078	95 02		sta $02,x	                sta 2,x
.907a	a5 25		lda $25		                lda tmp1+1
.907c	95 03		sta $03,x	                sta 3,x
.907e	80 20		bra $90a0	                bra _done
.9080					_next_entry_tmp1:
.9080	68		pla		                pla             ; Restore tmp1 from the return stack.
.9081	85 25		sta $25		                sta tmp1+1
.9083	68		pla		                pla
.9084	85 24		sta $24		                sta tmp1
.9086					_next_entry:
.9086	a0 02		ldy #$02	                ldy #2
.9088	b1 24		lda ($24),y	                lda (tmp1),y
.908a	48		pha		                pha
.908b	c8		iny		                iny
.908c	b1 24		lda ($24),y	                lda (tmp1),y
.908e	85 25		sta $25		                sta tmp1+1
.9090	68		pla		                pla
.9091	85 24		sta $24		                sta tmp1
.9093	05 25		ora $25		                ora tmp1+1
.9095	d0 95		bne $902c	                bne _loop
.9097	e6 28		inc $28		                inc tmp3
.9099	4c 05 90	jmp $9005	                jmp _wordlist_loop
.909c					_fail_done:
.909c	74 02		stz $02,x	                stz 2,x         ; failure flag
.909e	74 03		stz $03,x	                stz 3,x
.90a0					_done:
.90a0	e8		inx		                inx
.90a1	e8		inx		                inx
.90a2	60		rts		z_find_name:    rts
.90a3					xt_flush:
.90a3	20 ab 9e	jsr $9eab	                jsr xt_save_buffers
.90a6	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.90a8	a9 00		lda #$00	                lda #0
.90aa	91 1e		sta ($1e),y	                sta (up),y      ; Only LSB is used.
.90ac					z_flush:
.90ac	60		rts		                rts
.90ad					xt_fm_slash_mod:
.90ad	20 eb d8	jsr $d8eb	                jsr underflow_3
.90b0	64 26		stz $26		                stz tmp2        ; default: n is positive
.90b2	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.90b4	10 0e		bpl $90c4	                bpl _check_d
.90b6	e6 26		inc $26		                inc tmp2        ; set flag to negative for n1
.90b8	20 3f 96	jsr $963f	                jsr xt_negate   ; NEGATE
.90bb	20 5d a3	jsr $a35d	                jsr xt_to_r     ; >R
.90be	20 5d 8b	jsr $8b5d	                jsr xt_dnegate  ; DNEGATE
.90c1	20 ae 9a	jsr $9aae	                jsr xt_r_from   ; R>
.90c4					_check_d:
.90c4	b5 03		lda $03,x	                lda 3,x         ; MSB of high word of d
.90c6	10 0d		bpl $90d5	                bpl _multiply
.90c8	18		clc		                clc
.90c9	b5 00		lda $00,x	                lda 0,x         ; LSB of n1
.90cb	75 02		adc $02,x	                adc 2,x         ; LSB of dh
.90cd	95 02		sta $02,x	                sta 2,x
.90cf	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.90d1	75 03		adc $03,x	                adc 3,x         ; MSB of dh
.90d3	95 03		sta $03,x	                sta 3,x
.90d5					_multiply:
.90d5	20 a7 a5	jsr $a5a7	                jsr xt_um_slash_mod     ; ( d n1 -- rem n2 )
.90d8	a5 26		lda $26		                lda tmp2
.90da	f0 07		beq $90e3	                beq _done
.90dc	e8		inx		                inx             ; pretend that we SWAP
.90dd	e8		inx		                inx
.90de	20 3f 96	jsr $963f	                jsr xt_negate
.90e1	ca		dex		                dex
.90e2	ca		dex		                dex
.90e3					_done:
.90e3	60		rts		z_fm_slash_mod: rts
.90e4					xt_forth:
.90e4	a0 1f		ldy #$1f	                ldy #search_order_offset
.90e6	a9 00		lda #$00	                lda #0          ; The WID for Forth is 0.
.90e8	91 1e		sta ($1e),y	                sta (up),y
.90ea					z_forth:
.90ea	60		rts		                rts
.90eb					load_evaluate:
.90eb	a9 ff		lda #$ff	                lda #$FF
.90ed	85 24		sta $24		                sta tmp1
.90ef	80 11		bra $9102	                bra load_evaluate_start
.90f1					xt_evaluate:
.90f1	20 e6 d8	jsr $d8e6	                jsr underflow_2
.90f4	64 24		stz $24		                stz tmp1
.90f6	b5 00		lda $00,x	                lda 0,x
.90f8	15 01		ora $01,x	                ora 1,x
.90fa	d0 06		bne $9102	                bne evaluate_got_work
.90fc	e8		inx		                inx
.90fd	e8		inx		                inx
.90fe	e8		inx		                inx
.90ff	e8		inx		                inx
.9100	80 42		bra $9144	                bra evaluate_done
.9102					load_evaluate_start:
.9102					evaluate_got_work:
.9102	a0 01		ldy #$01	                ldy #blk_offset+1
.9104	b1 1e		lda ($1e),y	                lda (up),y
.9106	48		pha		                pha
.9107	88		dey		                dey
.9108	b1 1e		lda ($1e),y	                lda (up),y
.910a	48		pha		                pha
.910b	a5 24		lda $24		                lda tmp1
.910d	d0 05		bne $9114	                bne _nozero
.910f	91 1e		sta ($1e),y	                sta (up),y
.9111	c8		iny		                iny
.9112	91 1e		sta ($1e),y	                sta (up),y
.9114					_nozero:
.9114	20 7e 92	jsr $927e	                jsr xt_input_to_r
.9117	a9 ff		lda #$ff	                lda #$ff
.9119	85 06		sta $06		                sta insrc
.911b	85 07		sta $07		                sta insrc+1
.911d	64 0c		stz $0c		                stz toin
.911f	64 0d		stz $0d		                stz toin+1
.9121	b5 00		lda $00,x	                lda 0,x
.9123	85 0a		sta $0a		                sta ciblen
.9125	b5 01		lda $01,x	                lda 1,x
.9127	85 0b		sta $0b		                sta ciblen+1
.9129	b5 02		lda $02,x	                lda 2,x
.912b	85 08		sta $08		                sta cib
.912d	b5 03		lda $03,x	                lda 3,x
.912f	85 09		sta $09		                sta cib+1
.9131	e8		inx		                inx             ; A clean stack is a clean mind
.9132	e8		inx		                inx
.9133	e8		inx		                inx
.9134	e8		inx		                inx
.9135	20 49 d8	jsr $d849	                jsr interpret   ; ( -- )
.9138	20 bf 9a	jsr $9abf	                jsr xt_r_to_input
.913b	a0 00		ldy #$00	                ldy #blk_offset
.913d	68		pla		                pla
.913e	91 1e		sta ($1e),y	                sta (up),y
.9140	c8		iny		                iny
.9141	68		pla		                pla
.9142	91 1e		sta ($1e),y	                sta (up),y
.9144					evaluate_done:
.9144	60		rts		z_evaluate:     rts
.9145					xt_get_current:
.9145	ca		dex		                dex
.9146	ca		dex		                dex
.9147	a0 04		ldy #$04	                ldy #current_offset
.9149	b1 1e		lda ($1e),y	                lda (up),y
.914b	95 00		sta $00,x	                sta 0,x         ; CURRENT is a byte variable
.914d	74 01		stz $01,x	                stz 1,x         ; so the MSB is zero.
.914f	60		rts		z_get_current:  rts
.9150					xt_get_order:
.9150	a0 1e		ldy #$1e	                ldy #num_order_offset
.9152	b1 1e		lda ($1e),y	                lda (up),y
.9154	85 24		sta $24		                sta tmp1
.9156	f0 16		beq $916e	                beq _done       ; If zero, there are no wordlists.
.9158					_loop:
.9158	c6 24		dec $24		                dec tmp1        ; Count down by bytes.
.915a	a9 1f		lda #$1f	                lda #search_order_offset
.915c	18		clc		                clc
.915d	65 24		adc $24		                adc tmp1
.915f	a8		tay		                tay
.9160	ca		dex		                dex
.9161	ca		dex		                dex
.9162	b1 1e		lda ($1e),y	                lda (up),y
.9164	95 00		sta $00,x	                sta 0,x         ; Search order array is bytes, so
.9166	74 01		stz $01,x	                stz 1,x         ; put a zero in the high byte.
.9168	a9 00		lda #$00	                lda #0
.916a	c5 24		cmp $24		                cmp tmp1
.916c	d0 ea		bne $9158	                bne _loop
.916e					_done:
.916e	ca		dex		                dex
.916f	ca		dex		                dex
.9170	a0 1e		ldy #$1e	                ldy #num_order_offset
.9172	b1 1e		lda ($1e),y	                lda (up),y
.9174	95 00		sta $00,x	                sta 0,x
.9176	74 01		stz $01,x	                stz 1,x         ; We only support 8 wordlists.
.9178	60		rts		z_get_order:    rts
.9179					xt_greater_than:
.9179	20 e6 d8	jsr $d8e6	                jsr underflow_2
.917c	a0 00		ldy #$00	                ldy #0          ; default false
.917e	20 08 d8	jsr $d808	                jsr compare_16bit
.9181	f0 03		beq $9186	                beq _false
.9183	10 01		bpl $9186	                bpl _false
.9185	88		dey		                dey
.9186					_false:
.9186	98		tya		                tya
.9187	e8		inx		                inx
.9188	e8		inx		                inx
.9189	95 00		sta $00,x	                sta 0,x
.918b	95 01		sta $01,x	                sta 1,x
.918d	60		rts		z_greater_than: rts
.918e					xt_here:
.918e					xt_asm_arrow:
.918e	ca		dex		                dex
.918f	ca		dex		                dex
.9190	a5 00		lda $00		                lda cp
.9192	95 00		sta $00,x	                sta 0,x
.9194	a5 01		lda $01		                lda cp+1
.9196	95 01		sta $01,x	                sta 1,x
.9198					z_asm_arrow:
.9198	60		rts		z_here:         rts
.9199					xt_hex:
.9199	a9 10		lda #$10	                lda #16
.919b	85 18		sta $18		                sta base
.919d	64 19		stz $19		                stz base+1              ; paranoid
.919f	60		rts		z_hex:          rts
.91a0					xt_hexstore:
.91a0	20 eb d8	jsr $d8eb	                jsr underflow_3
.91a3	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; Save copy of original address
.91a6	20 8f a4	jsr $a48f	                jsr xt_two_to_r         ; ( addr1 u1 ) ( R: addr2 addr2 )
.91a9					_loop:
.91a9	b5 00		lda $00,x	                lda 0,x
.91ab	15 01		ora $01,x	                ora 1,x
.91ad	f0 36		beq $91e5	                beq _done
.91af	20 68 86	jsr $8668	                jsr xt_cleave           ; ( addr1 u1 addr3 u3 ) ( R: addr2 addr2 )
.91b2	20 8f a4	jsr $a48f	                jsr xt_two_to_r
.91b5	20 95 a7	jsr $a795	                jsr xt_zero
.91b8	20 95 a7	jsr $a795	                jsr xt_zero
.91bb	20 15 a4	jsr $a415	                jsr xt_two_r_from       ; ( addr1 u1 0 0 addr3 u3 ) ( R: addr2 addr2 )
.91be	20 aa a2	jsr $a2aa	                jsr xt_to_number        ; ( addr1 u1 n n addr4 u4 ) ( R: addr2 addr2 )
.91c1	b5 00		lda $00,x	                lda 0,x
.91c3	15 01		ora $01,x	                ora 1,x
.91c5	d0 17		bne $91de	                bne _have_chars_left
.91c7	20 9d a3	jsr $a39d	                jsr xt_two_drop         ; ( addr1 u1 n n ) ( R: addr2 addr2 )
.91ca	20 9c 8a	jsr $8a9c	                jsr xt_d_to_s           ; ( addr1 u1 n ) ( R: addr2 addr2 )
.91cd	20 99 9a	jsr $9a99	                jsr xt_r_fetch          ; ( addr1 u1 n addr2 ) ( R: addr2 addr2 )
.91d0	20 31 86	jsr $8631	                jsr xt_c_store          ; ( addr1 u1 ) ( R: addr2 addr2 )
.91d3	20 ae 9a	jsr $9aae	                jsr xt_r_from           ; R>
.91d6	20 39 98	jsr $9839	                jsr xt_one_plus         ; 1+
.91d9	20 5d a3	jsr $a35d	                jsr xt_to_r             ; >R ( addr1 u1 ) ( R: addr2+1 addr2 )
.91dc	80 cb		bra $91a9	                bra _loop
.91de					_have_chars_left:
.91de	8a		txa		                txa
.91df	18		clc		                clc
.91e0	69 08		adc #$08	                adc #8
.91e2	aa		tax		                tax
.91e3	80 c4		bra $91a9	                bra _loop
.91e5					_done:
.91e5	e8		inx		                inx
.91e6	e8		inx		                inx
.91e7	e8		inx		                inx
.91e8	e8		inx		                inx                     ; 2DROP
.91e9	20 15 a4	jsr $a415	                jsr xt_two_r_from       ; ( addr2+n addr2 )
.91ec	20 9b a1	jsr $a19b	                jsr xt_swap
.91ef	20 6c 95	jsr $956c	                jsr xt_minus            ; ( n )
.91f2	60		rts		z_hexstore:     rts
.91f3					xt_hold:
.91f3	20 e1 d8	jsr $d8e1	                jsr underflow_1
.91f6	a5 34		lda $34		                lda tohold
.91f8	d0 02		bne $91fc	                bne +
.91fa	c6 35		dec $35		                dec tohold+1
.91fc					+
.91fc	c6 34		dec $34		                dec tohold
.91fe	b5 00		lda $00,x	                lda 0,x
.9200	92 34		sta ($34)	                sta (tohold)
.9202	e8		inx		                inx
.9203	e8		inx		                inx
.9204	60		rts		z_hold:         rts
.9205					xt_i:
.9205	ca		dex		                dex
.9206	ca		dex		                dex
.9207	86 2a		stx $2a		                stx tmpdsp
.9209	ba		tsx		                tsx
.920a	38		sec		                sec
.920b	bd 01 01	lda $0101,x	                lda $0101,x     ; LSB
.920e	fd 03 01	sbc $0103,x	                sbc $0103,x
.9211	a8		tay		                tay
.9212	bd 02 01	lda $0102,x	                lda $0102,x     ; MSB
.9215	fd 04 01	sbc $0104,x	                sbc $0104,x
.9218	a6 2a		ldx $2a		                ldx tmpdsp
.921a	95 01		sta $01,x	                sta 1,x         ; MSB of de-fudged index
.921c	94 00		sty $00,x	                sty 0,x         ; LSB of de-fudged index
.921e	60		rts		z_i:            rts
.921f					xt_if:
.921f	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.9221	a9 30		lda #$30	                lda #<zero_branch_runtime
.9223	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.9226	20 8e 91	jsr $918e	                jsr xt_here
.9229	20 95 a7	jsr $a795	                jsr xt_zero
.922c	20 8a 87	jsr $878a	                jsr xt_comma
.922f	60		rts		z_if:           rts
.9230					zero_branch_runtime:
.9230	68		pla		                pla
.9231	85 22		sta $22		                sta tmpbranch
.9233	68		pla		                pla
.9234	85 23		sta $23		                sta tmpbranch+1
.9236	b5 00		lda $00,x	                lda 0,x
.9238	15 01		ora $01,x	                ora 1,x
.923a	f0 0f		beq $924b	                beq _zero
.923c	a5 22		lda $22		                lda tmpbranch   ; LSB
.923e	18		clc		                clc
.923f	69 02		adc #$02	                adc #2
.9241	85 24		sta $24		                sta tmp1
.9243	a5 23		lda $23		                lda tmpbranch+1 ; MSB
.9245	69 00		adc #$00	                adc #0          ; For carry
.9247	85 25		sta $25		                sta tmp1+1
.9249	80 13		bra $925e	                bra _done
.924b					_zero:
.924b	a0 01		ldy #$01	                ldy #1
.924d	b1 22		lda ($22),y	                lda (tmpbranch),y
.924f	85 24		sta $24		                sta tmp1
.9251	c8		iny		                iny
.9252	b1 22		lda ($22),y	                lda (tmpbranch),y
.9254	85 25		sta $25		                sta tmp1+1
.9256	a5 24		lda $24		                lda tmp1
.9258	d0 02		bne $925c	                bne +
.925a	c6 25		dec $25		                dec tmp1+1
.925c					+
.925c	c6 24		dec $24		                dec tmp1
.925e					_done:
.925e	a5 25		lda $25		                lda tmp1+1
.9260	48		pha		                pha             ; MSB first
.9261	a5 24		lda $24		                lda tmp1
.9263	48		pha		                pha
.9264	e8		inx		                inx
.9265	e8		inx		                inx
.9266	60		rts		                rts
.9267					xt_immediate:
.9267	20 23 d8	jsr $d823	                jsr current_to_dp
.926a	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.926c	b1 02		lda ($02),y	                lda (dp),y
.926e	09 04		ora #$04	                ora #IM        ; make sure bit 7 is set
.9270	91 02		sta ($02),y	                sta (dp),y
.9272	60		rts		z_immediate:    rts
.9273					xt_input:
.9273	ca		dex		                dex
.9274	ca		dex		                dex
.9275	a9 12		lda #$12	                lda #<input
.9277	95 00		sta $00,x	                sta 0,x
.9279	a9 00		lda #$00	                lda #>input
.927b	95 01		sta $01,x	                sta 1,x
.927d	60		rts		z_input:        rts
.927e					xt_input_to_r:
.927e	68		pla		                pla
.927f	85 24		sta $24		                sta tmp1
.9281	68		pla		                pla
.9282	85 25		sta $25		                sta tmp1+1
.9284	a0 07		ldy #$07	                ldy #7
.9286					_loop:
.9286	b9 06 00	lda $0006,y	                lda insrc,y     ; insrc+7 is toin+1
.9289	48		pha		                pha
.928a	88		dey		                dey
.928b	10 f9		bpl $9286	                bpl _loop
.928d	a5 25		lda $25		                lda tmp1+1
.928f	48		pha		                pha
.9290	a5 24		lda $24		                lda tmp1
.9292	48		pha		                pha
.9293	60		rts		z_input_to_r: 	rts
.9294					xt_int_to_name:
.9294	20 e1 d8	jsr $d8e1	                jsr underflow_1
.9297	ca		dex		                dex
.9298	ca		dex		                dex
.9299	74 00		stz $00,x	                stz 0,x
.929b	74 01		stz $01,x	                stz 1,x
.929d					_wordlist_loop:
.929d	b5 00		lda $00,x	                lda 0,x                 ; Get the current wordlist.
.929f	0a		asl a		                asl                     ; Turn offset into cells offset.
.92a0	18		clc		                clc
.92a1	69 06		adc #$06	                adc #wordlists_offset
.92a3	a8		tay		                tay
.92a4	b1 1e		lda ($1e),y	                lda (up),y              ; Save the DP for this wordlist
.92a6	85 26		sta $26		                sta tmp2                ; into tmp2
.92a8	c8		iny		                iny
.92a9	b1 1e		lda ($1e),y	                lda (up),y
.92ab	85 27		sta $27		                sta tmp2+1
.92ad	a5 26		lda $26		                lda tmp2
.92af	05 27		ora $27		                ora tmp2+1
.92b1	f0 38		beq $92eb	                beq _next_wordlist
.92b3	b5 02		lda $02,x	                lda 2,x         ; Target xt is now behind wordlist id.
.92b5	85 28		sta $28		                sta tmp3        ; Save target xt in tmp3
.92b7	b5 03		lda $03,x	                lda 3,x
.92b9	85 29		sta $29		                sta tmp3+1
.92bb					_loop:
.92bb	a0 04		ldy #$04	                ldy #4          ; xt is four bytes down
.92bd	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB of xt of current nt
.92bf	c5 28		cmp $28		                cmp tmp3
.92c1	d0 07		bne $92ca	                bne _no_match
.92c3	c8		iny		                iny
.92c4	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB of xt of current nt
.92c6	c5 29		cmp $29		                cmp tmp3+1
.92c8	f0 32		beq $92fc	                beq _match
.92ca					_no_match:
.92ca	18		clc		                clc
.92cb	a5 26		lda $26		                lda tmp2
.92cd	69 02		adc #$02	                adc #2
.92cf	85 26		sta $26		                sta tmp2
.92d1	a5 27		lda $27		                lda tmp2+1
.92d3	69 00		adc #$00	                adc #0          ; only care about carry
.92d5	85 27		sta $27		                sta tmp2+1
.92d7	a0 00		ldy #$00	                ldy #0
.92d9	b1 26		lda ($26),y	                lda (tmp2),y
.92db	48		pha		                pha
.92dc	c8		iny		                iny
.92dd	11 26		ora ($26),y	                ora (tmp2),y
.92df	f0 09		beq $92ea	                beq _zero
.92e1	b1 26		lda ($26),y	                lda (tmp2),y
.92e3	85 27		sta $27		                sta tmp2+1
.92e5	68		pla		                pla
.92e6	85 26		sta $26		                sta tmp2
.92e8	80 d1		bra $92bb	                bra _loop
.92ea					_zero:
.92ea	68		pla		                pla             ; Leftover from above loop
.92eb					_next_wordlist:
.92eb	b5 00		lda $00,x	                lda 0,x
.92ed	1a		inc a		                ina
.92ee	95 00		sta $00,x	                sta 0,x
.92f0	c9 0c		cmp #$0c	                cmp #max_wordlists
.92f2	d0 a9		bne $929d	                bne _wordlist_loop
.92f4	e8		inx		                inx
.92f5	e8		inx		                inx
.92f6	74 00		stz $00,x	                stz 0,x
.92f8	74 01		stz $01,x	                stz 1,x
.92fa	80 0a		bra $9306	                bra z_int_to_name
.92fc					_match:
.92fc	e8		inx		                inx
.92fd	e8		inx		                inx
.92fe	a5 26		lda $26		                lda tmp2
.9300	95 00		sta $00,x	                sta 0,x
.9302	a5 27		lda $27		                lda tmp2+1
.9304	95 01		sta $01,x	                sta 1,x
.9306	60		rts		z_int_to_name:  rts
.9307					xt_invert:
.9307	20 e1 d8	jsr $d8e1	                jsr underflow_1
.930a	a9 ff		lda #$ff	                lda #$FF
.930c	55 00		eor $00,x	                eor 0,x         ; LSB
.930e	95 00		sta $00,x	                sta 0,x
.9310	a9 ff		lda #$ff	                lda #$FF
.9312	55 01		eor $01,x	                eor 1,x         ; MSB
.9314	95 01		sta $01,x	                sta 1,x
.9316	60		rts		z_invert:       rts
.9317					xt_is:
.9317	a5 16		lda $16		                lda state
.9319	05 17		ora $17		                ora state+1
.931b	f0 0c		beq $9329	                beq _interpreting
.931d					_compiling:
.931d	20 ba 85	jsr $85ba	                jsr xt_bracket_tick
.9320	a0 8b		ldy #$8b	                ldy #>xt_defer_store
.9322	a9 02		lda #$02	                lda #<xt_defer_store
.9324	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.9327	80 06		bra $932f	                bra _done
.9329					_interpreting:
.9329	20 fe a1	jsr $a1fe	                jsr xt_tick
.932c	20 02 8b	jsr $8b02	                jsr xt_defer_store
.932f					_done:
.932f	60		rts		z_is:           rts
.9330					xt_j:
.9330	ca		dex		                dex
.9331	ca		dex		                dex
.9332	86 2a		stx $2a		                stx tmpdsp
.9334	ba		tsx		                tsx
.9335	38		sec		                sec
.9336	bd 07 01	lda $0107,x	                lda $0107,x     ; LSB
.9339	fd 09 01	sbc $0109,x	                sbc $0109,x
.933c	a8		tay		                tay
.933d	bd 08 01	lda $0108,x	                lda $0108,x     ; MSB
.9340	fd 0a 01	sbc $010a,x	                sbc $010A,x
.9343	a6 2a		ldx $2a		                ldx tmpdsp
.9345	95 01		sta $01,x	                sta 1,x         ; MSB of de-fudged index
.9347	94 00		sty $00,x	                sty 0,x         ; LSB of de-fudged index
.9349	60		rts		z_j:            rts
.934a					xt_key:
.934a	20 54 93	jsr $9354	                jsr key_a               ; returns char in A
.934d	ca		dex		                dex
.934e	ca		dex		                dex
.934f	95 00		sta $00,x	                sta 0,x
.9351	74 01		stz $01,x	                stz 1,x
.9353	60		rts		z_key:          rts
.9354					key_a:
.9354	6c 12 00	jmp ($0012)	                jmp (input)             ; JSR/RTS
.9357					xt_latestnt:
.9357	ca		dex		                dex
.9358	ca		dex		                dex
.9359	20 23 d8	jsr $d823	                jsr current_to_dp
.935c	a5 02		lda $02		                lda dp
.935e	95 00		sta $00,x	                sta 0,x
.9360	a5 03		lda $03		                lda dp+1
.9362	95 01		sta $01,x	                sta 1,x
.9364	60		rts		z_latestnt:     rts
.9365					xt_latestxt:
.9365	20 57 93	jsr $9357	                jsr xt_latestnt         ; ( nt )
.9368	20 fd 95	jsr $95fd	                jsr xt_name_to_int      ; ( xt )
.936b	60		rts		z_latestxt:     rts
.936c					xt_leave:
.936c	68		pla		                pla
.936d	68		pla		                pla
.936e	68		pla		                pla
.936f	68		pla		                pla
.9370	60		rts		                rts             ; this must be compiled, so keep before z_leave
.9371					z_leave:
.9371					xt_left_bracket:
.9371	64 16		stz $16		                stz state
.9373	64 17		stz $17		                stz state+1
.9375	60		rts		z_left_bracket: rts
.9376					xt_less_number_sign:
.9376	20 bd 98	jsr $98bd	                jsr xt_pad      ; ( addr )
.9379	b5 00		lda $00,x	                lda 0,x
.937b	85 34		sta $34		                sta tohold
.937d	b5 01		lda $01,x	                lda 1,x
.937f	85 35		sta $35		                sta tohold+1
.9381	e8		inx		                inx
.9382	e8		inx		                inx
.9383					z_less_number_sign:
.9383	60		rts		                rts
.9384					xt_less_than:
.9384	20 e6 d8	jsr $d8e6	                jsr underflow_2
.9387	a0 00		ldy #$00	                ldy #0          ; default false
.9389	20 08 d8	jsr $d808	                jsr compare_16bit
.938c	f0 03		beq $9391	                beq _false
.938e	30 01		bmi $9391	                bmi _false
.9390	88		dey		                dey
.9391					_false:
.9391	98		tya		                tya
.9392	e8		inx		                inx
.9393	e8		inx		                inx
.9394	95 00		sta $00,x	                sta 0,x
.9396	95 01		sta $01,x	                sta 1,x
.9398	60		rts		z_less_than:    rts
.9399					xt_list:
.9399	20 e1 d8	jsr $d8e1	                jsr underflow_1
.939c	20 c6 9e	jsr $9ec6	                jsr xt_scr
.939f	20 7a a1	jsr $a17a	                jsr xt_store
.93a2	20 33 a8	jsr $a833	                jsr xt_editor_l
.93a5	60		rts		z_list:         rts
.93a6					xt_literal:
.93a6	20 e1 d8	jsr $d8e1	                jsr underflow_1
.93a9	a0 93		ldy #$93	                ldy #>literal_runtime
.93ab	a9 b4		lda #$b4	                lda #<literal_runtime
.93ad	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.93b0	20 8a 87	jsr $878a	                jsr xt_comma
.93b3	60		rts		z_literal:      rts
.93b4					literal_runtime:
.93b4	ca		dex		                dex
.93b5	ca		dex		                dex
.93b6	68		pla		                pla             ; LSB
.93b7	85 24		sta $24		                sta tmp1
.93b9	68		pla		                pla             ; MSB
.93ba	85 25		sta $25		                sta tmp1+1
.93bc	a0 01		ldy #$01	                ldy #1
.93be	b1 24		lda ($24),y	                lda (tmp1),y    ; LSB
.93c0	95 00		sta $00,x	                sta 0,x
.93c2	c8		iny		                iny
.93c3	b1 24		lda ($24),y	                lda (tmp1),y    ; MSB
.93c5	95 01		sta $01,x	                sta 1,x
.93c7	98		tya		                tya
.93c8	18		clc		                clc
.93c9	65 24		adc $24		                adc tmp1
.93cb	a8		tay		                tay
.93cc	a5 25		lda $25		                lda tmp1+1
.93ce	69 00		adc #$00	                adc #0
.93d0	48		pha		                pha
.93d1	5a		phy		                phy
.93d2	60		rts		                rts
.93d3					xt_load:
.93d3	20 e1 d8	jsr $d8e1	                jsr underflow_1
.93d6	a0 01		ldy #$01	                ldy #blk_offset+1
.93d8	b1 1e		lda ($1e),y	                lda (up),y
.93da	48		pha		                pha
.93db	88		dey		                dey
.93dc	b1 1e		lda ($1e),y	                lda (up),y
.93de	48		pha		                pha
.93df	b5 00		lda $00,x	                lda 0,x
.93e1	91 1e		sta ($1e),y	                sta (up),y
.93e3	c8		iny		                iny
.93e4	b5 01		lda $01,x	                lda 1,x
.93e6	91 1e		sta ($1e),y	                sta (up),y
.93e8	20 dd 83	jsr $83dd	                jsr xt_block
.93eb	ca		dex		                dex
.93ec	ca		dex		                dex
.93ed	a9 04		lda #$04	                lda #4
.93ef	95 01		sta $01,x	                sta 1,x
.93f1	74 00		stz $00,x	                stz 0,x
.93f3	20 eb 90	jsr $90eb	                jsr load_evaluate
.93f6	a0 00		ldy #$00	                ldy #blk_offset
.93f8	68		pla		                pla
.93f9	91 1e		sta ($1e),y	                sta (up),y
.93fb	c8		iny		                iny
.93fc	68		pla		                pla
.93fd	91 1e		sta ($1e),y	                sta (up),y
.93ff	88		dey		                dey
.9400	11 1e		ora ($1e),y	                ora (up),y
.9402	f0 12		beq $9416	                beq _done
.9404	ca		dex		                dex
.9405	ca		dex		                dex
.9406	a0 00		ldy #$00	                ldy #blk_offset
.9408	b1 1e		lda ($1e),y	                lda (up),y
.940a	95 00		sta $00,x	                sta 0,x
.940c	c8		iny		                iny
.940d	b1 1e		lda ($1e),y	                lda (up),y
.940f	95 01		sta $01,x	                sta 1,x
.9411	20 dd 83	jsr $83dd	                jsr xt_block
.9414	e8		inx		                inx
.9415	e8		inx		                inx
.9416					_done:
.9416	60		rts		z_load:         rts
.9417					xt_loop:
.9417	a0 98		ldy #$98	                ldy #>xt_one
.9419	a9 24		lda #$24	                lda #<xt_one
.941b	20 84 d7	jsr $d784	                jsr cmpl_subroutine     ; drop through to +LOOP
.941e					xt_plus_loop:
.941e	a0 11		ldy #$11	                ldy #plus_loop_runtime_end-plus_loop_runtime
.9420	5a		phy		                phy             ; save counter to adjust CP
.9421					-
.9421	b9 85 94	lda $9485,y	                lda plus_loop_runtime,y
.9424	91 00		sta ($00),y	                sta (cp),y
.9426	88		dey		                dey
.9427	10 f8		bpl $9421	                bpl -
.9429	68		pla		                pla
.942a	18		clc		                clc
.942b	65 00		adc $00		                adc cp
.942d	85 00		sta $00		                sta cp
.942f	a5 01		lda $01		                lda cp+1
.9431	69 00		adc #$00	                adc #0          ; only need carry
.9433	85 01		sta $01		                sta cp+1
.9435	20 8a 87	jsr $878a	                jsr xt_comma
.9438	a9 68		lda #$68	                lda #$68                ; opcode for PLA
.943a	a0 06		ldy #$06	                ldy #6
.943c					-
.943c	91 00		sta ($00),y	                sta (cp),y
.943e	88		dey		                dey
.943f	10 fb		bpl $943c	                bpl -
.9441	a9 06		lda #$06	                lda #6
.9443	18		clc		                clc
.9444	65 00		adc $00		                adc cp
.9446	85 00		sta $00		                sta cp
.9448	a5 01		lda $01		                lda cp+1
.944a	69 00		adc #$00	                adc #0                  ; only need carry
.944c	85 01		sta $01		                sta cp+1
.944e	b5 00		lda $00,x	                lda 0,x
.9450	85 24		sta $24		                sta tmp1
.9452	b5 01		lda $01,x	                lda 1,x
.9454	85 25		sta $25		                sta tmp1+1
.9456	e8		inx		                inx
.9457	e8		inx		                inx
.9458	a5 00		lda $00		                lda cp
.945a	38		sec		                sec
.945b	e9 01		sbc #$01	                sbc #1
.945d	85 26		sta $26		                sta tmp2
.945f	a5 01		lda $01		                lda cp+1
.9461	e9 00		sbc #$00	                sbc #0
.9463	85 27		sta $27		                sta tmp2+1
.9465	a0 00		ldy #$00	                ldy #0
.9467	a9 a9		lda #$a9	                lda #$A9        ; opcode for LDA immediate
.9469	91 24		sta ($24),y	                sta (tmp1),y
.946b	c8		iny		                iny
.946c	a5 27		lda $27		                lda tmp2+1      ; MSB
.946e	91 24		sta ($24),y	                sta (tmp1),y
.9470	c8		iny		                iny
.9471	a9 48		lda #$48	                lda #$48        ; Opcode for PHA
.9473	91 24		sta ($24),y	                sta (tmp1),y
.9475	c8		iny		                iny
.9476	a9 a9		lda #$a9	                lda #$A9        ; opcode for LDA immediate
.9478	91 24		sta ($24),y	                sta (tmp1),y
.947a	c8		iny		                iny
.947b	a5 26		lda $26		                lda tmp2        ; LSB
.947d	91 24		sta ($24),y	                sta (tmp1),y
.947f	c8		iny		                iny
.9480	a9 48		lda #$48	                lda #$48        ; Opcode for PHA
.9482	91 24		sta ($24),y	                sta (tmp1),y
.9484					z_loop:
.9484	60		rts		z_plus_loop:    rts
.9485					plus_loop_runtime:
.9485	18		clc		                clc
.9486	68		pla		                pla             ; LSB of index
.9487	75 00		adc $00,x	                adc 0,x         ; LSB of step
.9489	a8		tay		                tay             ; temporary storage of LSB
.948a	b8		clv		                clv
.948b	68		pla		                pla             ; MSB of index
.948c	75 01		adc $01,x	                adc 1,x         ; MSB of step
.948e	48		pha		                pha             ; put MSB of index back on stack
.948f	98		tya		                tya             ; put LSB of index back on stack
.9490	48		pha		                pha
.9491	e8		inx		                inx             ; dump step from TOS
.9492	e8		inx		                inx
.9493	70 03		bvs $9498	                bvs _hack+3     ; skip over JMP instruction
.9495					_hack:
>9495	4c				                .byte $4C
.9496					plus_loop_runtime_end:
.9496					xt_lshift:
.9496	20 e6 d8	jsr $d8e6	                jsr underflow_2
.9499	b5 00		lda $00,x	                lda 0,x
.949b	29 0f		and #$0f	                and #%00001111
.949d	f0 08		beq $94a7	                beq _done
.949f	a8		tay		                tay
.94a0					_loop:
.94a0	16 02		asl $02,x	                asl 2,x
.94a2	36 03		rol $03,x	                rol 3,x
.94a4	88		dey		                dey
.94a5	d0 f9		bne $94a0	                bne _loop
.94a7					_done:
.94a7	e8		inx		                inx
.94a8	e8		inx		                inx
.94a9	60		rts		z_lshift:       rts
.94aa					xt_m_star:
.94aa	20 e6 d8	jsr $d8e6	                jsr underflow_2
.94ad	b5 01		lda $01,x	                lda 1,x         ; MSB of n1
.94af	55 03		eor $03,x	                eor 3,x         ; MSB of n2
.94b1	48		pha		                pha
.94b2	20 33 81	jsr $8133	                jsr xt_abs
.94b5	20 9b a1	jsr $a19b	                jsr xt_swap
.94b8	20 33 81	jsr $8133	                jsr xt_abs
.94bb	20 e9 a5	jsr $a5e9	                jsr xt_um_star          ; ( d )
.94be	68		pla		                pla
.94bf	10 03		bpl $94c4	                bpl _done
.94c1	20 5d 8b	jsr $8b5d	                jsr xt_dnegate
.94c4					_done:
.94c4	60		rts		z_m_star:       rts
.94c5					xt_marker:
.94c5	20 23 d8	jsr $d823	                jsr current_to_dp
.94c8	a5 02		lda $02		                lda dp
.94ca	48		pha		                pha
.94cb	a5 03		lda $03		                lda dp+1
.94cd	48		pha		                pha
.94ce	a5 00		lda $00		                lda cp
.94d0	48		pha		                pha
.94d1	a5 01		lda $01		                lda cp+1
.94d3	48		pha		                pha
.94d4	20 85 89	jsr $8985	                jsr xt_create
.94d7	a5 00		lda $00		                lda cp          ; LSB
.94d9	38		sec		                sec
.94da	e9 02		sbc #$02	                sbc #2
.94dc	85 00		sta $00		                sta cp
.94de	a5 01		lda $01		                lda cp+1        ; MSB
.94e0	e9 00		sbc #$00	                sbc #0          ; we only care about the borrow
.94e2	85 01		sta $01		                sta cp+1
.94e4	a0 95		ldy #$95	                ldy #>marker_runtime
.94e6	a9 03		lda #$03	                lda #<marker_runtime
.94e8	20 90 d7	jsr $d790	                jsr cmpl_word
.94eb	7a		ply		                ply                     ; MSB
.94ec	68		pla		                pla                     ; LSB
.94ed	20 90 d7	jsr $d790	                jsr cmpl_word
.94f0	7a		ply		                ply                     ; MSB
.94f1	68		pla		                pla                     ; LSB
.94f2	20 90 d7	jsr $d790	                jsr cmpl_word
.94f5	a0 04		ldy #$04	                ldy #4                  ; Start at CURRENT
.94f7					_marker_loop:
.94f7	b1 1e		lda ($1e),y	                lda (up),y
.94f9	20 94 d7	jsr $d794	                jsr cmpl_a
.94fc	c8		iny		                iny
.94fd	98		tya		                tya
.94fe	c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.9500	d0 f5		bne $94f7	                bne _marker_loop
.9502	60		rts		z_marker:       rts
.9503					marker_runtime:
.9503	68		pla		                pla
.9504	85 24		sta $24		                sta tmp1        ; LSB of address
.9506	68		pla		                pla
.9507	85 25		sta $25		                sta tmp1+1      ; MSB of address
.9509	e6 24		inc $24		                inc tmp1
.950b	d0 02		bne $950f	                bne +
.950d	e6 25		inc $25		                inc tmp1+1
.950f					+
.950f	a0 00		ldy #$00	                ldy #0
.9511	b1 24		lda ($24),y	                lda (tmp1),y
.9513	85 00		sta $00		                sta cp
.9515	c8		iny		                iny
.9516	b1 24		lda ($24),y	                lda (tmp1),y
.9518	85 01		sta $01		                sta cp+1
.951a	c8		iny		                iny
.951b	b1 24		lda ($24),y	                lda (tmp1),y
.951d	85 02		sta $02		                sta dp
.951f	c8		iny		                iny
.9520	b1 24		lda ($24),y	                lda (tmp1),y
.9522	85 03		sta $03		                sta dp+1
.9524	a0 04		ldy #$04	                ldy #4
.9526					_marker_restore_loop:
.9526	b1 24		lda ($24),y	                lda (tmp1), y
.9528	91 1e		sta ($1e),y	                sta (up), y
.952a	c8		iny		                iny
.952b	98		tya		                tya
.952c	c9 28		cmp #$28	                cmp #40                 ; One past the end of the search order.
.952e	d0 f6		bne $9526	                bne _marker_restore_loop
.9530	20 36 d8	jsr $d836	                jsr dp_to_current       ; Move the CURRENT DP back.
.9533	60		rts		                rts
.9534					xt_max:
.9534	20 e6 d8	jsr $d8e6	                jsr underflow_2
.9537	b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.9539	d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets the carry
.953b	b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.953d	f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.953f	50 02		bvc $9543	                bvc _no_overflow
.9541	49 80		eor #$80	                eor #$80        ; complement negative flag
.9543					_no_overflow:
.9543	30 08		bmi $954d	                bmi _keep_nos
.9545	b5 00		lda $00,x	                lda 0,x
.9547	95 02		sta $02,x	                sta 2,x
.9549	b5 01		lda $01,x	                lda 1,x
.954b	95 03		sta $03,x	                sta 3,x
.954d					_keep_nos:
.954d	e8		inx		                inx
.954e	e8		inx		                inx
.954f	60		rts		z_max:          rts
.9550					xt_min:
.9550	20 e6 d8	jsr $d8e6	                jsr underflow_2
.9553	b5 00		lda $00,x	                lda 0,x         ; LSB of TOS
.9555	d5 02		cmp $02,x	                cmp 2,x         ; LSB of NOS, this sets carry
.9557	b5 01		lda $01,x	                lda 1,x         ; MSB of TOS
.9559	f5 03		sbc $03,x	                sbc 3,x         ; MSB of NOS
.955b	50 02		bvc $955f	                bvc _no_overflow
.955d	49 80		eor #$80	                eor #$80
.955f					_no_overflow:
.955f	10 08		bpl $9569	                bpl _keep_nos
.9561	b5 00		lda $00,x	                lda 0,x
.9563	95 02		sta $02,x	                sta 2,x
.9565	b5 01		lda $01,x	                lda 1,x
.9567	95 03		sta $03,x	                sta 3,x
.9569					_keep_nos:
.9569	e8		inx		                inx
.956a	e8		inx		                inx
.956b	60		rts		z_min:          rts
.956c					xt_minus:
.956c	20 e6 d8	jsr $d8e6	                jsr underflow_2
.956f	38		sec		                sec
.9570	b5 02		lda $02,x	                lda 2,x         ; LSB
.9572	f5 00		sbc $00,x	                sbc 0,x
.9574	95 02		sta $02,x	                sta 2,x
.9576	b5 03		lda $03,x	                lda 3,x         ; MSB
.9578	f5 01		sbc $01,x	                sbc 1,x
.957a	95 03		sta $03,x	                sta 3,x
.957c	e8		inx		                inx
.957d	e8		inx		                inx
.957e	60		rts		z_minus:        rts
.957f					xt_minus_leading:
.957f	20 e6 d8	jsr $d8e6	                jsr underflow_2
.9582					_loop:
.9582	b5 00		lda $00,x	                lda 0,x
.9584	15 01		ora $01,x	                ora 1,x
.9586	f0 0f		beq $9597	                beq _done
.9588	a1 02		lda ($02,x)	                lda (2,x)               ; get first character
.958a	20 d4 d8	jsr $d8d4	                jsr is_whitespace
.958d	90 08		bcc $9597	                bcc _done
.958f	20 24 98	jsr $9824	                jsr xt_one              ; ( addr u 1 )
.9592	20 06 a0	jsr $a006	                jsr xt_slash_string     ; ( addr+ u-1 )
.9595	80 eb		bra $9582	                bra _loop
.9597					_done:
.9597					z_minus_leading:
.9597	60		rts		                rts
.9598					xt_minus_trailing:
.9598	20 e6 d8	jsr $d8e6	                jsr underflow_2
.959b	b5 00		lda $00,x	                lda 0,x         ; LSB of n
.959d	15 01		ora $01,x	                ora 1,x         ; MSB of n
.959f	f0 33		beq $95d4	                beq _done
.95a1	18		clc		                clc
.95a2	b5 02		lda $02,x	                lda 2,x         ; LSB of addr
.95a4	75 00		adc $00,x	                adc 0,x
.95a6	85 24		sta $24		                sta tmp1
.95a8	b5 03		lda $03,x	                lda 3,x         ; MSB of addr
.95aa	75 01		adc $01,x	                adc 1,x
.95ac	85 25		sta $25		                sta tmp1+1
.95ae	a5 24		lda $24		                lda tmp1
.95b0	d0 02		bne $95b4	                bne +
.95b2	c6 25		dec $25		                dec tmp1+1
.95b4					+
.95b4	c6 24		dec $24		                dec tmp1
.95b6					_loop:
.95b6	b2 24		lda ($24)	                lda (tmp1)
.95b8	c9 20		cmp #$20	                cmp #AscSP
.95ba	d0 18		bne $95d4	                bne _done
.95bc	a5 24		lda $24		                lda tmp1
.95be	d0 02		bne $95c2	                bne +
.95c0	c6 25		dec $25		                dec tmp1+1
.95c2					+
.95c2	c6 24		dec $24		                dec tmp1
.95c4	b5 00		lda $00,x	                lda 0,x
.95c6	d0 02		bne $95ca	                bne +
.95c8	d6 01		dec $01,x	                dec 1,x
.95ca					+
.95ca	d6 00		dec $00,x	                dec 0,x
.95cc	b5 00		lda $00,x	                lda 0,x
.95ce	15 01		ora $01,x	                ora 1,x
.95d0	f0 02		beq $95d4	                beq _done       ; Count has reached zero - we're done!
.95d2	80 e2		bra $95b6	                bra _loop
.95d4					_done:
.95d4					z_minus_trailing:
.95d4	60		rts		                rts
.95d5					xt_mod:
.95d5	20 e6 d8	jsr $d8e6	                jsr underflow_2
.95d8	20 ee 9f	jsr $9fee	                jsr xt_slash_mod
.95db	e8		inx		                inx             ; DROP
.95dc	e8		inx		                inx
.95dd					z_mod:
.95dd	60		rts		                rts
.95de					xt_move:
.95de	b5 03		lda $03,x	                lda 3,x                 ; MSB of addr2
.95e0	d5 05		cmp $05,x	                cmp 5,x                 ; MSB of addr1
.95e2	f0 05		beq $95e9	                beq _lsb                ; wasn't helpful, move to LSB
.95e4	b0 0e		bcs $95f4	                bcs _to_move_up         ; we want CMOVE>
.95e6	4c b5 86	jmp $86b5	                jmp xt_cmove            ; JSR/RTS
.95e9					_lsb:
.95e9	b5 02		lda $02,x	                lda 2,x                 ; LSB of addr2
.95eb	d5 04		cmp $04,x	                cmp 4,x                 ; LSB of addr1
.95ed	f0 08		beq $95f7	                beq _equal              ; LSB is equal as well
.95ef	b0 03		bcs $95f4	                bcs _to_move_up         ; we want CMOVE>
.95f1	4c b5 86	jmp $86b5	                jmp xt_cmove            ; JSR/RTS
.95f4					_to_move_up:
.95f4	4c f0 86	jmp $86f0	                jmp xt_cmove_up         ; JSR/RTS
.95f7					_equal:
.95f7	8a		txa		                txa
.95f8	18		clc		                clc
.95f9	69 06		adc #$06	                adc #6
.95fb	aa		tax		                tax
.95fc	60		rts		z_move:         rts
.95fd					xt_name_to_int:
.95fd	20 e1 d8	jsr $d8e1	                jsr underflow_1
.9600	b5 00		lda $00,x	                lda 0,x
.9602	18		clc		                clc
.9603	69 04		adc #$04	                adc #4
.9605	85 28		sta $28		                sta tmp3
.9607	b5 01		lda $01,x	                lda 1,x
.9609	90 01		bcc $960c	                bcc _done
.960b	1a		inc a		                ina
.960c					_done:
.960c	85 29		sta $29		                sta tmp3+1
.960e	a0 00		ldy #$00	                ldy #0
.9610	b1 28		lda ($28),y	                lda (tmp3),y
.9612	95 00		sta $00,x	                sta 0,x
.9614	c8		iny		                iny
.9615	b1 28		lda ($28),y	                lda (tmp3),y
.9617	95 01		sta $01,x	                sta 1,x
.9619	60		rts		z_name_to_int:  rts
.961a					xt_name_to_string:
.961a	20 e1 d8	jsr $d8e1	                jsr underflow_1
.961d	ca		dex		                dex
.961e	ca		dex		                dex
.961f	a1 02		lda ($02,x)	                lda (2,x)
.9621	95 00		sta $00,x	                sta 0,x
.9623	74 01		stz $01,x	                stz 1,x
.9625	b5 02		lda $02,x	                lda 2,x         ; LSB
.9627	18		clc		                clc
.9628	69 08		adc #$08	                adc #8
.962a	a8		tay		                tay
.962b	b5 03		lda $03,x	                lda 3,x         ; MSB
.962d	69 00		adc #$00	                adc #0          ; just need carry
.962f	95 03		sta $03,x	                sta 3,x
.9631	94 02		sty $02,x	                sty 2,x
.9633					z_name_to_string:
.9633	60		rts		                rts
.9634					xt_nc_limit:
.9634	ca		dex		                dex
.9635	ca		dex		                dex
.9636	a9 1a		lda #$1a	                lda #<nc_limit
.9638	95 00		sta $00,x	                sta 0,x
.963a	a9 00		lda #$00	                lda #>nc_limit
.963c	95 01		sta $01,x	                sta 1,x
.963e	60		rts		z_nc_limit:     rts
.963f					xt_negate:
.963f	20 e1 d8	jsr $d8e1	                jsr underflow_1
.9642	a9 00		lda #$00	        	lda #0
.9644	38		sec		                sec
.9645	f5 00		sbc $00,x	                sbc 0,x         ; LSB
.9647	95 00		sta $00,x	                sta 0,x
.9649	a9 00		lda #$00	                lda #0
.964b	f5 01		sbc $01,x	                sbc 1,x         ; MSB
.964d	95 01		sta $01,x	                sta 1,x
.964f	60		rts		z_negate:       rts
.9650					xt_never_native:
.9650	20 23 d8	jsr $d823	                jsr current_to_dp
.9653	a0 01		ldy #$01	                ldy #1          ; offset for status byte
.9655	b1 02		lda ($02),y	                lda (dp),y
.9657	09 08		ora #$08	                ora #NN         ; Make sure NN flag is set
.9659	29 fd		and #$fd	                and #$ff-AN     ; and AN flag is clear.
.965b	91 02		sta ($02),y	                sta (dp),y
.965d					z_never_native:
.965d	60		rts		                rts
.965e					xt_nip:
.965e	20 e6 d8	jsr $d8e6	                jsr underflow_2
.9661	b5 00		lda $00,x	                lda 0,x         ; LSB
.9663	95 02		sta $02,x	                sta 2,x
.9665	b5 01		lda $01,x	                lda 1,x         ; MSB
.9667	95 03		sta $03,x	                sta 3,x
.9669	e8		inx		                inx
.966a	e8		inx		                inx
.966b	60		rts		z_nip:          rts
.966c					xt_not_equals:
.966c	20 e6 d8	jsr $d8e6	                jsr underflow_2
.966f	a0 00		ldy #$00	                ldy #0                  ; default is true
.9671	b5 00		lda $00,x	                lda 0,x                 ; LSB
.9673	d5 02		cmp $02,x	                cmp 2,x
.9675	d0 0a		bne $9681	                bne _not_equal
.9677	b5 01		lda $01,x	                lda 1,x                 ; MSB
.9679	d5 03		cmp $03,x	                cmp 3,x
.967b	d0 04		bne $9681	                bne _not_equal
.967d	a9 ff		lda #$ff	                lda #$FF
.967f	80 01		bra $9682	                bra _done
.9681					_not_equal:
.9681	88		dey		                dey                     ; drop thru to done
.9682					_done:
.9682	98		tya		                tya
.9683	e8		inx		                inx
.9684	e8		inx		                inx
.9685	95 00		sta $00,x	                sta 0,x
.9687	95 01		sta $01,x	                sta 1,x
.9689	60		rts		z_not_equals:   rts
.968a					xt_not_rote:
.968a	20 eb d8	jsr $d8eb	                jsr underflow_3
.968d	b4 01		ldy $01,x	                ldy 1,x         ; MSB first
.968f	b5 03		lda $03,x	                lda 3,x
.9691	95 01		sta $01,x	                sta 1,x
.9693	b5 05		lda $05,x	                lda 5,x
.9695	95 03		sta $03,x	                sta 3,x
.9697	94 05		sty $05,x	                sty 5,x
.9699	b4 00		ldy $00,x	                ldy 0,x         ; LSB second
.969b	b5 02		lda $02,x	                lda 2,x
.969d	95 00		sta $00,x	                sta 0,x
.969f	b5 04		lda $04,x	                lda 4,x
.96a1	95 02		sta $02,x	                sta 2,x
.96a3	94 04		sty $04,x	                sty 4,x
.96a5	60		rts		z_not_rote:     rts
.96a6					xt_number:
.96a6	20 e6 d8	jsr $d8e6	                jsr underflow_2
.96a9	64 2a		stz $2a		                stz tmpdsp      ; flag for double
.96ab	64 2b		stz $2b		                stz tmpdsp+1    ; flag for minus
.96ad	a5 18		lda $18		                lda base
.96af	48		pha		                pha
.96b0	20 a5 a3	jsr $a3a5	                jsr xt_two_dup
.96b3	a1 02		lda ($02,x)	                lda (2,x)
.96b5					_check_dec:
.96b5	c9 23		cmp #$23	                cmp #$23        ; ASCII for "#"
.96b7	d0 04		bne $96bd	                bne _check_hex
.96b9	a9 0a		lda #$0a	                lda #$0A
.96bb	80 42		bra $96ff	                bra _base_changed
.96bd					_check_hex:
.96bd	c9 24		cmp #$24	                cmp #$24        ; ASCII for "$"
.96bf	d0 04		bne $96c5	                bne _check_binary
.96c1	a9 10		lda #$10	                lda #$10
.96c3	80 3a		bra $96ff	                bra _base_changed
.96c5					_check_binary:
.96c5	c9 25		cmp #$25	                cmp #$25        ; ASCII for "%"
.96c7	d0 04		bne $96cd	                bne _check_char
.96c9	a9 02		lda #$02	                lda #$02
.96cb	80 32		bra $96ff	                bra _base_changed
.96cd					_check_char:
.96cd	c9 27		cmp #$27	                cmp #$27        ; ASCII for "'"
.96cf	d0 3a		bne $970b	                bne _check_minus
.96d1	b5 00		lda $00,x	                lda 0,x         ; Get the length
.96d3	c9 03		cmp #$03	                cmp #$03
.96d5	d0 26		bne $96fd	                bne _not_a_char
.96d7	b5 01		lda $01,x	                lda 1,x
.96d9	d0 22		bne $96fd	                bne _not_a_char ; No compare needed to check for non-zero.
.96db	b5 02		lda $02,x	                lda 2,x         ; LSB of address
.96dd	18		clc		                clc
.96de	69 02		adc #$02	                adc #2          ; length of string
.96e0	85 2c		sta $2c		                sta tmptos
.96e2	b5 03		lda $03,x	                lda 3,x
.96e4	69 00		adc #$00	                adc #0          ; only need carry
.96e6	85 2d		sta $2d		                sta tmptos+1
.96e8	b2 2c		lda ($2c)	                lda (tmptos)
.96ea	c9 27		cmp #$27	                cmp #$27        ; ASCII for "'"
.96ec	d0 0f		bne $96fd	                bne _not_a_char
.96ee	f6 02		inc $02,x	                inc 2,x
.96f0	d0 02		bne $96f4	                bne +
.96f2	f6 03		inc $03,x	                inc 3,x
.96f4					+
.96f4	a1 02		lda ($02,x)	                lda (2,x)
.96f6	95 02		sta $02,x	                sta 2,x
.96f8	74 03		stz $03,x	                stz 3,x
.96fa	4c 7b 97	jmp $977b	                jmp _drop_original_string ; Single flag will drop the TOS for us.
.96fd					_not_a_char:
.96fd	80 5a		bra $9759	                bra _number_error
.96ff					_base_changed:
.96ff	85 18		sta $18		                sta base        ; Switch to the new base
.9701	f6 02		inc $02,x	                inc 2,x         ; start one character later
.9703	d0 02		bne $9707	                bne +
.9705	f6 03		inc $03,x	                inc 3,x
.9707					+
.9707	d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9709	a1 02		lda ($02,x)	                lda (2,x)       ; Load the first char again
.970b					_check_minus:
.970b	c9 2d		cmp #$2d	                cmp #$2D        ; ASCII for "-"
.970d	d0 0a		bne $9719	                bne _check_dot
.970f	c6 2b		dec $2b		                dec tmpdsp+1
.9711	f6 02		inc $02,x	                inc 2,x         ; start one character later
.9713	d0 02		bne $9717	                bne +
.9715	f6 03		inc $03,x	                inc 3,x
.9717					+
.9717	d6 00		dec $00,x	                dec 0,x         ; decrease string length by one
.9719					_check_dot:
.9719	b5 02		lda $02,x	                lda 2,x         ; LSB of address
.971b	18		clc		                clc
.971c	75 00		adc $00,x	                adc 0,x         ; length of string
.971e	85 2c		sta $2c		                sta tmptos
.9720	b5 03		lda $03,x	                lda 3,x
.9722	69 00		adc #$00	                adc #0          ; only need carry
.9724	85 2d		sta $2d		                sta tmptos+1
.9726	a5 2c		lda $2c		                lda tmptos
.9728	d0 02		bne $972c	                bne +
.972a	c6 2d		dec $2d		                dec tmptos+1
.972c					+
.972c	c6 2c		dec $2c		                dec tmptos
.972e	b2 2c		lda ($2c)	                lda (tmptos)
.9730	c9 2e		cmp #$2e	                cmp #'.'
.9732	d0 04		bne $9738	                bne _main
.9734	c6 2a		dec $2a		                dec tmpdsp
.9736	d6 00		dec $00,x	                dec 0,x
.9738					_main:
.9738	ca		dex		                dex
.9739	ca		dex		                dex
.973a	ca		dex		                dex
.973b	ca		dex		                dex
.973c	b5 04		lda $04,x	                lda 4,x         ; LSB of length
.973e	95 00		sta $00,x	                sta 0,x
.9740	74 01		stz $01,x	                stz 1,x         ; MSB, max length 255 chars
.9742	b5 06		lda $06,x	                lda 6,x         ; LSB of address
.9744	95 02		sta $02,x	                sta 2,x
.9746	b5 07		lda $07,x	                lda 7,x         ; MSB of address
.9748	95 03		sta $03,x	                sta 3,x
.974a	74 04		stz $04,x	                stz 4,x         ; clear space for ud
.974c	74 05		stz $05,x	                stz 5,x
.974e	74 06		stz $06,x	                stz 6,x
.9750	74 07		stz $07,x	                stz 7,x
.9752	20 aa a2	jsr $a2aa	                jsr xt_to_number        ; (ud addr u -- ud addr u )
.9755	b5 00		lda $00,x	                lda 0,x
.9757	f0 1e		beq $9777	                beq _all_converted
.9759					_number_error:
.9759	20 9d a3	jsr $a39d	                jsr xt_two_drop ; >NUMBER modified addr u
.975c	20 9d a3	jsr $a39d	                jsr xt_two_drop ; ud   (partially converted number)
.975f	a9 3e		lda #$3e	                lda #$3E        ; ASCII for ">"
.9761	20 12 8e	jsr $8e12	                jsr emit_a
.9764	20 f0 a4	jsr $a4f0	                jsr xt_type
.9767	a9 3c		lda #$3c	                lda #$3C        ; ASCII for "<"
.9769	20 12 8e	jsr $8e12	                jsr emit_a
.976c	20 0b a1	jsr $a10b	                jsr xt_space
.976f	68		pla		                pla
.9770	85 18		sta $18		                sta base
.9772	a9 08		lda #$08	                lda #err_syntax
.9774	4c f7 d8	jmp $d8f7	                jmp error
.9777					_all_converted:
.9777	e8		inx		                inx ; Drop the current addr u
.9778	e8		inx		                inx
.9779	e8		inx		                inx
.977a	e8		inx		                inx
.977b					_drop_original_string:
.977b	20 6b a4	jsr $a46b	                jsr xt_two_swap  ; Drop the original addr u
.977e	20 9d a3	jsr $a39d	                jsr xt_two_drop  ; (was saved for unknown word error message)
.9781	a5 2a		lda $2a		                lda tmpdsp      ; flag for double
.9783	f0 0d		beq $9792	                beq _single
.9785	a9 20		lda #$20	                lda #%00100000
.9787	04 20		tsb $20		                tsb status
.9789	a5 2b		lda $2b		                lda tmpdsp+1
.978b	f0 12		beq $979f	                beq _done       ; no minus, all done
.978d	20 5d 8b	jsr $8b5d	                jsr xt_dnegate
.9790	80 0d		bra $979f	                bra _done
.9792					_single:
.9792	e8		inx		                inx
.9793	e8		inx		                inx
.9794	a9 20		lda #$20	                lda #%00100000
.9796	14 20		trb $20		                trb status
.9798	a5 2b		lda $2b		                lda tmpdsp+1
.979a	f0 03		beq $979f	                beq _done       ; no minus, all done
.979c	20 3f 96	jsr $963f	                jsr xt_negate
.979f					_done:
.979f	68		pla		                pla
.97a0	85 18		sta $18		                sta base
.97a2	60		rts		z_number:       rts
.97a3					xt_number_sign:
.97a3	20 e6 d8	jsr $d8e6	                jsr underflow_2         ; double number
.97a6	20 a3 83	jsr $83a3	                jsr xt_base
.97a9	20 9c 8f	jsr $8f9c	                jsr xt_fetch            ; ( ud1 base )
.97ac	20 5d a3	jsr $a35d	                jsr xt_to_r             ; >r
.97af	20 95 a7	jsr $a795	                jsr xt_zero             ; 0
.97b2	20 99 9a	jsr $9a99	                jsr xt_r_fetch          ; r@
.97b5	20 a7 a5	jsr $a5a7	                jsr xt_um_slash_mod     ; um/mod
.97b8	20 73 9b	jsr $9b73	                jsr xt_rot              ; rot
.97bb	20 73 9b	jsr $9b73	                jsr xt_rot              ; rot
.97be	20 ae 9a	jsr $9aae	                jsr xt_r_from           ; r>
.97c1	20 a7 a5	jsr $a5a7	                jsr xt_um_slash_mod     ; um/mod
.97c4	20 73 9b	jsr $9b73	                jsr xt_rot              ; rot
.97c7	20 73 9b	jsr $9b73	                jsr xt_rot              ; ( ud rem )
.97ca	b5 00		lda $00,x	                lda 0,x
.97cc	a8		tay		                tay
.97cd	b9 c0 d4	lda $d4c0,y	                lda s_abc_upper,y
.97d0	95 00		sta $00,x	                sta 0,x
.97d2	74 01		stz $01,x	                stz 1,x                 ; paranoid; now ( ud char )
.97d4	20 f3 91	jsr $91f3	                jsr xt_hold
.97d7					z_number_sign:
.97d7	60		rts		                rts
.97d8					xt_number_sign_greater:
.97d8	20 e6 d8	jsr $d8e6	                jsr underflow_2         ; double number
.97db	a5 34		lda $34		                lda tohold
.97dd	95 00		sta $00,x	                sta 0,x         ; LSB of tohold
.97df	95 02		sta $02,x	                sta 2,x
.97e1	a5 35		lda $35		                lda tohold+1
.97e3	95 01		sta $01,x	                sta 1,x         ; MSB of addr
.97e5	95 03		sta $03,x	                sta 3,x         ; ( addr addr )
.97e7	20 bd 98	jsr $98bd	                jsr xt_pad      ; ( addr addr pad )
.97ea	38		sec		                sec
.97eb	b5 00		lda $00,x	                lda 0,x         ; LSB of pad address
.97ed	f5 02		sbc $02,x	                sbc 2,x
.97ef	95 02		sta $02,x	                sta 2,x
.97f1	b5 01		lda $01,x	                lda 1,x         ; MSB, which should always be zero
.97f3	f5 03		sbc $03,x	                sbc 3,x
.97f5	95 03		sta $03,x	                sta 3,x         ; ( addr u pad )
.97f7	e8		inx		                inx
.97f8	e8		inx		                inx
.97f9					z_number_sign_greater:
.97f9	60		rts		                rts
.97fa					xt_number_sign_s:
.97fa	20 e6 d8	jsr $d8e6	                jsr underflow_2
.97fd					_loop:
.97fd	20 a3 97	jsr $97a3	                jsr xt_number_sign
.9800	b5 00		lda $00,x	                lda 0,x
.9802	15 01		ora $01,x	                ora 1,x
.9804	15 02		ora $02,x	                ora 2,x
.9806	15 03		ora $03,x	                ora 3,x
.9808	d0 f3		bne $97fd	                bne _loop
.980a					z_number_sign_s:
.980a	60		rts		                rts
.980b					xt_of:
.980b	a0 98		ldy #$98	                ldy #>xt_over
.980d	a9 af		lda #$af	                lda #<xt_over
.980f	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.9812	a0 8e		ldy #$8e	                ldy #>xt_equal
.9814	a9 ea		lda #$ea	                lda #<xt_equal
.9816	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.9819	20 1f 92	jsr $921f	                jsr xt_if
.981c	a0 8d		ldy #$8d	                ldy #>xt_drop
.981e	a9 4a		lda #$4a	                lda #<xt_drop
.9820	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.9823	60		rts		z_of:           rts
.9824					xt_editor_wordlist:
.9824					xt_one:
.9824	ca		dex		                dex
.9825	ca		dex		                dex
.9826	a9 01		lda #$01	                lda #1
.9828	95 00		sta $00,x	                sta 0,x
.982a	74 01		stz $01,x	                stz 1,x
.982c					z_editor_wordlist:
.982c					z_one:
.982c	60		rts		                rts
.982d					xt_one_minus:
.982d	20 e1 d8	jsr $d8e1	                jsr underflow_1
.9830	b5 00		lda $00,x	                lda 0,x
.9832	d0 02		bne $9836	                bne +
.9834	d6 01		dec $01,x	                dec 1,x
.9836					+
.9836	d6 00		dec $00,x	                dec 0,x
.9838	60		rts		z_one_minus:    rts
.9839					xt_char_plus:
.9839					xt_one_plus:
.9839	20 e1 d8	jsr $d8e1	                jsr underflow_1
.983c	f6 00		inc $00,x	                inc 0,x
.983e	d0 02		bne $9842	                bne _done
.9840	f6 01		inc $01,x	                inc 1,x
.9842					_done:
.9842					z_char_plus:
.9842	60		rts		z_one_plus:     rts
.9843					xt_only:
.9843	ca		dex		                dex
.9844	ca		dex		                dex
.9845	a9 ff		lda #$ff	                lda #$FF
.9847	95 00		sta $00,x	                sta 0,x
.9849	95 01		sta $01,x	                sta 1,x
.984b	20 37 9d	jsr $9d37	                jsr xt_set_order
.984e	60		rts		z_only:         rts
.984f					xt_or:
.984f	20 e6 d8	jsr $d8e6	                jsr underflow_2
.9852	b5 00		lda $00,x	                lda 0,x
.9854	15 02		ora $02,x	                ora 2,x
.9856	95 02		sta $02,x	                sta 2,x
.9858	b5 01		lda $01,x	                lda 1,x
.985a	15 03		ora $03,x	                ora 3,x
.985c	95 03		sta $03,x	                sta 3,x
.985e	e8		inx		                inx
.985f	e8		inx		                inx
.9860	60		rts		z_or:           rts
.9861					xt_order:
.9861	20 7f 89	jsr $897f	                jsr xt_cr
.9864	20 50 91	jsr $9150	                jsr xt_get_order        ; ( wid_n ... wid_1 n )
.9867	b5 00		lda $00,x	                lda 0,x                 ; assumes no more than 255 wordlists
.9869	f0 1e		beq $9889	                beq _drop_done
.986b					_have_wordlists:
.986b	a8		tay		                tay
.986c					_loop:
.986c	e8		inx		                inx
.986d	e8		inx		                inx                     ; DROP, now ( wid_n ... wid_1 )
.986e	b5 00		lda $00,x	                lda 0,x
.9870	5a		phy		                phy
.9871	20 8c 98	jsr $988c	                jsr order_print_wid_string   ; internal helper function
.9874	7a		ply		                ply
.9875	88		dey		                dey
.9876	d0 f4		bne $986c	                bne _loop
.9878	20 0b a1	jsr $a10b	                jsr xt_space
.987b	20 0b a1	jsr $a10b	                jsr xt_space
.987e	20 45 91	jsr $9145	                jsr xt_get_current      ; ( wid )
.9881	b5 00		lda $00,x	                lda 0,x
.9883	20 8c 98	jsr $988c	                jsr order_print_wid_string
.9886	20 7f 89	jsr $897f	                jsr xt_cr
.9889					_drop_done:
.9889	e8		inx		                inx
.988a	e8		inx		                inx
.988b					z_order:
.988b	60		rts		                rts
.988c					order_print_wid_string:
.988c	c9 04		cmp #$04	                cmp #4
.988e	90 09		bcc $9899	                bcc _output_string      ; less than 4, print a real string
.9890	ca		dex		                dex
.9891	ca		dex		                dex
.9892	95 00		sta $00,x	                sta 0,x
.9894	74 01		stz $01,x	                stz 1,x
.9896	4c 1b a5	jmp $a51b	                jmp xt_u_dot            ; JSR/RTS as this routine is not compiled
.9899					_output_string:
.9899	a8		tay		                tay
.989a	b9 a0 98	lda $98a0,y	                lda _wid_data,y
.989d	4c 1d d9	jmp $d91d	                jmp print_string_no_lf  ; JSR/RTS as this routine is not compiled
.98a0					_wid_data:
>98a0	04				        .byte str_wid_forth            ; WID 0: "Forth"
>98a1	05				        .byte str_wid_editor           ; WID 1: "Editor"
>98a2	06				        .byte str_wid_assembler        ; WID 2: "Assembler"
>98a3	07				        .byte str_wid_root             ; WID 3: "Root"
.98a4					xt_output:
.98a4	ca		dex		                dex
.98a5	ca		dex		                dex
.98a6	a9 10		lda #$10	                lda #<output
.98a8	95 00		sta $00,x	                sta 0,x
.98aa	a9 00		lda #$00	                lda #>output
.98ac	95 01		sta $01,x	                sta 1,x
.98ae	60		rts		z_output:       rts
.98af					xt_over:
.98af	20 e6 d8	jsr $d8e6	                jsr underflow_2
.98b2	ca		dex		                dex
.98b3	ca		dex		                dex
.98b4	b5 04		lda $04,x	                lda 4,x         ; LSB
.98b6	95 00		sta $00,x	                sta 0,x
.98b8	b5 05		lda $05,x	                lda 5,x         ; MSB
.98ba	95 01		sta $01,x	                sta 1,x
.98bc	60		rts		z_over:         rts
.98bd					xt_pad:
.98bd	ca		dex		                dex
.98be	ca		dex		                dex
.98bf	a5 00		lda $00		                lda cp
.98c1	18		clc		                clc
.98c2	69 ff		adc #$ff	                adc #padoffset  ; assumes padoffset one byte in size
.98c4	95 00		sta $00,x	                sta 0,x
.98c6	a5 01		lda $01		                lda cp+1
.98c8	69 00		adc #$00	                adc #0          ; only need carry
.98ca	95 01		sta $01,x	                sta 1,x
.98cc	60		rts		z_pad:          rts
.98cd					xt_page:
.98cd	a9 1b		lda #$1b	                lda #AscESC
.98cf	20 12 8e	jsr $8e12	                jsr emit_a
.98d2	a9 5b		lda #$5b	                lda #$5B        ; ASCII for "["
.98d4	20 12 8e	jsr $8e12	                jsr emit_a
.98d7	a9 32		lda #$32	                lda #'2'
.98d9	20 12 8e	jsr $8e12	                jsr emit_a
.98dc	a9 4a		lda #$4a	                lda #'J'
.98de	20 12 8e	jsr $8e12	                jsr emit_a
.98e1	20 95 a7	jsr $a795	                jsr xt_zero
.98e4	20 95 a7	jsr $a795	                jsr xt_zero
.98e7	20 4a 83	jsr $834a	                jsr xt_at_xy
.98ea	60		rts		z_page:         rts
.98eb					xt_paren:
.98eb	ca		dex		                dex
.98ec	ca		dex		                dex
.98ed	a9 29		lda #$29	                lda #41     ; Right parenthesis
.98ef	95 00		sta $00,x	                sta 0,x
.98f1	74 01		stz $01,x	                stz 1,x
.98f3	20 56 99	jsr $9956	                jsr xt_parse
.98f6	e8		inx		                inx
.98f7	e8		inx		                inx
.98f8	e8		inx		                inx
.98f9	e8		inx		                inx
.98fa	60		rts		z_paren:        rts
.98fb					xt_parse_name:
.98fb	a5 0a		lda $0a		                lda ciblen              ; LSB of counter
.98fd	38		sec		                sec
.98fe	e5 0c		sbc $0c		                sbc toin
.9900	85 24		sta $24		                sta tmp1
.9902	a5 0b		lda $0b		                lda ciblen+1            ; MSB
.9904	e5 0d		sbc $0d		                sbc toin+1
.9906	85 25		sta $25		                sta tmp1+1
.9908	a5 24		lda $24		                lda tmp1
.990a	05 25		ora $25		                ora tmp1+1
.990c	f0 28		beq $9936	                beq _empty_line
.990e	a5 08		lda $08		                lda cib
.9910	18		clc		                clc
.9911	65 0c		adc $0c		                adc toin
.9913	85 26		sta $26		                sta tmp2                ; LSB of first character
.9915	a5 09		lda $09		                lda cib+1
.9917	65 0d		adc $0d		                adc toin+1
.9919	85 27		sta $27		                sta tmp2+1              ; MSB
.991b					_skip_loop:
.991b	b2 26		lda ($26)	                lda (tmp2)              ; work copy of cib
.991d	20 d4 d8	jsr $d8d4	                jsr is_whitespace
.9920	90 1f		bcc $9941	                bcc _char_found
.9922	e6 26		inc $26		                inc tmp2
.9924	d0 02		bne $9928	                bne +
.9926	e6 27		inc $27		                inc tmp2+1
.9928					+
.9928	a5 24		lda $24		                lda tmp1
.992a	d0 02		bne $992e	                bne +
.992c	c6 25		dec $25		                dec tmp1+1
.992e	c6 24		dec $24		+               dec tmp1
.9930	a5 24		lda $24		                lda tmp1
.9932	05 25		ora $25		                ora tmp1+1
.9934	d0 e5		bne $991b	                bne _skip_loop          ; fall through if empty line
.9936					_empty_line:
.9936	ca		dex		                dex
.9937	ca		dex		                dex
.9938	ca		dex		                dex
.9939	ca		dex		                dex
.993a	74 00		stz $00,x	                stz 0,x                 ; TOS is zero
.993c	74 01		stz $01,x	                stz 1,x
.993e	4c ed 99	jmp $99ed	                jmp z_parse_name        ; skip over PARSE
.9941					_char_found:
.9941	a5 26		lda $26		                lda tmp2
.9943	38		sec		                sec
.9944	e5 08		sbc $08		                sbc cib
.9946	85 0c		sta $0c		                sta toin
.9948	a5 27		lda $27		                lda tmp2+1
.994a	e5 09		sbc $09		                sbc cib+1
.994c	85 0d		sta $0d		                sta toin+1
.994e	ca		dex		                dex
.994f	ca		dex		                dex
.9950	a9 20		lda #$20	                lda #AscSP
.9952	95 00		sta $00,x	                sta 0,x
.9954	74 01		stz $01,x	                stz 1,x                 ; paranoid, now ( "name" c )
.9956					xt_parse:
.9956	20 e1 d8	jsr $d8e1	                jsr underflow_1
.9959	a5 0a		lda $0a		                lda ciblen
.995b	05 0b		ora $0b		                ora ciblen+1
.995d	f0 0c		beq $996b	                beq _abort_parse
.995f	a5 0d		lda $0d		                lda toin+1              ; MSB
.9961	c5 0b		cmp $0b		                cmp ciblen+1
.9963	90 0e		bcc $9973	                bcc _go_parse           ; unsigned comparison
.9965	a5 0c		lda $0c		                lda toin                ; LSB
.9967	c5 0a		cmp $0a		                cmp ciblen
.9969	90 08		bcc $9973	                bcc _go_parse
.996b					_abort_parse:
.996b	ca		dex		                dex
.996c	ca		dex		                dex
.996d	74 00		stz $00,x	                stz 0,x
.996f	74 01		stz $01,x	                stz 1,x
.9971	80 7a		bra $99ed	                bra _done
.9973					_go_parse:
.9973	b5 00		lda $00,x	                lda 0,x
.9975	85 2c		sta $2c		                sta tmptos
.9977	ca		dex		                dex
.9978	ca		dex		                dex
.9979	a5 08		lda $08		                lda cib
.997b	18		clc		                clc
.997c	65 0c		adc $0c		                adc toin        ; LSB
.997e	85 24		sta $24		                sta tmp1
.9980	85 26		sta $26		                sta tmp2
.9982	95 02		sta $02,x	                sta 2,x
.9984	a5 09		lda $09		                lda cib+1
.9986	65 0d		adc $0d		                adc toin+1      ; MSB
.9988	85 25		sta $25		                sta tmp1+1
.998a	85 27		sta $27		                sta tmp2+1
.998c	95 03		sta $03,x	                sta 3,x
.998e	a5 08		lda $08		                lda cib
.9990	18		clc		                clc
.9991	65 0a		adc $0a		                adc ciblen
.9993	85 28		sta $28		                sta tmp3
.9995	a5 09		lda $09		                lda cib+1
.9997	65 0b		adc $0b		                adc ciblen+1
.9999	85 29		sta $29		                sta tmp3+1
.999b	64 2d		stz $2d		                stz tmptos+1
.999d					_loop:
.999d	a5 26		lda $26		                lda tmp2
.999f	c5 28		cmp $28		                cmp tmp3
.99a1	d0 06		bne $99a9	                bne _not_empty
.99a3	a5 27		lda $27		                lda tmp2+1
.99a5	c5 29		cmp $29		                cmp tmp3+1
.99a7	f0 1d		beq $99c6	                beq _eol
.99a9					_not_empty:
.99a9	b2 26		lda ($26)	                lda (tmp2)
.99ab	a4 2c		ldy $2c		                ldy tmptos
.99ad	c0 20		cpy #$20	                cpy #AscSP
.99af	d0 07		bne $99b8	                bne _not_whitespace
.99b1	20 d4 d8	jsr $d8d4	                jsr is_whitespace
.99b4	90 02		bcc $99b8	                bcc _not_whitespace
.99b6	80 0c		bra $99c4	                bra _found_delimiter
.99b8					_not_whitespace:
.99b8	c5 2c		cmp $2c		                cmp tmptos
.99ba	f0 08		beq $99c4	                beq _found_delimiter
.99bc	e6 26		inc $26		                inc tmp2
.99be	d0 dd		bne $999d	                bne _loop
.99c0	e6 27		inc $27		                inc tmp2+1
.99c2	80 d9		bra $999d	                bra _loop
.99c4					_found_delimiter:
.99c4	e6 2d		inc $2d		                inc tmptos+1
.99c6					_eol:
.99c6	a5 26		lda $26		                lda tmp2
.99c8	38		sec		                sec
.99c9	e5 24		sbc $24		                sbc tmp1
.99cb	95 00		sta $00,x	                sta 0,x
.99cd	a5 27		lda $27		                lda tmp2+1
.99cf	e5 25		sbc $25		                sbc tmp1+1
.99d1	95 01		sta $01,x	                sta 1,x
.99d3	a5 26		lda $26		                lda tmp2
.99d5	38		sec		                sec
.99d6	e5 08		sbc $08		                sbc cib
.99d8	85 0c		sta $0c		                sta toin
.99da	a5 27		lda $27		                lda tmp2+1
.99dc	e5 09		sbc $09		                sbc cib+1
.99de	85 0d		sta $0d		                sta toin+1
.99e0	a5 0c		lda $0c		                lda toin
.99e2	18		clc		                clc
.99e3	65 2d		adc $2d		                adc tmptos+1
.99e5	85 0c		sta $0c		                sta toin
.99e7	a5 0d		lda $0d		                lda toin+1
.99e9	69 00		adc #$00	                adc #0          ; we only need the carry
.99eb	85 0d		sta $0d		                sta toin+1
.99ed					_done:
.99ed					z_parse_name:
.99ed	60		rts		z_parse:        rts
.99ee					xt_pick:
.99ee	16 00		asl $00,x	                asl 0,x         ; we assume u < 128 (stack is small)
.99f0	8a		txa		                txa
.99f1	75 00		adc $00,x	                adc 0,x
.99f3	a8		tay		                tay
.99f4	b9 02 00	lda $0002,y	                lda 0002,y
.99f7	95 00		sta $00,x	                sta 0,x
.99f9	b9 03 00	lda $0003,y	                lda 0003,y
.99fc	95 01		sta $01,x	                sta 1,x
.99fe	60		rts		z_pick:         rts
.99ff					xt_plus:
.99ff	20 e6 d8	jsr $d8e6	                jsr underflow_2
.9a02	18		clc		                clc
.9a03	b5 00		lda $00,x	                lda 0,x         ; LSB
.9a05	75 02		adc $02,x	                adc 2,x
.9a07	95 02		sta $02,x	                sta 2,x
.9a09	b5 01		lda $01,x	                lda 1,x         ; MSB. No CLC, conserve carry bit
.9a0b	75 03		adc $03,x	                adc 3,x
.9a0d	95 03		sta $03,x	                sta 3,x
.9a0f	e8		inx		                inx
.9a10	e8		inx		                inx
.9a11	60		rts		z_plus:         rts
.9a12					xt_plus_store:
.9a12	20 e6 d8	jsr $d8e6	                jsr underflow_2
.9a15	b5 00		lda $00,x	                lda 0,x
.9a17	85 24		sta $24		                sta tmp1
.9a19	b5 01		lda $01,x	                lda 1,x
.9a1b	85 25		sta $25		                sta tmp1+1
.9a1d	a0 00		ldy #$00	                ldy #0          ; LSB
.9a1f	b1 24		lda ($24),y	                lda (tmp1),y
.9a21	18		clc		                clc
.9a22	75 02		adc $02,x	                adc 2,x
.9a24	91 24		sta ($24),y	                sta (tmp1),y
.9a26	c8		iny		                iny             ; MSB
.9a27	b1 24		lda ($24),y	                lda (tmp1),y
.9a29	75 03		adc $03,x	                adc 3,x
.9a2b	91 24		sta ($24),y	                sta (tmp1),y
.9a2d	e8		inx		                inx
.9a2e	e8		inx		                inx
.9a2f	e8		inx		                inx
.9a30	e8		inx		                inx
.9a31	60		rts		z_plus_store:   rts
.9a32					xt_postpone:
.9a32	20 fb 98	jsr $98fb	                jsr xt_parse_name               ; ( -- addr n )
.9a35	b5 00		lda $00,x	                lda 0,x
.9a37	15 01		ora $01,x	                ora 1,x
.9a39	d0 05		bne $9a40	                bne +
.9a3b	a9 05		lda #$05	                lda #err_noname
.9a3d	4c f7 d8	jmp $d8f7	                jmp error
.9a40					+
.9a40	20 f7 8f	jsr $8ff7	                jsr xt_find_name                ; ( -- nt | 0 )
.9a43	d0 05		bne $9a4a	                bne +
.9a45	a9 05		lda #$05	                lda #err_noname
.9a47	4c f7 d8	jmp $d8f7	                jmp error
.9a4a					+
.9a4a	b5 00		lda $00,x	                lda 0,x
.9a4c	85 24		sta $24		                sta tmp1
.9a4e	b5 01		lda $01,x	                lda 1,x
.9a50	85 25		sta $25		                sta tmp1+1
.9a52	20 fd 95	jsr $95fd	                jsr xt_name_to_int              ; ( nt -- xt )
.9a55	e6 24		inc $24		                inc tmp1
.9a57	d0 02		bne $9a5b	                bne +
.9a59	e6 25		inc $25		                inc tmp1+1
.9a5b					+
.9a5b	b2 24		lda ($24)	                lda (tmp1)
.9a5d	29 04		and #$04	                and #IM         ; mask all but Intermediate flag
.9a5f	f0 05		beq $9a66	                beq _not_immediate
.9a61	20 09 88	jsr $8809	                jsr xt_compile_comma
.9a64	80 0a		bra $9a70	                bra _done
.9a66					_not_immediate:
.9a66	20 a6 93	jsr $93a6	                jsr xt_literal
.9a69	a0 88		ldy #$88	                ldy #>xt_compile_comma
.9a6b	a9 09		lda #$09	                lda #<xt_compile_comma
.9a6d	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.9a70					_done:
.9a70	60		rts		z_postpone:     rts
.9a71					xt_previous:
.9a71	20 50 91	jsr $9150	                jsr xt_get_order
.9a74	20 5e 96	jsr $965e	                jsr xt_nip
.9a77	20 2d 98	jsr $982d	                jsr xt_one_minus
.9a7a	20 37 9d	jsr $9d37	                jsr xt_set_order
.9a7d	60		rts		z_previous:     rts
.9a7e					xt_question:
.9a7e	20 9c 8f	jsr $8f9c	                jsr xt_fetch
.9a81	20 52 8c	jsr $8c52	                jsr xt_dot
.9a84	60		rts		z_question:     rts
.9a85					xt_question_dup:
.9a85	20 e1 d8	jsr $d8e1	                jsr underflow_1
.9a88	b5 00		lda $00,x	                lda 0,x
.9a8a	15 01		ora $01,x	                ora 1,x
.9a8c	f0 0a		beq $9a98	                beq _done
.9a8e	ca		dex		                dex
.9a8f	ca		dex		                dex
.9a90	b5 02		lda $02,x	                lda 2,x
.9a92	95 00		sta $00,x	                sta 0,x
.9a94	b5 03		lda $03,x	                lda 3,x
.9a96	95 01		sta $01,x	                sta 1,x
.9a98					_done:
.9a98	60		rts		z_question_dup: rts
.9a99					xt_r_fetch:
.9a99	7a		ply		                ply             ; LSB
.9a9a	84 24		sty $24		                sty tmp1
.9a9c	7a		ply		                ply             ; MSB
.9a9d	ca		dex		                dex
.9a9e	ca		dex		                dex
.9a9f	68		pla		                pla             ; LSB
.9aa0	95 00		sta $00,x	                sta 0,x
.9aa2	68		pla		                pla             ; MSB
.9aa3	95 01		sta $01,x	                sta 1,x
.9aa5	48		pha		                pha
.9aa6	b5 00		lda $00,x	                lda 0,x
.9aa8	48		pha		                pha
.9aa9	5a		phy		                phy             ; MSB
.9aaa	a4 24		ldy $24		                ldy tmp1
.9aac	5a		phy		                phy             ; LSB
.9aad	60		rts		z_r_fetch:      rts
.9aae					xt_r_from:
.9aae	68		pla		                pla             ; LSB
.9aaf	85 2c		sta $2c		                sta tmptos
.9ab1	7a		ply		                ply             ; MSB
.9ab2	ca		dex		                dex
.9ab3	ca		dex		                dex
.9ab4	68		pla		                pla             ; LSB
.9ab5	95 00		sta $00,x	                sta 0,x
.9ab7	68		pla		                pla             ; MSB
.9ab8	95 01		sta $01,x	                sta 1,x
.9aba	5a		phy		                phy             ; MSB
.9abb	a5 2c		lda $2c		                lda tmptos
.9abd	48		pha		                pha             ; LSB
.9abe	60		rts		z_r_from:       rts
.9abf					xt_r_to_input:
.9abf	68		pla		                pla
.9ac0	85 24		sta $24		                sta tmp1
.9ac2	68		pla		                pla
.9ac3	85 25		sta $25		                sta tmp1+1
.9ac5	a0 00		ldy #$00	                ldy #0
.9ac7					_loop:
.9ac7	68		pla		                pla
.9ac8	99 06 00	sta $0006,y	                sta insrc,y
.9acb	c8		iny		                iny
.9acc	c0 08		cpy #$08	                cpy #8
.9ace	d0 f7		bne $9ac7	                bne _loop
.9ad0	a5 25		lda $25		                lda tmp1+1
.9ad2	48		pha		                pha
.9ad3	a5 24		lda $24		                lda tmp1
.9ad5	48		pha		                pha
.9ad6	60		rts		z_r_to_input: 	rts
.9ad7					xt_recurse:
.9ad7	a0 00		ldy #$00	                ldy #0
.9ad9	a9 20		lda #$20	                lda #$20        ; opcode for JSR
.9adb	91 00		sta ($00),y	                sta (cp),y
.9add	c8		iny		                iny
.9ade	24 20		bit $20		                bit status
.9ae0	70 0c		bvs $9aee	                bvs _nt_in_workword
.9ae2	a5 04		lda $04		                lda workword
.9ae4	91 00		sta ($00),y	                sta (cp),y
.9ae6	c8		iny		                iny
.9ae7	a5 05		lda $05		                lda workword+1
.9ae9	91 00		sta ($00),y	                sta (cp),y
.9aeb	c8		iny		                iny
.9aec	80 1b		bra $9b09	                bra _update_cp
.9aee					_nt_in_workword:
.9aee	a5 04		lda $04		                lda workword            ; LSB
.9af0	18		clc		                clc
.9af1	69 04		adc #$04	                adc #4
.9af3	85 24		sta $24		                sta tmp1
.9af5	a5 05		lda $05		                lda workword+1          ; MSB
.9af7	69 00		adc #$00	                adc #0
.9af9	85 25		sta $25		                sta tmp1+1
.9afb	b2 24		lda ($24)	                lda (tmp1)
.9afd	91 00		sta ($00),y	                sta (cp),y
.9aff	5a		phy		                phy
.9b00	a0 01		ldy #$01	                ldy #1
.9b02	b1 24		lda ($24),y	                lda (tmp1),y
.9b04	7a		ply		                ply
.9b05	c8		iny		                iny
.9b06	91 00		sta ($00),y	                sta (cp),y
.9b08	c8		iny		                iny
.9b09					_update_cp:
.9b09	98		tya		                tya
.9b0a	18		clc		                clc
.9b0b	65 00		adc $00		                adc cp
.9b0d	85 00		sta $00		                sta cp
.9b0f	90 02		bcc $9b13	                bcc _done
.9b11	e6 01		inc $01		                inc cp+1
.9b13					_done:
.9b13	60		rts		z_recurse:      rts
.9b14					xt_refill:
.9b14	a5 06		lda $06		                lda insrc               ; cheat: We only check LSB
.9b16	d0 2d		bne $9b45	                bne _src_not_kbd
.9b18	ca		dex		                dex
.9b19	ca		dex		                dex
.9b1a	ca		dex		                dex
.9b1b	ca		dex		                dex
.9b1c	a5 08		lda $08		                lda cib                 ; address of CIB is NOS
.9b1e	95 02		sta $02,x	                sta 2,x
.9b20	a5 09		lda $09		                lda cib+1
.9b22	95 03		sta $03,x	                sta 3,x
.9b24	64 0a		stz $0a		                stz ciblen              ; go in with empty buffer
.9b26	64 0b		stz $0b		                stz ciblen+1
.9b28	a9 ff		lda #$ff	                lda #bsize              ; max number of chars is TOS
.9b2a	95 00		sta $00,x	                sta 0,x
.9b2c	74 01		stz $01,x	                stz 1,x                 ; cheat: We only accept max 255
.9b2e	20 48 81	jsr $8148	                jsr xt_accept           ; ( addr n1 -- n2)
.9b31	b5 00		lda $00,x	                lda 0,x
.9b33	85 0a		sta $0a		                sta ciblen
.9b35	b5 01		lda $01,x	                lda 1,x
.9b37	85 0b		sta $0b		                sta ciblen+1            ; though we only accept 255 chars
.9b39	64 0c		stz $0c		                stz toin
.9b3b	64 0d		stz $0d		                stz toin+1
.9b3d	a9 ff		lda #$ff	                lda #$FF                ; overwrite with TRUE flag
.9b3f	95 00		sta $00,x	                sta 0,x
.9b41	95 01		sta $01,x	                sta 1,x
.9b43	80 10		bra $9b55	                bra _done
.9b45					_src_not_kbd:
.9b45	1a		inc a		                ina
.9b46	d0 08		bne $9b50	                bne _src_not_string
.9b48	ca		dex		                dex
.9b49	ca		dex		                dex
.9b4a	74 00		stz $00,x	                stz 0,x
.9b4c	74 01		stz $01,x	                stz 1,x
.9b4e	80 05		bra $9b55	                bra z_refill
.9b50					_src_not_string:
.9b50	a9 01		lda #$01	                lda #err_badsource
.9b52	4c f7 d8	jmp $d8f7	                jmp error
.9b55					_done:
.9b55	60		rts		z_refill:       rts
.9b56					xt_repeat:
.9b56	20 83 82	jsr $8283	                jsr xt_again
.9b59	20 8e 91	jsr $918e	                jsr xt_here
.9b5c	20 9b a1	jsr $a19b	                jsr xt_swap
.9b5f	20 7a a1	jsr $a17a	                jsr xt_store
.9b62	60		rts		z_repeat:       rts
.9b63					xt_right_bracket:
.9b63	a9 ff		lda #$ff	                lda #$FF
.9b65	85 16		sta $16		                sta state
.9b67	85 17		sta $17		                sta state+1
.9b69					z_right_bracket:
.9b69	60		rts		                rts
.9b6a					xt_root_wordlist:
.9b6a	ca		dex		                dex             ; The WID for the Root wordlist is 3.
.9b6b	ca		dex		                dex
.9b6c	a9 03		lda #$03	                lda #3
.9b6e	95 00		sta $00,x	                sta 0,x
.9b70	74 01		stz $01,x	                stz 1,x
.9b72					z_root_wordlist:
.9b72	60		rts		                rts
.9b73					xt_rot:
.9b73	20 eb d8	jsr $d8eb	                jsr underflow_3
.9b76	b4 05		ldy $05,x	                ldy 5,x         ; MSB first
.9b78	b5 03		lda $03,x	                lda 3,x
.9b7a	95 05		sta $05,x	                sta 5,x
.9b7c	b5 01		lda $01,x	                lda 1,x
.9b7e	95 03		sta $03,x	                sta 3,x
.9b80	94 01		sty $01,x	                sty 1,x
.9b82	b4 04		ldy $04,x	                ldy 4,x         ; LSB next
.9b84	b5 02		lda $02,x	                lda 2,x
.9b86	95 04		sta $04,x	                sta 4,x
.9b88	b5 00		lda $00,x	                lda 0,x
.9b8a	95 02		sta $02,x	                sta 2,x
.9b8c	94 00		sty $00,x	                sty 0,x
.9b8e	60		rts		z_rot:          rts
.9b8f					xt_rshift:
.9b8f	20 e6 d8	jsr $d8e6	                jsr underflow_2
.9b92	b5 00		lda $00,x	                lda 0,x
.9b94	29 0f		and #$0f	                and #%00001111
.9b96	f0 08		beq $9ba0	                beq _done               ; if 0 shifts, quit
.9b98	a8		tay		                tay
.9b99					_loop:
.9b99	56 03		lsr $03,x	                lsr 3,x
.9b9b	76 02		ror $02,x	                ror 2,x
.9b9d	88		dey		                dey
.9b9e	d0 f9		bne $9b99	                bne _loop
.9ba0					_done:
.9ba0	e8		inx		                inx
.9ba1	e8		inx		                inx
.9ba2	60		rts		z_rshift:       rts
.9ba3					xt_s_backslash_quote:
.9ba3	a9 ff		lda #$ff	                lda #$FF
.9ba5	85 26		sta $26		                sta tmp2
.9ba7	64 27		stz $27		                stz tmp2+1
.9ba9	20 6f 9d	jsr $9d6f	                jsr s_quote_start
.9bac					_done:
.9bac					z_s_backslash_quote:
.9bac	60		rts		                rts
.9bad					convert_hex_value:
.9bad	c9 41		cmp #$41	        cmp #'A'
.9baf	90 07		bcc $9bb8	        bcc _digit
.9bb1	29 df		and #$df	        and #$DF                ; Make it uppercase.
.9bb3	38		sec		        sec
.9bb4	e9 37		sbc #$37	        sbc #'7'                 ; gives value 10 for 'A'
.9bb6	80 03		bra $9bbb	        bra _done
.9bb8					_digit:
.9bb8	38		sec		        sec
.9bb9	e9 30		sbc #$30	        sbc #'0'
.9bbb					_done:
.9bbb	60		rts		        rts
.9bbc					xt_search_wordlist:
.9bbc	20 eb d8	jsr $d8eb	                jsr underflow_3
.9bbf	a5 1e		lda $1e		                lda up
.9bc1	18		clc		                clc
.9bc2	69 06		adc #$06	                adc #wordlists_offset
.9bc4	85 26		sta $26		                sta tmp2
.9bc6	a5 1f		lda $1f		                lda up+1
.9bc8	69 00		adc #$00	                adc #0          ; Adding carry
.9bca	85 27		sta $27		                sta tmp2+1
.9bcc	b5 00		lda $00,x	                lda 0,x
.9bce	0a		asl a		                asl             ; Convert wid to offset in cells (x2)
.9bcf	65 26		adc $26		                adc tmp2
.9bd1	85 26		sta $26		                sta tmp2
.9bd3	90 02		bcc $9bd7	                bcc +
.9bd5	e6 27		inc $27		                inc tmp2+1      ; Propagate carry if needed.
.9bd7					+
.9bd7	e8		inx		                inx
.9bd8	e8		inx		                inx
.9bd9	b5 00		lda $00,x	                lda 0,x
.9bdb	15 01		ora $01,x	                ora 1,x
.9bdd	d0 03		bne $9be2	                bne _check_wordlist
.9bdf	4c 9a 9c	jmp $9c9a	                jmp _done
.9be2					_check_wordlist:
.9be2	a5 26		lda $26		                lda tmp2
.9be4	05 27		ora $27		                ora tmp2+1
.9be6	d0 03		bne $9beb	                bne _have_string
.9be8	4c 9a 9c	jmp $9c9a	                jmp _done
.9beb					_have_string:
.9beb	b2 26		lda ($26)	                lda (tmp2)              ; nt of first word in Dictionary
.9bed	85 24		sta $24		                sta tmp1
.9bef	e6 26		inc $26		                inc tmp2                ; Move to the upper byte
.9bf1	d0 02		bne $9bf5	                bne +
.9bf3	e6 27		inc $27		                inc tmp2+1
.9bf5					+
.9bf5	b2 26		lda ($26)	                lda (tmp2)
.9bf7	85 25		sta $25		                sta tmp1+1
.9bf9	b5 02		lda $02,x	                lda 2,x                 ; Address of mystery string
.9bfb	85 26		sta $26		                sta tmp2
.9bfd	b5 03		lda $03,x	                lda 3,x
.9bff	85 27		sta $27		                sta tmp2+1
.9c01					_loop:
.9c01	b2 24		lda ($24)	                lda (tmp1)
.9c03	d5 00		cmp $00,x	                cmp 0,x
.9c05	d0 7b		bne $9c82	                bne _next_entry
.9c07					_compare_string:
.9c07	b2 26		lda ($26)	                lda (tmp2)      ; first character of mystery string
.9c09	c9 5b		cmp #$5b	                cmp #$5B        ; ASCII '[' (one past Z)
.9c0b	b0 07		bcs $9c14	                bcs _compare_first
.9c0d	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9c0f	90 03		bcc $9c14	                bcc _compare_first
.9c11	18		clc		                clc
.9c12	69 20		adc #$20	                adc #$20
.9c14					_compare_first:
.9c14	a0 08		ldy #$08	                ldy #8          ; Offset in nt to name
.9c16	d1 24		cmp ($24),y	                cmp (tmp1),y    ; first character of current word
.9c18	d0 68		bne $9c82	                bne _next_entry
.9c1a	b5 00		lda $00,x	                lda 0,x
.9c1c	3a		dec a		                dea
.9c1d	f0 2c		beq $9c4b	                beq _success
.9c1f	a5 24		lda $24		                lda tmp1
.9c21	48		pha		                pha             ; Preserve tmp1 on the return stack.
.9c22	18		clc		                clc
.9c23	69 08		adc #$08	                adc #8
.9c25	85 24		sta $24		                sta tmp1        ; Reusing tmp1 temporarily for string check.
.9c27	a5 25		lda $25		                lda tmp1+1
.9c29	48		pha		                pha             ; Preserve tmp1+1 on the return stack.
.9c2a	69 00		adc #$00	                adc #0          ; we only need the carry
.9c2c	85 25		sta $25		                sta tmp1+1
.9c2e	b4 00		ldy $00,x	                ldy 0,x         ; index is length of string minus 1
.9c30	88		dey		                dey
.9c31					_string_loop:
.9c31	b1 26		lda ($26),y	                lda (tmp2),y    ; last char of mystery string
.9c33	c9 5b		cmp #$5b	                cmp #$5B         ; ASCII '[' (one past Z)
.9c35	b0 07		bcs $9c3e	                bcs _check_char
.9c37	c9 41		cmp #$41	                cmp #$41        ; ASCII 'A'
.9c39	90 03		bcc $9c3e	                bcc _check_char
.9c3b	18		clc		                clc
.9c3c	69 20		adc #$20	                adc #$20
.9c3e					_check_char:
.9c3e	d1 24		cmp ($24),y	                cmp (tmp1),y    ; last char of word we're testing against
.9c40	d0 3a		bne $9c7c	                bne _next_entry_tmp1
.9c42	88		dey		                dey
.9c43	d0 ec		bne $9c31	                bne _string_loop
.9c45					_success_tmp1:
.9c45	68		pla		                pla             ; Restore tmp1 from the return stack.
.9c46	85 25		sta $25		                sta tmp1+1
.9c48	68		pla		                pla
.9c49	85 24		sta $24		                sta tmp1
.9c4b					_success:
.9c4b	e8		inx		                inx
.9c4c	e8		inx		                inx
.9c4d	a5 24		lda $24		                lda tmp1
.9c4f	95 00		sta $00,x	                sta 0,x
.9c51	a5 25		lda $25		                lda tmp1+1
.9c53	95 01		sta $01,x	                sta 1,x
.9c55	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; ( nt nt )
.9c58	20 fd 95	jsr $95fd	                jsr xt_name_to_int      ; ( nt xt )
.9c5b	20 9b a1	jsr $a19b	                jsr xt_swap             ; ( xt nt )
.9c5e	a0 00		ldy #$00	                ldy #0                  ; Prepare flag
.9c60	f6 00		inc $00,x	                inc 0,x
.9c62	d0 02		bne $9c66	                bne +
.9c64	f6 01		inc $01,x	                inc 1,x                 ; ( xt nt+1 )
.9c66					+
.9c66	a1 00		lda ($00,x)	                lda (0,x)               ; ( xt char )
.9c68	29 04		and #$04	                and #IM
.9c6a	d0 08		bne $9c74	                bne _immediate          ; bit set, we're immediate
.9c6c	a9 ff		lda #$ff	                lda #$FF                ; We're not immediate, return -1
.9c6e	95 00		sta $00,x	                sta 0,x
.9c70	95 01		sta $01,x	                sta 1,x
.9c72	80 28		bra $9c9c	                bra _done_nodrop
.9c74					_immediate:
.9c74	a9 01		lda #$01	                lda #1                  ; We're immediate, return 1
.9c76	95 00		sta $00,x	                sta 0,x
.9c78	74 01		stz $01,x	                stz 1,x
.9c7a	80 20		bra $9c9c	                bra _done_nodrop
.9c7c					_next_entry_tmp1:
.9c7c	68		pla		                pla             ; Restore tmp1 from the return stack.
.9c7d	85 25		sta $25		                sta tmp1+1
.9c7f	68		pla		                pla
.9c80	85 24		sta $24		                sta tmp1
.9c82					_next_entry:
.9c82	a0 02		ldy #$02	                ldy #2
.9c84	b1 24		lda ($24),y	                lda (tmp1),y
.9c86	48		pha		                pha
.9c87	c8		iny		                iny
.9c88	b1 24		lda ($24),y	                lda (tmp1),y
.9c8a	85 25		sta $25		                sta tmp1+1
.9c8c	68		pla		                pla
.9c8d	85 24		sta $24		                sta tmp1
.9c8f	05 25		ora $25		                ora tmp1+1
.9c91	f0 03		beq $9c96	                beq _fail_done
.9c93	4c 01 9c	jmp $9c01	                jmp _loop
.9c96					_fail_done:
.9c96	74 02		stz $02,x	                stz 2,x         ; failure flag
.9c98	74 03		stz $03,x	                stz 3,x
.9c9a					_done:
.9c9a	e8		inx		                inx
.9c9b	e8		inx		                inx
.9c9c					_done_nodrop:
.9c9c					z_search_wordlist:
.9c9c	60		rts		                rts
.9c9d					xt_see:
.9c9d	20 fb 98	jsr $98fb	                jsr xt_parse_name       ; ( addr u )
.9ca0	20 f7 8f	jsr $8ff7	                jsr xt_find_name        ; ( nt | 0 )
.9ca3	b5 00		lda $00,x	                lda 0,x
.9ca5	15 01		ora $01,x	                ora 1,x
.9ca7	d0 05		bne $9cae	                bne +
.9ca9	a9 05		lda #$05	                lda #err_noname
.9cab	4c f7 d8	jmp $d8f7	                jmp error
.9cae					+
.9cae	20 7f 89	jsr $897f	                jsr xt_cr
.9cb1	a5 18		lda $18		                lda base
.9cb3	48		pha		                pha
.9cb4	20 99 91	jsr $9199	                jsr xt_hex
.9cb7	a9 09		lda #$09	                lda #str_see_nt
.9cb9	20 1d d9	jsr $d91d	                jsr print_string_no_lf
.9cbc	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; ( nt nt )
.9cbf	20 1b a5	jsr $a51b	                jsr xt_u_dot
.9cc2	20 0b a1	jsr $a10b	                jsr xt_space            ; ( nt )
.9cc5	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; ( nt nt )
.9cc8	20 fd 95	jsr $95fd	                jsr xt_name_to_int      ; ( nt xt )
.9ccb	a9 0a		lda #$0a	                lda #str_see_xt
.9ccd	20 1d d9	jsr $d91d	                jsr print_string_no_lf
.9cd0	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; ( nt xt xt )
.9cd3	20 1b a5	jsr $a51b	                jsr xt_u_dot
.9cd6	20 7f 89	jsr $897f	                jsr xt_cr               ; ( nt xt )
.9cd9	a9 08		lda #$08	                lda #str_see_flags
.9cdb	20 1d d9	jsr $d91d	                jsr print_string_no_lf
.9cde	20 af 98	jsr $98af	                jsr xt_over             ; ( nt xt nt )
.9ce1	20 39 98	jsr $9839	                jsr xt_one_plus         ; ( nt xt nt+1 )
.9ce4	20 9c 8f	jsr $8f9c	                jsr xt_fetch            ; ( nt xt flags )
.9ce7	b5 00		lda $00,x	                lda 0,x
.9ce9	a0 06		ldy #$06	                ldy #6                  ; Not all bits are used
.9ceb					_flag_loop:
.9ceb	48		pha		                pha
.9cec	29 01		and #$01	                and #%00000001
.9cee	18		clc		                clc
.9cef	69 30		adc #$30	                adc #$30                ; ASCII "0"
.9cf1	20 12 8e	jsr $8e12	                jsr emit_a
.9cf4	20 0b a1	jsr $a10b	                jsr xt_space
.9cf7	68		pla		                pla
.9cf8	6a		ror a		                ror                     ; Next flag
.9cf9	88		dey		                dey
.9cfa	d0 ef		bne $9ceb	                bne _flag_loop
.9cfc	20 7f 89	jsr $897f	                jsr xt_cr
.9cff	e8		inx		                inx
.9d00	e8		inx		                inx                     ; ( nt xt )
.9d01	a9 0b		lda #$0b	                lda #str_see_size
.9d03	20 1d d9	jsr $d91d	                jsr print_string_no_lf
.9d06	20 9b a1	jsr $a19b	                jsr xt_swap             ; ( xt nt )
.9d09	20 62 a7	jsr $a762	                jsr xt_wordsize         ; ( xt u )
.9d0c	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; ( xt u u ) for DUMP and DISASM
.9d0f	20 c1 8a	jsr $8ac1	                jsr xt_decimal
.9d12	20 1b a5	jsr $a51b	                jsr xt_u_dot            ; ( xt u )
.9d15	20 99 91	jsr $9199	                jsr xt_hex
.9d18	20 7f 89	jsr $897f	                jsr xt_cr
.9d1b	20 a5 a3	jsr $a3a5	                jsr xt_two_dup          ; ( xt u xt u )
.9d1e	20 50 8d	jsr $8d50	                jsr xt_dump
.9d21	20 7f 89	jsr $897f	                jsr xt_cr
.9d24	20 56 8b	jsr $8b56	                jsr xt_disasm
.9d27	68		pla		                pla
.9d28	85 18		sta $18		                sta base
.9d2a	60		rts		z_see:          rts
.9d2b					xt_set_current:
.9d2b	20 e1 d8	jsr $d8e1	                jsr underflow_1
.9d2e	a0 04		ldy #$04	                ldy #current_offset
.9d30	b5 00		lda $00,x	                lda 0,x         ; CURRENT is byte variable
.9d32	91 1e		sta ($1e),y	                sta (up),y      ; so only the LSB is used.
.9d34	e8		inx		                inx
.9d35	e8		inx		                inx
.9d36	60		rts		z_set_current:  rts
.9d37					xt_set_order:
.9d37	a9 ff		lda #$ff	                lda #$FF
.9d39	d5 01		cmp $01,x	                cmp 1,x
.9d3b	d0 12		bne $9d4f	                bne _start
.9d3d	d5 00		cmp $00,x	                cmp 0,x
.9d3f	d0 0e		bne $9d4f	                bne _start
.9d41	ca		dex		                dex             ; Make room for the count.
.9d42	ca		dex		                dex
.9d43	74 03		stz $03,x	                stz 3,x         ; ROOT-WORDLIST is 3
.9d45	a9 03		lda #$03	                lda #3
.9d47	95 02		sta $02,x	                sta 2,x
.9d49	74 01		stz $01,x	                stz 1,x         ; Count is 1.
.9d4b	a9 01		lda #$01	                lda #1
.9d4d	95 00		sta $00,x	                sta 0,x
.9d4f					_start:
.9d4f	a0 1e		ldy #$1e	                ldy #num_order_offset
.9d51	b5 00		lda $00,x	                lda 0,x
.9d53	91 1e		sta ($1e),y	                sta (up),y      ; #ORDER is a byte variable.
.9d55	85 24		sta $24		                sta tmp1        ; Save a copy for zero check and looping.
.9d57	e8		inx		                inx             ; Drop the count off the data stack.
.9d58	e8		inx		                inx
.9d59	a5 24		lda $24		                lda tmp1
.9d5b	f0 0d		beq $9d6a	                beq _done       ; If zero, there are no wordlists.
.9d5d	a0 1f		ldy #$1f	                ldy #search_order_offset
.9d5f					_loop:
.9d5f	b5 00		lda $00,x	                lda 0,x         ; The search order is a byte array
.9d61	91 1e		sta ($1e),y	                sta (up),y      ; so only save the LSB
.9d63	c8		iny		                iny
.9d64	e8		inx		                inx
.9d65	e8		inx		                inx
.9d66	c6 24		dec $24		                dec tmp1
.9d68	d0 f5		bne $9d5f	                bne _loop
.9d6a					_done:
.9d6a	60		rts		z_set_order:    rts
.9d6b					xt_s_quote:
.9d6b	64 26		stz $26		                stz tmp2
.9d6d	64 27		stz $27		                stz tmp2+1
.9d6f					s_quote_start:
.9d6f	ca		dex		                dex
.9d70	ca		dex		                dex
.9d71	ca		dex		                dex
.9d72	ca		dex		                dex
.9d73	a9 4c		lda #$4c	                lda #$4C
.9d75	20 94 d7	jsr $d794	                jsr cmpl_a
.9d78	20 94 d7	jsr $d794	                jsr cmpl_a
.9d7b	20 94 d7	jsr $d794	                jsr cmpl_a
.9d7e	a5 00		lda $00		                lda cp
.9d80	95 02		sta $02,x	                sta 2,x
.9d82	a5 01		lda $01		                lda cp+1
.9d84	95 03		sta $03,x	                sta 3,x
.9d86					_savechars_loop:
.9d86	a5 0d		lda $0d		                lda toin+1              ; MSB
.9d88	c5 0b		cmp $0b		                cmp ciblen+1
.9d8a	90 2a		bcc $9db6	                bcc _input_fine         ; unsigned comparison
.9d8c	a5 0c		lda $0c		                lda toin                ; LSB
.9d8e	c5 0a		cmp $0a		                cmp ciblen
.9d90	90 24		bcc $9db6	                bcc _input_fine
.9d92	a5 26		lda $26		                lda tmp2
.9d94	48		pha		                pha
.9d95	a5 27		lda $27		                lda tmp2+1
.9d97	48		pha		                pha
.9d98	a5 28		lda $28		                lda tmp3    ; Only tmp3 used, so don't bother with tmp3+1
.9d9a	48		pha		                pha
.9d9b	20 14 9b	jsr $9b14	                jsr xt_refill           ; ( -- f )
.9d9e	68		pla		                pla
.9d9f	85 28		sta $28		                sta tmp3
.9da1	68		pla		                pla
.9da2	85 27		sta $27		                sta tmp2+1
.9da4	68		pla		                pla
.9da5	85 26		sta $26		                sta tmp2
.9da7	b5 00		lda $00,x	                lda 0,x
.9da9	15 01		ora $01,x	                ora 1,x
.9dab	d0 05		bne $9db2	                bne _refill_ok
.9dad	a9 06		lda #$06	                lda #err_refill
.9daf	4c f7 d8	jmp $d8f7	                jmp error
.9db2					_refill_ok:
.9db2	e8		inx		                inx
.9db3	e8		inx		                inx
.9db4	80 d0		bra $9d86	                bra _savechars_loop
.9db6					_input_fine:
.9db6	a5 08		lda $08		                lda cib
.9db8	18		clc		                clc
.9db9	65 0c		adc $0c		                adc toin        ; LSB
.9dbb	85 24		sta $24		                sta tmp1
.9dbd	a5 09		lda $09		                lda cib+1
.9dbf	65 0d		adc $0d		                adc toin+1      ; MSB
.9dc1	85 25		sta $25		                sta tmp1+1
.9dc3	b2 24		lda ($24)	                lda (tmp1)
.9dc5	24 26		bit $26		                bit tmp2
.9dc7	30 03		bmi $9dcc	                bmi _handle_escapes    ; Only checking bit 7
.9dc9	4c 55 9e	jmp $9e55	                jmp _regular_char
.9dcc					_handle_escapes:
.9dcc	24 27		bit $27		                bit tmp2+1
.9dce	30 03		bmi $9dd3	                bmi _escaped
.9dd0	4c 4b 9e	jmp $9e4b	                jmp _not_escaped
.9dd3					_escaped:
.9dd3	70 3c		bvs $9e11	                bvs _check_esc_chars
.9dd5	a9 01		lda #$01	                lda #1
.9dd7	24 27		bit $27		                bit tmp2+1
.9dd9	d0 10		bne $9deb	                bne _esc_x_second_digit
.9ddb	e6 27		inc $27		                inc tmp2+1  ; Adjust flag for second digit next time.
.9ddd	b2 24		lda ($24)	                lda (tmp1)  ; Get the char again.
.9ddf	20 ad 9b	jsr $9bad	                jsr convert_hex_value
.9de2	0a		asl a		                asl
.9de3	0a		asl a		                asl
.9de4	0a		asl a		                asl
.9de5	0a		asl a		                asl
.9de6	85 28		sta $28		                sta tmp3    ; Save it for later.
.9de8	4c 5c 9e	jmp $9e5c	                jmp _next_character
.9deb					_esc_x_second_digit:
.9deb	64 27		stz $27		                stz tmp2+1
.9ded	b2 24		lda ($24)	                lda (tmp1)
.9def	20 ad 9b	jsr $9bad	                jsr convert_hex_value
.9df2	05 28		ora $28		                ora tmp3
.9df4	4c 59 9e	jmp $9e59	                jmp _save_character
.9df7					_esc_tr_table:
>9df7	07				    .byte   7               ; a -> BEL (ASCII value 7)
>9df8	08				    .byte   8               ; b -> Backspace (ASCII value 8)
>9df9	00 00				    .byte   0,0             ; c, d no escape
>9dfb	1b				    .byte   27              ; e -> ESC (ASCII value 27)
>9dfc	0c				    .byte   12              ; f -> FF (ASCII value 12)
>9dfd	00 00 00 00 00			    .byte   0,0,0,0,0       ; g,h,i,j,k
>9e02	0a				    .byte   10              ; l -> LF (ASCII value 10)
>9e03	8d				    .byte   13+128          ; m -> CR/LF pair (ASCII values 13, 10)
>9e04	0a				    .byte   10              ; n behaves like l --> lf
>9e05	00 00				    .byte   0,0             ; o,p
>9e07	22				    .byte   34              ; q -> Double quote (ASCII value 34)
>9e08	0d				    .byte   13              ; r ->  CR (ASCII value 13)
>9e09	00				    .byte   0               ; s
>9e0a	09				    .byte   9               ; t -> Horizontal TAB (ASCII value 9)
>9e0b	00				    .byte   0               ; u
>9e0c	0b				    .byte   11              ; v -> Vertical TAB (ASCII value 11)
>9e0d	00 00 00			    .byte   0,0,0           ; w,x,y   (x is a special case later)
>9e10	80				    .byte   0+128           ; z -> NULL (ASCII value 0)
.9e11					_check_esc_chars:
.9e11	64 27		stz $27		                stz tmp2+1
.9e13	c9 61		cmp #$61	                cmp #'a'
.9e15	30 1a		bmi $9e31	                bmi _check_esc_quote
.9e17	c9 7b		cmp #$7b	                cmp #'z'+1
.9e19	10 16		bpl $9e31	                bpl _check_esc_quote
.9e1b	a8		tay		                tay
.9e1c	b9 96 9d	lda $9d96,y	                lda _esc_tr_table - 'a',y   ; fake base address to index with a-z directly
.9e1f	d0 03		bne $9e24	                bne _esc_replace
.9e21	98		tya		                tya                     ; revert if no translation
.9e22	80 0d		bra $9e31	                bra _check_esc_quote
.9e24	10 33		bpl $9e59	_esc_replace:   bpl _save_character     ; simple replacement
.9e26	29 7f		and #$7f	                and #$7f                ; clear hi bit
.9e28	f0 2f		beq $9e59	                beq _save_character     ; NUL we can just output
.9e2a	20 94 d7	jsr $d794	                jsr cmpl_a              ; else output first char (CR)
.9e2d	a9 0a		lda #$0a	                lda #10                 ; followed by LF
.9e2f	80 28		bra $9e59	                bra _save_character
.9e31					_check_esc_quote:
.9e31	c9 22		cmp #$22	                cmp #$22
.9e33	d0 04		bne $9e39	                bne _check_esc_x
.9e35	a9 22		lda #$22	                lda #34
.9e37	80 20		bra $9e59	                bra _save_character
.9e39					_check_esc_x:
.9e39	c9 78		cmp #$78	                cmp #'x'
.9e3b	d0 06		bne $9e43	                bne _check_esc_backslash
.9e3d	a9 be		lda #$be	                lda #$BE        ; Clear bits 6 and 0
.9e3f	85 27		sta $27		                sta tmp2+1
.9e41	80 19		bra $9e5c	                bra _next_character
.9e43					_check_esc_backslash:
.9e43	c9 5c		cmp #$5c	                cmp #$5C
.9e45	d0 04		bne $9e4b	                bne _not_escaped
.9e47	a9 5c		lda #$5c	                lda #92
.9e49	80 0e		bra $9e59	                bra _save_character
.9e4b					_not_escaped:
.9e4b	c9 5c		cmp #$5c	                cmp #$5C        ; The backslash char
.9e4d	d0 06		bne $9e55	                bne _regular_char
.9e4f	a9 ff		lda #$ff	                lda #$FF
.9e51	85 27		sta $27		                sta tmp2+1
.9e53	80 07		bra $9e5c	                bra _next_character
.9e55					_regular_char:
.9e55	c9 22		cmp #$22	                cmp #$22        ; ASCII for "
.9e57	f0 0c		beq $9e65	                beq _found_string_end
.9e59					_save_character:
.9e59	20 94 d7	jsr $d794	                jsr cmpl_a
.9e5c					_next_character:
.9e5c	e6 0c		inc $0c		                inc toin
.9e5e	d0 02		bne $9e62	                bne _savechars_loop_longjump
.9e60	e6 0d		inc $0d		                inc toin+1
.9e62					_savechars_loop_longjump:
.9e62	4c 86 9d	jmp $9d86	                jmp _savechars_loop
.9e65					_found_string_end:
.9e65	e6 0c		inc $0c		                inc toin
.9e67	d0 02		bne $9e6b	                bne +
.9e69	e6 0d		inc $0d		                inc toin+1
.9e6b					+
.9e6b	a5 00		lda $00		                lda cp
.9e6d	38		sec		                sec
.9e6e	f5 02		sbc $02,x	                sbc 2,x
.9e70	95 00		sta $00,x	                sta 0,x         ; LSB
.9e72	a5 01		lda $01		                lda cp+1
.9e74	f5 03		sbc $03,x	                sbc 3,x
.9e76	95 01		sta $01,x	                sta 1,x         ; MSB
.9e78	b5 02		lda $02,x	                lda 2,x
.9e7a	38		sec		                sec
.9e7b	e9 02		sbc #$02	                sbc #2
.9e7d	85 24		sta $24		                sta tmp1
.9e7f	b5 03		lda $03,x	                lda 3,x
.9e81	e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.9e83	85 25		sta $25		                sta tmp1+1
.9e85	a5 00		lda $00		                lda cp
.9e87	92 24		sta ($24)	                sta (tmp1)
.9e89	a0 01		ldy #$01	                ldy #1
.9e8b	a5 01		lda $01		                lda cp+1
.9e8d	91 24		sta ($24),y	                sta (tmp1),y
.9e8f	a5 16		lda $16		                lda state
.9e91	05 17		ora $17		                ora state+1             ; paranoid
.9e93	f0 03		beq $9e98	                beq _done
.9e95	20 7c a0	jsr $a07c	                jsr sliteral_const_str         ; ( addr u -- )
.9e98					_done:
.9e98	60		rts		z_s_quote:      rts
.9e99					xt_s_to_d:
.9e99	20 e1 d8	jsr $d8e1	                jsr underflow_1
.9e9c	ca		dex		                dex
.9e9d	ca		dex		                dex
.9e9e	74 00		stz $00,x	                stz 0,x
.9ea0	74 01		stz $01,x	                stz 1,x
.9ea2	b5 03		lda $03,x	                lda 3,x
.9ea4	10 04		bpl $9eaa	                bpl _done
.9ea6	d6 00		dec $00,x	                dec 0,x
.9ea8	d6 01		dec $01,x	                dec 1,x
.9eaa					_done:
.9eaa	60		rts		z_s_to_d:       rts
.9eab					xt_save_buffers:
.9eab	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9ead	b1 1e		lda ($1e),y	                lda (up),y      ; Only bits 0 and 1 are used, so only
.9eaf	c9 03		cmp #$03	                cmp #3          ; LSB is needed.
.9eb1	d0 12		bne $9ec5	                bne _done       ; Either not used or not dirty = done!
.9eb3	20 cf 83	jsr $83cf	                jsr xt_blkbuffer
.9eb6	20 c1 85	jsr $85c1	                jsr xt_buffblocknum
.9eb9	20 9c 8f	jsr $8f9c	                jsr xt_fetch
.9ebc	20 7c 85	jsr $857c	                jsr xt_block_write
.9ebf	a9 01		lda #$01	                lda #1
.9ec1	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.9ec3	91 1e		sta ($1e),y	                sta (up),y
.9ec5					_done:
.9ec5	60		rts		z_save_buffers: rts
.9ec6					xt_scr:
.9ec6	ca		dex		                dex
.9ec7	ca		dex		                dex
.9ec8	18		clc		                clc
.9ec9	a5 1e		lda $1e		                lda up
.9ecb	69 02		adc #$02	                adc #scr_offset ; Add offset
.9ecd	95 00		sta $00,x	                sta 0,x
.9ecf	a5 1f		lda $1f		                lda up+1
.9ed1	69 00		adc #$00	                adc #0          ; Adding carry
.9ed3	95 01		sta $01,x	                sta 1,x
.9ed5	60		rts		z_scr:          rts
.9ed6					xt_search:
.9ed6	20 f0 d8	jsr $d8f0	                jsr underflow_4
.9ed9	b5 00		lda $00,x	                lda 0,x
.9edb	15 01		ora $01,x	                ora 1,x
.9edd	d0 0b		bne $9eea	                bne _start_search
.9edf	e8		inx		                inx             ; Remove u2
.9ee0	e8		inx		                inx
.9ee1	a9 ff		lda #$ff	                lda #$FF        ; Turn addr2 into a true flag
.9ee3	95 00		sta $00,x	                sta 0,x
.9ee5	95 01		sta $01,x	                sta 1,x
.9ee7	4c 74 9f	jmp $9f74	                jmp z_search
.9eea					_start_search:
.9eea	20 95 a7	jsr $a795	                jsr xt_zero
.9eed					_search_loop:
.9eed	18		clc		                clc
.9eee	b5 00		lda $00,x	                lda 0,x
.9ef0	75 02		adc $02,x	                adc 2,x
.9ef2	85 24		sta $24		                sta tmp1
.9ef4	b5 01		lda $01,x	                lda 1,x
.9ef6	75 03		adc $03,x	                adc 3,x
.9ef8	d5 07		cmp $07,x	                cmp 7,x
.9efa	90 12		bcc $9f0e	                bcc _init_comparison ; Obviously less
.9efc	d0 06		bne $9f04	                bne _not_found
.9efe	b5 06		lda $06,x	                lda 6,x
.9f00	c5 24		cmp $24		                cmp tmp1
.9f02	b0 0a		bcs $9f0e	                bcs _init_comparison
.9f04					_not_found:
.9f04	e8		inx		                inx             ; Remove offset
.9f05	e8		inx		                inx
.9f06	e8		inx		                inx             ; Remove u2
.9f07	e8		inx		                inx
.9f08	74 00		stz $00,x	                stz 0,x         ; Turn addr2 into a false flag
.9f0a	74 01		stz $01,x	                stz 1,x
.9f0c	80 66		bra $9f74	                bra z_search
.9f0e					_init_comparison:
.9f0e	18		clc		                clc
.9f0f	b5 08		lda $08,x	                lda 8,x
.9f11	75 00		adc $00,x	                adc 0,x
.9f13	85 24		sta $24		                sta tmp1
.9f15	b5 09		lda $09,x	                lda 9,x
.9f17	75 01		adc $01,x	                adc 1,x
.9f19	85 25		sta $25		                sta tmp1+1
.9f1b	b5 04		lda $04,x	                lda 4,x
.9f1d	85 26		sta $26		                sta tmp2
.9f1f	b5 05		lda $05,x	                lda 5,x
.9f21	85 27		sta $27		                sta tmp2+1
.9f23	b5 02		lda $02,x	                lda 2,x
.9f25	85 28		sta $28		                sta tmp3
.9f27	b5 03		lda $03,x	                lda 3,x
.9f29	85 29		sta $29		                sta tmp3+1
.9f2b					_comparison_loop:
.9f2b	b2 24		lda ($24)	                lda (tmp1)
.9f2d	d2 26		cmp ($26)	                cmp (tmp2)
.9f2f	f0 05		beq $9f36	                beq _letters_match
.9f31	20 39 98	jsr $9839	                jsr xt_one_plus
.9f34	80 b7		bra $9eed	                bra _search_loop
.9f36					_letters_match:
.9f36	e6 24		inc $24		                inc tmp1
.9f38	d0 02		bne $9f3c	                bne +
.9f3a	e6 25		inc $25		                inc tmp1+1
.9f3c					+
.9f3c	e6 26		inc $26		                inc tmp2
.9f3e	d0 02		bne $9f42	                bne +
.9f40	e6 27		inc $27		                inc tmp2+1
.9f42					+
.9f42	a5 28		lda $28		                lda tmp3
.9f44	d0 02		bne $9f48	                bne +
.9f46	c6 29		dec $29		                dec tmp3+1
.9f48					+
.9f48	c6 28		dec $28		                dec tmp3
.9f4a	a5 28		lda $28		                lda tmp3
.9f4c	05 29		ora $29		                ora tmp3+1
.9f4e	d0 db		bne $9f2b	                bne _comparison_loop ; Check the next letter
.9f50	18		clc		                clc
.9f51	b5 00		lda $00,x	                lda 0,x
.9f53	75 08		adc $08,x	                adc 8,x
.9f55	95 08		sta $08,x	                sta 8,x
.9f57	b5 01		lda $01,x	                lda 1,x
.9f59	75 09		adc $09,x	                adc 9,x
.9f5b	95 09		sta $09,x	                sta 9,x
.9f5d	38		sec		                sec
.9f5e	b5 06		lda $06,x	                lda 6,x
.9f60	f5 00		sbc $00,x	                sbc 0,x
.9f62	95 06		sta $06,x	                sta 6,x
.9f64	b5 07		lda $07,x	                lda 7,x
.9f66	f5 01		sbc $01,x	                sbc 1,x
.9f68	95 07		sta $07,x	                sta 7,x
.9f6a	e8		inx		                inx             ; drop offset
.9f6b	e8		inx		                inx
.9f6c	e8		inx		                inx             ; drop u2
.9f6d	e8		inx		                inx
.9f6e	a9 ff		lda #$ff	                lda #$FF
.9f70	95 00		sta $00,x	                sta 0,x         ; Turn addr2 into a true flag.
.9f72	95 01		sta $01,x	                sta 1,x
.9f74	60		rts		z_search:       rts
.9f75					xt_semicolon:
.9f75	24 20		bit $20		                bit status
.9f77	70 11		bvs $9f8a	                bvs _colonword
.9f79	a9 60		lda #$60	                lda #$60                ; opcode for RTS
.9f7b	20 94 d7	jsr $d794	                jsr cmpl_a
.9f7e	ca		dex		                dex
.9f7f	ca		dex		                dex
.9f80	a5 04		lda $04		                lda workword
.9f82	95 00		sta $00,x	                sta 0,x
.9f84	a5 05		lda $05		                lda workword+1
.9f86	95 01		sta $01,x	                sta 1,x
.9f88	80 45		bra $9fcf	                bra _semicolon_done
.9f8a					_colonword:
.9f8a	a0 06		ldy #$06	                ldy #6
.9f8c	a5 00		lda $00		                lda cp
.9f8e	91 04		sta ($04),y	                sta (workword),y
.9f90	c8		iny		                iny
.9f91	a5 01		lda $01		                lda cp+1
.9f93	91 04		sta ($04),y	                sta (workword),y
.9f95	a9 60		lda #$60	                lda #$60                ; opcode for RTS
.9f97	20 94 d7	jsr $d794	                jsr cmpl_a
.9f9a	24 20		bit $20		                bit status
.9f9c	10 26		bpl $9fc4	                bpl _new_word   ; Bit 7 is clear = new word
.9f9e	ca		dex		                dex
.9f9f	ca		dex		                dex
.9fa0	ca		dex		                dex
.9fa1	ca		dex		                dex
.9fa2	b2 04		lda ($04)	                lda (workword)
.9fa4	95 00		sta $00,x	                sta 0,x
.9fa6	74 01		stz $01,x	                stz 1,x
.9fa8	a5 04		lda $04		                lda workword
.9faa	18		clc		                clc
.9fab	69 08		adc #$08	                adc #8
.9fad	95 02		sta $02,x	                sta 2,x
.9faf	a5 05		lda $05		                lda workword+1
.9fb1	69 00		adc #$00	                adc #0                  ; only want carry
.9fb3	95 03		sta $03,x	                sta 3,x
.9fb5	a9 02		lda #$02	                lda #str_redefined       ; address of string "redefined"
.9fb7	20 1d d9	jsr $d91d	                jsr print_string_no_lf
.9fba	20 f0 a4	jsr $a4f0	                jsr xt_type
.9fbd	20 0b a1	jsr $a10b	                jsr xt_space
.9fc0	a9 80		lda #$80	                lda #%10000000
.9fc2	14 20		trb $20		                trb status
.9fc4					_new_word:
.9fc4	a5 04		lda $04		                lda workword
.9fc6	85 02		sta $02		                sta dp
.9fc8	a5 05		lda $05		                lda workword+1
.9fca	85 03		sta $03		                sta dp+1
.9fcc	20 36 d8	jsr $d836	                jsr dp_to_current       ; Save the updated DP to the
.9fcf					_semicolon_done:
.9fcf	64 16		stz $16		                stz state
.9fd1	64 17		stz $17		                stz state+1
.9fd3	60		rts		z_semicolon:    rts
.9fd4					xt_sign:
.9fd4	20 e1 d8	jsr $d8e1	                jsr underflow_1
.9fd7	b5 01		lda $01,x	                lda 1,x         ; check MSB of TOS
.9fd9	30 04		bmi $9fdf	                bmi _minus
.9fdb	e8		inx		                inx
.9fdc	e8		inx		                inx
.9fdd	80 09		bra $9fe8	                bra _done
.9fdf					_minus:
.9fdf	a9 2d		lda #$2d	                lda #$2D        ; ASCII for "-"
.9fe1	95 00		sta $00,x	                sta 0,x         ; overwrite TOS
.9fe3	74 01		stz $01,x	                stz 1,x         ; paranoid
.9fe5	20 f3 91	jsr $91f3	                jsr xt_hold
.9fe8					_done:
.9fe8	60		rts		z_sign:         rts
.9fe9					xt_slash:
.9fe9	a9 00		lda #$00	                lda #0
.9feb	48		pha		                pha
.9fec	80 03		bra $9ff1	                bra slashmod_common
.9fee					xt_slash_mod:
.9fee	a9 ff		lda #$ff	                lda #$FF
.9ff0	48		pha		                pha             ; falls through to _common
.9ff1					slashmod_common:
.9ff1	20 5d a3	jsr $a35d	                jsr xt_to_r             ; >R
.9ff4	20 99 9e	jsr $9e99	                jsr xt_s_to_d           ; S>D
.9ff7	20 ae 9a	jsr $9aae	                jsr xt_r_from           ; R>
.9ffa	20 c2 a0	jsr $a0c2	                jsr xt_sm_slash_rem     ; SM/REM
.9ffd	68		pla		                pla
.9ffe	d0 05		bne $a005	                bne _done
.a000	20 9b a1	jsr $a19b	                jsr xt_swap
.a003	e8		inx		                inx             ; DROP
.a004	e8		inx		                inx
.a005					_done:
.a005					z_slash_mod:
.a005	60		rts		z_slash:        rts
.a006					xt_slash_string:
.a006	20 eb d8	jsr $d8eb	                jsr underflow_3
.a009	18		clc		                clc             ; 3OS+TOS
.a00a	b5 00		lda $00,x	                lda 0,x
.a00c	75 04		adc $04,x	                adc 4,x
.a00e	95 04		sta $04,x	                sta 4,x
.a010	b5 01		lda $01,x	                lda 1,x
.a012	75 05		adc $05,x	                adc 5,x
.a014	95 05		sta $05,x	                sta 5,x
.a016	38		sec		                sec             ; NOS-TOS
.a017	b5 02		lda $02,x	                lda 2,x
.a019	f5 00		sbc $00,x	                sbc 0,x
.a01b	95 02		sta $02,x	                sta 2,x
.a01d	b5 03		lda $03,x	                lda 3,x
.a01f	f5 01		sbc $01,x	                sbc 1,x
.a021	95 03		sta $03,x	                sta 3,x
.a023	e8		inx		                inx
.a024	e8		inx		                inx
.a025	60		rts		z_slash_string: rts
.a026					xt_sliteral:
.a026	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a029	a9 4c		lda #$4c	                lda #$4C
.a02b	20 94 d7	jsr $d794	                jsr cmpl_a
.a02e	20 94 d7	jsr $d794	                jsr cmpl_a
.a031	20 94 d7	jsr $d794	                jsr cmpl_a
.a034	8a		txa		                txa
.a035	38		sec		                sec
.a036	e9 06		sbc #$06	                sbc #6
.a038	aa		tax		                tax
.a039	b5 08		lda $08,x	                lda 8,x
.a03b	95 04		sta $04,x	                sta 4,x
.a03d	b5 09		lda $09,x	                lda 9,x
.a03f	95 05		sta $05,x	                sta 5,x
.a041	b5 06		lda $06,x	                lda 6,x
.a043	95 00		sta $00,x	                sta 0,x
.a045	b5 07		lda $07,x	                lda 7,x
.a047	95 01		sta $01,x	                sta 1,x
.a049	a5 00		lda $00		                lda cp
.a04b	95 08		sta $08,x	                sta 8,x
.a04d	95 02		sta $02,x	                sta 2,x
.a04f	a5 01		lda $01		                lda cp+1
.a051	95 09		sta $09,x	                sta 9,x
.a053	95 03		sta $03,x	                sta 3,x
.a055	20 de 95	jsr $95de	                jsr xt_move
.a058	18		clc		                clc
.a059	a5 00		lda $00		                lda cp
.a05b	75 00		adc $00,x	                adc 0,x
.a05d	85 00		sta $00		                sta cp
.a05f	a5 01		lda $01		                lda cp+1
.a061	75 01		adc $01,x	                adc 1,x
.a063	85 01		sta $01		                sta cp+1
.a065	b5 02		lda $02,x	                lda 2,x
.a067	38		sec		                sec
.a068	e9 02		sbc #$02	                sbc #2
.a06a	85 24		sta $24		                sta tmp1
.a06c	b5 03		lda $03,x	                lda 3,x
.a06e	e9 00		sbc #$00	                sbc #0          ; Propagate borrow
.a070	85 25		sta $25		                sta tmp1+1
.a072	a5 00		lda $00		                lda cp
.a074	92 24		sta ($24)	                sta (tmp1)
.a076	a0 01		ldy #$01	                ldy #1
.a078	a5 01		lda $01		                lda cp+1
.a07a	91 24		sta ($24),y	                sta (tmp1),y
.a07c					sliteral_const_str:
.a07c	a0 a0		ldy #$a0	                ldy #>sliteral_runtime
.a07e	a9 96		lda #$96	                lda #<sliteral_runtime
.a080	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.a083	b4 03		ldy $03,x	                ldy 3,x                ; address MSB
.a085	b5 02		lda $02,x	                lda 2,x                ; address LSB
.a087	20 90 d7	jsr $d790	                jsr cmpl_word
.a08a	b4 01		ldy $01,x	                ldy 1,x                ; length MSB
.a08c	b5 00		lda $00,x	                lda 0,x                ; length LSB
.a08e	20 90 d7	jsr $d790	                jsr cmpl_word
.a091	e8		inx		                inx
.a092	e8		inx		                inx
.a093	e8		inx		                inx
.a094	e8		inx		                inx
.a095	60		rts		z_sliteral:     rts
.a096					sliteral_runtime:
.a096	ca		dex		                dex
.a097	ca		dex		                dex
.a098	ca		dex		                dex
.a099	ca		dex		                dex
.a09a	68		pla		                pla
.a09b	85 24		sta $24		                sta tmp1        ; LSB of address
.a09d	68		pla		                pla
.a09e	85 25		sta $25		                sta tmp1+1      ; MSB of address
.a0a0	a0 01		ldy #$01	                ldy #1          ; adjust for JSR/RTS mechanics on 65c02
.a0a2	b1 24		lda ($24),y	                lda (tmp1),y
.a0a4	95 02		sta $02,x	                sta 2,x         ; LSB of address
.a0a6	c8		iny		                iny
.a0a7	b1 24		lda ($24),y	                lda (tmp1),y
.a0a9	95 03		sta $03,x	                sta 3,x         ; MSB of address
.a0ab	c8		iny		                iny
.a0ac	b1 24		lda ($24),y	                lda (tmp1),y
.a0ae	95 00		sta $00,x	                sta 0,x         ; LSB of length
.a0b0	c8		iny		                iny
.a0b1	b1 24		lda ($24),y	                lda (tmp1),y
.a0b3	95 01		sta $01,x	                sta 1,x         ; MSB of length
.a0b5	18		clc		                clc
.a0b6	a5 24		lda $24		                lda tmp1
.a0b8	69 04		adc #$04	                adc #4
.a0ba	a8		tay		                tay             ; LSB
.a0bb	a5 25		lda $25		                lda tmp1+1
.a0bd	69 00		adc #$00	                adc #0          ; we only need carry
.a0bf	48		pha		                pha             ; MSB
.a0c0	5a		phy		                phy
.a0c1	60		rts		                rts
.a0c2					xt_sm_slash_rem:
.a0c2	20 eb d8	jsr $d8eb	                jsr underflow_3 ; contains double number
.a0c5	b5 03		lda $03,x	                lda 3,x
.a0c7	48		pha		                pha
.a0c8	b5 01		lda $01,x	                lda 1,x
.a0ca	55 03		eor $03,x	                eor 3,x
.a0cc	48		pha		                pha
.a0cd	20 33 81	jsr $8133	                jsr xt_abs
.a0d0	e8		inx		                inx             ; pretend we pushed n1 to R
.a0d1	e8		inx		                inx
.a0d2	20 a2 8a	jsr $8aa2	                jsr xt_dabs
.a0d5	ca		dex		                dex
.a0d6	ca		dex		                dex
.a0d7	20 a7 a5	jsr $a5a7	                jsr xt_um_slash_mod     ; UM/MOD
.a0da	68		pla		                pla
.a0db	10 03		bpl $a0e0	                bpl +
.a0dd	20 3f 96	jsr $963f	                jsr xt_negate
.a0e0					+
.a0e0	68		pla		                pla
.a0e1	10 07		bpl $a0ea	                bpl _done
.a0e3	e8		inx		                inx             ; pretend we pushed quotient to R
.a0e4	e8		inx		                inx
.a0e5	20 3f 96	jsr $963f	                jsr xt_negate
.a0e8	ca		dex		                dex
.a0e9	ca		dex		                dex
.a0ea					_done:
.a0ea	60		rts		z_sm_slash_rem: rts
.a0eb					xt_source:
.a0eb	ca		dex		                dex
.a0ec	ca		dex		                dex
.a0ed	a5 08		lda $08		                lda cib
.a0ef	95 00		sta $00,x	                sta 0,x
.a0f1	a5 09		lda $09		                lda cib+1
.a0f3	95 01		sta $01,x	                sta 1,x
.a0f5	ca		dex		                dex
.a0f6	ca		dex		                dex
.a0f7	a5 0a		lda $0a		                lda ciblen
.a0f9	95 00		sta $00,x	                sta 0,x
.a0fb	a5 0b		lda $0b		                lda ciblen+1
.a0fd	95 01		sta $01,x	                sta 1,x
.a0ff	60		rts		z_source:       rts
.a100					xt_source_id:
.a100	ca		dex		                dex
.a101	ca		dex		                dex
.a102	a5 06		lda $06		                lda insrc
.a104	95 00		sta $00,x	                sta 0,x
.a106	a5 07		lda $07		                lda insrc+1
.a108	95 01		sta $01,x	                sta 1,x
.a10a	60		rts		z_source_id:    rts
.a10b					xt_space:
.a10b	a9 20		lda #$20	                lda #AscSP
.a10d	20 12 8e	jsr $8e12	                jsr emit_a
.a110	60		rts		z_space:        rts
.a111					xt_spaces:
.a111	20 e1 d8	jsr $d8e1	                jsr underflow_1
.a114	20 95 a7	jsr $a795	                jsr xt_zero
.a117	20 34 95	jsr $9534	                jsr xt_max
.a11a	b5 00		lda $00,x	                lda 0,x
.a11c	15 01		ora $01,x	                ora 1,x
.a11e	f0 2a		beq $a14a	                beq _done
.a120	b4 01		ldy $01,x	                ldy 1,x
.a122	d0 0c		bne $a130	                bne _lots_of_spaces
.a124	b4 00		ldy $00,x	                ldy 0,x
.a126					_quick_loop:
.a126	a9 20		lda #$20	                lda #AscSP
.a128	20 12 8e	jsr $8e12	                jsr emit_a
.a12b	88		dey		                dey
.a12c	f0 1c		beq $a14a	                beq _done
.a12e	80 f6		bra $a126	                bra _quick_loop
.a130					_lots_of_spaces:
.a130	b4 00		ldy $00,x	                ldy 0,x
.a132					_first_slow_loop:
.a132	f0 08		beq $a13c	                beq _slow_outer_loop
.a134	a9 20		lda #$20	                lda #AscSP
.a136	20 12 8e	jsr $8e12	                jsr emit_a
.a139	88		dey		                dey
.a13a	80 f6		bra $a132	                bra _first_slow_loop
.a13c					_slow_outer_loop:
.a13c	a0 00		ldy #$00	                ldy #00
.a13e					_slow_inner_loop:
.a13e	a9 20		lda #$20	                lda #AscSP
.a140	20 12 8e	jsr $8e12	                jsr emit_a
.a143	88		dey		                dey
.a144	d0 f8		bne $a13e	                bne _slow_inner_loop
.a146	d6 01		dec $01,x	                dec 1,x
.a148	d0 f2		bne $a13c	                bne _slow_outer_loop
.a14a					_done:
.a14a	e8		inx		                inx             ; drop
.a14b	e8		inx		                inx
.a14c	60		rts		z_spaces:       rts
.a14d					xt_star:
.a14d	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a150	20 e9 a5	jsr $a5e9	                jsr xt_um_star
.a153	e8		inx		                inx
.a154	e8		inx		                inx
.a155	60		rts		z_star:         rts
.a156					xt_star_slash:
.a156	20 5f a1	jsr $a15f	                jsr xt_star_slash_mod
.a159	20 9b a1	jsr $a19b	                jsr xt_swap
.a15c	e8		inx		                inx
.a15d	e8		inx		                inx
.a15e					z_star_slash:
.a15e	60		rts		                rts
.a15f					xt_star_slash_mod:
.a15f	20 eb d8	jsr $d8eb	                jsr underflow_3
.a162	20 5d a3	jsr $a35d	                jsr xt_to_r
.a165	20 aa 94	jsr $94aa	                jsr xt_m_star
.a168	20 ae 9a	jsr $9aae	                jsr xt_r_from
.a16b	20 c2 a0	jsr $a0c2	                jsr xt_sm_slash_rem
.a16e					z_star_slash_mod:
.a16e	60		rts		                rts
.a16f					xt_state:
.a16f	ca		dex		                dex
.a170	ca		dex		                dex
.a171	a9 16		lda #$16	                lda #<state
.a173	95 00		sta $00,x	                sta 0,x
.a175	a9 00		lda #$00	                lda #>state
.a177	95 01		sta $01,x	                sta 1,x
.a179	60		rts		z_state:        rts
.a17a					xt_store:
.a17a	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a17d	b5 02		lda $02,x	                lda 2,x         ; LSB
.a17f	81 00		sta ($00,x)	                sta (0,x)
.a181	f6 00		inc $00,x	                inc 0,x
.a183	d0 02		bne $a187	                bne +
.a185	f6 01		inc $01,x	                inc 1,x
.a187					+
.a187	b5 03		lda $03,x	                lda 3,x         ; MSB
.a189	81 00		sta ($00,x)	                sta (0,x)
.a18b	e8		inx		                inx             ; 2DROP
.a18c	e8		inx		                inx
.a18d	e8		inx		                inx
.a18e	e8		inx		                inx
.a18f	60		rts		z_store:        rts
.a190					xt_strip_underflow:
.a190	ca		dex		                dex
.a191	ca		dex		                dex
.a192	a9 1c		lda #$1c	                lda #<uf_strip
.a194	95 00		sta $00,x	                sta 0,x
.a196	a9 00		lda #$00	                lda #>uf_strip
.a198	95 01		sta $01,x	                sta 1,x
.a19a					z_strip_underflow:
.a19a	60		rts		                rts
.a19b					xt_swap:
.a19b	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a19e	b5 00		lda $00,x	                lda 0,x         ; LSB
.a1a0	b4 02		ldy $02,x	                ldy 2,x
.a1a2	95 02		sta $02,x	                sta 2,x
.a1a4	94 00		sty $00,x	                sty 0,x
.a1a6	b5 01		lda $01,x	                lda 1,x         ; MSB
.a1a8	b4 03		ldy $03,x	                ldy 3,x
.a1aa	95 03		sta $03,x	                sta 3,x
.a1ac	94 01		sty $01,x	                sty 1,x
.a1ae	60		rts		z_swap:         rts
.a1af					xt_then:
.a1af	20 8e 91	jsr $918e	                jsr xt_here
.a1b2	20 9b a1	jsr $a19b	                jsr xt_swap
.a1b5	20 7a a1	jsr $a17a	                jsr xt_store
.a1b8	60		rts		z_then:         rts
.a1b9					xt_thru:
.a1b9	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a1bc	b5 01		lda $01,x	                lda 1,x
.a1be	48		pha		                pha
.a1bf	b5 00		lda $00,x	                lda 0,x
.a1c1	48		pha		                pha
.a1c2	e8		inx		                inx
.a1c3	e8		inx		                inx
.a1c4					_thru_loop:
.a1c4	b5 01		lda $01,x	                lda 1,x
.a1c6	48		pha		                pha
.a1c7	b5 00		lda $00,x	                lda 0,x
.a1c9	48		pha		                pha
.a1ca	20 d3 93	jsr $93d3	                jsr xt_load
.a1cd	68		pla		                pla
.a1ce	85 24		sta $24		                sta tmp1
.a1d0	68		pla		                pla
.a1d1	85 25		sta $25		                sta tmp1+1
.a1d3	68		pla		                pla
.a1d4	85 26		sta $26		                sta tmp2
.a1d6	68		pla		                pla
.a1d7	85 27		sta $27		                sta tmp2+1
.a1d9	c5 25		cmp $25		                cmp tmp1+1
.a1db	d0 08		bne $a1e5	                bne _next_screen
.a1dd	a5 26		lda $26		                lda tmp2        ; Compare the LSB
.a1df	c5 24		cmp $24		                cmp tmp1
.a1e1	d0 02		bne $a1e5	                bne _next_screen
.a1e3	80 18		bra $a1fd	                bra _done       ; We just did the last screen.
.a1e5					_next_screen:
.a1e5	a5 27		lda $27		                lda tmp2+1
.a1e7	48		pha		                pha
.a1e8	a5 26		lda $26		                lda tmp2
.a1ea	48		pha		                pha
.a1eb	e6 24		inc $24		                inc tmp1
.a1ed	d0 02		bne $a1f1	                bne +
.a1ef	e6 25		inc $25		                inc tmp1+1
.a1f1					+
.a1f1	ca		dex		                dex
.a1f2	ca		dex		                dex
.a1f3	a5 24		lda $24		                lda tmp1
.a1f5	95 00		sta $00,x	                sta 0,x
.a1f7	a5 25		lda $25		                lda tmp1+1
.a1f9	95 01		sta $01,x	                sta 1,x
.a1fb	80 c7		bra $a1c4	                bra _thru_loop
.a1fd					_done:
.a1fd	60		rts		z_thru:         rts
.a1fe					xt_tick:
.a1fe	20 fb 98	jsr $98fb	                jsr xt_parse_name       ; ( -- addr u )
.a201	b5 00		lda $00,x	                lda 0,x
.a203	15 01		ora $01,x	                ora 1,x
.a205	d0 05		bne $a20c	                bne +
.a207	a9 05		lda #$05	                lda #err_noname
.a209	4c f7 d8	jmp $d8f7	                jmp error
.a20c					+
.a20c	20 f7 8f	jsr $8ff7	                jsr xt_find_name        ; ( addr u -- nt )
.a20f	b5 00		lda $00,x	                lda 0,x
.a211	15 01		ora $01,x	                ora 1,x
.a213	d0 05		bne $a21a	                bne +
.a215	a9 08		lda #$08	                lda #err_syntax
.a217	4c f7 d8	jmp $d8f7	                jmp error
.a21a					+
.a21a	20 fd 95	jsr $95fd	                jsr xt_name_to_int      ; ( nt -- xt )
.a21d	60		rts		z_tick:         rts
.a21e					xt_to:
.a21e	20 fe a1	jsr $a1fe	                jsr xt_tick             ; ( [n] xt )
.a221	b5 00		lda $00,x	                lda 0,x                 ; LSB
.a223	18		clc		                clc
.a224	69 03		adc #$03	                adc #3
.a226	85 24		sta $24		                sta tmp1
.a228	b5 01		lda $01,x	                lda 1,x                 ; MSB
.a22a	69 00		adc #$00	                adc #0                  ; we just want the carry
.a22c	85 25		sta $25		                sta tmp1+1
.a22e	e8		inx		                inx
.a22f	e8		inx		                inx                     ; ( [n] )
.a230	a5 16		lda $16		                lda state
.a232	05 17		ora $17		                ora state+1
.a234	f0 34		beq $a26a	                beq _interpret
.a236	a0 00		ldy #$00	                ldy #$00                ; Code for LDA 0,X
.a238	a9 b5		lda #$b5	                lda #$B5
.a23a	20 90 d7	jsr $d790	                jsr cmpl_word
.a23d	a9 8d		lda #$8d	                lda #$8D                ; Code for STA abs
.a23f	20 94 d7	jsr $d794	                jsr cmpl_a
.a242	a4 25		ldy $25		                ldy tmp1+1              ; MSB goes in Y
.a244	a5 24		lda $24		                lda tmp1
.a246	20 90 d7	jsr $d790	                jsr cmpl_word
.a249	a0 01		ldy #$01	                ldy #$01                ; Code for LDA 1,X
.a24b	a9 b5		lda #$b5	                lda #$B5
.a24d	20 90 d7	jsr $d790	                jsr cmpl_word
.a250	a9 8d		lda #$8d	                lda #$8D                ; Code for STA abs
.a252	20 94 d7	jsr $d794	                jsr cmpl_a
.a255	e6 24		inc $24		                inc tmp1                ; Calculate MSB
.a257	d0 02		bne $a25b	                bne +
.a259	e6 25		inc $25		                inc tmp1+1
.a25b					+
.a25b	a4 25		ldy $25		                ldy tmp1+1              ; MSB goes in Y
.a25d	a5 24		lda $24		                lda tmp1
.a25f	20 90 d7	jsr $d790	                jsr cmpl_word
.a262	a0 e8		ldy #$e8	                ldy #$E8                ; Code for INX
.a264	98		tya		                tya
.a265	20 90 d7	jsr $d790	                jsr cmpl_word
.a268	80 0f		bra $a279	                bra _done
.a26a					_interpret:
.a26a	20 e1 d8	jsr $d8e1	                jsr underflow_1
.a26d	b5 00		lda $00,x	                lda 0,x
.a26f	92 24		sta ($24)	                sta (tmp1)              ; LSB
.a271	a0 01		ldy #$01	                ldy #1
.a273	b5 01		lda $01,x	                lda 1,x                 ; MSB
.a275	91 24		sta ($24),y	                sta (tmp1),y            ; fall through to common
.a277	e8		inx		                inx                     ; DROP
.a278	e8		inx		                inx
.a279					_done:
.a279	60		rts		z_to:           rts
.a27a					xt_to_body:
.a27a	20 e1 d8	jsr $d8e1	                jsr underflow_1
.a27d	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; ( xt xt )
.a280	20 94 92	jsr $9294	                jsr xt_int_to_name      ; ( xt nt )
.a283	f6 00		inc $00,x	                inc 0,x
.a285	d0 02		bne $a289	                bne +
.a287	f6 01		inc $01,x	                inc 1,x
.a289					+
.a289	a1 00		lda ($00,x)	                lda (0,x)               ; get status byte
.a28b	29 20		and #$20	                and #HC
.a28d	f0 0d		beq $a29c	                beq _no_cfa
.a28f	18		clc		                clc
.a290	b5 02		lda $02,x	                lda 2,x         ; LSB
.a292	69 03		adc #$03	                adc #3
.a294	95 02		sta $02,x	                sta 2,x
.a296	b5 03		lda $03,x	                lda 3,x         ; MSB
.a298	69 00		adc #$00	                adc #0          ; we conly care about the carry
.a29a	95 03		sta $03,x	                sta 3,x         ; Fall through to _no_cfa
.a29c					_no_cfa:
.a29c	e8		inx		                inx             ; get rid of the nt
.a29d	e8		inx		                inx
.a29e					_done:
.a29e	60		rts		z_to_body:      rts
.a29f					xt_to_in:
.a29f	ca		dex		                dex
.a2a0	ca		dex		                dex
.a2a1	a9 0c		lda #$0c	                lda #<toin
.a2a3	95 00		sta $00,x	                sta 0,x
.a2a5	a9 00		lda #$00	                lda #>toin      ; paranoid, should be zero
.a2a7	95 01		sta $01,x	                sta 1,x
.a2a9	60		rts		z_to_in:        rts
.a2aa					xt_to_number:
.a2aa	20 f0 d8	jsr $d8f0	                jsr underflow_4
.a2ad	b5 06		lda $06,x	                lda 6,x         ; ud-lo LSB
.a2af	85 36		sta $36		                sta scratch
.a2b1	b5 07		lda $07,x	                lda 7,x         ; ud-lo MSB
.a2b3	85 37		sta $37		                sta scratch+1
.a2b5	b5 04		lda $04,x	                lda 4,x         ; ud-hi LSB
.a2b7	85 38		sta $38		                sta scratch+2
.a2b9	b5 05		lda $05,x	                lda 5,x         ; ud-hi MSB
.a2bb	85 39		sta $39		                sta scratch+3
.a2bd	ca		dex		                dex
.a2be	ca		dex		                dex
.a2bf					_loop:
.a2bf	a1 04		lda ($04,x)	                lda (4,x)
.a2c1	95 00		sta $00,x	                sta 0,x                 ; ( ud-lo ud-hi addr u char )
.a2c3	74 01		stz $01,x	                stz 1,x                 ; paranoid
.a2c5	20 21 8b	jsr $8b21	                jsr xt_digit_question   ; ( char -- n -1 | char 0 )
.a2c8	b5 00		lda $00,x	                lda 0,x
.a2ca	d0 04		bne $a2d0	                bne _digit_ok
.a2cc	e8		inx		                inx
.a2cd	e8		inx		                inx
.a2ce	80 67		bra $a337	                bra _done       ; ( ud-lo ud-hi addr u char )
.a2d0					_digit_ok:
.a2d0	b5 02		lda $02,x	                lda 2,x
.a2d2	85 3a		sta $3a		                sta scratch+4
.a2d4	b5 03		lda $03,x	                lda 3,x
.a2d6	85 3b		sta $3b		                sta scratch+5
.a2d8	a5 38		lda $38		                lda scratch+2
.a2da	95 02		sta $02,x	                sta 2,x         ; NOS
.a2dc	a5 39		lda $39		                lda scratch+3
.a2de	95 03		sta $03,x	                sta 3,x
.a2e0	a5 18		lda $18		                lda base
.a2e2	95 00		sta $00,x	                sta 0,x         ; TOS
.a2e4	74 01		stz $01,x	                stz 1,x         ; now ( ud-lo ud-hi addr u ud-hi base)
.a2e6	20 e9 a5	jsr $a5e9	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-hi-lo ud-hi-hi )
.a2e9	b5 02		lda $02,x	                lda 2,x         ; ud-hi-lo
.a2eb	85 3c		sta $3c		                sta scratch+6
.a2ed	b5 03		lda $03,x	                lda 3,x
.a2ef	85 3d		sta $3d		                sta scratch+7
.a2f1	a5 36		lda $36		                lda scratch
.a2f3	95 02		sta $02,x	                sta 2,x
.a2f5	a5 37		lda $37		                lda scratch+1
.a2f7	95 03		sta $03,x	                sta 3,x         ; ( ud-lo ud-hi addr u ud-lo ud-hi-hi )
.a2f9	a5 18		lda $18		                lda base
.a2fb	95 00		sta $00,x	                sta 0,x
.a2fd	74 01		stz $01,x	                stz 1,x         ; ( ud-lo ud-hi addr u ud-lo base )
.a2ff	20 e9 a5	jsr $a5e9	                jsr xt_um_star  ; ( ud-lo ud-hi addr u ud-lo-lo ud-lo-hi )
.a302	b5 00		lda $00,x	                lda 0,x
.a304	85 38		sta $38		                sta scratch+2
.a306	b5 01		lda $01,x	                lda 1,x
.a308	85 39		sta $39		                sta scratch+3
.a30a	b5 02		lda $02,x	                lda 2,x
.a30c	85 36		sta $36		                sta scratch
.a30e	b5 03		lda $03,x	                lda 3,x
.a310	85 37		sta $37		                sta scratch+1
.a312	18		clc		                clc
.a313	a5 36		lda $36		                lda scratch     ; ud-lo LSB
.a315	65 3a		adc $3a		                adc scratch+4   ; n LSB
.a317	85 36		sta $36		                sta scratch     ; this is the new ud-lo
.a319	a5 37		lda $37		                lda scratch+1   ; ud-lo MSB
.a31b	65 3b		adc $3b		                adc scratch+5   ; n MSB
.a31d	85 37		sta $37		                sta scratch+1
.a31f	a5 38		lda $38		                lda scratch+2   ; LSB
.a321	65 3c		adc $3c		                adc scratch+6
.a323	85 38		sta $38		                sta scratch+2   ; this is the new ud-hi
.a325	a5 39		lda $39		                lda scratch+3   ; MSB
.a327	65 3d		adc $3d		                adc scratch+7
.a329	85 39		sta $39		                sta scratch+3
.a32b	e8		inx		                inx
.a32c	e8		inx		                inx             ; ( ud-lo ud-hi addr u ud-lo-lo )
.a32d	f6 04		inc $04,x	                inc 4,x
.a32f	d0 02		bne $a333	                bne +
.a331	f6 05		inc $05,x	                inc 5,x
.a333					+
.a333	d6 02		dec $02,x	                dec 2,x
.a335	d0 88		bne $a2bf	                bne _loop
.a337					_done:
.a337	e8		inx		                inx
.a338	e8		inx		                inx             ; ( ud-lo ud-hi addr u )
.a339	a5 36		lda $36		                lda scratch     ; new ud-lo
.a33b	95 06		sta $06,x	                sta 6,x
.a33d	a5 37		lda $37		                lda scratch+1
.a33f	95 07		sta $07,x	                sta 7,x
.a341	a5 38		lda $38		                lda scratch+2
.a343	95 04		sta $04,x	                sta 4,x
.a345	a5 39		lda $39		                lda scratch+3
.a347	95 05		sta $05,x	                sta 5,x
.a349	60		rts		z_to_number:    rts
.a34a					xt_to_order:
.a34a	20 5d a3	jsr $a35d	                jsr xt_to_r
.a34d	20 50 91	jsr $9150	                jsr xt_get_order
.a350	20 ae 9a	jsr $9aae	                jsr xt_r_from
.a353	20 9b a1	jsr $a19b	                jsr xt_swap
.a356	20 39 98	jsr $9839	                jsr xt_one_plus
.a359	20 37 9d	jsr $9d37	                jsr xt_set_order
.a35c	60		rts		z_to_order:     rts
.a35d					xt_to_r:
.a35d	68		pla		                pla             ; LSB
.a35e	85 2c		sta $2c		                sta tmptos
.a360	7a		ply		                ply             ; MSB
.a361	20 e1 d8	jsr $d8e1	                jsr underflow_1
.a364	b5 01		lda $01,x	                lda 1,x         ; MSB
.a366	48		pha		                pha
.a367	b5 00		lda $00,x	                lda 0,x         ; LSB
.a369	48		pha		                pha
.a36a	e8		inx		                inx
.a36b	e8		inx		                inx
.a36c	5a		phy		                phy             ; MSB
.a36d	a5 2c		lda $2c		                lda tmptos
.a36f	48		pha		                pha             ; LSB
.a370	60		rts		z_to_r:         rts
.a371					xt_true:
.a371	ca		dex		                dex
.a372	ca		dex		                dex
.a373	a9 ff		lda #$ff	                lda #$FF
.a375	95 00		sta $00,x	                sta 0,x
.a377	95 01		sta $01,x	                sta 1,x
.a379	60		rts		z_true:         rts
.a37a					xt_tuck:
.a37a	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a37d	ca		dex		                dex
.a37e	ca		dex		                dex
.a37f	b4 04		ldy $04,x	                ldy 4,x         ; LSB
.a381	b5 02		lda $02,x	                lda 2,x
.a383	95 04		sta $04,x	                sta 4,x
.a385	94 02		sty $02,x	                sty 2,x
.a387	95 00		sta $00,x	                sta 0,x
.a389	b4 05		ldy $05,x	                ldy 5,x         ; MSB
.a38b	b5 03		lda $03,x	                lda 3,x
.a38d	95 05		sta $05,x	                sta 5,x
.a38f	94 03		sty $03,x	                sty 3,x         ; bba
.a391	95 01		sta $01,x	                sta 1,x         ; baa
.a393	60		rts		z_tuck:         rts
.a394					xt_assembler_wordlist:
.a394					xt_two:
.a394	ca		dex		                dex
.a395	ca		dex		                dex
.a396	a9 02		lda #$02	                lda #2
.a398	95 00		sta $00,x	                sta 0,x
.a39a	74 01		stz $01,x	                stz 1,x
.a39c					z_assembler_wordlist:
.a39c	60		rts		z_two:          rts
.a39d					xt_two_drop:
.a39d	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a3a0	e8		inx		                inx
.a3a1	e8		inx		                inx
.a3a2	e8		inx		                inx
.a3a3	e8		inx		                inx
.a3a4	60		rts		z_two_drop:     rts
.a3a5					xt_two_dup:
.a3a5	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a3a8	ca		dex		                dex
.a3a9	ca		dex		                dex
.a3aa	ca		dex		                dex
.a3ab	ca		dex		                dex
.a3ac	b5 04		lda $04,x	                lda 4,x         ; TOS
.a3ae	95 00		sta $00,x	                sta 0,x
.a3b0	b5 05		lda $05,x	                lda 5,x
.a3b2	95 01		sta $01,x	                sta 1,x
.a3b4	b5 06		lda $06,x	                lda 6,x         ; NOS
.a3b6	95 02		sta $02,x	                sta 2,x
.a3b8	b5 07		lda $07,x	                lda 7,x
.a3ba	95 03		sta $03,x	                sta 3,x
.a3bc	60		rts		z_two_dup:      rts
.a3bd					xt_two_fetch:
.a3bd	20 e1 d8	jsr $d8e1	                jsr underflow_1
.a3c0	b5 00		lda $00,x	                lda 0,x
.a3c2	85 24		sta $24		                sta tmp1
.a3c4	b4 01		ldy $01,x	                ldy 1,x
.a3c6	84 25		sty $25		                sty tmp1+1
.a3c8	ca		dex		                dex             ; reuse one stack element
.a3c9	ca		dex		                dex
.a3ca	b2 24		lda ($24)	                lda (tmp1)      ; copy LSB
.a3cc	95 00		sta $00,x	                sta 0,x
.a3ce	a0 01		ldy #$01	                ldy #1          ; copy next
.a3d0	b1 24		lda ($24),y	                lda (tmp1),y
.a3d2	95 01		sta $01,x	                sta 1,x
.a3d4	c8		iny		                iny             ; copy next
.a3d5	b1 24		lda ($24),y	                lda (tmp1),y
.a3d7	95 02		sta $02,x	                sta 2,x
.a3d9	c8		iny		                iny             ; copy next
.a3da	b1 24		lda ($24),y	                lda (tmp1),y
.a3dc	95 03		sta $03,x	                sta 3,x
.a3de	60		rts		z_two_fetch:    rts
.a3df					xt_two_over:
.a3df	20 f0 d8	jsr $d8f0	                jsr underflow_4
.a3e2	ca		dex		                dex
.a3e3	ca		dex		                dex
.a3e4	ca		dex		                dex
.a3e5	ca		dex		                dex
.a3e6	b5 08		lda $08,x	                lda 8,x
.a3e8	95 00		sta $00,x	                sta 0,x
.a3ea	b5 09		lda $09,x	                lda 9,x
.a3ec	95 01		sta $01,x	                sta 1,x
.a3ee	b5 0a		lda $0a,x	                lda 10,x
.a3f0	95 02		sta $02,x	                sta 2,x
.a3f2	b5 0b		lda $0b,x	                lda 11,x
.a3f4	95 03		sta $03,x	                sta 3,x
.a3f6	60		rts		z_two_over:     rts
.a3f7					xt_two_r_fetch:
.a3f7	ca		dex		                dex
.a3f8	ca		dex		                dex
.a3f9	ca		dex		                dex
.a3fa	ca		dex		                dex
.a3fb	8a		txa		                txa
.a3fc	ba		tsx		                tsx
.a3fd	da		phx		                phx             ; 65c02 has no TXY, so do it the hard way
.a3fe	7a		ply		                ply
.a3ff	aa		tax		                tax
.a400	b9 03 01	lda $0103,y	                lda $0103,y     ; LSB of top entry
.a403	95 00		sta $00,x	                sta 0,x
.a405	b9 04 01	lda $0104,y	                lda $0104,y     ; MSB of top entry
.a408	95 01		sta $01,x	                sta 1,x
.a40a	b9 05 01	lda $0105,y	                lda $0105,y     ; LSB of bottom entry
.a40d	95 02		sta $02,x	                sta 2,x
.a40f	b9 06 01	lda $0106,y	                lda $0106,y     ; MSB of top entry
.a412	95 03		sta $03,x	                sta 3,x
.a414	60		rts		z_two_r_fetch:  rts
.a415					xt_two_r_from:
.a415	68		pla		                pla                     ; LSB
.a416	85 24		sta $24		                sta tmp1
.a418	68		pla		                pla                     ; MSB
.a419	85 25		sta $25		                sta tmp1+1
.a41b	ca		dex		                dex
.a41c	ca		dex		                dex
.a41d	ca		dex		                dex
.a41e	ca		dex		                dex
.a41f	68		pla		                pla                     ; LSB
.a420	95 00		sta $00,x	                sta 0,x
.a422	68		pla		                pla                     ; MSB
.a423	95 01		sta $01,x	                sta 1,x
.a425	68		pla		                pla                     ; LSB
.a426	95 02		sta $02,x	                sta 2,x
.a428	68		pla		                pla                     ; MSB
.a429	95 03		sta $03,x	                sta 3,x
.a42b	a5 25		lda $25		                lda tmp1+1              ; MSB
.a42d	48		pha		                pha
.a42e	a5 24		lda $24		                lda tmp1                ; LSB
.a430	48		pha		                pha
.a431	60		rts		z_two_r_from:   rts
.a432					xt_two_slash:
.a432	20 e1 d8	jsr $d8e1	                jsr underflow_1
.a435	b5 01		lda $01,x	                lda 1,x
.a437	0a		asl a		                asl                     ; save the sign
.a438	76 01		ror $01,x	                ror 1,x
.a43a	76 00		ror $00,x	                ror 0,x
.a43c	60		rts		z_two_slash:    rts
.a43d					xt_two_star:
.a43d					xt_cells:
.a43d	20 e1 d8	jsr $d8e1	                jsr underflow_1
.a440	16 00		asl $00,x	                asl 0,x
.a442	36 01		rol $01,x	                rol 1,x
.a444					z_cells:
.a444	60		rts		z_two_star:     rts
.a445					xt_two_store:
.a445	20 eb d8	jsr $d8eb	                jsr underflow_3
.a448	b5 00		lda $00,x	                lda 0,x
.a44a	85 24		sta $24		                sta tmp1
.a44c	b4 01		ldy $01,x	                ldy 1,x
.a44e	84 25		sty $25		                sty tmp1+1
.a450	e8		inx		                inx
.a451	e8		inx		                inx
.a452	b5 00		lda $00,x	                lda 0,x         ; copy MSB
.a454	92 24		sta ($24)	                sta (tmp1)
.a456	b5 01		lda $01,x	                lda 1,x         ; copy next
.a458	a0 01		ldy #$01	                ldy #1
.a45a	91 24		sta ($24),y	                sta (tmp1),y
.a45c	b5 02		lda $02,x	                lda 2,x         ; copy next
.a45e	c8		iny		                iny
.a45f	91 24		sta ($24),y	                sta (tmp1),y
.a461	b5 03		lda $03,x	                lda 3,x         ; copy MSB
.a463	c8		iny		                iny
.a464	91 24		sta ($24),y	                sta (tmp1),y
.a466	e8		inx		                inx             ; 2DROP
.a467	e8		inx		                inx
.a468	e8		inx		                inx
.a469	e8		inx		                inx
.a46a	60		rts		z_two_store:    rts
.a46b					xt_two_swap:
.a46b	20 f0 d8	jsr $d8f0	                jsr underflow_4
.a46e	b5 00		lda $00,x	                lda 0,x
.a470	b4 04		ldy $04,x	                ldy 4,x
.a472	95 04		sta $04,x	                sta 4,x
.a474	94 00		sty $00,x	                sty 0,x
.a476	b5 01		lda $01,x	                lda 1,x
.a478	b4 05		ldy $05,x	                ldy 5,x
.a47a	95 05		sta $05,x	                sta 5,x
.a47c	94 01		sty $01,x	                sty 1,x
.a47e	b5 02		lda $02,x	                lda 2,x
.a480	b4 06		ldy $06,x	                ldy 6,x
.a482	95 06		sta $06,x	                sta 6,x
.a484	94 02		sty $02,x	                sty 2,x
.a486	b5 03		lda $03,x	                lda 3,x
.a488	b4 07		ldy $07,x	                ldy 7,x
.a48a	95 07		sta $07,x	                sta 7,x
.a48c	94 03		sty $03,x	                sty 3,x
.a48e	60		rts		z_two_swap:     rts
.a48f					xt_two_to_r:
.a48f	68		pla		                pla             ; LSB
.a490	85 24		sta $24		                sta tmp1
.a492	68		pla		                pla             ; MSB
.a493	85 25		sta $25		                sta tmp1+1
.a495	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a498	b5 03		lda $03,x	                lda 3,x         ; MSB
.a49a	48		pha		                pha
.a49b	b5 02		lda $02,x	                lda 2,x         ; LSB
.a49d	48		pha		                pha
.a49e	b5 01		lda $01,x	                lda 1,x         ; MSB
.a4a0	48		pha		                pha
.a4a1	b5 00		lda $00,x	                lda 0,x         ; LSB
.a4a3	48		pha		                pha
.a4a4	e8		inx		                inx
.a4a5	e8		inx		                inx
.a4a6	e8		inx		                inx
.a4a7	e8		inx		                inx
.a4a8	a5 25		lda $25		                lda tmp1+1      ; MSB
.a4aa	48		pha		                pha
.a4ab	a5 24		lda $24		                lda tmp1        ; LSB
.a4ad	48		pha		                pha
.a4ae	60		rts		z_two_to_r:     rts
.a4af					xt_two_constant:
.a4af	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a4b2	20 85 89	jsr $8985	                jsr xt_create
.a4b5	20 9b a1	jsr $a19b	                jsr xt_swap
.a4b8	20 8a 87	jsr $878a	                jsr xt_comma
.a4bb	20 8a 87	jsr $878a	                jsr xt_comma
.a4be	20 20 8c	jsr $8c20	                jsr does_runtime    ; does> turns into these two routines.
.a4c1	20 ca d7	jsr $d7ca	                jsr dodoes
.a4c4	20 cb 8d	jsr $8dcb	                jsr xt_dup
.a4c7	20 9c 8f	jsr $8f9c	                jsr xt_fetch
.a4ca	20 9b a1	jsr $a19b	                jsr xt_swap
.a4cd	20 3d 86	jsr $863d	                jsr xt_cell_plus
.a4d0	20 9c 8f	jsr $8f9c	                jsr xt_fetch
.a4d3	60		rts		z_two_constant: rts
.a4d4					xt_two_literal:
.a4d4	20 e6 d8	jsr $d8e6	                jsr underflow_2 ; double number
.a4d7	20 9b a1	jsr $a19b	                jsr xt_swap
.a4da	20 a6 93	jsr $93a6	                jsr xt_literal
.a4dd	20 a6 93	jsr $93a6	                jsr xt_literal
.a4e0	60		rts		z_two_literal:  rts
.a4e1					xt_two_variable:
.a4e1	20 85 89	jsr $8985	                jsr xt_create
.a4e4	ca		dex		                dex
.a4e5	ca		dex		                dex
.a4e6	a9 04		lda #$04	                lda #4
.a4e8	95 00		sta $00,x	                sta 0,x
.a4ea	74 01		stz $01,x	                stz 1,x
.a4ec	20 a5 82	jsr $82a5	                jsr xt_allot
.a4ef	60		rts		z_two_variable: rts
.a4f0					xt_type:
.a4f0	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a4f3	b5 02		lda $02,x	                lda 2,x
.a4f5	85 24		sta $24		                sta tmp1
.a4f7	b5 03		lda $03,x	                lda 3,x
.a4f9	85 25		sta $25		                sta tmp1+1
.a4fb					_loop:
.a4fb	b5 00		lda $00,x	                lda 0,x
.a4fd	15 01		ora $01,x	                ora 1,x
.a4ff	f0 15		beq $a516	                beq _done
.a501	b2 24		lda ($24)	                lda (tmp1)
.a503	20 12 8e	jsr $8e12	                jsr emit_a      ; avoids stack foolery
.a506	e6 24		inc $24		                inc tmp1
.a508	d0 02		bne $a50c	                bne +
.a50a	e6 25		inc $25		                inc tmp1+1
.a50c					+
.a50c	b5 00		lda $00,x	                lda 0,x
.a50e	d0 02		bne $a512	                bne +
.a510	d6 01		dec $01,x	                dec 1,x
.a512					+
.a512	d6 00		dec $00,x	                dec 0,x
.a514	80 e5		bra $a4fb	                bra _loop
.a516					_done:
.a516	e8		inx		                inx
.a517	e8		inx		                inx
.a518	e8		inx		                inx
.a519	e8		inx		                inx
.a51a	60		rts		z_type:         rts
.a51b					xt_u_dot:
.a51b	20 e1 d8	jsr $d8e1	                jsr underflow_1
.a51e	20 4e d9	jsr $d94e	                jsr print_u
.a521	a9 20		lda #$20	                lda #AscSP
.a523	20 12 8e	jsr $8e12	                jsr emit_a
.a526	60		rts		z_u_dot:        rts
.a527					xt_u_dot_r:
.a527	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a52a	20 5d a3	jsr $a35d	                jsr xt_to_r
.a52d	20 95 a7	jsr $a795	                jsr xt_zero
.a530	20 76 93	jsr $9376	                jsr xt_less_number_sign
.a533	20 fa 97	jsr $97fa	                jsr xt_number_sign_s
.a536	20 d8 97	jsr $97d8	                jsr xt_number_sign_greater
.a539	20 ae 9a	jsr $9aae	                jsr xt_r_from
.a53c	20 af 98	jsr $98af	                jsr xt_over
.a53f	20 6c 95	jsr $956c	                jsr xt_minus
.a542	20 11 a1	jsr $a111	                jsr xt_spaces
.a545	20 f0 a4	jsr $a4f0	                jsr xt_type
.a548	60		rts		z_u_dot_r:      rts
.a549					xt_u_greater_than:
.a549	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a54c	b5 00		lda $00,x	                lda 0,x
.a54e	d5 02		cmp $02,x	                cmp 2,x
.a550	b5 01		lda $01,x	                lda 1,x
.a552	f5 03		sbc $03,x	                sbc 3,x
.a554	e8		inx		                inx
.a555	e8		inx		                inx
.a556	a9 00		lda #$00	                lda #0
.a558	69 ff		adc #$ff	                adc #$ff
.a55a	95 00		sta $00,x	                sta 0,x         ; store flag
.a55c	95 01		sta $01,x	                sta 1,x
.a55e	60		rts		z_u_greater_than:    rts
.a55f					xt_u_less_than:
.a55f	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a562	b5 02		lda $02,x	                lda 2,x
.a564	d5 00		cmp $00,x	                cmp 0,x
.a566	b5 03		lda $03,x	                lda 3,x
.a568	f5 01		sbc $01,x	                sbc 1,x
.a56a	e8		inx		                inx
.a56b	e8		inx		                inx
.a56c	a9 00		lda #$00	                lda #0
.a56e	69 ff		adc #$ff	                adc #$ff
.a570	95 00		sta $00,x	                sta 0,x         ; store flag
.a572	95 01		sta $01,x	                sta 1,x
.a574	60		rts		z_u_less_than:    rts
.a575					xt_ud_dot:
.a575	20 e6 d8	jsr $d8e6	                jsr underflow_2 ; double number
.a578	20 76 93	jsr $9376	                jsr xt_less_number_sign
.a57b	20 fa 97	jsr $97fa	                jsr xt_number_sign_s
.a57e	20 d8 97	jsr $97d8	                jsr xt_number_sign_greater
.a581	20 f0 a4	jsr $a4f0	                jsr xt_type
.a584	20 0b a1	jsr $a10b	                jsr xt_space
.a587	60		rts		z_ud_dot:        rts
.a588					xt_ud_dot_r:
.a588	20 eb d8	jsr $d8eb	                jsr underflow_3
.a58b	20 5d a3	jsr $a35d	                jsr xt_to_r
.a58e	20 76 93	jsr $9376	                jsr xt_less_number_sign
.a591	20 fa 97	jsr $97fa	                jsr xt_number_sign_s
.a594	20 d8 97	jsr $97d8	                jsr xt_number_sign_greater
.a597	20 ae 9a	jsr $9aae	                jsr xt_r_from
.a59a	20 af 98	jsr $98af	                jsr xt_over
.a59d	20 6c 95	jsr $956c	                jsr xt_minus
.a5a0	20 11 a1	jsr $a111	                jsr xt_spaces
.a5a3	20 f0 a4	jsr $a4f0	                jsr xt_type
.a5a6	60		rts		z_ud_dot_r:      rts
.a5a7					xt_um_slash_mod:
.a5a7	20 eb d8	jsr $d8eb	                jsr underflow_3
.a5aa	b5 00		lda $00,x	                lda 0,x
.a5ac	15 01		ora $01,x	                ora 1,x
.a5ae	d0 05		bne $a5b5	                bne _not_zero
.a5b0	a9 04		lda #$04	                lda #err_divzero
.a5b2	4c f7 d8	jmp $d8f7	                jmp error
.a5b5					_not_zero:
.a5b5	a9 11		lda #$11	                lda #17
.a5b7	85 2c		sta $2c		                sta tmptos
.a5b9					_loop:
.a5b9	36 04		rol $04,x	                rol 4,x
.a5bb	36 05		rol $05,x	                rol 5,x
.a5bd	c6 2c		dec $2c		                dec tmptos
.a5bf	f0 22		beq $a5e3	                beq _done
.a5c1	36 02		rol $02,x	                rol 2,x
.a5c3	36 03		rol $03,x	                rol 3,x
.a5c5	64 24		stz $24		                stz tmp1        ; store the bit we got from hi cell (MSB)
.a5c7	26 24		rol $24		                rol tmp1
.a5c9	38		sec		                sec
.a5ca	b5 02		lda $02,x	                lda 2,x
.a5cc	f5 00		sbc $00,x	                sbc 0,x
.a5ce	85 25		sta $25		                sta tmp1+1
.a5d0	b5 03		lda $03,x	                lda 3,x
.a5d2	f5 01		sbc $01,x	                sbc 1,x
.a5d4	a8		tay		                tay
.a5d5	a5 24		lda $24		                lda tmp1
.a5d7	e9 00		sbc #$00	                sbc #0
.a5d9	90 de		bcc $a5b9	                bcc _loop
.a5db	a5 25		lda $25		                lda tmp1+1
.a5dd	95 02		sta $02,x	                sta 2,x
.a5df	94 03		sty $03,x	                sty 3,x         ; used as temp storage
.a5e1	80 d6		bra $a5b9	                bra _loop
.a5e3					_done:
.a5e3	e8		inx		                inx
.a5e4	e8		inx		                inx
.a5e5	20 9b a1	jsr $a19b	                jsr xt_swap
.a5e8	60		rts		z_um_slash_mod: rts
.a5e9					xt_um_star:
.a5e9	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a5ec	18		clc		                clc
.a5ed	b5 00		lda $00,x	                lda 0,x         ; copy TOS to tmp2
.a5ef	e9 00		sbc #$00	                sbc #0
.a5f1	85 26		sta $26		                sta tmp2
.a5f3	b5 01		lda $01,x	                lda 1,x
.a5f5	e9 00		sbc #$00	                sbc #0
.a5f7	90 31		bcc $a62a	                bcc _zero       ; is TOS zero?
.a5f9	85 27		sta $27		                sta tmp2+1
.a5fb	a9 00		lda #$00	                lda #0
.a5fd	85 24		sta $24		                sta tmp1
.a5ff	86 28		stx $28		                stx tmp3        ; tested for exit from outer loop
.a601	ca		dex		                dex
.a602	ca		dex		                dex
.a603					_outer_loop:
.a603	a0 08		ldy #$08	                ldy #8          ; counter inner loop
.a605	56 04		lsr $04,x	                lsr 4,x         ; think "2,x" then later "3,x"
.a607					_inner_loop:
.a607	90 0c		bcc $a615	                bcc _no_add
.a609	85 25		sta $25		                sta tmp1+1      ; save time, don't CLC
.a60b	a5 24		lda $24		                lda tmp1
.a60d	65 26		adc $26		                adc tmp2
.a60f	85 24		sta $24		                sta tmp1
.a611	a5 25		lda $25		                lda tmp1+1
.a613	65 27		adc $27		                adc tmp2+1
.a615					_no_add:
.a615	6a		ror a		                ror
.a616	66 24		ror $24		                ror tmp1
.a618	76 04		ror $04,x	                ror 4,x         ; think "2,x" then later "3,x"
.a61a	88		dey		                dey
.a61b	d0 ea		bne $a607	                bne _inner_loop ; go back for one more shift?
.a61d	e8		inx		                inx
.a61e	e4 28		cpx $28		                cpx tmp3
.a620	d0 e1		bne $a603	                bne _outer_loop ; go back for eight more shifts?
.a622	95 01		sta $01,x	                sta 1,x
.a624	a5 24		lda $24		                lda tmp1
.a626	95 00		sta $00,x	                sta 0,x
.a628	80 04		bra $a62e	                bra _done
.a62a					_zero:
.a62a	74 02		stz $02,x	                stz 2,x
.a62c	74 03		stz $03,x	                stz 3,x
.a62e					_done:
.a62e	60		rts		z_um_star:      rts
.a62f					xt_unloop:
.a62f	68		pla		                pla
.a630	68		pla		                pla
.a631	68		pla		                pla
.a632	68		pla		                pla
.a633	68		pla		                pla
.a634	68		pla		                pla
.a635	60		rts		z_unloop:       rts
.a636					xt_until:
.a636	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.a638	a9 30		lda #$30	                lda #<zero_branch_runtime
.a63a	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.a63d	20 8a 87	jsr $878a	                jsr xt_comma
.a640	60		rts		z_until:        rts
.a641					xt_unused:
.a641	ca		dex		                dex
.a642	ca		dex		                dex
.a643	a9 00		lda #$00	                lda #<cp_end
.a645	38		sec		                sec
.a646	e5 00		sbc $00		                sbc cp
.a648	95 00		sta $00,x	                sta 0,x
.a64a	a9 7c		lda #$7c	                lda #>cp_end
.a64c	e5 01		sbc $01		                sbc cp+1
.a64e	95 01		sta $01,x	                sta 1,x
.a650	60		rts		z_unused:       rts
.a651					xt_update:
.a651	a0 2c		ldy #$2c	                ldy #buffstatus_offset
.a653	b1 1e		lda ($1e),y	                lda (up),y
.a655	09 02		ora #$02	                ora #2          ; Turn on dirty flag (bit 2)
.a657	91 1e		sta ($1e),y	                sta (up),y
.a659	60		rts		z_update:       rts
.a65a					xt_useraddr:
.a65a	ca		dex		                dex
.a65b	ca		dex		                dex
.a65c	a9 1e		lda #$1e	                lda #<up
.a65e	95 00		sta $00,x	                sta 0,x
.a660	a9 00		lda #$00	                lda #>up
.a662	95 01		sta $01,x	                sta 1,x
.a664	60		rts		z_useraddr:     rts
.a665					xt_variable:
.a665	20 85 89	jsr $8985	                jsr xt_create
.a668	a9 00		lda #$00	                lda #0
.a66a	92 00		sta ($00)	                sta (cp)
.a66c	e6 00		inc $00		                inc cp
.a66e	d0 02		bne $a672	                bne +
.a670	e6 01		inc $01		                inc cp+1
.a672					+
.a672	92 00		sta ($00)	                sta (cp)
.a674	e6 00		inc $00		                inc cp
.a676	d0 02		bne $a67a	                bne +
.a678	e6 01		inc $01		                inc cp+1
.a67a					+
.a67a	20 4d 89	jsr $894d	                jsr adjust_z
.a67d	60		rts		z_variable:     rts
.a67e					xt_while:
.a67e	a0 92		ldy #$92	                ldy #>zero_branch_runtime
.a680	a9 30		lda #$30	                lda #<zero_branch_runtime
.a682	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.a685	20 8e 91	jsr $918e	                jsr xt_here
.a688	20 95 a7	jsr $a795	                jsr xt_zero
.a68b	20 8a 87	jsr $878a	                jsr xt_comma
.a68e	20 9b a1	jsr $a19b	                jsr xt_swap
.a691	60		rts		z_while:        rts
.a692					xt_within:
.a692	20 eb d8	jsr $d8eb	                jsr underflow_3
.a695	20 af 98	jsr $98af	                jsr xt_over
.a698	20 6c 95	jsr $956c	                jsr xt_minus
.a69b	20 5d a3	jsr $a35d	                jsr xt_to_r
.a69e	20 6c 95	jsr $956c	                jsr xt_minus
.a6a1	20 ae 9a	jsr $9aae	                jsr xt_r_from
.a6a4	20 5f a5	jsr $a55f	                jsr xt_u_less_than
.a6a7	60		rts		z_within:       rts
.a6a8					xt_word:
.a6a8	20 e1 d8	jsr $d8e1	                jsr underflow_1
.a6ab	a4 0c		ldy $0c		                ldy toin                ; >IN
.a6ad					_loop:
.a6ad	c4 0a		cpy $0a		                cpy ciblen              ; quit if end of input
.a6af	f0 09		beq $a6ba	                beq _found_char
.a6b1	b1 08		lda ($08),y	                lda (cib),y
.a6b3	d5 00		cmp $00,x	                cmp 0,x                 ; ASCII of delimiter
.a6b5	d0 03		bne $a6ba	                bne _found_char
.a6b7	c8		iny		                iny
.a6b8	80 f3		bra $a6ad	                bra _loop
.a6ba					_found_char:
.a6ba	84 0c		sty $0c		                sty toin
.a6bc	20 56 99	jsr $9956	                jsr xt_parse            ; Returns ( addr u )
.a6bf	b5 00		lda $00,x	                lda 0,x
.a6c1	92 00		sta ($00)	                sta (cp)                ; Save length of string
.a6c3	48		pha		                pha                     ; Keep copy of length for later
.a6c4	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; ( addr u u )
.a6c7	a5 00		lda $00		                lda cp
.a6c9	18		clc		                clc
.a6ca	69 01		adc #$01	                adc #1
.a6cc	95 02		sta $02,x	                sta 2,x                 ; LSB of CP
.a6ce	a5 01		lda $01		                lda cp+1
.a6d0	69 00		adc #$00	                adc #0
.a6d2	95 03		sta $03,x	                sta 3,x                 ; ( addr cp+1 u )
.a6d4	20 de 95	jsr $95de	                jsr xt_move
.a6d7	ca		dex		                dex
.a6d8	ca		dex		                dex
.a6d9	a5 00		lda $00		                lda cp
.a6db	95 00		sta $00,x	                sta 0,x
.a6dd	a5 01		lda $01		                lda cp+1
.a6df	95 01		sta $01,x	                sta 1,x
.a6e1	68		pla		                pla                     ; length of string
.a6e2	18		clc		                clc
.a6e3	65 00		adc $00		                adc cp
.a6e5	85 00		sta $00		                sta cp
.a6e7	a5 01		lda $01		                lda cp+1
.a6e9	69 00		adc #$00	                adc #0                  ; we only need the carry
.a6eb	85 01		sta $01		                sta cp+1
.a6ed	60		rts		z_word:         rts
.a6ee					xt_wordlist:
.a6ee	a0 05		ldy #$05	                ldy #num_wordlists_offset
.a6f0	b1 1e		lda ($1e),y	                lda (up),y      ; This is a byte variable, so only
.a6f2	c9 0c		cmp #$0c	                cmp #max_wordlists
.a6f4	d0 05		bne $a6fb	                bne _ok
.a6f6	a9 0b		lda #$0b	                lda #err_wordlist
.a6f8	4c f7 d8	jmp $d8f7	                jmp error
.a6fb					_ok:
.a6fb	1a		inc a		                ina             ; Increment the wordlist#
.a6fc	91 1e		sta ($1e),y	                sta (up),y      ; Save it into byte variable #wordlists
.a6fe	ca		dex		                dex             ; and put it on the stack.
.a6ff	ca		dex		                dex
.a700	95 00		sta $00,x	                sta 0,x
.a702	74 01		stz $01,x	                stz 1,x         ; 12 is the max, so upper byte is always zero.
.a704	60		rts		z_wordlist:     rts
.a705					xt_words:
.a705	20 7f 89	jsr $897f	                jsr xt_cr
.a708	a9 00		lda #$00	                lda #0
.a70a	48		pha		                pha
.a70b	ca		dex		                dex                     ; Make room on the stack for
.a70c	ca		dex		                dex                     ; a dictionary pointer.
.a70d	64 28		stz $28		                stz tmp3                ; Start at the beginning of
.a70f					_wordlist_loop:
.a70f	a0 1e		ldy #$1e	                ldy #num_order_offset   ; Check against byte variable #ORDER.
.a711	a5 28		lda $28		                lda tmp3
.a713	d1 1e		cmp ($1e),y	                cmp (up),y              ; See if we are done.
.a715	d0 02		bne $a719	                bne _have_wordlist
.a717	80 45		bra $a75e	                bra _words_done
.a719					_have_wordlist:
.a719	18		clc		                clc                     ; Index into byte array SEARCH-ORDER.
.a71a	69 1f		adc #$1f	                adc #search_order_offset
.a71c	a8		tay		                tay
.a71d	b1 1e		lda ($1e),y	                lda (up),y              ; Get the index into array WORDLISTS
.a71f	0a		asl a		                asl                     ; Turn offset into cells offset.
.a720	18		clc		                clc
.a721	69 06		adc #$06	                adc #wordlists_offset
.a723	a8		tay		                tay
.a724	b1 1e		lda ($1e),y	                lda (up),y              ; Save the DP for this wordlist
.a726	95 00		sta $00,x	                sta 0,x                 ; on the stack. ( nt )
.a728	c8		iny		                iny
.a729	b1 1e		lda ($1e),y	                lda (up),y
.a72b	95 01		sta $01,x	                sta 1,x
.a72d					_loop:
.a72d	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; ( nt nt )
.a730	20 1a 96	jsr $961a	                jsr xt_name_to_string   ; ( nt addr u )
.a733	68		pla		                pla
.a734	18		clc		                clc
.a735	75 00		adc $00,x	                adc 0,x
.a737	1a		inc a		                ina                     ; don't forget the space between words
.a738	c9 4f		cmp #$4f	                cmp #MAX_LINE_LENGTH    ; usually 79
.a73a	90 06		bcc $a742	                bcc +
.a73c	20 7f 89	jsr $897f	                jsr xt_cr
.a73f	b5 00		lda $00,x	                lda 0,x                 ; After going to next line, start
.a741	1a		inc a		                ina                     ; with length of this word.
.a742					+
.a742	48		pha		                pha
.a743	20 f0 a4	jsr $a4f0	                jsr xt_type             ; ( nt )
.a746	a9 20		lda #$20	                lda #AscSP
.a748	20 12 8e	jsr $8e12	                jsr emit_a
.a74b	20 39 98	jsr $9839	                jsr xt_one_plus         ; 1+
.a74e	20 39 98	jsr $9839	                jsr xt_one_plus         ; 1+
.a751	20 9c 8f	jsr $8f9c	                jsr xt_fetch            ; @ ( nt+1 )
.a754	b5 00		lda $00,x	                lda 0,x
.a756	15 01		ora $01,x	                ora 1,x
.a758	d0 d3		bne $a72d	                bne _loop
.a75a	e6 28		inc $28		                inc tmp3
.a75c	80 b1		bra $a70f	                bra _wordlist_loop
.a75e					_words_done:
.a75e	68		pla		                pla                     ; dump counter
.a75f	e8		inx		                inx
.a760	e8		inx		                inx
.a761	60		rts		z_words:        rts
.a762					xt_wordsize:
.a762	20 e1 d8	jsr $d8e1	                jsr underflow_1
.a765	b5 00		lda $00,x	                lda 0,x
.a767	85 24		sta $24		                sta tmp1
.a769	b5 01		lda $01,x	                lda 1,x
.a76b	85 25		sta $25		                sta tmp1+1
.a76d	a0 06		ldy #$06	                ldy #6
.a76f	b1 24		lda ($24),y	                lda (tmp1),y    ; LSB of z
.a771	88		dey		                dey
.a772	88		dey		                dey
.a773	38		sec		                sec
.a774	f1 24		sbc ($24),y	                sbc (tmp1),y    ; LSB of xt
.a776	95 00		sta $00,x	                sta 0,x
.a778	a0 07		ldy #$07	                ldy #7
.a77a	b1 24		lda ($24),y	                lda (tmp1),y    ; MSB of z
.a77c	88		dey		                dey
.a77d	88		dey		                dey
.a77e	f1 24		sbc ($24),y	                sbc (tmp1),y    ; MSB of xt
.a780	95 01		sta $01,x	                sta 1,x
.a782	60		rts		z_wordsize:     rts
.a783					xt_xor:
.a783	20 e6 d8	jsr $d8e6	                jsr underflow_2
.a786	b5 00		lda $00,x	                lda 0,x
.a788	55 02		eor $02,x	                eor 2,x
.a78a	95 02		sta $02,x	                sta 2,x
.a78c	b5 01		lda $01,x	                lda 1,x
.a78e	55 03		eor $03,x	                eor 3,x
.a790	95 03		sta $03,x	                sta 3,x
.a792	e8		inx		                inx
.a793	e8		inx		                inx
.a794	60		rts		z_xor:          rts
.a795					xt_case:
.a795					xt_forth_wordlist:
.a795					xt_zero:
.a795	ca		dex		                dex             ; push
.a796	ca		dex		                dex
.a797	74 00		stz $00,x	                stz 0,x
.a799	74 01		stz $01,x	                stz 1,x
.a79b					z_case:
.a79b					z_forth_wordlist:
.a79b					z_zero:
.a79b	60		rts		                rts
.a79c					xt_zero_equal:
.a79c	20 e1 d8	jsr $d8e1	                jsr underflow_1
.a79f	b5 00		lda $00,x	                lda 0,x
.a7a1	15 01		ora $01,x	                ora 1,x
.a7a3	f0 04		beq $a7a9	                beq _zero
.a7a5	a9 00		lda #$00	                lda #0
.a7a7	80 02		bra $a7ab	                bra _store
.a7a9					_zero:
.a7a9	a9 ff		lda #$ff	                lda #$ff
.a7ab					_store:
.a7ab	95 00		sta $00,x	                sta 0,x
.a7ad	95 01		sta $01,x	                sta 1,x
.a7af	60		rts		z_zero_equal:   rts
.a7b0					xt_zero_greater:
.a7b0	20 e1 d8	jsr $d8e1	                jsr underflow_1
.a7b3	a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS is negative)
.a7b5	b5 01		lda $01,x	                lda 1,x         ; MSB
.a7b7	30 05		bmi $a7be	                bmi _done       ; TOS is negative, keep FLASE
.a7b9	15 00		ora $00,x	                ora 0,x
.a7bb	f0 01		beq $a7be	                beq _done       ; TOS is zero, keep FALSE
.a7bd	88		dey		                dey             ; TOS is postive, make true
.a7be					_done:
.a7be	98		tya		                tya
.a7bf	95 00		sta $00,x	                sta 0,x
.a7c1	95 01		sta $01,x	                sta 1,x
.a7c3	60		rts		z_zero_greater: rts
.a7c4					xt_zero_less:
.a7c4	20 e1 d8	jsr $d8e1	                jsr underflow_1
.a7c7	a0 00		ldy #$00	                ldy #0          ; Default is FALSE (TOS positive)
.a7c9	b5 01		lda $01,x	                lda 1,x         ; MSB
.a7cb	10 01		bpl $a7ce	                bpl _done       ; TOS is positive, so keep FALSE
.a7cd	88		dey		                dey             ; TOS is negative, make TRUE
.a7ce					_done:
.a7ce	98		tya		                tya
.a7cf	95 00		sta $00,x	                sta 0,x
.a7d1	95 01		sta $01,x	                sta 1,x
.a7d3	60		rts		z_zero_less:    rts
.a7d4					xt_zero_unequal:
.a7d4	20 e1 d8	jsr $d8e1	                jsr underflow_1
.a7d7	a0 00		ldy #$00	                ldy #0          ; default false
.a7d9	b5 00		lda $00,x	                lda 0,x
.a7db	15 01		ora $01,x	                ora 1,x
.a7dd	f0 01		beq $a7e0	                beq _got_zero
.a7df	88		dey		                dey
.a7e0					_got_zero:
.a7e0	98		tya		                tya
.a7e1	95 00		sta $00,x	                sta 0,x
.a7e3	95 01		sta $01,x	                sta 1,x
.a7e5	60		rts		z_zero_unequal: rts
.a7e6					xt_editor_screen_helper:
.a7e6	20 cb 8d	jsr $8dcb	                jsr xt_dup
.a7e9	20 c6 9e	jsr $9ec6	                jsr xt_scr
.a7ec	20 7a a1	jsr $a17a	                jsr xt_store
.a7ef	20 d1 85	jsr $85d1	                jsr xt_buffer
.a7f2					z_editor_screen_helper:
.a7f2	60		rts		                rts
.a7f3					xt_editor_enter_screen:
.a7f3	20 e6 a7	jsr $a7e6	                jsr xt_editor_screen_helper
.a7f6	20 4a 8d	jsr $8d4a	                jsr xt_drop
.a7f9	64 2e		stz $2e		                stz editor1
.a7fb					_prompt_loop:
.a7fb	ca		dex		                dex
.a7fc	ca		dex		                dex
.a7fd	a5 2e		lda $2e		                lda editor1
.a7ff	95 00		sta $00,x	                sta 0,x
.a801	74 01		stz $01,x	                stz 1,x
.a803	20 c8 a8	jsr $a8c8	                jsr xt_editor_o
.a806	e6 2e		inc $2e		                inc editor1
.a808	a9 10		lda #$10	                lda #16
.a80a	c5 2e		cmp $2e		                cmp editor1
.a80c	d0 ed		bne $a7fb	                bne _prompt_loop
.a80e					z_editor_enter_screen:
.a80e	60		rts		                rts
.a80f					xt_editor_erase_screen:
.a80f	20 e6 a7	jsr $a7e6	                jsr xt_editor_screen_helper
.a812	ca		dex		                dex
.a813	ca		dex		                dex
.a814	74 00		stz $00,x	                stz 0,x
.a816	a9 04		lda #$04	                lda #4          ; 4 in MSB makes 1024 ($400).
.a818	95 01		sta $01,x	                sta 1,x
.a81a	20 06 8f	jsr $8f06	                jsr xt_blank
.a81d	20 51 a6	jsr $a651	                jsr xt_update
.a820					z_editor_erase_screen:
.a820	60		rts		                rts
.a821					xt_editor_el:
.a821	20 af a8	jsr $a8af	                jsr xt_editor_line
.a824	ca		dex		                dex
.a825	ca		dex		                dex
.a826	a9 40		lda #$40	                lda #64
.a828	95 00		sta $00,x	                sta 0,x
.a82a	74 01		stz $01,x	                stz 1,x
.a82c	20 06 8f	jsr $8f06	                jsr xt_blank
.a82f	20 51 a6	jsr $a651	                jsr xt_update
.a832	60		rts		z_editor_el:    rts
.a833					xt_editor_l:
.a833	ca		dex		                dex             ; Put SCR on the stack.
.a834	ca		dex		                dex
.a835	a0 02		ldy #$02	                ldy #scr_offset
.a837	b1 1e		lda ($1e),y	                lda (up),y
.a839	95 00		sta $00,x	                sta 0,x
.a83b	c8		iny		                iny
.a83c	b1 1e		lda ($1e),y	                lda (up),y
.a83e	95 01		sta $01,x	                sta 1,x
.a840	20 dd 83	jsr $83dd	                jsr xt_block    ; Get the current screen.
.a843	20 7f 89	jsr $897f	                jsr xt_cr
.a846	80 08		bra $a850	                bra _after_screen_msg
.a848					_screen_msg:
>a848	53 63 72 65 65 6e 20 23		                .text "Screen #"
.a850					_after_screen_msg:
.a850	20 96 a0	jsr $a096	                jsr sliteral_runtime
>a853	48 a8 08 00			                .word _screen_msg, _after_screen_msg-_screen_msg
.a857	20 f0 a4	jsr $a4f0	                jsr xt_type
.a85a	20 c6 9e	jsr $9ec6	                jsr xt_scr
.a85d	20 9c 8f	jsr $8f9c	                jsr xt_fetch
.a860	ca		dex		                dex
.a861	ca		dex		                dex
.a862	a9 04		lda #$04	                lda #4          ; four spaces
.a864	95 00		sta $00,x	                sta 0,x
.a866	74 01		stz $01,x	                stz 1,x
.a868	20 27 a5	jsr $a527	                jsr xt_u_dot_r
.a86b	64 28		stz $28		                stz tmp3
.a86d					_line_loop:
.a86d	20 7f 89	jsr $897f	                jsr xt_cr
.a870	ca		dex		                dex
.a871	ca		dex		                dex
.a872	ca		dex		                dex
.a873	ca		dex		                dex
.a874	74 03		stz $03,x	                stz 3,x
.a876	a5 28		lda $28		                lda tmp3
.a878	95 02		sta $02,x	                sta 2,x
.a87a	74 01		stz $01,x	                stz 1,x
.a87c	a9 02		lda #$02	                lda #2
.a87e	95 00		sta $00,x	                sta 0,x
.a880	20 27 a5	jsr $a527	                jsr xt_u_dot_r
.a883	20 0b a1	jsr $a10b	                jsr xt_space
.a886	20 cb 8d	jsr $8dcb	                jsr xt_dup
.a889	ca		dex		                dex
.a88a	ca		dex		                dex
.a88b	a9 40		lda #$40	                lda #64
.a88d	95 00		sta $00,x	                sta 0,x
.a88f	74 01		stz $01,x	                stz 1,x
.a891	20 f0 a4	jsr $a4f0	                jsr xt_type
.a894	18		clc		                clc
.a895	a9 40		lda #$40	                lda #64
.a897	75 00		adc $00,x	                adc 0,x
.a899	95 00		sta $00,x	                sta 0,x
.a89b	b5 01		lda $01,x	                lda 1,x
.a89d	69 00		adc #$00	                adc #0      ; Add carry
.a89f	95 01		sta $01,x	                sta 1,x
.a8a1	e6 28		inc $28		                inc tmp3
.a8a3	a5 28		lda $28		                lda tmp3
.a8a5	c9 10		cmp #$10	                cmp #16
.a8a7	d0 c4		bne $a86d	                bne _line_loop
.a8a9	20 7f 89	jsr $897f	                jsr xt_cr
.a8ac	e8		inx		                inx
.a8ad	e8		inx		                inx
.a8ae	60		rts		z_editor_l:            rts
.a8af					xt_editor_line:
.a8af	20 e1 d8	jsr $d8e1	                jsr underflow_1
.a8b2	a0 06		ldy #$06	                ldy #6          ; *64 is same as left shift 6 times.
.a8b4					_shift_tos_left:
.a8b4	16 00		asl $00,x	                asl 0,x         ; Shift TOS to the left
.a8b6	36 01		rol $01,x	                rol 1,x         ; ROL brings MSb from lower byte.
.a8b8	88		dey		                dey
.a8b9	d0 f9		bne $a8b4	                bne _shift_tos_left
.a8bb	20 c6 9e	jsr $9ec6	                jsr xt_scr
.a8be	20 9c 8f	jsr $8f9c	                jsr xt_fetch
.a8c1	20 dd 83	jsr $83dd	                jsr xt_block
.a8c4	20 ff 99	jsr $99ff	                jsr xt_plus
.a8c7	60		rts		z_editor_line:  rts
.a8c8					xt_editor_o:
.a8c8	20 7f 89	jsr $897f	                jsr xt_cr
.a8cb	20 cb 8d	jsr $8dcb	                jsr xt_dup
.a8ce	20 94 a3	jsr $a394	                jsr xt_two
.a8d1	20 27 a5	jsr $a527	                jsr xt_u_dot_r
.a8d4	20 0b a1	jsr $a10b	                jsr xt_space
.a8d7	a9 2a		lda #$2a	                lda #42         ; ASCII for *
.a8d9	20 12 8e	jsr $8e12	                jsr emit_a
.a8dc	20 0b a1	jsr $a10b	                jsr xt_space
.a8df	20 af a8	jsr $a8af	                jsr xt_editor_line
.a8e2	20 cb 8d	jsr $8dcb	                jsr xt_dup      ; Save a copy of the line address for later.
.a8e5	ca		dex		                dex
.a8e6	ca		dex		                dex
.a8e7	a9 40		lda #$40	                lda #64         ; chars/line
.a8e9	95 00		sta $00,x	                sta 0,x
.a8eb	74 01		stz $01,x	                stz 1,x
.a8ed	20 48 81	jsr $8148	                jsr xt_accept
.a8f0	20 cb 8d	jsr $8dcb	                jsr xt_dup
.a8f3	20 8a 96	jsr $968a	                jsr xt_not_rote ; -rot
.a8f6	20 ff 99	jsr $99ff	                jsr xt_plus
.a8f9	ca		dex		                dex
.a8fa	ca		dex		                dex
.a8fb	a9 40		lda #$40	                lda #64         ; chars/line
.a8fd	95 00		sta $00,x	                sta 0,x
.a8ff	74 01		stz $01,x	                stz 1,x
.a901	20 73 9b	jsr $9b73	                jsr xt_rot
.a904	20 6c 95	jsr $956c	                jsr xt_minus
.a907	20 06 8f	jsr $8f06	                jsr xt_blank
.a90a	20 51 a6	jsr $a651	                jsr xt_update
.a90d	60		rts		z_editor_o:     rts

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../assembler.asm

.a90e					assembler:
.a90e					xt_asm_adc_h:
.a90e	a9 69		lda #$69	                lda #$69
.a910	4c 69 ac	jmp $ac69	                jmp asm_common
.a913					z_asm_adc_h:
.a913					xt_asm_adc_x:
.a913	a9 7d		lda #$7d	                lda #$7D
.a915	4c 69 ac	jmp $ac69	                jmp asm_common
.a918					z_asm_adc_x:
.a918					xt_asm_adc_y:
.a918	a9 79		lda #$79	                lda #$79
.a91a	4c 69 ac	jmp $ac69	                jmp asm_common
.a91d					z_asm_adc_y:
.a91d					xt_asm_adc_z:
.a91d	a9 65		lda #$65	                lda #$65
.a91f	4c 69 ac	jmp $ac69	                jmp asm_common
.a922					z_asm_adc_z:
.a922					xt_asm_adc_zi:
.a922	a9 72		lda #$72	                lda #$72
.a924	4c 69 ac	jmp $ac69	                jmp asm_common
.a927					z_asm_adc_zi:
.a927					xt_asm_adc_ziy:
.a927	a9 71		lda #$71	                lda #$71
.a929	4c 69 ac	jmp $ac69	                jmp asm_common
.a92c					z_asm_adc_ziy:
.a92c					xt_asm_adc_zx:
.a92c	a9 75		lda #$75	                lda #$75
.a92e	4c 69 ac	jmp $ac69	                jmp asm_common
.a931					z_asm_adc_zx:
.a931					xt_asm_adc_zxi:
.a931	a9 61		lda #$61	                lda #$61
.a933	4c 69 ac	jmp $ac69	                jmp asm_common
.a936					z_asm_adc_zxi:
.a936					xt_asm_and:
.a936	a9 2d		lda #$2d	                lda #$2D
.a938	4c 69 ac	jmp $ac69	                jmp asm_common
.a93b					z_asm_and:
.a93b					xt_asm_and_h:
.a93b	a9 29		lda #$29	                lda #$29
.a93d	4c 69 ac	jmp $ac69	                jmp asm_common
.a940					z_asm_and_h:
.a940					xt_asm_and_x:
.a940	a9 3d		lda #$3d	                lda #$3D
.a942	4c 69 ac	jmp $ac69	                jmp asm_common
.a945					z_asm_and_x:
.a945					xt_asm_and_y:
.a945	a9 39		lda #$39	                lda #$39
.a947	4c 69 ac	jmp $ac69	                jmp asm_common
.a94a					z_asm_and_y:
.a94a					xt_asm_and_z:
.a94a	a9 25		lda #$25	                lda #$25
.a94c	4c 69 ac	jmp $ac69	                jmp asm_common
.a94f					z_asm_and_z:
.a94f					xt_asm_and_zi:
.a94f	a9 32		lda #$32	                lda #$32
.a951	4c 69 ac	jmp $ac69	                jmp asm_common
.a954					z_asm_and_zi:
.a954					xt_asm_and_ziy:
.a954	a9 31		lda #$31	                lda #$31
.a956	4c 69 ac	jmp $ac69	                jmp asm_common
.a959					z_asm_and_ziy:
.a959					xt_asm_and_zx:
.a959	a9 35		lda #$35	                lda #$35
.a95b	4c 69 ac	jmp $ac69	                jmp asm_common
.a95e					z_asm_and_zx:
.a95e					xt_asm_and_zxi:
.a95e	a9 21		lda #$21	                lda #$21
.a960	4c 69 ac	jmp $ac69	                jmp asm_common
.a963					z_asm_and_zxi:
.a963					xt_asm_asl:
.a963	a9 0e		lda #$0e	                lda #$0E
.a965	4c 69 ac	jmp $ac69	                jmp asm_common
.a968					z_asm_asl:
.a968					xt_asm_asl_a:
.a968	a9 0a		lda #$0a	                lda #$0A
.a96a	4c 69 ac	jmp $ac69	                jmp asm_common
.a96d					z_asm_asl_a:
.a96d					xt_asm_asl_x:
.a96d	a9 1e		lda #$1e	                lda #$1E
.a96f	4c 69 ac	jmp $ac69	                jmp asm_common
.a972					z_asm_asl_x:
.a972					xt_asm_asl_z:
.a972	a9 06		lda #$06	                lda #$06
.a974	4c 69 ac	jmp $ac69	                jmp asm_common
.a977					z_asm_asl_z:
.a977					xt_asm_asl_zx:
.a977	a9 16		lda #$16	                lda #$16
.a979	4c 69 ac	jmp $ac69	                jmp asm_common
.a97c					z_asm_asl_zx:
.a97c					xt_asm_bcc:
.a97c	a9 90		lda #$90	                lda #$90
.a97e	4c 69 ac	jmp $ac69	                jmp asm_common
.a981					z_asm_bcc:
.a981					xt_asm_bcs:
.a981	a9 b0		lda #$b0	                lda #$B0
.a983	a0 02		ldy #$02	                ldy #2
.a985	4c 69 ac	jmp $ac69	                jmp asm_common
.a988					z_asm_bcs:
.a988					xt_asm_beq:
.a988	a9 f0		lda #$f0	                lda #$F0
.a98a	4c 69 ac	jmp $ac69	                jmp asm_common
.a98d					z_asm_beq:
.a98d					xt_asm_bit:
.a98d	a9 2c		lda #$2c	                lda #$2C
.a98f	4c 69 ac	jmp $ac69	                jmp asm_common
.a992					z_asm_bit:
.a992					xt_asm_bit_h:
.a992	a9 89		lda #$89	                lda #$89
.a994	4c 69 ac	jmp $ac69	                jmp asm_common
.a997					z_asm_bit_h:
.a997					xt_asm_bit_x:
.a997	a9 3c		lda #$3c	                lda #$3C
.a999	4c 69 ac	jmp $ac69	                jmp asm_common
.a99c					z_asm_bit_x:
.a99c					xt_asm_bit_z:
.a99c	a9 24		lda #$24	                lda #$24
.a99e	4c 69 ac	jmp $ac69	                jmp asm_common
.a9a1					z_asm_bit_z:
.a9a1					xt_asm_bit_zx:
.a9a1	a9 34		lda #$34	                lda #$34
.a9a3	4c 69 ac	jmp $ac69	                jmp asm_common
.a9a6					z_asm_bit_zx:
.a9a6					xt_asm_bmi:
.a9a6	a9 30		lda #$30	                lda #$30
.a9a8	4c 69 ac	jmp $ac69	                jmp asm_common
.a9ab					z_asm_bmi:
.a9ab					xt_asm_bne:
.a9ab	a9 d0		lda #$d0	                lda #$D0
.a9ad	4c 69 ac	jmp $ac69	                jmp asm_common
.a9b0					z_asm_bne:
.a9b0					xt_asm_bpl:
.a9b0	a9 10		lda #$10	                lda #$10
.a9b2	4c 69 ac	jmp $ac69	                jmp asm_common
.a9b5					z_asm_bpl:
.a9b5					xt_asm_bra:
.a9b5	a9 80		lda #$80	                lda #$80
.a9b7	4c 69 ac	jmp $ac69	                jmp asm_common
.a9ba					z_asm_bra:
.a9ba					xt_asm_brk:
.a9ba	a9 00		lda #$00	                lda #$00
.a9bc	4c 69 ac	jmp $ac69	                jmp asm_common
.a9bf					z_asm_brk:
.a9bf					xt_asm_bvc:
.a9bf	a9 50		lda #$50	                lda #$50
.a9c1	4c 69 ac	jmp $ac69	                jmp asm_common
.a9c4					z_asm_bvc:
.a9c4					xt_asm_bvs:
.a9c4	a9 70		lda #$70	                lda #$70
.a9c6	4c 69 ac	jmp $ac69	                jmp asm_common
.a9c9					z_asm_bvs:
.a9c9					xt_asm_clc:
.a9c9	a9 18		lda #$18	                lda #$18
.a9cb	4c 69 ac	jmp $ac69	                jmp asm_common
.a9ce					z_asm_clc:
.a9ce					xt_asm_cld:
.a9ce	a9 d8		lda #$d8	                lda #$D8
.a9d0	4c 69 ac	jmp $ac69	                jmp asm_common
.a9d3					z_asm_cld:
.a9d3					xt_asm_cli:
.a9d3	a9 58		lda #$58	                lda #$58
.a9d5	4c 69 ac	jmp $ac69	                jmp asm_common
.a9d8					z_asm_cli:
.a9d8					xt_asm_clv:
.a9d8	a9 b8		lda #$b8	                lda #$B8
.a9da	4c 69 ac	jmp $ac69	                jmp asm_common
.a9dd					z_asm_clv:
.a9dd					xt_asm_cmp:
.a9dd	a9 cd		lda #$cd	                lda #$CD
.a9df	4c 69 ac	jmp $ac69	                jmp asm_common
.a9e2					z_asm_cmp:
.a9e2					xt_asm_cmp_h:
.a9e2	a9 c9		lda #$c9	                lda #$C9
.a9e4	4c 69 ac	jmp $ac69	                jmp asm_common
.a9e7					z_asm_cmp_h:
.a9e7					xt_asm_cmp_x:
.a9e7	a9 dd		lda #$dd	                lda #$DD
.a9e9	4c 69 ac	jmp $ac69	                jmp asm_common
.a9ec					z_asm_cmp_x:
.a9ec					xt_asm_cmp_y:
.a9ec	a9 d9		lda #$d9	                lda #$D9
.a9ee	4c 69 ac	jmp $ac69	                jmp asm_common
.a9f1					z_asm_cmp_y:
.a9f1					xt_asm_cmp_z:
.a9f1	a9 c5		lda #$c5	                lda #$C5
.a9f3	4c 69 ac	jmp $ac69	                jmp asm_common
.a9f6					z_asm_cmp_z:
.a9f6					xt_asm_cmp_zi:
.a9f6	a9 d2		lda #$d2	                lda #$D2
.a9f8	4c 69 ac	jmp $ac69	                jmp asm_common
.a9fb					z_asm_cmp_zi:
.a9fb					xt_asm_cmp_ziy:
.a9fb	a9 d1		lda #$d1	                lda #$D1
.a9fd	4c 69 ac	jmp $ac69	                jmp asm_common
.aa00					z_asm_cmp_ziy:
.aa00					xt_asm_cmp_zx:
.aa00	a9 d5		lda #$d5	                lda #$D5
.aa02	4c 69 ac	jmp $ac69	                jmp asm_common
.aa05					z_asm_cmp_zx:
.aa05					xt_asm_cmp_zxi:
.aa05	a9 c1		lda #$c1	                lda #$C1
.aa07	4c 69 ac	jmp $ac69	                jmp asm_common
.aa0a					z_asm_cmp_zxi:
.aa0a					xt_asm_cpx:
.aa0a	a9 ec		lda #$ec	                lda #$EC
.aa0c	4c 69 ac	jmp $ac69	                jmp asm_common
.aa0f					z_asm_cpx:
.aa0f					xt_asm_cpx_h:
.aa0f	a9 e0		lda #$e0	                lda #$E0
.aa11	4c 69 ac	jmp $ac69	                jmp asm_common
.aa14					z_asm_cpx_h:
.aa14					xt_asm_cpx_z:
.aa14	a9 e4		lda #$e4	                lda #$E4
.aa16	4c 69 ac	jmp $ac69	                jmp asm_common
.aa19					z_asm_cpx_z:
.aa19					xt_asm_cpy:
.aa19	a9 cc		lda #$cc	                lda #$CC
.aa1b	a0 03		ldy #$03	                ldy #3
.aa1d	4c 69 ac	jmp $ac69	                jmp asm_common
.aa20					z_asm_cpy:
.aa20					xt_asm_cpy_h:
.aa20	a9 c0		lda #$c0	                lda #$C0
.aa22	4c 69 ac	jmp $ac69	                jmp asm_common
.aa25					z_asm_cpy_h:
.aa25					xt_asm_cpy_z:
.aa25	a9 c4		lda #$c4	                lda #$C4
.aa27	4c 69 ac	jmp $ac69	                jmp asm_common
.aa2a					z_asm_cpy_z:
.aa2a					xt_asm_dec:
.aa2a	a9 ce		lda #$ce	                lda #$CE
.aa2c	4c 69 ac	jmp $ac69	                jmp asm_common
.aa2f					z_asm_dec:
.aa2f					xt_asm_dec_a:
.aa2f	a9 3a		lda #$3a	                lda #$3A
.aa31	4c 69 ac	jmp $ac69	                jmp asm_common
.aa34					z_asm_dec_a:
.aa34					xt_asm_dec_x:
.aa34	a9 de		lda #$de	                lda #$DE
.aa36	4c 69 ac	jmp $ac69	                jmp asm_common
.aa39					z_asm_dec_x:
.aa39					xt_asm_dec_z:
.aa39	a9 c6		lda #$c6	                lda #$C6
.aa3b	4c 69 ac	jmp $ac69	                jmp asm_common
.aa3e					z_asm_dec_z:
.aa3e					xt_asm_dec_zx:
.aa3e	a9 d6		lda #$d6	                lda #$D6
.aa40	4c 69 ac	jmp $ac69	                jmp asm_common
.aa43					z_asm_dec_zx:
.aa43					xt_asm_dex:
.aa43	a9 ca		lda #$ca	                lda #$CA
.aa45	4c 69 ac	jmp $ac69	                jmp asm_common
.aa48					z_asm_dex:
.aa48					xt_asm_dey:
.aa48	a9 88		lda #$88	                lda #$88
.aa4a	4c 69 ac	jmp $ac69	                jmp asm_common
.aa4d					z_asm_dey:
.aa4d					xt_asm_eor:
.aa4d	a9 4d		lda #$4d	                lda #$4D
.aa4f	4c 69 ac	jmp $ac69	                jmp asm_common
.aa52					z_asm_eor:
.aa52					xt_asm_eor_h:
.aa52	a9 49		lda #$49	                lda #$49
.aa54	4c 69 ac	jmp $ac69	                jmp asm_common
.aa57					z_asm_eor_h:
.aa57					xt_asm_eor_x:
.aa57	a9 5d		lda #$5d	                lda #$5D
.aa59	4c 69 ac	jmp $ac69	                jmp asm_common
.aa5c					z_asm_eor_x:
.aa5c					xt_asm_eor_y:
.aa5c	a9 59		lda #$59	                lda #$59
.aa5e	4c 69 ac	jmp $ac69	                jmp asm_common
.aa61					z_asm_eor_y:
.aa61					xt_asm_eor_z:
.aa61	a9 45		lda #$45	                lda #$45
.aa63	4c 69 ac	jmp $ac69	                jmp asm_common
.aa66					z_asm_eor_z:
.aa66					xt_asm_eor_zi:
.aa66	a9 52		lda #$52	                lda #$52
.aa68	4c 69 ac	jmp $ac69	                jmp asm_common
.aa6b					z_asm_eor_zi:
.aa6b					xt_asm_eor_ziy:
.aa6b	a9 51		lda #$51	                lda #$51
.aa6d	4c 69 ac	jmp $ac69	                jmp asm_common
.aa70					z_asm_eor_ziy:
.aa70					xt_asm_eor_zx:
.aa70	a9 55		lda #$55	                lda #$55
.aa72	4c 69 ac	jmp $ac69	                jmp asm_common
.aa75					z_asm_eor_zx:
.aa75					xt_asm_eor_zxi:
.aa75	a9 41		lda #$41	                lda #$41
.aa77	4c 69 ac	jmp $ac69	                jmp asm_common
.aa7a					z_asm_eor_zxi:
.aa7a					xt_asm_inc:
.aa7a	a9 ee		lda #$ee	                lda #$EE
.aa7c	4c 69 ac	jmp $ac69	                jmp asm_common
.aa7f					z_asm_inc:
.aa7f					xt_asm_inc_a:
.aa7f	a9 1a		lda #$1a	                lda #$1A
.aa81	4c 69 ac	jmp $ac69	                jmp asm_common
.aa84					z_asm_inc_a:
.aa84					xt_asm_inc_x:
.aa84	a9 fe		lda #$fe	                lda #$FE
.aa86	4c 69 ac	jmp $ac69	                jmp asm_common
.aa89					z_asm_inc_x:
.aa89					xt_asm_inc_z:
.aa89	a9 e6		lda #$e6	                lda #$E6
.aa8b	4c 69 ac	jmp $ac69	                jmp asm_common
.aa8e					z_asm_inc_z:
.aa8e					xt_asm_inc_zx:
.aa8e	a9 f6		lda #$f6	                lda #$F6
.aa90	4c 69 ac	jmp $ac69	                jmp asm_common
.aa93					z_asm_inc_zx:
.aa93					xt_asm_inx:
.aa93	a9 e8		lda #$e8	                lda #$E8
.aa95	4c 69 ac	jmp $ac69	                jmp asm_common
.aa98					z_asm_inx:
.aa98					xt_asm_iny:
.aa98	a9 c8		lda #$c8	                lda #$C8
.aa9a	4c 69 ac	jmp $ac69	                jmp asm_common
.aa9d					z_asm_iny:
.aa9d					xt_asm_jmp:
.aa9d	a9 4c		lda #$4c	                lda #$4C
.aa9f	4c 69 ac	jmp $ac69	                jmp asm_common
.aaa2					z_asm_jmp:
.aaa2					xt_asm_jmp_i:
.aaa2	a9 6c		lda #$6c	                lda #$6C
.aaa4	4c 69 ac	jmp $ac69	                jmp asm_common
.aaa7					z_asm_jmp_i:
.aaa7					xt_asm_jmp_xi:
.aaa7	a9 7c		lda #$7c	                lda #$7C
.aaa9	4c 69 ac	jmp $ac69	                jmp asm_common
.aaac					z_asm_jmp_xi:
.aaac					xt_asm_jsr:
.aaac	a9 20		lda #$20	                lda #$20
.aaae	4c 69 ac	jmp $ac69	                jmp asm_common
.aab1					z_asm_jsr:
.aab1					xt_asm_lda:
.aab1	a9 ad		lda #$ad	                lda #$AD
.aab3	4c 69 ac	jmp $ac69	                jmp asm_common
.aab6					z_asm_lda:
.aab6					xt_asm_lda_h:
.aab6	a9 a9		lda #$a9	                lda #$A9
.aab8	4c 69 ac	jmp $ac69	                jmp asm_common
.aabb					z_asm_lda_h:
.aabb					xt_asm_lda_x:
.aabb	a9 bd		lda #$bd	                lda #$BD
.aabd	4c 69 ac	jmp $ac69	                jmp asm_common
.aac0					z_asm_lda_x:
.aac0					xt_asm_lda_y:
.aac0	a9 b9		lda #$b9	                lda #$B9
.aac2	4c 69 ac	jmp $ac69	                jmp asm_common
.aac5					z_asm_lda_y:
.aac5					xt_asm_lda_z:
.aac5	a9 a5		lda #$a5	                lda #$A5
.aac7	4c 69 ac	jmp $ac69	                jmp asm_common
.aaca					z_asm_lda_z:
.aaca					xt_asm_lda_zi:
.aaca	a9 b2		lda #$b2	                lda #$B2
.aacc	4c 69 ac	jmp $ac69	                jmp asm_common
.aacf					z_asm_lda_zi:
.aacf					xt_asm_lda_ziy:
.aacf	a9 b1		lda #$b1	                lda #$B1
.aad1	4c 69 ac	jmp $ac69	                jmp asm_common
.aad4					z_asm_lda_ziy:
.aad4					xt_asm_lda_zx:
.aad4	a9 b5		lda #$b5	                lda #$B5
.aad6	4c 69 ac	jmp $ac69	                jmp asm_common
.aad9					z_asm_lda_zx:
.aad9					xt_asm_lda_zxi:
.aad9	a9 a1		lda #$a1	                lda #$A1
.aadb	4c 69 ac	jmp $ac69	                jmp asm_common
.aade					z_asm_lda_zxi:
.aade					xt_asm_ldx:
.aade	a9 ae		lda #$ae	                lda #$AE
.aae0	4c 69 ac	jmp $ac69	                jmp asm_common
.aae3					z_asm_ldx:
.aae3					xt_asm_ldx_h:
.aae3	a9 a2		lda #$a2	                lda #$A2
.aae5	4c 69 ac	jmp $ac69	                jmp asm_common
.aae8					z_asm_ldx_h:
.aae8					xt_asm_ldx_y:
.aae8	a9 be		lda #$be	                lda #$BE
.aaea	4c 69 ac	jmp $ac69	                jmp asm_common
.aaed					z_asm_ldx_y:
.aaed					xt_asm_ldx_z:
.aaed	a9 a6		lda #$a6	                lda #$A6
.aaef	4c 69 ac	jmp $ac69	                jmp asm_common
.aaf2					z_asm_ldx_z:
.aaf2					xt_asm_ldx_zy:
.aaf2	a9 b6		lda #$b6	                lda #$B6
.aaf4	4c 69 ac	jmp $ac69	                jmp asm_common
.aaf7					z_asm_ldx_zy:
.aaf7					xt_asm_ldy:
.aaf7	a9 ac		lda #$ac	                lda #$AC
.aaf9	4c 69 ac	jmp $ac69	                jmp asm_common
.aafc					z_asm_ldy:
.aafc					xt_asm_ldy_h:
.aafc	a9 a0		lda #$a0	                lda #$A0
.aafe	4c 69 ac	jmp $ac69	                jmp asm_common
.ab01					z_asm_ldy_h:
.ab01					xt_asm_ldy_x:
.ab01	a9 bc		lda #$bc	                lda #$BC
.ab03	4c 69 ac	jmp $ac69	                jmp asm_common
.ab06					z_asm_ldy_x:
.ab06					xt_asm_ldy_z:
.ab06	a9 a4		lda #$a4	                lda #$A4
.ab08	4c 69 ac	jmp $ac69	                jmp asm_common
.ab0b					z_asm_ldy_z:
.ab0b					xt_asm_ldy_zx:
.ab0b	a9 b4		lda #$b4	                lda #$B4
.ab0d	4c 69 ac	jmp $ac69	                jmp asm_common
.ab10					z_asm_ldy_zx:
.ab10					xt_asm_lsr:
.ab10	a9 4e		lda #$4e	                lda #$4E
.ab12	4c 69 ac	jmp $ac69	                jmp asm_common
.ab15					z_asm_lsr:
.ab15					xt_asm_lsr_a:
.ab15	a9 4a		lda #$4a	                lda #$4A
.ab17	4c 69 ac	jmp $ac69	                jmp asm_common
.ab1a					z_asm_lsr_a:
.ab1a					xt_asm_lsr_x:
.ab1a	a9 5e		lda #$5e	                lda #$5E
.ab1c	4c 69 ac	jmp $ac69	                jmp asm_common
.ab1f					z_asm_lsr_x:
.ab1f					xt_asm_lsr_z:
.ab1f	a9 46		lda #$46	                lda #$46
.ab21	4c 69 ac	jmp $ac69	                jmp asm_common
.ab24					z_asm_lsr_z:
.ab24					xt_asm_lsr_zx:
.ab24	a9 56		lda #$56	                lda #$56
.ab26	4c 69 ac	jmp $ac69	                jmp asm_common
.ab29					z_asm_lsr_zx:
.ab29					xt_asm_nop:
.ab29	a9 ea		lda #$ea	                lda #$EA
.ab2b	4c 69 ac	jmp $ac69	                jmp asm_common
.ab2e					z_asm_nop:
.ab2e					xt_asm_ora:
.ab2e	a9 0d		lda #$0d	                lda #$0D
.ab30	4c 69 ac	jmp $ac69	                jmp asm_common
.ab33					z_asm_ora:
.ab33					xt_asm_ora_h:
.ab33	a9 09		lda #$09	                lda #$09
.ab35	4c 69 ac	jmp $ac69	                jmp asm_common
.ab38					z_asm_ora_h:
.ab38					xt_asm_ora_x:
.ab38	a9 1d		lda #$1d	                lda #$1D
.ab3a	4c 69 ac	jmp $ac69	                jmp asm_common
.ab3d					z_asm_ora_x:
.ab3d					xt_asm_ora_y:
.ab3d	a9 19		lda #$19	                lda #$19
.ab3f	4c 69 ac	jmp $ac69	                jmp asm_common
.ab42					z_asm_ora_y:
.ab42					xt_asm_ora_z:
.ab42	a9 05		lda #$05	                lda #$05
.ab44	4c 69 ac	jmp $ac69	                jmp asm_common
.ab47					z_asm_ora_z:
.ab47					xt_asm_ora_zi:
.ab47	a9 12		lda #$12	                lda #$12
.ab49	a0 02		ldy #$02	                ldy #2
.ab4b	4c 69 ac	jmp $ac69	                jmp asm_common
.ab4e					z_asm_ora_zi:
.ab4e					xt_asm_ora_ziy:
.ab4e	a9 11		lda #$11	                lda #$11
.ab50	4c 69 ac	jmp $ac69	                jmp asm_common
.ab53					z_asm_ora_ziy:
.ab53					xt_asm_ora_zx:
.ab53	a9 15		lda #$15	                lda #$15
.ab55	4c 69 ac	jmp $ac69	                jmp asm_common
.ab58					z_asm_ora_zx:
.ab58					xt_asm_ora_zxi:
.ab58	a9 01		lda #$01	                lda #$01
.ab5a	4c 69 ac	jmp $ac69	                jmp asm_common
.ab5d					z_asm_ora_zxi:
.ab5d					xt_asm_pha:
.ab5d	a9 48		lda #$48	                lda #$48
.ab5f	4c 69 ac	jmp $ac69	                jmp asm_common
.ab62					z_asm_pha:
.ab62					xt_asm_php:
.ab62	a9 08		lda #$08	                lda #$08
.ab64	4c 69 ac	jmp $ac69	                jmp asm_common
.ab67					z_asm_php:
.ab67					xt_asm_phx:
.ab67	a9 da		lda #$da	                lda #$DA
.ab69	4c 69 ac	jmp $ac69	                jmp asm_common
.ab6c					z_asm_phx:
.ab6c					xt_asm_phy:
.ab6c	a9 5a		lda #$5a	                lda #$5A
.ab6e	4c 69 ac	jmp $ac69	                jmp asm_common
.ab71					z_asm_phy:
.ab71					xt_asm_pla:
.ab71	a9 68		lda #$68	                lda #$68
.ab73	4c 69 ac	jmp $ac69	                jmp asm_common
.ab76					z_asm_pla:
.ab76					xt_asm_plp:
.ab76	a9 28		lda #$28	                lda #$28
.ab78	4c 69 ac	jmp $ac69	                jmp asm_common
.ab7b					z_asm_plp:
.ab7b					xt_asm_plx:
.ab7b	a9 fa		lda #$fa	                lda #$FA
.ab7d	4c 69 ac	jmp $ac69	                jmp asm_common
.ab80					z_asm_plx:
.ab80					xt_asm_ply:
.ab80	a9 7a		lda #$7a	                lda #$7A
.ab82	4c 69 ac	jmp $ac69	                jmp asm_common
.ab85					z_asm_ply:
.ab85					xt_asm_rol:
.ab85	a9 2e		lda #$2e	                lda #$2E
.ab87	4c 69 ac	jmp $ac69	                jmp asm_common
.ab8a					z_asm_rol:
.ab8a					xt_asm_rol_a:
.ab8a	a9 2a		lda #$2a	                lda #$2A
.ab8c	4c 69 ac	jmp $ac69	                jmp asm_common
.ab8f					z_asm_rol_a:
.ab8f					xt_asm_rol_x:
.ab8f	a9 3e		lda #$3e	                lda #$3E
.ab91	4c 69 ac	jmp $ac69	                jmp asm_common
.ab94					z_asm_rol_x:
.ab94					xt_asm_rol_z:
.ab94	a9 26		lda #$26	                lda #$26
.ab96	4c 69 ac	jmp $ac69	                jmp asm_common
.ab99					z_asm_rol_z:
.ab99					xt_asm_rol_zx:
.ab99	a9 36		lda #$36	                lda #$36
.ab9b	4c 69 ac	jmp $ac69	                jmp asm_common
.ab9e					z_asm_rol_zx:
.ab9e					xt_asm_ror:
.ab9e	a9 6e		lda #$6e	                lda #$6E
.aba0	4c 69 ac	jmp $ac69	                jmp asm_common
.aba3					z_asm_ror:
.aba3					xt_asm_ror_a:
.aba3	a9 6a		lda #$6a	                lda #$6A
.aba5	4c 69 ac	jmp $ac69	                jmp asm_common
.aba8					z_asm_ror_a:
.aba8					xt_asm_ror_x:
.aba8	a9 7e		lda #$7e	                lda #$7E
.abaa	4c 69 ac	jmp $ac69	                jmp asm_common
.abad					z_asm_ror_x:
.abad					xt_asm_ror_z:
.abad	a9 66		lda #$66	                lda #$66
.abaf	4c 69 ac	jmp $ac69	                jmp asm_common
.abb2					z_asm_ror_z:
.abb2					xt_asm_ror_zx:
.abb2	a9 76		lda #$76	                lda #$76
.abb4	4c 69 ac	jmp $ac69	                jmp asm_common
.abb7					z_asm_ror_zx:
.abb7					xt_asm_rti:
.abb7	a9 40		lda #$40	                lda #$40
.abb9	4c 69 ac	jmp $ac69	                jmp asm_common
.abbc					z_asm_rti:
.abbc					xt_asm_rts:
.abbc	a9 60		lda #$60	                lda #$60
.abbe	4c 69 ac	jmp $ac69	                jmp asm_common
.abc1					z_asm_rts:
.abc1					xt_asm_sbc:
.abc1	a9 ed		lda #$ed	                lda #$ED
.abc3	4c 69 ac	jmp $ac69	                jmp asm_common
.abc6					z_asm_sbc:
.abc6					xt_asm_sbc_h:
.abc6	a9 e9		lda #$e9	                lda #$E9
.abc8	4c 69 ac	jmp $ac69	                jmp asm_common
.abcb					z_asm_sbc_h:
.abcb					xt_asm_sbc_x:
.abcb	a9 fd		lda #$fd	                lda #$FD
.abcd	4c 69 ac	jmp $ac69	                jmp asm_common
.abd0					z_asm_sbc_x:
.abd0					xt_asm_sbc_y:
.abd0	a9 f9		lda #$f9	                lda #$F9
.abd2	4c 69 ac	jmp $ac69	                jmp asm_common
.abd5					z_asm_sbc_y:
.abd5					xt_asm_sbc_z:
.abd5	a9 e5		lda #$e5	                lda #$E5
.abd7	4c 69 ac	jmp $ac69	                jmp asm_common
.abda					z_asm_sbc_z:
.abda					xt_asm_sbc_zi:
.abda	a9 f2		lda #$f2	                lda #$F2
.abdc	4c 69 ac	jmp $ac69	                jmp asm_common
.abdf					z_asm_sbc_zi:
.abdf					xt_asm_sbc_ziy:
.abdf	a9 f1		lda #$f1	                lda #$F1
.abe1	4c 69 ac	jmp $ac69	                jmp asm_common
.abe4					z_asm_sbc_ziy:
.abe4					xt_asm_sbc_zx:
.abe4	a9 f5		lda #$f5	                lda #$F5
.abe6	4c 69 ac	jmp $ac69	                jmp asm_common
.abe9					z_asm_sbc_zx:
.abe9					xt_asm_sbc_zxi:
.abe9	a9 e1		lda #$e1	                lda #$E1
.abeb	80 7c		bra $ac69	                bra asm_common  ; <-- limit for BRA instead of JMP
.abed					z_asm_sbc_zxi:
.abed					xt_asm_sec:
.abed	a9 38		lda #$38	                lda #$38
.abef	80 78		bra $ac69	                bra asm_common
.abf1					z_asm_sec:
.abf1					xt_asm_sed:
.abf1	a9 f8		lda #$f8	                lda #$F8
.abf3	80 74		bra $ac69	                bra asm_common
.abf5					z_asm_sed:
.abf5					xt_asm_sei:
.abf5	a9 78		lda #$78	                lda #$78
.abf7	80 70		bra $ac69	                bra asm_common
.abf9					z_asm_sei:
.abf9					xt_asm_sta:
.abf9	a9 8d		lda #$8d	                lda #$8D
.abfb	80 6c		bra $ac69	                bra asm_common
.abfd					z_asm_sta:
.abfd					xt_asm_sta_x:
.abfd	a9 9d		lda #$9d	                lda #$9D
.abff	80 68		bra $ac69	                bra asm_common
.ac01					z_asm_sta_x:
.ac01					xt_asm_sta_y:
.ac01	a9 99		lda #$99	                lda #$99
.ac03	80 64		bra $ac69	                bra asm_common
.ac05					z_asm_sta_y:
.ac05					xt_asm_sta_z:
.ac05	a9 85		lda #$85	                lda #$85
.ac07	80 60		bra $ac69	                bra asm_common
.ac09					z_asm_sta_z:
.ac09					xt_asm_sta_zi:
.ac09	a9 92		lda #$92	                lda #$92
.ac0b	80 5c		bra $ac69	                bra asm_common
.ac0d					z_asm_sta_zi:
.ac0d					xt_asm_sta_ziy:
.ac0d	a9 91		lda #$91	                lda #$91
.ac0f	80 58		bra $ac69	                bra asm_common
.ac11					z_asm_sta_ziy:
.ac11					xt_asm_sta_zx:
.ac11	a9 95		lda #$95	                lda #$95
.ac13	80 54		bra $ac69	                bra asm_common
.ac15					z_asm_sta_zx:
.ac15					xt_asm_sta_zxi:
.ac15	a9 81		lda #$81	                lda #$81
.ac17	80 50		bra $ac69	                bra asm_common
.ac19					z_asm_sta_zxi:
.ac19					xt_asm_stx:
.ac19	a9 8e		lda #$8e	                lda #$8E
.ac1b	80 4c		bra $ac69	                bra asm_common
.ac1d					z_asm_stx:
.ac1d					xt_asm_stx_z:
.ac1d	a9 86		lda #$86	                lda #$86
.ac1f	80 48		bra $ac69	                bra asm_common
.ac21					z_asm_stx_z:
.ac21					xt_asm_stx_zy:
.ac21	a9 96		lda #$96	                lda #$96
.ac23	80 44		bra $ac69	                bra asm_common
.ac25					z_asm_stx_zy:
.ac25					xt_asm_sty:
.ac25	a9 8c		lda #$8c	                lda #$8C
.ac27	80 40		bra $ac69	                bra asm_common
.ac29					z_asm_sty:
.ac29					xt_asm_sty_z:
.ac29	a9 84		lda #$84	                lda #$84
.ac2b	80 3c		bra $ac69	                bra asm_common
.ac2d					z_asm_sty_z:
.ac2d					xt_asm_sty_zx:
.ac2d	a9 94		lda #$94	                lda #$94
.ac2f	80 38		bra $ac69	                bra asm_common
.ac31					z_asm_sty_zx:
.ac31					xt_asm_stz:
.ac31	a9 9c		lda #$9c	                lda #$9C
.ac33	80 34		bra $ac69	                bra asm_common
.ac35					z_asm_stz:
.ac35					xt_asm_stz_x:
.ac35	a9 9e		lda #$9e	                lda #$9E
.ac37	80 30		bra $ac69	                bra asm_common
.ac39					z_asm_stz_x:
.ac39					xt_asm_stz_z:
.ac39	a9 64		lda #$64	                lda #$64
.ac3b	80 2c		bra $ac69	                bra asm_common
.ac3d					z_asm_stz_z:
.ac3d					xt_asm_stz_zx:
.ac3d	a9 74		lda #$74	                lda #$74
.ac3f	80 28		bra $ac69	                bra asm_common
.ac41					z_asm_stz_zx:
.ac41					xt_asm_tax:
.ac41	a9 aa		lda #$aa	                lda #$AA
.ac43	80 24		bra $ac69	                bra asm_common
.ac45					z_asm_tax:
.ac45					xt_asm_tay:
.ac45	a9 a8		lda #$a8	                lda #$A8
.ac47	80 20		bra $ac69	                bra asm_common
.ac49					z_asm_tay:
.ac49					xt_asm_trb:
.ac49	a9 1c		lda #$1c	                lda #$1C
.ac4b	80 1c		bra $ac69	                bra asm_common
.ac4d					z_asm_trb:
.ac4d					xt_asm_trb_z:
.ac4d	a9 14		lda #$14	                lda #$14
.ac4f	80 18		bra $ac69	                bra asm_common
.ac51					z_asm_trb_z:
.ac51					xt_asm_tsb:
.ac51	a9 0c		lda #$0c	                lda #$0C
.ac53	80 14		bra $ac69	                bra asm_common
.ac55					z_asm_tsb:
.ac55					xt_asm_tsb_z:
.ac55	a9 04		lda #$04	                lda #$04
.ac57	80 10		bra $ac69	                bra asm_common
.ac59					z_asm_tsb_z:
.ac59					xt_asm_tsx:
.ac59	a9 ba		lda #$ba	                lda #$BA
.ac5b	80 0c		bra $ac69	                bra asm_common
.ac5d					z_asm_tsx:
.ac5d					xt_asm_txa:
.ac5d	a9 8a		lda #$8a	                lda #$8A
.ac5f	80 08		bra $ac69	                bra asm_common
.ac61					z_asm_txa:
.ac61					xt_asm_txs:
.ac61	a9 9a		lda #$9a	                lda #$9A
.ac63	80 04		bra $ac69	                bra asm_common
.ac65					z_asm_txs:
.ac65					xt_asm_tya:
.ac65	a9 98		lda #$98	                lda #$98
.ac67	80 00		bra $ac69	                bra asm_common
.ac69					z_asm_tya:
.ac69					asm_common:
.ac69	a8		tay		                tay
.ac6a	20 94 d7	jsr $d794	                jsr cmpl_a
.ac6d	a9 d5		lda #$d5	                lda #<oc_index_table
.ac6f	85 26		sta $26		                sta tmp2
.ac71	a9 ae		lda #$ae	                lda #>oc_index_table
.ac73	85 27		sta $27		                sta tmp2+1
.ac75	98		tya		                tya             ; retrieve opcode
.ac76	0a		asl a		                asl             ; times two for offset
.ac77	90 02		bcc $ac7b	                bcc +
.ac79	e6 27		inc $27		                inc tmp2+1
.ac7b					+
.ac7b	a8		tay		                tay             ; use Y as the index
.ac7c	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB
.ac7e	85 28		sta $28		                sta tmp3
.ac80	c8		iny		                iny
.ac81	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB
.ac83	85 29		sta $29		                sta tmp3+1
.ac85	b2 28		lda ($28)	                lda (tmp3)      ; get "lengths byte"
.ac87	2a		rol a		                rol
.ac88	2a		rol a		                rol
.ac89	2a		rol a		                rol             ; Three times because we go through Carry
.ac8a	29 03		and #$03	                and #%00000011
.ac8c	a8		tay		                tay
.ac8d	88		dey		                dey
.ac8e	f0 12		beq $aca2	                beq _done
.ac90	20 e1 d8	jsr $d8e1	                jsr underflow_1
.ac93	b5 00		lda $00,x	                lda 0,x
.ac95	20 94 d7	jsr $d794	                jsr cmpl_a      ; does not use Y
.ac98	88		dey		                dey
.ac99	f0 05		beq $aca0	                beq _done_drop
.ac9b	b5 01		lda $01,x	                lda 1,x
.ac9d	20 94 d7	jsr $d794	                jsr cmpl_a      ; Fall through to _done_drop
.aca0					_done_drop:
.aca0	e8		inx		                inx
.aca1	e8		inx		                inx             ; Fall through to _done
.aca2					_done:
.aca2	60		rts		                rts             ; Returns to original caller
.aca3					xt_asm_push_a:
.aca3	a0 00		ldy #$00	                ldy #0
.aca5					_loop:
.aca5	b9 b3 ac	lda $acb3,y	                lda asm_push_a_data,y
.aca8	c9 ff		cmp #$ff	                cmp #$FF
.acaa	f0 06		beq $acb2	                beq _done
.acac	20 94 d7	jsr $d794	                jsr cmpl_a      ; does not change Y
.acaf	c8		iny		                iny
.acb0	80 f3		bra $aca5	                bra _loop
.acb2					_done:
.acb2					z_asm_push_a:
.acb2	60		rts		                rts
.acb3					asm_push_a_data:
>acb3	ca ca 95 00 74 01		        .byte $CA, $CA, $95, 00, $74, $01
>acb9	ff				        .byte $FF               ; terminator
.acba					xt_asm_back_jump:
.acba					z_asm_back_jump:
.acba	60		rts		                rts
.acbb					xt_asm_back_branch:
.acbb	20 8e 91	jsr $918e	                jsr xt_here             ; ( addr-l addr-h )
.acbe	20 6c 95	jsr $956c	                jsr xt_minus            ; ( offset )
.acc1	3a		dec a		                dea
.acc2	3a		dec a		                dea
.acc3					z_asm_back_branch:
.acc3	60		rts		                rts
.acc4					assembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../disassembler.asm

.acc4					disassembler:
.acc4	20 7f 89	jsr $897f	                jsr xt_cr       ; ( addr u )
.acc7					_byte_loop:
.acc7	20 af 98	jsr $98af	                jsr xt_over     ; ( addr u addr )
.acca	20 1b a5	jsr $a51b	                jsr xt_u_dot    ; ( addr u )
.accd	20 0b a1	jsr $a10b	                jsr xt_space
.acd0	a9 d5		lda #$d5	                lda #<oc_index_table
.acd2	85 26		sta $26		                sta tmp2
.acd4	a9 ae		lda #$ae	                lda #>oc_index_table
.acd6	85 27		sta $27		                sta tmp2+1
.acd8	a1 02		lda ($02,x)	                lda (2,x)       ; get opcode that addr points to
.acda	85 36		sta $36		                sta scratch     ; Save opcode
.acdc	0a		asl a		                asl             ; multiply by two for offset
.acdd	90 02		bcc $ace1	                bcc +
.acdf	e6 27		inc $27		                inc tmp2+1      ; we're on second page
.ace1					+
.ace1	a8		tay		                tay             ; use Y as the index
.ace2	b1 26		lda ($26),y	                lda (tmp2),y    ; LSB
.ace4	85 28		sta $28		                sta tmp3
.ace6	48		pha		                pha
.ace7	c8		iny		                iny
.ace8	b1 26		lda ($26),y	                lda (tmp2),y    ; MSB
.acea	85 29		sta $29		                sta tmp3+1
.acec	48		pha		                pha
.aced	b2 28		lda ($28)	                lda (tmp3)
.acef	a8		tay		                tay                     ; save copy of lengths byte
.acf0	10 3c		bpl $ad2e	                bpl _no_operand         ; bit 7 clear, single-byte instruction
.acf2	20 95 a7	jsr $a795	                jsr xt_zero             ; ( addr u 0 ) ZERO does not use Y
.acf5	f6 04		inc $04,x	                inc 4,x
.acf7	d0 02		bne $acfb	                bne +
.acf9	f6 05		inc $05,x	                inc 5,x                 ; ( addr+1 u 0 )
.acfb					+
.acfb	b5 02		lda $02,x	                lda 2,x
.acfd	d0 02		bne $ad01	                bne +
.acff	d6 03		dec $03,x	                dec 3,x
.ad01					+
.ad01	d6 02		dec $02,x	                dec 2,x                 ; ( addr+1 u-1 0 )
.ad03	a1 04		lda ($04,x)	                lda (4,x)
.ad05	95 00		sta $00,x	                sta 0,x                 ; LSB of operand ( addr+1 u-1 LSB )
.ad07	85 37		sta $37		                sta scratch+1           ; Save a copy in the scratch buffer
.ad09	98		tya		                tya                     ; retrieve copy of lengths byte
.ad0a	2a		rol a		                rol                     ; shift bit 6 to bit 7
.ad0b	10 14		bpl $ad21	                bpl _print_operand
.ad0d	f6 04		inc $04,x	                inc 4,x
.ad0f	d0 02		bne $ad13	                bne +
.ad11	f6 05		inc $05,x	                inc 5,x                 ; ( addr+2 u-1 LSB )
.ad13					+
.ad13	b5 02		lda $02,x	                lda 2,x
.ad15	d0 02		bne $ad19	                bne +
.ad17	d6 03		dec $03,x	                dec 3,x
.ad19					+
.ad19	d6 02		dec $02,x	                dec 2,x                 ; ( addr+2 u-2 LSB )
.ad1b	a1 04		lda ($04,x)	                lda (4,x)
.ad1d	95 01		sta $01,x	                sta 1,x                 ; MSB of operand ( addr+2 u-2 opr )
.ad1f	85 38		sta $38		                sta scratch+2           ; Save a copy in the scratch buffer
.ad21					_print_operand:
.ad21	ca		dex		                dex
.ad22	ca		dex		                dex
.ad23	a9 05		lda #$05	                lda #5
.ad25	95 00		sta $00,x	                sta 0,x
.ad27	74 01		stz $01,x	                stz 1,x                 ; ( addr+n u-n opr 5 )
.ad29	20 27 a5	jsr $a527	                jsr xt_u_dot_r          ; U.R ( addr+n u-n )
.ad2c	80 0b		bra $ad39	                bra _print_mnemonic
.ad2e					_no_operand:
.ad2e	ca		dex		                dex
.ad2f	ca		dex		                dex
.ad30	a9 05		lda #$05	                lda #5
.ad32	95 00		sta $00,x	                sta 0,x
.ad34	74 01		stz $01,x	                stz 1,x                 ; ( addr u 5 )
.ad36	20 11 a1	jsr $a111	                jsr xt_spaces           ; ( addr u )
.ad39					_print_mnemonic:
.ad39	20 0b a1	jsr $a10b	                jsr xt_space
.ad3c	ca		dex		                dex
.ad3d	ca		dex		                dex                     ; ( addr u ? )
.ad3e	68		pla		                pla                     ; MSB
.ad3f	95 01		sta $01,x	                sta 1,x                 ; ( addr u MSB )
.ad41	68		pla		                pla                     ; LSB
.ad42	95 00		sta $00,x	                sta 0,x                 ; ( addr u addr-o )
.ad44	20 6b 89	jsr $896b	                jsr xt_count            ; ( addr u addr-o u-o )
.ad47	74 01		stz $01,x	                stz 1,x                 ; paranoid
.ad49	b5 00		lda $00,x	                lda 0,x
.ad4b	29 07		and #$07	                and #%00000111          ; ( addr u addr-o u-o )
.ad4d	95 00		sta $00,x	                sta 0,x
.ad4f	20 f0 a4	jsr $a4f0	                jsr xt_type             ; ( addr u )
.ad52	a5 36		lda $36		                lda scratch
.ad54	c9 20		cmp #$20	                cmp #$20
.ad56	d0 59		bne $adb1	                bne _not_jsr
.ad58	ca		dex		                dex
.ad59	ca		dex		                dex
.ad5a	a9 05		lda #$05	                lda #5
.ad5c	95 00		sta $00,x	                sta 0,x
.ad5e	74 01		stz $01,x	                stz 1,x
.ad60	20 11 a1	jsr $a111	                jsr xt_spaces
.ad63	a9 b4		lda #$b4	                lda #<literal_runtime
.ad65	c5 37		cmp $37		                cmp scratch+1
.ad67	d0 0c		bne $ad75	                bne _not_literal
.ad69	a9 93		lda #$93	                lda #>literal_runtime
.ad6b	c5 38		cmp $38		                cmp scratch+2
.ad6d	d0 06		bne $ad75	                bne _not_literal
.ad6f	20 67 ae	jsr $ae67	                jsr disasm_literal
.ad72	4c de ad	jmp $adde	                jmp _printing_done
.ad75					_not_literal:
.ad75	a9 96		lda #$96	                lda #<sliteral_runtime
.ad77	c5 37		cmp $37		                cmp scratch+1
.ad79	d0 0c		bne $ad87	                bne _not_sliteral
.ad7b	a9 a0		lda #$a0	                lda #>sliteral_runtime
.ad7d	c5 38		cmp $38		                cmp scratch+2
.ad7f	d0 06		bne $ad87	                bne _not_sliteral
.ad81	20 24 ae	jsr $ae24	                jsr disasm_sliteral
.ad84	4c de ad	jmp $adde	                jmp _printing_done
.ad87					_not_sliteral:
.ad87	a9 30		lda #$30	                lda #<zero_branch_runtime
.ad89	c5 37		cmp $37		                cmp scratch+1
.ad8b	d0 0c		bne $ad99	                bne _not_0branch
.ad8d	a9 92		lda #$92	                lda #>zero_branch_runtime
.ad8f	c5 38		cmp $38		                cmp scratch+2
.ad91	d0 06		bne $ad99	                bne _not_0branch
.ad93	20 5b ae	jsr $ae5b	                jsr disasm_0branch
.ad96	4c de ad	jmp $adde	                jmp _printing_done
.ad99					_not_0branch
.ad99	a9 f7		lda #$f7	                lda #<branch_runtime
.ad9b	c5 37		cmp $37		                cmp scratch+1
.ad9d	d0 0c		bne $adab	                bne _not_branch
.ad9f	a9 8d		lda #$8d	                lda #>branch_runtime
.ada1	c5 38		cmp $38		                cmp scratch+2
.ada3	d0 06		bne $adab	                bne _not_branch
.ada5	20 60 ae	jsr $ae60	                jsr disasm_branch
.ada8	4c de ad	jmp $adde	                jmp _printing_done
.adab					_not_branch
.adab	20 85 ae	jsr $ae85	                jsr disasm_jsr
.adae	4c de ad	jmp $adde	                jmp _printing_done
.adb1					_not_jsr:
.adb1	c9 4c		cmp #$4c	                cmp #$4C
.adb3	d0 29		bne $adde	                bne _printing_done
.adb5	a5 37		lda $37		                lda scratch+1   ; Copy the pointer.
.adb7	85 39		sta $39		                sta scratch+3
.adb9	a5 38		lda $38		                lda scratch+2
.adbb	85 3a		sta $3a		                sta scratch+4
.adbd	b2 39		lda ($39)	                lda (scratch+3)
.adbf	c9 20		cmp #$20	                cmp #$20 ; check for JSR
.adc1	d0 1b		bne $adde	                bne _printing_done
.adc3	e6 39		inc $39		                inc scratch+3
.adc5	d0 02		bne $adc9	                bne +
.adc7	e6 3a		inc $3a		                inc scratch+4
.adc9					+
.adc9	b2 39		lda ($39)	                lda (scratch+3)
.adcb	c9 96		cmp #$96	                cmp #<sliteral_runtime
.adcd	d0 0f		bne $adde	                bne _printing_done
.adcf	e6 39		inc $39		                inc scratch+3
.add1	d0 02		bne $add5	                bne +
.add3	e6 3a		inc $3a		                inc scratch+4
.add5					+
.add5	b2 39		lda ($39)	                lda (scratch+3)
.add7	c9 a0		cmp #$a0	                cmp #>sliteral_runtime
.add9	d0 03		bne $adde	                bne _printing_done
.addb	20 fa ad	jsr $adfa	                jsr disasm_sliteral_jump
.adde					_printing_done:
.adde	20 7f 89	jsr $897f	                jsr xt_cr
.ade1	f6 02		inc $02,x	                inc 2,x
.ade3	d0 02		bne $ade7	                bne +
.ade5	f6 03		inc $03,x	                inc 3,x                 ; ( addr+1 u )
.ade7					+
.ade7	20 2d 98	jsr $982d	                jsr xt_one_minus        ; ( addr+1 u-1 )
.adea	b5 00		lda $00,x	                lda 0,x                 ; All done?
.adec	15 01		ora $01,x	                ora 1,x
.adee	f0 07		beq $adf7	                beq _done
.adf0	b5 01		lda $01,x	                lda 1,x                 ; Catch mid-instruction ranges
.adf2	30 03		bmi $adf7	                bmi _done
.adf4	4c c7 ac	jmp $acc7	                jmp _byte_loop          ; out of range for BRA
.adf7					_done:
.adf7	4c 9d a3	jmp $a39d	                jmp xt_two_drop         ; JSR/RTS
.adfa					disasm_sliteral_jump:
.adfa	20 9b a1	jsr $a19b	                jsr xt_swap
.adfd	ca		dex		                dex
.adfe	ca		dex		                dex
.adff	a5 37		lda $37		                lda scratch+1
.ae01	95 00		sta $00,x	                sta 0,x
.ae03	a5 38		lda $38		                lda scratch+2
.ae05	95 01		sta $01,x	                sta 1,x
.ae07	20 9b a1	jsr $a19b	                jsr xt_swap
.ae0a	20 6c 95	jsr $956c	                jsr xt_minus
.ae0d	20 2d 98	jsr $982d	                jsr xt_one_minus
.ae10	20 6c 95	jsr $956c	                jsr xt_minus
.ae13	ca		dex		                dex
.ae14	ca		dex		                dex
.ae15	a5 37		lda $37		                lda scratch+1
.ae17	95 00		sta $00,x	                sta 0,x
.ae19	a5 38		lda $38		                lda scratch+2
.ae1b	95 01		sta $01,x	                sta 1,x
.ae1d	20 2d 98	jsr $982d	                jsr xt_one_minus
.ae20	20 9b a1	jsr $a19b	                jsr xt_swap ; ( new_addr new_n )
.ae23	60		rts		                rts
.ae24					disasm_sliteral:
.ae24	a9 53		lda #$53	                lda #'S'
.ae26	20 12 8e	jsr $8e12	                jsr emit_a ; Print S before LITERAL so it becomes SLITERAL
.ae29	a9 0c		lda #$0c	                lda #str_disasm_lit     ; "LITERAL "
.ae2b	20 1d d9	jsr $d91d	                jsr print_string_no_lf
.ae2e	20 9b a1	jsr $a19b	                jsr xt_swap             ; switch to (u addr)
.ae31	20 39 98	jsr $9839	                jsr xt_one_plus
.ae34	20 cb 8d	jsr $8dcb	                jsr xt_dup
.ae37	20 9c 8f	jsr $8f9c	                jsr xt_fetch
.ae3a	20 1b a5	jsr $a51b	                jsr xt_u_dot            ; Print the address of the string
.ae3d	20 94 a3	jsr $a394	                jsr xt_two
.ae40	20 ff 99	jsr $99ff	                jsr xt_plus
.ae43	20 cb 8d	jsr $8dcb	                jsr xt_dup
.ae46	20 7e 9a	jsr $9a7e	                jsr xt_question         ; Print the length of the string
.ae49	20 39 98	jsr $9839	                jsr xt_one_plus
.ae4c	20 9b a1	jsr $a19b	                jsr xt_swap            ; ( addr+4 u )
.ae4f	ca		dex		                dex
.ae50	ca		dex		                dex
.ae51	a9 04		lda #$04	                lda #4
.ae53	95 00		sta $00,x	                sta 0,x
.ae55	74 01		stz $01,x	                stz 1,x
.ae57	20 6c 95	jsr $956c	                jsr xt_minus            ; ( addr+4 u-4 )
.ae5a	60		rts		                rts
.ae5b					disasm_0branch:
.ae5b	a9 30		lda #$30	                lda #'0'
.ae5d	20 12 8e	jsr $8e12	                jsr emit_a ; Print 0 before BRANCH so it becomes 0BRANCH
.ae60					disasm_branch:
.ae60	a9 0e		lda #$0e	                lda #str_disasm_bra
.ae62	20 1d d9	jsr $d91d	                jsr print_string_no_lf ; "BRANCH "
.ae65	80 05		bra $ae6c	                bra disasm_print_literal
.ae67					disasm_literal:
.ae67	a9 0c		lda #$0c	                lda #str_disasm_lit
.ae69	20 1d d9	jsr $d91d	                jsr print_string_no_lf ; "LITERAL "
.ae6c					disasm_print_literal:
.ae6c	20 9b a1	jsr $a19b	                jsr xt_swap ; switch to (u addr)
.ae6f	20 39 98	jsr $9839	                jsr xt_one_plus
.ae72	20 cb 8d	jsr $8dcb	                jsr xt_dup
.ae75	20 7e 9a	jsr $9a7e	                jsr xt_question ; Print the value at the adress
.ae78	20 39 98	jsr $9839	                jsr xt_one_plus
.ae7b	20 9b a1	jsr $a19b	                jsr xt_swap ; (addr+2 u)
.ae7e	20 2d 98	jsr $982d	                jsr xt_one_minus
.ae81	20 2d 98	jsr $982d	                jsr xt_one_minus ; (addr+2 u-2)
.ae84	60		rts		                rts
.ae85					disasm_jsr:
.ae85	ca		dex		                dex
.ae86	ca		dex		                dex
.ae87	a5 37		lda $37		                lda scratch+1
.ae89	95 00		sta $00,x	                sta 0,x
.ae8b	a5 38		lda $38		                lda scratch+2
.ae8d	95 01		sta $01,x	                sta 1,x
.ae8f	20 94 92	jsr $9294	                jsr xt_int_to_name
.ae92	b5 00		lda $00,x	                lda 0,x
.ae94	15 01		ora $01,x	                ora 1,x
.ae96	f0 07		beq $ae9f	                beq _disasm_no_nt
.ae98	20 1a 96	jsr $961a	                jsr xt_name_to_string
.ae9b	20 f0 a4	jsr $a4f0	                jsr xt_type
.ae9e	60		rts		                rts
.ae9f					_disasm_no_nt:
.ae9f	20 4a 8d	jsr $8d4a	                jsr xt_drop ; the 0 indicating no name token
.aea2	ca		dex		                dex
.aea3	ca		dex		                dex
.aea4	a5 37		lda $37		                lda scratch+1
.aea6	95 00		sta $00,x	                sta 0,x
.aea8	a5 38		lda $38		                lda scratch+2
.aeaa	95 01		sta $01,x	                sta 1,x
.aeac	ca		dex		                dex
.aead	ca		dex		                dex
.aeae	a9 e1		lda #$e1	                lda #<underflow_1
.aeb0	95 00		sta $00,x	                sta 0,x
.aeb2	a9 d8		lda #$d8	                lda #>underflow_1
.aeb4	95 01		sta $01,x	                sta 1,x
.aeb6	20 08 d8	jsr $d808	                jsr compare_16bit
.aeb9	f0 02		beq $aebd	                beq _disasm_jsr_uflow_check_upper
.aebb	b0 14		bcs $aed1	                bcs _disasm_jsr_unknown
.aebd					_disasm_jsr_uflow_check_upper:
.aebd	a9 f0		lda #$f0	                lda #<underflow_4
.aebf	95 00		sta $00,x	                sta 0,x
.aec1	a9 d8		lda #$d8	                lda #>underflow_4
.aec3	95 01		sta $01,x	                sta 1,x
.aec5	20 08 d8	jsr $d808	                jsr compare_16bit
.aec8	f0 02		beq $aecc	                beq _disasm_jsr_soc
.aeca	90 05		bcc $aed1	                bcc _disasm_jsr_unknown
.aecc					_disasm_jsr_soc:
.aecc	a9 0d		lda #$0d	                lda #str_disasm_sdc
.aece	20 1d d9	jsr $d91d	                jsr print_string_no_lf  ; "STACK DEPTH CHECK"
.aed1					_disasm_jsr_unknown:
.aed1	20 9d a3	jsr $a39d	                jsr xt_two_drop
.aed4	60		rts		                rts
.aed5					oc_index_table:
>aed5	d5 b0 d9 b0 6d b5 6d b5		        .word oc00, oc01, oc__, oc__, oc04, oc05, oc06, oc__
>aedd	e1 b0 e7 b0 ed b0 6d b5
>aee5	f3 b0 f7 b0 fd b0 6d b5		        .word oc08, oc09, oc0a, oc__, oc0c, oc0d, oc0e, oc0f
>aeed	03 b1 07 b1 0b b1 0f b1
>aef5	14 b1 18 b1 20 b1 6d b5		        .word oc10, oc11, oc12, oc__, oc14, oc15, oc16, oc17
>aefd	27 b1 2d b1 34 b1 3b b1
>af05	42 b1 46 b1 4c b1 6d b5		        .word oc18, oc19, oc1a, oc__, oc1c, oc1d, oc__, oc1f
>af0d	52 b1 56 b1 6d b5 5c b1
>af15	62 b1 66 b1 6d b5 6d b5		        .word oc20, oc21, oc__, oc__, oc24, oc25, oc26, oc27
>af1d	6e b1 74 b1 7a b1 80 b1
>af25	87 b1 8b b1 91 b1 6d b5		        .word oc28, oc29, oc2a, oc__, oc2c, oc2d, oc2e, oc2f
>af2d	97 b1 9b b1 a0 b1 a4 b1
>af35	a9 b1 ad b1 b5 b1 6d b5		        .word oc30, oc31, oc32, oc__, oc34, oc35, oc36, oc37
>af3d	bc b1 c4 b1 cb b1 d2 b1
>af45	d9 b1 dd b1 e3 b1 6d b5		        .word oc38, oc39, oc3a, oc__, oc3c, oc3d, oc3e, oc0f
>af4d	e9 b1 ef b1 f5 b1 0f b1
>af55	00 b2 04 b2 6d b5 6d b5		        .word oc40, oc41, oc__, oc__, oc__, oc45, oc46, oc47
>af5d	6d b5 0c b2 12 b2 18 b2
>af65	1f b2 23 b2 29 b2 6d b5		        .word oc48, oc49, oc4a, oc__, oc4c, oc4d, oc4e, oc4f
>af6d	2f b2 33 b2 37 b2 3b b2
>af75	40 b2 44 b2 4c b2 6d b5		        .word oc50, oc51, oc52, oc__, oc__, oc55, oc56, oc57
>af7d	6d b5 53 b2 5a b2 61 b2
>af85	68 b2 6c b2 72 b2 6d b5		        .word oc58, oc59, oc5a, oc__, oc__, oc__, oc5e, oc5f
>af8d	6d b5 6d b5 7c b2 82 b2
>af95	87 b2 8b b2 6d b5 6d b5		        .word oc60, oc61, oc__, oc__, oc64, oc65, oc66, oc67
>af9d	93 b2 99 b2 9f b2 a5 b2
>afa5	ac b2 b0 b2 b6 b2 6d b5		        .word oc68, oc69, oc6a, oc__, oc6c, oc6d, oc6e, oc6f
>afad	bc b2 c2 b2 c6 b2 ca b2
>afb5	cf b2 d3 b2 db b2 6d b5		        .word oc70, oc71, oc72, oc__, oc74, oc75, oc76, oc77
>afbd	e2 b2 e9 b2 f0 b2 f7 b2
>afc5	fe b2 02 b3 08 b3 6d b5		        .word oc78, oc79, oc7a, oc__, oc7c, oc7d, oc7e, oc7f
>afcd	0c b3 13 b3 19 b3 1f b3
>afd5	24 b3 28 b3 6d b5 6d b5		        .word oc80, oc81, oc__, oc__, oc84, oc85, oc86, oc__
>afdd	30 b3 36 b3 3c b3 6d b5
>afe5	42 b3 46 b3 4c b3 6d b5		        .word oc88, oc89, oc8a, oc__, oc8c, oc8d, oc8e, oc8f
>afed	50 b3 54 b3 58 b3 5c b3
>aff5	61 b3 65 b3 6d b3 6d b5		        .word oc90, oc91, oc92, oc__, oc94, oc95, oc96, oc97
>affd	74 b3 7b b3 82 b3 89 b3
>b005	90 b3 94 b3 9a b3 6d b5		        .word oc98, oc99, oc9a, oc__, oc9c, oc9d, oc9e, oc9f
>b00d	9e b3 a2 b3 a8 b3 ae b3
>b015	b3 b3 b9 b3 c1 b3 6d b5		        .word oca0, oca1, oca2, oc__, oca4, oca5, oca6, oca7
>b01d	c7 b3 cd b3 d3 b3 d9 b3
>b025	e0 b3 e4 b3 ea b3 6d b5		        .word oca8, oca9, ocaa, oc__, ocac, ocad, ocae, ocaf
>b02d	ee b3 f2 b3 f6 b3 fa b3
>b035	ff b3 03 b4 0b b4 6d b5		        .word ocb0, ocb1, ocb2, oc__, ocb4, ocb5, ocb6, ocb7
>b03d	12 b4 19 b4 20 b4 27 b4
>b045	2e b4 32 b4 38 b4 6d b5		        .word ocb8, ocb9, ocba, oc__, ocbc, ocbd, ocbe, ocbf
>b04d	3c b4 42 b4 48 b4 4e b4
>b055	53 b4 59 b4 6d b5 6d b5		        .word occ0, occ1, oc__, oc__, occ4, occ5, occ6, occ7
>b05d	61 b4 67 b4 6d b4 73 b4
>b065	7a b4 7e b4 84 b4 6d b5		        .word occ8, occ9, occa, oc__, occc, occd, occe, occf
>b06d	88 b4 8c b4 90 b4 94 b4
>b075	99 b4 9d b4 a5 b4 6d b5		        .word ocd0, ocd1, ocd2, oc__, oc__, ocd5, ocd6, ocd7
>b07d	6d b5 ac b4 b3 b4 ba b4
>b085	c1 b4 c5 b4 cb b4 6d b5		        .word ocd8, ocd9, ocda, oc__, oc__, ocdd, ocde, ocdf
>b08d	6d b5 cf b4 d5 b4 db b4
>b095	e0 b4 e6 b4 6d b5 6d b5		        .word oce0, oce1, oc__, oc__, oce4, oce5, oce6, oce7
>b09d	ee b4 f4 b4 fa b4 00 b5
>b0a5	07 b5 0b b5 11 b5 6d b5		        .word oce8, oce9, ocea, oc__, ocec, oced, ocee, ocef
>b0ad	15 b5 19 b5 1d b5 21 b5
>b0b5	26 b5 2a b5 32 b5 6d b5		        .word ocf0, ocf1, ocf2, oc__, oc__, ocf5, ocf6, ocf7
>b0bd	6d b5 39 b5 40 b5 47 b5
>b0c5	4e b5 52 b5 58 b5 6d b5		        .word ocf8, ocf9, ocfa, oc__, oc__, ocfd, ocfe, ocff
>b0cd	6d b5 5c b5 62 b5 68 b5
.b0d5					oc_table:
>b0d5	83 62 72 6b				oc00:	.text 2*64+3, "brk"              ; enforce the signature byte
>b0d9	87 6f 72 61 2e 7a 78 69			oc01:	.text 2*64+7, "ora.zxi"
>b0e1	85 74 73 62 2e 7a		        oc04:   .text 2*64+5, "tsb.z"
>b0e7	85 6f 72 61 2e 7a			oc05:	.text 2*64+5, "ora.z"
>b0ed	85 61 73 6c 2e 7a			oc06:	.text 2*64+5, "asl.z"
>b0f3	43 70 68 70				oc08:	.text 1*64+3, "php"
>b0f7	85 6f 72 61 2e 23			oc09:	.text 2*64+5, "ora.#"
>b0fd	45 61 73 6c 2e 61			oc0a:	.text 1*64+5, "asl.a"
>b103	c3 74 73 62				oc0c:	.text 3*64+3, "tsb"
>b107	c3 6f 72 61				oc0d:	.text 3*64+3, "ora"
>b10b	c3 61 73 6c				oc0e:	.text 3*64+3, "asl"
>b10f	c4 62 62 72 30				oc0f:	.text 3*64+4, "bbr0"
>b114	83 62 70 6c				oc10:	.text 2*64+3, "bpl"
>b118	87 6f 72 61 2e 7a 69 79			oc11:	.text 2*64+7, "ora.ziy"
>b120	86 6f 72 61 2e 7a 69			oc12:	.text 2*64+6, "ora.zi"
>b127	85 74 72 62 2e 7a			oc14:	.text 2*64+5, "trb.z"
>b12d	86 6f 72 61 2e 7a 78			oc15:	.text 2*64+6, "ora.zx"
>b134	86 61 73 6c 2e 7a 78			oc16:	.text 2*64+6, "asl.zx"
>b13b	86 72 6d 62 31 2e 7a			oc17:	.text 2*64+6, "rmb1.z"
>b142	43 63 6c 63				oc18:	.text 1*64+3, "clc"
>b146	c5 6f 72 61 2e 79			oc19:	.text 3*64+5, "ora.y"
>b14c	45 69 6e 63 2e 61			oc1a:	.text 1*64+5, "inc.a"
>b152	c3 74 72 62				oc1c:	.text 3*64+3, "trb"
>b156	c5 6f 72 61 2e 78			oc1d:	.text 3*64+5, "ora.x"
>b15c	c5 61 73 6c 2e 78			oc1f:	.text 3*64+5, "asl.x"
>b162	c3 6a 73 72				oc20:	.text 3*64+3, "jsr"
>b166	87 61 6e 64 2e 7a 78 69			oc21:	.text 2*64+7, "and.zxi"
>b16e	85 62 69 74 2e 7a			oc24:	.text 2*64+5, "bit.z"
>b174	85 61 6e 64 2e 7a			oc25:	.text 2*64+5, "and.z"
>b17a	85 72 6f 6c 2e 7a			oc26:	.text 2*64+5, "rol.z"
>b180	86 72 6d 62 32 2e 7a			oc27:	.text 2*64+6, "rmb2.z"
>b187	43 70 6c 70				oc28:	.text 1*64+3, "plp"
>b18b	85 61 6e 64 2e 23			oc29:	.text 2*64+5, "and.#"
>b191	45 72 6f 6c 2e 61			oc2a:	.text 1*64+5, "rol.a"
>b197	c3 62 69 74				oc2c:	.text 3*64+3, "bit"
>b19b	c4 61 6e 64 2e				oc2d:	.text 3*64+4, "and."
>b1a0	c3 72 6f 6c				oc2e:	.text 3*64+3, "rol"
>b1a4	c4 62 62 72 32				oc2f:	.text 3*64+4, "bbr2"
>b1a9	83 62 6d 69				oc30:	.text 2*64+3, "bmi"
>b1ad	87 61 6e 64 2e 7a 69 79			oc31:	.text 2*64+7, "and.ziy"
>b1b5	86 61 6e 64 2e 7a 69			oc32:	.text 2*64+6, "and.zi"
>b1bc	87 62 69 74 2e 7a 78 69			oc34:	.text 2*64+7, "bit.zxi"
>b1c4	86 61 6e 64 2e 7a 78			oc35:	.text 2*64+6, "and.zx"
>b1cb	86 72 6f 6c 2e 7a 78			oc36:	.text 2*64+6, "rol.zx"
>b1d2	86 72 6d 62 33 2e 7a			oc37:	.text 2*64+6, "rmb3.z"
>b1d9	43 73 65 63				oc38:	.text 1*64+3, "sec"
>b1dd	c5 61 6e 64 2e 79			oc39:	.text 3*64+5, "and.y"
>b1e3	45 64 65 63 2e 61			oc3a:	.text 1*64+5, "dec.a"
>b1e9	c5 62 69 74 2e 78			oc3c:	.text 3*64+5, "bit.x"
>b1ef	c5 61 6e 64 2e 78			oc3d:	.text 3*64+5, "and.x"
>b1f5	c5 72 6f 6c 2e 78			oc3e:	.text 3*64+5, "rol.x"
>b1fb	c4 62 62 72 33				oc3f:	.text 3*64+4, "bbr3"
>b200	43 72 74 69				oc40:	.text 1*64+3, "rti"
>b204	87 65 6f 72 2e 7a 78 69			oc41:	.text 2*64+7, "eor.zxi"
>b20c	85 65 6f 72 2e 7a			oc45:	.text 2*64+5, "eor.z"
>b212	85 6c 73 72 2e 7a			oc46:	.text 2*64+5, "lsr.z"
>b218	86 72 62 6d 34 2e 7a			oc47:	.text 2*64+6, "rbm4.z"
>b21f	43 70 68 61				oc48:	.text 1*64+3, "pha"
>b223	85 65 6f 72 2e 23			oc49:	.text 2*64+5, "eor.#"
>b229	45 6c 73 72 2e 61			oc4a:	.text 1*64+5, "lsr.a"
>b22f	c3 6a 6d 70				oc4c:	.text 3*64+3, "jmp"
>b233	c3 65 6f 72				oc4d:	.text 3*64+3, "eor"
>b237	c3 6c 73 72				oc4e:	.text 3*64+3, "lsr"
>b23b	c4 62 62 72 34				oc4f:	.text 3*64+4, "bbr4"
>b240	83 62 76 63				oc50:	.text 2*64+3, "bvc"
>b244	87 65 6f 72 2e 7a 69 79			oc51:	.text 2*64+7, "eor.ziy"
>b24c	86 65 6f 72 2e 7a 69			oc52:	.text 2*64+6, "eor.zi"
>b253	86 65 6f 72 2e 7a 78			oc55:	.text 2*64+6, "eor.zx"
>b25a	86 6c 73 72 2e 7a 78			oc56:	.text 2*64+6, "lsr.zx"
>b261	86 72 62 6d 35 2e 7a			oc57:	.text 2*64+6, "rbm5.z"
>b268	43 63 6c 69				oc58:	.text 1*64+3, "cli"
>b26c	c5 65 6f 72 2e 79			oc59:	.text 3*64+5, "eor.y"
>b272	43 70 68 79				oc5a:	.text 1*64+3, "phy"
>b276	c5 65 6f 72 2e 78			oc5d:	.text 3*64+5, "eor.x"
>b27c	c5 6c 73 72 2e 78			oc5e:	.text 3*64+5, "lsr.x"
>b282	c4 62 62 72 35				oc5f:	.text 3*64+4, "bbr5"
>b287	43 72 74 73				oc60:	.text 1*64+3, "rts"
>b28b	87 61 64 63 2e 7a 78 69			oc61:	.text 2*64+7, "adc.zxi"
>b293	85 73 74 7a 2e 7a			oc64:	.text 2*64+5, "stz.z"
>b299	85 61 64 63 2e 7a			oc65:	.text 2*64+5, "adc.z"
>b29f	85 72 6f 72 2e 7a			oc66:	.text 2*64+5, "ror.z"
>b2a5	86 72 6d 62 36 2e 7a			oc67:	.text 2*64+6, "rmb6.z"
>b2ac	43 70 6c 61				oc68:	.text 1*64+3, "pla"
>b2b0	85 61 64 63 2e 23			oc69:	.text 2*64+5, "adc.#"
>b2b6	45 72 6f 72 2e 61			oc6a:	.text 1*64+5, "ror.a"
>b2bc	c5 6a 6d 70 2e 69			oc6c:	.text 3*64+5, "jmp.i"
>b2c2	c3 61 64 63				oc6d:	.text 3*64+3, "adc"
>b2c6	c3 72 6f 72				oc6e:	.text 3*64+3, "ror"
>b2ca	c4 62 62 72 36				oc6f:	.text 3*64+4, "bbr6"
>b2cf	83 62 76 73				oc70:	.text 2*64+3, "bvs"
>b2d3	87 61 64 63 2e 7a 69 79			oc71:	.text 2*64+7, "adc.ziy"
>b2db	86 61 64 63 2e 7a 69			oc72:	.text 2*64+6, "adc.zi"
>b2e2	86 73 74 7a 2e 7a 78			oc74:	.text 2*64+6, "stz.zx"
>b2e9	86 61 64 63 2e 7a 78			oc75:	.text 2*64+6, "adc.zx"
>b2f0	86 72 6f 72 2e 7a 78			oc76:	.text 2*64+6, "ror.zx"
>b2f7	86 72 6d 62 37 2e 7a			oc77:	.text 2*64+6, "rmb7.z"
>b2fe	43 73 65 69				oc78:	.text 1*64+3, "sei"
>b302	c5 61 64 63 2e 79			oc79:	.text 3*64+5, "adc.y"
>b308	43 70 6c 79				oc7a:	.text 1*64+3, "ply"
>b30c	c6 6a 6d 70 2e 78 69			oc7c:	.text 3*64+6, "jmp.xi"
>b313	c5 61 64 63 2e 78			oc7d:	.text 3*64+5, "adc.x"
>b319	c5 72 6f 72 2e 78			oc7e:	.text 3*64+5, "ror.x"
>b31f	c4 62 62 72 37				oc7f:	.text 3*64+4, "bbr7"
>b324	83 62 72 61				oc80:	.text 2*64+3, "bra"
>b328	87 73 74 61 2e 7a 78 69			oc81:	.text 2*64+7, "sta.zxi"
>b330	85 73 74 79 2e 7a			oc84:	.text 2*64+5, "sty.z"
>b336	85 73 74 61 2e 7a			oc85:	.text 2*64+5, "sta.z"
>b33c	85 73 74 78 2e 7a			oc86:	.text 2*64+5, "stx.z"
>b342	43 64 65 79				oc88:	.text 1*64+3, "dey"
>b346	85 62 69 74 2e 23			oc89:	.text 2*64+5, "bit.#"
>b34c	43 74 78 61				oc8a:	.text 1*64+3, "txa"
>b350	c3 73 74 79				oc8c:	.text 3*64+3, "sty"
>b354	c3 73 74 61				oc8d:	.text 3*64+3, "sta"
>b358	c3 73 74 78				oc8e:	.text 3*64+3, "stx"
>b35c	c4 62 62 73 30				oc8f:	.text 3*64+4, "bbs0"
>b361	83 62 63 63				oc90:	.text 2*64+3, "bcc"
>b365	87 73 74 61 2e 7a 69 79			oc91:	.text 2*64+7, "sta.ziy"
>b36d	86 73 74 61 2e 7a 69			oc92:	.text 2*64+6, "sta.zi"
>b374	86 73 74 79 2e 7a 78			oc94:	.text 2*64+6, "sty.zx"
>b37b	86 73 74 61 2e 7a 78			oc95:	.text 2*64+6, "sta.zx"
>b382	86 73 74 78 2e 7a 79			oc96:	.text 2*64+6, "stx.zy"
>b389	86 73 6d 62 31 2e 7a			oc97:	.text 2*64+6, "smb1.z"
>b390	43 74 79 61				oc98:	.text 1*64+3, "tya"
>b394	c5 73 74 61 2e 79			oc99:	.text 3*64+5, "sta.y"
>b39a	43 74 78 73				oc9a:	.text 1*64+3, "txs"
>b39e	c3 73 74 7a				oc9c:	.text 3*64+3, "stz"
>b3a2	c5 73 74 61 2e 78			oc9d:	.text 3*64+5, "sta.x"
>b3a8	c5 73 74 7a 2e 78			oc9e:	.text 3*64+5, "stz.x"
>b3ae	c4 62 62 73 31				oc9f:	.text 3*64+4, "bbs1"
>b3b3	85 6c 64 79 2e 23			oca0:	.text 2*64+5, "ldy.#"
>b3b9	87 6c 64 61 2e 7a 78 69			oca1:	.text 2*64+7, "lda.zxi"
>b3c1	85 6c 64 78 2e 23			oca2:	.text 2*64+5, "ldx.#"
>b3c7	85 6c 64 79 2e 7a			oca4:	.text 2*64+5, "ldy.z"
>b3cd	85 6c 64 61 2e 7a			oca5:	.text 2*64+5, "lda.z"
>b3d3	85 6c 64 78 2e 7a			oca6:	.text 2*64+5, "ldx.z"
>b3d9	86 73 6d 62 32 2e 7a			oca7:	.text 2*64+6, "smb2.z"
>b3e0	43 74 61 79				oca8:	.text 1*64+3, "tay"
>b3e4	85 6c 64 61 2e 23			oca9:	.text 2*64+5, "lda.#"
>b3ea	43 74 61 78				ocaa:	.text 1*64+3, "tax"
>b3ee	c3 6c 64 79				ocac:	.text 3*64+3, "ldy"
>b3f2	c3 6c 64 61				ocad:	.text 3*64+3, "lda"
>b3f6	c3 6c 64 78				ocae:	.text 3*64+3, "ldx"
>b3fa	c4 62 62 73 32				ocaf:	.text 3*64+4, "bbs2"
>b3ff	83 62 63 73				ocb0:	.text 2*64+3, "bcs"
>b403	87 6c 64 61 2e 7a 69 79			ocb1:	.text 2*64+7, "lda.ziy"
>b40b	86 6c 64 61 2e 7a 69			ocb2:	.text 2*64+6, "lda.zi"
>b412	86 6c 64 79 2e 7a 78			ocb4:	.text 2*64+6, "ldy.zx"
>b419	86 6c 64 61 2e 7a 78			ocb5:	.text 2*64+6, "lda.zx"
>b420	86 6c 64 78 2e 7a 79			ocb6:	.text 2*64+6, "ldx.zy"
>b427	86 73 6d 62 33 2e 7a			ocb7:	.text 2*64+6, "smb3.z"
>b42e	43 63 6c 76				ocb8:	.text 1*64+3, "clv"
>b432	c5 6c 64 61 2e 79			ocb9:	.text 3*64+5, "lda.y"
>b438	43 74 73 78				ocba:	.text 1*64+3, "tsx"
>b43c	c5 6c 64 79 2e 78			ocbc:	.text 3*64+5, "ldy.x"
>b442	c5 6c 64 61 2e 78			ocbd:	.text 3*64+5, "lda.x"
>b448	c5 6c 64 78 2e 79			ocbe:	.text 3*64+5, "ldx.y"
>b44e	c4 62 62 73 34				ocbf:	.text 3*64+4, "bbs4"
>b453	85 63 70 79 2e 23			occ0:	.text 2*64+5, "cpy.#"
>b459	87 63 6d 70 2e 7a 78 69			occ1:	.text 2*64+7, "cmp.zxi"
>b461	85 63 70 79 2e 7a			occ4:	.text 2*64+5, "cpy.z"
>b467	85 63 6d 70 2e 7a			occ5:	.text 2*64+5, "cmp.z"
>b46d	85 64 65 63 2e 7a			occ6:	.text 2*64+5, "dec.z"
>b473	86 73 6d 62 34 2e 7a			occ7:	.text 2*64+6, "smb4.z"
>b47a	43 69 6e 79				occ8:	.text 1*64+3, "iny"
>b47e	85 63 6d 70 2e 23			occ9:	.text 2*64+5, "cmp.#"
>b484	43 64 65 78				occa:	.text 1*64+3, "dex"
>b488	c3 63 70 79				occc:	.text 3*64+3, "cpy"
>b48c	c3 63 6d 70				occd:	.text 3*64+3, "cmp"
>b490	c3 64 65 63				occe:	.text 3*64+3, "dec"
>b494	c4 62 62 73 34				occf:	.text 3*64+4, "bbs4"
>b499	83 62 6e 65				ocd0:	.text 2*64+3, "bne"
>b49d	87 63 6d 70 2e 7a 69 79			ocd1:	.text 2*64+7, "cmp.ziy"
>b4a5	86 63 6d 70 2e 7a 69			ocd2:	.text 2*64+6, "cmp.zi"
>b4ac	86 63 6d 70 2e 7a 78			ocd5:	.text 2*64+6, "cmp.zx"
>b4b3	86 64 65 63 2e 7a 78			ocd6:	.text 2*64+6, "dec.zx"
>b4ba	86 73 6d 62 35 2e 7a			ocd7:	.text 2*64+6, "smb5.z"
>b4c1	43 63 6c 64				ocd8:	.text 1*64+3, "cld"
>b4c5	c5 63 6d 70 2e 79			ocd9:	.text 3*64+5, "cmp.y"
>b4cb	43 70 68 78				ocda:	.text 1*64+3, "phx"
>b4cf	c5 63 6d 70 2e 78			ocdd:	.text 3*64+5, "cmp.x"
>b4d5	c5 64 65 63 2e 78			ocde:	.text 3*64+5, "dec.x"
>b4db	c4 62 62 73 35				ocdf:	.text 3*64+4, "bbs5"
>b4e0	85 63 70 78 2e 23			oce0:	.text 2*64+5, "cpx.#"
>b4e6	87 73 62 63 2e 7a 78 69			oce1:	.text 2*64+7, "sbc.zxi"
>b4ee	85 63 70 78 2e 7a			oce4:	.text 2*64+5, "cpx.z"
>b4f4	85 73 62 63 2e 7a			oce5:	.text 2*64+5, "sbc.z"
>b4fa	85 69 6e 63 2e 7a			oce6:	.text 2*64+5, "inc.z"
>b500	86 73 6d 62 36 2e 7a			oce7:	.text 2*64+6, "smb6.z"
>b507	43 69 6e 78				oce8:	.text 1*64+3, "inx"
>b50b	85 73 62 63 2e 23			oce9:	.text 2*64+5, "sbc.#"
>b511	43 6e 6f 70				ocea:	.text 1*64+3, "nop"
>b515	c3 63 70 78				ocec:	.text 3*64+3, "cpx"
>b519	c3 73 62 63				oced:	.text 3*64+3, "sbc"
>b51d	c3 69 6e 63				ocee:	.text 3*64+3, "inc"
>b521	c4 62 62 73 36				ocef:	.text 3*64+4, "bbs6"
>b526	83 62 65 71				ocf0:	.text 2*64+3, "beq"
>b52a	87 73 62 63 2e 7a 69 79			ocf1:	.text 2*64+7, "sbc.ziy"
>b532	86 73 62 63 2e 7a 69			ocf2:	.text 2*64+6, "sbc.zi"
>b539	86 73 62 63 2e 7a 78			ocf5:	.text 2*64+6, "sbc.zx"
>b540	86 69 6e 63 2e 7a 78			ocf6:	.text 2*64+6, "inc.zx"
>b547	86 73 6d 62 37 2e 7a			ocf7:	.text 2*64+6, "smb7.z"
>b54e	43 73 65 64				ocf8:	.text 1*64+3, "sed"
>b552	c5 73 62 63 2e 79			ocf9:	.text 3*64+5, "sbc.y"
>b558	43 70 6c 78				ocfa:	.text 1*64+3, "plx"
>b55c	c5 73 62 63 2e 78			ocfd:	.text 3*64+5, "sbc.x"
>b562	c5 69 6e 63 2e 78			ocfe:	.text 3*64+5, "inc.x"
>b568	c4 62 62 73 37				ocff:	.text 3*64+4, "bbs7"
>b56d	01 3f					oc__:	.text 1, "?"
.b56f					disassembler_end:

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../ed.asm

=46					ed_head  = editor1  ; pointer to first list element (addr) (2 bytes)
=48					ed_cur   = editor2  ; current line number (1 is first line) (2 bytes)
=50					ed_flags = editor3  ; Flags used by ed, where
.b56f					ed6502:
.b56f	a5 18		lda $18		                lda base
.b571	85 33		sta $33		                sta editor3+1
.b573	a9 0a		lda #$0a	                lda #10
.b575	85 18		sta $18		                sta base
.b577	64 2e		stz $2e		                stz ed_head
.b579	64 2f		stz $2f		                stz ed_head+1
.b57b	64 30		stz $30		                stz ed_cur
.b57d	64 31		stz $31		                stz ed_cur+1
.b57f	64 32		stz $32		                stz ed_flags
.b581	20 95 a7	jsr $a795	                jsr xt_zero
.b584	20 95 a7	jsr $a795	                jsr xt_zero             ; ( addr-t u-t )
.b587	20 7f 89	jsr $897f	                jsr xt_cr
.b58a					ed_input_loop:
.b58a	a9 81		lda #$81	                lda #%10000001
.b58c	14 32		trb $32		                trb ed_flags
.b58e	20 69 ba	jsr $ba69	                jsr ed_get_input
.b591	a5 0a		lda $0a		                lda ciblen
.b593	d0 1f		bne $b5b4	                bne _command_mode
.b595	ca		dex		                dex
.b596	ca		dex		                dex                     ; ( addr-t u-t ? )
.b597	a5 30		lda $30		                lda ed_cur
.b599	95 00		sta $00,x	                sta 0,x
.b59b	a5 31		lda $31		                lda ed_cur+1
.b59d	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t u )
.b59f	a9 80		lda #$80	                lda #%10000000
.b5a1	04 32		tsb $32		                tsb ed_flags
.b5a3	20 39 98	jsr $9839	                jsr xt_one_plus         ; ( addr-t u-t u+1 )
.b5a6	20 85 ba	jsr $ba85	                jsr ed_is_valid_line
.b5a9	b0 03		bcs $b5ae	                bcs +
.b5ab	4c 59 ba	jmp $ba59	                jmp ed_error_1drop
.b5ae					+
.b5ae	20 95 a7	jsr $a795	                jsr xt_zero             ; ( addr-t u-t u+1 0 )
.b5b1	4c 7f b6	jmp $b67f	                jmp _line_number_only_from_external
.b5b4					_command_mode:
.b5b4	20 95 a7	jsr $a795	                jsr xt_zero             ; parameter 1 is NOS ( addr-t u-t 0 )
.b5b7	20 95 a7	jsr $a795	                jsr xt_zero             ; parameter 2 is TOS ( addr-t u-t 0 0 )
.b5ba					_prefix_dot:
.b5ba	b2 08		lda ($08)	                lda (cib)
.b5bc	c9 2e		cmp #$2e	                cmp #$2e                ; ASCII '.'
.b5be	d0 3a		bne $b5fa	                bne _prefix_dollar
.b5c0	20 7a ba	jsr $ba7a	                jsr ed_have_text
.b5c3	a5 30		lda $30		                lda ed_cur
.b5c5	95 02		sta $02,x	                sta 2,x
.b5c7	a5 31		lda $31		                lda ed_cur+1
.b5c9	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b5cb	a9 80		lda #$80	                lda #%10000000
.b5cd	04 32		tsb $32		                tsb ed_flags
.b5cf	a5 0a		lda $0a		                lda ciblen
.b5d1	3a		dec a		                dea                     ; sets Z if A was 1
.b5d2	d0 03		bne $b5d7	                bne +
.b5d4	4c 7f b6	jmp $b67f	                jmp _line_number_only_from_external
.b5d7					+
.b5d7	ca		dex		                dex
.b5d8	ca		dex		                dex
.b5d9	ca		dex		                dex
.b5da	ca		dex		                dex
.b5db	a5 08		lda $08		                lda cib
.b5dd	95 02		sta $02,x	                sta 2,x
.b5df	a5 09		lda $09		                lda cib+1
.b5e1	95 03		sta $03,x	                sta 3,x
.b5e3	a5 0a		lda $0a		                lda ciblen
.b5e5	95 00		sta $00,x	                sta 0,x
.b5e7	a5 0b		lda $0b		                lda ciblen+1
.b5e9	95 01		sta $01,x	                sta 1,x
.b5eb	20 2d 98	jsr $982d	                jsr xt_one_minus        ; ( addr-t u-t para1 0 addr u-1 )
.b5ee	20 9b a1	jsr $a19b	                jsr xt_swap             ; ( addr-t u-t para1 0 u-1 addr )
.b5f1	20 39 98	jsr $9839	                jsr xt_one_plus         ; ( addr-t u-t para1 0 u-1 addr+1 )
.b5f4	20 9b a1	jsr $a19b	                jsr xt_swap             ; ( addr-t u-t para1 0 addr+1 u-1 )
.b5f7	4c d7 b6	jmp $b6d7	                jmp _check_for_para2
.b5fa					_prefix_dollar:
.b5fa	b2 08		lda ($08)	                lda (cib)
.b5fc	c9 24		cmp #$24	                cmp #'$'
.b5fe	d0 1c		bne $b61c	                bne _prefix_percent
.b600	20 7a ba	jsr $ba7a	                jsr ed_have_text
.b603	e8		inx		                inx
.b604	e8		inx		                inx                     ; ( addr-t u-t 0 )
.b605	20 a7 ba	jsr $baa7	                jsr ed_last_line          ; ( addr-t u-t 0 para1 )
.b608	20 9b a1	jsr $a19b	                jsr xt_swap             ; SWAP ( addr-t u-t para1 0 )
.b60b	a9 80		lda #$80	                lda #%10000000
.b60d	04 32		tsb $32		                tsb ed_flags
.b60f	a5 0a		lda $0a		                lda ciblen
.b611	3a		dec a		                dea                     ; sets Z if A was 1
.b612	d0 03		bne $b617	                bne +
.b614	4c 7f b6	jmp $b67f	                jmp _line_number_only_from_external
.b617					+
.b617	a0 01		ldy #$01	                ldy #01
.b619	4c 53 b7	jmp $b753	                jmp _check_command
.b61c					_prefix_percent:
.b61c	b2 08		lda ($08)	                lda (cib)
.b61e	c9 25		cmp #$25	                cmp #$25                ; ASCII '%'
.b620	f0 04		beq $b626	                beq _whole_text
.b622	c9 2c		cmp #$2c	                cmp #$2c                ; ASCII ','
.b624	d0 17		bne $b63d	                bne _prefix_semicolon
.b626					_whole_text:
.b626	20 7a ba	jsr $ba7a	                jsr ed_have_text
.b629	a9 01		lda #$01	                lda #01
.b62b	95 02		sta $02,x	                sta 2,x                 ; LSB of NOS is para 1
.b62d	74 03		stz $03,x	                stz 3,x                 ; ( addr-t u-t para1 0 )
.b62f					_semicolon_entry:
.b62f	e8		inx		                inx
.b630	e8		inx		                inx                     ; DROP ( addr-t u-t para1 )
.b631	20 a7 ba	jsr $baa7	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b634	a9 80		lda #$80	                lda #%10000000
.b636	04 32		tsb $32		                tsb ed_flags
.b638	a0 01		ldy #$01	                ldy #01
.b63a	4c 53 b7	jmp $b753	                jmp _check_command
.b63d					_prefix_semicolon:
.b63d	b2 08		lda ($08)	                lda (cib)
.b63f	c9 3b		cmp #$3b	                cmp #$3b                ; ASCII ';'
.b641	d0 0d		bne $b650	                bne _prefix_number
.b643	20 7a ba	jsr $ba7a	                jsr ed_have_text
.b646	a5 30		lda $30		                lda ed_cur
.b648	95 02		sta $02,x	                sta 2,x
.b64a	a5 31		lda $31		                lda ed_cur+1
.b64c	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t cur 0 )
.b64e	80 df		bra $b62f	                bra _semicolon_entry
.b650					_prefix_number:
.b650	20 95 a7	jsr $a795	                jsr xt_zero
.b653	20 95 a7	jsr $a795	                jsr xt_zero             ; ( addr-t u-t 0 0 0 0 )
.b656	ca		dex		                dex
.b657	ca		dex		                dex
.b658	ca		dex		                dex
.b659	ca		dex		                dex                     ; ( addr-t u-t 0 0 0 0 ? ? )
.b65a	a5 08		lda $08		                lda cib
.b65c	95 02		sta $02,x	                sta 2,x
.b65e	a5 09		lda $09		                lda cib+1
.b660	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t 0 0 0 0 cib ? )
.b662	a5 0a		lda $0a		                lda ciblen
.b664	95 00		sta $00,x	                sta 0,x
.b666	a5 0b		lda $0b		                lda ciblen+1
.b668	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 0 0 cib ciblen )
.b66a	20 aa a2	jsr $a2aa	                jsr xt_to_number        ; ( addr-t u-t 0 0 ud addr2 u2 )
.b66d	b5 00		lda $00,x	                lda 0,x
.b66f	15 01		ora $01,x	                ora 1,x
.b671	d0 24		bne $b697	                bne _have_unconverted_chars
.b673	e8		inx		                inx
.b674	e8		inx		                inx
.b675	e8		inx		                inx
.b676	e8		inx		                inx                     ; 2DROP ( addr-t u-t 0 0 ud )
.b677	20 9c 8a	jsr $8a9c	                jsr xt_d_to_s           ; D>S ( addr-t u-t 0 0 u )
.b67a	20 8a 96	jsr $968a	                jsr xt_not_rote         ; -ROT ( addr-t u-t u 0 0 )
.b67d	e8		inx		                inx
.b67e	e8		inx		                inx                     ; ( addr-t u-t u 0 ) drop through
.b67f					_line_number_only_from_external:
.b67f	20 9b a1	jsr $a19b	                jsr xt_swap             ; ( addr-t u-t 0 u )
.b682	20 85 ba	jsr $ba85	                jsr ed_is_valid_line
.b685	b0 03		bcs $b68a	                bcs +
.b687	4c 57 ba	jmp $ba57	                jmp ed_error_2drop
.b68a					+
.b68a	20 9b a1	jsr $a19b	                jsr xt_swap             ; ( addr-t u-t u 0 )
.b68d	20 14 bb	jsr $bb14	                jsr ed_para1_to_cur
.b690	a9 80		lda #$80	                lda #%10000000
.b692	04 32		tsb $32		                tsb ed_flags
.b694	4c 32 b9	jmp $b932	                jmp ed_cmd_p_from_external
.b697					_have_unconverted_chars:
.b697	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; ( addr-t u-t 0 0 ud addr2 u2 u2 )
.b69a	ca		dex		                dex
.b69b	ca		dex		                dex                     ; ( addr-t u-t 0 0 ud addr2 u2 u2 ? )
.b69c	a5 0a		lda $0a		                lda ciblen
.b69e	95 00		sta $00,x	                sta 0,x
.b6a0	a5 0b		lda $0b		                lda ciblen+1
.b6a2	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t 0 0 ud addr2 u2 u2 ciblen )
.b6a4	20 ea 8e	jsr $8eea	                jsr xt_equal            ; ( addr-t u-t 0 0 ud addr2 u2 f )
.b6a7	b5 00		lda $00,x	                lda 0,x
.b6a9	15 01		ora $01,x	                ora 1,x
.b6ab	f0 0e		beq $b6bb	                beq _no_command_yet
.b6ad	8a		txa		                txa
.b6ae	18		clc		                clc
.b6af	69 0a		adc #$0a	                adc #10
.b6b1	aa		tax		                tax                     ; ( addr-t u-t 0 0 )
.b6b2	a9 80		lda #$80	                lda #%10000000
.b6b4	14 32		trb $32		                trb ed_flags
.b6b6	a0 00		ldy #$00	                ldy #00
.b6b8	4c 53 b7	jmp $b753	                jmp _check_command
.b6bb					_no_command_yet:
.b6bb	e8		inx		                inx
.b6bc	e8		inx		                inx                     ; ( ... 0 0 ud addr2 u2 )
.b6bd	20 5d a3	jsr $a35d	                jsr xt_to_r             ; >R ( ... 0 0 ud addr2 ) (R: u2)
.b6c0	20 8a 96	jsr $968a	                jsr xt_not_rote         ; -ROT ( ... 0 0 addr2 ud ) (R: u2)
.b6c3	20 9c 8a	jsr $8a9c	                jsr xt_d_to_s           ; D>S  ( ... 0 0 addr2 para1 ) (R: u2)
.b6c6	b5 00		lda $00,x	                lda 0,x                 ; LSB
.b6c8	95 06		sta $06,x	                sta 6,x
.b6ca	b5 01		lda $01,x	                lda 1,x                 ; MSB
.b6cc	95 07		sta $07,x	                sta 7,x                 ; ( ... para1 0 addr2 para1 ) (R: u2)
.b6ce	e8		inx		                inx
.b6cf	e8		inx		                inx                     ; ( addr-t u-t para1 0 addr2 ) (R: u2)
.b6d0	20 ae 9a	jsr $9aae	                jsr xt_r_from           ; R> ( addr-t u-t para1 0 addr2 u2 ) fall through
.b6d3	a9 80		lda #$80	                lda #%10000000
.b6d5	04 32		tsb $32		                tsb ed_flags
.b6d7					_check_for_para2:
.b6d7	a1 02		lda ($02,x)	                lda (2,x)
.b6d9	c9 2c		cmp #$2c	                cmp #$2c                ; ASCII code for ',' (comma)
.b6db	f0 0d		beq $b6ea	                beq _got_comma
.b6dd	38		sec		                sec
.b6de	a5 0a		lda $0a		                lda ciblen
.b6e0	f5 00		sbc $00,x	                sbc 0,x
.b6e2	a8		tay		                tay
.b6e3	e8		inx		                inx
.b6e4	e8		inx		                inx
.b6e5	e8		inx		                inx
.b6e6	e8		inx		                inx                     ; 2DROP ( addr-t u-t para1 0 )
.b6e7	4c 53 b7	jmp $b753	                jmp _check_command
.b6ea					_got_comma:
.b6ea	f6 02		inc $02,x	                inc 2,x
.b6ec	d0 02		bne $b6f0	                bne +
.b6ee	f6 03		inc $03,x	                inc 3,x                 ; ( addr-t u-t para1 0 addr2+1 u2 )
.b6f0					+
.b6f0	b5 01		lda $01,x	                lda 1,x
.b6f2	f0 02		beq $b6f6	                beq +
.b6f4	d6 01		dec $01,x	                dec 1,x
.b6f6					+
.b6f6	d6 00		dec $00,x	                dec 0,x                 ; ( addr-t u-t para1 0 addr2+1 u2-1 )
.b6f8	a1 02		lda ($02,x)	                lda (2,x)
.b6fa	c9 24		cmp #$24	                cmp #$24                ; ASCII for '$'
.b6fc	d0 14		bne $b712	                bne _para2_not_dollar
.b6fe	38		sec		                sec
.b6ff	a5 0a		lda $0a		                lda ciblen
.b701	f5 02		sbc $02,x	                sbc 2,x
.b703	a8		tay		                tay
.b704	c8		iny		                iny
.b705	5a		phy		                phy
.b706	8a		txa		                txa
.b707	18		clc		                clc
.b708	69 06		adc #$06	                adc #06
.b70a	aa		tax		                tax                     ; ( addr-t u-t para1 )
.b70b	20 a7 ba	jsr $baa7	                jsr ed_last_line          ; ( addr-t u-t para1 para2 )
.b70e	7a		ply		                ply
.b70f	4c 53 b7	jmp $b753	                jmp _check_command
.b712					_para2_not_dollar:
.b712	20 5d a3	jsr $a35d	                jsr xt_to_r             ; >R ( ... para1 0 addr2+1 ) (R: u2-1)
.b715	20 95 a7	jsr $a795	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 ) (R: u2-1)
.b718	20 95 a7	jsr $a795	                jsr xt_zero             ; 0 ( ... para1 0 addr2+1 0 0 ) (R: u2-1)
.b71b	20 73 9b	jsr $9b73	                jsr xt_rot              ; ROT ( ... para1 0 0 0 addr2+1 ) (R: u2-1)
.b71e	20 ae 9a	jsr $9aae	                jsr xt_r_from           ; R> ( ... para1 0 0 0 addr2+1 u2-1)
.b721	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; DUP ( ... para1 0 0 0 addr2+1 u2-1 u2-1)
.b724	20 5d a3	jsr $a35d	                jsr xt_to_r             ; >R ( ... para1 0 0 0 addr2+1 u2-1 ) (R: u2-1)
.b727	20 aa a2	jsr $a2aa	                jsr xt_to_number        ; >NUMBER ( ... para1 0 ud addr3 u3 ) (R: u2-1)
.b72a	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; DUP ( ... para1 0 ud addr3 u3 u3 ) (R: u2-1)
.b72d	20 ae 9a	jsr $9aae	                jsr xt_r_from           ; R> ( ... para1 0 ud addr3 u3 u3 u2-1 )
.b730	20 ea 8e	jsr $8eea	                jsr xt_equal            ; = ( ... para1 0 ud addr3 u3 f )
.b733	b5 00		lda $00,x	                lda 0,x
.b735	15 01		ora $01,x	                ora 1,x
.b737	f0 08		beq $b741	                beq _second_number
.b739	8a		txa		                txa
.b73a	18		clc		                clc
.b73b	69 0c		adc #$0c	                adc #12
.b73d	aa		tax		                tax                     ; back to ( addr-t u-t )
.b73e	4c 5b ba	jmp $ba5b	                jmp ed_error
.b741					_second_number:
.b741	e8		inx		                inx
.b742	e8		inx		                inx                     ; ( addr-t u-t para1 0 ud addr3 u3 )
.b743	38		sec		                sec
.b744	a5 0a		lda $0a		                lda ciblen
.b746	f5 00		sbc $00,x	                sbc 0,x
.b748	48		pha		                pha
.b749	20 9d a3	jsr $a39d	                jsr xt_two_drop         ; 2DROP ( addr-t u-t para1 0 ud )
.b74c	20 9c 8a	jsr $8a9c	                jsr xt_d_to_s           ; D>S  ( addr-t u-t para1 0 para2 )
.b74f	20 5e 96	jsr $965e	                jsr xt_nip              ; NIP ( addr-t u-t para1 para2 )
.b752	7a		ply		                ply
.b753					_check_command:
.b753	24 32		bit $32		                bit ed_flags
.b755	30 08		bmi $b75f	                bmi _check_command_have_arg
.b757	a5 30		lda $30		                lda ed_cur
.b759	95 02		sta $02,x	                sta 2,x
.b75b	a5 31		lda $31		                lda ed_cur+1
.b75d	95 03		sta $03,x	                sta 3,x
.b75f					_check_command_have_arg:
.b75f	b1 08		lda ($08),y	                lda (cib),y             ; get mystery char from input
.b761	85 24		sta $24		                sta tmp1
.b763	da		phx		                phx
.b764	a2 00		ldx #$00	                ldx #00
.b766					_cmd_loop:
.b766	bd 3f bb	lda $bb3f,x	                lda ed_cmd_list,x
.b769	f0 07		beq $b772	                beq _illegal_command    ; zero marks end of list
.b76b	c5 24		cmp $24		                cmp tmp1
.b76d	f0 07		beq $b776	                beq _found_cmd
.b76f	e8		inx		                inx
.b770	80 f4		bra $b766	                bra _cmd_loop
.b772					_illegal_command:
.b772	fa		plx		                plx
.b773	4c 57 ba	jmp $ba57	                jmp ed_error_2drop
.b776					_found_cmd:
.b776	8a		txa		                txa
.b777	0a		asl a		                asl
.b778	aa		tax		                tax                     ; X * 2 for table
.b779	7c 4a bb	jmp ($bb4a,x)	                jmp (ed_cmd_table,x)
.b77c					ed_next_command:
.b77c	e8		inx		                inx
.b77d	e8		inx		                inx
.b77e	e8		inx		                inx
.b77f	e8		inx		                inx                     ; ( addr-t u-t ) Fall through
.b780					_next_command_empty:
.b780	4c 8a b5	jmp $b58a	                jmp ed_input_loop
.b783					ed_all_done:
.b783	64 0a		stz $0a		                stz ciblen
.b785	64 0b		stz $0b		                stz ciblen+1
.b787	20 9d a3	jsr $a39d	                jsr xt_two_drop                 ; 2DROP ( addr-t u-t )
.b78a	a5 33		lda $33		                lda editor3+1
.b78c	85 18		sta $18		                sta base
.b78e	60		rts		                rts
.b78f					ed_cmd_a:
.b78f	fa		plx		                plx
.b790	e8		inx		                inx
.b791	e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b792					ed_entry_cmd_i:
.b792					ed_cmd_a_have_para:
.b792	20 dd ba	jsr $badd	                jsr ed_num_to_addr        ;  ( addr-t u-t addr1 )
.b795	20 7f 89	jsr $897f	                jsr xt_cr
.b798					_next_string_loop:
.b798	20 69 ba	jsr $ba69	                jsr ed_get_input
.b79b	b2 08		lda ($08)	                lda (cib)
.b79d	c9 2e		cmp #$2e	                cmp #$2e                ; ASCII for '.'
.b79f	d0 16		bne $b7b7	                bne _add_line
.b7a1	a4 0a		ldy $0a		                ldy ciblen
.b7a3	c0 01		cpy #$01	                cpy #01
.b7a5	d0 10		bne $b7b7	                bne _add_line
.b7a7	a4 0b		ldy $0b		                ldy ciblen+1
.b7a9	d0 0c		bne $b7b7	                bne _add_line
.b7ab	e8		inx		                inx
.b7ac	e8		inx		                inx
.b7ad	a9 40		lda #$40	                lda #%01000000
.b7af	04 32		tsb $32		                tsb ed_flags
.b7b1	20 7f 89	jsr $897f	                jsr xt_cr
.b7b4	4c 8a b5	jmp $b58a	                jmp ed_input_loop
.b7b7					_add_line:
.b7b7	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; DUP ( addr-t u-t addr1 addr1 )
.b7ba	20 8e 91	jsr $918e	                jsr xt_here             ; HERE ( addr-t u-t addr1 addr1 here )
.b7bd	20 9b a1	jsr $a19b	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 here addr1 )
.b7c0	20 9c 8f	jsr $8f9c	                jsr xt_fetch            ; @  ( addr-t u-t addr1 here addr2 )
.b7c3	20 8a 87	jsr $878a	                jsr xt_comma            ; ,  ( addr-t u-t addr1 here )
.b7c6	20 7a a3	jsr $a37a	                jsr xt_tuck             ; TUCK ( addr-t u-t here addr1 here )
.b7c9	20 9b a1	jsr $a19b	                jsr xt_swap             ; SWAP ( addr-t u-t here here addr1 )
.b7cc	20 7a a1	jsr $a17a	                jsr xt_store            ; ! ( addr-t u-t here )
.b7cf	20 8e 91	jsr $918e	                jsr xt_here             ; HERE ( addr-t u-t here here2)
.b7d2	a5 00		lda $00		                lda cp
.b7d4	18		clc		                clc
.b7d5	69 04		adc #$04	                adc #04
.b7d7	85 00		sta $00		                sta cp
.b7d9	90 02		bcc $b7dd	                bcc +
.b7db	e6 01		inc $01		                inc cp+1
.b7dd					+
.b7dd	e6 30		inc $30		                inc ed_cur
.b7df	d0 02		bne $b7e3	                bne +
.b7e1	e6 31		inc $31		                inc ed_cur+1
.b7e3					+
.b7e3	20 8e 91	jsr $918e	                jsr xt_here     ; HERE ( addr-t u-t here here2 here3 )
.b7e6	20 cb 8d	jsr $8dcb	                jsr xt_dup      ; DUP ( addr-t u-t here here2 here3 here3 )
.b7e9	ca		dex		                dex
.b7ea	ca		dex		                dex             ; ( addr-t u-t here here2 here3 here3 ? )
.b7eb	a5 08		lda $08		                lda cib
.b7ed	95 00		sta $00,x	                sta 0,x
.b7ef	a5 09		lda $09		                lda cib+1
.b7f1	95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 here3 cib )
.b7f3	20 9b a1	jsr $a19b	                jsr xt_swap     ; SWAP ( addr-t u-t here here2 here3 cib here3 )
.b7f6	ca		dex		                dex
.b7f7	ca		dex		                dex             ; ( addr-t u-t here here2 here3 cib here3 ? )
.b7f8	a5 0a		lda $0a		                lda ciblen
.b7fa	95 00		sta $00,x	                sta 0,x
.b7fc	a5 0b		lda $0b		                lda ciblen+1
.b7fe	95 01		sta $01,x	                sta 1,x         ; ( addr-t u-t here here2 here3 cib here3 ciblen )
.b800	20 de 95	jsr $95de	                jsr xt_move     ; ( addr-t u-t here here2 here3 )
.b803	18		clc		                clc
.b804	a5 00		lda $00		                lda cp
.b806	65 0a		adc $0a		                adc ciblen
.b808	85 00		sta $00		                sta cp
.b80a	90 06		bcc $b812	                bcc +
.b80c	a5 01		lda $01		                lda cp+1
.b80e	65 0b		adc $0b		                adc ciblen+1
.b810	85 01		sta $01		                sta cp+1
.b812					+
.b812	20 af 98	jsr $98af	                jsr xt_over             ; OVER ( addr-t u-t here here2 here3 here2 )
.b815	20 7a a1	jsr $a17a	                jsr xt_store            ; ! ( addr-t u-t here here2 )
.b818	20 39 98	jsr $9839	                jsr xt_one_plus         ; 1+
.b81b	20 39 98	jsr $9839	                jsr xt_one_plus         ; 1+ ( addr-t u-t here here2+2 )
.b81e	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; DUP ( addr-t u-t here here2+2 here2+2 )
.b821	a5 0a		lda $0a		                lda ciblen
.b823	95 02		sta $02,x	                sta 2,x
.b825	a5 0b		lda $0b		                lda ciblen+1
.b827	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t here ciblen here2+2 )
.b829	20 7a a1	jsr $a17a	                jsr xt_store            ; ! ( addr-t u-t here )
.b82c	20 7f 89	jsr $897f	                jsr xt_cr
.b82f	4c 98 b7	jmp $b798	                jmp _next_string_loop
.b832					ed_cmd_d:
.b832	fa		plx		                plx
.b833	20 7a ba	jsr $ba7a	                jsr ed_have_text
.b836	20 cf ba	jsr $bacf	                jsr ed_no_line_zero
.b839	b5 00		lda $00,x	                lda 0,x
.b83b	15 01		ora $01,x	                ora 1,x
.b83d	d0 08		bne $b847	                bne +
.b83f	20 af 98	jsr $98af	                jsr xt_over             ; ( addr-t u-t para1 0 para1 )
.b842	20 84 b8	jsr $b884	                jsr _cmd_d_common       ; ( addr-t u-t para1 0 )
.b845	80 33		bra $b87a	                bra _cmd_d_done
.b847					+
.b847	20 85 ba	jsr $ba85	                jsr ed_is_valid_line      ; result is in C flag
.b84a	b0 03		bcs $b84f	                bcs _cmd_d_loop
.b84c	4c 57 ba	jmp $ba57	                jmp ed_error_2drop
.b84f					_cmd_d_loop:
.b84f	20 a5 a3	jsr $a3a5	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b852	20 79 91	jsr $9179	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b855	b5 00		lda $00,x	                lda 0,x
.b857	15 01		ora $01,x	                ora 1,x
.b859	d0 0d		bne $b868	                bne _cmd_d_done_with_flag
.b85b	e8		inx		                inx
.b85c	e8		inx		                inx                     ; Get rid of the flag from >
.b85d	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; DUP ( addr-t u-t para1 para2 para2 )
.b860	20 84 b8	jsr $b884	                jsr _cmd_d_common       ; ( addr-t u-t para1 para2 )
.b863	20 2d 98	jsr $982d	                jsr xt_one_minus        ; 1- ( addr-t u-t para1 para2-1 )
.b866	80 e7		bra $b84f	                bra _cmd_d_loop
.b868					_cmd_d_done_with_flag:
.b868	e8		inx		                inx                     ; ( addr-t u-t para1 para2 )
.b869	e8		inx		                inx
.b86a	b5 02		lda $02,x	                lda 2,x
.b86c	d0 02		bne $b870	                bne +
.b86e	d6 03		dec $03,x	                dec 3,x
.b870					+
.b870	d6 02		dec $02,x	                dec 2,x
.b872	b5 02		lda $02,x	                lda 2,x
.b874	85 30		sta $30		                sta ed_cur
.b876	b5 03		lda $03,x	                lda 3,x
.b878	85 31		sta $31		                sta ed_cur+1            ; drop through to _cmd_d_done
.b87a					_cmd_d_done:
.b87a	a9 40		lda #$40	                lda #%01000000
.b87c	04 32		tsb $32		                tsb ed_flags
.b87e	20 7f 89	jsr $897f	                jsr xt_cr
.b881	4c 7c b7	jmp $b77c	                jmp ed_next_command
.b884					_cmd_d_common:
.b884	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; DUP ( addr-t u-t u u )
.b887	20 dd ba	jsr $badd	                jsr ed_num_to_addr        ; ( addr-t u-t u addr )
.b88a	20 9c 8f	jsr $8f9c	                jsr xt_fetch            ; @ ( addr-t u-t u addr1 )
.b88d	20 9b a1	jsr $a19b	                jsr xt_swap             ; SWAP ( addr-t u-t addr1 u )
.b890	20 2d 98	jsr $982d	                jsr xt_one_minus        ; 1- ( addr-t u-t addr1 u-1 )
.b893	20 dd ba	jsr $badd	                jsr ed_num_to_addr        ; ( addr-t u-t addr1 addr-1 )
.b896	20 7a a1	jsr $a17a	                jsr xt_store            ; ! ( addr-t u-t )
.b899	60		rts		                rts
.b89a					ed_cmd_equ:
.b89a	fa		plx		                plx
.b89b	a5 2e		lda $2e		                lda ed_head
.b89d	05 2f		ora $2f		                ora ed_head+1
.b89f	d0 08		bne $b8a9	                bne _cmd_equ_have_text
.b8a1	ca		dex		                dex
.b8a2	ca		dex		                dex
.b8a3	74 00		stz $00,x	                stz 0,x
.b8a5	74 01		stz $01,x	                stz 1,x                 ; ( addr-t u-t para1 para2 0 )
.b8a7	80 21		bra $b8ca	                bra _cmd_equ_done
.b8a9					_cmd_equ_have_text:
.b8a9	20 cf ba	jsr $bacf	                jsr ed_no_line_zero
.b8ac	24 32		bit $32		                bit ed_flags
.b8ae	30 0c		bmi $b8bc	                bmi _cmd_equ_have_para
.b8b0	ca		dex		                dex
.b8b1	ca		dex		                dex                     ; ( addr-t u-t para1 para2 ? )
.b8b2	a5 30		lda $30		                lda ed_cur
.b8b4	95 00		sta $00,x	                sta 0,x
.b8b6	a5 31		lda $31		                lda ed_cur+1
.b8b8	95 01		sta $01,x	                sta 1,x
.b8ba	80 0e		bra $b8ca	                bra _cmd_equ_done       ; ( addr-t u-t para1 para2 cur )
.b8bc					_cmd_equ_have_para:
.b8bc	b5 00		lda $00,x	                lda 0,x
.b8be	15 01		ora $01,x	                ora 1,x
.b8c0	d0 05		bne $b8c7	                bne _cmd_equ_two_paras
.b8c2	20 af 98	jsr $98af	                jsr xt_over             ; ( addr-t u-t para1 para2 para1)
.b8c5	80 03		bra $b8ca	                bra _cmd_equ_done
.b8c7					_cmd_equ_two_paras:
.b8c7	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; ( addr-t u-t para1 para2 para2) drop through
.b8ca					_cmd_equ_done:
.b8ca	20 7f 89	jsr $897f	                jsr xt_cr               ; number goes on new line
.b8cd	20 1b a5	jsr $a51b	                jsr xt_u_dot            ; ( addr-t u-t para1 para2 )
.b8d0	20 7f 89	jsr $897f	                jsr xt_cr
.b8d3	4c 7c b7	jmp $b77c	                jmp ed_next_command
.b8d6					ed_cmd_f:
.b8d6	fa		plx		                plx
.b8d7	24 32		bit $32		                bit ed_flags
.b8d9	30 17		bmi $b8f2	                bmi _cmd_f_have_para
.b8db	20 7f 89	jsr $897f	                jsr xt_cr
.b8de	20 5d a3	jsr $a35d	                jsr xt_to_r             ; >R   ( addr-t u-t 0 ) ( R: 0 )
.b8e1	20 73 9b	jsr $9b73	                jsr xt_rot              ; ROT  ( u-t 0 addr-t ) ( R: 0 )
.b8e4	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; DUP  ( u-t 0 addr-t addr-t ) ( R: 0 )
.b8e7	20 1b a5	jsr $a51b	                jsr xt_u_dot            ; U.   ( u-t 0 addr-t ) ( R: 0 )
.b8ea	20 8a 96	jsr $968a	                jsr xt_not_rote         ; -ROT ( addr-t u-t 0 ) ( R: 0 )
.b8ed	20 ae 9a	jsr $9aae	                jsr xt_r_from           ; R>   ( addr-t u-t 0 0 )
.b8f0	80 11		bra $b903	                bra _cmd_f_done
.b8f2					_cmd_f_have_para:
.b8f2	20 af 98	jsr $98af	                jsr xt_over
.b8f5	20 7f 89	jsr $897f	                jsr xt_cr
.b8f8	20 1b a5	jsr $a51b	                jsr xt_u_dot
.b8fb	b5 02		lda $02,x	                lda 2,x
.b8fd	95 06		sta $06,x	                sta 6,x
.b8ff	b5 03		lda $03,x	                lda 3,x
.b901	95 07		sta $07,x	                sta 7,x                 ; fall through to _cmd_f_done
.b903					_cmd_f_done:
.b903	20 7f 89	jsr $897f	                jsr xt_cr
.b906	4c 7c b7	jmp $b77c	                jmp ed_next_command
.b909					ed_cmd_i:
.b909	fa		plx		                plx
.b90a	e8		inx		                inx
.b90b	e8		inx		                inx                     ;  DROP ( addr-t u-t para1 )
.b90c	24 32		bit $32		                bit ed_flags
.b90e	30 08		bmi $b918	                bmi _cmd_i_have_para
.b910	a5 30		lda $30		                lda ed_cur
.b912	95 00		sta $00,x	                sta 0,x
.b914	a5 31		lda $31		                lda ed_cur+1
.b916	95 01		sta $01,x	                sta 1,x                 ;  ( addr-t u-t cur ) drop through
.b918					_cmd_i_have_para:
.b918	b5 00		lda $00,x	                lda 0,x
.b91a	15 01		ora $01,x	                ora 1,x
.b91c	f0 09		beq $b927	                beq _cmd_i_done
.b91e	20 2d 98	jsr $982d	                jsr xt_one_minus        ; 1-  ( addr-t u-t para1-1 )
.b921	20 95 a7	jsr $a795	                jsr xt_zero             ; 0   ( addr-t u-t para1-1 0 )
.b924	20 34 95	jsr $9534	                jsr xt_max              ; MAX ( addr-t u-t para1-1 | 0 )
.b927					_cmd_i_done:
.b927	4c 92 b7	jmp $b792	                jmp ed_entry_cmd_i
.b92a					ed_cmd_n:
.b92a	fa		plx		                plx
.b92b	a9 01		lda #$01	                lda #%00000001
.b92d	04 32		tsb $32		                tsb ed_flags
.b92f	80 05		bra $b936	                bra ed_cmd_p_entry_for_cmd_n
.b931					ed_cmd_p:
.b931	fa		plx		                plx
.b932					ed_cmd_p_from_external:
.b932	a9 01		lda #$01	                lda #%00000001
.b934	14 32		trb $32		                trb ed_flags
.b936					ed_cmd_p_entry_for_cmd_n:
.b936	20 7a ba	jsr $ba7a	                jsr ed_have_text
.b939	20 cf ba	jsr $bacf	                jsr ed_no_line_zero
.b93c	20 7f 89	jsr $897f	                jsr xt_cr
.b93f	b5 00		lda $00,x	                lda 0,x
.b941	15 01		ora $01,x	                ora 1,x
.b943	d0 10		bne $b955	                bne _cmd_p_loop
.b945	b5 02		lda $02,x	                lda 2,x
.b947	85 30		sta $30		                sta ed_cur
.b949	b5 03		lda $03,x	                lda 3,x
.b94b	85 31		sta $31		                sta ed_cur+1
.b94d	20 af 98	jsr $98af	                jsr xt_over             ; OVER ( addr-t u-t para1 para2 para1 )
.b950	20 7e b9	jsr $b97e	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b953	80 26		bra $b97b	                bra _cmd_p_all_done
.b955					_cmd_p_loop:
.b955	20 a5 a3	jsr $a3a5	                jsr xt_two_dup          ; 2DUP ( addr-t u-t para1 para2 para1 para2 )
.b958	20 79 91	jsr $9179	                jsr xt_greater_than     ; > ( addr-t u-t para1 para2 f )
.b95b	b5 00		lda $00,x	                lda 0,x
.b95d	15 01		ora $01,x	                ora 1,x
.b95f	d0 10		bne $b971	                bne _cmd_p_done
.b961	e8		inx		                inx
.b962	e8		inx		                inx                     ; Get rid of the flag from >
.b963	20 af 98	jsr $98af	                jsr xt_over             ; ( addr-t u-t para1 para2 para1 )
.b966	20 7e b9	jsr $b97e	                jsr _cmd_p_common       ; ( addr-t u-t para1 para2 )
.b969	f6 02		inc $02,x	                inc 2,x
.b96b	d0 02		bne $b96f	                bne +
.b96d	f6 03		inc $03,x	                inc 3,x
.b96f					+
.b96f	80 e4		bra $b955	                bra _cmd_p_loop
.b971					_cmd_p_done:
.b971	e8		inx		                inx
.b972	e8		inx		                inx                     ; fall through to _cmp_p_all_done
.b973	b5 00		lda $00,x	                lda 0,x
.b975	85 30		sta $30		                sta ed_cur
.b977	b5 01		lda $01,x	                lda 1,x
.b979	85 31		sta $31		                sta ed_cur+1
.b97b					_cmd_p_all_done:
.b97b	4c 7c b7	jmp $b77c	                jmp ed_next_command
.b97e					_cmd_p_common:
.b97e	a5 32		lda $32		                lda ed_flags
.b980	4a		lsr a		                lsr                     ; bit 0 now in carry
.b981	90 0b		bcc $b98e	                bcc _cmd_p_common_no_num
.b983	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; DUP ( addr-t u-t para1 para1 )
.b986	20 1b a5	jsr $a51b	                jsr xt_u_dot            ; U. ( addr-t u-t para1 )
.b989	a9 09		lda #$09	                lda #$09                 ; ASCII for Tab
.b98b	20 12 8e	jsr $8e12	                jsr emit_a
.b98e					_cmd_p_common_no_num:
.b98e	20 dd ba	jsr $badd	                jsr ed_num_to_addr        ; ( addr-t u-t addr )
.b991	20 1d bb	jsr $bb1d	                jsr ed_print_addr
.b994	60		rts		                rts
.b995					ed_cmd_q:
.b995	fa		plx		                plx
.b996	24 32		bit $32		                bit ed_flags            ; bit 6 is change flag
.b998	50 03		bvc $b99d	                bvc +
.b99a	4c 57 ba	jmp $ba57	                jmp ed_error_2drop
.b99d					+
.b99d	4c 83 b7	jmp $b783	                jmp ed_all_done            ; can't fall thru because of PLX
.b9a0					ed_cmd_qq:
.b9a0	fa		plx		                plx
.b9a1	4c 83 b7	jmp $b783	                jmp ed_all_done
.b9a4					ed_cmd_w:
.b9a4	fa		plx		                plx
.b9a5	20 7a ba	jsr $ba7a	                jsr ed_have_text
.b9a8	24 32		bit $32		                bit ed_flags
.b9aa	30 13		bmi $b9bf	                bmi _cmd_w_have_para
.b9ac	b5 06		lda $06,x	                lda 6,x
.b9ae	15 07		ora $07,x	                ora 7,x
.b9b0	d0 03		bne $b9b5	                bne +
.b9b2	4c 57 ba	jmp $ba57	                jmp ed_error_2drop
.b9b5					+
.b9b5	b5 06		lda $06,x	                lda 6,x
.b9b7	95 02		sta $02,x	                sta 2,x
.b9b9	b5 07		lda $07,x	                lda 7,x
.b9bb	95 03		sta $03,x	                sta 3,x                 ; ( addr-t u-t addr-t ? )
.b9bd	80 08		bra $b9c7	                bra _cmd_w_para_ready
.b9bf					_cmd_w_have_para:
.b9bf	b5 02		lda $02,x	                lda 2,x
.b9c1	95 06		sta $06,x	                sta 6,x
.b9c3	b5 03		lda $03,x	                lda 3,x
.b9c5	95 07		sta $07,x	                sta 7,x                 ; drop through to _cmd_w_para_ready
.b9c7					_cmd_w_para_ready:
.b9c7	a9 2e		lda #$2e	                lda #<ed_head
.b9c9	95 00		sta $00,x	                sta 0,x
.b9cb	a9 00		lda #$00	                lda #>ed_head
.b9cd	95 01		sta $01,x	                sta 1,x                 ; ( addr-t u-t addr-t addr-h )
.b9cf	20 af 98	jsr $98af	                jsr xt_over             ; OVER ( addr-t u-t addr-t addr-h addr-t )
.b9d2	20 5d a3	jsr $a35d	                jsr xt_to_r             ; >R ( addr-t u-t addr-t addr-h ) ( R: addr-t )
.b9d5					_cmd_w_loop:
.b9d5	20 9c 8f	jsr $8f9c	                jsr xt_fetch            ; @ ( addr-t u-t addr-t addr1 ) ( R: addr-t )
.b9d8	b5 00		lda $00,x	                lda 0,x
.b9da	15 01		ora $01,x	                ora 1,x
.b9dc	f0 55		beq $ba33	                beq _cmd_w_eol
.b9de	20 a5 a3	jsr $a3a5	                jsr xt_two_dup          ; 2DUP ( addr-t addr-1 addr-t addr-1 ) ( R: addr-t addr-1 addr-t )
.b9e1	20 8f a4	jsr $a48f	                jsr xt_two_to_r         ; 2>R  ( addr-t addr-1 ) (R: ... )
.b9e4	20 39 98	jsr $9839	                jsr xt_one_plus         ; 1+ ( addr-t addr1+1 ) (R: ... )
.b9e7	20 39 98	jsr $9839	                jsr xt_one_plus         ; 1+ ( addr-t addr1+2 ) (R: ... )
.b9ea	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; DUP ( addr-t addr1+2 addr1+2 ) ( R: ... )
.b9ed	20 9c 8f	jsr $8f9c	                jsr xt_fetch            ; @ ( addr-t addr1+2 addr-s ) ( R: ... )
.b9f0	20 9b a1	jsr $a19b	                jsr xt_swap             ; SWAP ( addr-t addr-s addr1+2 ) ( R: ... )
.b9f3	20 39 98	jsr $9839	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+1 ) (R: ... )
.b9f6	20 39 98	jsr $9839	                jsr xt_one_plus         ; 1+ ( addr-t addr-s addr1+2 ) (R: ... )
.b9f9	20 9c 8f	jsr $8f9c	                jsr xt_fetch            ; @ ( addr-t addr-s u-s ) ( R: ... )
.b9fc	20 8a 96	jsr $968a	                jsr xt_not_rote         ; -ROT ( u-s addr-t addr-s ) ( R: ... )
.b9ff	20 9b a1	jsr $a19b	                jsr xt_swap             ; SWAP ( u-s addr-s addr-t ) ( R: ... )
.ba02	20 73 9b	jsr $9b73	                jsr xt_rot              ; ROT (addr-s addr-t u-s ) ( R: ... )
.ba05	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; DUP (addr-s addr-t u-s u-s ) ( R: ... )
.ba08	20 5d a3	jsr $a35d	                jsr xt_to_r             ; >R (addr-s addr-t u-s ) ( R: ... u-s )
.ba0b	20 de 95	jsr $95de	                jsr xt_move             ; MOVE ( )( R: addr-t addr-1 addr-t )
.ba0e	20 ae 9a	jsr $9aae	                jsr xt_r_from           ; R> ( u-s )  ( R: addr-t addr-h addr-t )
.ba11	20 15 a4	jsr $a415	                jsr xt_two_r_from       ; 2R> ( u-s addr-t addr-h ) ( R: addr-t )
.ba14	20 8a 96	jsr $968a	                jsr xt_not_rote         ; -ROT ( addr-h u-s addr-t ) ( R: addr-t )
.ba17	20 ff 99	jsr $99ff	                jsr xt_plus             ; + ( addr-h addr-t1 ) ( R: addr-t )
.ba1a	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; DUP ( addr-h addr-t1 addr-t1 ) ( R: addr-t )
.ba1d	ca		dex		                dex
.ba1e	ca		dex		                dex                     ; ( addr-h addr-t1 addr-t1 ? ) ( R: addr-t )
.ba1f	a9 0a		lda #$0a	                lda #AscLF              ; ASCII for LF
.ba21	95 00		sta $00,x	                sta 0,x
.ba23	74 01		stz $01,x	                stz 1,x                 ; ( addr-h addr-t1 addr-t1 c ) ( R: addr-t )
.ba25	20 9b a1	jsr $a19b	                jsr xt_swap             ; SWAP ( addr-h addr-t1 c addr-t1 ) ( R: addr-t )
.ba28	20 7a a1	jsr $a17a	                jsr xt_store            ; ! ( addr-h addr-t1 ) ( R: addr-t )
.ba2b	20 39 98	jsr $9839	                jsr xt_one_plus         ; 1+ ( addr-h addr-t1+1 ) ( R: addr-t )
.ba2e	20 9b a1	jsr $a19b	                jsr xt_swap             ; SWAP ( addr-t1+1 addr-h ) ( R: addr-t )
.ba31	80 a2		bra $b9d5	                bra _cmd_w_loop
.ba33					_cmd_w_eol:
.ba33	20 9b a1	jsr $a19b	                jsr xt_swap             ; SWAP ( addr-t u-t addr-n addr-tn ) ( R: addr-t )
.ba36	20 ae 9a	jsr $9aae	                jsr xt_r_from           ; R> ( addr-t u-t addr-n addr-tn addr-t )
.ba39	20 6c 95	jsr $956c	                jsr xt_minus            ; - ( addr-t u-t addr-n u )
.ba3c	b5 00		lda $00,x	                lda 0,x
.ba3e	95 04		sta $04,x	                sta 4,x
.ba40	b5 01		lda $01,x	                lda 1,x
.ba42	95 05		sta $05,x	                sta 5,x                 ; ( addr-t u addr-n u )
.ba44	20 7f 89	jsr $897f	                jsr xt_cr
.ba47	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; DUP ( addr-t u addr-n u u )
.ba4a	20 1b a5	jsr $a51b	                jsr xt_u_dot            ; U. ( addr-t u addr-n u )
.ba4d	20 7f 89	jsr $897f	                jsr xt_cr
.ba50	a9 40		lda #$40	                lda #%01000000
.ba52	14 32		trb $32		                trb ed_flags
.ba54	4c 7c b7	jmp $b77c	                jmp ed_next_command
.ba57					ed_error_2drop:
.ba57	e8		inx		                inx
.ba58	e8		inx		                inx                     ; drop through to _error_1drop
.ba59					ed_error_1drop:
.ba59	e8		inx		                inx
.ba5a	e8		inx		                inx                     ; drop through to _error
.ba5b					ed_error:
.ba5b	20 7f 89	jsr $897f	                jsr xt_cr
.ba5e	a9 3f		lda #$3f	                lda #'?'
.ba60	20 12 8e	jsr $8e12	                jsr emit_a
.ba63	20 7f 89	jsr $897f	                jsr xt_cr
.ba66	4c 8a b5	jmp $b58a	                jmp ed_input_loop
.ba69					ed_get_input:
.ba69	20 14 9b	jsr $9b14	                jsr xt_refill           ;  ( addr-t u-t f )
.ba6c	b5 00		lda $00,x	                lda 0,x
.ba6e	15 01		ora $01,x	                ora 1,x
.ba70	d0 05		bne $ba77	                bne +
.ba72	7a		ply		                ply
.ba73	7a		ply		                ply
.ba74	4c 59 ba	jmp $ba59	                jmp ed_error_1drop
.ba77					+
.ba77	e8		inx		                inx
.ba78	e8		inx		                inx
.ba79	60		rts		                rts
.ba7a					ed_have_text:
.ba7a	a5 2e		lda $2e		                lda ed_head
.ba7c	05 2f		ora $2f		                ora ed_head+1
.ba7e	d0 04		bne $ba84	                bne +
.ba80	7a		ply		                ply
.ba81	7a		ply		                ply
.ba82	80 d7		bra $ba5b	                bra ed_error
.ba84					+
.ba84	60		rts		                rts
.ba85					ed_is_valid_line:
.ba85	38		sec		                sec                             ; default is legal line number
.ba86	b5 00		lda $00,x	                lda 0,x
.ba88	15 01		ora $01,x	                ora 1,x
.ba8a	f0 19		beq $baa5	                beq _is_valid_line_nope_zero    ; ( n )
.ba8c	20 cb 8d	jsr $8dcb	                jsr xt_dup                      ; DUP ( n n )
.ba8f	20 a7 ba	jsr $baa7	                jsr ed_last_line                  ; ( n n last )
.ba92	20 9b a1	jsr $a19b	                jsr xt_swap                     ; SWAP ( n last n )
.ba95	20 84 93	jsr $9384	                jsr xt_less_than                ; < ( n f )
.ba98	b5 00		lda $00,x	                lda 0,x                         ; 0 flag is good
.ba9a	15 01		ora $01,x	                ora 1,x
.ba9c	d0 05		bne $baa3	                bne _is_valid_line_too_small
.ba9e	e8		inx		                inx
.ba9f	e8		inx		                inx                     ; DROP flag ( n )
.baa0	38		sec		                sec                     ; Who knows what's happened to C by now
.baa1	80 03		bra $baa6	                bra _is_valid_line_done ; only one exit from this routine
.baa3					_is_valid_line_too_small:
.baa3	e8		inx		                inx
.baa4	e8		inx		                inx                     ; drop through to _is_valid_line_zero
.baa5					_is_valid_line_nope_zero:
.baa5	18		clc		                clc                     ; drop through to _is_valid_line_done
.baa6					_is_valid_line_done:
.baa6	60		rts		                rts
.baa7					ed_last_line:
.baa7	64 24		stz $24		                stz tmp1
.baa9	64 25		stz $25		                stz tmp1+1
.baab	ca		dex		                dex
.baac	ca		dex		                dex                     ; ( ? )
.baad	a9 2e		lda #$2e	                lda #<ed_head
.baaf	95 00		sta $00,x	                sta 0,x
.bab1	a9 00		lda #$00	                lda #>ed_head
.bab3	95 01		sta $01,x	                sta 1,x                 ; ( addr )
.bab5					_last_line_loop:
.bab5	20 9c 8f	jsr $8f9c	                jsr xt_fetch            ; ( addr | 0 )
.bab8	b5 00		lda $00,x	                lda 0,x
.baba	15 01		ora $01,x	                ora 1,x
.babc	f0 08		beq $bac6	                beq _last_line_done
.babe	e6 24		inc $24		                inc tmp1
.bac0	d0 02		bne $bac4	                bne +
.bac2	e6 25		inc $25		                inc tmp1+1
.bac4					+
.bac4	80 ef		bra $bab5	                bra _last_line_loop
.bac6					_last_line_done:
.bac6	a5 24		lda $24		                lda tmp1
.bac8	95 00		sta $00,x	                sta 0,x
.baca	a5 25		lda $25		                lda tmp1+1
.bacc	95 01		sta $01,x	                sta 1,x                 ; ( u )
.bace	60		rts		                rts
.bacf					ed_no_line_zero:
.bacf	b5 02		lda $02,x	                lda 2,x
.bad1	15 03		ora $03,x	                ora 3,x
.bad3	d0 07		bne $badc	                bne _no_line_zero_done
.bad5	24 32		bit $32		                bit ed_flags
.bad7	10 03		bpl $badc	                bpl _no_line_zero_done
.bad9	4c 57 ba	jmp $ba57	                jmp ed_error_2drop
.badc					_no_line_zero_done:
.badc	60		rts		                rts
.badd					ed_num_to_addr:
.badd	ca		dex		                dex
.bade	ca		dex		                dex                     ; ( u ? )
.badf	a9 2e		lda #$2e	                lda #<ed_head
.bae1	95 00		sta $00,x	                sta 0,x
.bae3	a9 00		lda #$00	                lda #>ed_head
.bae5	95 01		sta $01,x	                sta 1,x                 ; ( u addr-h )
.bae7	b5 02		lda $02,x	                lda 2,x
.bae9	15 03		ora $03,x	                ora 3,x
.baeb	d0 05		bne $baf2	                bne _num_to_addr_loop
.baed	20 5e 96	jsr $965e	                jsr xt_nip              ; ( addr-h )
.baf0	80 21		bra $bb13	                bra _num_to_addr_done
.baf2					_num_to_addr_loop:
.baf2	20 9c 8f	jsr $8f9c	                jsr xt_fetch            ; @ ( u addr1 )
.baf5	b5 00		lda $00,x	                lda 0,x
.baf7	15 01		ora $01,x	                ora 1,x
.baf9	d0 05		bne $bb00	                bne +
.bafb	20 5e 96	jsr $965e	                jsr xt_nip              ; NIP ( addr1 )
.bafe	80 13		bra $bb13	                bra _num_to_addr_done
.bb00					+
.bb00	20 9b a1	jsr $a19b	                jsr xt_swap             ; SWAP ( addr1 u )
.bb03	20 2d 98	jsr $982d	                jsr xt_one_minus        ; 1- ( addr1 u-1 )
.bb06	b5 00		lda $00,x	                lda 0,x
.bb08	15 01		ora $01,x	                ora 1,x
.bb0a	f0 05		beq $bb11	                beq _num_to_addr_finished
.bb0c	20 9b a1	jsr $a19b	                jsr xt_swap             ; SWAP ( u-1 addr1 )
.bb0f	80 e1		bra $baf2	                bra _num_to_addr_loop
.bb11					_num_to_addr_finished:
.bb11	e8		inx		                inx
.bb12	e8		inx		                inx                     ; ( addr )
.bb13					_num_to_addr_done:
.bb13	60		rts		                rts
.bb14					ed_para1_to_cur:
.bb14	b5 02		lda $02,x	                lda 2,x
.bb16	85 30		sta $30		                sta ed_cur
.bb18	b5 03		lda $03,x	                lda 3,x
.bb1a	85 31		sta $31		                sta ed_cur+1
.bb1c	60		rts		                rts
.bb1d					ed_print_addr:
.bb1d	20 39 98	jsr $9839	                jsr xt_one_plus
.bb20	20 39 98	jsr $9839	                jsr xt_one_plus         ; ( addr+2 )
.bb23	20 cb 8d	jsr $8dcb	                jsr xt_dup              ; ( addr+2 addr+2 )
.bb26	20 39 98	jsr $9839	                jsr xt_one_plus
.bb29	20 39 98	jsr $9839	                jsr xt_one_plus         ; ( addr+2 addr+4 )
.bb2c	20 9c 8f	jsr $8f9c	                jsr xt_fetch            ; ( addr+2 u-s )
.bb2f	20 9b a1	jsr $a19b	                jsr xt_swap             ; ( u-s addr+2 )
.bb32	20 9c 8f	jsr $8f9c	                jsr xt_fetch            ; ( u-s addr-s )
.bb35	20 9b a1	jsr $a19b	                jsr xt_swap             ; ( addr-s u-s )
.bb38	20 f0 a4	jsr $a4f0	                jsr xt_type
.bb3b	20 7f 89	jsr $897f	                jsr xt_cr
.bb3e	60		rts		                rts
>bb3f	61 66 69 64 70 6e 3d 77		ed_cmd_list:    .text "afidpn=wqQ", 0
>bb47	71 51 00
.bb4a					ed_cmd_table:
>bb4a	8f b7 d6 b8 09 b9 32 b8		                .word ed_cmd_a, ed_cmd_f, ed_cmd_i, ed_cmd_d, ed_cmd_p, ed_cmd_n
>bb52	31 b9 2a b9
>bb56	9a b8 a4 b9 95 b9 a0 b9		                .word ed_cmd_equ, ed_cmd_w, ed_cmd_q, ed_cmd_qq
.bb5e					ed6502_end:

;******  Return to file: platform/../taliforth.asm

.bb5e					forth_words_start:
>bb5e	20 63 72 20 2e 28 20 54		.binary "forth_words.asc"
>bb66	61 6c 69 20 46 6f 72 74 68 20 32 20 66 6f 72 20
>bb76	74 68 65 20 36 35 63 30 32 29 20 63 72 20 2e 28
>bb86	20 56 65 72 73 69 6f 6e 20 31 2e 30 20 30 34 2e
>bb96	20 44 65 63 20 32 30 32 32 20 29 20 63 72 20 2e
>bba6	28 20 43 6f 70 79 72 69 67 68 74 20 32 30 31 34
>bbb6	2d 32 30 32 32 20 53 63 6f 74 20 57 2e 20 53 74
>bbc6	65 76 65 6e 73 6f 6e 2c 20 53 61 6d 20 43 6f 6c
>bbd6	77 65 6c 6c 29 20 63 72 20 2e 28 20 54 61 6c 69
>bbe6	20 46 6f 72 74 68 20 32 20 63 6f 6d 65 73 20 77
>bbf6	69 74 68 20 61 62 73 6f 6c 75 74 65 6c 79 20 4e
>bc06	4f 20 57 41 52 52 41 4e 54 59 29 20 63 72 20 2e
>bc16	28 20 54 79 70 65 20 27 62 79 65 27 20 74 6f 20
>bc26	65 78 69 74 29 20 63 72 20
.bc2f					forth_words_end:
.bc2f					user_words_start:
>bc2f	20 3a 20 62 6c 6b 72 77		.binary "user_words.asc"
>bc37	20 2d 72 6f 74 20 24 63 30 31 34 20 21 20 24 63
>bc47	30 31 32 20 21 20 24 63 30 31 30 20 63 21 20 3b
>bc57	20 3a 6e 6f 6e 61 6d 65 20 2d 31 20 24 63 30 31
>bc67	31 20 63 21 20 30 20 24 63 30 31 30 20 63 21 20
>bc77	24 63 30 31 31 20 63 40 20 30 3d 20 69 66 20 30
>bc87	20 24 34 30 30 20 31 20 62 6c 6b 72 77 20 24 34
>bc97	30 30 20 40 20 24 34 36 35 34 20 3d 20 69 66 20
>bca7	24 34 30 34 20 24 34 30 32 20 40 20 65 76 61 6c
>bcb7	75 61 74 65 20 65 6c 73 65 20 2e 22 20 62 61 64
>bcc7	20 62 6f 6f 74 20 62 6c 6f 63 6b 22 20 43 52 20
>bcd7	74 68 65 6e 20 65 6c 73 65 20 2e 22 20 6e 6f 20
>bce7	62 6c 6f 63 6b 20 64 65 76 69 63 65 22 20 43 52
>bcf7	20 74 68 65 6e 20 3b 20 65 78 65 63 75 74 65 20
.bd07					user_words_end:

;******  Processing file: platform/../headers.asm

.bd07					dictionary_start:
.bd07					nt_drop:
>bd07	04 10				        .byte 4, UF
>bd09	13 bd 4a 8d 4f 8d		        .word nt_dup, xt_drop, z_drop
>bd0f	64 72 6f 70			        .text "drop"
.bd13					nt_dup:
>bd13	03 10				        .byte 3, UF
>bd15	1e bd cb 8d d8 8d		        .word nt_swap, xt_dup, z_dup
>bd1b	64 75 70			        .text "dup"
.bd1e					nt_swap:
>bd1e	04 10				        .byte 4, UF
>bd20	2a bd 9b a1 ae a1		        .word nt_store, xt_swap, z_swap
>bd26	73 77 61 70			        .text "swap"
.bd2a					nt_store:
>bd2a	01 10				        .byte 1, UF
>bd2c	33 bd 7a a1 8f a1		        .word nt_fetch, xt_store, z_store
>bd32	21				        .text "!"
.bd33					nt_fetch:
>bd33	01 10				        .byte 1, UF
>bd35	3c bd 9c 8f ae 8f		        .word nt_over, xt_fetch, z_fetch
>bd3b	40				        .text "@"
.bd3c					nt_over:
>bd3c	04 10				        .byte 4, UF
>bd3e	48 bd af 98 bc 98		        .word nt_to_r, xt_over, z_over
>bd44	6f 76 65 72			        .text "over"
.bd48					nt_to_r:
>bd48	02 11				        .byte 2, CO+UF ; native is special case
>bd4a	52 bd 5d a3 70 a3		        .word nt_r_from, xt_to_r, z_to_r
>bd50	3e 72				        .text ">r"
.bd52					nt_r_from:
>bd52	02 01				        .byte 2, CO    ; native is special case
>bd54	5c bd ae 9a be 9a		        .word nt_r_fetch, xt_r_from, z_r_from
>bd5a	72 3e				        .text "r>"
.bd5c					nt_r_fetch:
>bd5c	02 01				        .byte 2, CO    ; native is special case
>bd5e	66 bd 99 9a ad 9a		        .word nt_nip, xt_r_fetch, z_r_fetch
>bd64	72 40				        .text "r@"
.bd66					nt_nip:
>bd66	03 10				        .byte 3, UF
>bd68	71 bd 5e 96 6b 96		        .word nt_rot, xt_nip, z_nip
>bd6e	6e 69 70			        .text "nip"
.bd71					nt_rot:
>bd71	03 10				        .byte 3, UF
>bd73	7c bd 73 9b 8e 9b		        .word nt_not_rote, xt_rot, z_rot
>bd79	72 6f 74			        .text "rot"
.bd7c					nt_not_rote:
>bd7c	04 10				        .byte 4, UF
>bd7e	88 bd 8a 96 a5 96		        .word nt_tuck, xt_not_rote, z_not_rote
>bd84	2d 72 6f 74			        .text "-rot"
.bd88					nt_tuck:
>bd88	04 10				        .byte 4, UF
>bd8a	94 bd 7a a3 93 a3		        .word nt_comma, xt_tuck, z_tuck
>bd90	74 75 63 6b			        .text "tuck"
.bd94					nt_comma:
>bd94	01 10				        .byte 1, UF
>bd96	9d bd 8a 87 a3 87		        .word nt_c_fetch, xt_comma, z_comma
>bd9c	2c				        .text ","
.bd9d					nt_c_fetch:
>bd9d	02 10				        .byte 2, UF
>bd9f	a7 bd 27 86 30 86		        .word nt_c_store, xt_c_fetch, z_c_fetch
>bda5	63 40				        .text "c@"
.bda7					nt_c_store:
>bda7	02 10				        .byte 2, UF
>bda9	b1 bd 31 86 3c 86		        .word nt_plus_store, xt_c_store, z_c_store
>bdaf	63 21				        .text "c!"
.bdb1					nt_plus_store:
>bdb1	02 10				        .byte 2, UF
>bdb3	bb bd 12 9a 31 9a		        .word nt_execute, xt_plus_store, z_plus_store
>bdb9	2b 21				        .text "+!"
.bdbb					nt_execute:
>bdbb	07 10				        .byte 7, UF
>bdbd	ca bd 59 8f 5f 8f		        .word nt_emit, xt_execute, z_execute
>bdc3	65 78 65 63 75 74 65		        .text "execute"
.bdca					nt_emit:
>bdca	04 18				        .byte 4, NN+UF
>bdcc	d6 bd 0b 8e 15 8e		        .word nt_type, xt_emit, z_emit
>bdd2	65 6d 69 74			        .text "emit"
.bdd6					nt_type:
>bdd6	04 10				        .byte 4, UF
>bdd8	e2 bd f0 a4 1a a5		        .word nt_dot, xt_type, z_type
>bdde	74 79 70 65			        .text "type"
.bde2					nt_dot:
>bde2	01 10				        .byte 1, UF
>bde4	eb bd 52 8c 73 8c		        .word nt_u_dot, xt_dot, z_dot
>bdea	2e				        .text "."
.bdeb					nt_u_dot:
>bdeb	02 10				        .byte 2, UF
>bded	f5 bd 1b a5 26 a5		        .word nt_u_dot_r, xt_u_dot, z_u_dot
>bdf3	75 2e				        .text "u."
.bdf5					nt_u_dot_r:
>bdf5	03 10				        .byte 3, UF
>bdf7	00 be 27 a5 48 a5		        .word nt_dot_r, xt_u_dot_r, z_u_dot_r
>bdfd	75 2e 72			        .text "u.r"
.be00					nt_dot_r:
>be00	02 10				        .byte 2, UF
>be02	0a be 8e 8c bb 8c		        .word nt_d_dot, xt_dot_r, z_dot_r
>be08	2e 72				        .text ".r"
.be0a					nt_d_dot:
>be0a	02 10				        .byte 2, UF
>be0c	14 be 00 8d 1e 8d		        .word nt_d_dot_r, xt_d_dot, z_d_dot
>be12	64 2e				        .text "d."
.be14					nt_d_dot_r:
>be14	03 10				        .byte 3, UF
>be16	1f be 1f 8d 49 8d		        .word nt_ud_dot, xt_d_dot_r, z_d_dot_r
>be1c	64 2e 72			        .text "d.r"
.be1f					nt_ud_dot:
>be1f	03 10				        .byte 3, UF
>be21	2a be 75 a5 87 a5		        .word nt_ud_dot_r, xt_ud_dot, z_ud_dot
>be27	75 64 2e			        .text "ud."
.be2a					nt_ud_dot_r:
>be2a	04 10				        .byte 4, UF
>be2c	36 be 88 a5 a6 a5		        .word nt_question, xt_ud_dot_r, z_ud_dot_r
>be32	75 64 2e 72			        .text "ud.r"
.be36					nt_question:
>be36	01 00				        .byte 1, 0
>be38	3f be 7e 9a 84 9a		        .word nt_false, xt_question, z_question
>be3e	3f				        .text "?"
.be3f					nt_false:
>be3f	05 00				        .byte 5, 0
>be41	4c be 95 8f 9b 8f		        .word nt_true, xt_false, z_false
>be47	66 61 6c 73 65			        .text "false"
.be4c					nt_true:
>be4c	04 00				        .byte 4, 0
>be4e	58 be 71 a3 79 a3		        .word nt_space, xt_true, z_true
>be54	74 72 75 65			        .text "true"
.be58					nt_space:
>be58	05 00				        .byte 5, 0
>be5a	65 be 0b a1 10 a1		        .word nt_zero, xt_space, z_space
>be60	73 70 61 63 65			        .text "space"
.be65					nt_zero:
>be65	01 00				        .byte 1, 0
>be67	6e be 95 a7 9b a7		        .word nt_one, xt_zero, z_zero
>be6d	30				        .text "0"
.be6e					nt_one:
>be6e	01 00				        .byte 1, 0
>be70	77 be 24 98 2c 98		        .word nt_two, xt_one, z_one
>be76	31				        .text "1"
.be77					nt_two:
>be77	01 00				        .byte 1, 0
>be79	80 be 94 a3 9c a3		        .word nt_two_dup, xt_two, z_two
>be7f	32				        .text "2"
.be80					nt_two_dup:
>be80	04 10				        .byte 4, UF
>be82	8c be a5 a3 bc a3		        .word nt_question_dup, xt_two_dup, z_two_dup
>be88	32 64 75 70			        .text "2dup"
.be8c					nt_question_dup:
>be8c	04 10				        .byte 4, UF
>be8e	98 be 85 9a 98 9a		        .word nt_plus, xt_question_dup, z_question_dup
>be94	3f 64 75 70			        .text "?dup"
.be98					nt_plus:
>be98	01 10				        .byte 1, UF
>be9a	a1 be ff 99 11 9a		        .word nt_minus, xt_plus, z_plus
>bea0	2b				        .text "+"
.bea1					nt_minus:
>bea1	01 10				        .byte 1, UF
>bea3	aa be 6c 95 7e 95		        .word nt_one_minus, xt_minus, z_minus
>bea9	2d				        .text "-"
.beaa					nt_one_minus:
>beaa	02 10				        .byte 2, UF
>beac	b4 be 2d 98 38 98		        .word nt_one_plus, xt_one_minus, z_one_minus
>beb2	31 2d				        .text "1-"
.beb4					nt_one_plus:
>beb4	02 10				        .byte 2, UF
>beb6	be be 39 98 42 98		        .word nt_two_star, xt_one_plus, z_one_plus
>bebc	31 2b				        .text "1+"
.bebe					nt_two_star:
>bebe	02 10				        .byte 2, UF
>bec0	c8 be 3d a4 44 a4		        .word nt_two_slash, xt_two_star, z_two_star
>bec6	32 2a				        .text "2*"
.bec8					nt_two_slash:
>bec8	02 10				        .byte 2, UF
>beca	d2 be 32 a4 3c a4		        .word nt_abs, xt_two_slash, z_two_slash
>bed0	32 2f				        .text "2/"
.bed2					nt_abs:
>bed2	03 10				        .byte 3, UF
>bed4	dd be 33 81 47 81		        .word nt_dabs, xt_abs, z_abs
>beda	61 62 73			        .text "abs"
.bedd					nt_dabs:
>bedd	04 10				        .byte 4, UF
>bedf	e9 be a2 8a c0 8a		        .word nt_and, xt_dabs, z_dabs
>bee5	64 61 62 73			        .text "dabs"
.bee9					nt_and:
>bee9	03 10				        .byte 3, UF
>beeb	f4 be 38 83 49 83		        .word nt_or, xt_and, z_and
>bef1	61 6e 64			        .text "and"
.bef4					nt_or:
>bef4	02 10				        .byte 2, UF
>bef6	fe be 4f 98 60 98		        .word nt_xor, xt_or, z_or
>befc	6f 72				        .text "or"
.befe					nt_xor:
>befe	03 10				        .byte 3, UF
>bf00	09 bf 83 a7 94 a7		        .word nt_rshift, xt_xor, z_xor
>bf06	78 6f 72			        .text "xor"
.bf09					nt_rshift:
>bf09	06 10				        .byte 6, UF
>bf0b	17 bf 8f 9b a2 9b		        .word nt_lshift, xt_rshift, z_rshift
>bf11	72 73 68 69 66 74		        .text "rshift"
.bf17					nt_lshift:
>bf17	06 10				        .byte 6, UF
>bf19	25 bf 96 94 a9 94		        .word nt_pick, xt_lshift, z_lshift
>bf1f	6c 73 68 69 66 74		        .text "lshift"
.bf25					nt_pick:
>bf25	04 00				        .byte 4, 0    ; underflow check is complicated, leave off here
>bf27	31 bf ee 99 fe 99		        .word nt_char, xt_pick, z_pick
>bf2d	70 69 63 6b			        .text "pick"
.bf31					nt_char:
>bf31	04 00				        .byte 4, 0
>bf33	3d bf 4d 86 63 86		        .word nt_bracket_char, xt_char, z_char
>bf39	63 68 61 72			        .text "char"
.bf3d					nt_bracket_char:
>bf3d	06 05				        .byte 6, CO+IM
>bf3f	4b bf b3 85 b9 85		        .word nt_char_plus, xt_bracket_char, z_bracket_char
>bf45	5b 63 68 61 72 5d		        .text "[char]"
.bf4b					nt_char_plus:
>bf4b	05 00				        .byte 5, 0
>bf4d	58 bf 39 98 42 98		        .word nt_chars, xt_one_plus, z_one_plus ; same as 1+
>bf53	63 68 61 72 2b			        .text "char+"
.bf58					nt_chars:
>bf58	05 12				        .byte 5, AN+UF   ; deleted during compile
>bf5a	65 bf 64 86 67 86		        .word nt_cells, xt_chars, z_chars
>bf60	63 68 61 72 73			        .text "chars"
.bf65					nt_cells:
>bf65	05 00				        .byte 5, 0
>bf67	72 bf 3d a4 44 a4		        .word nt_cell_plus, xt_two_star, z_two_star  ; same as 2*
>bf6d	63 65 6c 6c 73			        .text "cells"
.bf72					nt_cell_plus:
>bf72	05 10				        .byte 5, UF
>bf74	7f bf 3d 86 4c 86		        .word nt_here, xt_cell_plus, z_cell_plus
>bf7a	63 65 6c 6c 2b			        .text "cell+"
.bf7f					nt_here:
>bf7f	04 00				        .byte 4, 0
>bf81	8b bf 8e 91 98 91		        .word nt_equal, xt_here, z_here
>bf87	68 65 72 65			        .text "here"
.bf8b					nt_equal:
>bf8b	01 10				        .byte 1, UF
>bf8d	94 bf ea 8e 05 8f		        .word nt_not_equals, xt_equal, z_equal
>bf93	3d				        .text "="
.bf94					nt_not_equals:
>bf94	02 10				        .byte 2, UF
>bf96	9e bf 6c 96 89 96		        .word nt_less_than, xt_not_equals, z_not_equals
>bf9c	3c 3e				        .text "<>"
.bf9e					nt_less_than:
>bf9e	01 10				        .byte 1, UF
>bfa0	a7 bf 84 93 98 93		        .word nt_u_less_than, xt_less_than, z_less_than
>bfa6	3c				        .text "<"
.bfa7					nt_u_less_than:
>bfa7	02 10				        .byte 2, UF
>bfa9	b1 bf 5f a5 74 a5		        .word nt_u_greater_than, xt_u_less_than, z_u_less_than
>bfaf	75 3c				        .text "u<"
.bfb1					nt_u_greater_than:
>bfb1	02 10				        .byte 2, UF
>bfb3	bb bf 49 a5 5e a5		        .word nt_greater_than, xt_u_greater_than, z_u_greater_than
>bfb9	75 3e				        .text "u>"
.bfbb					nt_greater_than:
>bfbb	01 10				        .byte 1, UF
>bfbd	c4 bf 79 91 8d 91		        .word nt_zero_equal, xt_greater_than, z_greater_than
>bfc3	3e				        .text ">"
.bfc4					nt_zero_equal:
>bfc4	02 10				        .byte 2, UF
>bfc6	ce bf 9c a7 af a7		        .word nt_zero_unequal, xt_zero_equal, z_zero_equal
>bfcc	30 3d				        .text "0="
.bfce					nt_zero_unequal:
>bfce	03 10				        .byte 3, UF
>bfd0	d9 bf d4 a7 e5 a7		        .word nt_zero_greater, xt_zero_unequal, z_zero_unequal
>bfd6	30 3c 3e			        .text "0<>"
.bfd9					nt_zero_greater:
>bfd9	02 10				        .byte 2, UF
>bfdb	e3 bf b0 a7 c3 a7		        .word nt_zero_less, xt_zero_greater, z_zero_greater
>bfe1	30 3e				        .text "0>"
.bfe3					nt_zero_less:
>bfe3	02 10				        .byte 2, UF
>bfe5	ed bf c4 a7 d3 a7		        .word nt_min, xt_zero_less, z_zero_less
>bfeb	30 3c				        .text "0<"
.bfed					nt_min:
>bfed	03 10				        .byte 3, UF
>bfef	f8 bf 50 95 6b 95		        .word nt_max, xt_min, z_min
>bff5	6d 69 6e			        .text "min"
.bff8					nt_max:
>bff8	03 10				        .byte 3, UF
>bffa	03 c0 34 95 4f 95		        .word nt_two_drop, xt_max, z_max
>c000	6d 61 78			        .text "max"
.c003					nt_two_drop:
>c003	05 10				        .byte 5, UF
>c005	10 c0 9d a3 a4 a3		        .word nt_two_swap, xt_two_drop, z_two_drop
>c00b	32 64 72 6f 70			        .text "2drop"
.c010					nt_two_swap:
>c010	05 10				        .byte 5, UF
>c012	1d c0 6b a4 8e a4		        .word nt_two_over, xt_two_swap, z_two_swap
>c018	32 73 77 61 70			        .text "2swap"
.c01d					nt_two_over:
>c01d	05 10				        .byte 5, UF
>c01f	2a c0 df a3 f6 a3		        .word nt_two_store, xt_two_over, z_two_over
>c025	32 6f 76 65 72			        .text "2over"
.c02a					nt_two_store:
>c02a	02 10				        .byte 2, UF
>c02c	34 c0 45 a4 6a a4		        .word nt_two_fetch, xt_two_store, z_two_store
>c032	32 21				        .text "2!"
.c034					nt_two_fetch:
>c034	02 10				        .byte 2, UF
>c036	3e c0 bd a3 de a3		        .word nt_two_variable, xt_two_fetch, z_two_fetch
>c03c	32 40				        .text "2@"
.c03e					nt_two_variable:
>c03e	09 00				        .byte 9, 0
>c040	4f c0 e1 a4 ef a4		        .word nt_two_constant, xt_two_variable, z_two_variable
>c046	32 76 61 72 69 61 62 6c		        .text "2variable"
>c04e	65
.c04f					nt_two_constant:
>c04f	09 10				        .byte 9, UF
>c051	60 c0 af a4 d3 a4		        .word nt_two_literal, xt_two_constant, z_two_constant
>c057	32 63 6f 6e 73 74 61 6e		        .text "2constant"
>c05f	74
.c060					nt_two_literal:
>c060	08 14				        .byte 8, UF+IM
>c062	70 c0 d4 a4 e0 a4		        .word nt_two_r_fetch, xt_two_literal, z_two_literal
>c068	32 6c 69 74 65 72 61 6c		        .text "2literal"
.c070					nt_two_r_fetch:
>c070	03 09				        .byte 3, CO+NN          ; native is special case, leave NN for now
>c072	7b c0 f7 a3 14 a4		        .word nt_two_r_from, xt_two_r_fetch, z_two_r_fetch
>c078	32 72 40			        .text "2r@"
.c07b					nt_two_r_from:
>c07b	03 01				        .byte 3, CO             ; native is special case
>c07d	86 c0 15 a4 31 a4		        .word nt_two_to_r, xt_two_r_from, z_two_r_from
>c083	32 72 3e			        .text "2r>"
.c086					nt_two_to_r:
>c086	03 11				        .byte 3, CO+UF          ; native is special case
>c088	91 c0 8f a4 ae a4		        .word nt_invert, xt_two_to_r, z_two_to_r
>c08e	32 3e 72			        .text "2>r"
.c091					nt_invert:
>c091	06 10				        .byte 6, UF
>c093	9f c0 07 93 16 93		        .word nt_negate, xt_invert, z_invert
>c099	69 6e 76 65 72 74		        .text "invert"
.c09f					nt_negate:
>c09f	06 10				        .byte 6, UF
>c0a1	ad c0 3f 96 4f 96		        .word nt_dnegate, xt_negate, z_negate
>c0a7	6e 65 67 61 74 65		        .text "negate"
.c0ad					nt_dnegate:
>c0ad	07 10				        .byte 7, UF
>c0af	bc c0 5d 8b 77 8b		        .word nt_c_comma, xt_dnegate, z_dnegate
>c0b5	64 6e 65 67 61 74 65		        .text "dnegate"
.c0bc					nt_c_comma:
>c0bc	02 10				        .byte 2, UF
>c0be	c6 c0 1c 86 26 86		        .word nt_bounds, xt_c_comma, z_c_comma
>c0c4	63 2c				        .text "c,"
.c0c6					nt_bounds:
>c0c6	06 10				        .byte 6, UF
>c0c8	d4 c0 9a 85 b2 85		        .word nt_spaces, xt_bounds, z_bounds
>c0ce	62 6f 75 6e 64 73		        .text "bounds"
.c0d4					nt_spaces:
>c0d4	06 10				        .byte 6, UF
>c0d6	e2 c0 11 a1 4c a1		        .word nt_bl, xt_spaces, z_spaces
>c0dc	73 70 61 63 65 73		        .text "spaces"
.c0e2					nt_bl:
>c0e2	02 00				        .byte 2, 0
>c0e4	ec c0 b6 83 be 83		        .word nt_minus_trailing, xt_bl, z_bl
>c0ea	62 6c				        .text "bl"
.c0ec					nt_minus_trailing:
>c0ec	09 10				        .byte 9, UF
>c0ee	fd c0 98 95 d4 95		        .word nt_minus_leading, xt_minus_trailing, z_minus_trailing
>c0f4	2d 74 72 61 69 6c 69 6e		        .text "-trailing"
>c0fc	67
.c0fd					nt_minus_leading:
>c0fd	08 10				        .byte 8, UF
>c0ff	0d c1 7f 95 97 95		        .word nt_slash_string, xt_minus_leading, z_minus_leading
>c105	2d 6c 65 61 64 69 6e 67		        .text "-leading"
.c10d					nt_slash_string:
>c10d	07 10				        .byte 7, UF
>c10f	1c c1 06 a0 25 a0		        .word nt_refill, xt_slash_string, z_slash_string
>c115	2f 73 74 72 69 6e 67		        .text "/string"
.c11c					nt_refill:
>c11c	06 00				        .byte 6, 0
>c11e	2a c1 14 9b 55 9b		        .word nt_accept, xt_refill, z_refill
>c124	72 65 66 69 6c 6c		        .text "refill"
.c12a					nt_accept:
>c12a	06 18				        .byte 6, UF+NN
>c12c	38 c1 48 81 40 82		        .word nt_input_to_r, xt_accept, z_accept
>c132	61 63 63 65 70 74		        .text "accept"
.c138					nt_input_to_r:
>c138	07 08				        .byte 7, NN
>c13a	47 c1 7e 92 93 92		        .word nt_r_to_input, xt_input_to_r, z_input_to_r
>c140	69 6e 70 75 74 3e 72		        .text "input>r"
.c147					nt_r_to_input:
>c147	07 08				        .byte 7, NN
>c149	56 c1 bf 9a d6 9a		        .word nt_unused, xt_r_to_input, z_r_to_input
>c14f	72 3e 69 6e 70 75 74		        .text "r>input"
.c156					nt_unused:
>c156	06 00				        .byte 6, 0
>c158	64 c1 41 a6 50 a6		        .word nt_depth, xt_unused, z_unused
>c15e	75 6e 75 73 65 64		        .text "unused"
.c164					nt_depth:
>c164	05 00				        .byte 5, 0
>c166	71 c1 12 8b 20 8b		        .word nt_key, xt_depth, z_depth
>c16c	64 65 70 74 68			        .text "depth"
.c171					nt_key:
>c171	03 00				        .byte 3, 0
>c173	7c c1 4a 93 53 93		        .word nt_allot, xt_key, z_key
>c179	6b 65 79			        .text "key"
.c17c					nt_allot:
>c17c	05 10				        .byte 5, UF
>c17e	89 c1 a5 82 0d 83		        .word nt_create, xt_allot, z_allot
>c184	61 6c 6c 6f 74			        .text "allot"
.c189					nt_create:
>c189	06 00				        .byte 6, 0
>c18b	97 c1 85 89 59 8a		        .word nt_does, xt_create, z_create
>c191	63 72 65 61 74 65		        .text "create"
.c197					nt_does:
>c197	05 05				        .byte 5, CO+IM
>c199	a4 c1 11 8c 1f 8c		        .word nt_variable, xt_does, z_does
>c19f	64 6f 65 73 3e			        .text "does>"
.c1a4					nt_variable:
>c1a4	08 00				        .byte 8, 0
>c1a6	b4 c1 65 a6 7d a6		        .word nt_constant, xt_variable, z_variable
>c1ac	76 61 72 69 61 62 6c 65		        .text "variable"
.c1b4					nt_constant:
>c1b4	08 10				        .byte 8, UF
>c1b6	c4 c1 2d 89 6a 89		        .word nt_value, xt_constant, z_constant
>c1bc	63 6f 6e 73 74 61 6e 74		        .text "constant"
.c1c4					nt_value:
>c1c4	05 10				        .byte 5, UF
>c1c6	d1 c1 2d 89 6a 89		        .word nt_to, xt_constant, z_constant
>c1cc	76 61 6c 75 65			        .text "value"
.c1d1					nt_to:
>c1d1	02 0c				        .byte 2, NN+IM
>c1d3	db c1 1e a2 79 a2		        .word nt_s_to_d, xt_to, z_to
>c1d9	74 6f				        .text "to"
.c1db					nt_s_to_d:
>c1db	03 10				        .byte 3, UF
>c1dd	e6 c1 99 9e aa 9e		        .word nt_d_to_s, xt_s_to_d, z_s_to_d
>c1e3	73 3e 64			        .text "s>d"
.c1e6					nt_d_to_s:
>c1e6	03 10				        .byte 3, UF
>c1e8	f1 c1 9c 8a a1 8a		        .word nt_d_minus, xt_d_to_s, z_d_to_s
>c1ee	64 3e 73			        .text "d>s"
.c1f1					nt_d_minus:
>c1f1	02 10				        .byte 2, UF
>c1f3	fb c1 5a 8a 7a 8a		        .word nt_d_plus, xt_d_minus, z_d_minus
>c1f9	64 2d				        .text "d-"
.c1fb					nt_d_plus:
>c1fb	02 10				        .byte 2, UF
>c1fd	05 c2 7b 8a 9b 8a		        .word nt_erase, xt_d_plus, z_d_plus
>c203	64 2b				        .text "d+"
.c205					nt_erase:
>c205	05 00				        .byte 5, 0      ; underflow checked by FILL
>c207	12 c2 10 8f 58 8f		        .word nt_blank, xt_erase, z_erase
>c20d	65 72 61 73 65			        .text "erase"
.c212					nt_blank:
>c212	05 00				        .byte 5, 0     ; underflow checked by FILL
>c214	1f c2 06 8f 58 8f		        .word nt_fill, xt_blank, z_blank
>c21a	62 6c 61 6e 6b			        .text "blank"
.c21f					nt_fill:
>c21f	04 10				        .byte 4, UF
>c221	2b c2 16 8f 58 8f		        .word nt_find_name, xt_fill, z_fill
>c227	66 69 6c 6c			        .text "fill"
.c22b					nt_find_name:
>c22b	09 10				        .byte 9, UF
>c22d	3c c2 f7 8f a2 90		        .word nt_tick, xt_find_name, z_find_name
>c233	66 69 6e 64 2d 6e 61 6d		        .text "find-name"
>c23b	65
.c23c					nt_tick:
>c23c	01 00				        .byte 1, 0
>c23e	45 c2 fe a1 1d a2		        .word nt_bracket_tick, xt_tick, z_tick
>c244	27				        .text "'"
.c245					nt_bracket_tick:
>c245	03 05				        .byte 3, CO+IM
>c247	50 c2 ba 85 c0 85		        .word nt_name_to_int, xt_bracket_tick, z_bracket_tick
>c24d	5b 27 5d			        .text "[']"
.c250					nt_name_to_int:
>c250	08 10				        .byte 8, UF
>c252	60 c2 fd 95 19 96		        .word nt_int_to_name, xt_name_to_int, z_name_to_int
>c258	6e 61 6d 65 3e 69 6e 74		        .text "name>int"
.c260					nt_int_to_name:
>c260	08 10				        .byte 8, UF
>c262	70 c2 94 92 06 93		        .word nt_name_to_string, xt_int_to_name, z_int_to_name
>c268	69 6e 74 3e 6e 61 6d 65		        .text "int>name"
.c270					nt_name_to_string:
>c270	0b 10				        .byte 11, UF
>c272	83 c2 1a 96 33 96		        .word nt_to_body, xt_name_to_string, z_name_to_string
>c278	6e 61 6d 65 3e 73 74 72		        .text "name>string"
>c280	69 6e 67
.c283					nt_to_body:
>c283	05 10				        .byte 5, UF
>c285	90 c2 7a a2 9e a2		        .word nt_defer, xt_to_body, z_to_body
>c28b	3e 62 6f 64 79			        .text ">body"
.c290					nt_defer:
>c290	05 00				        .byte 5, 0
>c292	9d c2 c8 8a fa 8a		        .word nt_latestxt, xt_defer, z_defer
>c298	64 65 66 65 72			        .text "defer"
.c29d					nt_latestxt:
>c29d	08 00				        .byte 8, 0
>c29f	ad c2 65 93 6b 93		        .word nt_latestnt, xt_latestxt, z_latestxt
>c2a5	6c 61 74 65 73 74 78 74		        .text "latestxt"
.c2ad					nt_latestnt:
>c2ad	08 00				        .byte 8, 0
>c2af	bd c2 57 93 64 93		        .word nt_parse_name, xt_latestnt, z_latestnt
>c2b5	6c 61 74 65 73 74 6e 74		        .text "latestnt"
.c2bd					nt_parse_name:
>c2bd	0a 08				        .byte 10, NN
>c2bf	cf c2 fb 98 ed 99		        .word nt_parse, xt_parse_name, z_parse_name
>c2c5	70 61 72 73 65 2d 6e 61		        .text "parse-name"
>c2cd	6d 65
.c2cf					nt_parse:
>c2cf	05 10				        .byte 5, UF
>c2d1	dc c2 56 99 ed 99		        .word nt_execute_parsing, xt_parse, z_parse
>c2d7	70 61 72 73 65			        .text "parse"
.c2dc					nt_execute_parsing:
>c2dc	0f 10				        .byte 15, UF
>c2de	f3 c2 6d 8f 93 8f		        .word nt_source, xt_execute_parsing, z_execute_parsing
>c2e4	65 78 65 63 75 74 65 2d		        .text "execute-parsing"
>c2ec	70 61 72 73 69 6e 67
.c2f3					nt_source:
>c2f3	06 00				        .byte 6, 0
>c2f5	01 c3 eb a0 ff a0		        .word nt_source_id, xt_source, z_source
>c2fb	73 6f 75 72 63 65		        .text "source"
.c301					nt_source_id:
>c301	09 00				        .byte 9, 0
>c303	12 c3 00 a1 0a a1		        .word nt_colon, xt_source_id, z_source_id
>c309	73 6f 75 72 63 65 2d 69		        .text "source-id"
>c311	64
.c312					nt_colon:
>c312	01 00				        .byte 1, 0
>c314	1b c3 2b 87 6d 87		        .word nt_semicolon, xt_colon, z_colon
>c31a	3a				        .text ":"
.c31b					nt_semicolon:
>c31b	01 05				        .byte 1, CO+IM
>c31d	24 c3 75 9f d3 9f		        .word nt_colon_noname, xt_semicolon, z_semicolon
>c323	3b				        .text ";"
.c324					nt_colon_noname:
>c324	07 00				        .byte 7, 0
>c326	33 c3 6e 87 89 87		        .word nt_compile_comma, xt_colon_noname, z_colon_noname
>c32c	3a 6e 6f 6e 61 6d 65		        .text ":noname"
.c333					nt_compile_comma:
>c333	08 18				        .byte 8, UF+NN
>c335	43 c3 09 88 20 89		        .word nt_left_bracket, xt_compile_comma, z_compile_comma
>c33b	63 6f 6d 70 69 6c 65 2c		        .text "compile,"
.c343					nt_left_bracket:
>c343	01 05				        .byte 1, IM+CO
>c345	4c c3 71 93 75 93		        .word nt_right_bracket, xt_left_bracket, z_left_bracket
>c34b	5b				        .text "["
.c34c					nt_right_bracket:
>c34c	01 04				        .byte 1, IM
>c34e	55 c3 63 9b 69 9b		        .word nt_literal, xt_right_bracket, z_right_bracket
>c354	5d				        .text "]"
.c355					nt_literal:
>c355	07 15				        .byte 7, IM+CO+UF
>c357	64 c3 a6 93 b3 93		        .word nt_sliteral, xt_literal, z_literal
>c35d	6c 69 74 65 72 61 6c		        .text "literal"
.c364					nt_sliteral:
>c364	08 15				        .byte 8, CO+IM+UF
>c366	74 c3 26 a0 95 a0		        .word nt_dot_quote, xt_sliteral, z_sliteral
>c36c	73 6c 69 74 65 72 61 6c		        .text "sliteral"
.c374					nt_dot_quote:
>c374	02 05				        .byte 2, CO+IM
>c376	7e c3 83 8c 8d 8c		        .word nt_s_quote, xt_dot_quote, z_dot_quote
>c37c	2e 22				        .text ".", $22
.c37e					nt_s_quote:
>c37e	02 0c				        .byte 2, IM+NN
>c380	88 c3 6b 9d 98 9e		        .word nt_s_backslash_quote, xt_s_quote, z_s_quote
>c386	73 22				        .text "s", $22
.c388					nt_s_backslash_quote:
>c388	03 04				        .byte 3, IM
>c38a	93 c3 a3 9b ac 9b		        .word nt_postpone, xt_s_backslash_quote, z_s_backslash_quote
>c390	73 5c 22			        .text "s", $5C, $22
.c393					nt_postpone:
>c393	08 05				        .byte 8, IM+CO
>c395	a3 c3 32 9a 70 9a		        .word nt_immediate, xt_postpone, z_postpone
>c39b	70 6f 73 74 70 6f 6e 65		        .text "postpone"
.c3a3					nt_immediate:
>c3a3	09 00				        .byte 9, 0
>c3a5	b4 c3 67 92 72 92		        .word nt_compile_only, xt_immediate, z_immediate
>c3ab	69 6d 6d 65 64 69 61 74		        .text "immediate"
>c3b3	65
.c3b4					nt_compile_only:
>c3b4	0c 00				        .byte 12, 0
>c3b6	c8 c3 21 89 2c 89		        .word nt_never_native, xt_compile_only, z_compile_only
>c3bc	63 6f 6d 70 69 6c 65 2d		        .text "compile-only"
>c3c4	6f 6e 6c 79
.c3c8					nt_never_native:
>c3c8	0c 00				        .byte 12, 0
>c3ca	dc c3 50 96 5d 96		        .word nt_always_native, xt_never_native, z_never_native
>c3d0	6e 65 76 65 72 2d 6e 61		        .text "never-native"
>c3d8	74 69 76 65
.c3dc					nt_always_native:
>c3dc	0d 00				        .byte 13, 0
>c3de	f1 c3 2a 83 37 83		        .word nt_allow_native, xt_always_native, z_always_native
>c3e4	61 6c 77 61 79 73 2d 6e		        .text "always-native"
>c3ec	61 74 69 76 65
.c3f1					nt_allow_native:
>c3f1	0c 00				        .byte 12, 0
>c3f3	05 c4 0e 83 19 83		        .word nt_nc_limit, xt_allow_native, z_allow_native
>c3f9	61 6c 6c 6f 77 2d 6e 61		        .text "allow-native"
>c401	74 69 76 65
.c405					nt_nc_limit:
>c405	08 00				        .byte 8, 0
>c407	15 c4 34 96 3e 96		        .word nt_strip_underflow, xt_nc_limit, z_nc_limit
>c40d	6e 63 2d 6c 69 6d 69 74		        .text "nc-limit"
.c415					nt_strip_underflow:
>c415	0f 00				        .byte 15, 0
>c417	2c c4 90 a1 9a a1		        .word nt_abort, xt_strip_underflow, z_strip_underflow
>c41d	73 74 72 69 70 2d 75 6e		        .text "strip-underflow"
>c425	64 65 72 66 6c 6f 77
.c42c					nt_abort:
>c42c	05 00				        .byte 5, 0
>c42e	39 c4 70 80 bd 80		        .word nt_abort_quote, xt_abort, z_abort
>c434	61 62 6f 72 74			        .text "abort"
.c439					nt_abort_quote:
>c439	06 0d				        .byte 6, CO+IM+NN
>c43b	47 c4 13 81 1d 81		        .word nt_do, xt_abort_quote, z_abort_quote
>c441	61 62 6f 72 74 22		        .text "abort", $22
.c447					nt_do:
>c447	02 0d				        .byte 2, CO+IM+NN
>c449	51 c4 7e 8b d8 8b		        .word nt_question_do, xt_do, z_do
>c44f	64 6f				        .text "do"
.c451					nt_question_do:
>c451	03 0d				        .byte 3, CO+IM+NN
>c453	5c c4 78 8b d8 8b		        .word nt_i, xt_question_do, z_question_do
>c459	3f 64 6f			        .text "?do"
.c45c					nt_i:
>c45c	01 03				        .byte 1, AN+CO
>c45e	65 c4 05 92 1e 92		        .word nt_j, xt_i, z_i
>c464	69				        .text "i"
.c465					nt_j:
>c465	01 03				        .byte 1, AN+CO
>c467	6e c4 30 93 49 93		        .word nt_loop, xt_j, z_j
>c46d	6a				        .text "j"
.c46e					nt_loop:
>c46e	04 05				        .byte 4, CO+IM
>c470	7a c4 17 94 84 94		        .word nt_plus_loop, xt_loop, z_loop
>c476	6c 6f 6f 70			        .text "loop"
.c47a					nt_plus_loop:
>c47a	05 05				        .byte 5, CO+IM
>c47c	87 c4 1e 94 84 94		        .word nt_exit, xt_plus_loop, z_plus_loop
>c482	2b 6c 6f 6f 70			        .text "+loop"
.c487					nt_exit:
>c487	04 03				        .byte 4, AN+CO
>c489	93 c4 94 8f 95 8f		        .word nt_unloop, xt_exit, z_exit
>c48f	65 78 69 74			        .text "exit"
.c493					nt_unloop:
>c493	06 03				        .byte 6, AN+CO
>c495	a1 c4 2f a6 35 a6		        .word nt_leave, xt_unloop, z_unloop
>c49b	75 6e 6c 6f 6f 70		        .text "unloop"
.c4a1					nt_leave:
>c4a1	05 03				        .byte 5, AN+CO
>c4a3	ae c4 6c 93 71 93		        .word nt_recurse, xt_leave, z_leave
>c4a9	6c 65 61 76 65			        .text "leave"
.c4ae					nt_recurse:
>c4ae	07 0d				        .byte 7, CO+IM+NN
>c4b0	bd c4 d7 9a 13 9b		        .word nt_quit, xt_recurse, z_recurse
>c4b6	72 65 63 75 72 73 65		        .text "recurse"
.c4bd					nt_quit:
>c4bd	04 00				        .byte 4, 0
>c4bf	c9 c4 72 80 bd 80		        .word nt_begin, xt_quit, z_quit
>c4c5	71 75 69 74			        .text "quit"
.c4c9					nt_begin:
>c4c9	05 07				        .byte 5, AN+CO+IM
>c4cb	d6 c4 ac 83 af 83		        .word nt_again, xt_begin, z_begin
>c4d1	62 65 67 69 6e			        .text "begin"
.c4d6					nt_again:
>c4d6	05 17				        .byte 5, AN+CO+IM+UF
>c4d8	e3 c4 83 82 a3 82		        .word nt_state, xt_again, z_again
>c4de	61 67 61 69 6e			        .text "again"
.c4e3					nt_state:
>c4e3	05 00				        .byte 5, 0
>c4e5	f0 c4 6f a1 79 a1		        .word nt_evaluate, xt_state, z_state
>c4eb	73 74 61 74 65			        .text "state"
.c4f0					nt_evaluate:
>c4f0	08 10				        .byte 8, UF
>c4f2	00 c5 f1 90 44 91		        .word nt_base, xt_evaluate, z_evaluate
>c4f8	65 76 61 6c 75 61 74 65		        .text "evaluate"
.c500					nt_base:
>c500	04 00				        .byte 4, 0
>c502	0c c5 a3 83 ab 83		        .word nt_digit_question, xt_base, z_base
>c508	62 61 73 65			        .text "base"
.c50c					nt_digit_question:
>c50c	06 10				        .byte 6, UF
>c50e	1a c5 21 8b 55 8b		        .word nt_number, xt_digit_question, z_digit_question
>c514	64 69 67 69 74 3f		        .text "digit?"
.c51a					nt_number:
>c51a	06 10				        .byte 6, UF
>c51c	28 c5 a6 96 a2 97		        .word nt_to_number, xt_number, z_number
>c522	6e 75 6d 62 65 72		        .text "number"
.c528					nt_to_number:
>c528	07 10				        .byte 7, UF
>c52a	37 c5 aa a2 49 a3		        .word nt_hex, xt_to_number, z_to_number
>c530	3e 6e 75 6d 62 65 72		        .text ">number"
.c537					nt_hex:
>c537	03 00				        .byte 3, 0
>c539	42 c5 99 91 9f 91		        .word nt_decimal, xt_hex, z_hex
>c53f	68 65 78			        .text "hex"
.c542					nt_decimal:
>c542	07 00				        .byte 7, 0
>c544	51 c5 c1 8a c7 8a		        .word nt_count, xt_decimal, z_decimal
>c54a	64 65 63 69 6d 61 6c		        .text "decimal"
.c551					nt_count:
>c551	05 10				        .byte 5, UF
>c553	5e c5 6b 89 7e 89		        .word nt_m_star, xt_count, z_count
>c559	63 6f 75 6e 74			        .text "count"
.c55e					nt_m_star:
>c55e	02 10				        .byte 2, UF
>c560	68 c5 aa 94 c4 94		        .word nt_um_star, xt_m_star, z_m_star
>c566	6d 2a				        .text "m*"
.c568					nt_um_star:
>c568	03 10				        .byte 3, UF
>c56a	73 c5 e9 a5 2e a6		        .word nt_star, xt_um_star, z_um_star
>c570	75 6d 2a			        .text "um*"
.c573					nt_star:
>c573	01 10				        .byte 1, UF
>c575	7c c5 4d a1 55 a1		        .word nt_um_slash_mod, xt_star, z_star
>c57b	2a				        .text "*"
.c57c					nt_um_slash_mod:
>c57c	06 10				        .byte 6, UF
>c57e	8a c5 a7 a5 e8 a5		        .word nt_sm_slash_rem, xt_um_slash_mod, z_um_slash_mod
>c584	75 6d 2f 6d 6f 64		        .text "um/mod"
.c58a					nt_sm_slash_rem:
>c58a	06 10				        .byte 6, UF
>c58c	98 c5 c2 a0 ea a0		        .word nt_fm_slash_mod, xt_sm_slash_rem, z_sm_slash_rem
>c592	73 6d 2f 72 65 6d		        .text "sm/rem"
.c598					nt_fm_slash_mod:
>c598	06 10				        .byte 6, UF
>c59a	a6 c5 ad 90 e3 90		        .word nt_slash, xt_fm_slash_mod, z_fm_slash_mod
>c5a0	66 6d 2f 6d 6f 64		        .text "fm/mod"
.c5a6					nt_slash:
>c5a6	01 10				        .byte 1, UF
>c5a8	af c5 e9 9f 05 a0		        .word nt_slash_mod, xt_slash, z_slash
>c5ae	2f				        .text "/"
.c5af					nt_slash_mod:
>c5af	04 10				        .byte 4, UF
>c5b1	bb c5 ee 9f 05 a0		        .word nt_mod, xt_slash_mod, z_slash_mod
>c5b7	2f 6d 6f 64			        .text "/mod"
.c5bb					nt_mod:
>c5bb	03 10				        .byte 3, UF
>c5bd	c6 c5 d5 95 dd 95		        .word nt_star_slash_mod, xt_mod, z_mod
>c5c3	6d 6f 64			        .text "mod"
.c5c6					nt_star_slash_mod:
>c5c6	05 10				        .byte 5, UF
>c5c8	d3 c5 5f a1 6e a1		        .word nt_star_slash, xt_star_slash_mod, z_star_slash_mod
>c5ce	2a 2f 6d 6f 64			        .text "*/mod"
.c5d3					nt_star_slash:
>c5d3	02 10				        .byte 2, UF
>c5d5	dd c5 56 a1 5e a1		        .word nt_backslash, xt_star_slash, z_star_slash
>c5db	2a 2f				        .text "*/"
.c5dd					nt_backslash:
>c5dd	01 04				        .byte 1, IM
>c5df	e6 c5 78 83 a2 83		        .word nt_move, xt_backslash, z_backslash
>c5e5	5c				        .byte $5c
.c5e6					nt_move:
>c5e6	04 18				        .byte 4, NN+UF
>c5e8	f2 c5 de 95 fc 95		        .word nt_cmove_up, xt_move, z_move
>c5ee	6d 6f 76 65			        .text "move"
.c5f2					nt_cmove_up:
>c5f2	06 10				        .byte 6, UF
>c5f4	00 c6 f0 86 2a 87		        .word nt_cmove, xt_cmove_up, z_cmove_up
>c5fa	63 6d 6f 76 65 3e		        .text "cmove>"
.c600					nt_cmove:
>c600	05 10				        .byte 5, UF
>c602	0d c6 b5 86 ef 86		        .word nt_pad, xt_cmove, z_cmove
>c608	63 6d 6f 76 65			        .text "cmove"
.c60d					nt_pad:
>c60d	03 00				        .byte 3, 0
>c60f	18 c6 bd 98 cc 98		        .word nt_cleave, xt_pad, z_pad
>c615	70 61 64			        .text "pad"
.c618					nt_cleave:
>c618	06 10				        .byte 6, UF
>c61a	26 c6 68 86 b4 86		        .word nt_hexstore, xt_cleave, z_cleave
>c620	63 6c 65 61 76 65		        .text "cleave"
.c626					nt_hexstore:
>c626	08 10				        .byte 8, UF
>c628	36 c6 a0 91 f2 91		        .word nt_within, xt_hexstore, z_hexstore
>c62e	68 65 78 73 74 6f 72 65		        .text "hexstore"
.c636					nt_within:
>c636	06 10				        .byte 6, UF
>c638	44 c6 92 a6 a7 a6		        .word nt_to_in, xt_within, z_within
>c63e	77 69 74 68 69 6e		        .text "within"
.c644					nt_to_in:
>c644	03 00				        .byte 3, 0
>c646	4f c6 9f a2 a9 a2		        .word nt_less_number_sign, xt_to_in, z_to_in
>c64c	3e 69 6e			        .text ">in"
.c64f					nt_less_number_sign:
>c64f	02 00				        .byte 2, 0
>c651	59 c6 76 93 83 93		        .word nt_number_sign, xt_less_number_sign, z_less_number_sign
>c657	3c 23				        .text "<#"
.c659					nt_number_sign:
>c659	01 10				        .byte 1, UF
>c65b	62 c6 a3 97 d7 97		        .word nt_number_sign_s, xt_number_sign, z_number_sign
>c661	23				        .text "#"
.c662					nt_number_sign_s:
>c662	02 10				        .byte 2, UF
>c664	6c c6 fa 97 0a 98		        .word nt_number_sign_greater, xt_number_sign_s, z_number_sign_s
>c66a	23 73				        .text "#s"
.c66c					nt_number_sign_greater:
>c66c	02 10				        .byte 2, UF
>c66e	76 c6 d8 97 f9 97		        .word nt_hold, xt_number_sign_greater, z_number_sign_greater
>c674	23 3e				        .text "#>"
.c676					nt_hold:
>c676	04 10				        .byte 4, UF
>c678	82 c6 f3 91 04 92		        .word nt_sign, xt_hold, z_hold
>c67e	68 6f 6c 64			        .text "hold"
.c682					nt_sign:
>c682	04 10				        .byte 4, UF
>c684	8e c6 d4 9f e8 9f		        .word nt_output, xt_sign, z_sign
>c68a	73 69 67 6e			        .text "sign"
.c68e					nt_output:
>c68e	06 00				        .byte 6, 0
>c690	9c c6 a4 98 ae 98		        .word nt_input, xt_output, z_output
>c696	6f 75 74 70 75 74		        .text "output"
.c69c					nt_input:
>c69c	05 00				        .byte 5, 0
>c69e	a9 c6 73 92 7d 92		        .word nt_cr, xt_input, z_input
>c6a4	69 6e 70 75 74			        .text "input"
.c6a9					nt_cr:
>c6a9	02 00				        .byte 2, 0
>c6ab	b3 c6 7f 89 84 89		        .word nt_page, xt_cr, z_cr
>c6b1	63 72				        .text "cr"
.c6b3					nt_page:
>c6b3	04 00				        .byte 4, 0
>c6b5	bf c6 cd 98 ea 98		        .word nt_at_xy, xt_page, z_page
>c6bb	70 61 67 65			        .text "page"
.c6bf					nt_at_xy:
>c6bf	05 10				        .byte 5, UF
>c6c1	cc c6 4a 83 77 83		        .word nt_marker, xt_at_xy, z_at_xy
>c6c7	61 74 2d 78 79			        .text "at-xy"
.c6cc					nt_marker:
>c6cc	06 04				        .byte 6, IM
>c6ce	da c6 c5 94 02 95		        .word nt_words, xt_marker, z_marker
>c6d4	6d 61 72 6b 65 72		        .text "marker"
.c6da					nt_words:
>c6da	05 00				        .byte 5, 0
>c6dc	e7 c6 05 a7 61 a7		        .word nt_wordsize, xt_words, z_words
>c6e2	77 6f 72 64 73			        .text "words"
.c6e7					nt_wordsize:
>c6e7	08 10				        .byte 8, UF
>c6e9	f7 c6 62 a7 82 a7		        .word nt_aligned, xt_wordsize, z_wordsize
>c6ef	77 6f 72 64 73 69 7a 65		        .text "wordsize"
.c6f7					nt_aligned:
>c6f7	07 00				        .byte 7, 0
>c6f9	06 c7 a4 82 a4 82		        .word nt_align, xt_align, z_align
>c6ff	61 6c 69 67 6e 65 64		        .text "aligned"
.c706					nt_align:
>c706	05 00				        .byte 5, 0
>c708	13 c7 a4 82 a4 82		        .word nt_bell, xt_align, z_align
>c70e	61 6c 69 67 6e			        .text "align"
.c713					nt_bell:
>c713	04 00				        .byte 4, 0
>c715	1f c7 b0 83 b5 83		        .word nt_dump, xt_bell, z_bell
>c71b	62 65 6c 6c			        .text "bell"
.c71f					nt_dump:
>c71f	04 10				        .byte 4, UF
>c721	2b c7 50 8d b6 8d		        .word nt_dot_s, xt_dump, z_dump
>c727	64 75 6d 70			        .text "dump"
.c72b					nt_dot_s:
>c72b	02 00				        .byte 2, 0
>c72d	35 c7 bc 8c ff 8c		        .word +, xt_dot_s, z_dot_s
>c733	2e 73				        .text ".s"
.c735					+
.c735					nt_disasm:
>c735	06 10				        .byte 6, UF
>c737	43 c7 56 8b 5c 8b		        .word +, xt_disasm, z_disasm
>c73d	64 69 73 61 73 6d		        .text "disasm"
.c743					+
.c743					nt_compare:
>c743	07 10				        .byte 7, UF
>c745	52 c7 a4 87 08 88		        .word nt_search, xt_compare, z_compare
>c74b	63 6f 6d 70 61 72 65		        .text "compare"
.c752					nt_search:
>c752	06 18				        .byte 6, UF+NN
>c754	60 c7 d6 9e 74 9f		        .word +, xt_search, z_search
>c75a	73 65 61 72 63 68		        .text "search"
.c760					+
.c760					nt_environment_q:
>c760	0c 10				        .byte 12, UF
>c762	74 c7 31 8e ad 8e		        .word +, xt_environment_q, z_environment_q
>c768	65 6e 76 69 72 6f 6e 6d		        .text "environment?"
>c770	65 6e 74 3f
.c774					+
.c774					nt_find:
>c774	04 10				        .byte 4, UF
>c776	80 c7 af 8f f6 8f		        .word nt_word, xt_find, z_find
>c77c	66 69 6e 64			        .text "find"
.c780					nt_word:
>c780	04 10				        .byte 4, UF
>c782	8c c7 a8 a6 ed a6		        .word nt_paren, xt_word, z_word
>c788	77 6f 72 64			        .text "word"
.c78c					nt_paren:
>c78c	01 04				        .byte 1, IM
>c78e	95 c7 eb 98 fa 98		        .word nt_dot_paren, xt_paren, z_paren
>c794	28				        .text "("
.c795					nt_dot_paren:
>c795	02 04				        .byte 2, IM
>c797	9f c7 74 8c 82 8c		        .word nt_if, xt_dot_paren, z_dot_paren
>c79d	2e 28				        .text ".("
.c79f					nt_if:
>c79f	02 0d				        .byte 2, IM+CO+NN
>c7a1	a9 c7 1f 92 2f 92		        .word nt_then, xt_if, z_if
>c7a7	69 66				        .text "if"
.c7a9					nt_then:
>c7a9	04 0d				        .byte 4, IM+CO+NN
>c7ab	b5 c7 af a1 b8 a1		        .word nt_else, xt_then, z_then
>c7b1	74 68 65 6e			        .text "then"
.c7b5					nt_else:
>c7b5	04 0d				        .byte 4, IM+CO+NN
>c7b7	c1 c7 dd 8d f6 8d		        .word nt_repeat, xt_else, z_else
>c7bd	65 6c 73 65			        .text "else"
.c7c1					nt_repeat:
>c7c1	06 0d				        .byte 6, IM+CO+NN
>c7c3	cf c7 56 9b 62 9b		        .word nt_until, xt_repeat, z_repeat
>c7c9	72 65 70 65 61 74		        .text "repeat"
.c7cf					nt_until:
>c7cf	05 0d				        .byte 5, IM+CO+NN
>c7d1	dc c7 36 a6 40 a6		        .word nt_while, xt_until, z_until
>c7d7	75 6e 74 69 6c			        .text "until"
.c7dc					nt_while:
>c7dc	05 0d				        .byte 5, IM+CO+NN
>c7de	e9 c7 7e a6 91 a6		        .word nt_case, xt_while, z_while
>c7e4	77 68 69 6c 65			        .text "while"
.c7e9					nt_case:
>c7e9	04 0d				        .byte 4, IM+CO+NN
>c7eb	f5 c7 95 a7 9b a7		        .word nt_of, xt_case, z_case    ; shares code with ZERO
>c7f1	63 61 73 65			        .text "case"
.c7f5					nt_of:
>c7f5	02 0d				        .byte 2, IM+CO+NN
>c7f7	ff c7 0b 98 23 98		        .word nt_endof, xt_of, z_of
>c7fd	6f 66				        .text "of"
.c7ff					nt_endof:
>c7ff	05 0d				        .byte 5, IM+CO+NN
>c801	0c c8 dd 8d f6 8d		        .word nt_endcase, xt_endof, z_endof ; shares code with ELSE
>c807	65 6e 64 6f 66			        .text "endof"
.c80c					nt_endcase:
>c80c	07 0d				        .byte 7, IM+CO+NN
>c80e	1b c8 1c 8e 30 8e		        .word nt_defer_fetch, xt_endcase, z_endcase
>c814	65 6e 64 63 61 73 65		        .text "endcase"
.c81b					nt_defer_fetch:
>c81b	06 00				        .byte 6, 0
>c81d	29 c8 fb 8a 01 8b		        .word nt_defer_store, xt_defer_fetch, z_defer_fetch
>c823	64 65 66 65 72 40		        .text "defer@"
.c829					nt_defer_store:
>c829	06 00				        .byte 6, 0
>c82b	37 c8 02 8b 08 8b		        .word nt_is, xt_defer_store, z_defer_store
>c831	64 65 66 65 72 21		        .text "defer!"
.c837					nt_is:
>c837	02 04				        .byte 2, IM
>c839	41 c8 17 93 2f 93		        .word nt_action_of, xt_is, z_is
>c83f	69 73				        .text "is"
.c841					nt_action_of:
>c841	09 04				        .byte 9, IM
>c843	52 c8 6a 82 82 82		        .word nt_useraddr, xt_action_of, z_action_of
>c849	61 63 74 69 6f 6e 2d 6f		        .text "action-of"
>c851	66
.c852					nt_useraddr:
>c852	08 00				        .byte 8, 0
>c854	62 c8 5a a6 64 a6		        .word nt_buffer_colon, xt_useraddr, z_useraddr
>c85a	75 73 65 72 61 64 64 72		        .text "useraddr"
.c862					nt_buffer_colon:
>c862	07 00				        .byte 7, 0
>c864	71 c8 02 86 08 86		        .word +, xt_buffer_colon, z_buffer_colon
>c86a	62 75 66 66 65 72 3a		        .text "buffer:"
.c871					+
.c871					nt_buffstatus:
>c871	0a 00				        .byte 10, 0
>c873	83 c8 09 86 18 86		        .word nt_buffblocknum, xt_buffstatus, z_buffstatus
>c879	62 75 66 66 73 74 61 74		        .text "buffstatus"
>c881	75 73
.c883					nt_buffblocknum:
>c883	0c 00				        .byte 12, 0
>c885	97 c8 c1 85 d0 85		        .word nt_blkbuffer, xt_buffblocknum, z_buffblocknum
>c88b	62 75 66 66 62 6c 6f 63		        .text "buffblocknum"
>c893	6b 6e 75 6d
.c897					nt_blkbuffer:
>c897	09 00				        .byte 9, 0
>c899	a8 c8 cf 83 dc 83		        .word nt_scr, xt_blkbuffer, z_blkbuffer
>c89f	62 6c 6b 62 75 66 66 65		        .text "blkbuffer"
>c8a7	72
.c8a8					nt_scr:
>c8a8	03 00				        .byte 3, 0
>c8aa	b3 c8 c6 9e d5 9e		        .word nt_blk, xt_scr, z_scr
>c8b0	73 63 72			        .text "scr"
.c8b3					nt_blk:
>c8b3	03 00				        .byte 3, 0
>c8b5	be c8 bf 83 ce 83		        .word nt_block_write, xt_blk, z_blk
>c8bb	62 6c 6b			        .text "blk"
.c8be					nt_block_write:
>c8be	0b 08				        .byte 11, NN ; Deferred words need the HC (Code Field) flag.
>c8c0	d1 c8 7c 85 8a 85		        .word nt_block_write_vector, xt_block_write, z_block_write
>c8c6	62 6c 6f 63 6b 2d 77 72		        .text "block-write"
>c8ce	69 74 65
.c8d1					nt_block_write_vector:
>c8d1	12 08				        .byte 18, NN ; Deferred words need the HC (Code Field) flag.
>c8d3	eb c8 8a 85 99 85		        .word nt_block_read, xt_block_write_vector, z_block_write_vector
>c8d9	62 6c 6f 63 6b 2d 77 72		        .text "block-write-vector"
>c8e1	69 74 65 2d 76 65 63 74 6f 72
.c8eb					nt_block_read:
>c8eb	0a 28				        .byte 10, HC+NN ; Deferred words need the HC (Code Field) flag.
>c8ed	fd c8 59 85 67 85		        .word nt_block_read_vector, xt_block_read, z_block_read
>c8f3	62 6c 6f 63 6b 2d 72 65		        .text "block-read"
>c8fb	61 64
.c8fd					nt_block_read_vector:
>c8fd	11 28				        .byte 17, HC+NN ; Deferred words need the HC (Code Field) flag.
>c8ff	16 c9 67 85 76 85		        .word nt_save_buffers, xt_block_read_vector, z_block_read_vector
>c905	62 6c 6f 63 6b 2d 72 65		        .text "block-read-vector"
>c90d	61 64 2d 76 65 63 74 6f 72
.c916					nt_save_buffers:
>c916	0c 00				        .byte 12, 0
>c918	2a c9 ab 9e c5 9e		        .word nt_block, xt_save_buffers, z_save_buffers
>c91e	73 61 76 65 2d 62 75 66		        .text "save-buffers"
>c926	66 65 72 73
.c92a					nt_block:
>c92a	05 00				        .byte 5, 0
>c92c	37 c9 dd 83 2f 84		        .word nt_update, xt_block, z_block
>c932	62 6c 6f 63 6b			        .text "block"
.c937					nt_update:
>c937	06 00				        .byte 6, 0
>c939	45 c9 51 a6 59 a6		        .word nt_buffer, xt_update, z_update
>c93f	75 70 64 61 74 65		        .text "update"
.c945					nt_buffer:
>c945	06 00				        .byte 6, 0
>c947	53 c9 d1 85 01 86		        .word nt_empty_buffers, xt_buffer, z_buffer
>c94d	62 75 66 66 65 72		        .text "buffer"
.c953					nt_empty_buffers:
>c953	0d 00				        .byte 13, 0
>c955	68 c9 15 8e 1b 8e		        .word nt_flush, xt_empty_buffers, z_empty_buffers
>c95b	65 6d 70 74 79 2d 62 75		        .text "empty-buffers"
>c963	66 66 65 72 73
.c968					nt_flush:
>c968	05 00				        .byte 5, 0
>c96a	75 c9 a3 90 ac 90		        .word nt_load, xt_flush, z_flush
>c970	66 6c 75 73 68			        .text "flush"
.c975					nt_load:
>c975	04 10				        .byte 4, UF
>c977	81 c9 d3 93 16 94		        .word nt_thru, xt_load, z_load
>c97d	6c 6f 61 64			        .text "load"
.c981					nt_thru:
>c981	04 10				        .byte 4, UF
>c983	8d c9 b9 a1 fd a1		        .word nt_list, xt_thru, z_thru
>c989	74 68 72 75			        .text "thru"
.c98d					nt_list:
>c98d	04 10				        .byte 4, UF
>c98f	99 c9 99 93 a5 93		        .word +, xt_list, z_list
>c995	6c 69 73 74			        .text "list"
.c999					+
.c999					nt_block_ramdrive_init:
>c999	13 10				        .byte 19, UF
>c99b	b4 c9 30 84 58 85		        .word +, xt_block_ramdrive_init, z_block_ramdrive_init
>c9a1	62 6c 6f 63 6b 2d 72 61		        .text "block-ramdrive-init"
>c9a9	6d 64 72 69 76 65 2d 69 6e 69 74
.c9b4					+
.c9b4					nt_definitions:
>c9b4	0b 00				        .byte 11, 0
>c9b6	c7 c9 09 8b 11 8b		        .word nt_wordlist, xt_definitions, z_definitions
>c9bc	64 65 66 69 6e 69 74 69		        .text "definitions"
>c9c4	6f 6e 73
.c9c7					nt_wordlist:
>c9c7	08 00				        .byte 8, 0
>c9c9	d7 c9 ee a6 04 a7		        .word nt_search_wordlist, xt_wordlist, z_wordlist
>c9cf	77 6f 72 64 6c 69 73 74		        .text "wordlist"
.c9d7					nt_search_wordlist:
>c9d7	0f 10				        .byte 15, UF
>c9d9	ee c9 bc 9b 9c 9c		        .word nt_set_current, xt_search_wordlist, z_search_wordlist
>c9df	73 65 61 72 63 68 2d 77		        .text "search-wordlist"
>c9e7	6f 72 64 6c 69 73 74
.c9ee					nt_set_current:
>c9ee	0b 10				        .byte 11, UF
>c9f0	01 ca 2b 9d 36 9d		        .word nt_get_current, xt_set_current, z_set_current
>c9f6	73 65 74 2d 63 75 72 72		        .text "set-current"
>c9fe	65 6e 74
.ca01					nt_get_current:
>ca01	0b 00				        .byte 11, 0
>ca03	14 ca 45 91 4f 91		        .word nt_set_order, xt_get_current, z_get_current
>ca09	67 65 74 2d 63 75 72 72		        .text "get-current"
>ca11	65 6e 74
.ca14					nt_set_order:
>ca14	09 00				        .byte 9, 0
>ca16	25 ca 37 9d 6a 9d		        .word nt_get_order, xt_set_order, z_set_order
>ca1c	73 65 74 2d 6f 72 64 65		        .text "set-order"
>ca24	72
.ca25					nt_get_order:
>ca25	09 00				        .byte 9, 0
>ca27	36 ca 50 91 78 91		        .word nt_root_wordlist, xt_get_order, z_get_order
>ca2d	67 65 74 2d 6f 72 64 65		        .text "get-order"
>ca35	72
.ca36					nt_root_wordlist:
>ca36	0d 00				        .byte 13, 0
>ca38	4b ca 6a 9b 72 9b		        .word +, xt_root_wordlist, z_root_wordlist
>ca3e	72 6f 6f 74 2d 77 6f 72		        .text "root-wordlist"
>ca46	64 6c 69 73 74
.ca4b					+
.ca4b					nt_assembler_wordlist:
>ca4b	12 00				        .byte 18, 0
>ca4d	65 ca 94 a3 9c a3		        .word +, xt_assembler_wordlist, z_assembler_wordlist
>ca53	61 73 73 65 6d 62 6c 65		        .text "assembler-wordlist"
>ca5b	72 2d 77 6f 72 64 6c 69 73 74
.ca65					+
.ca65					nt_editor_wordlist:
>ca65	0f 00				        .byte 15, 0
>ca67	7c ca 24 98 2c 98		        .word +, xt_editor_wordlist, z_editor_wordlist
>ca6d	65 64 69 74 6f 72 2d 77		        .text "editor-wordlist"
>ca75	6f 72 64 6c 69 73 74
.ca7c					+
.ca7c					nt_forth_wordlist:
>ca7c	0e 00				        .byte 14, 0
>ca7e	92 ca 95 a7 9b a7		        .word nt_only, xt_forth_wordlist, z_forth_wordlist
>ca84	66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>ca8c	72 64 6c 69 73 74
.ca92					nt_only:
>ca92	04 00				        .byte 4, 0
>ca94	9e ca 43 98 4e 98		        .word nt_also, xt_only, z_only
>ca9a	6f 6e 6c 79			        .text "only"
.ca9e					nt_also:
>ca9e	04 00				        .byte 4, 0
>caa0	aa ca 1a 83 29 83		        .word nt_previous, xt_also, z_also
>caa6	61 6c 73 6f			        .text "also"
.caaa					nt_previous:
>caaa	08 00				        .byte 8, 0
>caac	ba ca 71 9a 7d 9a		        .word nt_to_order, xt_previous, z_previous
>cab2	70 72 65 76 69 6f 75 73		        .text "previous"
.caba					nt_to_order:
>caba	06 00				        .byte 6, 0
>cabc	c8 ca 4a a3 5c a3		        .word nt_order, xt_to_order, z_to_order
>cac2	3e 6f 72 64 65 72		        .text ">order"
.cac8					nt_order:
>cac8	05 00				        .byte 5, 0
>caca	d5 ca 61 98 8b 98		        .word nt_forth, xt_order, z_order
>cad0	6f 72 64 65 72			        .text "order"
.cad5					nt_forth:
>cad5	05 00				        .byte 5, 0
>cad7	e2 ca e4 90 ea 90		        .word +, xt_forth, z_forth
>cadd	66 6f 72 74 68			        .text "forth"
.cae2					+
>cae2	03 08				nt_see: .byte 3, NN
>cae4	ed ca 9d 9c 2a 9d		        .word +, xt_see, z_see
>caea	73 65 65			        .text "see"
.caed					+
.caed					nt_ed:
>caed	02 08				        .byte 2, NN
>caef	f7 ca d9 8d dc 8d		        .word +, xt_ed, z_ed
>caf5	65 64				        .text "ed"
.caf7					+
.caf7					nt_cold:
>caf7	04 00				        .byte 4, 0
>caf9	03 cb 00 80 bd 80		        .word nt_bye, xt_cold, z_cold
>caff	63 6f 6c 64			        .text "cold"
.cb03					nt_bye:
>cb03	03				        .byte 3         ; length of word strings
>cb04	00				        .byte 0         ; status byte
>cb05	00 00				        .word 0000      ; next word in Dictionary, 0000 signals end
>cb07	19 86				        .word xt_bye    ; start of code block (xt of this word)
>cb09	1c 86				        .word z_bye     ; end of code (RTS)
>cb0b	62 79 65			        .text "bye"     ; word name, always lower case, not zero-terminated
.cb0e					root_dictionary_start:
.cb0e					nt_root_set_order:
>cb0e	09 00				        .byte 9, 0
>cb10	1f cb 37 9d 6a 9d		        .word nt_root_forth, xt_set_order, z_set_order
>cb16	73 65 74 2d 6f 72 64 65		        .text "set-order"
>cb1e	72
.cb1f					nt_root_forth:
>cb1f	05 00				        .byte 5, 0
>cb21	2c cb e4 90 ea 90		        .word nt_root_forth_wordlist, xt_forth, z_forth
>cb27	66 6f 72 74 68			        .text "forth"
.cb2c					nt_root_forth_wordlist:
>cb2c	0e 00				        .byte 14, 0
>cb2e	42 cb 95 a7 9b a7		        .word nt_root_words, xt_forth_wordlist, z_forth_wordlist
>cb34	66 6f 72 74 68 2d 77 6f		        .text "forth-wordlist"
>cb3c	72 64 6c 69 73 74
.cb42					nt_root_words:
>cb42	05 00				        .byte 5, 0
>cb44	00 00 05 a7 61 a7		        .word 0000, xt_words, z_words
>cb4a	77 6f 72 64 73			        .text "words"
.cb4f					editor_dictionary_start:
.cb4f					nt_editor_o:
>cb4f	01 00				        .byte 1, 0
>cb51	58 cb c8 a8 0d a9		        .word nt_editor_line, xt_editor_o, z_editor_o
>cb57	6f				        .text "o"
.cb58					nt_editor_line:
>cb58	04 10				        .byte 4, UF
>cb5a	64 cb af a8 c7 a8		        .word nt_editor_l, xt_editor_line, z_editor_line
>cb60	6c 69 6e 65			        .text "line"
.cb64					nt_editor_l:
>cb64	01 00				        .byte 1, 0
>cb66	6d cb 33 a8 ae a8		        .word nt_editor_el, xt_editor_l, z_editor_l
>cb6c	6c				        .text "l"
.cb6d					nt_editor_el:
>cb6d	02 00				        .byte 2, 0
>cb6f	77 cb 21 a8 32 a8		        .word nt_editor_erase_screen, xt_editor_el, z_editor_el
>cb75	65 6c				        .text "el"
.cb77					nt_editor_erase_screen:
>cb77	0c 00				        .byte 12, 0
>cb79	8b cb 0f a8 20 a8		        .word nt_editor_enter_screen, xt_editor_erase_screen, z_editor_erase_screen
>cb7f	65 72 61 73 65 2d 73 63		        .text "erase-screen"
>cb87	72 65 65 6e
.cb8b					nt_editor_enter_screen:
>cb8b	0c 00				        .byte 12, 0
>cb8d	00 00 f3 a7 0e a8		        .word 0000, xt_editor_enter_screen, z_editor_enter_screen
>cb93	65 6e 74 65 72 2d 73 63		        .text "enter-screen"
>cb9b	72 65 65 6e
.cb9f					assembler_dictionary_start:
.cb9f					nt_asm_adc_h:
>cb9f	05 0c						.byte 5, IM+NN
>cba1	ac cb				                .word nt_asm_adc_x
>cba3	0e a9 13 a9					.word xt_asm_adc_h, z_asm_adc_h
>cba7	61 64 63 2e 23					.text "adc.#"
.cbac					nt_asm_adc_x:
>cbac	05 0c						.byte 5, IM+NN
>cbae	b9 cb				                .word nt_asm_adc_y
>cbb0	13 a9 18 a9					.word xt_asm_adc_x, z_asm_adc_x
>cbb4	61 64 63 2e 78					.text "adc.x"
.cbb9					nt_asm_adc_y:
>cbb9	05 0c						.byte 5, IM+NN
>cbbb	c6 cb				                .word nt_asm_adc_z
>cbbd	18 a9 1d a9					.word xt_asm_adc_y, z_asm_adc_y
>cbc1	61 64 63 2e 79					.text "adc.y"
.cbc6					nt_asm_adc_z:
>cbc6	05 0c						.byte 5, IM+NN
>cbc8	d3 cb				                .word nt_asm_adc_zi
>cbca	1d a9 22 a9					.word xt_asm_adc_z, z_asm_adc_z
>cbce	61 64 63 2e 7a					.text "adc.z"
.cbd3					nt_asm_adc_zi:
>cbd3	06 0c						.byte 6, IM+NN
>cbd5	e1 cb				                .word nt_asm_adc_ziy
>cbd7	22 a9 27 a9					.word xt_asm_adc_zi, z_asm_adc_zi
>cbdb	61 64 63 2e 7a 69				.text "adc.zi"
.cbe1					nt_asm_adc_ziy:
>cbe1	07 0c						.byte 7, IM+NN
>cbe3	f0 cb				                .word nt_asm_adc_zx
>cbe5	27 a9 2c a9					.word xt_asm_adc_ziy, z_asm_adc_ziy
>cbe9	61 64 63 2e 7a 69 79				.text "adc.ziy"
.cbf0					nt_asm_adc_zx:
>cbf0	06 0c						.byte 6, IM+NN
>cbf2	fe cb				                .word nt_asm_adc_zxi
>cbf4	2c a9 31 a9					.word xt_asm_adc_zx, z_asm_adc_zx
>cbf8	61 64 63 2e 7a 78				.text "adc.zx"
.cbfe					nt_asm_adc_zxi:
>cbfe	07 0c						.byte 7, IM+NN
>cc00	0d cc				                .word nt_asm_and
>cc02	31 a9 36 a9					.word xt_asm_adc_zxi, z_asm_adc_zxi
>cc06	61 64 63 2e 7a 78 69				.text "adc.zxi"
.cc0d					nt_asm_and:
>cc0d	04 0c						.byte 4, IM+NN
>cc0f	19 cc				                .word nt_asm_and_h
>cc11	36 a9 3b a9					.word xt_asm_and, z_asm_and
>cc15	61 6e 64 2e					.text "and."
.cc19					nt_asm_and_h:
>cc19	05 0c						.byte 5, IM+NN
>cc1b	26 cc				                .word nt_asm_and_x
>cc1d	3b a9 40 a9					.word xt_asm_and_h, z_asm_and_h
>cc21	61 6e 64 2e 23					.text "and.#"
.cc26					nt_asm_and_x:
>cc26	05 0c						.byte 5, IM+NN
>cc28	33 cc				                .word nt_asm_and_y
>cc2a	40 a9 45 a9					.word xt_asm_and_x, z_asm_and_x
>cc2e	61 6e 64 2e 78					.text "and.x"
.cc33					nt_asm_and_y:
>cc33	05 0c						.byte 5, IM+NN
>cc35	40 cc				                .word nt_asm_and_z
>cc37	45 a9 4a a9					.word xt_asm_and_y, z_asm_and_y
>cc3b	61 6e 64 2e 79					.text "and.y"
.cc40					nt_asm_and_z:
>cc40	05 0c						.byte 5, IM+NN
>cc42	4d cc				                .word nt_asm_and_zi
>cc44	4a a9 4f a9					.word xt_asm_and_z, z_asm_and_z
>cc48	61 6e 64 2e 7a					.text "and.z"
.cc4d					nt_asm_and_zi:
>cc4d	06 0c						.byte 6, IM+NN
>cc4f	5b cc				                .word nt_asm_and_ziy
>cc51	4f a9 54 a9					.word xt_asm_and_zi, z_asm_and_zi
>cc55	61 6e 64 2e 7a 69				.text "and.zi"
.cc5b					nt_asm_and_ziy:
>cc5b	07 0c						.byte 7, IM+NN
>cc5d	6a cc				                .word nt_asm_and_zx
>cc5f	54 a9 59 a9					.word xt_asm_and_ziy, z_asm_and_ziy
>cc63	61 6e 64 2e 7a 69 79				.text "and.ziy"
.cc6a					nt_asm_and_zx:
>cc6a	06 0c						.byte 6, IM+NN
>cc6c	78 cc				                .word nt_asm_and_zxi
>cc6e	59 a9 5e a9					.word xt_asm_and_zx, z_asm_and_zx
>cc72	61 6e 64 2e 7a 78				.text "and.zx"
.cc78					nt_asm_and_zxi:
>cc78	07 0c						.byte 7, IM+NN
>cc7a	87 cc				                .word nt_asm_asl
>cc7c	5e a9 63 a9					.word xt_asm_and_zxi, z_asm_and_zxi
>cc80	61 6e 64 2e 7a 78 69				.text "and.zxi"
.cc87					nt_asm_asl:
>cc87	03 0c						.byte 3, IM+NN
>cc89	92 cc				                .word nt_asm_asl_a
>cc8b	63 a9 68 a9					.word xt_asm_asl, z_asm_asl
>cc8f	61 73 6c					.text "asl"
.cc92					nt_asm_asl_a:
>cc92	05 0c						.byte 5, IM+NN
>cc94	9f cc				                .word nt_asm_asl_x
>cc96	68 a9 6d a9					.word xt_asm_asl_a, z_asm_asl_a
>cc9a	61 73 6c 2e 61					.text "asl.a"
.cc9f					nt_asm_asl_x:
>cc9f	05 0c						.byte 5, IM+NN
>cca1	ac cc				                .word nt_asm_asl_z
>cca3	6d a9 72 a9					.word xt_asm_asl_x, z_asm_asl_x
>cca7	61 73 6c 2e 78					.text "asl.x"
.ccac					nt_asm_asl_z:
>ccac	05 0c						.byte 5, IM+NN
>ccae	b9 cc				                .word nt_asm_asl_zx
>ccb0	72 a9 77 a9					.word xt_asm_asl_z, z_asm_asl_z
>ccb4	61 73 6c 2e 7a					.text "asl.z"
.ccb9					nt_asm_asl_zx:
>ccb9	06 0c						.byte 6, IM+NN
>ccbb	c7 cc				                .word nt_asm_bcc
>ccbd	77 a9 7c a9					.word xt_asm_asl_zx, z_asm_asl_zx
>ccc1	61 73 6c 2e 7a 78				.text "asl.zx"
.ccc7					nt_asm_bcc:
>ccc7	03 0c						.byte 3, IM+NN
>ccc9	d2 cc				                .word nt_asm_bcs
>cccb	7c a9 81 a9					.word xt_asm_bcc, z_asm_bcc
>cccf	62 63 63					.text "bcc"
.ccd2					nt_asm_bcs:
>ccd2	03 0c						.byte 3, IM+NN
>ccd4	dd cc				                .word nt_asm_beq
>ccd6	81 a9 88 a9					.word xt_asm_bcs, z_asm_bcs
>ccda	62 63 73					.text "bcs"
.ccdd					nt_asm_beq:
>ccdd	03 0c						.byte 3, IM+NN
>ccdf	e8 cc				                .word nt_asm_bit
>cce1	88 a9 8d a9					.word xt_asm_beq, z_asm_beq
>cce5	62 65 71					.text "beq"
.cce8					nt_asm_bit:
>cce8	03 0c						.byte 3, IM+NN
>ccea	f3 cc				                .word nt_asm_bit_h
>ccec	8d a9 92 a9					.word xt_asm_bit, z_asm_bit
>ccf0	62 69 74					.text "bit"
.ccf3					nt_asm_bit_h:
>ccf3	05 0c						.byte 5, IM+NN
>ccf5	00 cd				                .word nt_asm_bit_x
>ccf7	92 a9 97 a9					.word xt_asm_bit_h, z_asm_bit_h
>ccfb	62 69 74 2e 23					.text "bit.#"
.cd00					nt_asm_bit_x:
>cd00	05 0c						.byte 5, IM+NN
>cd02	0d cd				                .word nt_asm_bit_z
>cd04	97 a9 9c a9					.word xt_asm_bit_x, z_asm_bit_x
>cd08	62 69 74 2e 78					.text "bit.x"
.cd0d					nt_asm_bit_z:
>cd0d	05 0c						.byte 5, IM+NN
>cd0f	1a cd				                .word nt_asm_bit_zx
>cd11	9c a9 a1 a9					.word xt_asm_bit_z, z_asm_bit_z
>cd15	62 69 74 2e 7a					.text "bit.z"
.cd1a					nt_asm_bit_zx:
>cd1a	06 0c						.byte 6, IM+NN
>cd1c	28 cd				                .word nt_asm_bmi
>cd1e	a1 a9 a6 a9					.word xt_asm_bit_zx, z_asm_bit_zx
>cd22	62 69 74 2e 7a 78				.text "bit.zx"
.cd28					nt_asm_bmi:
>cd28	03 0c						.byte 3, IM+NN
>cd2a	33 cd				                .word nt_asm_bne
>cd2c	a6 a9 ab a9					.word xt_asm_bmi, z_asm_bmi
>cd30	62 6d 69					.text "bmi"
.cd33					nt_asm_bne:
>cd33	03 0c						.byte 3, IM+NN
>cd35	3e cd				                .word nt_asm_bpl
>cd37	ab a9 b0 a9					.word xt_asm_bne, z_asm_bne
>cd3b	62 6e 65					.text "bne"
.cd3e					nt_asm_bpl:
>cd3e	03 0c						.byte 3, IM+NN
>cd40	49 cd				                .word nt_asm_bra
>cd42	b0 a9 b5 a9					.word xt_asm_bpl, z_asm_bpl
>cd46	62 70 6c					.text "bpl"
.cd49					nt_asm_bra:
>cd49	03 0c						.byte 3, IM+NN
>cd4b	54 cd				                .word nt_asm_brk
>cd4d	b5 a9 ba a9					.word xt_asm_bra, z_asm_bra
>cd51	62 72 61					.text "bra"
.cd54					nt_asm_brk:
>cd54	03 0c						.byte 3, IM+NN
>cd56	5f cd				                .word nt_asm_bvc
>cd58	ba a9 bf a9					.word xt_asm_brk, z_asm_brk
>cd5c	62 72 6b					.text "brk"
.cd5f					nt_asm_bvc:
>cd5f	03 0c						.byte 3, IM+NN
>cd61	6a cd				                .word nt_asm_bvs
>cd63	bf a9 c4 a9					.word xt_asm_bvc, z_asm_bvc
>cd67	62 76 63					.text "bvc"
.cd6a					nt_asm_bvs:
>cd6a	03 0c						.byte 3, IM+NN
>cd6c	75 cd				                .word nt_asm_clc
>cd6e	c4 a9 c9 a9					.word xt_asm_bvs, z_asm_bvs
>cd72	62 76 73					.text "bvs"
.cd75					nt_asm_clc:
>cd75	03 0c						.byte 3, IM+NN
>cd77	80 cd				                .word nt_asm_cld
>cd79	c9 a9 ce a9					.word xt_asm_clc, z_asm_clc
>cd7d	63 6c 63					.text "clc"
.cd80					nt_asm_cld:
>cd80	03 0c						.byte 3, IM+NN
>cd82	8b cd				                .word nt_asm_cli
>cd84	ce a9 d3 a9					.word xt_asm_cld, z_asm_cld
>cd88	63 6c 64					.text "cld"
.cd8b					nt_asm_cli:
>cd8b	03 0c						.byte 3, IM+NN
>cd8d	96 cd				                .word nt_asm_clv
>cd8f	d3 a9 d8 a9					.word xt_asm_cli, z_asm_cli
>cd93	63 6c 69					.text "cli"
.cd96					nt_asm_clv:
>cd96	03 0c						.byte 3, IM+NN
>cd98	a1 cd				                .word nt_asm_cmp
>cd9a	d8 a9 dd a9					.word xt_asm_clv, z_asm_clv
>cd9e	63 6c 76					.text "clv"
.cda1					nt_asm_cmp:
>cda1	03 0c						.byte 3, IM+NN
>cda3	ac cd				                .word nt_asm_cmp_h
>cda5	dd a9 e2 a9					.word xt_asm_cmp, z_asm_cmp
>cda9	63 6d 70					.text "cmp"
.cdac					nt_asm_cmp_h:
>cdac	05 0c						.byte 5, IM+NN
>cdae	b9 cd				                .word nt_asm_cmp_x
>cdb0	e2 a9 e7 a9					.word xt_asm_cmp_h, z_asm_cmp_h
>cdb4	63 6d 70 2e 23					.text "cmp.#"
.cdb9					nt_asm_cmp_x:
>cdb9	05 0c						.byte 5, IM+NN
>cdbb	c6 cd				                .word nt_asm_cmp_y
>cdbd	e7 a9 ec a9					.word xt_asm_cmp_x, z_asm_cmp_x
>cdc1	63 6d 70 2e 78					.text "cmp.x"
.cdc6					nt_asm_cmp_y:
>cdc6	05 0c						.byte 5, IM+NN
>cdc8	d3 cd				                .word nt_asm_cmp_z
>cdca	ec a9 f1 a9					.word xt_asm_cmp_y, z_asm_cmp_y
>cdce	63 6d 70 2e 79					.text "cmp.y"
.cdd3					nt_asm_cmp_z:
>cdd3	05 0c						.byte 5, IM+NN
>cdd5	e0 cd				                .word nt_asm_cmp_zi
>cdd7	f1 a9 f6 a9					.word xt_asm_cmp_z, z_asm_cmp_z
>cddb	63 6d 70 2e 7a					.text "cmp.z"
.cde0					nt_asm_cmp_zi:
>cde0	06 0c						.byte 6, IM+NN
>cde2	ee cd				                .word nt_asm_cmp_ziy
>cde4	f6 a9 fb a9					.word xt_asm_cmp_zi, z_asm_cmp_zi
>cde8	63 6d 70 2e 7a 69				.text "cmp.zi"
.cdee					nt_asm_cmp_ziy:
>cdee	07 0c						.byte 7, IM+NN
>cdf0	fd cd				                .word nt_asm_cmp_zx
>cdf2	fb a9 00 aa					.word xt_asm_cmp_ziy, z_asm_cmp_ziy
>cdf6	63 6d 70 2e 7a 69 79				.text "cmp.ziy"
.cdfd					nt_asm_cmp_zx:
>cdfd	06 0c						.byte 6, IM+NN
>cdff	0b ce				                .word nt_asm_cmp_zxi
>ce01	00 aa 05 aa					.word xt_asm_cmp_zx, z_asm_cmp_zx
>ce05	63 6d 70 2e 7a 78				.text "cmp.zx"
.ce0b					nt_asm_cmp_zxi:
>ce0b	07 0c						.byte 7, IM+NN
>ce0d	1a ce				                .word nt_asm_cpx
>ce0f	05 aa 0a aa					.word xt_asm_cmp_zxi, z_asm_cmp_zxi
>ce13	63 6d 70 2e 7a 78 69				.text "cmp.zxi"
.ce1a					nt_asm_cpx:
>ce1a	03 0c						.byte 3, IM+NN
>ce1c	25 ce				                .word nt_asm_cpx_h
>ce1e	0a aa 0f aa					.word xt_asm_cpx, z_asm_cpx
>ce22	63 70 78					.text "cpx"
.ce25					nt_asm_cpx_h:
>ce25	05 0c						.byte 5, IM+NN
>ce27	32 ce				                .word nt_asm_cpx_z
>ce29	0f aa 14 aa					.word xt_asm_cpx_h, z_asm_cpx_h
>ce2d	63 70 78 2e 23					.text "cpx.#"
.ce32					nt_asm_cpx_z:
>ce32	05 0c						.byte 5, IM+NN
>ce34	3f ce				                .word nt_asm_cpy
>ce36	14 aa 19 aa					.word xt_asm_cpx_z, z_asm_cpx_z
>ce3a	63 70 78 2e 7a					.text "cpx.z"
.ce3f					nt_asm_cpy:
>ce3f	03 0c						.byte 3, IM+NN
>ce41	4a ce				                .word nt_asm_cpy_h
>ce43	19 aa 20 aa					.word xt_asm_cpy, z_asm_cpy
>ce47	63 70 79					.text "cpy"
.ce4a					nt_asm_cpy_h:
>ce4a	05 0c						.byte 5, IM+NN
>ce4c	57 ce				                .word nt_asm_cpy_z
>ce4e	20 aa 25 aa					.word xt_asm_cpy_h, z_asm_cpy_h
>ce52	63 70 79 2e 23					.text "cpy.#"
.ce57					nt_asm_cpy_z:
>ce57	05 0c						.byte 5, IM+NN
>ce59	64 ce				                .word nt_asm_dec
>ce5b	25 aa 2a aa					.word xt_asm_cpy_z, z_asm_cpy_z
>ce5f	63 70 79 2e 7a					.text "cpy.z"
.ce64					nt_asm_dec:
>ce64	03 0c						.byte 3, IM+NN
>ce66	6f ce				                .word nt_asm_dec_a
>ce68	2a aa 2f aa					.word xt_asm_dec, z_asm_dec
>ce6c	64 65 63					.text "dec"
.ce6f					nt_asm_dec_a:
>ce6f	05 0c						.byte 5, IM+NN
>ce71	7c ce				                .word nt_asm_dec_x
>ce73	2f aa 34 aa					.word xt_asm_dec_a, z_asm_dec_a
>ce77	64 65 63 2e 61					.text "dec.a"
.ce7c					nt_asm_dec_x:
>ce7c	05 0c						.byte 5, IM+NN
>ce7e	89 ce				                .word nt_asm_dec_z
>ce80	34 aa 39 aa					.word xt_asm_dec_x, z_asm_dec_x
>ce84	64 65 63 2e 78					.text "dec.x"
.ce89					nt_asm_dec_z:
>ce89	05 0c						.byte 5, IM+NN
>ce8b	96 ce				                .word nt_asm_dec_zx
>ce8d	39 aa 3e aa					.word xt_asm_dec_z, z_asm_dec_z
>ce91	64 65 63 2e 7a					.text "dec.z"
.ce96					nt_asm_dec_zx:
>ce96	06 0c						.byte 6, IM+NN
>ce98	a4 ce				                .word nt_asm_dex
>ce9a	3e aa 43 aa					.word xt_asm_dec_zx, z_asm_dec_zx
>ce9e	64 65 63 2e 7a 78				.text "dec.zx"
.cea4					nt_asm_dex:
>cea4	03 0c						.byte 3, IM+NN
>cea6	af ce				                .word nt_asm_dey
>cea8	43 aa 48 aa					.word xt_asm_dex, z_asm_dex
>ceac	64 65 78					.text "dex"
.ceaf					nt_asm_dey:
>ceaf	03 0c						.byte 3, IM+NN
>ceb1	ba ce				                .word nt_asm_eor
>ceb3	48 aa 4d aa					.word xt_asm_dey, z_asm_dey
>ceb7	64 65 79					.text "dey"
.ceba					nt_asm_eor:
>ceba	03 0c						.byte 3, IM+NN
>cebc	c5 ce				                .word nt_asm_eor_h
>cebe	4d aa 52 aa					.word xt_asm_eor, z_asm_eor
>cec2	65 6f 72					.text "eor"
.cec5					nt_asm_eor_h:
>cec5	05 0c						.byte 5, IM+NN
>cec7	d2 ce				                .word nt_asm_eor_x
>cec9	52 aa 57 aa					.word xt_asm_eor_h, z_asm_eor_h
>cecd	65 6f 72 2e 23					.text "eor.#"
.ced2					nt_asm_eor_x:
>ced2	05 0c						.byte 5, IM+NN
>ced4	df ce				                .word nt_asm_eor_y
>ced6	57 aa 5c aa					.word xt_asm_eor_x, z_asm_eor_x
>ceda	65 6f 72 2e 78					.text "eor.x"
.cedf					nt_asm_eor_y:
>cedf	05 0c						.byte 5, IM+NN
>cee1	ec ce				                .word nt_asm_eor_z
>cee3	5c aa 61 aa					.word xt_asm_eor_y, z_asm_eor_y
>cee7	65 6f 72 2e 79					.text "eor.y"
.ceec					nt_asm_eor_z:
>ceec	05 0c						.byte 5, IM+NN
>ceee	f9 ce				                .word nt_asm_eor_zi
>cef0	61 aa 66 aa					.word xt_asm_eor_z, z_asm_eor_z
>cef4	65 6f 72 2e 7a					.text "eor.z"
.cef9					nt_asm_eor_zi:
>cef9	06 0c						.byte 6, IM+NN
>cefb	07 cf				                .word nt_asm_eor_ziy
>cefd	66 aa 6b aa					.word xt_asm_eor_zi, z_asm_eor_zi
>cf01	65 6f 72 2e 7a 69				.text "eor.zi"
.cf07					nt_asm_eor_ziy:
>cf07	07 0c						.byte 7, IM+NN
>cf09	16 cf				                .word nt_asm_eor_zx
>cf0b	6b aa 70 aa					.word xt_asm_eor_ziy, z_asm_eor_ziy
>cf0f	65 6f 72 2e 7a 69 79				.text "eor.ziy"
.cf16					nt_asm_eor_zx:
>cf16	06 0c						.byte 6, IM+NN
>cf18	24 cf				                .word nt_asm_eor_zxi
>cf1a	70 aa 75 aa					.word xt_asm_eor_zx, z_asm_eor_zx
>cf1e	65 6f 72 2e 7a 78				.text "eor.zx"
.cf24					nt_asm_eor_zxi:
>cf24	07 0c						.byte 7, IM+NN
>cf26	33 cf				                .word nt_asm_inc
>cf28	75 aa 7a aa					.word xt_asm_eor_zxi, z_asm_eor_zxi
>cf2c	65 6f 72 2e 7a 78 69				.text "eor.zxi"
.cf33					nt_asm_inc:
>cf33	03 0c						.byte 3, IM+NN
>cf35	3e cf				                .word nt_asm_inc_a
>cf37	7a aa 7f aa					.word xt_asm_inc, z_asm_inc
>cf3b	69 6e 63					.text "inc"
.cf3e					nt_asm_inc_a:
>cf3e	05 0c						.byte 5, IM+NN
>cf40	4b cf				                .word nt_asm_inc_x
>cf42	7f aa 84 aa					.word xt_asm_inc_a, z_asm_inc_a
>cf46	69 6e 63 2e 61					.text "inc.a"
.cf4b					nt_asm_inc_x:
>cf4b	05 0c						.byte 5, IM+NN
>cf4d	58 cf				                .word nt_asm_inc_z
>cf4f	84 aa 89 aa					.word xt_asm_inc_x, z_asm_inc_x
>cf53	69 6e 63 2e 78					.text "inc.x"
.cf58					nt_asm_inc_z:
>cf58	05 0c						.byte 5, IM+NN
>cf5a	65 cf				                .word nt_asm_inc_zx
>cf5c	89 aa 8e aa					.word xt_asm_inc_z, z_asm_inc_z
>cf60	69 6e 63 2e 7a					.text "inc.z"
.cf65					nt_asm_inc_zx:
>cf65	06 0c						.byte 6, IM+NN
>cf67	73 cf				                .word nt_asm_inx
>cf69	8e aa 93 aa					.word xt_asm_inc_zx, z_asm_inc_zx
>cf6d	69 6e 63 2e 7a 78				.text "inc.zx"
.cf73					nt_asm_inx:
>cf73	03 0c						.byte 3, IM+NN
>cf75	7e cf				                .word nt_asm_iny
>cf77	93 aa 98 aa					.word xt_asm_inx, z_asm_inx
>cf7b	69 6e 78					.text "inx"
.cf7e					nt_asm_iny:
>cf7e	03 0c						.byte 3, IM+NN
>cf80	89 cf				                .word nt_asm_jmp
>cf82	98 aa 9d aa					.word xt_asm_iny, z_asm_iny
>cf86	69 6e 79					.text "iny"
.cf89					nt_asm_jmp:
>cf89	03 0c						.byte 3, IM+NN
>cf8b	94 cf				                .word nt_asm_jmp_i
>cf8d	9d aa a2 aa					.word xt_asm_jmp, z_asm_jmp
>cf91	6a 6d 70					.text "jmp"
.cf94					nt_asm_jmp_i:
>cf94	05 0c						.byte 5, IM+NN
>cf96	a1 cf				                .word nt_asm_jmp_xi
>cf98	a2 aa a7 aa					.word xt_asm_jmp_i, z_asm_jmp_i
>cf9c	6a 6d 70 2e 69					.text "jmp.i"
.cfa1					nt_asm_jmp_xi:
>cfa1	06 0c						.byte 6, IM+NN
>cfa3	af cf				                .word nt_asm_jsr
>cfa5	a7 aa ac aa					.word xt_asm_jmp_xi, z_asm_jmp_xi
>cfa9	6a 6d 70 2e 78 69				.text "jmp.xi"
.cfaf					nt_asm_jsr:
>cfaf	03 0c						.byte 3, IM+NN
>cfb1	ba cf				                .word nt_asm_lda
>cfb3	ac aa b1 aa					.word xt_asm_jsr, z_asm_jsr
>cfb7	6a 73 72					.text "jsr"
.cfba					nt_asm_lda:
>cfba	03 0c						.byte 3, IM+NN
>cfbc	c5 cf				                .word nt_asm_lda_h
>cfbe	b1 aa b6 aa					.word xt_asm_lda, z_asm_lda
>cfc2	6c 64 61					.text "lda"
.cfc5					nt_asm_lda_h:
>cfc5	05 0c						.byte 5, IM+NN
>cfc7	d2 cf				                .word nt_asm_lda_x
>cfc9	b6 aa bb aa					.word xt_asm_lda_h, z_asm_lda_h
>cfcd	6c 64 61 2e 23					.text "lda.#"
.cfd2					nt_asm_lda_x:
>cfd2	05 0c						.byte 5, IM+NN
>cfd4	df cf				                .word nt_asm_lda_y
>cfd6	bb aa c0 aa					.word xt_asm_lda_x, z_asm_lda_x
>cfda	6c 64 61 2e 78					.text "lda.x"
.cfdf					nt_asm_lda_y:
>cfdf	05 0c						.byte 5, IM+NN
>cfe1	ec cf				                .word nt_asm_lda_z
>cfe3	c0 aa c5 aa					.word xt_asm_lda_y, z_asm_lda_y
>cfe7	6c 64 61 2e 79					.text "lda.y"
.cfec					nt_asm_lda_z:
>cfec	05 0c						.byte 5, IM+NN
>cfee	f9 cf				                .word nt_asm_lda_zi
>cff0	c5 aa ca aa					.word xt_asm_lda_z, z_asm_lda_z
>cff4	6c 64 61 2e 7a					.text "lda.z"
.cff9					nt_asm_lda_zi:
>cff9	06 0c						.byte 6, IM+NN
>cffb	07 d0				                .word nt_asm_lda_ziy
>cffd	ca aa cf aa					.word xt_asm_lda_zi, z_asm_lda_zi
>d001	6c 64 61 2e 7a 69				.text "lda.zi"
.d007					nt_asm_lda_ziy:
>d007	07 0c						.byte 7, IM+NN
>d009	16 d0				                .word nt_asm_lda_zx
>d00b	cf aa d4 aa					.word xt_asm_lda_ziy, z_asm_lda_ziy
>d00f	6c 64 61 2e 7a 69 79				.text "lda.ziy"
.d016					nt_asm_lda_zx:
>d016	06 0c						.byte 6, IM+NN
>d018	24 d0				                .word nt_asm_lda_zxi
>d01a	d4 aa d9 aa					.word xt_asm_lda_zx, z_asm_lda_zx
>d01e	6c 64 61 2e 7a 78				.text "lda.zx"
.d024					nt_asm_lda_zxi:
>d024	07 0c						.byte 7, IM+NN
>d026	33 d0				                .word nt_asm_ldx
>d028	d9 aa de aa					.word xt_asm_lda_zxi, z_asm_lda_zxi
>d02c	6c 64 61 2e 7a 78 69				.text "lda.zxi"
.d033					nt_asm_ldx:
>d033	03 0c						.byte 3, IM+NN
>d035	3e d0				                .word nt_asm_ldx_h
>d037	de aa e3 aa					.word xt_asm_ldx, z_asm_ldx
>d03b	6c 64 78					.text "ldx"
.d03e					nt_asm_ldx_h:
>d03e	05 0c						.byte 5, IM+NN
>d040	4b d0				                .word nt_asm_ldx_y
>d042	e3 aa e8 aa					.word xt_asm_ldx_h, z_asm_ldx_h
>d046	6c 64 78 2e 23					.text "ldx.#"
.d04b					nt_asm_ldx_y:
>d04b	05 0c						.byte 5, IM+NN
>d04d	58 d0				                .word nt_asm_ldx_z
>d04f	e8 aa ed aa					.word xt_asm_ldx_y, z_asm_ldx_y
>d053	6c 64 78 2e 79					.text "ldx.y"
.d058					nt_asm_ldx_z:
>d058	05 0c						.byte 5, IM+NN
>d05a	65 d0				                .word nt_asm_ldx_zy
>d05c	ed aa f2 aa					.word xt_asm_ldx_z, z_asm_ldx_z
>d060	6c 64 78 2e 7a					.text "ldx.z"
.d065					nt_asm_ldx_zy:
>d065	06 0c						.byte 6, IM+NN
>d067	73 d0				                .word nt_asm_ldy
>d069	f2 aa f7 aa					.word xt_asm_ldx_zy, z_asm_ldx_zy
>d06d	6c 64 78 2e 7a 79				.text "ldx.zy"
.d073					nt_asm_ldy:
>d073	03 0c						.byte 3, IM+NN
>d075	7e d0				                .word nt_asm_ldy_h
>d077	f7 aa fc aa					.word xt_asm_ldy, z_asm_ldy
>d07b	6c 64 79					.text "ldy"
.d07e					nt_asm_ldy_h:
>d07e	05 0c						.byte 5, IM+NN
>d080	8b d0				                .word nt_asm_ldy_x
>d082	fc aa 01 ab					.word xt_asm_ldy_h, z_asm_ldy_h
>d086	6c 64 79 2e 23					.text "ldy.#"
.d08b					nt_asm_ldy_x:
>d08b	05 0c						.byte 5, IM+NN
>d08d	98 d0				                .word nt_asm_ldy_z
>d08f	01 ab 06 ab					.word xt_asm_ldy_x, z_asm_ldy_x
>d093	6c 64 79 2e 78					.text "ldy.x"
.d098					nt_asm_ldy_z:
>d098	05 0c						.byte 5, IM+NN
>d09a	a5 d0				                .word nt_asm_ldy_zx
>d09c	06 ab 0b ab					.word xt_asm_ldy_z, z_asm_ldy_z
>d0a0	6c 64 79 2e 7a					.text "ldy.z"
.d0a5					nt_asm_ldy_zx:
>d0a5	06 0c						.byte 6, IM+NN
>d0a7	b3 d0				                .word nt_asm_lsr
>d0a9	0b ab 10 ab					.word xt_asm_ldy_zx, z_asm_ldy_zx
>d0ad	6c 64 79 2e 7a 78				.text "ldy.zx"
.d0b3					nt_asm_lsr:
>d0b3	03 0c						.byte 3, IM+NN
>d0b5	be d0				                .word nt_asm_lsr_a
>d0b7	10 ab 15 ab					.word xt_asm_lsr, z_asm_lsr
>d0bb	6c 73 72					.text "lsr"
.d0be					nt_asm_lsr_a:
>d0be	05 0c						.byte 5, IM+NN
>d0c0	cb d0				                .word nt_asm_lsr_x
>d0c2	15 ab 1a ab					.word xt_asm_lsr_a, z_asm_lsr_a
>d0c6	6c 73 72 2e 61					.text "lsr.a"
.d0cb					nt_asm_lsr_x:
>d0cb	05 0c						.byte 5, IM+NN
>d0cd	d8 d0				                .word nt_asm_lsr_z
>d0cf	1a ab 1f ab					.word xt_asm_lsr_x, z_asm_lsr_x
>d0d3	6c 73 72 2e 78					.text "lsr.x"
.d0d8					nt_asm_lsr_z:
>d0d8	05 0c						.byte 5, IM+NN
>d0da	e5 d0				                .word nt_asm_lsr_zx
>d0dc	1f ab 24 ab					.word xt_asm_lsr_z, z_asm_lsr_z
>d0e0	6c 73 72 2e 7a					.text "lsr.z"
.d0e5					nt_asm_lsr_zx:
>d0e5	06 0c						.byte 6, IM+NN
>d0e7	f3 d0				                .word nt_asm_nop
>d0e9	24 ab 29 ab					.word xt_asm_lsr_zx, z_asm_lsr_zx
>d0ed	6c 73 72 2e 7a 78				.text "lsr.zx"
.d0f3					nt_asm_nop:
>d0f3	03 0c						.byte 3, IM+NN
>d0f5	fe d0				                .word nt_asm_ora
>d0f7	29 ab 2e ab					.word xt_asm_nop, z_asm_nop
>d0fb	6e 6f 70					.text "nop"
.d0fe					nt_asm_ora:
>d0fe	03 0c						.byte 3, IM+NN
>d100	09 d1				                .word nt_asm_ora_h
>d102	2e ab 33 ab					.word xt_asm_ora, z_asm_ora
>d106	6f 72 61					.text "ora"
.d109					nt_asm_ora_h:
>d109	05 0c						.byte 5, IM+NN
>d10b	16 d1				                .word nt_asm_ora_x
>d10d	33 ab 38 ab					.word xt_asm_ora_h, z_asm_ora_h
>d111	6f 72 61 2e 23					.text "ora.#"
.d116					nt_asm_ora_x:
>d116	05 0c						.byte 5, IM+NN
>d118	23 d1				                .word nt_asm_ora_y
>d11a	38 ab 3d ab					.word xt_asm_ora_x, z_asm_ora_x
>d11e	6f 72 61 2e 78					.text "ora.x"
.d123					nt_asm_ora_y:
>d123	05 0c						.byte 5, IM+NN
>d125	30 d1				                .word nt_asm_ora_z
>d127	3d ab 42 ab					.word xt_asm_ora_y, z_asm_ora_y
>d12b	6f 72 61 2e 79					.text "ora.y"
.d130					nt_asm_ora_z:
>d130	05 0c						.byte 5, IM+NN
>d132	3d d1				                .word nt_asm_ora_zi
>d134	42 ab 47 ab					.word xt_asm_ora_z, z_asm_ora_z
>d138	6f 72 61 2e 7a					.text "ora.z"
.d13d					nt_asm_ora_zi:
>d13d	06 0c						.byte 6, IM+NN
>d13f	4b d1				                .word nt_asm_ora_ziy
>d141	47 ab 4e ab					.word xt_asm_ora_zi, z_asm_ora_zi
>d145	6f 72 61 2e 7a 69				.text "ora.zi"
.d14b					nt_asm_ora_ziy:
>d14b	07 0c						.byte 7, IM+NN
>d14d	5a d1				                .word nt_asm_ora_zx
>d14f	4e ab 53 ab					.word xt_asm_ora_ziy, z_asm_ora_ziy
>d153	6f 72 61 2e 7a 69 79				.text "ora.ziy"
.d15a					nt_asm_ora_zx:
>d15a	06 0c						.byte 6, IM+NN
>d15c	68 d1				                .word nt_asm_ora_zxi
>d15e	53 ab 58 ab					.word xt_asm_ora_zx, z_asm_ora_zx
>d162	6f 72 61 2e 7a 78				.text "ora.zx"
.d168					nt_asm_ora_zxi:
>d168	07 0c						.byte 7, IM+NN
>d16a	77 d1				                .word nt_asm_pha
>d16c	58 ab 5d ab					.word xt_asm_ora_zxi, z_asm_ora_zxi
>d170	6f 72 61 2e 7a 78 69				.text "ora.zxi"
.d177					nt_asm_pha:
>d177	03 0c						.byte 3, IM+NN
>d179	82 d1				                .word nt_asm_php
>d17b	5d ab 62 ab					.word xt_asm_pha, z_asm_pha
>d17f	70 68 61					.text "pha"
.d182					nt_asm_php:
>d182	03 0c						.byte 3, IM+NN
>d184	8d d1				                .word nt_asm_phx
>d186	62 ab 67 ab					.word xt_asm_php, z_asm_php
>d18a	70 68 70					.text "php"
.d18d					nt_asm_phx:
>d18d	03 0c						.byte 3, IM+NN
>d18f	98 d1				                .word nt_asm_phy
>d191	67 ab 6c ab					.word xt_asm_phx, z_asm_phx
>d195	70 68 78					.text "phx"
.d198					nt_asm_phy:
>d198	03 0c						.byte 3, IM+NN
>d19a	a3 d1				                .word nt_asm_pla
>d19c	6c ab 71 ab					.word xt_asm_phy, z_asm_phy
>d1a0	70 68 79					.text "phy"
.d1a3					nt_asm_pla:
>d1a3	03 0c						.byte 3, IM+NN
>d1a5	ae d1				                .word nt_asm_plp
>d1a7	71 ab 76 ab					.word xt_asm_pla, z_asm_pla
>d1ab	70 6c 61					.text "pla"
.d1ae					nt_asm_plp:
>d1ae	03 0c						.byte 3, IM+NN
>d1b0	b9 d1				                .word nt_asm_plx
>d1b2	76 ab 7b ab					.word xt_asm_plp, z_asm_plp
>d1b6	70 6c 70					.text "plp"
.d1b9					nt_asm_plx:
>d1b9	03 0c						.byte 3, IM+NN
>d1bb	c4 d1				                .word nt_asm_ply
>d1bd	7b ab 80 ab					.word xt_asm_plx, z_asm_plx
>d1c1	70 6c 78					.text "plx"
.d1c4					nt_asm_ply:
>d1c4	03 0c						.byte 3, IM+NN
>d1c6	cf d1				                .word nt_asm_rol
>d1c8	80 ab 85 ab					.word xt_asm_ply, z_asm_ply
>d1cc	70 6c 79					.text "ply"
.d1cf					nt_asm_rol:
>d1cf	03 0c						.byte 3, IM+NN
>d1d1	da d1				                .word nt_asm_rol_a
>d1d3	85 ab 8a ab					.word xt_asm_rol, z_asm_rol
>d1d7	72 6f 6c					.text "rol"
.d1da					nt_asm_rol_a:
>d1da	05 0c						.byte 5, IM+NN
>d1dc	e7 d1				                .word nt_asm_rol_x
>d1de	8a ab 8f ab					.word xt_asm_rol_a, z_asm_rol_a
>d1e2	72 6f 6c 2e 61					.text "rol.a"
.d1e7					nt_asm_rol_x:
>d1e7	05 0c						.byte 5, IM+NN
>d1e9	f4 d1				                .word nt_asm_rol_z
>d1eb	8f ab 94 ab					.word xt_asm_rol_x, z_asm_rol_x
>d1ef	72 6f 6c 2e 78					.text "rol.x"
.d1f4					nt_asm_rol_z:
>d1f4	05 0c						.byte 5, IM+NN
>d1f6	01 d2				                .word nt_asm_rol_zx
>d1f8	94 ab 99 ab					.word xt_asm_rol_z, z_asm_rol_z
>d1fc	72 6f 6c 2e 7a					.text "rol.z"
.d201					nt_asm_rol_zx:
>d201	06 0c						.byte 6, IM+NN
>d203	0f d2				                .word nt_asm_ror
>d205	99 ab 9e ab					.word xt_asm_rol_zx, z_asm_rol_zx
>d209	72 6f 6c 2e 7a 78				.text "rol.zx"
.d20f					nt_asm_ror:
>d20f	03 0c						.byte 3, IM+NN
>d211	1a d2				                .word nt_asm_ror_a
>d213	9e ab a3 ab					.word xt_asm_ror, z_asm_ror
>d217	72 6f 72					.text "ror"
.d21a					nt_asm_ror_a:
>d21a	05 0c						.byte 5, IM+NN
>d21c	27 d2				                .word nt_asm_ror_x
>d21e	a3 ab a8 ab					.word xt_asm_ror_a, z_asm_ror_a
>d222	72 6f 72 2e 61					.text "ror.a"
.d227					nt_asm_ror_x:
>d227	05 0c						.byte 5, IM+NN
>d229	34 d2				                .word nt_asm_ror_z
>d22b	a8 ab ad ab					.word xt_asm_ror_x, z_asm_ror_x
>d22f	72 6f 72 2e 78					.text "ror.x"
.d234					nt_asm_ror_z:
>d234	05 0c						.byte 5, IM+NN
>d236	41 d2				                .word nt_asm_ror_zx
>d238	ad ab b2 ab					.word xt_asm_ror_z, z_asm_ror_z
>d23c	72 6f 72 2e 7a					.text "ror.z"
.d241					nt_asm_ror_zx:
>d241	06 0c						.byte 6, IM+NN
>d243	4f d2				                .word nt_asm_rti
>d245	b2 ab b7 ab					.word xt_asm_ror_zx, z_asm_ror_zx
>d249	72 6f 72 2e 7a 78				.text "ror.zx"
.d24f					nt_asm_rti:
>d24f	03 0c						.byte 3, IM+NN
>d251	5a d2				                .word nt_asm_rts
>d253	b7 ab bc ab					.word xt_asm_rti, z_asm_rti
>d257	72 74 69					.text "rti"
.d25a					nt_asm_rts:
>d25a	03 0c						.byte 3, IM+NN
>d25c	65 d2				                .word nt_asm_sbc
>d25e	bc ab c1 ab					.word xt_asm_rts, z_asm_rts
>d262	72 74 73					.text "rts"
.d265					nt_asm_sbc:
>d265	03 0c						.byte 3, IM+NN
>d267	70 d2				                .word nt_asm_sbc_h
>d269	c1 ab c6 ab					.word xt_asm_sbc, z_asm_sbc
>d26d	73 62 63					.text "sbc"
.d270					nt_asm_sbc_h:
>d270	05 0c						.byte 5, IM+NN
>d272	7d d2				                .word nt_asm_sbc_x
>d274	c6 ab cb ab					.word xt_asm_sbc_h, z_asm_sbc_h
>d278	73 62 63 2e 23					.text "sbc.#"
.d27d					nt_asm_sbc_x:
>d27d	05 0c						.byte 5, IM+NN
>d27f	8a d2				                .word nt_asm_sbc_y
>d281	cb ab d0 ab					.word xt_asm_sbc_x, z_asm_sbc_x
>d285	73 62 63 2e 78					.text "sbc.x"
.d28a					nt_asm_sbc_y:
>d28a	05 0c						.byte 5, IM+NN
>d28c	97 d2				                .word nt_asm_sbc_z
>d28e	d0 ab d5 ab					.word xt_asm_sbc_y, z_asm_sbc_y
>d292	73 62 63 2e 79					.text "sbc.y"
.d297					nt_asm_sbc_z:
>d297	05 0c						.byte 5, IM+NN
>d299	a4 d2				                .word nt_asm_sbc_zi
>d29b	d5 ab da ab					.word xt_asm_sbc_z, z_asm_sbc_z
>d29f	73 62 63 2e 7a					.text "sbc.z"
.d2a4					nt_asm_sbc_zi:
>d2a4	06 0c						.byte 6, IM+NN
>d2a6	b2 d2				                .word nt_asm_sbc_ziy
>d2a8	da ab df ab					.word xt_asm_sbc_zi, z_asm_sbc_zi
>d2ac	73 62 63 2e 7a 69				.text "sbc.zi"
.d2b2					nt_asm_sbc_ziy:
>d2b2	07 0c						.byte 7, IM+NN
>d2b4	c1 d2				                .word nt_asm_sbc_zx
>d2b6	df ab e4 ab					.word xt_asm_sbc_ziy, z_asm_sbc_ziy
>d2ba	73 62 63 2e 7a 69 79				.text "sbc.ziy"
.d2c1					nt_asm_sbc_zx:
>d2c1	06 0c						.byte 6, IM+NN
>d2c3	cf d2				                .word nt_asm_sbc_zxi
>d2c5	e4 ab e9 ab					.word xt_asm_sbc_zx, z_asm_sbc_zx
>d2c9	73 62 63 2e 7a 78				.text "sbc.zx"
.d2cf					nt_asm_sbc_zxi:
>d2cf	07 0c						.byte 7, IM+NN
>d2d1	de d2				                .word nt_asm_sec
>d2d3	e9 ab ed ab					.word xt_asm_sbc_zxi, z_asm_sbc_zxi
>d2d7	73 62 63 2e 7a 78 69				.text "sbc.zxi"
.d2de					nt_asm_sec:
>d2de	03 0c						.byte 3, IM+NN
>d2e0	e9 d2				                .word nt_asm_sed
>d2e2	ed ab f1 ab					.word xt_asm_sec, z_asm_sec
>d2e6	73 65 63					.text "sec"
.d2e9					nt_asm_sed:
>d2e9	03 0c						.byte 3, IM+NN
>d2eb	f4 d2				                .word nt_asm_sei
>d2ed	f1 ab f5 ab					.word xt_asm_sed, z_asm_sed
>d2f1	73 65 64					.text "sed"
.d2f4					nt_asm_sei:
>d2f4	03 0c						.byte 3, IM+NN
>d2f6	ff d2				                .word nt_asm_sta
>d2f8	f5 ab f9 ab					.word xt_asm_sei, z_asm_sei
>d2fc	73 65 69					.text "sei"
.d2ff					nt_asm_sta:
>d2ff	03 0c						.byte 3, IM+NN
>d301	0a d3				                .word nt_asm_sta_x
>d303	f9 ab fd ab					.word xt_asm_sta, z_asm_sta
>d307	73 74 61					.text "sta"
.d30a					nt_asm_sta_x:
>d30a	05 0c						.byte 5, IM+NN
>d30c	17 d3				                .word nt_asm_sta_y
>d30e	fd ab 01 ac					.word xt_asm_sta_x, z_asm_sta_x
>d312	73 74 61 2e 78					.text "sta.x"
.d317					nt_asm_sta_y:
>d317	05 0c						.byte 5, IM+NN
>d319	24 d3				                .word nt_asm_sta_z
>d31b	01 ac 05 ac					.word xt_asm_sta_y, z_asm_sta_y
>d31f	73 74 61 2e 79					.text "sta.y"
.d324					nt_asm_sta_z:
>d324	05 0c						.byte 5, IM+NN
>d326	31 d3				                .word nt_asm_sta_zi
>d328	05 ac 09 ac					.word xt_asm_sta_z, z_asm_sta_z
>d32c	73 74 61 2e 7a					.text "sta.z"
.d331					nt_asm_sta_zi:
>d331	06 0c						.byte 6, IM+NN
>d333	3f d3				                .word nt_asm_sta_ziy
>d335	09 ac 0d ac					.word xt_asm_sta_zi, z_asm_sta_zi
>d339	73 74 61 2e 7a 69				.text "sta.zi"
.d33f					nt_asm_sta_ziy:
>d33f	07 0c						.byte 7, IM+NN
>d341	4e d3				                .word nt_asm_sta_zx
>d343	0d ac 11 ac					.word xt_asm_sta_ziy, z_asm_sta_ziy
>d347	73 74 61 2e 7a 69 79				.text "sta.ziy"
.d34e					nt_asm_sta_zx:
>d34e	06 0c						.byte 6, IM+NN
>d350	5c d3				                .word nt_asm_sta_zxi
>d352	11 ac 15 ac					.word xt_asm_sta_zx, z_asm_sta_zx
>d356	73 74 61 2e 7a 78				.text "sta.zx"
.d35c					nt_asm_sta_zxi:
>d35c	07 0c						.byte 7, IM+NN
>d35e	6b d3				                .word nt_asm_stx
>d360	15 ac 19 ac					.word xt_asm_sta_zxi, z_asm_sta_zxi
>d364	73 74 61 2e 7a 78 69				.text "sta.zxi"
.d36b					nt_asm_stx:
>d36b	03 0c						.byte 3, IM+NN
>d36d	76 d3				                .word nt_asm_stx_z
>d36f	19 ac 1d ac					.word xt_asm_stx, z_asm_stx
>d373	73 74 78					.text "stx"
.d376					nt_asm_stx_z:
>d376	05 0c						.byte 5, IM+NN
>d378	83 d3				                .word nt_asm_stx_zy
>d37a	1d ac 21 ac					.word xt_asm_stx_z, z_asm_stx_z
>d37e	73 74 78 2e 7a					.text "stx.z"
.d383					nt_asm_stx_zy:
>d383	06 0c						.byte 6, IM+NN
>d385	91 d3				                .word nt_asm_sty
>d387	21 ac 25 ac					.word xt_asm_stx_zy, z_asm_stx_zy
>d38b	73 74 78 2e 7a 79				.text "stx.zy"
.d391					nt_asm_sty:
>d391	03 0c						.byte 3, IM+NN
>d393	9c d3				                .word nt_asm_sty_z
>d395	25 ac 29 ac					.word xt_asm_sty, z_asm_sty
>d399	73 74 79					.text "sty"
.d39c					nt_asm_sty_z:
>d39c	05 0c						.byte 5, IM+NN
>d39e	a9 d3				                .word nt_asm_sty_zx
>d3a0	29 ac 2d ac					.word xt_asm_sty_z, z_asm_sty_z
>d3a4	73 74 79 2e 7a					.text "sty.z"
.d3a9					nt_asm_sty_zx:
>d3a9	06 0c						.byte 6, IM+NN
>d3ab	b7 d3				                .word nt_asm_stz
>d3ad	2d ac 31 ac					.word xt_asm_sty_zx, z_asm_sty_zx
>d3b1	73 74 79 2e 7a 78				.text "sty.zx"
.d3b7					nt_asm_stz:
>d3b7	03 0c						.byte 3, IM+NN
>d3b9	c2 d3				                .word nt_asm_stz_x
>d3bb	31 ac 35 ac					.word xt_asm_stz, z_asm_stz
>d3bf	73 74 7a					.text "stz"
.d3c2					nt_asm_stz_x:
>d3c2	05 0c						.byte 5, IM+NN
>d3c4	cf d3				                .word nt_asm_stz_z
>d3c6	35 ac 39 ac					.word xt_asm_stz_x, z_asm_stz_x
>d3ca	73 74 7a 2e 78					.text "stz.x"
.d3cf					nt_asm_stz_z:
>d3cf	05 0c						.byte 5, IM+NN
>d3d1	dc d3				                .word nt_asm_stz_zx
>d3d3	39 ac 3d ac					.word xt_asm_stz_z, z_asm_stz_z
>d3d7	73 74 7a 2e 7a					.text "stz.z"
.d3dc					nt_asm_stz_zx:
>d3dc	06 0c						.byte 6, IM+NN
>d3de	ea d3				                .word nt_asm_tax
>d3e0	3d ac 41 ac					.word xt_asm_stz_zx, z_asm_stz_zx
>d3e4	73 74 7a 2e 7a 78				.text "stz.zx"
.d3ea					nt_asm_tax:
>d3ea	03 0c						.byte 3, IM+NN
>d3ec	f5 d3				                .word nt_asm_tay
>d3ee	41 ac 45 ac					.word xt_asm_tax, z_asm_tax
>d3f2	74 61 78					.text "tax"
.d3f5					nt_asm_tay:
>d3f5	03 0c						.byte 3, IM+NN
>d3f7	00 d4				                .word nt_asm_trb
>d3f9	45 ac 49 ac					.word xt_asm_tay, z_asm_tay
>d3fd	74 61 79					.text "tay"
.d400					nt_asm_trb:
>d400	03 0c						.byte 3, IM+NN
>d402	0b d4				                .word nt_asm_trb_z
>d404	49 ac 4d ac					.word xt_asm_trb, z_asm_trb
>d408	74 72 62					.text "trb"
.d40b					nt_asm_trb_z:
>d40b	05 0c						.byte 5, IM+NN
>d40d	18 d4				                .word nt_asm_tsb
>d40f	4d ac 51 ac					.word xt_asm_trb_z, z_asm_trb_z
>d413	74 72 62 2e 7a					.text "trb.z"
.d418					nt_asm_tsb:
>d418	03 0c						.byte 3, IM+NN
>d41a	23 d4				                .word nt_asm_tsb_z
>d41c	51 ac 55 ac					.word xt_asm_tsb, z_asm_tsb
>d420	74 73 62					.text "tsb"
.d423					nt_asm_tsb_z:
>d423	05 0c						.byte 5, IM+NN
>d425	30 d4				                .word nt_asm_tsx
>d427	55 ac 59 ac					.word xt_asm_tsb_z, z_asm_tsb_z
>d42b	74 73 62 2e 7a					.text "tsb.z"
.d430					nt_asm_tsx:
>d430	03 0c						.byte 3, IM+NN
>d432	3b d4				                .word nt_asm_txa
>d434	59 ac 5d ac					.word xt_asm_tsx, z_asm_tsx
>d438	74 73 78					.text "tsx"
.d43b					nt_asm_txa:
>d43b	03 0c						.byte 3, IM+NN
>d43d	46 d4				                .word nt_asm_txs
>d43f	5d ac 61 ac					.word xt_asm_txa, z_asm_txa
>d443	74 78 61					.text "txa"
.d446					nt_asm_txs:
>d446	03 0c						.byte 3, IM+NN
>d448	51 d4				                .word nt_asm_tya
>d44a	61 ac 65 ac					.word xt_asm_txs, z_asm_txs
>d44e	74 78 73					.text "txs"
.d451					nt_asm_tya:
>d451	03 0c						.byte 3, IM+NN
>d453	5c d4				                .word nt_asm_arrow
>d455	65 ac 69 ac					.word xt_asm_tya, z_asm_tya
>d459	74 79 61					.text "tya"
.d45c					nt_asm_arrow:
>d45c	03 04				                .byte 3, IM
>d45e	67 d4				                .word nt_asm_back_jump
>d460	8e 91 98 91			                .word xt_asm_arrow, z_asm_arrow
>d464	2d 2d 3e			                .text "-->"
.d467					nt_asm_back_jump:
>d467	02 04				                .byte 2, IM
>d469	71 d4				                .word nt_asm_back_branch
>d46b	ba ac ba ac			                .word xt_asm_back_jump, z_asm_back_jump
>d46f	3c 6a				                .text "<j"
.d471					nt_asm_back_branch:
>d471	02 04				                .byte 2, IM
>d473	7b d4				                .word nt_asm_push_a
>d475	bb ac c3 ac			                .word xt_asm_back_branch, z_asm_back_branch
>d479	3c 62				                .text "<b"
.d47b					nt_asm_push_a:
>d47b	06 0c				                .byte 6, IM+NN
>d47d	00 00				                .word 0000
>d47f	a3 ac b2 ac			                .word xt_asm_push_a, z_asm_push_a
>d483	70 75 73 68 2d 61		                .text "push-a"

;******  Return to file: platform/../taliforth.asm


;******  Processing file: platform/../strings.asm

=0					ix := 0
=0					str_ok             = ix
=1					ix += 1
=1					str_compile        = ix
=2					ix += 1
=2					str_redefined      = ix
=3					ix += 1
=3					str_abc_upper      = ix
=4					ix += 1
=4					str_wid_forth      = ix
=5					ix += 1
=5					str_wid_editor     = ix
=6					ix += 1
=6					str_wid_assembler  = ix
=7					ix += 1
=7					str_wid_root       = ix
=8					ix += 1
=8					str_see_flags      = ix
=9					ix += 1
=9					str_see_nt         = ix
=10					ix += 1
=10					str_see_xt         = ix
=11					ix += 1
=11					str_see_size       = ix
=12					ix += 1
=12					str_disasm_lit     = ix
=13					ix += 1
=13					str_disasm_sdc     = ix
=14					ix += 1
=14					str_disasm_bra     = ix
=15					ix += 1
.d489					string_table:
>d489	a7 d4 ab d4 b5 d4 c0 d4		        .word s_ok, s_compiled, s_redefined, s_abc_upper              ; 0-3
>d491	f7 d4 ef d4 e4 d4 fe d4		        .word s_wid_forth, s_wid_editor, s_wid_asm, s_wid_root        ; 4-7
>d499	04 d5 20 d5 25 d5 2a d5		        .word s_see_flags, s_see_nt, s_see_xt, s_see_size             ; 8-11
>d4a1	3b d5 44 d5 56 d5		        .word s_disasm_lit, s_disasm_sdc, s_disasm_bra                ; 12-14
>d4a7	20 6f 6b 00			s_ok:         .text " ok", 0         ; note space at beginning
>d4ab	20 63 6f 6d 70 69 6c 65		s_compiled:   .text " compiled", 0   ; note space at beginning
>d4b3	64 00
>d4b5	72 65 64 65 66 69 6e 65		s_redefined:  .text "redefined ", 0  ; note space at end
>d4bd	64 20 00
>d4c0	30 31 32 33 34 35 36 37		s_abc_upper:  .text "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
>d4c8	38 39 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e
>d4d8	4f 50 51 52 53 54 55 56 57 58 59 5a
>d4e4	41 73 73 65 6d 62 6c 65		s_wid_asm:    .text "Assembler ", 0  ; Wordlist ID 2, note space at end
>d4ec	72 20 00
>d4ef	45 64 69 74 6f 72 20 00		s_wid_editor: .text "Editor ", 0     ; Wordlist ID 1, note space at end
>d4f7	46 6f 72 74 68 20 00		s_wid_forth:  .text "Forth ", 0      ; Wordlist ID 0, note space at end
>d4fe	52 6f 6f 74 20 00		s_wid_root:   .text "Root ", 0       ; Wordlist ID 3, note space at end
>d504	66 6c 61 67 73 20 28 43		s_see_flags:  .text "flags (CO AN IM NN UF HC): ", 0
>d50c	4f 20 41 4e 20 49 4d 20 4e 4e 20 55 46 20 48 43
>d51c	29 3a 20 00
>d520	6e 74 3a 20 00			s_see_nt:     .text "nt: ", 0
>d525	78 74 3a 20 00			s_see_xt:     .text "xt: ", 0
>d52a	73 69 7a 65 20 28 64 65		s_see_size:   .text "size (decimal): ", 0
>d532	63 69 6d 61 6c 29 3a 20 00
>d53b	4c 49 54 45 52 41 4c 20		s_disasm_lit: .text "LITERAL ", 0
>d543	00
>d544	53 54 41 43 4b 20 44 45		s_disasm_sdc: .text "STACK DEPTH CHECK", 0
>d54c	50 54 48 20 43 48 45 43 4b 00
>d556	42 52 41 4e 43 48 20 00		s_disasm_bra: .text "BRANCH ",0
=0					err_allot        = 0
=1					err_badsource    = 1
=2					err_compileonly  = 2
=3					err_defer        = 3
=4					err_divzero      = 4
=5					err_noname       = 5
=6					err_refill       = 6
=7					err_state        = 7
=8					err_syntax       = 8
=9					err_underflow    = 9
=10					err_negallot     = 10
=11					err_wordlist     = 11
=12					err_blockwords   = 12
=13					err_returnstack  = 13
.d55e					error_table:
>d55e	7a d5 9b d5 bb d5 dc d5		        .word es_allot, es_badsource, es_compileonly, es_defer  ;  0-3
>d566	f9 d5 0a d6 1a d6 48 d6		        .word es_divzero, es_noname, es_refill, es_state        ;  4-7
>d56e	60 d6 6f d6 84 d6 a0 d6		        .word es_syntax, es_underflow, es_negallot, es_wordlist ;  8-11
>d576	b7 d6 f6 d6			        .word es_blockwords, es_returnstack                     ; 12-13
>d57a	41 4c 4c 4f 54 20 75 73		es_allot:       .text "ALLOT using all available memory", 0
>d582	69 6e 67 20 61 6c 6c 20 61 76 61 69 6c 61 62 6c
>d592	65 20 6d 65 6d 6f 72 79 00
>d59b	49 6c 6c 65 67 61 6c 20		es_badsource:   .text "Illegal SOURCE-ID during REFILL", 0
>d5a3	53 4f 55 52 43 45 2d 49 44 20 64 75 72 69 6e 67
>d5b3	20 52 45 46 49 4c 4c 00
>d5bb	49 6e 74 65 72 70 72 65		es_compileonly: .text "Interpreting a compile-only word", 0
>d5c3	74 69 6e 67 20 61 20 63 6f 6d 70 69 6c 65 2d 6f
>d5d3	6e 6c 79 20 77 6f 72 64 00
>d5dc	44 45 46 45 52 65 64 20		es_defer:       .text "DEFERed word not defined yet", 0
>d5e4	77 6f 72 64 20 6e 6f 74 20 64 65 66 69 6e 65 64
>d5f4	20 79 65 74 00
>d5f9	44 69 76 69 73 69 6f 6e		es_divzero:     .text "Division by zero", 0
>d601	20 62 79 20 7a 65 72 6f 00
>d60a	50 61 72 73 69 6e 67 20		es_noname:      .text "Parsing failure", 0
>d612	66 61 69 6c 75 72 65 00
>d61a	51 55 49 54 20 63 6f 75		es_refill:      .text "QUIT could not get input (REFILL returned -1)", 0
>d622	6c 64 20 6e 6f 74 20 67 65 74 20 69 6e 70 75 74
>d632	20 28 52 45 46 49 4c 4c 20 72 65 74 75 72 6e 65
>d642	64 20 2d 31 29 00
>d648	41 6c 72 65 61 64 79 20		es_state:       .text "Already in compile mode", 0
>d650	69 6e 20 63 6f 6d 70 69 6c 65 20 6d 6f 64 65 00
>d660	55 6e 64 65 66 69 6e 65		es_syntax:      .text "Undefined word", 0
>d668	64 20 77 6f 72 64 00
>d66f	44 61 74 61 20 73 74 61		es_underflow:   .text "Data stack underflow", 0
>d677	63 6b 20 75 6e 64 65 72 66 6c 6f 77 00
>d684	4d 61 78 20 6d 65 6d 6f		es_negallot:    .text "Max memory freed with ALLOT", 0
>d68c	72 79 20 66 72 65 65 64 20 77 69 74 68 20 41 4c
>d69c	4c 4f 54 00
>d6a0	4e 6f 20 77 6f 72 64 6c		es_wordlist:    .text "No wordlists available", 0
>d6a8	69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 00
>d6b7	50 6c 65 61 73 65 20 61		es_blockwords:  .text "Please assign vectors BLOCK-READ-VECTOR and BLOCK-WRITE-VECTOR",0
>d6bf	73 73 69 67 6e 20 76 65 63 74 6f 72 73 20 42 4c
>d6cf	4f 43 4b 2d 52 45 41 44 2d 56 45 43 54 4f 52 20
>d6df	61 6e 64 20 42 4c 4f 43 4b 2d 57 52 49 54 45 2d
>d6ef	56 45 43 54 4f 52 00
>d6f6	52 65 74 75 72 6e 20 73		es_returnstack: .text "Return stack:", 0
>d6fe	74 61 63 6b 3a 00
>d704	0f 2f 43 4f 55 4e 54 45		envs_cs:        .text 15, "/COUNTED-STRING"
>d70c	44 2d 53 54 52 49 4e 47
>d714	05 2f 48 4f 4c 44		envs_hold:      .text 5, "/HOLD"
>d71a	04 2f 50 41 44			envs_pad:       .text 4, "/PAD"
>d71f	11 41 44 44 52 45 53 53		envs_aub:       .text 17, "ADDRESS-UNIT-BITS"
>d727	2d 55 4e 49 54 2d 42 49 54 53
>d731	07 46 4c 4f 4f 52 45 44		envs_floored:   .text 7, "FLOORED"
>d739	08 4d 41 58 2d 43 48 41		envs_max_char:  .text 8, "MAX-CHAR"
>d741	52
>d742	05 4d 41 58 2d 4e		envs_max_n:     .text 5, "MAX-N"
>d748	05 4d 41 58 2d 55		envs_max_u:     .text 5, "MAX-U"
>d74e	12 52 45 54 55 52 4e 2d		envs_rsc:       .text 18, "RETURN-STACK-CELLS"
>d756	53 54 41 43 4b 2d 43 45 4c 4c 53
>d761	0b 53 54 41 43 4b 2d 43		envs_sc:        .text 11, "STACK-CELLS"
>d769	45 4c 4c 53
>d76d	09 57 4f 52 44 4c 49 53		envs_wl:        .text 9, "WORDLISTS"
>d775	54 53
>d777	05 4d 41 58 2d 44		envs_max_d:     .text 5, "MAX-D"
>d77d	06 4d 41 58 2d 55 44		envs_max_ud:    .text 6, "MAX-UD"

;******  Return to file: platform/../taliforth.asm

.d784					cmpl_subroutine:
.d784	48		pha		                pha             ; save LSB of address
.d785	a9 20		lda #$20	                lda #$20        ; load opcode for JSR
.d787	80 03		bra $d78c	                bra cmpl_common
.d789					cmpl_jump:
.d789	48		pha		                pha             ; save LSB of address
.d78a	a9 4c		lda #$4c	                lda #$4c        ; load opcode for JMP, fall thru to cmpl_common
.d78c					cmpl_common:
.d78c	20 94 d7	jsr $d794	                jsr cmpl_a      ; compile opcode
.d78f	68		pla		                pla             ; retrieve address LSB; fall thru to cmpl_word
.d790					cmpl_word:
.d790	20 94 d7	jsr $d794	                jsr cmpl_a      ; compile LSB of address
.d793	98		tya		                tya             ; fall thru for MSB
.d794					cmpl_a:
.d794	92 00		sta ($00)	                sta (cp)
.d796	e6 00		inc $00		                inc cp
.d798	d0 02		bne $d79c	                bne _done
.d79a	e6 01		inc $01		                inc cp+1
.d79c					_done:
.d79c	60		rts		                rts
.d79d					doconst:
.d79d	ca		dex		                dex             ; make room for constant
.d79e	ca		dex		                dex
.d79f	68		pla		                pla             ; LSB of return address
.d7a0	85 24		sta $24		                sta tmp1
.d7a2	68		pla		                pla             ; MSB of return address
.d7a3	85 25		sta $25		                sta tmp1+1
.d7a5	a0 01		ldy #$01	                ldy #1
.d7a7	b1 24		lda ($24),y	                lda (tmp1),y
.d7a9	95 00		sta $00,x	                sta 0,x
.d7ab	c8		iny		                iny
.d7ac	b1 24		lda ($24),y	                lda (tmp1),y
.d7ae	95 01		sta $01,x	                sta 1,x
.d7b0	60		rts		                rts
.d7b1					dodefer:
.d7b1	68		pla		                pla             ; LSB
.d7b2	85 24		sta $24		                sta tmp1
.d7b4	68		pla		                pla             ; MSB
.d7b5	85 25		sta $25		                sta tmp1+1
.d7b7	a0 01		ldy #$01	                ldy #1
.d7b9	b1 24		lda ($24),y	                lda (tmp1),y
.d7bb	85 26		sta $26		                sta tmp2
.d7bd	c8		iny		                iny
.d7be	b1 24		lda ($24),y	                lda (tmp1),y
.d7c0	85 27		sta $27		                sta tmp2+1
.d7c2	6c 26 00	jmp ($0026)	                jmp (tmp2)      ; This is actually a jump to the new target
.d7c5					defer_error:
.d7c5	a9 03		lda #$03	                lda #err_defer
.d7c7	4c f7 d8	jmp $d8f7	                jmp error
.d7ca					dodoes:
.d7ca	7a		ply		                ply             ; LSB
.d7cb	68		pla		                pla             ; MSB
.d7cc	c8		iny		                iny
.d7cd	d0 01		bne $d7d0	                bne +
.d7cf	1a		inc a		                ina
.d7d0					+
.d7d0	84 26		sty $26		                sty tmp2
.d7d2	85 27		sta $27		                sta tmp2+1
.d7d4	ca		dex		                dex
.d7d5	ca		dex		                dex
.d7d6	7a		ply		                ply
.d7d7	68		pla		                pla
.d7d8	c8		iny		                iny
.d7d9	d0 01		bne $d7dc	                bne +
.d7db	1a		inc a		                ina
.d7dc					+
.d7dc	94 00		sty $00,x	                sty 0,x         ; LSB
.d7de	95 01		sta $01,x	                sta 1,x         ; MSB
.d7e0	6c 26 00	jmp ($0026)	                jmp (tmp2)
.d7e3					dovar:
.d7e3	7a		ply		                ply             ; LSB
.d7e4	68		pla		                pla             ; MSB
.d7e5	c8		iny		                iny
.d7e6	d0 01		bne $d7e9	                bne +
.d7e8	1a		inc a		                ina
.d7e9					+
.d7e9	ca		dex		                dex
.d7ea	ca		dex		                dex
.d7eb	95 01		sta $01,x	                sta 1,x
.d7ed	98		tya		                tya
.d7ee	95 00		sta $00,x	                sta 0,x
.d7f0	60		rts		                rts
.d7f1					byte_to_ascii:
.d7f1	48		pha		                pha
.d7f2	4a		lsr a		                lsr             ; convert high nibble first
.d7f3	4a		lsr a		                lsr
.d7f4	4a		lsr a		                lsr
.d7f5	4a		lsr a		                lsr
.d7f6	20 fa d7	jsr $d7fa	                jsr _nibble_to_ascii
.d7f9	68		pla		                pla
.d7fa					_nibble_to_ascii:
.d7fa	29 0f		and #$0f	                and #$0F
.d7fc	09 30		ora #$30	                ora #'0'
.d7fe	c9 3a		cmp #$3a	                cmp #$3A        ; '9+1
.d800	90 02		bcc $d804	                bcc +
.d802	69 06		adc #$06	                adc #$06
.d804	4c 12 8e	jmp $8e12	+               jmp emit_a
.d807	60		rts		                rts
.d808					compare_16bit:
.d808	b5 00		lda $00,x	                lda 0,x                 ; LSB of TOS
.d80a	d5 02		cmp $02,x	                cmp 2,x                 ; LSB of NOS
.d80c	f0 0a		beq $d818	                beq _equal
.d80e	b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d810	f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d812	09 01		ora #$01	                ora #1                  ; Make zero flag 0 because not equal
.d814	70 08		bvs $d81e	                bvs _overflow
.d816	80 08		bra $d820	                bra _not_equal
.d818					_equal:
.d818	b5 01		lda $01,x	                lda 1,x                 ; MSB of TOS
.d81a	f5 03		sbc $03,x	                sbc 3,x                 ; MSB of NOS
.d81c	50 04		bvc $d822	                bvc _done
.d81e					_overflow:
.d81e	49 80		eor #$80	                eor #$80                ; complement negative flag
.d820					_not_equal:
.d820	09 01		ora #$01	                ora #1                  ; if overflow, we can't be eqal
.d822					_done:
.d822	60		rts		                rts
.d823					current_to_dp:
.d823	a0 04		ldy #$04	                ldy #current_offset
.d825	b1 1e		lda ($1e),y	                lda (up),y      ; current is a byte variable
.d827	0a		asl a		                asl             ; turn it into an offset (in cells)
.d828	18		clc		                clc
.d829	69 06		adc #$06	                adc #wordlists_offset   ; add offset to wordlists base.
.d82b	a8		tay		                tay
.d82c	b1 1e		lda ($1e),y	                lda (up),y              ; get the dp for that wordlist.
.d82e	85 02		sta $02		                sta dp
.d830	c8		iny		                iny
.d831	b1 1e		lda ($1e),y	                lda (up),y
.d833	85 03		sta $03		                sta dp+1
.d835	60		rts		                rts
.d836					dp_to_current:
.d836	a0 04		ldy #$04	                ldy #current_offset
.d838	b1 1e		lda ($1e),y	                lda (up),y      ; current is a byte variable
.d83a	0a		asl a		                asl             ; turn it into an offset (in cells)
.d83b	18		clc		                clc
.d83c	69 06		adc #$06	                adc #wordlists_offset   ; add offset to wordlists base.
.d83e	a8		tay		                tay
.d83f	a5 02		lda $02		                lda dp
.d841	91 1e		sta ($1e),y	                sta (up),y              ; get the dp for that wordlist.
.d843	c8		iny		                iny
.d844	a5 03		lda $03		                lda dp+1
.d846	91 1e		sta ($1e),y	                sta (up),y
.d848	60		rts		                rts
.d849					interpret:
.d849					_loop:
.d849	20 fb 98	jsr $98fb	                jsr xt_parse_name       ; ( "string" -- addr u )
.d84c	b5 00		lda $00,x	                lda 0,x
.d84e	15 01		ora $01,x	                ora 1,x
.d850	f0 70		beq $d8c2	                beq _line_done
.d852	20 a5 a3	jsr $a3a5	                jsr xt_two_dup          ; ( addr u -- addr u addr u )
.d855	20 f7 8f	jsr $8ff7	                jsr xt_find_name        ; ( addr u addr u -- addr u nt|0 )
.d858	b5 00		lda $00,x	                lda 0,x
.d85a	15 01		ora $01,x	                ora 1,x
.d85c	d0 28		bne $d886	                bne _got_name_token
.d85e	e8		inx		                inx                     ; ( addr u 0 -- addr u )
.d85f	e8		inx		                inx
.d860	20 a6 96	jsr $96a6	                jsr xt_number           ; ( addr u -- u|d )
.d863	a5 16		lda $16		                lda state
.d865	f0 e2		beq $d849	                beq _loop
.d867	a9 20		lda #$20	                lda #$20
.d869	24 20		bit $20		                bit status
.d86b	f0 0d		beq $d87a	                beq _single_number
.d86d	20 9b a1	jsr $a19b	                jsr xt_swap
.d870	a0 93		ldy #$93	                ldy #>literal_runtime
.d872	a9 b4		lda #$b4	                lda #<literal_runtime
.d874	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.d877	20 8a 87	jsr $878a	                jsr xt_comma
.d87a					_single_number:
.d87a	a0 93		ldy #$93	                ldy #>literal_runtime
.d87c	a9 b4		lda #$b4	                lda #<literal_runtime
.d87e	20 84 d7	jsr $d784	                jsr cmpl_subroutine
.d881	20 8a 87	jsr $878a	                jsr xt_comma
.d884	80 c3		bra $d849	                bra _loop
.d886					_got_name_token:
.d886	b5 00		lda $00,x	                lda 0,x
.d888	95 04		sta $04,x	                sta 4,x
.d88a	b5 01		lda $01,x	                lda 1,x
.d88c	95 05		sta $05,x	                sta 5,x
.d88e	e8		inx		                inx
.d88f	e8		inx		                inx
.d890	e8		inx		                inx
.d891	e8		inx		                inx                     ; ( nt )
.d892	b5 00		lda $00,x	                lda 0,x
.d894	85 22		sta $22		                sta tmpbranch
.d896	b5 01		lda $01,x	                lda 1,x
.d898	85 23		sta $23		                sta tmpbranch+1
.d89a	20 fd 95	jsr $95fd	                jsr xt_name_to_int      ; ( nt - xt )
.d89d	a5 16		lda $16		                lda state
.d89f	d0 13		bne $d8b4	                bne _compile
.d8a1	a0 01		ldy #$01	                ldy #1
.d8a3	b1 22		lda ($22),y	                lda (tmpbranch),y
.d8a5	29 01		and #$01	                and #CO                 ; mask everything but Compile Only bit
.d8a7	f0 05		beq $d8ae	                beq _interpret
.d8a9	a9 02		lda #$02	                lda #err_compileonly
.d8ab	4c f7 d8	jmp $d8f7	                jmp error
.d8ae					_interpret:
.d8ae	20 59 8f	jsr $8f59	                jsr xt_execute
.d8b1	4c 49 d8	jmp $d849	                jmp _loop
.d8b4					_compile:
.d8b4	a0 01		ldy #$01	                ldy #1
.d8b6	b1 22		lda ($22),y	                lda (tmpbranch),y
.d8b8	29 04		and #$04	                and #IM                 ; Mask all but IM bit
.d8ba	d0 f2		bne $d8ae	                bne _interpret          ; IMMEDIATE word, execute right now
.d8bc	20 09 88	jsr $8809	                jsr xt_compile_comma
.d8bf	4c 49 d8	jmp $d849	                jmp _loop
.d8c2					_line_done:
.d8c2	e8		inx		                inx
.d8c3	e8		inx		                inx
.d8c4	e8		inx		                inx
.d8c5	e8		inx		                inx
.d8c6	60		rts		                rts
.d8c7					is_printable:
.d8c7	c9 20		cmp #$20	                cmp #AscSP              ; $20
.d8c9	90 08		bcc $d8d3	                bcc _done
.d8cb	c9 80		cmp #$80	                cmp #$7F + 1             ; '~'
.d8cd	b0 03		bcs $d8d2	                bcs _failed
.d8cf	38		sec		                sec
.d8d0	80 01		bra $d8d3	                bra _done
.d8d2					_failed:
.d8d2	18		clc		                clc
.d8d3					_done:
.d8d3	60		rts		                rts
.d8d4					is_whitespace:
.d8d4	c9 00		cmp #$00	                cmp #00         ; explicit comparison to leave Y untouched
.d8d6	90 08		bcc $d8e0	                bcc _done
.d8d8	c9 21		cmp #$21	                cmp #AscSP+1
.d8da	b0 03		bcs $d8df	                bcs _failed
.d8dc	38		sec		                sec
.d8dd	80 01		bra $d8e0	                bra _done
.d8df					_failed:
.d8df	18		clc		                clc
.d8e0					_done:
.d8e0	60		rts		                rts
.d8e1					underflow_1:
.d8e1	e0 77		cpx #$77	                cpx #dsp0-1
.d8e3	10 10		bpl $d8f5	                bpl underflow_error
.d8e5	60		rts		                rts
.d8e6					underflow_2:
.d8e6	e0 75		cpx #$75	                cpx #dsp0-3
.d8e8	10 0b		bpl $d8f5	                bpl underflow_error
.d8ea	60		rts		                rts
.d8eb					underflow_3:
.d8eb	e0 73		cpx #$73	                cpx #dsp0-5
.d8ed	10 06		bpl $d8f5	                bpl underflow_error
.d8ef	60		rts		                rts
.d8f0					underflow_4:
.d8f0	e0 71		cpx #$71	                cpx #dsp0-7
.d8f2	10 01		bpl $d8f5	                bpl underflow_error
.d8f4	60		rts		                rts
.d8f5					underflow_error:
.d8f5	a9 09		lda #$09	                lda #err_underflow      ; fall through to error
.d8f7					error:
.d8f7	48		pha		                pha                     ; save error
.d8f8	20 37 d9	jsr $d937	                jsr print_error
.d8fb	20 7f 89	jsr $897f	                jsr xt_cr
.d8fe	68		pla		                pla
.d8ff	c9 09		cmp #$09	                cmp #err_underflow      ; should we display return stack?
.d901	d0 17		bne $d91a	                bne _no_underflow
.d903	a9 0d		lda #$0d	                lda #err_returnstack
.d905	20 37 d9	jsr $d937	                jsr print_error
.d908	ba		tsx		                tsx
.d909					-
.d909	e8		inx		                inx
.d90a	f0 0b		beq $d917	                beq +
.d90c	20 0b a1	jsr $a10b	                jsr xt_space
.d90f	bd 00 01	lda $0100,x	                lda $100,x
.d912	20 f1 d7	jsr $d7f1	                jsr byte_to_ascii
.d915	80 f2		bra $d909	                bra -
.d917					+
.d917	20 7f 89	jsr $897f	                jsr xt_cr
.d91a					_no_underflow:
.d91a	4c 70 80	jmp $8070	                jmp xt_abort            ; no jsr, as we clobber return stack
.d91d					print_string_no_lf:
.d91d	0a		asl a		                asl
.d91e	a8		tay		                tay
.d91f	b9 89 d4	lda $d489,y	                lda string_table,y
.d922	85 28		sta $28		                sta tmp3                ; LSB
.d924	c8		iny		                iny
.d925	b9 89 d4	lda $d489,y	                lda string_table,y
.d928	85 29		sta $29		                sta tmp3+1              ; MSB
.d92a					print_common:
.d92a	a0 00		ldy #$00	                ldy #0
.d92c					_loop:
.d92c	b1 28		lda ($28),y	                lda (tmp3),y
.d92e	f0 06		beq $d936	                beq _done               ; strings are zero-terminated
.d930	20 12 8e	jsr $8e12	                jsr emit_a              ; allows vectoring via output
.d933	c8		iny		                iny
.d934	80 f6		bra $d92c	                bra _loop
.d936					_done:
.d936	60		rts		                rts
.d937					print_error:
.d937	0a		asl a		                asl
.d938	a8		tay		                tay
.d939	b9 5e d5	lda $d55e,y	                lda error_table,y
.d93c	85 28		sta $28		                sta tmp3                ; LSB
.d93e	c8		iny		                iny
.d93f	b9 5e d5	lda $d55e,y	                lda error_table,y
.d942	85 29		sta $29		                sta tmp3+1              ; MSB
.d944	20 2a d9	jsr $d92a	                jsr print_common
.d947	60		rts		                rts
.d948					print_string:
.d948	20 1d d9	jsr $d91d	                jsr print_string_no_lf
.d94b	4c 7f 89	jmp $897f	                jmp xt_cr               ; JSR/RTS because never compiled
.d94e					print_u:
.d94e	20 95 a7	jsr $a795	                jsr xt_zero                     ; 0
.d951	20 76 93	jsr $9376	                jsr xt_less_number_sign         ; <#
.d954	20 fa 97	jsr $97fa	                jsr xt_number_sign_s            ; #S
.d957	20 d8 97	jsr $97d8	                jsr xt_number_sign_greater      ; #>
.d95a	4c f0 a4	jmp $a4f0	                jmp xt_type                     ; JSR/RTS because never compiled

;******  Return to file: platform/platform-py65mon.asm

.f010					v_nmi:
.f010					v_reset:
.f010					v_irq:
.f010					kernel_init:
.f010	78		sei		                sei             ; Disable interrupts
.f011	a2 00		ldx #$00	                ldx #0
.f013	bd 2c f0	lda $f02c,x	-               lda s_kernel_id,x
.f016	f0 06		beq $f01e	                beq _done
.f018	20 27 f0	jsr $f027	                jsr kernel_putc
.f01b	e8		inx		                inx
.f01c	80 f5		bra $f013	                bra -
.f01e					_done:
.f01e	4c 00 80	jmp $8000	                jmp forth
.f021					kernel_getc:
.f021					_loop:
.f021	ad 04 f0	lda $f004	                lda $f004
.f024	f0 fb		beq $f021	                beq _loop
.f026	60		rts		                rts
.f027					kernel_putc:
.f027	8d 01 f0	sta $f001	                sta $f001
.f02a	60		rts		                rts
.f02b					platform_bye:
.f02b	00		brk #		                brk
.f02c					s_kernel_id:
>f02c	54 61 6c 69 20 46 6f 72		        .text "Tali Forth 2 default kernel for py65mon (04. Dec 2022)", AscLF, 0
>f034	74 68 20 32 20 64 65 66 61 75 6c 74 20 6b 65 72
>f044	6e 65 6c 20 66 6f 72 20 70 79 36 35 6d 6f 6e 20
>f054	28 30 34 2e 20 44 65 63 20 32 30 32 32 29 0a 00
>fffa	10 f0				.word v_nmi
>fffc	10 f0				.word v_reset
>fffe	10 f0				.word v_irq

;******  End of listing
